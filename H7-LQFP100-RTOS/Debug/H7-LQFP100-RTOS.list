
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001504c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080152ec  080152ec  000252ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801569c  0801569c  0002569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080156a4  080156a4  000256a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080156a8  080156a8  000256a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  080156ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fdc  24000100  080157ac  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050dc  080157ac  000350dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003263f  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005473  00000000  00000000  0006276d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002620  00000000  00000000  00067be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002428  00000000  00000000  0006a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a9c  00000000  00000000  0006c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000308a9  00000000  00000000  000740c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001944a8  00000000  00000000  000a496d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00238e15  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad40  00000000  00000000  00238e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080152d4 	.word	0x080152d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	080152d4 	.word	0x080152d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 fbb8 	bl	8010e10 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 fbad 	bl	8010e10 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 fba2 	bl	8010e10 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f013 ff62 	bl	8014598 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000688 	.word	0x24000688
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	0801532c 	.word	0x0801532c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00d fe9d 	bl	800e43c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	08000963 	.word	0x08000963
 8000728:	0800098f 	.word	0x0800098f
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094d 	.word	0x0800094d
 8000770:	08000979 	.word	0x08000979
 8000774:	080009a3 	.word	0x080009a3
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f013 fef1 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fd83 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f013 fee7 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fd79 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f013 fedd 	bl	8014598 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 fb32 	bl	8004e6e <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f004 f973 	bl	8004af8 <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f013 febf 	bl	8014598 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 fb14 	bl	8004e6e <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f004 f955 	bl	8004af8 <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f013 fea1 	bl	8014598 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00c f895 	bl	800c994 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f004 f997 	bl	8004ba8 <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00c f8f6 	bl	800ca74 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 fa4c 	bl	8004d28 <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f013 fe80 	bl	8014598 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f013 fe6b 	bl	8014598 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f013 fe56 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fce8 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f013 fe4c 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fcde 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f013 fe42 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fcd4 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f013 fe38 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fcca 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f013 fe2e 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fcbf 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 800094a:	e0e5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094e:	f013 fe23 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fcb4 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 8000960:	e0da      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000964:	f013 fe18 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	2201      	movs	r2, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fca9 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 8000976:	e0cf      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000978:	4837      	ldr	r0, [pc, #220]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 800097a:	f013 fe0d 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fc9e 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 800098c:	e0c4      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 8000990:	f013 fe02 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fc94 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 80009a0:	e0ba      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a4:	f013 fdf8 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fc8a 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f013 fdee 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 fc7f 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f013 fde3 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fc74 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f013 fdd8 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fc69 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	2400068c 	.word	0x2400068c
 80009fc:	240005cc 	.word	0x240005cc
 8000a00:	08015344 	.word	0x08015344
 8000a04:	58020400 	.word	0x58020400
 8000a08:	0801534c 	.word	0x0801534c
 8000a0c:	08015358 	.word	0x08015358
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	08015360 	.word	0x08015360
 8000a20:	0801536c 	.word	0x0801536c
 8000a24:	24000684 	.word	0x24000684
 8000a28:	24000534 	.word	0x24000534
 8000a2c:	08015380 	.word	0x08015380
 8000a30:	24000000 	.word	0x24000000
 8000a34:	0801538c 	.word	0x0801538c
 8000a38:	08015398 	.word	0x08015398
 8000a3c:	080153a4 	.word	0x080153a4
 8000a40:	080153b0 	.word	0x080153b0
 8000a44:	080153bc 	.word	0x080153bc
 8000a48:	080153cc 	.word	0x080153cc
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	080153d8 	.word	0x080153d8
 8000a54:	080153e4 	.word	0x080153e4
 8000a58:	080153f4 	.word	0x080153f4
 8000a5c:	08015404 	.word	0x08015404
 8000a60:	08015410 	.word	0x08015410
 8000a64:	0801541c 	.word	0x0801541c
 8000a68:	08015428 	.word	0x08015428
 8000a6c:	08015434 	.word	0x08015434
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f013 fd91 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fc22 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f013 fd86 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fc18 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f013 fd7c 	bl	8014598 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fc0e 	bl	80082c8 <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f013 fd72 	bl	8014598 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f013 fd6e 	bl	8014598 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f013 fd67 	bl	8014598 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f013 fd60 	bl	8014598 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f013 fd59 	bl	8014598 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f013 fd52 	bl	8014598 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f013 fd4b 	bl	8014598 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08015440 	.word	0x08015440
 8000b24:	58020800 	.word	0x58020800
 8000b28:	0801544c 	.word	0x0801544c
 8000b2c:	08015458 	.word	0x08015458
 8000b30:	08015468 	.word	0x08015468
 8000b34:	08015478 	.word	0x08015478
 8000b38:	2400067e 	.word	0x2400067e
 8000b3c:	08015480 	.word	0x08015480
 8000b40:	08015488 	.word	0x08015488
 8000b44:	2400067f 	.word	0x2400067f
 8000b48:	08015490 	.word	0x08015490
 8000b4c:	0801549c 	.word	0x0801549c
 8000b50:	24000680 	.word	0x24000680
 8000b54:	080154a4 	.word	0x080154a4

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 fa38 	bl	8002fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f892 	bl	8000c88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f910 	bl	8000d88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fe62 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fe30 	bl	80017d0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fd94 	bl	800169c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fde0 	bl	8001738 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb20 	bl	80011bc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fc12 	bl	80013a4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fd16 	bl	80015b0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fc66 	bl	8001454 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa54 	bl	8001034 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f92c 	bl	8000de8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 fae2 	bl	8001158 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000b94:	f000 fbae 	bl	80012f4 <MX_SPI1_Init>
  MX_RTC_Init();
 8000b98:	f000 fb50 	bl	800123c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4825      	ldr	r0, [pc, #148]	; (8000c34 <main+0xdc>)
 8000ba0:	f00c f808 	bl	800cbb4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4824      	ldr	r0, [pc, #144]	; (8000c38 <main+0xe0>)
 8000ba8:	f00c f804 	bl	800cbb4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4823      	ldr	r0, [pc, #140]	; (8000c3c <main+0xe4>)
 8000bb0:	f00c f800 	bl	800cbb4 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bb4:	f00f ffd6 	bl	8010b64 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	f010 f9d1 	bl	8010f64 <osMessageQueueNew>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <main+0xe8>)
 8000bc6:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <main+0xec>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	481e      	ldr	r0, [pc, #120]	; (8000c48 <main+0xf0>)
 8000bce:	f010 f813 	bl	8010bf8 <osThreadNew>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <main+0xf4>)
 8000bd6:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <main+0xf8>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	481d      	ldr	r0, [pc, #116]	; (8000c54 <main+0xfc>)
 8000bde:	f010 f80b 	bl	8010bf8 <osThreadNew>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <main+0x100>)
 8000be6:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <main+0x104>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	481c      	ldr	r0, [pc, #112]	; (8000c60 <main+0x108>)
 8000bee:	f010 f803 	bl	8010bf8 <osThreadNew>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <main+0x10c>)
 8000bf6:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <main+0x110>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <main+0x114>)
 8000bfe:	f00f fffb 	bl	8010bf8 <osThreadNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <main+0x118>)
 8000c06:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <main+0x11c>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <main+0x120>)
 8000c0e:	f00f fff3 	bl	8010bf8 <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <main+0x124>)
 8000c16:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f010 f8ba 	bl	8010d92 <osEventFlagsNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <main+0x128>)
 8000c22:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c24:	f000 fe7e 	bl	8001924 <system_setup>
  printf("Starting kernal...\n");
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <main+0x12c>)
 8000c2a:	f013 fcb5 	bl	8014598 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c2e:	f00f ffbd 	bl	8010bac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c32:	e7fe      	b.n	8000c32 <main+0xda>
 8000c34:	240004e8 	.word	0x240004e8
 8000c38:	24000534 	.word	0x24000534
 8000c3c:	24000580 	.word	0x24000580
 8000c40:	24000674 	.word	0x24000674
 8000c44:	08015510 	.word	0x08015510
 8000c48:	080020a9 	.word	0x080020a9
 8000c4c:	24000660 	.word	0x24000660
 8000c50:	08015534 	.word	0x08015534
 8000c54:	080020ed 	.word	0x080020ed
 8000c58:	24000664 	.word	0x24000664
 8000c5c:	08015558 	.word	0x08015558
 8000c60:	08002131 	.word	0x08002131
 8000c64:	24000668 	.word	0x24000668
 8000c68:	0801557c 	.word	0x0801557c
 8000c6c:	08002175 	.word	0x08002175
 8000c70:	2400066c 	.word	0x2400066c
 8000c74:	080155a0 	.word	0x080155a0
 8000c78:	08002199 	.word	0x08002199
 8000c7c:	24000670 	.word	0x24000670
 8000c80:	24000688 	.word	0x24000688
 8000c84:	080154ac 	.word	0x080154ac

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09c      	sub	sp, #112	; 0x70
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	224c      	movs	r2, #76	; 0x4c
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f013 fb10 	bl	80142bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f013 fb0a 	bl	80142bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f007 fc5b 	bl	8008564 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <SystemClock_Config+0xf8>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	4a32      	ldr	r2, [pc, #200]	; (8000d80 <SystemClock_Config+0xf8>)
 8000cb8:	f023 0301 	bic.w	r3, r3, #1
 8000cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <SystemClock_Config+0xf8>)
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <SystemClock_Config+0xfc>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <SystemClock_Config+0xfc>)
 8000cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <SystemClock_Config+0xfc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce4:	bf00      	nop
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <SystemClock_Config+0xfc>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf2:	d1f8      	bne.n	8000ce6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d10:	230c      	movs	r3, #12
 8000d12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d20:	230c      	movs	r3, #12
 8000d22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f007 fc51 	bl	80085d8 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d3c:	f001 fa6c 	bl	8002218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	233f      	movs	r3, #63	; 0x3f
 8000d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2303      	movs	r3, #3
 8000d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2101      	movs	r1, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f008 f890 	bl	8008e8c <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d72:	f001 fa51 	bl	8002218 <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3770      	adds	r7, #112	; 0x70
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024800 	.word	0x58024800

08000d88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0b0      	sub	sp, #192	; 0xc0
 8000d8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	22c0      	movs	r2, #192	; 0xc0
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f013 fa91 	bl	80142bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000daa:	2309      	movs	r3, #9
 8000dac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000dae:	2304      	movs	r3, #4
 8000db0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000dc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 fc29 	bl	8009628 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ddc:	f001 fa1c 	bl	8002218 <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	37c0      	adds	r7, #192	; 0xc0
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e0c:	4b7c      	ldr	r3, [pc, #496]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e0e:	4a7d      	ldr	r2, [pc, #500]	; (8001004 <MX_ADC1_Init+0x21c>)
 8000e10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e12:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1a:	4b79      	ldr	r3, [pc, #484]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e20:	4b77      	ldr	r3, [pc, #476]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e26:	4b76      	ldr	r3, [pc, #472]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	4b74      	ldr	r3, [pc, #464]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e32:	4b73      	ldr	r3, [pc, #460]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e38:	4b71      	ldr	r3, [pc, #452]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e3a:	220b      	movs	r2, #11
 8000e3c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b70      	ldr	r3, [pc, #448]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b6e      	ldr	r3, [pc, #440]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e50:	4b6b      	ldr	r3, [pc, #428]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e52:	2203      	movs	r2, #3
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e56:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e5e:	4b68      	ldr	r3, [pc, #416]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e64:	4b66      	ldr	r3, [pc, #408]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	4864      	ldr	r0, [pc, #400]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e6e:	f002 fb3b 	bl	80034e8 <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e78:	f001 f9ce 	bl	8002218 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	485e      	ldr	r0, [pc, #376]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e88:	f003 fc56 	bl	8004738 <HAL_ADCEx_MultiModeConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e92:	f001 f9c1 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <MX_ADC1_Init+0x220>)
 8000e98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ea6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4851      	ldr	r0, [pc, #324]	; (8001000 <MX_ADC1_Init+0x218>)
 8000eba:	f002 fd99 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ec4:	f001 f9a8 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ec8:	4b50      	ldr	r3, [pc, #320]	; (800100c <MX_ADC1_Init+0x224>)
 8000eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	484a      	ldr	r0, [pc, #296]	; (8001000 <MX_ADC1_Init+0x218>)
 8000ed6:	f002 fd8b 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ee0:	f001 f99a 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <MX_ADC1_Init+0x228>)
 8000ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4843      	ldr	r0, [pc, #268]	; (8001000 <MX_ADC1_Init+0x218>)
 8000ef2:	f002 fd7d 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000efc:	f001 f98c 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <MX_ADC1_Init+0x22c>)
 8000f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f04:	2318      	movs	r3, #24
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	483c      	ldr	r0, [pc, #240]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f0e:	f002 fd6f 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f18:	f001 f97e 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f1c:	4b3e      	ldr	r3, [pc, #248]	; (8001018 <MX_ADC1_Init+0x230>)
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4835      	ldr	r0, [pc, #212]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f2c:	f002 fd60 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f36:	f001 f96f 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <MX_ADC1_Init+0x234>)
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f3e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	482d      	ldr	r0, [pc, #180]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f4a:	f002 fd51 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f54:	f001 f960 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f58:	4b31      	ldr	r3, [pc, #196]	; (8001020 <MX_ADC1_Init+0x238>)
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f5c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4826      	ldr	r0, [pc, #152]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f68:	f002 fd42 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f72:	f001 f951 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MX_ADC1_Init+0x23c>)
 8000f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f7a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	481e      	ldr	r0, [pc, #120]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f86:	f002 fd33 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000f90:	f001 f942 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <MX_ADC1_Init+0x240>)
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000f98:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000f9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4817      	ldr	r0, [pc, #92]	; (8001000 <MX_ADC1_Init+0x218>)
 8000fa4:	f002 fd24 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fae:	f001 f933 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_ADC1_Init+0x244>)
 8000fb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480e      	ldr	r0, [pc, #56]	; (8001000 <MX_ADC1_Init+0x218>)
 8000fc6:	f002 fd13 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fd0:	f001 f922 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_ADC1_Init+0x248>)
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fd8:	f240 2306 	movw	r3, #518	; 0x206
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_ADC1_Init+0x218>)
 8000fe8:	f002 fd02 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000ff2:	f001 f911 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2400011c 	.word	0x2400011c
 8001004:	40022000 	.word	0x40022000
 8001008:	0c900008 	.word	0x0c900008
 800100c:	10c00010 	.word	0x10c00010
 8001010:	14f00020 	.word	0x14f00020
 8001014:	1d500080 	.word	0x1d500080
 8001018:	21800100 	.word	0x21800100
 800101c:	25b00200 	.word	0x25b00200
 8001020:	2a000400 	.word	0x2a000400
 8001024:	2e300800 	.word	0x2e300800
 8001028:	3ac04000 	.word	0x3ac04000
 800102c:	3ef08000 	.word	0x3ef08000
 8001030:	47520000 	.word	0x47520000

08001034 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <MX_ADC3_Init+0x110>)
 800104e:	4a3e      	ldr	r2, [pc, #248]	; (8001148 <MX_ADC3_Init+0x114>)
 8001050:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <MX_ADC3_Init+0x110>)
 8001054:	2208      	movs	r2, #8
 8001056:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001058:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <MX_ADC3_Init+0x110>)
 800105a:	2201      	movs	r2, #1
 800105c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <MX_ADC3_Init+0x110>)
 8001060:	2204      	movs	r2, #4
 8001062:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <MX_ADC3_Init+0x110>)
 8001066:	2200      	movs	r2, #0
 8001068:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <MX_ADC3_Init+0x110>)
 800106c:	2201      	movs	r2, #1
 800106e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <MX_ADC3_Init+0x110>)
 8001072:	2204      	movs	r2, #4
 8001074:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b33      	ldr	r3, [pc, #204]	; (8001144 <MX_ADC3_Init+0x110>)
 8001078:	2200      	movs	r2, #0
 800107a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <MX_ADC3_Init+0x110>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <MX_ADC3_Init+0x110>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_ADC3_Init+0x110>)
 800108a:	2203      	movs	r2, #3
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <MX_ADC3_Init+0x110>)
 8001090:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_ADC3_Init+0x110>)
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <MX_ADC3_Init+0x110>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010a4:	4827      	ldr	r0, [pc, #156]	; (8001144 <MX_ADC3_Init+0x110>)
 80010a6:	f002 fa1f 	bl	80034e8 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010b0:	f001 f8b2 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_ADC3_Init+0x118>)
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2306      	movs	r3, #6
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010bc:	2307      	movs	r3, #7
 80010be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c6:	2304      	movs	r3, #4
 80010c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	481b      	ldr	r0, [pc, #108]	; (8001144 <MX_ADC3_Init+0x110>)
 80010d8:	f002 fc8a 	bl	80039f0 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f001 f899 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_ADC3_Init+0x11c>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ea:	230c      	movs	r3, #12
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <MX_ADC3_Init+0x110>)
 80010f4:	f002 fc7c 	bl	80039f0 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80010fe:	f001 f88b 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001106:	2312      	movs	r3, #18
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_ADC3_Init+0x110>)
 8001110:	f002 fc6e 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800111a:	f001 f87d 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <MX_ADC3_Init+0x120>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001122:	2318      	movs	r3, #24
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <MX_ADC3_Init+0x110>)
 800112c:	f002 fc60 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001136:	f001 f86f 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24000180 	.word	0x24000180
 8001148:	58026000 	.word	0x58026000
 800114c:	cb840000 	.word	0xcb840000
 8001150:	cfb80000 	.word	0xcfb80000
 8001154:	04300002 	.word	0x04300002

08001158 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2224      	movs	r2, #36	; 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f013 f8a9 	bl	80142bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_DAC1_Init+0x5c>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_DAC1_Init+0x60>)
 800116e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_DAC1_Init+0x5c>)
 8001172:	f003 fc9f 	bl	8004ab4 <HAL_DAC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800117c:	f001 f84c 	bl	8002218 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001184:	230a      	movs	r3, #10
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800118c:	2301      	movs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_DAC1_Init+0x5c>)
 800119c:	f003 feba 	bl	8004f14 <HAL_DAC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011a6:	f001 f837 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240002d4 	.word	0x240002d4
 80011b8:	40007400 	.word	0x40007400

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	f007 f880 	bl	80082fc <HAL_I2C_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001202:	f001 f809 	bl	8002218 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	2100      	movs	r1, #0
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_I2C1_Init+0x74>)
 800120a:	f007 f913 	bl	8008434 <HAL_I2CEx_ConfigAnalogFilter>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f001 f800 	bl	8002218 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_I2C1_Init+0x74>)
 800121c:	f007 f955 	bl	80084ca <HAL_I2CEx_ConfigDigitalFilter>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 fff7 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	24000360 	.word	0x24000360
 8001234:	40005400 	.word	0x40005400
 8001238:	00506682 	.word	0x00506682

0800123c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <MX_RTC_Init+0xb0>)
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <MX_RTC_Init+0xb4>)
 8001258:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <MX_RTC_Init+0xb0>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_RTC_Init+0xb0>)
 8001262:	227f      	movs	r2, #127	; 0x7f
 8001264:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_RTC_Init+0xb0>)
 8001268:	22ff      	movs	r2, #255	; 0xff
 800126a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_RTC_Init+0xb0>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_RTC_Init+0xb0>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_RTC_Init+0xb0>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_RTC_Init+0xb0>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001284:	4819      	ldr	r0, [pc, #100]	; (80012ec <MX_RTC_Init+0xb0>)
 8001286:	f00a fecd 	bl	800c024 <HAL_RTC_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001290:	f000 ffc2 	bl	8002218 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001294:	2300      	movs	r3, #0
 8001296:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001298:	2300      	movs	r3, #0
 800129a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800129c:	2300      	movs	r3, #0
 800129e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2201      	movs	r2, #1
 80012ac:	4619      	mov	r1, r3
 80012ae:	480f      	ldr	r0, [pc, #60]	; (80012ec <MX_RTC_Init+0xb0>)
 80012b0:	f00a ff3a 	bl	800c128 <HAL_RTC_SetTime>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012ba:	f000 ffad 	bl	8002218 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80012be:	2305      	movs	r3, #5
 80012c0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80012c2:	2305      	movs	r3, #5
 80012c4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80012c6:	2331      	movs	r3, #49	; 0x31
 80012c8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80012ca:	2324      	movs	r3, #36	; 0x24
 80012cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	2201      	movs	r2, #1
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_RTC_Init+0xb0>)
 80012d6:	f00b f821 	bl	800c31c <HAL_RTC_SetDate>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012e0:	f000 ff9a 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	240003b4 	.word	0x240003b4
 80012f0:	58004000 	.word	0x58004000

080012f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_SPI1_Init+0xa8>)
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <MX_SPI1_Init+0xac>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_SPI1_Init+0xa8>)
 8001300:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_SPI1_Init+0xa8>)
 8001308:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800130c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_SPI1_Init+0xa8>)
 8001310:	220f      	movs	r2, #15
 8001312:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_SPI1_Init+0xa8>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_SPI1_Init+0xa8>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_SPI1_Init+0xa8>)
 8001322:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001326:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_SPI1_Init+0xa8>)
 800132a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800132e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_SPI1_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_SPI1_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_SPI1_Init+0xa8>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_SPI1_Init+0xa8>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_SPI1_Init+0xa8>)
 800134a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPI1_Init+0xa8>)
 8001352:	2200      	movs	r2, #0
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_SPI1_Init+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPI1_Init+0xa8>)
 800135e:	2200      	movs	r2, #0
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_SPI1_Init+0xa8>)
 8001364:	2200      	movs	r2, #0
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPI1_Init+0xa8>)
 800136a:	2200      	movs	r2, #0
 800136c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_SPI1_Init+0xa8>)
 8001370:	2200      	movs	r2, #0
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPI1_Init+0xa8>)
 8001376:	2200      	movs	r2, #0
 8001378:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_SPI1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPI1_Init+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_SPI1_Init+0xa8>)
 8001388:	f00b f96e 	bl	800c668 <HAL_SPI_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001392:	f000 ff41 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	240003d8 	.word	0x240003d8
 80013a0:	40013000 	.word	0x40013000

080013a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_SPI2_Init+0xa8>)
 80013aa:	4a29      	ldr	r2, [pc, #164]	; (8001450 <MX_SPI2_Init+0xac>)
 80013ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <MX_SPI2_Init+0xa8>)
 80013b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <MX_SPI2_Init+0xa8>)
 80013b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <MX_SPI2_Init+0xa8>)
 80013c0:	220f      	movs	r2, #15
 80013c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_SPI2_Init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_SPI2_Init+0xa8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_SPI2_Init+0xa8>)
 80013d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_SPI2_Init+0xa8>)
 80013da:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80013de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_SPI2_Init+0xa8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_SPI2_Init+0xa8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_SPI2_Init+0xa8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_SPI2_Init+0xa8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_SPI2_Init+0xa8>)
 80013fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_SPI2_Init+0xa8>)
 8001402:	2200      	movs	r2, #0
 8001404:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_SPI2_Init+0xa8>)
 8001408:	2200      	movs	r2, #0
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_SPI2_Init+0xa8>)
 800140e:	2200      	movs	r2, #0
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_SPI2_Init+0xa8>)
 8001414:	2200      	movs	r2, #0
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_SPI2_Init+0xa8>)
 800141a:	2200      	movs	r2, #0
 800141c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_SPI2_Init+0xa8>)
 8001420:	2200      	movs	r2, #0
 8001422:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_SPI2_Init+0xa8>)
 8001426:	2200      	movs	r2, #0
 8001428:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_SPI2_Init+0xa8>)
 800142c:	2200      	movs	r2, #0
 800142e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_SPI2_Init+0xa8>)
 8001432:	2200      	movs	r2, #0
 8001434:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_SPI2_Init+0xa8>)
 8001438:	f00b f916 	bl	800c668 <HAL_SPI_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001442:	f000 fee9 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000460 	.word	0x24000460
 8001450:	40003800 	.word	0x40003800

08001454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b09a      	sub	sp, #104	; 0x68
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	222c      	movs	r2, #44	; 0x2c
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f012 ff14 	bl	80142bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001494:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <MX_TIM1_Init+0x154>)
 8001496:	4a45      	ldr	r2, [pc, #276]	; (80015ac <MX_TIM1_Init+0x158>)
 8001498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 800149a:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <MX_TIM1_Init+0x154>)
 800149c:	225f      	movs	r2, #95	; 0x5f
 800149e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80014a6:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014a8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80014ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014c0:	4839      	ldr	r0, [pc, #228]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014c2:	f00b fa10 	bl	800c8e6 <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 fea4 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014da:	4619      	mov	r1, r3
 80014dc:	4832      	ldr	r0, [pc, #200]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014de:	f00c f84f 	bl	800d580 <HAL_TIM_ConfigClockSource>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014e8:	f000 fe96 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ec:	482e      	ldr	r0, [pc, #184]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014ee:	f00b fcbb 	bl	800ce68 <HAL_TIM_PWM_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014f8:	f000 fe8e 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001508:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800150c:	4619      	mov	r1, r3
 800150e:	4826      	ldr	r0, [pc, #152]	; (80015a8 <MX_TIM1_Init+0x154>)
 8001510:	f00c fd8c 	bl	800e02c <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800151a:	f000 fe7d 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151e:	2360      	movs	r3, #96	; 0x60
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001522:	f240 13df 	movw	r3, #479	; 0x1df
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_TIM1_Init+0x154>)
 8001546:	f00b ff07 	bl	800d358 <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001550:	f000 fe62 	bl	8002218 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM1_Init+0x154>)
 800158a:	f00c fddd 	bl	800e148 <HAL_TIMEx_ConfigBreakDeadTime>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001594:	f000 fe40 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM1_Init+0x154>)
 800159a:	f001 f9cb 	bl	8002934 <HAL_TIM_MspPostInit>

}
 800159e:	bf00      	nop
 80015a0:	3768      	adds	r7, #104	; 0x68
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	240004e8 	.word	0x240004e8
 80015ac:	40010000 	.word	0x40010000

080015b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015ec:	222f      	movs	r2, #47	; 0x2f
 80015ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015f8:	f640 4234 	movw	r2, #3124	; 0xc34
 80015fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160a:	4823      	ldr	r0, [pc, #140]	; (8001698 <MX_TIM2_Init+0xe8>)
 800160c:	f00b f96b 	bl	800c8e6 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001616:	f000 fdff 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001624:	4619      	mov	r1, r3
 8001626:	481c      	ldr	r0, [pc, #112]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001628:	f00b ffaa 	bl	800d580 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001632:	f000 fdf1 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001636:	4818      	ldr	r0, [pc, #96]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001638:	f00b fc16 	bl	800ce68 <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001642:	f000 fde9 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001646:	2320      	movs	r3, #32
 8001648:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001656:	f00c fce9 	bl	800e02c <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001660:	f000 fdda 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	; 0x60
 8001666:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	220c      	movs	r2, #12
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM2_Init+0xe8>)
 800167c:	f00b fe6c 	bl	800d358 <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001686:	f000 fdc7 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM2_Init+0xe8>)
 800168c:	f001 f952 	bl	8002934 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	; 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000534 	.word	0x24000534

0800169c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_TIM3_Init+0x94>)
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <MX_TIM3_Init+0x98>)
 80016be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_TIM3_Init+0x94>)
 80016c2:	222f      	movs	r2, #47	; 0x2f
 80016c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM3_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_TIM3_Init+0x94>)
 80016ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_TIM3_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_TIM3_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <MX_TIM3_Init+0x94>)
 80016e2:	f00b f900 	bl	800c8e6 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016ec:	f000 fd94 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_TIM3_Init+0x94>)
 80016fe:	f00b ff3f 	bl	800d580 <HAL_TIM_ConfigClockSource>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001708:	f000 fd86 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_TIM3_Init+0x94>)
 800171a:	f00c fc87 	bl	800e02c <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001724:	f000 fd78 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	24000580 	.word	0x24000580
 8001734:	40000400 	.word	0x40000400

08001738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <MX_USART1_UART_Init+0x94>)
 8001740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001744:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001782:	f00c fd7d 	bl	800e280 <HAL_UART_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 fd44 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001794:	f00f f8d7 	bl	8010946 <HAL_UARTEx_SetTxFifoThreshold>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800179e:	f000 fd3b 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 80017a6:	f00f f90c 	bl	80109c2 <HAL_UARTEx_SetRxFifoThreshold>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017b0:	f000 fd32 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 80017b6:	f00f f88d 	bl	80108d4 <HAL_UARTEx_DisableFifoMode>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017c0:	f000 fd2a 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	240005cc 	.word	0x240005cc
 80017cc:	40011000 	.word	0x40011000

080017d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_DMA_Init+0x5c>)
 80017d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_DMA_Init+0x5c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_DMA_Init+0x5c>)
 80017e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2105      	movs	r1, #5
 80017f8:	200b      	movs	r0, #11
 80017fa:	f003 f933 	bl	8004a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017fe:	200b      	movs	r0, #11
 8001800:	f003 f94a 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2105      	movs	r1, #5
 8001808:	200c      	movs	r0, #12
 800180a:	f003 f92b 	bl	8004a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800180e:	200c      	movs	r0, #12
 8001810:	f003 f942 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2105      	movs	r1, #5
 8001818:	2010      	movs	r0, #16
 800181a:	f003 f923 	bl	8004a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800181e:	2010      	movs	r0, #16
 8001820:	f003 f93a 	bl	8004a98 <HAL_NVIC_EnableIRQ>

}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	4a32      	ldr	r2, [pc, #200]	; (8001918 <MX_GPIO_Init+0xe8>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <MX_GPIO_Init+0xe8>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a23      	ldr	r2, [pc, #140]	; (8001918 <MX_GPIO_Init+0xe8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80018c4:	4815      	ldr	r0, [pc, #84]	; (800191c <MX_GPIO_Init+0xec>)
 80018c6:	f006 fcff 	bl	80082c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2164      	movs	r1, #100	; 0x64
 80018ce:	4814      	ldr	r0, [pc, #80]	; (8001920 <MX_GPIO_Init+0xf0>)
 80018d0:	f006 fcfa 	bl	80082c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018d4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80018d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <MX_GPIO_Init+0xec>)
 80018ee:	f006 fb23 	bl	8007f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80018f2:	2364      	movs	r3, #100	; 0x64
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_GPIO_Init+0xf0>)
 800190a:	f006 fb15 	bl	8007f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	58024400 	.word	0x58024400
 800191c:	58020800 	.word	0x58020800
 8001920:	58020400 	.word	0x58020400

08001924 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001932:	210c      	movs	r1, #12
 8001934:	4818      	ldr	r0, [pc, #96]	; (8001998 <system_setup+0x74>)
 8001936:	f00b faf9 	bl	800cf2c <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800193a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800193e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001942:	4816      	ldr	r0, [pc, #88]	; (800199c <system_setup+0x78>)
 8001944:	f002 fe94 	bl	8004670 <HAL_ADCEx_Calibration_Start>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 800194e:	f000 fc63 	bl	8002218 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001952:	220b      	movs	r2, #11
 8001954:	4912      	ldr	r1, [pc, #72]	; (80019a0 <system_setup+0x7c>)
 8001956:	4811      	ldr	r0, [pc, #68]	; (800199c <system_setup+0x78>)
 8001958:	f001 ff68 	bl	800382c <HAL_ADC_Start_DMA>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 8001962:	f000 fc59 	bl	8002218 <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001966:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800196a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <system_setup+0x80>)
 8001970:	f002 fe7e 	bl	8004670 <HAL_ADCEx_Calibration_Start>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 800197a:	f000 fc4d 	bl	8002218 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800197e:	2204      	movs	r2, #4
 8001980:	4909      	ldr	r1, [pc, #36]	; (80019a8 <system_setup+0x84>)
 8001982:	4808      	ldr	r0, [pc, #32]	; (80019a4 <system_setup+0x80>)
 8001984:	f001 ff52 	bl	800382c <HAL_ADC_Start_DMA>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 800198e:	f000 fc43 	bl	8002218 <Error_Handler>
	  	}
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	24000534 	.word	0x24000534
 800199c:	2400011c 	.word	0x2400011c
 80019a0:	24000700 	.word	0x24000700
 80019a4:	24000180 	.word	0x24000180
 80019a8:	24000720 	.word	0x24000720

080019ac <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	481d      	ldr	r0, [pc, #116]	; (8001a34 <getTimestamp+0x88>)
 80019be:	f00a fc51 	bl	800c264 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	481a      	ldr	r0, [pc, #104]	; (8001a34 <getTimestamp+0x88>)
 80019cc:	f00a fd2e 	bl	800c42c <HAL_RTC_GetDate>
    uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d6:	fb03 f202 	mul.w	r2, r3, r2
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <getTimestamp+0x88>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24



    buffer[0] = currentDate.Year;		// 0-99
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	701a      	strb	r2, [r3, #0]
    buffer[1] = currentDate.Month;		// 1-12
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	7b7a      	ldrb	r2, [r7, #13]
 80019f4:	701a      	strb	r2, [r3, #0]
    buffer[2] = currentDate.Date;		// 1-31
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3302      	adds	r3, #2
 80019fa:	7bba      	ldrb	r2, [r7, #14]
 80019fc:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3303      	adds	r3, #3
 8001a02:	7c3a      	ldrb	r2, [r7, #16]
 8001a04:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	7c7a      	ldrb	r2, [r7, #17]
 8001a0c:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3305      	adds	r3, #5
 8001a12:	7cba      	ldrb	r2, [r7, #18]
 8001a14:	701a      	strb	r2, [r3, #0]
    buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	0a1a      	lsrs	r2, r3, #8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3306      	adds	r3, #6
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
    buffer[7] = milliseconds & 0xFF;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3307      	adds	r3, #7
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]

}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	240003b4 	.word	0x240003b4

08001a38 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f012 fc19 	bl	8014280 <malloc>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	68b9      	ldr	r1, [r7, #8]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f012 fc21 	bl	80142a0 <memcpy>
    packet.size = size;
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a6e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001a82:	bf00      	nop
 8001a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a88:	483f      	ldr	r0, [pc, #252]	; (8001b88 <sample_pmt+0x10c>)
 8001a8a:	f006 fc05 	bl	8008298 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f7      	bne.n	8001a84 <sample_pmt+0x8>
	}
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001a94:	200e      	movs	r0, #14
 8001a96:	f012 fbf3 	bl	8014280 <malloc>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f012 fbee 	bl	8014280 <malloc>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001aa8:	2008      	movs	r0, #8
 8001aaa:	f012 fbe9 	bl	8014280 <malloc>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7ff ff7a 	bl	80019ac <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	220e      	movs	r2, #14
 8001abc:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	220d      	movs	r2, #13
 8001ac4:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	22bb      	movs	r2, #187	; 0xbb
 8001aca:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	22bb      	movs	r2, #187	; 0xbb
 8001ad2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <sample_pmt+0x110>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <sample_pmt+0x110>)
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3303      	adds	r3, #3
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3304      	adds	r3, #4
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	7812      	ldrb	r2, [r2, #0]
 8001af8:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3305      	adds	r3, #5
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	7852      	ldrb	r2, [r2, #1]
 8001b02:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3306      	adds	r3, #6
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3307      	adds	r3, #7
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	7852      	ldrb	r2, [r2, #1]
 8001b16:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	7892      	ldrb	r2, [r2, #2]
 8001b20:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3309      	adds	r3, #9
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	78d2      	ldrb	r2, [r2, #3]
 8001b2a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	330a      	adds	r3, #10
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	7912      	ldrb	r2, [r2, #4]
 8001b34:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	330b      	adds	r3, #11
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	7952      	ldrb	r2, [r2, #5]
 8001b3e:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	330c      	adds	r3, #12
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	7992      	ldrb	r2, [r2, #6]
 8001b48:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	330d      	adds	r3, #13
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	79d2      	ldrb	r2, [r2, #7]
 8001b52:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	220e      	movs	r2, #14
 8001b58:	6979      	ldr	r1, [r7, #20]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff6c 	bl	8001a38 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <sample_pmt+0x114>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	1d39      	adds	r1, r7, #4
 8001b66:	2300      	movs	r3, #0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f00f fa6f 	bl	801104c <osMessageQueuePut>
	free(buffer);
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f012 fb8e 	bl	8014290 <free>
	free(pmt_spi);
 8001b74:	6938      	ldr	r0, [r7, #16]
 8001b76:	f012 fb8b 	bl	8014290 <free>
	free(timestamp);
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f012 fb88 	bl	8014290 <free>
}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	58020000 	.word	0x58020000
 8001b8c:	24000678 	.word	0x24000678
 8001b90:	24000674 	.word	0x24000674

08001b94 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8001b9a:	bf00      	nop
 8001b9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba0:	4856      	ldr	r0, [pc, #344]	; (8001cfc <sample_erpa+0x168>)
 8001ba2:	f006 fb79 	bl	8008298 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f7      	bne.n	8001b9c <sample_erpa+0x8>
	}

    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001bac:	2012      	movs	r0, #18
 8001bae:	f012 fb67 	bl	8014280 <malloc>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f012 fb62 	bl	8014280 <malloc>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8001bc0:	2004      	movs	r0, #4
 8001bc2:	f012 fb5d 	bl	8014280 <malloc>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001bca:	2008      	movs	r0, #8
 8001bcc:	f012 fb58 	bl	8014280 <malloc>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60bb      	str	r3, [r7, #8]
    getTimestamp(timestamp);
 8001bd4:	68b8      	ldr	r0, [r7, #8]
 8001bd6:	f7ff fee9 	bl	80019ac <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	220e      	movs	r2, #14
 8001bde:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	3301      	adds	r3, #1
 8001be4:	220d      	movs	r2, #13
 8001be6:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	22ee      	movs	r2, #238	; 0xee
 8001bec:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	22dd      	movs	r2, #221	; 0xdd
 8001bf4:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	22aa      	movs	r2, #170	; 0xaa
 8001bfa:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	22aa      	movs	r2, #170	; 0xaa
 8001c02:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8001c04:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <sample_erpa+0x16c>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001c14:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <sample_erpa+0x16c>)
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3303      	adds	r3, #3
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	881a      	ldrh	r2, [r3, #0]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3305      	adds	r3, #5
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3306      	adds	r3, #6
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3302      	adds	r3, #2
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3307      	adds	r3, #7
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3308      	adds	r3, #8
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3309      	adds	r3, #9
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	7852      	ldrb	r2, [r2, #1]
 8001c6e:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	330a      	adds	r3, #10
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	330b      	adds	r3, #11
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	7852      	ldrb	r2, [r2, #1]
 8001c82:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	330c      	adds	r3, #12
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	7892      	ldrb	r2, [r2, #2]
 8001c8c:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	330d      	adds	r3, #13
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	78d2      	ldrb	r2, [r2, #3]
 8001c96:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	330e      	adds	r3, #14
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	7912      	ldrb	r2, [r2, #4]
 8001ca0:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	330f      	adds	r3, #15
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	7952      	ldrb	r2, [r2, #5]
 8001caa:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3310      	adds	r3, #16
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	7992      	ldrb	r2, [r2, #6]
 8001cb4:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3311      	adds	r3, #17
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	79d2      	ldrb	r2, [r2, #7]
 8001cbe:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	2212      	movs	r2, #18
 8001cc4:	6979      	ldr	r1, [r7, #20]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff feb6 	bl	8001a38 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <sample_erpa+0x170>)
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	4639      	mov	r1, r7
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f00f f9b9 	bl	801104c <osMessageQueuePut>
	free(buffer);
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f012 fad8 	bl	8014290 <free>
	free(erpa_spi);
 8001ce0:	6938      	ldr	r0, [r7, #16]
 8001ce2:	f012 fad5 	bl	8014290 <free>
	free(erpa_adc);
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f012 fad2 	bl	8014290 <free>
	free(timestamp);
 8001cec:	68b8      	ldr	r0, [r7, #8]
 8001cee:	f012 facf 	bl	8014290 <free>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	58020400 	.word	0x58020400
 8001d00:	2400067a 	.word	0x2400067a
 8001d04:	24000674 	.word	0x24000674

08001d08 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001d0e:	202e      	movs	r0, #46	; 0x2e
 8001d10:	f012 fab6 	bl	8014280 <malloc>
 8001d14:	4603      	mov	r3, r0
 8001d16:	61fb      	str	r3, [r7, #28]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8001d18:	2008      	movs	r0, #8
 8001d1a:	f012 fab1 	bl	8014280 <malloc>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001d22:	2012      	movs	r0, #18
 8001d24:	f012 faac 	bl	8014280 <malloc>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001d2c:	2008      	movs	r0, #8
 8001d2e:	f012 faa7 	bl	8014280 <malloc>
 8001d32:	4603      	mov	r3, r0
 8001d34:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001d36:	2008      	movs	r0, #8
 8001d38:	f012 faa2 	bl	8014280 <malloc>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff fe33 	bl	80019ac <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2211      	movs	r2, #17
 8001d4a:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	3302      	adds	r3, #2
 8001d50:	2212      	movs	r2, #18
 8001d52:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	3304      	adds	r3, #4
 8001d58:	2213      	movs	r2, #19
 8001d5a:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	3306      	adds	r3, #6
 8001d60:	2214      	movs	r2, #20
 8001d62:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	22a0      	movs	r2, #160	; 0xa0
 8001d68:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	22a1      	movs	r2, #161	; 0xa1
 8001d70:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3304      	adds	r3, #4
 8001d76:	22a2      	movs	r2, #162	; 0xa2
 8001d78:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3306      	adds	r3, #6
 8001d7e:	22a3      	movs	r2, #163	; 0xa3
 8001d80:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3308      	adds	r3, #8
 8001d86:	22a4      	movs	r2, #164	; 0xa4
 8001d88:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	330a      	adds	r3, #10
 8001d8e:	22a5      	movs	r2, #165	; 0xa5
 8001d90:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	330c      	adds	r3, #12
 8001d96:	22a6      	movs	r2, #166	; 0xa6
 8001d98:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	330e      	adds	r3, #14
 8001d9e:	22a7      	movs	r2, #167	; 0xa7
 8001da0:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3310      	adds	r3, #16
 8001da6:	22a8      	movs	r2, #168	; 0xa8
 8001da8:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	22b0      	movs	r2, #176	; 0xb0
 8001dae:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	3302      	adds	r3, #2
 8001db4:	22b1      	movs	r2, #177	; 0xb1
 8001db6:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	22b2      	movs	r2, #178	; 0xb2
 8001dbe:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3306      	adds	r3, #6
 8001dc4:	22b3      	movs	r2, #179	; 0xb3
 8001dc6:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	22cc      	movs	r2, #204	; 0xcc
 8001dcc:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	22cc      	movs	r2, #204	; 0xcc
 8001dd4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001dd6:	4ba5      	ldr	r3, [pc, #660]	; (800206c <sample_hk+0x364>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3302      	adds	r3, #2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001de6:	4ba1      	ldr	r3, [pc, #644]	; (800206c <sample_hk+0x364>)
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3303      	adds	r3, #3
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	3302      	adds	r3, #2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	3302      	adds	r3, #2
 8001e08:	881a      	ldrh	r2, [r3, #0]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3305      	adds	r3, #5
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	881a      	ldrh	r2, [r3, #0]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3307      	adds	r3, #7
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e34:	121a      	asrs	r2, r3, #8
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3308      	adds	r3, #8
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3309      	adds	r3, #9
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e54:	121a      	asrs	r2, r3, #8
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	330a      	adds	r3, #10
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	3302      	adds	r3, #2
 8001e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	330b      	adds	r3, #11
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	3304      	adds	r3, #4
 8001e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e76:	121a      	asrs	r2, r3, #8
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	3304      	adds	r3, #4
 8001e84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	330d      	adds	r3, #13
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	3306      	adds	r3, #6
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	121a      	asrs	r2, r3, #8
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	330e      	adds	r3, #14
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	3306      	adds	r3, #6
 8001ea6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	330f      	adds	r3, #15
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3310      	adds	r3, #16
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3311      	adds	r3, #17
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3312      	adds	r3, #18
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	881a      	ldrh	r2, [r3, #0]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3313      	adds	r3, #19
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3314      	adds	r3, #20
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3304      	adds	r3, #4
 8001f04:	881a      	ldrh	r2, [r3, #0]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3315      	adds	r3, #21
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3306      	adds	r3, #6
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	3316      	adds	r3, #22
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3306      	adds	r3, #6
 8001f24:	881a      	ldrh	r2, [r3, #0]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3317      	adds	r3, #23
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	330c      	adds	r3, #12
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	330c      	adds	r3, #12
 8001f44:	881a      	ldrh	r2, [r3, #0]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3319      	adds	r3, #25
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3306      	adds	r3, #6
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	331a      	adds	r3, #26
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3306      	adds	r3, #6
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	331b      	adds	r3, #27
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3304      	adds	r3, #4
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	331c      	adds	r3, #28
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3304      	adds	r3, #4
 8001f84:	881a      	ldrh	r2, [r3, #0]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	331d      	adds	r3, #29
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	330e      	adds	r3, #14
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	331e      	adds	r3, #30
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	330e      	adds	r3, #14
 8001fa4:	881a      	ldrh	r2, [r3, #0]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	331f      	adds	r3, #31
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3310      	adds	r3, #16
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3320      	adds	r3, #32
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3310      	adds	r3, #16
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3321      	adds	r3, #33	; 0x21
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3308      	adds	r3, #8
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3322      	adds	r3, #34	; 0x22
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	881a      	ldrh	r2, [r3, #0]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3323      	adds	r3, #35	; 0x23
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	330a      	adds	r3, #10
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	3324      	adds	r3, #36	; 0x24
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	330a      	adds	r3, #10
 8002004:	881a      	ldrh	r2, [r3, #0]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3325      	adds	r3, #37	; 0x25
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3326      	adds	r3, #38	; 0x26
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3327      	adds	r3, #39	; 0x27
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	7852      	ldrb	r2, [r2, #1]
 8002020:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3328      	adds	r3, #40	; 0x28
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	7892      	ldrb	r2, [r2, #2]
 800202a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3329      	adds	r3, #41	; 0x29
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	78d2      	ldrb	r2, [r2, #3]
 8002034:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	332a      	adds	r3, #42	; 0x2a
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	7912      	ldrb	r2, [r2, #4]
 800203e:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	332b      	adds	r3, #43	; 0x2b
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	7952      	ldrb	r2, [r2, #5]
 8002048:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	332c      	adds	r3, #44	; 0x2c
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	7992      	ldrb	r2, [r2, #6]
 8002052:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	332d      	adds	r3, #45	; 0x2d
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	79d2      	ldrb	r2, [r2, #7]
 800205c:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	222e      	movs	r2, #46	; 0x2e
 8002062:	69f9      	ldr	r1, [r7, #28]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fce7 	bl	8001a38 <create_packet>
 800206a:	e001      	b.n	8002070 <sample_hk+0x368>
 800206c:	2400067c 	.word	0x2400067c
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <sample_hk+0x39c>)
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	1d39      	adds	r1, r7, #4
 8002076:	2300      	movs	r3, #0
 8002078:	2200      	movs	r2, #0
 800207a:	f00e ffe7 	bl	801104c <osMessageQueuePut>
	free(buffer);
 800207e:	69f8      	ldr	r0, [r7, #28]
 8002080:	f012 f906 	bl	8014290 <free>
	free(hk_i2c);
 8002084:	69b8      	ldr	r0, [r7, #24]
 8002086:	f012 f903 	bl	8014290 <free>
	free(hk_adc1);
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f012 f900 	bl	8014290 <free>
	free(hk_adc3);
 8002090:	6938      	ldr	r0, [r7, #16]
 8002092:	f012 f8fd 	bl	8014290 <free>
	free(timestamp);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f012 f8fa 	bl	8014290 <free>
}
 800209c:	bf00      	nop
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	24000674 	.word	0x24000674

080020a8 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <PMT_init+0x38>)
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b8:	2200      	movs	r2, #0
 80020ba:	2101      	movs	r1, #1
 80020bc:	f00e feec 	bl	8010e98 <osEventFlagsWait>
		if(PMT_ON){
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <PMT_init+0x3c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <PMT_init+0x30>
	    sample_pmt();
 80020c8:	f7ff fcd8 	bl	8001a7c <sample_pmt>
		pmt_seq++;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <PMT_init+0x40>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <PMT_init+0x40>)
 80020d6:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 80020d8:	f00e fe20 	bl	8010d1c <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80020dc:	e7e8      	b.n	80020b0 <PMT_init+0x8>
 80020de:	bf00      	nop
 80020e0:	24000688 	.word	0x24000688
 80020e4:	2400067e 	.word	0x2400067e
 80020e8:	24000678 	.word	0x24000678

080020ec <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <ERPA_init+0x38>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020fc:	2200      	movs	r2, #0
 80020fe:	2102      	movs	r1, #2
 8002100:	f00e feca 	bl	8010e98 <osEventFlagsWait>
	  if (ERPA_ON)
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <ERPA_init+0x3c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <ERPA_init+0x30>
	  {
	    sample_erpa();
 800210c:	f7ff fd42 	bl	8001b94 <sample_erpa>
		erpa_seq++;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <ERPA_init+0x40>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <ERPA_init+0x40>)
 800211a:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 800211c:	f00e fdfe 	bl	8010d1c <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002120:	e7e8      	b.n	80020f4 <ERPA_init+0x8>
 8002122:	bf00      	nop
 8002124:	24000688 	.word	0x24000688
 8002128:	2400067f 	.word	0x2400067f
 800212c:	2400067a 	.word	0x2400067a

08002130 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HK_init+0x38>)
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002140:	2200      	movs	r2, #0
 8002142:	2104      	movs	r1, #4
 8002144:	f00e fea8 	bl	8010e98 <osEventFlagsWait>
	  if(HK_ON)
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HK_init+0x3c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HK_init+0x30>
	  {
	    sample_hk();
 8002150:	f7ff fdda 	bl	8001d08 <sample_hk>
		hk_seq++;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HK_init+0x40>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HK_init+0x40>)
 800215e:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8002160:	f00e fddc 	bl	8010d1c <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002164:	e7e8      	b.n	8002138 <HK_init+0x8>
 8002166:	bf00      	nop
 8002168:	24000688 	.word	0x24000688
 800216c:	24000680 	.word	0x24000680
 8002170:	2400067c 	.word	0x2400067c

08002174 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800217c:	2201      	movs	r2, #1
 800217e:	4904      	ldr	r1, [pc, #16]	; (8002190 <UART_RX_init+0x1c>)
 8002180:	4804      	ldr	r0, [pc, #16]	; (8002194 <UART_RX_init+0x20>)
 8002182:	f00c f95b 	bl	800e43c <HAL_UART_Receive_IT>
		osDelay(5);
 8002186:	2005      	movs	r0, #5
 8002188:	f00e fde8 	bl	8010d5c <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800218c:	e7f6      	b.n	800217c <UART_RX_init+0x8>
 800218e:	bf00      	nop
 8002190:	2400068c 	.word	0x2400068c
 8002194:	240005cc 	.word	0x240005cc

08002198 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <UART_TX_init+0x50>)
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	f107 010c 	add.w	r1, r7, #12
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ac:	2200      	movs	r2, #0
 80021ae:	f00e ffad 	bl	801110c <osMessageQueueGet>
 80021b2:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d113      	bne.n	80021e2 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <UART_TX_init+0x50>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f00f f802 	bl	80111c8 <osMessageQueueGetCount>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4619      	mov	r1, r3
 80021c8:	4808      	ldr	r0, [pc, #32]	; (80021ec <UART_TX_init+0x54>)
 80021ca:	f012 f95f 	bl	801448c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 80021ce:	68f9      	ldr	r1, [r7, #12]
 80021d0:	8a3a      	ldrh	r2, [r7, #16]
 80021d2:	2364      	movs	r3, #100	; 0x64
 80021d4:	4806      	ldr	r0, [pc, #24]	; (80021f0 <UART_TX_init+0x58>)
 80021d6:	f00c f8a3 	bl	800e320 <HAL_UART_Transmit>
	       free(msg.array);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4618      	mov	r0, r3
 80021de:	f012 f857 	bl	8014290 <free>
	   }
	   osThreadYield();
 80021e2:	f00e fd9b 	bl	8010d1c <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80021e6:	e7db      	b.n	80021a0 <UART_TX_init+0x8>
 80021e8:	24000674 	.word	0x24000674
 80021ec:	080154e0 	.word	0x080154e0
 80021f0:	240005cc 	.word	0x240005cc

080021f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002206:	f000 ff1f 	bl	8003048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40001000 	.word	0x40001000

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002220:	e7fe      	b.n	8002220 <Error_Handler+0x8>
	...

08002224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_MspInit+0x38>)
 800222c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_MspInit+0x38>)
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_MspInit+0x38>)
 800223c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	210f      	movs	r1, #15
 800224c:	f06f 0001 	mvn.w	r0, #1
 8002250:	f002 fc08 	bl	8004a64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	58024400 	.word	0x58024400

08002260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7b      	ldr	r2, [pc, #492]	; (800246c <HAL_ADC_MspInit+0x20c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	f040 8091 	bne.w	80023a6 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002284:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <HAL_ADC_MspInit+0x210>)
 8002286:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800228a:	4a79      	ldr	r2, [pc, #484]	; (8002470 <HAL_ADC_MspInit+0x210>)
 800228c:	f043 0320 	orr.w	r3, r3, #32
 8002290:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002294:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_ADC_MspInit+0x210>)
 8002296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	623b      	str	r3, [r7, #32]
 80022a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	4b73      	ldr	r3, [pc, #460]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a8:	4a71      	ldr	r2, [pc, #452]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	4b6b      	ldr	r3, [pc, #428]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c6:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d0:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	4b64      	ldr	r3, [pc, #400]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e4:	4a62      	ldr	r2, [pc, #392]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ee:	4b60      	ldr	r3, [pc, #384]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80022f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80022fc:	2333      	movs	r3, #51	; 0x33
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002300:	2303      	movs	r3, #3
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230c:	4619      	mov	r1, r3
 800230e:	4859      	ldr	r0, [pc, #356]	; (8002474 <HAL_ADC_MspInit+0x214>)
 8002310:	f005 fe12 	bl	8007f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002314:	23ce      	movs	r3, #206	; 0xce
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002318:	2303      	movs	r3, #3
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002324:	4619      	mov	r1, r3
 8002326:	4854      	ldr	r0, [pc, #336]	; (8002478 <HAL_ADC_MspInit+0x218>)
 8002328:	f005 fe06 	bl	8007f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800232c:	2303      	movs	r3, #3
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002330:	2303      	movs	r3, #3
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	484f      	ldr	r0, [pc, #316]	; (800247c <HAL_ADC_MspInit+0x21c>)
 8002340:	f005 fdfa 	bl	8007f38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <HAL_ADC_MspInit+0x220>)
 8002346:	4a4f      	ldr	r2, [pc, #316]	; (8002484 <HAL_ADC_MspInit+0x224>)
 8002348:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800234a:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <HAL_ADC_MspInit+0x220>)
 800234c:	2209      	movs	r2, #9
 800234e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002350:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_ADC_MspInit+0x220>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <HAL_ADC_MspInit+0x220>)
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800235c:	4b48      	ldr	r3, [pc, #288]	; (8002480 <HAL_ADC_MspInit+0x220>)
 800235e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002362:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002364:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_ADC_MspInit+0x220>)
 8002366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800236a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800236c:	4b44      	ldr	r3, [pc, #272]	; (8002480 <HAL_ADC_MspInit+0x220>)
 800236e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002372:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002374:	4b42      	ldr	r3, [pc, #264]	; (8002480 <HAL_ADC_MspInit+0x220>)
 8002376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800237c:	4b40      	ldr	r3, [pc, #256]	; (8002480 <HAL_ADC_MspInit+0x220>)
 800237e:	2200      	movs	r2, #0
 8002380:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_ADC_MspInit+0x220>)
 8002384:	2200      	movs	r2, #0
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002388:	483d      	ldr	r0, [pc, #244]	; (8002480 <HAL_ADC_MspInit+0x220>)
 800238a:	f002 ff99 	bl	80052c0 <HAL_DMA_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002394:	f7ff ff40 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a39      	ldr	r2, [pc, #228]	; (8002480 <HAL_ADC_MspInit+0x220>)
 800239c:	64da      	str	r2, [r3, #76]	; 0x4c
 800239e:	4a38      	ldr	r2, [pc, #224]	; (8002480 <HAL_ADC_MspInit+0x220>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80023a4:	e05e      	b.n	8002464 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a37      	ldr	r2, [pc, #220]	; (8002488 <HAL_ADC_MspInit+0x228>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d159      	bne.n	8002464 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	4a2e      	ldr	r2, [pc, #184]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80023b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80023c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_ADC_MspInit+0x210>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80023ec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80023f0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80023f4:	f000 fe54 	bl	80030a0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80023f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80023fc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002400:	f000 fe4e 	bl	80030a0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_ADC_MspInit+0x22c>)
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_ADC_MspInit+0x230>)
 8002408:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_ADC_MspInit+0x22c>)
 800240c:	2273      	movs	r2, #115	; 0x73
 800240e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_ADC_MspInit+0x22c>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_ADC_MspInit+0x22c>)
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_ADC_MspInit+0x22c>)
 800241e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002422:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_ADC_MspInit+0x22c>)
 8002426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800242a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_ADC_MspInit+0x22c>)
 800242e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002432:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_ADC_MspInit+0x22c>)
 8002436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_ADC_MspInit+0x22c>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_ADC_MspInit+0x22c>)
 8002444:	2200      	movs	r2, #0
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002448:	4810      	ldr	r0, [pc, #64]	; (800248c <HAL_ADC_MspInit+0x22c>)
 800244a:	f002 ff39 	bl	80052c0 <HAL_DMA_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002454:	f7ff fee0 	bl	8002218 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_ADC_MspInit+0x22c>)
 800245c:	64da      	str	r2, [r3, #76]	; 0x4c
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_ADC_MspInit+0x22c>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002464:	bf00      	nop
 8002466:	3738      	adds	r7, #56	; 0x38
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40022000 	.word	0x40022000
 8002470:	58024400 	.word	0x58024400
 8002474:	58020800 	.word	0x58020800
 8002478:	58020000 	.word	0x58020000
 800247c:	58020400 	.word	0x58020400
 8002480:	240001e4 	.word	0x240001e4
 8002484:	40020010 	.word	0x40020010
 8002488:	58026000 	.word	0x58026000
 800248c:	2400025c 	.word	0x2400025c
 8002490:	40020028 	.word	0x40020028

08002494 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a34      	ldr	r2, [pc, #208]	; (8002584 <HAL_DAC_MspInit+0xf0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d161      	bne.n	800257a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_DAC_MspInit+0xf4>)
 80024b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024bc:	4a32      	ldr	r2, [pc, #200]	; (8002588 <HAL_DAC_MspInit+0xf4>)
 80024be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024c6:	4b30      	ldr	r3, [pc, #192]	; (8002588 <HAL_DAC_MspInit+0xf4>)
 80024c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_DAC_MspInit+0xf4>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024da:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <HAL_DAC_MspInit+0xf4>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_DAC_MspInit+0xf4>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024f2:	2310      	movs	r3, #16
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f6:	2303      	movs	r3, #3
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4821      	ldr	r0, [pc, #132]	; (800258c <HAL_DAC_MspInit+0xf8>)
 8002506:	f005 fd17 	bl	8007f38 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800250a:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 800250c:	4a21      	ldr	r2, [pc, #132]	; (8002594 <HAL_DAC_MspInit+0x100>)
 800250e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002510:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 8002512:	2243      	movs	r2, #67	; 0x43
 8002514:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 8002518:	2240      	movs	r2, #64	; 0x40
 800251a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800251c:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002522:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 8002524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002528:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 800252c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002530:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002532:	4b17      	ldr	r3, [pc, #92]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 8002534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002538:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 800253c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002540:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800254e:	4810      	ldr	r0, [pc, #64]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 8002550:	f002 feb6 	bl	80052c0 <HAL_DMA_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800255a:	f7ff fe5d 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_DAC_MspInit+0xfc>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2105      	movs	r1, #5
 800256e:	2036      	movs	r0, #54	; 0x36
 8002570:	f002 fa78 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002574:	2036      	movs	r0, #54	; 0x36
 8002576:	f002 fa8f 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800257a:	bf00      	nop
 800257c:	3728      	adds	r7, #40	; 0x28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40007400 	.word	0x40007400
 8002588:	58024400 	.word	0x58024400
 800258c:	58020000 	.word	0x58020000
 8002590:	240002e8 	.word	0x240002e8
 8002594:	40020088 	.word	0x40020088

08002598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0ba      	sub	sp, #232	; 0xe8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	22c0      	movs	r2, #192	; 0xc0
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f011 fe7f 	bl	80142bc <memset>
  if(hi2c->Instance==I2C1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a27      	ldr	r2, [pc, #156]	; (8002660 <HAL_I2C_MspInit+0xc8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d146      	bne.n	8002656 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025c8:	f04f 0208 	mov.w	r2, #8
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	4618      	mov	r0, r3
 80025e0:	f007 f822 	bl	8009628 <HAL_RCCEx_PeriphCLKConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80025ea:	f7ff fe15 	bl	8002218 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_I2C_MspInit+0xcc>)
 80025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f4:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_I2C_MspInit+0xcc>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_I2C_MspInit+0xcc>)
 8002600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800260c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002614:	2312      	movs	r3, #18
 8002616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002626:	2304      	movs	r3, #4
 8002628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002630:	4619      	mov	r1, r3
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <HAL_I2C_MspInit+0xd0>)
 8002634:	f005 fc80 	bl	8007f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_I2C_MspInit+0xcc>)
 800263a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_I2C_MspInit+0xcc>)
 8002640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002644:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_I2C_MspInit+0xcc>)
 800264a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800264e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002656:	bf00      	nop
 8002658:	37e8      	adds	r7, #232	; 0xe8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40005400 	.word	0x40005400
 8002664:	58024400 	.word	0x58024400
 8002668:	58020400 	.word	0x58020400

0800266c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0b2      	sub	sp, #200	; 0xc8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	22c0      	movs	r2, #192	; 0xc0
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f011 fe1d 	bl	80142bc <memset>
  if(hrtc->Instance==RTC)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_RTC_MspInit+0x5c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d119      	bne.n	80026c0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800268c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800269c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	4618      	mov	r0, r3
 80026a6:	f006 ffbf 	bl	8009628 <HAL_RCCEx_PeriphCLKConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80026b0:	f7ff fdb2 	bl	8002218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RTC_MspInit+0x60>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_RTC_MspInit+0x60>)
 80026ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	37c8      	adds	r7, #200	; 0xc8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	58004000 	.word	0x58004000
 80026cc:	58024400 	.word	0x58024400

080026d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0bc      	sub	sp, #240	; 0xf0
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e8:	f107 0318 	add.w	r3, r7, #24
 80026ec:	22c0      	movs	r2, #192	; 0xc0
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f011 fde3 	bl	80142bc <memset>
  if(hspi->Instance==SPI1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a4c      	ldr	r2, [pc, #304]	; (800282c <HAL_SPI_MspInit+0x15c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d145      	bne.n	800278c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002700:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800270c:	2300      	movs	r3, #0
 800270e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002710:	f107 0318 	add.w	r3, r7, #24
 8002714:	4618      	mov	r0, r3
 8002716:	f006 ff87 	bl	8009628 <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002720:	f7ff fd7a 	bl	8002218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002724:	4b42      	ldr	r3, [pc, #264]	; (8002830 <HAL_SPI_MspInit+0x160>)
 8002726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800272a:	4a41      	ldr	r2, [pc, #260]	; (8002830 <HAL_SPI_MspInit+0x160>)
 800272c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002730:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002734:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <HAL_SPI_MspInit+0x160>)
 8002736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800273a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_SPI_MspInit+0x160>)
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002748:	4a39      	ldr	r2, [pc, #228]	; (8002830 <HAL_SPI_MspInit+0x160>)
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_SPI_MspInit+0x160>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002760:	2318      	movs	r3, #24
 8002762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002778:	2305      	movs	r3, #5
 800277a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002782:	4619      	mov	r1, r3
 8002784:	482b      	ldr	r0, [pc, #172]	; (8002834 <HAL_SPI_MspInit+0x164>)
 8002786:	f005 fbd7 	bl	8007f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800278a:	e04a      	b.n	8002822 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a29      	ldr	r2, [pc, #164]	; (8002838 <HAL_SPI_MspInit+0x168>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d145      	bne.n	8002822 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a6:	f107 0318 	add.w	r3, r7, #24
 80027aa:	4618      	mov	r0, r3
 80027ac:	f006 ff3c 	bl	8009628 <HAL_RCCEx_PeriphCLKConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80027b6:	f7ff fd2f 	bl	8002218 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_SPI_MspInit+0x160>)
 80027bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c0:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <HAL_SPI_MspInit+0x160>)
 80027c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_SPI_MspInit+0x160>)
 80027cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_SPI_MspInit+0x160>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_SPI_MspInit+0x160>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <HAL_SPI_MspInit+0x160>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80027f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80027fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002810:	2305      	movs	r3, #5
 8002812:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002816:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <HAL_SPI_MspInit+0x164>)
 800281e:	f005 fb8b 	bl	8007f38 <HAL_GPIO_Init>
}
 8002822:	bf00      	nop
 8002824:	37f0      	adds	r7, #240	; 0xf0
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40013000 	.word	0x40013000
 8002830:	58024400 	.word	0x58024400
 8002834:	58020400 	.word	0x58020400
 8002838:	40003800 	.word	0x40003800

0800283c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a37      	ldr	r2, [pc, #220]	; (8002928 <HAL_TIM_Base_MspInit+0xec>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d12f      	bne.n	80028ae <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800284e:	4b37      	ldr	r3, [pc, #220]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 8002850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002854:	4a35      	ldr	r2, [pc, #212]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 8002860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2105      	movs	r1, #5
 8002870:	2018      	movs	r0, #24
 8002872:	f002 f8f7 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002876:	2018      	movs	r0, #24
 8002878:	f002 f90e 	bl	8004a98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2105      	movs	r1, #5
 8002880:	2019      	movs	r0, #25
 8002882:	f002 f8ef 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002886:	2019      	movs	r0, #25
 8002888:	f002 f906 	bl	8004a98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2105      	movs	r1, #5
 8002890:	201a      	movs	r0, #26
 8002892:	f002 f8e7 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002896:	201a      	movs	r0, #26
 8002898:	f002 f8fe 	bl	8004a98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2105      	movs	r1, #5
 80028a0:	201b      	movs	r0, #27
 80028a2:	f002 f8df 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80028a6:	201b      	movs	r0, #27
 80028a8:	f002 f8f6 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028ac:	e038      	b.n	8002920 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d117      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 80028ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028be:	4a1b      	ldr	r2, [pc, #108]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 80028ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2105      	movs	r1, #5
 80028da:	201c      	movs	r0, #28
 80028dc:	f002 f8c2 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028e0:	201c      	movs	r0, #28
 80028e2:	f002 f8d9 	bl	8004a98 <HAL_NVIC_EnableIRQ>
}
 80028e6:	e01b      	b.n	8002920 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_TIM_Base_MspInit+0xf4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d116      	bne.n	8002920 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 80028f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_TIM_Base_MspInit+0xf0>)
 8002904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2105      	movs	r1, #5
 8002914:	201d      	movs	r0, #29
 8002916:	f002 f8a5 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800291a:	201d      	movs	r0, #29
 800291c:	f002 f8bc 	bl	8004a98 <HAL_NVIC_EnableIRQ>
}
 8002920:	bf00      	nop
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40010000 	.word	0x40010000
 800292c:	58024400 	.word	0x58024400
 8002930:	40000400 	.word	0x40000400

08002934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <HAL_TIM_MspPostInit+0xb8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d120      	bne.n	8002998 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295c:	4a24      	ldr	r2, [pc, #144]	; (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002986:	2301      	movs	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4818      	ldr	r0, [pc, #96]	; (80029f4 <HAL_TIM_MspPostInit+0xc0>)
 8002992:	f005 fad1 	bl	8007f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002996:	e024      	b.n	80029e2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d11f      	bne.n	80029e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a8:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029aa:	f043 0302 	orr.w	r3, r3, #2
 80029ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029d2:	2301      	movs	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <HAL_TIM_MspPostInit+0xc4>)
 80029de:	f005 faab 	bl	8007f38 <HAL_GPIO_Init>
}
 80029e2:	bf00      	nop
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40010000 	.word	0x40010000
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58020000 	.word	0x58020000
 80029f8:	58020400 	.word	0x58020400

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0ba      	sub	sp, #232	; 0xe8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	22c0      	movs	r2, #192	; 0xc0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f011 fc4d 	bl	80142bc <memset>
  if(huart->Instance==USART1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a2b      	ldr	r2, [pc, #172]	; (8002ad4 <HAL_UART_MspInit+0xd8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d14e      	bne.n	8002aca <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a2c:	f04f 0201 	mov.w	r2, #1
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	4618      	mov	r0, r3
 8002a44:	f006 fdf0 	bl	8009628 <HAL_RCCEx_PeriphCLKConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a4e:	f7ff fbe3 	bl	8002218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_UART_MspInit+0xdc>)
 8002a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_UART_MspInit+0xdc>)
 8002a5a:	f043 0310 	orr.w	r3, r3, #16
 8002a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_UART_MspInit+0xdc>)
 8002a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_UART_MspInit+0xdc>)
 8002a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <HAL_UART_MspInit+0xdc>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_UART_MspInit+0xdc>)
 8002a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4809      	ldr	r0, [pc, #36]	; (8002adc <HAL_UART_MspInit+0xe0>)
 8002ab6:	f005 fa3f 	bl	8007f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2105      	movs	r1, #5
 8002abe:	2025      	movs	r0, #37	; 0x25
 8002ac0:	f001 ffd0 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ac4:	2025      	movs	r0, #37	; 0x25
 8002ac6:	f001 ffe7 	bl	8004a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002aca:	bf00      	nop
 8002acc:	37e8      	adds	r7, #232	; 0xe8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40011000 	.word	0x40011000
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	58020000 	.word	0x58020000

08002ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b090      	sub	sp, #64	; 0x40
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d827      	bhi.n	8002b3e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002aee:	2200      	movs	r2, #0
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	2036      	movs	r0, #54	; 0x36
 8002af4:	f001 ffb6 	bl	8004a64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002af8:	2036      	movs	r0, #54	; 0x36
 8002afa:	f001 ffcd 	bl	8004a98 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002afe:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_InitTick+0xc4>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_InitTick+0xc8>)
 8002b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_InitTick+0xc8>)
 8002b0c:	f043 0310 	orr.w	r3, r3, #16
 8002b10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_InitTick+0xc8>)
 8002b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b22:	f107 0210 	add.w	r2, r7, #16
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f006 fd39 	bl	80095a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <HAL_InitTick+0x6a>
 8002b3c:	e001      	b.n	8002b42 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e02b      	b.n	8002b9a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b42:	f006 fd03 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 8002b46:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002b48:	e004      	b.n	8002b54 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b4a:	f006 fcff 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b56:	4a15      	ldr	r2, [pc, #84]	; (8002bac <HAL_InitTick+0xcc>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	0c9b      	lsrs	r3, r3, #18
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_InitTick+0xd0>)
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <HAL_InitTick+0xd4>)
 8002b66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_InitTick+0xd0>)
 8002b6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b70:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <HAL_InitTick+0xd0>)
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_InitTick+0xd0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_InitTick+0xd0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b82:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <HAL_InitTick+0xd0>)
 8002b84:	f009 feaf 	bl	800c8e6 <HAL_TIM_Base_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b8e:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <HAL_InitTick+0xd0>)
 8002b90:	f009 ff98 	bl	800cac4 <HAL_TIM_Base_Start_IT>
 8002b94:	4603      	mov	r3, r0
 8002b96:	e000      	b.n	8002b9a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3740      	adds	r7, #64	; 0x40
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	24000090 	.word	0x24000090
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	431bde83 	.word	0x431bde83
 8002bb0:	24000728 	.word	0x24000728
 8002bb4:	40001000 	.word	0x40001000

08002bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002bbc:	e7fe      	b.n	8002bbc <NMI_Handler+0x4>

08002bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <HardFault_Handler+0x4>

08002bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <MemManage_Handler+0x4>

08002bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bce:	e7fe      	b.n	8002bce <BusFault_Handler+0x4>

08002bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <UsageFault_Handler+0x4>

08002bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002be8:	4802      	ldr	r0, [pc, #8]	; (8002bf4 <DMA1_Stream0_IRQHandler+0x10>)
 8002bea:	f003 fe93 	bl	8006914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	240001e4 	.word	0x240001e4

08002bf8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <DMA1_Stream1_IRQHandler+0x10>)
 8002bfe:	f003 fe89 	bl	8006914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2400025c 	.word	0x2400025c

08002c0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <DMA1_Stream5_IRQHandler+0x10>)
 8002c12:	f003 fe7f 	bl	8006914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	240002e8 	.word	0x240002e8

08002c20 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <TIM1_BRK_IRQHandler+0x10>)
 8002c26:	f00a fa8f 	bl	800d148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	240004e8 	.word	0x240004e8

08002c34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <TIM1_UP_IRQHandler+0x10>)
 8002c3a:	f00a fa85 	bl	800d148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	240004e8 	.word	0x240004e8

08002c48 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002c4e:	f00a fa7b 	bl	800d148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	240004e8 	.word	0x240004e8

08002c5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <TIM1_CC_IRQHandler+0x10>)
 8002c62:	f00a fa71 	bl	800d148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	240004e8 	.word	0x240004e8

08002c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <TIM2_IRQHandler+0x10>)
 8002c76:	f00a fa67 	bl	800d148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	24000534 	.word	0x24000534

08002c84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <TIM3_IRQHandler+0x10>)
 8002c8a:	f00a fa5d 	bl	800d148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	24000580 	.word	0x24000580

08002c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <USART1_IRQHandler+0x10>)
 8002c9e:	f00b fc19 	bl	800e4d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	240005cc 	.word	0x240005cc

08002cac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <TIM6_DAC_IRQHandler+0x20>)
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002cba:	4804      	ldr	r0, [pc, #16]	; (8002ccc <TIM6_DAC_IRQHandler+0x20>)
 8002cbc:	f002 f881 	bl	8004dc2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <TIM6_DAC_IRQHandler+0x24>)
 8002cc2:	f00a fa41 	bl	800d148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	240002d4 	.word	0x240002d4
 8002cd0:	24000728 	.word	0x24000728

08002cd4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <ITM_SendChar+0x48>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <ITM_SendChar+0x48>)
 8002ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <ITM_SendChar+0x4c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <ITM_SendChar+0x4c>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002cf6:	bf00      	nop
 8002cf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f8      	beq.n	8002cf8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002d06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	6013      	str	r3, [r2, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000edfc 	.word	0xe000edfc
 8002d20:	e0000e00 	.word	0xe0000e00

08002d24 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e00a      	b.n	8002d4c <_read+0x28>
		*ptr++ = __io_getchar();
 8002d36:	f3af 8000 	nop.w
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	60ba      	str	r2, [r7, #8]
 8002d42:	b2ca      	uxtb	r2, r1
 8002d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dbf0      	blt.n	8002d36 <_read+0x12>
	}

	return len;
 8002d54:	687b      	ldr	r3, [r7, #4]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e009      	b.n	8002d84 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ffab 	bl	8002cd4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dbf1      	blt.n	8002d70 <_write+0x12>
	}
	return len;
 8002d8c:	687b      	ldr	r3, [r7, #4]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_close>:

int _close(int file) {
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_fstat>:

int _fstat(int file, struct stat *st) {
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_isatty>:

int _isatty(int file) {
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_sbrk+0x64>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <_sbrk+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <_sbrk+0x40>
		errno = ENOMEM;
 8002e30:	f011 f9fc 	bl	801422c <__errno>
 8002e34:	4603      	mov	r3, r0
 8002e36:	220c      	movs	r2, #12
 8002e38:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e3e:	e009      	b.n	8002e54 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <_sbrk+0x64>)
 8002e50:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	24080000 	.word	0x24080000
 8002e60:	00000400 	.word	0x00000400
 8002e64:	24000774 	.word	0x24000774
 8002e68:	240050e0 	.word	0x240050e0

08002e6c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002e70:	4b37      	ldr	r3, [pc, #220]	; (8002f50 <SystemInit+0xe4>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a36      	ldr	r2, [pc, #216]	; (8002f50 <SystemInit+0xe4>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <SystemInit+0xe8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d807      	bhi.n	8002e9c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <SystemInit+0xe8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 030f 	bic.w	r3, r3, #15
 8002e94:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <SystemInit+0xe8>)
 8002e96:	f043 0307 	orr.w	r3, r3, #7
 8002e9a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <SystemInit+0xec>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <SystemInit+0xec>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <SystemInit+0xec>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002eae:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <SystemInit+0xec>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4929      	ldr	r1, [pc, #164]	; (8002f58 <SystemInit+0xec>)
 8002eb4:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <SystemInit+0xf0>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <SystemInit+0xe8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <SystemInit+0xe8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 030f 	bic.w	r3, r3, #15
 8002ece:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <SystemInit+0xe8>)
 8002ed0:	f043 0307 	orr.w	r3, r3, #7
 8002ed4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <SystemInit+0xec>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <SystemInit+0xec>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <SystemInit+0xec>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <SystemInit+0xec>)
 8002eea:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <SystemInit+0xf4>)
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <SystemInit+0xec>)
 8002ef0:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <SystemInit+0xf8>)
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <SystemInit+0xec>)
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <SystemInit+0xfc>)
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <SystemInit+0xec>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <SystemInit+0xec>)
 8002f02:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <SystemInit+0xfc>)
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <SystemInit+0xec>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <SystemInit+0xec>)
 8002f0e:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <SystemInit+0xfc>)
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <SystemInit+0xec>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <SystemInit+0xec>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <SystemInit+0xec>)
 8002f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f22:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <SystemInit+0xec>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <SystemInit+0x100>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <SystemInit+0x104>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f36:	d202      	bcs.n	8002f3e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <SystemInit+0x108>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <SystemInit+0x10c>)
 8002f40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00
 8002f54:	52002000 	.word	0x52002000
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f60:	02020200 	.word	0x02020200
 8002f64:	01ff0000 	.word	0x01ff0000
 8002f68:	01010280 	.word	0x01010280
 8002f6c:	5c001000 	.word	0x5c001000
 8002f70:	ffff0000 	.word	0xffff0000
 8002f74:	51008108 	.word	0x51008108
 8002f78:	52004000 	.word	0x52004000

08002f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f80:	f7ff ff74 	bl	8002e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f84:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f86:	490d      	ldr	r1, [pc, #52]	; (8002fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f8c:	e002      	b.n	8002f94 <LoopCopyDataInit>

08002f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f92:	3304      	adds	r3, #4

08002f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f98:	d3f9      	bcc.n	8002f8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	; (8002fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa0:	e001      	b.n	8002fa6 <LoopFillZerobss>

08002fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fa4:	3204      	adds	r2, #4

08002fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa8:	d3fb      	bcc.n	8002fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002faa:	f011 f945 	bl	8014238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fae:	f7fd fdd3 	bl	8000b58 <main>
  bx  lr
 8002fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002fb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002fbc:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8002fc0:	080156ac 	.word	0x080156ac
  ldr r2, =_sbss
 8002fc4:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002fc8:	240050dc 	.word	0x240050dc

08002fcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fcc:	e7fe      	b.n	8002fcc <ADC3_IRQHandler>
	...

08002fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd6:	2003      	movs	r0, #3
 8002fd8:	f001 fd39 	bl	8004a4e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fdc:	f006 f90c 	bl	80091f8 <HAL_RCC_GetSysClockFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_Init+0x68>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	4913      	ldr	r1, [pc, #76]	; (800303c <HAL_Init+0x6c>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <HAL_Init+0x68>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_Init+0x6c>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <HAL_Init+0x70>)
 8003012:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <HAL_Init+0x74>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800301a:	2005      	movs	r0, #5
 800301c:	f7ff fd60 	bl	8002ae0 <HAL_InitTick>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e002      	b.n	8003030 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800302a:	f7ff f8fb 	bl	8002224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	58024400 	.word	0x58024400
 800303c:	080155c4 	.word	0x080155c4
 8003040:	2400008c 	.word	0x2400008c
 8003044:	24000088 	.word	0x24000088

08003048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_IncTick+0x20>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_IncTick+0x24>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4413      	add	r3, r2
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <HAL_IncTick+0x24>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	24000094 	.word	0x24000094
 800306c:	24000778 	.word	0x24000778

08003070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return uwTick;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_GetTick+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	24000778 	.word	0x24000778

08003088 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_GetREVID+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0c1b      	lsrs	r3, r3, #16
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	5c001000 	.word	0x5c001000

080030a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	4904      	ldr	r1, [pc, #16]	; (80030c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	58000400 	.word	0x58000400

080030cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	609a      	str	r2, [r3, #8]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	430b      	orrs	r3, r1
 8003162:	431a      	orrs	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	431a      	orrs	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	611a      	str	r2, [r3, #16]
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3360      	adds	r3, #96	; 0x60
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	601a      	str	r2, [r3, #0]
  }
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003202:	b480      	push	{r7}
 8003204:	b087      	sub	sp, #28
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3330      	adds	r3, #48	; 0x30
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	4413      	add	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	211f      	movs	r1, #31
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	401a      	ands	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	f003 011f 	and.w	r1, r3, #31
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	431a      	orrs	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f023 0203 	bic.w	r2, r3, #3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	60da      	str	r2, [r3, #12]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3314      	adds	r3, #20
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	0e5b      	lsrs	r3, r3, #25
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	4413      	add	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	0d1b      	lsrs	r3, r3, #20
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2107      	movs	r1, #7
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	401a      	ands	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	0d1b      	lsrs	r3, r3, #20
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	431a      	orrs	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0318 	and.w	r3, r3, #24
 80032fa:	4908      	ldr	r1, [pc, #32]	; (800331c <LL_ADC_SetChannelSingleDiff+0x44>)
 80032fc:	40d9      	lsrs	r1, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	400b      	ands	r3, r1
 8003302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003306:	431a      	orrs	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	000fffff 	.word	0x000fffff

08003320 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 031f 	and.w	r3, r3, #31
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <LL_ADC_DisableDeepPowerDown+0x20>)
 800334a:	4013      	ands	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6093      	str	r3, [r2, #8]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	5fffffc0 	.word	0x5fffffc0

08003360 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003374:	d101      	bne.n	800337a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <LL_ADC_EnableInternalRegulator+0x24>)
 8003396:	4013      	ands	r3, r2
 8003398:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	6fffffc0 	.word	0x6fffffc0

080033b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c4:	d101      	bne.n	80033ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <LL_ADC_Enable+0x24>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	7fffffc0 	.word	0x7fffffc0

08003400 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <LL_ADC_Disable+0x24>)
 800340e:	4013      	ands	r3, r2
 8003410:	f043 0202 	orr.w	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	7fffffc0 	.word	0x7fffffc0

08003428 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <LL_ADC_IsEnabled+0x18>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <LL_ADC_IsEnabled+0x1a>
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d101      	bne.n	8003466 <LL_ADC_IsDisableOngoing+0x18>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <LL_ADC_IsDisableOngoing+0x1a>
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <LL_ADC_REG_StartConversion+0x24>)
 8003482:	4013      	ands	r3, r2
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	7fffffc0 	.word	0x7fffffc0

0800349c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d101      	bne.n	80034b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d101      	bne.n	80034da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e18f      	b.n	8003822 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fe fea5 	bl	8002260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff19 	bl	8003360 <LL_ADC_IsDeepPowerDownEnabled>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff feff 	bl	800333c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff34 	bl	80033b0 <LL_ADC_IsInternalRegulatorEnabled>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d114      	bne.n	8003578 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff18 	bl	8003388 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003558:	4b87      	ldr	r3, [pc, #540]	; (8003778 <HAL_ADC_Init+0x290>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	4a87      	ldr	r2, [pc, #540]	; (800377c <HAL_ADC_Init+0x294>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	3301      	adds	r3, #1
 8003568:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800356a:	e002      	b.n	8003572 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	3b01      	subs	r3, #1
 8003570:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f9      	bne.n	800356c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff17 	bl	80033b0 <LL_ADC_IsInternalRegulatorEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f043 0210 	orr.w	r2, r3, #16
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff77 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 80035ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f040 8129 	bne.w	8003810 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 8125 	bne.w	8003810 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035ce:	f043 0202 	orr.w	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff24 	bl	8003428 <LL_ADC_IsEnabled>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d136      	bne.n	8003654 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_ADC_Init+0x298>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_ADC_Init+0x112>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a63      	ldr	r2, [pc, #396]	; (8003784 <HAL_ADC_Init+0x29c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d10e      	bne.n	8003618 <HAL_ADC_Init+0x130>
 80035fa:	4861      	ldr	r0, [pc, #388]	; (8003780 <HAL_ADC_Init+0x298>)
 80035fc:	f7ff ff14 	bl	8003428 <LL_ADC_IsEnabled>
 8003600:	4604      	mov	r4, r0
 8003602:	4860      	ldr	r0, [pc, #384]	; (8003784 <HAL_ADC_Init+0x29c>)
 8003604:	f7ff ff10 	bl	8003428 <LL_ADC_IsEnabled>
 8003608:	4603      	mov	r3, r0
 800360a:	4323      	orrs	r3, r4
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e008      	b.n	800362a <HAL_ADC_Init+0x142>
 8003618:	485b      	ldr	r0, [pc, #364]	; (8003788 <HAL_ADC_Init+0x2a0>)
 800361a:	f7ff ff05 	bl	8003428 <LL_ADC_IsEnabled>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d012      	beq.n	8003654 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a53      	ldr	r2, [pc, #332]	; (8003780 <HAL_ADC_Init+0x298>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_ADC_Init+0x15a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a51      	ldr	r2, [pc, #324]	; (8003784 <HAL_ADC_Init+0x29c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <HAL_ADC_Init+0x15e>
 8003642:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_ADC_Init+0x2a4>)
 8003644:	e000      	b.n	8003648 <HAL_ADC_Init+0x160>
 8003646:	4a52      	ldr	r2, [pc, #328]	; (8003790 <HAL_ADC_Init+0x2a8>)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f7ff fd3c 	bl	80030cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003654:	f7ff fd18 	bl	8003088 <HAL_GetREVID>
 8003658:	4603      	mov	r3, r0
 800365a:	f241 0203 	movw	r2, #4099	; 0x1003
 800365e:	4293      	cmp	r3, r2
 8003660:	d914      	bls.n	800368c <HAL_ADC_Init+0x1a4>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b10      	cmp	r3, #16
 8003668:	d110      	bne.n	800368c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7d5b      	ldrb	r3, [r3, #21]
 800366e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003674:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800367a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7f1b      	ldrb	r3, [r3, #28]
 8003680:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003682:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003684:	f043 030c 	orr.w	r3, r3, #12
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e00d      	b.n	80036a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	7d5b      	ldrb	r3, [r3, #21]
 8003690:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003696:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800369c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7f1b      	ldrb	r3, [r3, #28]
 80036a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7f1b      	ldrb	r3, [r3, #28]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	045b      	lsls	r3, r3, #17
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_ADC_Init+0x2ac>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	69b9      	ldr	r1, [r7, #24]
 80036ea:	430b      	orrs	r3, r1
 80036ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fed2 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 80036f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fedf 	bl	80034c2 <LL_ADC_INJ_IsConversionOngoing>
 8003704:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d15f      	bne.n	80037cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d15c      	bne.n	80037cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7d1b      	ldrb	r3, [r3, #20]
 8003716:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <HAL_ADC_Init+0x2b0>)
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	69b9      	ldr	r1, [r7, #24]
 8003730:	430b      	orrs	r3, r1
 8003732:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800373a:	2b01      	cmp	r3, #1
 800373c:	d130      	bne.n	80037a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <HAL_ADC_Init+0x2b4>)
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003752:	3a01      	subs	r2, #1
 8003754:	0411      	lsls	r1, r2, #16
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003766:	430a      	orrs	r2, r1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	611a      	str	r2, [r3, #16]
 8003774:	e01c      	b.n	80037b0 <HAL_ADC_Init+0x2c8>
 8003776:	bf00      	nop
 8003778:	24000088 	.word	0x24000088
 800377c:	053e2d63 	.word	0x053e2d63
 8003780:	40022000 	.word	0x40022000
 8003784:	40022100 	.word	0x40022100
 8003788:	58026000 	.word	0x58026000
 800378c:	40022300 	.word	0x40022300
 8003790:	58026300 	.word	0x58026300
 8003794:	fff0c003 	.word	0xfff0c003
 8003798:	ffffbffc 	.word	0xffffbffc
 800379c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fdec 	bl	80043a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10c      	bne.n	80037ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f023 010f 	bic.w	r1, r3, #15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	1e5a      	subs	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
 80037ec:	e007      	b.n	80037fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 020f 	bic.w	r2, r2, #15
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
 800380e:	e007      	b.n	8003820 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f043 0210 	orr.w	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003820:	7ffb      	ldrb	r3, [r7, #31]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}
 800382a:	bf00      	nop

0800382c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a55      	ldr	r2, [pc, #340]	; (8003994 <HAL_ADC_Start_DMA+0x168>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_ADC_Start_DMA+0x20>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a54      	ldr	r2, [pc, #336]	; (8003998 <HAL_ADC_Start_DMA+0x16c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_ADC_Start_DMA+0x24>
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_ADC_Start_DMA+0x170>)
 800384e:	e000      	b.n	8003852 <HAL_ADC_Start_DMA+0x26>
 8003850:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <HAL_ADC_Start_DMA+0x174>)
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fd64 	bl	8003320 <LL_ADC_GetMultimode>
 8003858:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fe1c 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	f040 808c 	bne.w	8003984 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_ADC_Start_DMA+0x4e>
 8003876:	2302      	movs	r3, #2
 8003878:	e087      	b.n	800398a <HAL_ADC_Start_DMA+0x15e>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b05      	cmp	r3, #5
 800388c:	d002      	beq.n	8003894 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b09      	cmp	r3, #9
 8003892:	d170      	bne.n	8003976 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fc07 	bl	80040a8 <ADC_Enable>
 800389a:	4603      	mov	r3, r0
 800389c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d163      	bne.n	800396c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038a8:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <HAL_ADC_Start_DMA+0x178>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a37      	ldr	r2, [pc, #220]	; (8003998 <HAL_ADC_Start_DMA+0x16c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d002      	beq.n	80038c4 <HAL_ADC_Start_DMA+0x98>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	e000      	b.n	80038c6 <HAL_ADC_Start_DMA+0x9a>
 80038c4:	4b33      	ldr	r3, [pc, #204]	; (8003994 <HAL_ADC_Start_DMA+0x168>)
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d002      	beq.n	80038d4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d006      	beq.n	80038fa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f023 0206 	bic.w	r2, r3, #6
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	659a      	str	r2, [r3, #88]	; 0x58
 80038f8:	e002      	b.n	8003900 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003904:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <HAL_ADC_Start_DMA+0x17c>)
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <HAL_ADC_Start_DMA+0x180>)
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <HAL_ADC_Start_DMA+0x184>)
 8003916:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	221c      	movs	r2, #28
 800391e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0210 	orr.w	r2, r2, #16
 8003936:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7ff fc89 	bl	800325a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3340      	adds	r3, #64	; 0x40
 8003952:	4619      	mov	r1, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f002 f80e 	bl	8005978 <HAL_DMA_Start_IT>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fd85 	bl	8003474 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800396a:	e00d      	b.n	8003988 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003974:	e008      	b.n	8003988 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003982:	e001      	b.n	8003988 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003984:	2302      	movs	r3, #2
 8003986:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40022100 	.word	0x40022100
 800399c:	40022300 	.word	0x40022300
 80039a0:	58026300 	.word	0x58026300
 80039a4:	fffff0fe 	.word	0xfffff0fe
 80039a8:	0800427b 	.word	0x0800427b
 80039ac:	08004353 	.word	0x08004353
 80039b0:	0800436f 	.word	0x0800436f

080039b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b0a1      	sub	sp, #132	; 0x84
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <HAL_ADC_ConfigChannel+0x1b0>)
 8003a0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x2a>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e32e      	b.n	8004078 <HAL_ADC_ConfigChannel+0x688>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fd38 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 8313 	bne.w	800405a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	db2c      	blt.n	8003a96 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d108      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x6a>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	2201      	movs	r2, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	e016      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x98>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a6a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003a72:	2320      	movs	r3, #32
 8003a74:	e003      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2201      	movs	r2, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	69d1      	ldr	r1, [r2, #28]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	430b      	orrs	r3, r1
 8003a94:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f7ff fbad 	bl	8003202 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fcf5 	bl	800349c <LL_ADC_REG_IsConversionOngoing>
 8003ab2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fd02 	bl	80034c2 <LL_ADC_INJ_IsConversionOngoing>
 8003abe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 80b8 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f040 80b4 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	461a      	mov	r2, r3
 8003ade:	f7ff fbcf 	bl	8003280 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ae2:	4b30      	ldr	r3, [pc, #192]	; (8003ba4 <HAL_ADC_ConfigChannel+0x1b4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aee:	d10b      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x118>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	e01d      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x154>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x13e>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	e00a      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x154>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d02c      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6919      	ldr	r1, [r3, #16]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5c:	f7ff faea 	bl	8003134 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6919      	ldr	r1, [r3, #16]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	7e5b      	ldrb	r3, [r3, #25]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d102      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x186>
 8003b70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b74:	e000      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x188>
 8003b76:	2300      	movs	r3, #0
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f7ff fb14 	bl	80031a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6919      	ldr	r1, [r3, #16]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	7e1b      	ldrb	r3, [r3, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d102      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x1a4>
 8003b8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b92:	e000      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x1a6>
 8003b94:	2300      	movs	r3, #0
 8003b96:	461a      	mov	r2, r3
 8003b98:	f7ff faec 	bl	8003174 <LL_ADC_SetDataRightShift>
 8003b9c:	e04c      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x248>
 8003b9e:	bf00      	nop
 8003ba0:	47ff0000 	.word	0x47ff0000
 8003ba4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	069b      	lsls	r3, r3, #26
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d107      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003bca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	069b      	lsls	r3, r3, #26
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d107      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003bee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	069b      	lsls	r3, r3, #26
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d107      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c12:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	069b      	lsls	r3, r3, #26
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d107      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c36:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fbf3 	bl	8003428 <LL_ADC_IsEnabled>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 8211 	bne.w	800406c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f7ff fb3e 	bl	80032d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4aa1      	ldr	r2, [pc, #644]	; (8003ee8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	f040 812e 	bne.w	8003ec4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x2a0>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e9b      	lsrs	r3, r3, #26
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2b09      	cmp	r3, #9
 8003c86:	bf94      	ite	ls
 8003c88:	2301      	movls	r3, #1
 8003c8a:	2300      	movhi	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e019      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x2d4>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003ca8:	2320      	movs	r3, #32
 8003caa:	e003      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2b09      	cmp	r3, #9
 8003cbc:	bf94      	ite	ls
 8003cbe:	2301      	movls	r3, #1
 8003cc0:	2300      	movhi	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d079      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x2f4>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	3301      	adds	r3, #1
 8003cdc:	069b      	lsls	r3, r3, #26
 8003cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ce2:	e015      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x320>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	e003      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	069b      	lsls	r3, r3, #26
 8003d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x340>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0e9b      	lsrs	r3, r3, #26
 8003d22:	3301      	adds	r3, #1
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	e017      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x370>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	e003      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	ea42 0103 	orr.w	r1, r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x396>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	0e9b      	lsrs	r3, r3, #26
 8003d76:	3301      	adds	r3, #1
 8003d78:	f003 021f 	and.w	r2, r3, #31
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	051b      	lsls	r3, r3, #20
 8003d84:	e018      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x3c8>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003d9e:	2320      	movs	r3, #32
 8003da0:	e003      	b.n	8003daa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003db8:	430b      	orrs	r3, r1
 8003dba:	e07e      	b.n	8003eba <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x3e8>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	3301      	adds	r3, #1
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dd6:	e015      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x414>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003df0:	2320      	movs	r3, #32
 8003df2:	e003      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	069b      	lsls	r3, r3, #26
 8003e00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x434>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	3301      	adds	r3, #1
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	e017      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x464>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	61bb      	str	r3, [r7, #24]
  return result;
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	e003      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	ea42 0103 	orr.w	r1, r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10d      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x490>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	0e9b      	lsrs	r3, r3, #26
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f003 021f 	and.w	r2, r3, #31
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	3b1e      	subs	r3, #30
 8003e78:	051b      	lsls	r3, r3, #20
 8003e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	e01b      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x4c8>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	60fb      	str	r3, [r7, #12]
  return result;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003e98:	2320      	movs	r3, #32
 8003e9a:	e003      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	f003 021f 	and.w	r2, r3, #31
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	3b1e      	subs	r3, #30
 8003eb2:	051b      	lsls	r3, r3, #20
 8003eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	6892      	ldr	r2, [r2, #8]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	f7ff f9de 	bl	8003280 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f280 80cf 	bge.w	800406c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a06      	ldr	r2, [pc, #24]	; (8003eec <HAL_ADC_ConfigChannel+0x4fc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_ADC_ConfigChannel+0x4f2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <HAL_ADC_ConfigChannel+0x500>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x508>
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_ADC_ConfigChannel+0x504>)
 8003ee4:	e009      	b.n	8003efa <HAL_ADC_ConfigChannel+0x50a>
 8003ee6:	bf00      	nop
 8003ee8:	47ff0000 	.word	0x47ff0000
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40022100 	.word	0x40022100
 8003ef4:	40022300 	.word	0x40022300
 8003ef8:	4b61      	ldr	r3, [pc, #388]	; (8004080 <HAL_ADC_ConfigChannel+0x690>)
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff f90c 	bl	8003118 <LL_ADC_GetCommonPathInternalCh>
 8003f00:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a5f      	ldr	r2, [pc, #380]	; (8004084 <HAL_ADC_ConfigChannel+0x694>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_ADC_ConfigChannel+0x526>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5d      	ldr	r2, [pc, #372]	; (8004088 <HAL_ADC_ConfigChannel+0x698>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10e      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x544>
 8003f16:	485b      	ldr	r0, [pc, #364]	; (8004084 <HAL_ADC_ConfigChannel+0x694>)
 8003f18:	f7ff fa86 	bl	8003428 <LL_ADC_IsEnabled>
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	485a      	ldr	r0, [pc, #360]	; (8004088 <HAL_ADC_ConfigChannel+0x698>)
 8003f20:	f7ff fa82 	bl	8003428 <LL_ADC_IsEnabled>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4323      	orrs	r3, r4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e008      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x556>
 8003f34:	4855      	ldr	r0, [pc, #340]	; (800408c <HAL_ADC_ConfigChannel+0x69c>)
 8003f36:	f7ff fa77 	bl	8003428 <LL_ADC_IsEnabled>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d07d      	beq.n	8004046 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a50      	ldr	r2, [pc, #320]	; (8004090 <HAL_ADC_ConfigChannel+0x6a0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d130      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x5c6>
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d12b      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a4a      	ldr	r2, [pc, #296]	; (800408c <HAL_ADC_ConfigChannel+0x69c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	f040 8081 	bne.w	800406c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a45      	ldr	r2, [pc, #276]	; (8004084 <HAL_ADC_ConfigChannel+0x694>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_ADC_ConfigChannel+0x58e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a43      	ldr	r2, [pc, #268]	; (8004088 <HAL_ADC_ConfigChannel+0x698>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x592>
 8003f7e:	4a45      	ldr	r2, [pc, #276]	; (8004094 <HAL_ADC_ConfigChannel+0x6a4>)
 8003f80:	e000      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x594>
 8003f82:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <HAL_ADC_ConfigChannel+0x690>)
 8003f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7ff f8b0 	bl	80030f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_ADC_ConfigChannel+0x6a8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	4a40      	ldr	r2, [pc, #256]	; (800409c <HAL_ADC_ConfigChannel+0x6ac>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003fa6:	e002      	b.n	8003fae <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f9      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fb4:	e05a      	b.n	800406c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a39      	ldr	r2, [pc, #228]	; (80040a0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d11e      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x60e>
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d119      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2f      	ldr	r2, [pc, #188]	; (800408c <HAL_ADC_ConfigChannel+0x69c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d14b      	bne.n	800406c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <HAL_ADC_ConfigChannel+0x694>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_ADC_ConfigChannel+0x5f8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a29      	ldr	r2, [pc, #164]	; (8004088 <HAL_ADC_ConfigChannel+0x698>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_ADC_ConfigChannel+0x5fc>
 8003fe8:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <HAL_ADC_ConfigChannel+0x6a4>)
 8003fea:	e000      	b.n	8003fee <HAL_ADC_ConfigChannel+0x5fe>
 8003fec:	4a24      	ldr	r2, [pc, #144]	; (8004080 <HAL_ADC_ConfigChannel+0x690>)
 8003fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f7ff f87b 	bl	80030f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ffc:	e036      	b.n	800406c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a28      	ldr	r2, [pc, #160]	; (80040a4 <HAL_ADC_ConfigChannel+0x6b4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d131      	bne.n	800406c <HAL_ADC_ConfigChannel+0x67c>
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d12c      	bne.n	800406c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1d      	ldr	r2, [pc, #116]	; (800408c <HAL_ADC_ConfigChannel+0x69c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d127      	bne.n	800406c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a18      	ldr	r2, [pc, #96]	; (8004084 <HAL_ADC_ConfigChannel+0x694>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x640>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a17      	ldr	r2, [pc, #92]	; (8004088 <HAL_ADC_ConfigChannel+0x698>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x644>
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <HAL_ADC_ConfigChannel+0x6a4>)
 8004032:	e000      	b.n	8004036 <HAL_ADC_ConfigChannel+0x646>
 8004034:	4a12      	ldr	r2, [pc, #72]	; (8004080 <HAL_ADC_ConfigChannel+0x690>)
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f7ff f857 	bl	80030f2 <LL_ADC_SetCommonPathInternalCh>
 8004044:	e012      	b.n	800406c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004058:	e008      	b.n	800406c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004074:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004078:	4618      	mov	r0, r3
 800407a:	3784      	adds	r7, #132	; 0x84
 800407c:	46bd      	mov	sp, r7
 800407e:	bd90      	pop	{r4, r7, pc}
 8004080:	58026300 	.word	0x58026300
 8004084:	40022000 	.word	0x40022000
 8004088:	40022100 	.word	0x40022100
 800408c:	58026000 	.word	0x58026000
 8004090:	cb840000 	.word	0xcb840000
 8004094:	40022300 	.word	0x40022300
 8004098:	24000088 	.word	0x24000088
 800409c:	053e2d63 	.word	0x053e2d63
 80040a0:	c7520000 	.word	0xc7520000
 80040a4:	cfb80000 	.word	0xcfb80000

080040a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff f9b7 	bl	8003428 <LL_ADC_IsEnabled>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d16e      	bne.n	800419e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <ADC_Enable+0x100>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f043 0210 	orr.w	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f043 0201 	orr.w	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e05a      	b.n	80041a0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff f972 	bl	80033d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040f4:	f7fe ffbc 	bl	8003070 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <ADC_Enable+0x104>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <ADC_Enable+0x66>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <ADC_Enable+0x108>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <ADC_Enable+0x6a>
 800410e:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <ADC_Enable+0x10c>)
 8004110:	e000      	b.n	8004114 <ADC_Enable+0x6c>
 8004112:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <ADC_Enable+0x110>)
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f903 	bl	8003320 <LL_ADC_GetMultimode>
 800411a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <ADC_Enable+0x108>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d002      	beq.n	800412c <ADC_Enable+0x84>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	e000      	b.n	800412e <ADC_Enable+0x86>
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <ADC_Enable+0x104>)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	4293      	cmp	r3, r2
 8004134:	d02c      	beq.n	8004190 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d130      	bne.n	800419e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800413c:	e028      	b.n	8004190 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff f970 	bl	8003428 <LL_ADC_IsEnabled>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f940 	bl	80033d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004158:	f7fe ff8a 	bl	8003070 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d914      	bls.n	8004190 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d00d      	beq.n	8004190 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f043 0210 	orr.w	r2, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e007      	b.n	80041a0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d1cf      	bne.n	800413e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	8000003f 	.word	0x8000003f
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40022100 	.word	0x40022100
 80041b4:	40022300 	.word	0x40022300
 80041b8:	58026300 	.word	0x58026300

080041bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff f940 	bl	800344e <LL_ADC_IsDisableOngoing>
 80041ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff f927 	bl	8003428 <LL_ADC_IsEnabled>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d047      	beq.n	8004270 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d144      	bne.n	8004270 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 030d 	and.w	r3, r3, #13
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d10c      	bne.n	800420e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff f901 	bl	8003400 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2203      	movs	r2, #3
 8004204:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004206:	f7fe ff33 	bl	8003070 <HAL_GetTick>
 800420a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800420c:	e029      	b.n	8004262 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f043 0210 	orr.w	r2, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	f043 0201 	orr.w	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e023      	b.n	8004272 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800422a:	f7fe ff21 	bl	8003070 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d914      	bls.n	8004262 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f043 0210 	orr.w	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e007      	b.n	8004272 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1dc      	bne.n	800422a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004290:	2b00      	cmp	r3, #0
 8004292:	d14b      	bne.n	800432c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d021      	beq.n	80042f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe ff92 	bl	80031dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d032      	beq.n	8004324 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d12b      	bne.n	8004324 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d11f      	bne.n	8004324 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	f043 0201 	orr.w	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
 80042f0:	e018      	b.n	8004324 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d111      	bne.n	8004324 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f043 0201 	orr.w	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff fb45 	bl	80039b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800432a:	e00e      	b.n	800434a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff fb4f 	bl	80039dc <HAL_ADC_ErrorCallback>
}
 800433e:	e004      	b.n	800434a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fb31 	bl	80039c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f043 0204 	orr.w	r2, r3, #4
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fb21 	bl	80039dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a7a      	ldr	r2, [pc, #488]	; (800459c <ADC_ConfigureBoostMode+0x1f8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <ADC_ConfigureBoostMode+0x1c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a79      	ldr	r2, [pc, #484]	; (80045a0 <ADC_ConfigureBoostMode+0x1fc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d109      	bne.n	80043d4 <ADC_ConfigureBoostMode+0x30>
 80043c0:	4b78      	ldr	r3, [pc, #480]	; (80045a4 <ADC_ConfigureBoostMode+0x200>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e008      	b.n	80043e6 <ADC_ConfigureBoostMode+0x42>
 80043d4:	4b74      	ldr	r3, [pc, #464]	; (80045a8 <ADC_ConfigureBoostMode+0x204>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01c      	beq.n	8004424 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80043ea:	f005 f87f 	bl	80094ec <HAL_RCC_GetHCLKFreq>
 80043ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043f8:	d010      	beq.n	800441c <ADC_ConfigureBoostMode+0x78>
 80043fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043fe:	d873      	bhi.n	80044e8 <ADC_ConfigureBoostMode+0x144>
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004404:	d002      	beq.n	800440c <ADC_ConfigureBoostMode+0x68>
 8004406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800440a:	d16d      	bne.n	80044e8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	60fb      	str	r3, [r7, #12]
        break;
 800441a:	e068      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	60fb      	str	r3, [r7, #12]
        break;
 8004422:	e064      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004424:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	f006 fb06 	bl	800aa3c <HAL_RCCEx_GetPeriphCLKFreq>
 8004430:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800443a:	d051      	beq.n	80044e0 <ADC_ConfigureBoostMode+0x13c>
 800443c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004440:	d854      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 8004442:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004446:	d047      	beq.n	80044d8 <ADC_ConfigureBoostMode+0x134>
 8004448:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800444c:	d84e      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 800444e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004452:	d03d      	beq.n	80044d0 <ADC_ConfigureBoostMode+0x12c>
 8004454:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004458:	d848      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 800445a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800445e:	d033      	beq.n	80044c8 <ADC_ConfigureBoostMode+0x124>
 8004460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004464:	d842      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 8004466:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800446a:	d029      	beq.n	80044c0 <ADC_ConfigureBoostMode+0x11c>
 800446c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004470:	d83c      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 8004472:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004476:	d01a      	beq.n	80044ae <ADC_ConfigureBoostMode+0x10a>
 8004478:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800447c:	d836      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 800447e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004482:	d014      	beq.n	80044ae <ADC_ConfigureBoostMode+0x10a>
 8004484:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004488:	d830      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 800448a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800448e:	d00e      	beq.n	80044ae <ADC_ConfigureBoostMode+0x10a>
 8004490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004494:	d82a      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 8004496:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800449a:	d008      	beq.n	80044ae <ADC_ConfigureBoostMode+0x10a>
 800449c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044a0:	d824      	bhi.n	80044ec <ADC_ConfigureBoostMode+0x148>
 80044a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044a6:	d002      	beq.n	80044ae <ADC_ConfigureBoostMode+0x10a>
 80044a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044ac:	d11e      	bne.n	80044ec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	0c9b      	lsrs	r3, r3, #18
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	60fb      	str	r3, [r7, #12]
        break;
 80044be:	e016      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
        break;
 80044c6:	e012      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	60fb      	str	r3, [r7, #12]
        break;
 80044ce:	e00e      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	099b      	lsrs	r3, r3, #6
 80044d4:	60fb      	str	r3, [r7, #12]
        break;
 80044d6:	e00a      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	09db      	lsrs	r3, r3, #7
 80044dc:	60fb      	str	r3, [r7, #12]
        break;
 80044de:	e006      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	60fb      	str	r3, [r7, #12]
        break;
 80044e6:	e002      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
        break;
 80044e8:	bf00      	nop
 80044ea:	e000      	b.n	80044ee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80044ec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80044ee:	f7fe fdcb 	bl	8003088 <HAL_GetREVID>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d815      	bhi.n	8004528 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <ADC_ConfigureBoostMode+0x208>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d908      	bls.n	8004516 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004512:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004514:	e03e      	b.n	8004594 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004524:	609a      	str	r2, [r3, #8]
}
 8004526:	e035      	b.n	8004594 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <ADC_ConfigureBoostMode+0x20c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d808      	bhi.n	8004548 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004544:	609a      	str	r2, [r3, #8]
}
 8004546:	e025      	b.n	8004594 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <ADC_ConfigureBoostMode+0x210>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d80a      	bhi.n	8004566 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004562:	609a      	str	r2, [r3, #8]
}
 8004564:	e016      	b.n	8004594 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <ADC_ConfigureBoostMode+0x214>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d80a      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004580:	609a      	str	r2, [r3, #8]
}
 8004582:	e007      	b.n	8004594 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40022000 	.word	0x40022000
 80045a0:	40022100 	.word	0x40022100
 80045a4:	40022300 	.word	0x40022300
 80045a8:	58026300 	.word	0x58026300
 80045ac:	01312d00 	.word	0x01312d00
 80045b0:	005f5e10 	.word	0x005f5e10
 80045b4:	00bebc20 	.word	0x00bebc20
 80045b8:	017d7840 	.word	0x017d7840

080045bc <LL_ADC_IsEnabled>:
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <LL_ADC_IsEnabled+0x18>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <LL_ADC_IsEnabled+0x1a>
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <LL_ADC_StartCalibration>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	4b09      	ldr	r3, [pc, #36]	; (800461c <LL_ADC_StartCalibration+0x38>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004604:	430a      	orrs	r2, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	3ffeffc0 	.word	0x3ffeffc0

08004620 <LL_ADC_IsCalibrationOnGoing>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004634:	d101      	bne.n	800463a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_REG_IsConversionOngoing>:
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b04      	cmp	r3, #4
 800465a:	d101      	bne.n	8004660 <LL_ADC_REG_IsConversionOngoing+0x18>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_ADCEx_Calibration_Start+0x1e>
 800468a:	2302      	movs	r3, #2
 800468c:	e04c      	b.n	8004728 <HAL_ADCEx_Calibration_Start+0xb8>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f7ff fd90 	bl	80041bc <ADC_Disable>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d135      	bne.n	8004712 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_ADCEx_Calibration_Start+0xc0>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	f043 0202 	orr.w	r2, r3, #2
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ff90 	bl	80045e4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046c4:	e014      	b.n	80046f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3301      	adds	r3, #1
 80046ca:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4a19      	ldr	r2, [pc, #100]	; (8004734 <HAL_ADCEx_Calibration_Start+0xc4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d30d      	bcc.n	80046f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	f023 0312 	bic.w	r3, r3, #18
 80046dc:	f043 0210 	orr.w	r2, r3, #16
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e01b      	b.n	8004728 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff93 	bl	8004620 <LL_ADC_IsCalibrationOnGoing>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e2      	bne.n	80046c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	f023 0303 	bic.w	r3, r3, #3
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
 8004710:	e005      	b.n	800471e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f043 0210 	orr.w	r2, r3, #16
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	ffffeefd 	.word	0xffffeefd
 8004734:	25c3f800 	.word	0x25c3f800

08004738 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b09f      	sub	sp, #124	; 0x7c
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004752:	2302      	movs	r3, #2
 8004754:	e0be      	b.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004762:	2300      	movs	r3, #0
 8004764:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a5c      	ldr	r2, [pc, #368]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d102      	bne.n	8004776 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004770:	4b5b      	ldr	r3, [pc, #364]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	e001      	b.n	800477a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e09d      	b.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ff54 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 80047a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff4e 	bl	8004648 <LL_ADC_REG_IsConversionOngoing>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d17f      	bne.n	80048b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80047b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d17c      	bne.n	80048b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a47      	ldr	r2, [pc, #284]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a46      	ldr	r2, [pc, #280]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80047cc:	4b45      	ldr	r3, [pc, #276]	; (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047ce:	e000      	b.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80047d0:	4b45      	ldr	r3, [pc, #276]	; (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d039      	beq.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80047dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3a      	ldr	r2, [pc, #232]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10e      	bne.n	8004820 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004802:	4836      	ldr	r0, [pc, #216]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004804:	f7ff feda 	bl	80045bc <LL_ADC_IsEnabled>
 8004808:	4604      	mov	r4, r0
 800480a:	4835      	ldr	r0, [pc, #212]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800480c:	f7ff fed6 	bl	80045bc <LL_ADC_IsEnabled>
 8004810:	4603      	mov	r3, r0
 8004812:	4323      	orrs	r3, r4
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e008      	b.n	8004832 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004820:	4832      	ldr	r0, [pc, #200]	; (80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004822:	f7ff fecb 	bl	80045bc <LL_ADC_IsEnabled>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d047      	beq.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800483c:	4013      	ands	r3, r2
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	6811      	ldr	r1, [r2, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	6892      	ldr	r2, [r2, #8]
 8004846:	430a      	orrs	r2, r1
 8004848:	431a      	orrs	r2, r3
 800484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800484e:	e03a      	b.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1e      	ldr	r2, [pc, #120]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10e      	bne.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004870:	481a      	ldr	r0, [pc, #104]	; (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004872:	f7ff fea3 	bl	80045bc <LL_ADC_IsEnabled>
 8004876:	4604      	mov	r4, r0
 8004878:	4819      	ldr	r0, [pc, #100]	; (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800487a:	f7ff fe9f 	bl	80045bc <LL_ADC_IsEnabled>
 800487e:	4603      	mov	r3, r0
 8004880:	4323      	orrs	r3, r4
 8004882:	2b00      	cmp	r3, #0
 8004884:	bf0c      	ite	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	2300      	movne	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e008      	b.n	80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800488e:	4817      	ldr	r0, [pc, #92]	; (80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004890:	f7ff fe94 	bl	80045bc <LL_ADC_IsEnabled>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	bf0c      	ite	eq
 800489a:	2301      	moveq	r3, #1
 800489c:	2300      	movne	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d010      	beq.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048b0:	e009      	b.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80048c4:	e000      	b.n	80048c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80048d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	377c      	adds	r7, #124	; 0x7c
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd90      	pop	{r4, r7, pc}
 80048dc:	40022000 	.word	0x40022000
 80048e0:	40022100 	.word	0x40022100
 80048e4:	40022300 	.word	0x40022300
 80048e8:	58026300 	.word	0x58026300
 80048ec:	58026000 	.word	0x58026000
 80048f0:	fffff0e0 	.word	0xfffff0e0

080048f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <__NVIC_SetPriorityGrouping+0x40>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004910:	4013      	ands	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <__NVIC_SetPriorityGrouping+0x44>)
 800491e:	4313      	orrs	r3, r2
 8004920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004922:	4a04      	ldr	r2, [pc, #16]	; (8004934 <__NVIC_SetPriorityGrouping+0x40>)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	60d3      	str	r3, [r2, #12]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000ed00 	.word	0xe000ed00
 8004938:	05fa0000 	.word	0x05fa0000

0800493c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <__NVIC_GetPriorityGrouping+0x18>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	f003 0307 	and.w	r3, r3, #7
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004966:	2b00      	cmp	r3, #0
 8004968:	db0b      	blt.n	8004982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	f003 021f 	and.w	r2, r3, #31
 8004970:	4907      	ldr	r1, [pc, #28]	; (8004990 <__NVIC_EnableIRQ+0x38>)
 8004972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2001      	movs	r0, #1
 800497a:	fa00 f202 	lsl.w	r2, r0, r2
 800497e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e100 	.word	0xe000e100

08004994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	db0a      	blt.n	80049be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	490c      	ldr	r1, [pc, #48]	; (80049e0 <__NVIC_SetPriority+0x4c>)
 80049ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	440b      	add	r3, r1
 80049b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049bc:	e00a      	b.n	80049d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	4908      	ldr	r1, [pc, #32]	; (80049e4 <__NVIC_SetPriority+0x50>)
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	3b04      	subs	r3, #4
 80049cc:	0112      	lsls	r2, r2, #4
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	440b      	add	r3, r1
 80049d2:	761a      	strb	r2, [r3, #24]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000e100 	.word	0xe000e100
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b089      	sub	sp, #36	; 0x24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f1c3 0307 	rsb	r3, r3, #7
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	bf28      	it	cs
 8004a06:	2304      	movcs	r3, #4
 8004a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	d902      	bls.n	8004a18 <NVIC_EncodePriority+0x30>
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3b03      	subs	r3, #3
 8004a16:	e000      	b.n	8004a1a <NVIC_EncodePriority+0x32>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43da      	mvns	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3a:	43d9      	mvns	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a40:	4313      	orrs	r3, r2
         );
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3724      	adds	r7, #36	; 0x24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ff4c 	bl	80048f4 <__NVIC_SetPriorityGrouping>
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a72:	f7ff ff63 	bl	800493c <__NVIC_GetPriorityGrouping>
 8004a76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	6978      	ldr	r0, [r7, #20]
 8004a7e:	f7ff ffb3 	bl	80049e8 <NVIC_EncodePriority>
 8004a82:	4602      	mov	r2, r0
 8004a84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ff82 	bl	8004994 <__NVIC_SetPriority>
}
 8004a90:	bf00      	nop
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff ff56 	bl	8004958 <__NVIC_EnableIRQ>
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e014      	b.n	8004af0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	791b      	ldrb	r3, [r3, #4]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fd fcdc 	bl	8002494 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e046      	b.n	8004b9a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	795b      	ldrb	r3, [r3, #5]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_DAC_Start+0x20>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e040      	b.n	8004b9a <HAL_DAC_Start+0xa2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2201      	movs	r2, #1
 8004b32:	409a      	lsls	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d11d      	bne.n	8004b8c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	e014      	b.n	8004b8c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2102      	movs	r1, #2
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d107      	bne.n	8004b8c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0202 	orr.w	r2, r2, #2
 8004b8a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0a2      	b.n	8004d06 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	795b      	ldrb	r3, [r3, #5]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_DAC_Start_DMA+0x24>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e09c      	b.n	8004d06 <HAL_DAC_Start_DMA+0x15e>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d129      	bne.n	8004c32 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4a4b      	ldr	r2, [pc, #300]	; (8004d10 <HAL_DAC_Start_DMA+0x168>)
 8004be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	4a4a      	ldr	r2, [pc, #296]	; (8004d14 <HAL_DAC_Start_DMA+0x16c>)
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4a49      	ldr	r2, [pc, #292]	; (8004d18 <HAL_DAC_Start_DMA+0x170>)
 8004bf4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c04:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_DAC_Start_DMA+0x6c>
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d005      	beq.n	8004c1e <HAL_DAC_Start_DMA+0x76>
 8004c12:	e009      	b.n	8004c28 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	613b      	str	r3, [r7, #16]
        break;
 8004c1c:	e033      	b.n	8004c86 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	613b      	str	r3, [r7, #16]
        break;
 8004c26:	e02e      	b.n	8004c86 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	613b      	str	r3, [r7, #16]
        break;
 8004c30:	e029      	b.n	8004c86 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_DAC_Start_DMA+0x174>)
 8004c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	4a38      	ldr	r2, [pc, #224]	; (8004d20 <HAL_DAC_Start_DMA+0x178>)
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4a37      	ldr	r2, [pc, #220]	; (8004d24 <HAL_DAC_Start_DMA+0x17c>)
 8004c48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c58:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_DAC_Start_DMA+0xc0>
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d005      	beq.n	8004c72 <HAL_DAC_Start_DMA+0xca>
 8004c66:	e009      	b.n	8004c7c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	613b      	str	r3, [r7, #16]
        break;
 8004c70:	e009      	b.n	8004c86 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3318      	adds	r3, #24
 8004c78:	613b      	str	r3, [r7, #16]
        break;
 8004c7a:	e004      	b.n	8004c86 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	331c      	adds	r3, #28
 8004c82:	613b      	str	r3, [r7, #16]
        break;
 8004c84:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6898      	ldr	r0, [r3, #8]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	f000 fe67 	bl	8005978 <HAL_DMA_Start_IT>
 8004caa:	4603      	mov	r3, r0
 8004cac:	75fb      	strb	r3, [r7, #23]
 8004cae:	e010      	b.n	8004cd2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004cbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68d8      	ldr	r0, [r3, #12]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	f000 fe55 	bl	8005978 <HAL_DMA_Start_IT>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2201      	movs	r2, #1
 8004cec:	409a      	lsls	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e005      	b.n	8004d04 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f043 0204 	orr.w	r2, r3, #4
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	08005199 	.word	0x08005199
 8004d14:	080051bb 	.word	0x080051bb
 8004d18:	080051d7 	.word	0x080051d7
 8004d1c:	08005255 	.word	0x08005255
 8004d20:	08005277 	.word	0x08005277
 8004d24:	08005293 	.word	0x08005293

08004d28 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e03e      	b.n	8004dba <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43da      	mvns	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	400a      	ands	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2201      	movs	r2, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	400a      	ands	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10d      	bne.n	8004d98 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 f863 	bl	8005e4c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e00c      	b.n	8004db2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f855 	bl	8005e4c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004db0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01d      	beq.n	8004e20 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d018      	beq.n	8004e20 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2204      	movs	r2, #4
 8004df2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f043 0201 	orr.w	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e18:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f86f 	bl	8004efe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01d      	beq.n	8004e66 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d018      	beq.n	8004e66 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2204      	movs	r2, #4
 8004e38:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f043 0202 	orr.w	r2, r3, #2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f9ed 	bl	8005240 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b087      	sub	sp, #28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e015      	b.n	8004eb6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e004      	b.n	8004eac <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_DAC_ConfigChannel+0x1e>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e12a      	b.n	800518c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	795b      	ldrb	r3, [r3, #5]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_DAC_ConfigChannel+0x2e>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e124      	b.n	800518c <HAL_DAC_ConfigChannel+0x278>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d17a      	bne.n	800504c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004f56:	f7fe f88b 	bl	8003070 <HAL_GetTick>
 8004f5a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d13d      	bne.n	8004fde <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f62:	e018      	b.n	8004f96 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f64:	f7fe f884 	bl	8003070 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d911      	bls.n	8004f96 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f78:	4b86      	ldr	r3, [pc, #536]	; (8005194 <HAL_DAC_ConfigChannel+0x280>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f043 0208 	orr.w	r2, r3, #8
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0fa      	b.n	800518c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f9c:	4b7d      	ldr	r3, [pc, #500]	; (8005194 <HAL_DAC_ConfigChannel+0x280>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1df      	bne.n	8004f64 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	6992      	ldr	r2, [r2, #24]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
 8004fae:	e020      	b.n	8004ff2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fb0:	f7fe f85e 	bl	8003070 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d90f      	bls.n	8004fde <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da0a      	bge.n	8004fde <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f043 0208 	orr.w	r2, r3, #8
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0d6      	b.n	800518c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dbe3      	blt.n	8004fb0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	6992      	ldr	r2, [r2, #24]
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	43db      	mvns	r3, r3
 8005008:	ea02 0103 	and.w	r1, r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	409a      	lsls	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	21ff      	movs	r1, #255	; 0xff
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	ea02 0103 	and.w	r1, r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	409a      	lsls	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d11d      	bne.n	8005090 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	221f      	movs	r2, #31
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	2207      	movs	r2, #7
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	e00f      	b.n	80050da <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d102      	bne.n	80050c8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80050c2:	2301      	movs	r3, #1
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	e008      	b.n	80050da <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80050d0:	2301      	movs	r3, #1
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
 80050d4:	e001      	b.n	80050da <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43da      	mvns	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	400a      	ands	r2, r1
 8005120:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	22c0      	movs	r2, #192	; 0xc0
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43da      	mvns	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	400a      	ands	r2, r1
 800517a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800518c:	4618      	mov	r0, r3
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20008000 	.word	0x20008000

08005198 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff fe8b 	bl	8004ec2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	711a      	strb	r2, [r3, #4]
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7ff fe84 	bl	8004ed6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f043 0204 	orr.w	r2, r3, #4
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff fe7a 	bl	8004eea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	711a      	strb	r2, [r3, #4]
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff ffce 	bl	8005204 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	711a      	strb	r2, [r3, #4]
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff ffc7 	bl	8005218 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f043 0204 	orr.w	r2, r3, #4
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff ffbd 	bl	800522c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	711a      	strb	r2, [r3, #4]
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80052c8:	f7fd fed2 	bl	8003070 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e316      	b.n	8005906 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a66      	ldr	r2, [pc, #408]	; (8005478 <HAL_DMA_Init+0x1b8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d04a      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a65      	ldr	r2, [pc, #404]	; (800547c <HAL_DMA_Init+0x1bc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d045      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a63      	ldr	r2, [pc, #396]	; (8005480 <HAL_DMA_Init+0x1c0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d040      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a62      	ldr	r2, [pc, #392]	; (8005484 <HAL_DMA_Init+0x1c4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d03b      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a60      	ldr	r2, [pc, #384]	; (8005488 <HAL_DMA_Init+0x1c8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d036      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a5f      	ldr	r2, [pc, #380]	; (800548c <HAL_DMA_Init+0x1cc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d031      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5d      	ldr	r2, [pc, #372]	; (8005490 <HAL_DMA_Init+0x1d0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d02c      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a5c      	ldr	r2, [pc, #368]	; (8005494 <HAL_DMA_Init+0x1d4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d027      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a5a      	ldr	r2, [pc, #360]	; (8005498 <HAL_DMA_Init+0x1d8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d022      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a59      	ldr	r2, [pc, #356]	; (800549c <HAL_DMA_Init+0x1dc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d01d      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a57      	ldr	r2, [pc, #348]	; (80054a0 <HAL_DMA_Init+0x1e0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d018      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a56      	ldr	r2, [pc, #344]	; (80054a4 <HAL_DMA_Init+0x1e4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a54      	ldr	r2, [pc, #336]	; (80054a8 <HAL_DMA_Init+0x1e8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a53      	ldr	r2, [pc, #332]	; (80054ac <HAL_DMA_Init+0x1ec>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a51      	ldr	r2, [pc, #324]	; (80054b0 <HAL_DMA_Init+0x1f0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_DMA_Init+0xb8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a50      	ldr	r2, [pc, #320]	; (80054b4 <HAL_DMA_Init+0x1f4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d101      	bne.n	800537c <HAL_DMA_Init+0xbc>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <HAL_DMA_Init+0xbe>
 800537c:	2300      	movs	r3, #0
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 813b 	beq.w	80055fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a37      	ldr	r2, [pc, #220]	; (8005478 <HAL_DMA_Init+0x1b8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d04a      	beq.n	8005434 <HAL_DMA_Init+0x174>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a36      	ldr	r2, [pc, #216]	; (800547c <HAL_DMA_Init+0x1bc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d045      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a34      	ldr	r2, [pc, #208]	; (8005480 <HAL_DMA_Init+0x1c0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d040      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a33      	ldr	r2, [pc, #204]	; (8005484 <HAL_DMA_Init+0x1c4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d03b      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a31      	ldr	r2, [pc, #196]	; (8005488 <HAL_DMA_Init+0x1c8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d036      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a30      	ldr	r2, [pc, #192]	; (800548c <HAL_DMA_Init+0x1cc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d031      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2e      	ldr	r2, [pc, #184]	; (8005490 <HAL_DMA_Init+0x1d0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02c      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2d      	ldr	r2, [pc, #180]	; (8005494 <HAL_DMA_Init+0x1d4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d027      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2b      	ldr	r2, [pc, #172]	; (8005498 <HAL_DMA_Init+0x1d8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2a      	ldr	r2, [pc, #168]	; (800549c <HAL_DMA_Init+0x1dc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <HAL_DMA_Init+0x174>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <HAL_DMA_Init+0x1e0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_DMA_Init+0x174>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <HAL_DMA_Init+0x1e4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_DMA_Init+0x174>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a25      	ldr	r2, [pc, #148]	; (80054a8 <HAL_DMA_Init+0x1e8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_DMA_Init+0x174>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a24      	ldr	r2, [pc, #144]	; (80054ac <HAL_DMA_Init+0x1ec>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_DMA_Init+0x174>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a22      	ldr	r2, [pc, #136]	; (80054b0 <HAL_DMA_Init+0x1f0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_DMA_Init+0x174>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a21      	ldr	r2, [pc, #132]	; (80054b4 <HAL_DMA_Init+0x1f4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <HAL_DMA_Init+0x186>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e007      	b.n	8005456 <HAL_DMA_Init+0x196>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005456:	e02f      	b.n	80054b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005458:	f7fd fe0a 	bl	8003070 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b05      	cmp	r3, #5
 8005464:	d928      	bls.n	80054b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2203      	movs	r2, #3
 8005470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e246      	b.n	8005906 <HAL_DMA_Init+0x646>
 8005478:	40020010 	.word	0x40020010
 800547c:	40020028 	.word	0x40020028
 8005480:	40020040 	.word	0x40020040
 8005484:	40020058 	.word	0x40020058
 8005488:	40020070 	.word	0x40020070
 800548c:	40020088 	.word	0x40020088
 8005490:	400200a0 	.word	0x400200a0
 8005494:	400200b8 	.word	0x400200b8
 8005498:	40020410 	.word	0x40020410
 800549c:	40020428 	.word	0x40020428
 80054a0:	40020440 	.word	0x40020440
 80054a4:	40020458 	.word	0x40020458
 80054a8:	40020470 	.word	0x40020470
 80054ac:	40020488 	.word	0x40020488
 80054b0:	400204a0 	.word	0x400204a0
 80054b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1c8      	bne.n	8005458 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4b83      	ldr	r3, [pc, #524]	; (80056e0 <HAL_DMA_Init+0x420>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80054de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b04      	cmp	r3, #4
 800550a:	d107      	bne.n	800551c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	4313      	orrs	r3, r2
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800551c:	4b71      	ldr	r3, [pc, #452]	; (80056e4 <HAL_DMA_Init+0x424>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b71      	ldr	r3, [pc, #452]	; (80056e8 <HAL_DMA_Init+0x428>)
 8005522:	4013      	ands	r3, r2
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005528:	d328      	bcc.n	800557c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b28      	cmp	r3, #40	; 0x28
 8005530:	d903      	bls.n	800553a <HAL_DMA_Init+0x27a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b2e      	cmp	r3, #46	; 0x2e
 8005538:	d917      	bls.n	800556a <HAL_DMA_Init+0x2aa>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b3e      	cmp	r3, #62	; 0x3e
 8005540:	d903      	bls.n	800554a <HAL_DMA_Init+0x28a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b42      	cmp	r3, #66	; 0x42
 8005548:	d90f      	bls.n	800556a <HAL_DMA_Init+0x2aa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b46      	cmp	r3, #70	; 0x46
 8005550:	d903      	bls.n	800555a <HAL_DMA_Init+0x29a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b48      	cmp	r3, #72	; 0x48
 8005558:	d907      	bls.n	800556a <HAL_DMA_Init+0x2aa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b4e      	cmp	r3, #78	; 0x4e
 8005560:	d905      	bls.n	800556e <HAL_DMA_Init+0x2ae>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b52      	cmp	r3, #82	; 0x52
 8005568:	d801      	bhi.n	800556e <HAL_DMA_Init+0x2ae>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_DMA_Init+0x2b0>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d117      	bne.n	80055d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00e      	beq.n	80055d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f002 fb33 	bl	8007c24 <DMA_CheckFifoParam>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2240      	movs	r2, #64	; 0x40
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e197      	b.n	8005906 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f002 fa6e 	bl	8007ac0 <DMA_CalcBaseAndBitshift>
 80055e4:	4603      	mov	r3, r0
 80055e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	223f      	movs	r2, #63	; 0x3f
 80055f2:	409a      	lsls	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	e0cd      	b.n	8005796 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a3b      	ldr	r2, [pc, #236]	; (80056ec <HAL_DMA_Init+0x42c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_DMA_Init+0x38a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a39      	ldr	r2, [pc, #228]	; (80056f0 <HAL_DMA_Init+0x430>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_DMA_Init+0x38a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a38      	ldr	r2, [pc, #224]	; (80056f4 <HAL_DMA_Init+0x434>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_DMA_Init+0x38a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a36      	ldr	r2, [pc, #216]	; (80056f8 <HAL_DMA_Init+0x438>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_DMA_Init+0x38a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a35      	ldr	r2, [pc, #212]	; (80056fc <HAL_DMA_Init+0x43c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_DMA_Init+0x38a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a33      	ldr	r2, [pc, #204]	; (8005700 <HAL_DMA_Init+0x440>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_DMA_Init+0x38a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a32      	ldr	r2, [pc, #200]	; (8005704 <HAL_DMA_Init+0x444>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_DMA_Init+0x38a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a30      	ldr	r2, [pc, #192]	; (8005708 <HAL_DMA_Init+0x448>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <HAL_DMA_Init+0x38e>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_DMA_Init+0x390>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8097 	beq.w	8005784 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a24      	ldr	r2, [pc, #144]	; (80056ec <HAL_DMA_Init+0x42c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d021      	beq.n	80056a4 <HAL_DMA_Init+0x3e4>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a22      	ldr	r2, [pc, #136]	; (80056f0 <HAL_DMA_Init+0x430>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01c      	beq.n	80056a4 <HAL_DMA_Init+0x3e4>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a21      	ldr	r2, [pc, #132]	; (80056f4 <HAL_DMA_Init+0x434>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d017      	beq.n	80056a4 <HAL_DMA_Init+0x3e4>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <HAL_DMA_Init+0x438>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d012      	beq.n	80056a4 <HAL_DMA_Init+0x3e4>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <HAL_DMA_Init+0x43c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00d      	beq.n	80056a4 <HAL_DMA_Init+0x3e4>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <HAL_DMA_Init+0x440>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d008      	beq.n	80056a4 <HAL_DMA_Init+0x3e4>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1b      	ldr	r2, [pc, #108]	; (8005704 <HAL_DMA_Init+0x444>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <HAL_DMA_Init+0x3e4>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a19      	ldr	r2, [pc, #100]	; (8005708 <HAL_DMA_Init+0x448>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4b12      	ldr	r3, [pc, #72]	; (800570c <HAL_DMA_Init+0x44c>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d020      	beq.n	8005710 <HAL_DMA_Init+0x450>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d102      	bne.n	80056dc <HAL_DMA_Init+0x41c>
 80056d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056da:	e01a      	b.n	8005712 <HAL_DMA_Init+0x452>
 80056dc:	2300      	movs	r3, #0
 80056de:	e018      	b.n	8005712 <HAL_DMA_Init+0x452>
 80056e0:	fe10803f 	.word	0xfe10803f
 80056e4:	5c001000 	.word	0x5c001000
 80056e8:	ffff0000 	.word	0xffff0000
 80056ec:	58025408 	.word	0x58025408
 80056f0:	5802541c 	.word	0x5802541c
 80056f4:	58025430 	.word	0x58025430
 80056f8:	58025444 	.word	0x58025444
 80056fc:	58025458 	.word	0x58025458
 8005700:	5802546c 	.word	0x5802546c
 8005704:	58025480 	.word	0x58025480
 8005708:	58025494 	.word	0x58025494
 800570c:	fffe000f 	.word	0xfffe000f
 8005710:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68d2      	ldr	r2, [r2, #12]
 8005716:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005730:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005738:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005740:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	4b6e      	ldr	r3, [pc, #440]	; (8005910 <HAL_DMA_Init+0x650>)
 8005758:	4413      	add	r3, r2
 800575a:	4a6e      	ldr	r2, [pc, #440]	; (8005914 <HAL_DMA_Init+0x654>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	009a      	lsls	r2, r3, #2
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f002 f9a9 	bl	8007ac0 <DMA_CalcBaseAndBitshift>
 800576e:	4603      	mov	r3, r0
 8005770:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2201      	movs	r2, #1
 800577c:	409a      	lsls	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	e008      	b.n	8005796 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2240      	movs	r2, #64	; 0x40
 8005788:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2203      	movs	r2, #3
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e0b7      	b.n	8005906 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a5f      	ldr	r2, [pc, #380]	; (8005918 <HAL_DMA_Init+0x658>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d072      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a5d      	ldr	r2, [pc, #372]	; (800591c <HAL_DMA_Init+0x65c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d06d      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a5c      	ldr	r2, [pc, #368]	; (8005920 <HAL_DMA_Init+0x660>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d068      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a5a      	ldr	r2, [pc, #360]	; (8005924 <HAL_DMA_Init+0x664>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d063      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a59      	ldr	r2, [pc, #356]	; (8005928 <HAL_DMA_Init+0x668>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d05e      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a57      	ldr	r2, [pc, #348]	; (800592c <HAL_DMA_Init+0x66c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d059      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a56      	ldr	r2, [pc, #344]	; (8005930 <HAL_DMA_Init+0x670>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d054      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a54      	ldr	r2, [pc, #336]	; (8005934 <HAL_DMA_Init+0x674>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d04f      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a53      	ldr	r2, [pc, #332]	; (8005938 <HAL_DMA_Init+0x678>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d04a      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a51      	ldr	r2, [pc, #324]	; (800593c <HAL_DMA_Init+0x67c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d045      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a50      	ldr	r2, [pc, #320]	; (8005940 <HAL_DMA_Init+0x680>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d040      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a4e      	ldr	r2, [pc, #312]	; (8005944 <HAL_DMA_Init+0x684>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d03b      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a4d      	ldr	r2, [pc, #308]	; (8005948 <HAL_DMA_Init+0x688>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d036      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a4b      	ldr	r2, [pc, #300]	; (800594c <HAL_DMA_Init+0x68c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d031      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a4a      	ldr	r2, [pc, #296]	; (8005950 <HAL_DMA_Init+0x690>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d02c      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a48      	ldr	r2, [pc, #288]	; (8005954 <HAL_DMA_Init+0x694>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d027      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a47      	ldr	r2, [pc, #284]	; (8005958 <HAL_DMA_Init+0x698>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a45      	ldr	r2, [pc, #276]	; (800595c <HAL_DMA_Init+0x69c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01d      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a44      	ldr	r2, [pc, #272]	; (8005960 <HAL_DMA_Init+0x6a0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d018      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a42      	ldr	r2, [pc, #264]	; (8005964 <HAL_DMA_Init+0x6a4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a41      	ldr	r2, [pc, #260]	; (8005968 <HAL_DMA_Init+0x6a8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a3f      	ldr	r2, [pc, #252]	; (800596c <HAL_DMA_Init+0x6ac>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a3e      	ldr	r2, [pc, #248]	; (8005970 <HAL_DMA_Init+0x6b0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_DMA_Init+0x5c6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <HAL_DMA_Init+0x6b4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_DMA_Init+0x5ca>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_DMA_Init+0x5cc>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d032      	beq.n	80058f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f002 fa43 	bl	8007d1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d102      	bne.n	80058a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d010      	beq.n	80058e4 <HAL_DMA_Init+0x624>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d80c      	bhi.n	80058e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f002 fac0 	bl	8007e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	e008      	b.n	80058f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	a7fdabf8 	.word	0xa7fdabf8
 8005914:	cccccccd 	.word	0xcccccccd
 8005918:	40020010 	.word	0x40020010
 800591c:	40020028 	.word	0x40020028
 8005920:	40020040 	.word	0x40020040
 8005924:	40020058 	.word	0x40020058
 8005928:	40020070 	.word	0x40020070
 800592c:	40020088 	.word	0x40020088
 8005930:	400200a0 	.word	0x400200a0
 8005934:	400200b8 	.word	0x400200b8
 8005938:	40020410 	.word	0x40020410
 800593c:	40020428 	.word	0x40020428
 8005940:	40020440 	.word	0x40020440
 8005944:	40020458 	.word	0x40020458
 8005948:	40020470 	.word	0x40020470
 800594c:	40020488 	.word	0x40020488
 8005950:	400204a0 	.word	0x400204a0
 8005954:	400204b8 	.word	0x400204b8
 8005958:	58025408 	.word	0x58025408
 800595c:	5802541c 	.word	0x5802541c
 8005960:	58025430 	.word	0x58025430
 8005964:	58025444 	.word	0x58025444
 8005968:	58025458 	.word	0x58025458
 800596c:	5802546c 	.word	0x5802546c
 8005970:	58025480 	.word	0x58025480
 8005974:	58025494 	.word	0x58025494

08005978 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e226      	b.n	8005de2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_DMA_Start_IT+0x2a>
 800599e:	2302      	movs	r3, #2
 80059a0:	e21f      	b.n	8005de2 <HAL_DMA_Start_IT+0x46a>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	f040 820a 	bne.w	8005dcc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a68      	ldr	r2, [pc, #416]	; (8005b6c <HAL_DMA_Start_IT+0x1f4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d04a      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a66      	ldr	r2, [pc, #408]	; (8005b70 <HAL_DMA_Start_IT+0x1f8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d045      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a65      	ldr	r2, [pc, #404]	; (8005b74 <HAL_DMA_Start_IT+0x1fc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d040      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a63      	ldr	r2, [pc, #396]	; (8005b78 <HAL_DMA_Start_IT+0x200>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d03b      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a62      	ldr	r2, [pc, #392]	; (8005b7c <HAL_DMA_Start_IT+0x204>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d036      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a60      	ldr	r2, [pc, #384]	; (8005b80 <HAL_DMA_Start_IT+0x208>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d031      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a5f      	ldr	r2, [pc, #380]	; (8005b84 <HAL_DMA_Start_IT+0x20c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d02c      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a5d      	ldr	r2, [pc, #372]	; (8005b88 <HAL_DMA_Start_IT+0x210>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d027      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a5c      	ldr	r2, [pc, #368]	; (8005b8c <HAL_DMA_Start_IT+0x214>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d022      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a5a      	ldr	r2, [pc, #360]	; (8005b90 <HAL_DMA_Start_IT+0x218>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d01d      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a59      	ldr	r2, [pc, #356]	; (8005b94 <HAL_DMA_Start_IT+0x21c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d018      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a57      	ldr	r2, [pc, #348]	; (8005b98 <HAL_DMA_Start_IT+0x220>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a56      	ldr	r2, [pc, #344]	; (8005b9c <HAL_DMA_Start_IT+0x224>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00e      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a54      	ldr	r2, [pc, #336]	; (8005ba0 <HAL_DMA_Start_IT+0x228>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d009      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a53      	ldr	r2, [pc, #332]	; (8005ba4 <HAL_DMA_Start_IT+0x22c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d004      	beq.n	8005a66 <HAL_DMA_Start_IT+0xee>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a51      	ldr	r2, [pc, #324]	; (8005ba8 <HAL_DMA_Start_IT+0x230>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d108      	bne.n	8005a78 <HAL_DMA_Start_IT+0x100>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	e007      	b.n	8005a88 <HAL_DMA_Start_IT+0x110>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0201 	bic.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f001 fe6a 	bl	8007768 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a34      	ldr	r2, [pc, #208]	; (8005b6c <HAL_DMA_Start_IT+0x1f4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d04a      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a33      	ldr	r2, [pc, #204]	; (8005b70 <HAL_DMA_Start_IT+0x1f8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d045      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a31      	ldr	r2, [pc, #196]	; (8005b74 <HAL_DMA_Start_IT+0x1fc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d040      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a30      	ldr	r2, [pc, #192]	; (8005b78 <HAL_DMA_Start_IT+0x200>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d03b      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a2e      	ldr	r2, [pc, #184]	; (8005b7c <HAL_DMA_Start_IT+0x204>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d036      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2d      	ldr	r2, [pc, #180]	; (8005b80 <HAL_DMA_Start_IT+0x208>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d031      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2b      	ldr	r2, [pc, #172]	; (8005b84 <HAL_DMA_Start_IT+0x20c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d02c      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2a      	ldr	r2, [pc, #168]	; (8005b88 <HAL_DMA_Start_IT+0x210>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d027      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <HAL_DMA_Start_IT+0x214>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d022      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <HAL_DMA_Start_IT+0x218>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d01d      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <HAL_DMA_Start_IT+0x21c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d018      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <HAL_DMA_Start_IT+0x220>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <HAL_DMA_Start_IT+0x224>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00e      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <HAL_DMA_Start_IT+0x228>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d009      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <HAL_DMA_Start_IT+0x22c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d004      	beq.n	8005b34 <HAL_DMA_Start_IT+0x1bc>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_DMA_Start_IT+0x230>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d101      	bne.n	8005b38 <HAL_DMA_Start_IT+0x1c0>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <HAL_DMA_Start_IT+0x1c2>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d036      	beq.n	8005bac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f023 021e 	bic.w	r2, r3, #30
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0216 	orr.w	r2, r2, #22
 8005b50:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d03e      	beq.n	8005bd8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0208 	orr.w	r2, r2, #8
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e035      	b.n	8005bd8 <HAL_DMA_Start_IT+0x260>
 8005b6c:	40020010 	.word	0x40020010
 8005b70:	40020028 	.word	0x40020028
 8005b74:	40020040 	.word	0x40020040
 8005b78:	40020058 	.word	0x40020058
 8005b7c:	40020070 	.word	0x40020070
 8005b80:	40020088 	.word	0x40020088
 8005b84:	400200a0 	.word	0x400200a0
 8005b88:	400200b8 	.word	0x400200b8
 8005b8c:	40020410 	.word	0x40020410
 8005b90:	40020428 	.word	0x40020428
 8005b94:	40020440 	.word	0x40020440
 8005b98:	40020458 	.word	0x40020458
 8005b9c:	40020470 	.word	0x40020470
 8005ba0:	40020488 	.word	0x40020488
 8005ba4:	400204a0 	.word	0x400204a0
 8005ba8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 020e 	bic.w	r2, r3, #14
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 020a 	orr.w	r2, r2, #10
 8005bbe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0204 	orr.w	r2, r2, #4
 8005bd6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a83      	ldr	r2, [pc, #524]	; (8005dec <HAL_DMA_Start_IT+0x474>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d072      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a82      	ldr	r2, [pc, #520]	; (8005df0 <HAL_DMA_Start_IT+0x478>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d06d      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a80      	ldr	r2, [pc, #512]	; (8005df4 <HAL_DMA_Start_IT+0x47c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d068      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a7f      	ldr	r2, [pc, #508]	; (8005df8 <HAL_DMA_Start_IT+0x480>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d063      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a7d      	ldr	r2, [pc, #500]	; (8005dfc <HAL_DMA_Start_IT+0x484>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d05e      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a7c      	ldr	r2, [pc, #496]	; (8005e00 <HAL_DMA_Start_IT+0x488>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d059      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a7a      	ldr	r2, [pc, #488]	; (8005e04 <HAL_DMA_Start_IT+0x48c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d054      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a79      	ldr	r2, [pc, #484]	; (8005e08 <HAL_DMA_Start_IT+0x490>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d04f      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a77      	ldr	r2, [pc, #476]	; (8005e0c <HAL_DMA_Start_IT+0x494>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d04a      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a76      	ldr	r2, [pc, #472]	; (8005e10 <HAL_DMA_Start_IT+0x498>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d045      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a74      	ldr	r2, [pc, #464]	; (8005e14 <HAL_DMA_Start_IT+0x49c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d040      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a73      	ldr	r2, [pc, #460]	; (8005e18 <HAL_DMA_Start_IT+0x4a0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d03b      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a71      	ldr	r2, [pc, #452]	; (8005e1c <HAL_DMA_Start_IT+0x4a4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d036      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a70      	ldr	r2, [pc, #448]	; (8005e20 <HAL_DMA_Start_IT+0x4a8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d031      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a6e      	ldr	r2, [pc, #440]	; (8005e24 <HAL_DMA_Start_IT+0x4ac>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02c      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6d      	ldr	r2, [pc, #436]	; (8005e28 <HAL_DMA_Start_IT+0x4b0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d027      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6b      	ldr	r2, [pc, #428]	; (8005e2c <HAL_DMA_Start_IT+0x4b4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6a      	ldr	r2, [pc, #424]	; (8005e30 <HAL_DMA_Start_IT+0x4b8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d01d      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a68      	ldr	r2, [pc, #416]	; (8005e34 <HAL_DMA_Start_IT+0x4bc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a67      	ldr	r2, [pc, #412]	; (8005e38 <HAL_DMA_Start_IT+0x4c0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a65      	ldr	r2, [pc, #404]	; (8005e3c <HAL_DMA_Start_IT+0x4c4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a64      	ldr	r2, [pc, #400]	; (8005e40 <HAL_DMA_Start_IT+0x4c8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a62      	ldr	r2, [pc, #392]	; (8005e44 <HAL_DMA_Start_IT+0x4cc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x350>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a61      	ldr	r2, [pc, #388]	; (8005e48 <HAL_DMA_Start_IT+0x4d0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d101      	bne.n	8005ccc <HAL_DMA_Start_IT+0x354>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_DMA_Start_IT+0x356>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01a      	beq.n	8005d08 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d06:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a37      	ldr	r2, [pc, #220]	; (8005dec <HAL_DMA_Start_IT+0x474>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d04a      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a36      	ldr	r2, [pc, #216]	; (8005df0 <HAL_DMA_Start_IT+0x478>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d045      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a34      	ldr	r2, [pc, #208]	; (8005df4 <HAL_DMA_Start_IT+0x47c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d040      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a33      	ldr	r2, [pc, #204]	; (8005df8 <HAL_DMA_Start_IT+0x480>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d03b      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a31      	ldr	r2, [pc, #196]	; (8005dfc <HAL_DMA_Start_IT+0x484>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d036      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a30      	ldr	r2, [pc, #192]	; (8005e00 <HAL_DMA_Start_IT+0x488>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d031      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a2e      	ldr	r2, [pc, #184]	; (8005e04 <HAL_DMA_Start_IT+0x48c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d02c      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <HAL_DMA_Start_IT+0x490>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d027      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	; (8005e0c <HAL_DMA_Start_IT+0x494>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d022      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2a      	ldr	r2, [pc, #168]	; (8005e10 <HAL_DMA_Start_IT+0x498>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d01d      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a28      	ldr	r2, [pc, #160]	; (8005e14 <HAL_DMA_Start_IT+0x49c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d018      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a27      	ldr	r2, [pc, #156]	; (8005e18 <HAL_DMA_Start_IT+0x4a0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d013      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a25      	ldr	r2, [pc, #148]	; (8005e1c <HAL_DMA_Start_IT+0x4a4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00e      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a24      	ldr	r2, [pc, #144]	; (8005e20 <HAL_DMA_Start_IT+0x4a8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d009      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a22      	ldr	r2, [pc, #136]	; (8005e24 <HAL_DMA_Start_IT+0x4ac>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_DMA_Start_IT+0x430>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a21      	ldr	r2, [pc, #132]	; (8005e28 <HAL_DMA_Start_IT+0x4b0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d108      	bne.n	8005dba <HAL_DMA_Start_IT+0x442>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e012      	b.n	8005de0 <HAL_DMA_Start_IT+0x468>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e009      	b.n	8005de0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40020010 	.word	0x40020010
 8005df0:	40020028 	.word	0x40020028
 8005df4:	40020040 	.word	0x40020040
 8005df8:	40020058 	.word	0x40020058
 8005dfc:	40020070 	.word	0x40020070
 8005e00:	40020088 	.word	0x40020088
 8005e04:	400200a0 	.word	0x400200a0
 8005e08:	400200b8 	.word	0x400200b8
 8005e0c:	40020410 	.word	0x40020410
 8005e10:	40020428 	.word	0x40020428
 8005e14:	40020440 	.word	0x40020440
 8005e18:	40020458 	.word	0x40020458
 8005e1c:	40020470 	.word	0x40020470
 8005e20:	40020488 	.word	0x40020488
 8005e24:	400204a0 	.word	0x400204a0
 8005e28:	400204b8 	.word	0x400204b8
 8005e2c:	58025408 	.word	0x58025408
 8005e30:	5802541c 	.word	0x5802541c
 8005e34:	58025430 	.word	0x58025430
 8005e38:	58025444 	.word	0x58025444
 8005e3c:	58025458 	.word	0x58025458
 8005e40:	5802546c 	.word	0x5802546c
 8005e44:	58025480 	.word	0x58025480
 8005e48:	58025494 	.word	0x58025494

08005e4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005e54:	f7fd f90c 	bl	8003070 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e2dc      	b.n	800641e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d008      	beq.n	8005e82 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e2cd      	b.n	800641e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a76      	ldr	r2, [pc, #472]	; (8006060 <HAL_DMA_Abort+0x214>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d04a      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a74      	ldr	r2, [pc, #464]	; (8006064 <HAL_DMA_Abort+0x218>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d045      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a73      	ldr	r2, [pc, #460]	; (8006068 <HAL_DMA_Abort+0x21c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d040      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a71      	ldr	r2, [pc, #452]	; (800606c <HAL_DMA_Abort+0x220>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d03b      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a70      	ldr	r2, [pc, #448]	; (8006070 <HAL_DMA_Abort+0x224>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d036      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a6e      	ldr	r2, [pc, #440]	; (8006074 <HAL_DMA_Abort+0x228>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d031      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a6d      	ldr	r2, [pc, #436]	; (8006078 <HAL_DMA_Abort+0x22c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d02c      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a6b      	ldr	r2, [pc, #428]	; (800607c <HAL_DMA_Abort+0x230>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d027      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a6a      	ldr	r2, [pc, #424]	; (8006080 <HAL_DMA_Abort+0x234>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d022      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a68      	ldr	r2, [pc, #416]	; (8006084 <HAL_DMA_Abort+0x238>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01d      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a67      	ldr	r2, [pc, #412]	; (8006088 <HAL_DMA_Abort+0x23c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d018      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a65      	ldr	r2, [pc, #404]	; (800608c <HAL_DMA_Abort+0x240>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a64      	ldr	r2, [pc, #400]	; (8006090 <HAL_DMA_Abort+0x244>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a62      	ldr	r2, [pc, #392]	; (8006094 <HAL_DMA_Abort+0x248>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a61      	ldr	r2, [pc, #388]	; (8006098 <HAL_DMA_Abort+0x24c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_DMA_Abort+0xd6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a5f      	ldr	r2, [pc, #380]	; (800609c <HAL_DMA_Abort+0x250>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d101      	bne.n	8005f26 <HAL_DMA_Abort+0xda>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <HAL_DMA_Abort+0xdc>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d013      	beq.n	8005f54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 021e 	bic.w	r2, r2, #30
 8005f3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e00a      	b.n	8005f6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 020e 	bic.w	r2, r2, #14
 8005f62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a3c      	ldr	r2, [pc, #240]	; (8006060 <HAL_DMA_Abort+0x214>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d072      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a3a      	ldr	r2, [pc, #232]	; (8006064 <HAL_DMA_Abort+0x218>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d06d      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a39      	ldr	r2, [pc, #228]	; (8006068 <HAL_DMA_Abort+0x21c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d068      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a37      	ldr	r2, [pc, #220]	; (800606c <HAL_DMA_Abort+0x220>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d063      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a36      	ldr	r2, [pc, #216]	; (8006070 <HAL_DMA_Abort+0x224>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d05e      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a34      	ldr	r2, [pc, #208]	; (8006074 <HAL_DMA_Abort+0x228>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d059      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a33      	ldr	r2, [pc, #204]	; (8006078 <HAL_DMA_Abort+0x22c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d054      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a31      	ldr	r2, [pc, #196]	; (800607c <HAL_DMA_Abort+0x230>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d04f      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a30      	ldr	r2, [pc, #192]	; (8006080 <HAL_DMA_Abort+0x234>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d04a      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	; (8006084 <HAL_DMA_Abort+0x238>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d045      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <HAL_DMA_Abort+0x23c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d040      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	; (800608c <HAL_DMA_Abort+0x240>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d03b      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <HAL_DMA_Abort+0x244>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d036      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a28      	ldr	r2, [pc, #160]	; (8006094 <HAL_DMA_Abort+0x248>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d031      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a27      	ldr	r2, [pc, #156]	; (8006098 <HAL_DMA_Abort+0x24c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d02c      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a25      	ldr	r2, [pc, #148]	; (800609c <HAL_DMA_Abort+0x250>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d027      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_DMA_Abort+0x254>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d022      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <HAL_DMA_Abort+0x258>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01d      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_DMA_Abort+0x25c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d018      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_DMA_Abort+0x260>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_DMA_Abort+0x264>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00e      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1c      	ldr	r2, [pc, #112]	; (80060b4 <HAL_DMA_Abort+0x268>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_DMA_Abort+0x26c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_DMA_Abort+0x20e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_DMA_Abort+0x270>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d132      	bne.n	80060c0 <HAL_DMA_Abort+0x274>
 800605a:	2301      	movs	r3, #1
 800605c:	e031      	b.n	80060c2 <HAL_DMA_Abort+0x276>
 800605e:	bf00      	nop
 8006060:	40020010 	.word	0x40020010
 8006064:	40020028 	.word	0x40020028
 8006068:	40020040 	.word	0x40020040
 800606c:	40020058 	.word	0x40020058
 8006070:	40020070 	.word	0x40020070
 8006074:	40020088 	.word	0x40020088
 8006078:	400200a0 	.word	0x400200a0
 800607c:	400200b8 	.word	0x400200b8
 8006080:	40020410 	.word	0x40020410
 8006084:	40020428 	.word	0x40020428
 8006088:	40020440 	.word	0x40020440
 800608c:	40020458 	.word	0x40020458
 8006090:	40020470 	.word	0x40020470
 8006094:	40020488 	.word	0x40020488
 8006098:	400204a0 	.word	0x400204a0
 800609c:	400204b8 	.word	0x400204b8
 80060a0:	58025408 	.word	0x58025408
 80060a4:	5802541c 	.word	0x5802541c
 80060a8:	58025430 	.word	0x58025430
 80060ac:	58025444 	.word	0x58025444
 80060b0:	58025458 	.word	0x58025458
 80060b4:	5802546c 	.word	0x5802546c
 80060b8:	58025480 	.word	0x58025480
 80060bc:	58025494 	.word	0x58025494
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a6d      	ldr	r2, [pc, #436]	; (8006290 <HAL_DMA_Abort+0x444>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d04a      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a6b      	ldr	r2, [pc, #428]	; (8006294 <HAL_DMA_Abort+0x448>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d045      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a6a      	ldr	r2, [pc, #424]	; (8006298 <HAL_DMA_Abort+0x44c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d040      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a68      	ldr	r2, [pc, #416]	; (800629c <HAL_DMA_Abort+0x450>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d03b      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a67      	ldr	r2, [pc, #412]	; (80062a0 <HAL_DMA_Abort+0x454>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d036      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a65      	ldr	r2, [pc, #404]	; (80062a4 <HAL_DMA_Abort+0x458>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d031      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a64      	ldr	r2, [pc, #400]	; (80062a8 <HAL_DMA_Abort+0x45c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d02c      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a62      	ldr	r2, [pc, #392]	; (80062ac <HAL_DMA_Abort+0x460>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d027      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a61      	ldr	r2, [pc, #388]	; (80062b0 <HAL_DMA_Abort+0x464>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d022      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a5f      	ldr	r2, [pc, #380]	; (80062b4 <HAL_DMA_Abort+0x468>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01d      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a5e      	ldr	r2, [pc, #376]	; (80062b8 <HAL_DMA_Abort+0x46c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d018      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a5c      	ldr	r2, [pc, #368]	; (80062bc <HAL_DMA_Abort+0x470>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a5b      	ldr	r2, [pc, #364]	; (80062c0 <HAL_DMA_Abort+0x474>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a59      	ldr	r2, [pc, #356]	; (80062c4 <HAL_DMA_Abort+0x478>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a58      	ldr	r2, [pc, #352]	; (80062c8 <HAL_DMA_Abort+0x47c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_DMA_Abort+0x32a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a56      	ldr	r2, [pc, #344]	; (80062cc <HAL_DMA_Abort+0x480>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d108      	bne.n	8006188 <HAL_DMA_Abort+0x33c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0201 	bic.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e007      	b.n	8006198 <HAL_DMA_Abort+0x34c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006198:	e013      	b.n	80061c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800619a:	f7fc ff69 	bl	8003070 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b05      	cmp	r3, #5
 80061a6:	d90c      	bls.n	80061c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2203      	movs	r2, #3
 80061b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e12d      	b.n	800641e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2f      	ldr	r2, [pc, #188]	; (8006290 <HAL_DMA_Abort+0x444>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d04a      	beq.n	800626e <HAL_DMA_Abort+0x422>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2d      	ldr	r2, [pc, #180]	; (8006294 <HAL_DMA_Abort+0x448>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d045      	beq.n	800626e <HAL_DMA_Abort+0x422>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <HAL_DMA_Abort+0x44c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d040      	beq.n	800626e <HAL_DMA_Abort+0x422>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a2a      	ldr	r2, [pc, #168]	; (800629c <HAL_DMA_Abort+0x450>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d03b      	beq.n	800626e <HAL_DMA_Abort+0x422>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a29      	ldr	r2, [pc, #164]	; (80062a0 <HAL_DMA_Abort+0x454>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d036      	beq.n	800626e <HAL_DMA_Abort+0x422>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <HAL_DMA_Abort+0x458>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d031      	beq.n	800626e <HAL_DMA_Abort+0x422>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a26      	ldr	r2, [pc, #152]	; (80062a8 <HAL_DMA_Abort+0x45c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d02c      	beq.n	800626e <HAL_DMA_Abort+0x422>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a24      	ldr	r2, [pc, #144]	; (80062ac <HAL_DMA_Abort+0x460>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d027      	beq.n	800626e <HAL_DMA_Abort+0x422>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a23      	ldr	r2, [pc, #140]	; (80062b0 <HAL_DMA_Abort+0x464>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_DMA_Abort+0x422>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <HAL_DMA_Abort+0x468>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01d      	beq.n	800626e <HAL_DMA_Abort+0x422>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <HAL_DMA_Abort+0x46c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_DMA_Abort+0x422>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1e      	ldr	r2, [pc, #120]	; (80062bc <HAL_DMA_Abort+0x470>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_DMA_Abort+0x422>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_DMA_Abort+0x474>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_DMA_Abort+0x422>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <HAL_DMA_Abort+0x478>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_DMA_Abort+0x422>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <HAL_DMA_Abort+0x47c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_DMA_Abort+0x422>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a18      	ldr	r2, [pc, #96]	; (80062cc <HAL_DMA_Abort+0x480>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d101      	bne.n	8006272 <HAL_DMA_Abort+0x426>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <HAL_DMA_Abort+0x428>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d02b      	beq.n	80062d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	223f      	movs	r2, #63	; 0x3f
 8006288:	409a      	lsls	r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	609a      	str	r2, [r3, #8]
 800628e:	e02a      	b.n	80062e6 <HAL_DMA_Abort+0x49a>
 8006290:	40020010 	.word	0x40020010
 8006294:	40020028 	.word	0x40020028
 8006298:	40020040 	.word	0x40020040
 800629c:	40020058 	.word	0x40020058
 80062a0:	40020070 	.word	0x40020070
 80062a4:	40020088 	.word	0x40020088
 80062a8:	400200a0 	.word	0x400200a0
 80062ac:	400200b8 	.word	0x400200b8
 80062b0:	40020410 	.word	0x40020410
 80062b4:	40020428 	.word	0x40020428
 80062b8:	40020440 	.word	0x40020440
 80062bc:	40020458 	.word	0x40020458
 80062c0:	40020470 	.word	0x40020470
 80062c4:	40020488 	.word	0x40020488
 80062c8:	400204a0 	.word	0x400204a0
 80062cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	2201      	movs	r2, #1
 80062e0:	409a      	lsls	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a4f      	ldr	r2, [pc, #316]	; (8006428 <HAL_DMA_Abort+0x5dc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d072      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a4d      	ldr	r2, [pc, #308]	; (800642c <HAL_DMA_Abort+0x5e0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d06d      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a4c      	ldr	r2, [pc, #304]	; (8006430 <HAL_DMA_Abort+0x5e4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d068      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4a      	ldr	r2, [pc, #296]	; (8006434 <HAL_DMA_Abort+0x5e8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d063      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a49      	ldr	r2, [pc, #292]	; (8006438 <HAL_DMA_Abort+0x5ec>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d05e      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a47      	ldr	r2, [pc, #284]	; (800643c <HAL_DMA_Abort+0x5f0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d059      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a46      	ldr	r2, [pc, #280]	; (8006440 <HAL_DMA_Abort+0x5f4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d054      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a44      	ldr	r2, [pc, #272]	; (8006444 <HAL_DMA_Abort+0x5f8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d04f      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a43      	ldr	r2, [pc, #268]	; (8006448 <HAL_DMA_Abort+0x5fc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d04a      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a41      	ldr	r2, [pc, #260]	; (800644c <HAL_DMA_Abort+0x600>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d045      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a40      	ldr	r2, [pc, #256]	; (8006450 <HAL_DMA_Abort+0x604>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d040      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a3e      	ldr	r2, [pc, #248]	; (8006454 <HAL_DMA_Abort+0x608>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d03b      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3d      	ldr	r2, [pc, #244]	; (8006458 <HAL_DMA_Abort+0x60c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d036      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3b      	ldr	r2, [pc, #236]	; (800645c <HAL_DMA_Abort+0x610>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d031      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a3a      	ldr	r2, [pc, #232]	; (8006460 <HAL_DMA_Abort+0x614>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d02c      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a38      	ldr	r2, [pc, #224]	; (8006464 <HAL_DMA_Abort+0x618>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d027      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a37      	ldr	r2, [pc, #220]	; (8006468 <HAL_DMA_Abort+0x61c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d022      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a35      	ldr	r2, [pc, #212]	; (800646c <HAL_DMA_Abort+0x620>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01d      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a34      	ldr	r2, [pc, #208]	; (8006470 <HAL_DMA_Abort+0x624>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d018      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a32      	ldr	r2, [pc, #200]	; (8006474 <HAL_DMA_Abort+0x628>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a31      	ldr	r2, [pc, #196]	; (8006478 <HAL_DMA_Abort+0x62c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00e      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2f      	ldr	r2, [pc, #188]	; (800647c <HAL_DMA_Abort+0x630>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2e      	ldr	r2, [pc, #184]	; (8006480 <HAL_DMA_Abort+0x634>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_DMA_Abort+0x58a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2c      	ldr	r2, [pc, #176]	; (8006484 <HAL_DMA_Abort+0x638>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d101      	bne.n	80063da <HAL_DMA_Abort+0x58e>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_DMA_Abort+0x590>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d015      	beq.n	800640c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006400:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800640a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40020010 	.word	0x40020010
 800642c:	40020028 	.word	0x40020028
 8006430:	40020040 	.word	0x40020040
 8006434:	40020058 	.word	0x40020058
 8006438:	40020070 	.word	0x40020070
 800643c:	40020088 	.word	0x40020088
 8006440:	400200a0 	.word	0x400200a0
 8006444:	400200b8 	.word	0x400200b8
 8006448:	40020410 	.word	0x40020410
 800644c:	40020428 	.word	0x40020428
 8006450:	40020440 	.word	0x40020440
 8006454:	40020458 	.word	0x40020458
 8006458:	40020470 	.word	0x40020470
 800645c:	40020488 	.word	0x40020488
 8006460:	400204a0 	.word	0x400204a0
 8006464:	400204b8 	.word	0x400204b8
 8006468:	58025408 	.word	0x58025408
 800646c:	5802541c 	.word	0x5802541c
 8006470:	58025430 	.word	0x58025430
 8006474:	58025444 	.word	0x58025444
 8006478:	58025458 	.word	0x58025458
 800647c:	5802546c 	.word	0x5802546c
 8006480:	58025480 	.word	0x58025480
 8006484:	58025494 	.word	0x58025494

08006488 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e237      	b.n	800690a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d004      	beq.n	80064b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2280      	movs	r2, #128	; 0x80
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e22c      	b.n	800690a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a5c      	ldr	r2, [pc, #368]	; (8006628 <HAL_DMA_Abort_IT+0x1a0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d04a      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a5b      	ldr	r2, [pc, #364]	; (800662c <HAL_DMA_Abort_IT+0x1a4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d045      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a59      	ldr	r2, [pc, #356]	; (8006630 <HAL_DMA_Abort_IT+0x1a8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d040      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a58      	ldr	r2, [pc, #352]	; (8006634 <HAL_DMA_Abort_IT+0x1ac>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d03b      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a56      	ldr	r2, [pc, #344]	; (8006638 <HAL_DMA_Abort_IT+0x1b0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d036      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a55      	ldr	r2, [pc, #340]	; (800663c <HAL_DMA_Abort_IT+0x1b4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d031      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a53      	ldr	r2, [pc, #332]	; (8006640 <HAL_DMA_Abort_IT+0x1b8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02c      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a52      	ldr	r2, [pc, #328]	; (8006644 <HAL_DMA_Abort_IT+0x1bc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d027      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a50      	ldr	r2, [pc, #320]	; (8006648 <HAL_DMA_Abort_IT+0x1c0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d022      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a4f      	ldr	r2, [pc, #316]	; (800664c <HAL_DMA_Abort_IT+0x1c4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d01d      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a4d      	ldr	r2, [pc, #308]	; (8006650 <HAL_DMA_Abort_IT+0x1c8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d018      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a4c      	ldr	r2, [pc, #304]	; (8006654 <HAL_DMA_Abort_IT+0x1cc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a4a      	ldr	r2, [pc, #296]	; (8006658 <HAL_DMA_Abort_IT+0x1d0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00e      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a49      	ldr	r2, [pc, #292]	; (800665c <HAL_DMA_Abort_IT+0x1d4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a47      	ldr	r2, [pc, #284]	; (8006660 <HAL_DMA_Abort_IT+0x1d8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_DMA_Abort_IT+0xc8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a46      	ldr	r2, [pc, #280]	; (8006664 <HAL_DMA_Abort_IT+0x1dc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d101      	bne.n	8006554 <HAL_DMA_Abort_IT+0xcc>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <HAL_DMA_Abort_IT+0xce>
 8006554:	2300      	movs	r3, #0
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 8086 	beq.w	8006668 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2204      	movs	r2, #4
 8006560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a2f      	ldr	r2, [pc, #188]	; (8006628 <HAL_DMA_Abort_IT+0x1a0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d04a      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2e      	ldr	r2, [pc, #184]	; (800662c <HAL_DMA_Abort_IT+0x1a4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d045      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a2c      	ldr	r2, [pc, #176]	; (8006630 <HAL_DMA_Abort_IT+0x1a8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d040      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <HAL_DMA_Abort_IT+0x1ac>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d03b      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a29      	ldr	r2, [pc, #164]	; (8006638 <HAL_DMA_Abort_IT+0x1b0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d036      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a28      	ldr	r2, [pc, #160]	; (800663c <HAL_DMA_Abort_IT+0x1b4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d031      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a26      	ldr	r2, [pc, #152]	; (8006640 <HAL_DMA_Abort_IT+0x1b8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d02c      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a25      	ldr	r2, [pc, #148]	; (8006644 <HAL_DMA_Abort_IT+0x1bc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d027      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a23      	ldr	r2, [pc, #140]	; (8006648 <HAL_DMA_Abort_IT+0x1c0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d022      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_DMA_Abort_IT+0x1c4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d01d      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a20      	ldr	r2, [pc, #128]	; (8006650 <HAL_DMA_Abort_IT+0x1c8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d018      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_DMA_Abort_IT+0x1cc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d013      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a1d      	ldr	r2, [pc, #116]	; (8006658 <HAL_DMA_Abort_IT+0x1d0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00e      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1c      	ldr	r2, [pc, #112]	; (800665c <HAL_DMA_Abort_IT+0x1d4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d009      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1a      	ldr	r2, [pc, #104]	; (8006660 <HAL_DMA_Abort_IT+0x1d8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d004      	beq.n	8006604 <HAL_DMA_Abort_IT+0x17c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a19      	ldr	r2, [pc, #100]	; (8006664 <HAL_DMA_Abort_IT+0x1dc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d108      	bne.n	8006616 <HAL_DMA_Abort_IT+0x18e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0201 	bic.w	r2, r2, #1
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e178      	b.n	8006908 <HAL_DMA_Abort_IT+0x480>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0201 	bic.w	r2, r2, #1
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e16f      	b.n	8006908 <HAL_DMA_Abort_IT+0x480>
 8006628:	40020010 	.word	0x40020010
 800662c:	40020028 	.word	0x40020028
 8006630:	40020040 	.word	0x40020040
 8006634:	40020058 	.word	0x40020058
 8006638:	40020070 	.word	0x40020070
 800663c:	40020088 	.word	0x40020088
 8006640:	400200a0 	.word	0x400200a0
 8006644:	400200b8 	.word	0x400200b8
 8006648:	40020410 	.word	0x40020410
 800664c:	40020428 	.word	0x40020428
 8006650:	40020440 	.word	0x40020440
 8006654:	40020458 	.word	0x40020458
 8006658:	40020470 	.word	0x40020470
 800665c:	40020488 	.word	0x40020488
 8006660:	400204a0 	.word	0x400204a0
 8006664:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 020e 	bic.w	r2, r2, #14
 8006676:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a6c      	ldr	r2, [pc, #432]	; (8006830 <HAL_DMA_Abort_IT+0x3a8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d04a      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a6b      	ldr	r2, [pc, #428]	; (8006834 <HAL_DMA_Abort_IT+0x3ac>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d045      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a69      	ldr	r2, [pc, #420]	; (8006838 <HAL_DMA_Abort_IT+0x3b0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d040      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a68      	ldr	r2, [pc, #416]	; (800683c <HAL_DMA_Abort_IT+0x3b4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d03b      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a66      	ldr	r2, [pc, #408]	; (8006840 <HAL_DMA_Abort_IT+0x3b8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d036      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a65      	ldr	r2, [pc, #404]	; (8006844 <HAL_DMA_Abort_IT+0x3bc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d031      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a63      	ldr	r2, [pc, #396]	; (8006848 <HAL_DMA_Abort_IT+0x3c0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02c      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a62      	ldr	r2, [pc, #392]	; (800684c <HAL_DMA_Abort_IT+0x3c4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d027      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a60      	ldr	r2, [pc, #384]	; (8006850 <HAL_DMA_Abort_IT+0x3c8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a5f      	ldr	r2, [pc, #380]	; (8006854 <HAL_DMA_Abort_IT+0x3cc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01d      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5d      	ldr	r2, [pc, #372]	; (8006858 <HAL_DMA_Abort_IT+0x3d0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a5c      	ldr	r2, [pc, #368]	; (800685c <HAL_DMA_Abort_IT+0x3d4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5a      	ldr	r2, [pc, #360]	; (8006860 <HAL_DMA_Abort_IT+0x3d8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a59      	ldr	r2, [pc, #356]	; (8006864 <HAL_DMA_Abort_IT+0x3dc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a57      	ldr	r2, [pc, #348]	; (8006868 <HAL_DMA_Abort_IT+0x3e0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_DMA_Abort_IT+0x290>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a56      	ldr	r2, [pc, #344]	; (800686c <HAL_DMA_Abort_IT+0x3e4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d108      	bne.n	800672a <HAL_DMA_Abort_IT+0x2a2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	e007      	b.n	800673a <HAL_DMA_Abort_IT+0x2b2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0201 	bic.w	r2, r2, #1
 8006738:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a3c      	ldr	r2, [pc, #240]	; (8006830 <HAL_DMA_Abort_IT+0x3a8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d072      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a3a      	ldr	r2, [pc, #232]	; (8006834 <HAL_DMA_Abort_IT+0x3ac>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d06d      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a39      	ldr	r2, [pc, #228]	; (8006838 <HAL_DMA_Abort_IT+0x3b0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d068      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a37      	ldr	r2, [pc, #220]	; (800683c <HAL_DMA_Abort_IT+0x3b4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d063      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a36      	ldr	r2, [pc, #216]	; (8006840 <HAL_DMA_Abort_IT+0x3b8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d05e      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a34      	ldr	r2, [pc, #208]	; (8006844 <HAL_DMA_Abort_IT+0x3bc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d059      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a33      	ldr	r2, [pc, #204]	; (8006848 <HAL_DMA_Abort_IT+0x3c0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d054      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a31      	ldr	r2, [pc, #196]	; (800684c <HAL_DMA_Abort_IT+0x3c4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d04f      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a30      	ldr	r2, [pc, #192]	; (8006850 <HAL_DMA_Abort_IT+0x3c8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d04a      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a2e      	ldr	r2, [pc, #184]	; (8006854 <HAL_DMA_Abort_IT+0x3cc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d045      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a2d      	ldr	r2, [pc, #180]	; (8006858 <HAL_DMA_Abort_IT+0x3d0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d040      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a2b      	ldr	r2, [pc, #172]	; (800685c <HAL_DMA_Abort_IT+0x3d4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d03b      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2a      	ldr	r2, [pc, #168]	; (8006860 <HAL_DMA_Abort_IT+0x3d8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d036      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a28      	ldr	r2, [pc, #160]	; (8006864 <HAL_DMA_Abort_IT+0x3dc>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d031      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a27      	ldr	r2, [pc, #156]	; (8006868 <HAL_DMA_Abort_IT+0x3e0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d02c      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a25      	ldr	r2, [pc, #148]	; (800686c <HAL_DMA_Abort_IT+0x3e4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d027      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a24      	ldr	r2, [pc, #144]	; (8006870 <HAL_DMA_Abort_IT+0x3e8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d022      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a22      	ldr	r2, [pc, #136]	; (8006874 <HAL_DMA_Abort_IT+0x3ec>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01d      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a21      	ldr	r2, [pc, #132]	; (8006878 <HAL_DMA_Abort_IT+0x3f0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d018      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1f      	ldr	r2, [pc, #124]	; (800687c <HAL_DMA_Abort_IT+0x3f4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1e      	ldr	r2, [pc, #120]	; (8006880 <HAL_DMA_Abort_IT+0x3f8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00e      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1c      	ldr	r2, [pc, #112]	; (8006884 <HAL_DMA_Abort_IT+0x3fc>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d009      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <HAL_DMA_Abort_IT+0x400>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d004      	beq.n	800682a <HAL_DMA_Abort_IT+0x3a2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a19      	ldr	r2, [pc, #100]	; (800688c <HAL_DMA_Abort_IT+0x404>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d132      	bne.n	8006890 <HAL_DMA_Abort_IT+0x408>
 800682a:	2301      	movs	r3, #1
 800682c:	e031      	b.n	8006892 <HAL_DMA_Abort_IT+0x40a>
 800682e:	bf00      	nop
 8006830:	40020010 	.word	0x40020010
 8006834:	40020028 	.word	0x40020028
 8006838:	40020040 	.word	0x40020040
 800683c:	40020058 	.word	0x40020058
 8006840:	40020070 	.word	0x40020070
 8006844:	40020088 	.word	0x40020088
 8006848:	400200a0 	.word	0x400200a0
 800684c:	400200b8 	.word	0x400200b8
 8006850:	40020410 	.word	0x40020410
 8006854:	40020428 	.word	0x40020428
 8006858:	40020440 	.word	0x40020440
 800685c:	40020458 	.word	0x40020458
 8006860:	40020470 	.word	0x40020470
 8006864:	40020488 	.word	0x40020488
 8006868:	400204a0 	.word	0x400204a0
 800686c:	400204b8 	.word	0x400204b8
 8006870:	58025408 	.word	0x58025408
 8006874:	5802541c 	.word	0x5802541c
 8006878:	58025430 	.word	0x58025430
 800687c:	58025444 	.word	0x58025444
 8006880:	58025458 	.word	0x58025458
 8006884:	5802546c 	.word	0x5802546c
 8006888:	58025480 	.word	0x58025480
 800688c:	58025494 	.word	0x58025494
 8006890:	2300      	movs	r3, #0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d028      	beq.n	80068e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2201      	movs	r2, #1
 80068b6:	409a      	lsls	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop

08006914 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08a      	sub	sp, #40	; 0x28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006920:	4b67      	ldr	r3, [pc, #412]	; (8006ac0 <HAL_DMA_IRQHandler+0x1ac>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a67      	ldr	r2, [pc, #412]	; (8006ac4 <HAL_DMA_IRQHandler+0x1b0>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	0a9b      	lsrs	r3, r3, #10
 800692c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006932:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006938:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a5f      	ldr	r2, [pc, #380]	; (8006ac8 <HAL_DMA_IRQHandler+0x1b4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d04a      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a5d      	ldr	r2, [pc, #372]	; (8006acc <HAL_DMA_IRQHandler+0x1b8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d045      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a5c      	ldr	r2, [pc, #368]	; (8006ad0 <HAL_DMA_IRQHandler+0x1bc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d040      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a5a      	ldr	r2, [pc, #360]	; (8006ad4 <HAL_DMA_IRQHandler+0x1c0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d03b      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a59      	ldr	r2, [pc, #356]	; (8006ad8 <HAL_DMA_IRQHandler+0x1c4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d036      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a57      	ldr	r2, [pc, #348]	; (8006adc <HAL_DMA_IRQHandler+0x1c8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d031      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a56      	ldr	r2, [pc, #344]	; (8006ae0 <HAL_DMA_IRQHandler+0x1cc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d02c      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a54      	ldr	r2, [pc, #336]	; (8006ae4 <HAL_DMA_IRQHandler+0x1d0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d027      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a53      	ldr	r2, [pc, #332]	; (8006ae8 <HAL_DMA_IRQHandler+0x1d4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d022      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a51      	ldr	r2, [pc, #324]	; (8006aec <HAL_DMA_IRQHandler+0x1d8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01d      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a50      	ldr	r2, [pc, #320]	; (8006af0 <HAL_DMA_IRQHandler+0x1dc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d018      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a4e      	ldr	r2, [pc, #312]	; (8006af4 <HAL_DMA_IRQHandler+0x1e0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4d      	ldr	r2, [pc, #308]	; (8006af8 <HAL_DMA_IRQHandler+0x1e4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00e      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a4b      	ldr	r2, [pc, #300]	; (8006afc <HAL_DMA_IRQHandler+0x1e8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d009      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a4a      	ldr	r2, [pc, #296]	; (8006b00 <HAL_DMA_IRQHandler+0x1ec>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <HAL_DMA_IRQHandler+0xd2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a48      	ldr	r2, [pc, #288]	; (8006b04 <HAL_DMA_IRQHandler+0x1f0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d101      	bne.n	80069ea <HAL_DMA_IRQHandler+0xd6>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <HAL_DMA_IRQHandler+0xd8>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 842b 	beq.w	8007248 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2208      	movs	r2, #8
 80069fc:	409a      	lsls	r2, r3
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	4013      	ands	r3, r2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80a2 	beq.w	8006b4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a2e      	ldr	r2, [pc, #184]	; (8006ac8 <HAL_DMA_IRQHandler+0x1b4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d04a      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2d      	ldr	r2, [pc, #180]	; (8006acc <HAL_DMA_IRQHandler+0x1b8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d045      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a2b      	ldr	r2, [pc, #172]	; (8006ad0 <HAL_DMA_IRQHandler+0x1bc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d040      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a2a      	ldr	r2, [pc, #168]	; (8006ad4 <HAL_DMA_IRQHandler+0x1c0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d03b      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a28      	ldr	r2, [pc, #160]	; (8006ad8 <HAL_DMA_IRQHandler+0x1c4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d036      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a27      	ldr	r2, [pc, #156]	; (8006adc <HAL_DMA_IRQHandler+0x1c8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d031      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a25      	ldr	r2, [pc, #148]	; (8006ae0 <HAL_DMA_IRQHandler+0x1cc>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d02c      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a24      	ldr	r2, [pc, #144]	; (8006ae4 <HAL_DMA_IRQHandler+0x1d0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d027      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <HAL_DMA_IRQHandler+0x1d4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d022      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a21      	ldr	r2, [pc, #132]	; (8006aec <HAL_DMA_IRQHandler+0x1d8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d01d      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <HAL_DMA_IRQHandler+0x1dc>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d018      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1e      	ldr	r2, [pc, #120]	; (8006af4 <HAL_DMA_IRQHandler+0x1e0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <HAL_DMA_IRQHandler+0x1e4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00e      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <HAL_DMA_IRQHandler+0x1e8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a19      	ldr	r2, [pc, #100]	; (8006b00 <HAL_DMA_IRQHandler+0x1ec>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x194>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a18      	ldr	r2, [pc, #96]	; (8006b04 <HAL_DMA_IRQHandler+0x1f0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d12f      	bne.n	8006b08 <HAL_DMA_IRQHandler+0x1f4>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	e02e      	b.n	8006b1c <HAL_DMA_IRQHandler+0x208>
 8006abe:	bf00      	nop
 8006ac0:	24000088 	.word	0x24000088
 8006ac4:	1b4e81b5 	.word	0x1b4e81b5
 8006ac8:	40020010 	.word	0x40020010
 8006acc:	40020028 	.word	0x40020028
 8006ad0:	40020040 	.word	0x40020040
 8006ad4:	40020058 	.word	0x40020058
 8006ad8:	40020070 	.word	0x40020070
 8006adc:	40020088 	.word	0x40020088
 8006ae0:	400200a0 	.word	0x400200a0
 8006ae4:	400200b8 	.word	0x400200b8
 8006ae8:	40020410 	.word	0x40020410
 8006aec:	40020428 	.word	0x40020428
 8006af0:	40020440 	.word	0x40020440
 8006af4:	40020458 	.word	0x40020458
 8006af8:	40020470 	.word	0x40020470
 8006afc:	40020488 	.word	0x40020488
 8006b00:	400204a0 	.word	0x400204a0
 8006b04:	400204b8 	.word	0x400204b8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bf14      	ite	ne
 8006b16:	2301      	movne	r3, #1
 8006b18:	2300      	moveq	r3, #0
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d015      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0204 	bic.w	r2, r2, #4
 8006b2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	2208      	movs	r2, #8
 8006b3a:	409a      	lsls	r2, r3
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b44:	f043 0201 	orr.w	r2, r3, #1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d06e      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a69      	ldr	r2, [pc, #420]	; (8006d0c <HAL_DMA_IRQHandler+0x3f8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d04a      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <HAL_DMA_IRQHandler+0x3fc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d045      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a66      	ldr	r2, [pc, #408]	; (8006d14 <HAL_DMA_IRQHandler+0x400>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d040      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a64      	ldr	r2, [pc, #400]	; (8006d18 <HAL_DMA_IRQHandler+0x404>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d03b      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a63      	ldr	r2, [pc, #396]	; (8006d1c <HAL_DMA_IRQHandler+0x408>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d036      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a61      	ldr	r2, [pc, #388]	; (8006d20 <HAL_DMA_IRQHandler+0x40c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d031      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a60      	ldr	r2, [pc, #384]	; (8006d24 <HAL_DMA_IRQHandler+0x410>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d02c      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a5e      	ldr	r2, [pc, #376]	; (8006d28 <HAL_DMA_IRQHandler+0x414>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d027      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a5d      	ldr	r2, [pc, #372]	; (8006d2c <HAL_DMA_IRQHandler+0x418>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d022      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a5b      	ldr	r2, [pc, #364]	; (8006d30 <HAL_DMA_IRQHandler+0x41c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01d      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a5a      	ldr	r2, [pc, #360]	; (8006d34 <HAL_DMA_IRQHandler+0x420>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a58      	ldr	r2, [pc, #352]	; (8006d38 <HAL_DMA_IRQHandler+0x424>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a57      	ldr	r2, [pc, #348]	; (8006d3c <HAL_DMA_IRQHandler+0x428>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a55      	ldr	r2, [pc, #340]	; (8006d40 <HAL_DMA_IRQHandler+0x42c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a54      	ldr	r2, [pc, #336]	; (8006d44 <HAL_DMA_IRQHandler+0x430>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x2ee>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a52      	ldr	r2, [pc, #328]	; (8006d48 <HAL_DMA_IRQHandler+0x434>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d10a      	bne.n	8006c18 <HAL_DMA_IRQHandler+0x304>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bf14      	ite	ne
 8006c10:	2301      	movne	r3, #1
 8006c12:	2300      	moveq	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	e003      	b.n	8006c20 <HAL_DMA_IRQHandler+0x30c>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00d      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c38:	f043 0202 	orr.w	r2, r3, #2
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c44:	f003 031f 	and.w	r3, r3, #31
 8006c48:	2204      	movs	r2, #4
 8006c4a:	409a      	lsls	r2, r3
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 808f 	beq.w	8006d74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a2c      	ldr	r2, [pc, #176]	; (8006d0c <HAL_DMA_IRQHandler+0x3f8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d04a      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a2a      	ldr	r2, [pc, #168]	; (8006d10 <HAL_DMA_IRQHandler+0x3fc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d045      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a29      	ldr	r2, [pc, #164]	; (8006d14 <HAL_DMA_IRQHandler+0x400>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d040      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a27      	ldr	r2, [pc, #156]	; (8006d18 <HAL_DMA_IRQHandler+0x404>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d03b      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a26      	ldr	r2, [pc, #152]	; (8006d1c <HAL_DMA_IRQHandler+0x408>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d036      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a24      	ldr	r2, [pc, #144]	; (8006d20 <HAL_DMA_IRQHandler+0x40c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d031      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a23      	ldr	r2, [pc, #140]	; (8006d24 <HAL_DMA_IRQHandler+0x410>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d02c      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <HAL_DMA_IRQHandler+0x414>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d027      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a20      	ldr	r2, [pc, #128]	; (8006d2c <HAL_DMA_IRQHandler+0x418>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <HAL_DMA_IRQHandler+0x41c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01d      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <HAL_DMA_IRQHandler+0x420>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <HAL_DMA_IRQHandler+0x424>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1a      	ldr	r2, [pc, #104]	; (8006d3c <HAL_DMA_IRQHandler+0x428>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a18      	ldr	r2, [pc, #96]	; (8006d40 <HAL_DMA_IRQHandler+0x42c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a17      	ldr	r2, [pc, #92]	; (8006d44 <HAL_DMA_IRQHandler+0x430>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_DMA_IRQHandler+0x3e2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a15      	ldr	r2, [pc, #84]	; (8006d48 <HAL_DMA_IRQHandler+0x434>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d12a      	bne.n	8006d4c <HAL_DMA_IRQHandler+0x438>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	bf14      	ite	ne
 8006d04:	2301      	movne	r3, #1
 8006d06:	2300      	moveq	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	e023      	b.n	8006d54 <HAL_DMA_IRQHandler+0x440>
 8006d0c:	40020010 	.word	0x40020010
 8006d10:	40020028 	.word	0x40020028
 8006d14:	40020040 	.word	0x40020040
 8006d18:	40020058 	.word	0x40020058
 8006d1c:	40020070 	.word	0x40020070
 8006d20:	40020088 	.word	0x40020088
 8006d24:	400200a0 	.word	0x400200a0
 8006d28:	400200b8 	.word	0x400200b8
 8006d2c:	40020410 	.word	0x40020410
 8006d30:	40020428 	.word	0x40020428
 8006d34:	40020440 	.word	0x40020440
 8006d38:	40020458 	.word	0x40020458
 8006d3c:	40020470 	.word	0x40020470
 8006d40:	40020488 	.word	0x40020488
 8006d44:	400204a0 	.word	0x400204a0
 8006d48:	400204b8 	.word	0x400204b8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00d      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2204      	movs	r2, #4
 8006d62:	409a      	lsls	r2, r3
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	f043 0204 	orr.w	r2, r3, #4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80a6 	beq.w	8006ed6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a85      	ldr	r2, [pc, #532]	; (8006fa4 <HAL_DMA_IRQHandler+0x690>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d04a      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a83      	ldr	r2, [pc, #524]	; (8006fa8 <HAL_DMA_IRQHandler+0x694>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d045      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a82      	ldr	r2, [pc, #520]	; (8006fac <HAL_DMA_IRQHandler+0x698>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d040      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a80      	ldr	r2, [pc, #512]	; (8006fb0 <HAL_DMA_IRQHandler+0x69c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d03b      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a7f      	ldr	r2, [pc, #508]	; (8006fb4 <HAL_DMA_IRQHandler+0x6a0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d036      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a7d      	ldr	r2, [pc, #500]	; (8006fb8 <HAL_DMA_IRQHandler+0x6a4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d031      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a7c      	ldr	r2, [pc, #496]	; (8006fbc <HAL_DMA_IRQHandler+0x6a8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d02c      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a7a      	ldr	r2, [pc, #488]	; (8006fc0 <HAL_DMA_IRQHandler+0x6ac>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d027      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a79      	ldr	r2, [pc, #484]	; (8006fc4 <HAL_DMA_IRQHandler+0x6b0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a77      	ldr	r2, [pc, #476]	; (8006fc8 <HAL_DMA_IRQHandler+0x6b4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a76      	ldr	r2, [pc, #472]	; (8006fcc <HAL_DMA_IRQHandler+0x6b8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a74      	ldr	r2, [pc, #464]	; (8006fd0 <HAL_DMA_IRQHandler+0x6bc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a73      	ldr	r2, [pc, #460]	; (8006fd4 <HAL_DMA_IRQHandler+0x6c0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a71      	ldr	r2, [pc, #452]	; (8006fd8 <HAL_DMA_IRQHandler+0x6c4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a70      	ldr	r2, [pc, #448]	; (8006fdc <HAL_DMA_IRQHandler+0x6c8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x516>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6e      	ldr	r2, [pc, #440]	; (8006fe0 <HAL_DMA_IRQHandler+0x6cc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10a      	bne.n	8006e40 <HAL_DMA_IRQHandler+0x52c>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf14      	ite	ne
 8006e38:	2301      	movne	r3, #1
 8006e3a:	2300      	moveq	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	e009      	b.n	8006e54 <HAL_DMA_IRQHandler+0x540>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bf14      	ite	ne
 8006e4e:	2301      	movne	r3, #1
 8006e50:	2300      	moveq	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d03e      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2210      	movs	r2, #16
 8006e62:	409a      	lsls	r2, r3
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d018      	beq.n	8006ea8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d108      	bne.n	8006e96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d024      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
 8006e94:	e01f      	b.n	8006ed6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01b      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3
 8006ea6:	e016      	b.n	8006ed6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d107      	bne.n	8006ec6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0208 	bic.w	r2, r2, #8
 8006ec4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eda:	f003 031f 	and.w	r3, r3, #31
 8006ede:	2220      	movs	r2, #32
 8006ee0:	409a      	lsls	r2, r3
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8110 	beq.w	800710c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2c      	ldr	r2, [pc, #176]	; (8006fa4 <HAL_DMA_IRQHandler+0x690>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d04a      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a2b      	ldr	r2, [pc, #172]	; (8006fa8 <HAL_DMA_IRQHandler+0x694>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d045      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a29      	ldr	r2, [pc, #164]	; (8006fac <HAL_DMA_IRQHandler+0x698>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d040      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a28      	ldr	r2, [pc, #160]	; (8006fb0 <HAL_DMA_IRQHandler+0x69c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d03b      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <HAL_DMA_IRQHandler+0x6a0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d036      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a25      	ldr	r2, [pc, #148]	; (8006fb8 <HAL_DMA_IRQHandler+0x6a4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d031      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a23      	ldr	r2, [pc, #140]	; (8006fbc <HAL_DMA_IRQHandler+0x6a8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d02c      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a22      	ldr	r2, [pc, #136]	; (8006fc0 <HAL_DMA_IRQHandler+0x6ac>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d027      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a20      	ldr	r2, [pc, #128]	; (8006fc4 <HAL_DMA_IRQHandler+0x6b0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d022      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a1f      	ldr	r2, [pc, #124]	; (8006fc8 <HAL_DMA_IRQHandler+0x6b4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d01d      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <HAL_DMA_IRQHandler+0x6b8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d018      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1c      	ldr	r2, [pc, #112]	; (8006fd0 <HAL_DMA_IRQHandler+0x6bc>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1a      	ldr	r2, [pc, #104]	; (8006fd4 <HAL_DMA_IRQHandler+0x6c0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00e      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a19      	ldr	r2, [pc, #100]	; (8006fd8 <HAL_DMA_IRQHandler+0x6c4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d009      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a17      	ldr	r2, [pc, #92]	; (8006fdc <HAL_DMA_IRQHandler+0x6c8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x678>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <HAL_DMA_IRQHandler+0x6cc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d12b      	bne.n	8006fe4 <HAL_DMA_IRQHandler+0x6d0>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	2300      	moveq	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	e02a      	b.n	8006ff8 <HAL_DMA_IRQHandler+0x6e4>
 8006fa2:	bf00      	nop
 8006fa4:	40020010 	.word	0x40020010
 8006fa8:	40020028 	.word	0x40020028
 8006fac:	40020040 	.word	0x40020040
 8006fb0:	40020058 	.word	0x40020058
 8006fb4:	40020070 	.word	0x40020070
 8006fb8:	40020088 	.word	0x40020088
 8006fbc:	400200a0 	.word	0x400200a0
 8006fc0:	400200b8 	.word	0x400200b8
 8006fc4:	40020410 	.word	0x40020410
 8006fc8:	40020428 	.word	0x40020428
 8006fcc:	40020440 	.word	0x40020440
 8006fd0:	40020458 	.word	0x40020458
 8006fd4:	40020470 	.word	0x40020470
 8006fd8:	40020488 	.word	0x40020488
 8006fdc:	400204a0 	.word	0x400204a0
 8006fe0:	400204b8 	.word	0x400204b8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bf14      	ite	ne
 8006ff2:	2301      	movne	r3, #1
 8006ff4:	2300      	moveq	r3, #0
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8087 	beq.w	800710c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2220      	movs	r2, #32
 8007008:	409a      	lsls	r2, r3
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b04      	cmp	r3, #4
 8007018:	d139      	bne.n	800708e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0216 	bic.w	r2, r2, #22
 8007028:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007038:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <HAL_DMA_IRQHandler+0x736>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007046:	2b00      	cmp	r3, #0
 8007048:	d007      	beq.n	800705a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0208 	bic.w	r2, r2, #8
 8007058:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	223f      	movs	r2, #63	; 0x3f
 8007064:	409a      	lsls	r2, r3
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 834a 	beq.w	8007718 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
          }
          return;
 800708c:	e344      	b.n	8007718 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d018      	beq.n	80070ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d108      	bne.n	80070bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d02c      	beq.n	800710c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
 80070ba:	e027      	b.n	800710c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d023      	beq.n	800710c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	4798      	blx	r3
 80070cc:	e01e      	b.n	800710c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10f      	bne.n	80070fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0210 	bic.w	r2, r2, #16
 80070ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8306 	beq.w	8007722 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 8088 	beq.w	8007234 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2204      	movs	r2, #4
 8007128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a7a      	ldr	r2, [pc, #488]	; (800731c <HAL_DMA_IRQHandler+0xa08>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d04a      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a79      	ldr	r2, [pc, #484]	; (8007320 <HAL_DMA_IRQHandler+0xa0c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d045      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a77      	ldr	r2, [pc, #476]	; (8007324 <HAL_DMA_IRQHandler+0xa10>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d040      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a76      	ldr	r2, [pc, #472]	; (8007328 <HAL_DMA_IRQHandler+0xa14>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d03b      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a74      	ldr	r2, [pc, #464]	; (800732c <HAL_DMA_IRQHandler+0xa18>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d036      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a73      	ldr	r2, [pc, #460]	; (8007330 <HAL_DMA_IRQHandler+0xa1c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d031      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a71      	ldr	r2, [pc, #452]	; (8007334 <HAL_DMA_IRQHandler+0xa20>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d02c      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a70      	ldr	r2, [pc, #448]	; (8007338 <HAL_DMA_IRQHandler+0xa24>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d027      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a6e      	ldr	r2, [pc, #440]	; (800733c <HAL_DMA_IRQHandler+0xa28>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d022      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a6d      	ldr	r2, [pc, #436]	; (8007340 <HAL_DMA_IRQHandler+0xa2c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d01d      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a6b      	ldr	r2, [pc, #428]	; (8007344 <HAL_DMA_IRQHandler+0xa30>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d018      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a6a      	ldr	r2, [pc, #424]	; (8007348 <HAL_DMA_IRQHandler+0xa34>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d013      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a68      	ldr	r2, [pc, #416]	; (800734c <HAL_DMA_IRQHandler+0xa38>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00e      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a67      	ldr	r2, [pc, #412]	; (8007350 <HAL_DMA_IRQHandler+0xa3c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d009      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a65      	ldr	r2, [pc, #404]	; (8007354 <HAL_DMA_IRQHandler+0xa40>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d004      	beq.n	80071cc <HAL_DMA_IRQHandler+0x8b8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a64      	ldr	r2, [pc, #400]	; (8007358 <HAL_DMA_IRQHandler+0xa44>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d108      	bne.n	80071de <HAL_DMA_IRQHandler+0x8ca>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0201 	bic.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	e007      	b.n	80071ee <HAL_DMA_IRQHandler+0x8da>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3301      	adds	r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d307      	bcc.n	800720a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f2      	bne.n	80071ee <HAL_DMA_IRQHandler+0x8da>
 8007208:	e000      	b.n	800720c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800720a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2203      	movs	r2, #3
 800721e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007222:	e003      	b.n	800722c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 8272 	beq.w	8007722 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
 8007246:	e26c      	b.n	8007722 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a43      	ldr	r2, [pc, #268]	; (800735c <HAL_DMA_IRQHandler+0xa48>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d022      	beq.n	8007298 <HAL_DMA_IRQHandler+0x984>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a42      	ldr	r2, [pc, #264]	; (8007360 <HAL_DMA_IRQHandler+0xa4c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d01d      	beq.n	8007298 <HAL_DMA_IRQHandler+0x984>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a40      	ldr	r2, [pc, #256]	; (8007364 <HAL_DMA_IRQHandler+0xa50>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d018      	beq.n	8007298 <HAL_DMA_IRQHandler+0x984>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a3f      	ldr	r2, [pc, #252]	; (8007368 <HAL_DMA_IRQHandler+0xa54>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d013      	beq.n	8007298 <HAL_DMA_IRQHandler+0x984>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a3d      	ldr	r2, [pc, #244]	; (800736c <HAL_DMA_IRQHandler+0xa58>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00e      	beq.n	8007298 <HAL_DMA_IRQHandler+0x984>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a3c      	ldr	r2, [pc, #240]	; (8007370 <HAL_DMA_IRQHandler+0xa5c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d009      	beq.n	8007298 <HAL_DMA_IRQHandler+0x984>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a3a      	ldr	r2, [pc, #232]	; (8007374 <HAL_DMA_IRQHandler+0xa60>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d004      	beq.n	8007298 <HAL_DMA_IRQHandler+0x984>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a39      	ldr	r2, [pc, #228]	; (8007378 <HAL_DMA_IRQHandler+0xa64>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d101      	bne.n	800729c <HAL_DMA_IRQHandler+0x988>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <HAL_DMA_IRQHandler+0x98a>
 800729c:	2300      	movs	r3, #0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 823f 	beq.w	8007722 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b0:	f003 031f 	and.w	r3, r3, #31
 80072b4:	2204      	movs	r2, #4
 80072b6:	409a      	lsls	r2, r3
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80cd 	beq.w	800745c <HAL_DMA_IRQHandler+0xb48>
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80c7 	beq.w	800745c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	2204      	movs	r2, #4
 80072d8:	409a      	lsls	r2, r3
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d049      	beq.n	800737c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 8210 	beq.w	800771c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007304:	e20a      	b.n	800771c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8206 	beq.w	800771c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007318:	e200      	b.n	800771c <HAL_DMA_IRQHandler+0xe08>
 800731a:	bf00      	nop
 800731c:	40020010 	.word	0x40020010
 8007320:	40020028 	.word	0x40020028
 8007324:	40020040 	.word	0x40020040
 8007328:	40020058 	.word	0x40020058
 800732c:	40020070 	.word	0x40020070
 8007330:	40020088 	.word	0x40020088
 8007334:	400200a0 	.word	0x400200a0
 8007338:	400200b8 	.word	0x400200b8
 800733c:	40020410 	.word	0x40020410
 8007340:	40020428 	.word	0x40020428
 8007344:	40020440 	.word	0x40020440
 8007348:	40020458 	.word	0x40020458
 800734c:	40020470 	.word	0x40020470
 8007350:	40020488 	.word	0x40020488
 8007354:	400204a0 	.word	0x400204a0
 8007358:	400204b8 	.word	0x400204b8
 800735c:	58025408 	.word	0x58025408
 8007360:	5802541c 	.word	0x5802541c
 8007364:	58025430 	.word	0x58025430
 8007368:	58025444 	.word	0x58025444
 800736c:	58025458 	.word	0x58025458
 8007370:	5802546c 	.word	0x5802546c
 8007374:	58025480 	.word	0x58025480
 8007378:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d160      	bne.n	8007448 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a7f      	ldr	r2, [pc, #508]	; (8007588 <HAL_DMA_IRQHandler+0xc74>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d04a      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a7d      	ldr	r2, [pc, #500]	; (800758c <HAL_DMA_IRQHandler+0xc78>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d045      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a7c      	ldr	r2, [pc, #496]	; (8007590 <HAL_DMA_IRQHandler+0xc7c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d040      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a7a      	ldr	r2, [pc, #488]	; (8007594 <HAL_DMA_IRQHandler+0xc80>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d03b      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a79      	ldr	r2, [pc, #484]	; (8007598 <HAL_DMA_IRQHandler+0xc84>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d036      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a77      	ldr	r2, [pc, #476]	; (800759c <HAL_DMA_IRQHandler+0xc88>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d031      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a76      	ldr	r2, [pc, #472]	; (80075a0 <HAL_DMA_IRQHandler+0xc8c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d02c      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a74      	ldr	r2, [pc, #464]	; (80075a4 <HAL_DMA_IRQHandler+0xc90>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d027      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a73      	ldr	r2, [pc, #460]	; (80075a8 <HAL_DMA_IRQHandler+0xc94>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d022      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a71      	ldr	r2, [pc, #452]	; (80075ac <HAL_DMA_IRQHandler+0xc98>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01d      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a70      	ldr	r2, [pc, #448]	; (80075b0 <HAL_DMA_IRQHandler+0xc9c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d018      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a6e      	ldr	r2, [pc, #440]	; (80075b4 <HAL_DMA_IRQHandler+0xca0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a6d      	ldr	r2, [pc, #436]	; (80075b8 <HAL_DMA_IRQHandler+0xca4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00e      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a6b      	ldr	r2, [pc, #428]	; (80075bc <HAL_DMA_IRQHandler+0xca8>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d009      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a6a      	ldr	r2, [pc, #424]	; (80075c0 <HAL_DMA_IRQHandler+0xcac>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_DMA_IRQHandler+0xb12>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a68      	ldr	r2, [pc, #416]	; (80075c4 <HAL_DMA_IRQHandler+0xcb0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d108      	bne.n	8007438 <HAL_DMA_IRQHandler+0xb24>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0208 	bic.w	r2, r2, #8
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e007      	b.n	8007448 <HAL_DMA_IRQHandler+0xb34>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0204 	bic.w	r2, r2, #4
 8007446:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8165 	beq.w	800771c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800745a:	e15f      	b.n	800771c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007460:	f003 031f 	and.w	r3, r3, #31
 8007464:	2202      	movs	r2, #2
 8007466:	409a      	lsls	r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 80c5 	beq.w	80075fc <HAL_DMA_IRQHandler+0xce8>
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80bf 	beq.w	80075fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007482:	f003 031f 	and.w	r3, r3, #31
 8007486:	2202      	movs	r2, #2
 8007488:	409a      	lsls	r2, r3
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d018      	beq.n	80074ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d109      	bne.n	80074b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 813a 	beq.w	8007720 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074b4:	e134      	b.n	8007720 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 8130 	beq.w	8007720 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074c8:	e12a      	b.n	8007720 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f040 8089 	bne.w	80075e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a2b      	ldr	r2, [pc, #172]	; (8007588 <HAL_DMA_IRQHandler+0xc74>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d04a      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a29      	ldr	r2, [pc, #164]	; (800758c <HAL_DMA_IRQHandler+0xc78>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d045      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a28      	ldr	r2, [pc, #160]	; (8007590 <HAL_DMA_IRQHandler+0xc7c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d040      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a26      	ldr	r2, [pc, #152]	; (8007594 <HAL_DMA_IRQHandler+0xc80>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d03b      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a25      	ldr	r2, [pc, #148]	; (8007598 <HAL_DMA_IRQHandler+0xc84>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d036      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a23      	ldr	r2, [pc, #140]	; (800759c <HAL_DMA_IRQHandler+0xc88>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d031      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a22      	ldr	r2, [pc, #136]	; (80075a0 <HAL_DMA_IRQHandler+0xc8c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d02c      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <HAL_DMA_IRQHandler+0xc90>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d027      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1f      	ldr	r2, [pc, #124]	; (80075a8 <HAL_DMA_IRQHandler+0xc94>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d022      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1d      	ldr	r2, [pc, #116]	; (80075ac <HAL_DMA_IRQHandler+0xc98>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d01d      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1c      	ldr	r2, [pc, #112]	; (80075b0 <HAL_DMA_IRQHandler+0xc9c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d018      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <HAL_DMA_IRQHandler+0xca0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <HAL_DMA_IRQHandler+0xca4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00e      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a17      	ldr	r2, [pc, #92]	; (80075bc <HAL_DMA_IRQHandler+0xca8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <HAL_DMA_IRQHandler+0xcac>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <HAL_DMA_IRQHandler+0xc62>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a14      	ldr	r2, [pc, #80]	; (80075c4 <HAL_DMA_IRQHandler+0xcb0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d128      	bne.n	80075c8 <HAL_DMA_IRQHandler+0xcb4>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0214 	bic.w	r2, r2, #20
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e027      	b.n	80075d8 <HAL_DMA_IRQHandler+0xcc4>
 8007588:	40020010 	.word	0x40020010
 800758c:	40020028 	.word	0x40020028
 8007590:	40020040 	.word	0x40020040
 8007594:	40020058 	.word	0x40020058
 8007598:	40020070 	.word	0x40020070
 800759c:	40020088 	.word	0x40020088
 80075a0:	400200a0 	.word	0x400200a0
 80075a4:	400200b8 	.word	0x400200b8
 80075a8:	40020410 	.word	0x40020410
 80075ac:	40020428 	.word	0x40020428
 80075b0:	40020440 	.word	0x40020440
 80075b4:	40020458 	.word	0x40020458
 80075b8:	40020470 	.word	0x40020470
 80075bc:	40020488 	.word	0x40020488
 80075c0:	400204a0 	.word	0x400204a0
 80075c4:	400204b8 	.word	0x400204b8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 020a 	bic.w	r2, r2, #10
 80075d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8097 	beq.w	8007720 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075fa:	e091      	b.n	8007720 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007600:	f003 031f 	and.w	r3, r3, #31
 8007604:	2208      	movs	r2, #8
 8007606:	409a      	lsls	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8088 	beq.w	8007722 <HAL_DMA_IRQHandler+0xe0e>
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8082 	beq.w	8007722 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a41      	ldr	r2, [pc, #260]	; (8007728 <HAL_DMA_IRQHandler+0xe14>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d04a      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a3f      	ldr	r2, [pc, #252]	; (800772c <HAL_DMA_IRQHandler+0xe18>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d045      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a3e      	ldr	r2, [pc, #248]	; (8007730 <HAL_DMA_IRQHandler+0xe1c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d040      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a3c      	ldr	r2, [pc, #240]	; (8007734 <HAL_DMA_IRQHandler+0xe20>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d03b      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a3b      	ldr	r2, [pc, #236]	; (8007738 <HAL_DMA_IRQHandler+0xe24>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d036      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a39      	ldr	r2, [pc, #228]	; (800773c <HAL_DMA_IRQHandler+0xe28>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d031      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a38      	ldr	r2, [pc, #224]	; (8007740 <HAL_DMA_IRQHandler+0xe2c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d02c      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a36      	ldr	r2, [pc, #216]	; (8007744 <HAL_DMA_IRQHandler+0xe30>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d027      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a35      	ldr	r2, [pc, #212]	; (8007748 <HAL_DMA_IRQHandler+0xe34>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d022      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a33      	ldr	r2, [pc, #204]	; (800774c <HAL_DMA_IRQHandler+0xe38>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d01d      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a32      	ldr	r2, [pc, #200]	; (8007750 <HAL_DMA_IRQHandler+0xe3c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d018      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a30      	ldr	r2, [pc, #192]	; (8007754 <HAL_DMA_IRQHandler+0xe40>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d013      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2f      	ldr	r2, [pc, #188]	; (8007758 <HAL_DMA_IRQHandler+0xe44>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a2d      	ldr	r2, [pc, #180]	; (800775c <HAL_DMA_IRQHandler+0xe48>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a2c      	ldr	r2, [pc, #176]	; (8007760 <HAL_DMA_IRQHandler+0xe4c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_DMA_IRQHandler+0xdaa>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <HAL_DMA_IRQHandler+0xe50>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d108      	bne.n	80076d0 <HAL_DMA_IRQHandler+0xdbc>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 021c 	bic.w	r2, r2, #28
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	e007      	b.n	80076e0 <HAL_DMA_IRQHandler+0xdcc>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 020e 	bic.w	r2, r2, #14
 80076de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	2201      	movs	r2, #1
 80076ea:	409a      	lsls	r2, r3
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
 8007716:	e004      	b.n	8007722 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007718:	bf00      	nop
 800771a:	e002      	b.n	8007722 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800771c:	bf00      	nop
 800771e:	e000      	b.n	8007722 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007720:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007722:	3728      	adds	r7, #40	; 0x28
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	40020010 	.word	0x40020010
 800772c:	40020028 	.word	0x40020028
 8007730:	40020040 	.word	0x40020040
 8007734:	40020058 	.word	0x40020058
 8007738:	40020070 	.word	0x40020070
 800773c:	40020088 	.word	0x40020088
 8007740:	400200a0 	.word	0x400200a0
 8007744:	400200b8 	.word	0x400200b8
 8007748:	40020410 	.word	0x40020410
 800774c:	40020428 	.word	0x40020428
 8007750:	40020440 	.word	0x40020440
 8007754:	40020458 	.word	0x40020458
 8007758:	40020470 	.word	0x40020470
 800775c:	40020488 	.word	0x40020488
 8007760:	400204a0 	.word	0x400204a0
 8007764:	400204b8 	.word	0x400204b8

08007768 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007780:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a7f      	ldr	r2, [pc, #508]	; (8007984 <DMA_SetConfig+0x21c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d072      	beq.n	8007872 <DMA_SetConfig+0x10a>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a7d      	ldr	r2, [pc, #500]	; (8007988 <DMA_SetConfig+0x220>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d06d      	beq.n	8007872 <DMA_SetConfig+0x10a>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a7c      	ldr	r2, [pc, #496]	; (800798c <DMA_SetConfig+0x224>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d068      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a7a      	ldr	r2, [pc, #488]	; (8007990 <DMA_SetConfig+0x228>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d063      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a79      	ldr	r2, [pc, #484]	; (8007994 <DMA_SetConfig+0x22c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d05e      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a77      	ldr	r2, [pc, #476]	; (8007998 <DMA_SetConfig+0x230>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d059      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a76      	ldr	r2, [pc, #472]	; (800799c <DMA_SetConfig+0x234>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d054      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a74      	ldr	r2, [pc, #464]	; (80079a0 <DMA_SetConfig+0x238>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d04f      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a73      	ldr	r2, [pc, #460]	; (80079a4 <DMA_SetConfig+0x23c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d04a      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a71      	ldr	r2, [pc, #452]	; (80079a8 <DMA_SetConfig+0x240>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d045      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a70      	ldr	r2, [pc, #448]	; (80079ac <DMA_SetConfig+0x244>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d040      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a6e      	ldr	r2, [pc, #440]	; (80079b0 <DMA_SetConfig+0x248>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d03b      	beq.n	8007872 <DMA_SetConfig+0x10a>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a6d      	ldr	r2, [pc, #436]	; (80079b4 <DMA_SetConfig+0x24c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d036      	beq.n	8007872 <DMA_SetConfig+0x10a>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a6b      	ldr	r2, [pc, #428]	; (80079b8 <DMA_SetConfig+0x250>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d031      	beq.n	8007872 <DMA_SetConfig+0x10a>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a6a      	ldr	r2, [pc, #424]	; (80079bc <DMA_SetConfig+0x254>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d02c      	beq.n	8007872 <DMA_SetConfig+0x10a>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a68      	ldr	r2, [pc, #416]	; (80079c0 <DMA_SetConfig+0x258>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d027      	beq.n	8007872 <DMA_SetConfig+0x10a>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a67      	ldr	r2, [pc, #412]	; (80079c4 <DMA_SetConfig+0x25c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d022      	beq.n	8007872 <DMA_SetConfig+0x10a>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a65      	ldr	r2, [pc, #404]	; (80079c8 <DMA_SetConfig+0x260>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d01d      	beq.n	8007872 <DMA_SetConfig+0x10a>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a64      	ldr	r2, [pc, #400]	; (80079cc <DMA_SetConfig+0x264>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d018      	beq.n	8007872 <DMA_SetConfig+0x10a>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a62      	ldr	r2, [pc, #392]	; (80079d0 <DMA_SetConfig+0x268>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d013      	beq.n	8007872 <DMA_SetConfig+0x10a>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a61      	ldr	r2, [pc, #388]	; (80079d4 <DMA_SetConfig+0x26c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00e      	beq.n	8007872 <DMA_SetConfig+0x10a>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a5f      	ldr	r2, [pc, #380]	; (80079d8 <DMA_SetConfig+0x270>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d009      	beq.n	8007872 <DMA_SetConfig+0x10a>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a5e      	ldr	r2, [pc, #376]	; (80079dc <DMA_SetConfig+0x274>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d004      	beq.n	8007872 <DMA_SetConfig+0x10a>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a5c      	ldr	r2, [pc, #368]	; (80079e0 <DMA_SetConfig+0x278>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d101      	bne.n	8007876 <DMA_SetConfig+0x10e>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <DMA_SetConfig+0x110>
 8007876:	2300      	movs	r3, #0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00d      	beq.n	8007898 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007884:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007896:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a39      	ldr	r2, [pc, #228]	; (8007984 <DMA_SetConfig+0x21c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d04a      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a38      	ldr	r2, [pc, #224]	; (8007988 <DMA_SetConfig+0x220>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d045      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a36      	ldr	r2, [pc, #216]	; (800798c <DMA_SetConfig+0x224>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d040      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a35      	ldr	r2, [pc, #212]	; (8007990 <DMA_SetConfig+0x228>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d03b      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a33      	ldr	r2, [pc, #204]	; (8007994 <DMA_SetConfig+0x22c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d036      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a32      	ldr	r2, [pc, #200]	; (8007998 <DMA_SetConfig+0x230>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d031      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a30      	ldr	r2, [pc, #192]	; (800799c <DMA_SetConfig+0x234>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d02c      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a2f      	ldr	r2, [pc, #188]	; (80079a0 <DMA_SetConfig+0x238>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d027      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a2d      	ldr	r2, [pc, #180]	; (80079a4 <DMA_SetConfig+0x23c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d022      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a2c      	ldr	r2, [pc, #176]	; (80079a8 <DMA_SetConfig+0x240>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d01d      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a2a      	ldr	r2, [pc, #168]	; (80079ac <DMA_SetConfig+0x244>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d018      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a29      	ldr	r2, [pc, #164]	; (80079b0 <DMA_SetConfig+0x248>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d013      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a27      	ldr	r2, [pc, #156]	; (80079b4 <DMA_SetConfig+0x24c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00e      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a26      	ldr	r2, [pc, #152]	; (80079b8 <DMA_SetConfig+0x250>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d009      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a24      	ldr	r2, [pc, #144]	; (80079bc <DMA_SetConfig+0x254>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <DMA_SetConfig+0x1d0>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a23      	ldr	r2, [pc, #140]	; (80079c0 <DMA_SetConfig+0x258>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d101      	bne.n	800793c <DMA_SetConfig+0x1d4>
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <DMA_SetConfig+0x1d6>
 800793c:	2300      	movs	r3, #0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d059      	beq.n	80079f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	223f      	movs	r2, #63	; 0x3f
 800794c:	409a      	lsls	r2, r3
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007960:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d138      	bne.n	80079e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007982:	e086      	b.n	8007a92 <DMA_SetConfig+0x32a>
 8007984:	40020010 	.word	0x40020010
 8007988:	40020028 	.word	0x40020028
 800798c:	40020040 	.word	0x40020040
 8007990:	40020058 	.word	0x40020058
 8007994:	40020070 	.word	0x40020070
 8007998:	40020088 	.word	0x40020088
 800799c:	400200a0 	.word	0x400200a0
 80079a0:	400200b8 	.word	0x400200b8
 80079a4:	40020410 	.word	0x40020410
 80079a8:	40020428 	.word	0x40020428
 80079ac:	40020440 	.word	0x40020440
 80079b0:	40020458 	.word	0x40020458
 80079b4:	40020470 	.word	0x40020470
 80079b8:	40020488 	.word	0x40020488
 80079bc:	400204a0 	.word	0x400204a0
 80079c0:	400204b8 	.word	0x400204b8
 80079c4:	58025408 	.word	0x58025408
 80079c8:	5802541c 	.word	0x5802541c
 80079cc:	58025430 	.word	0x58025430
 80079d0:	58025444 	.word	0x58025444
 80079d4:	58025458 	.word	0x58025458
 80079d8:	5802546c 	.word	0x5802546c
 80079dc:	58025480 	.word	0x58025480
 80079e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	60da      	str	r2, [r3, #12]
}
 80079f4:	e04d      	b.n	8007a92 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a29      	ldr	r2, [pc, #164]	; (8007aa0 <DMA_SetConfig+0x338>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d022      	beq.n	8007a46 <DMA_SetConfig+0x2de>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a27      	ldr	r2, [pc, #156]	; (8007aa4 <DMA_SetConfig+0x33c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d01d      	beq.n	8007a46 <DMA_SetConfig+0x2de>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a26      	ldr	r2, [pc, #152]	; (8007aa8 <DMA_SetConfig+0x340>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d018      	beq.n	8007a46 <DMA_SetConfig+0x2de>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a24      	ldr	r2, [pc, #144]	; (8007aac <DMA_SetConfig+0x344>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d013      	beq.n	8007a46 <DMA_SetConfig+0x2de>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a23      	ldr	r2, [pc, #140]	; (8007ab0 <DMA_SetConfig+0x348>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00e      	beq.n	8007a46 <DMA_SetConfig+0x2de>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a21      	ldr	r2, [pc, #132]	; (8007ab4 <DMA_SetConfig+0x34c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d009      	beq.n	8007a46 <DMA_SetConfig+0x2de>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a20      	ldr	r2, [pc, #128]	; (8007ab8 <DMA_SetConfig+0x350>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d004      	beq.n	8007a46 <DMA_SetConfig+0x2de>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1e      	ldr	r2, [pc, #120]	; (8007abc <DMA_SetConfig+0x354>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d101      	bne.n	8007a4a <DMA_SetConfig+0x2e2>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <DMA_SetConfig+0x2e4>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d020      	beq.n	8007a92 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	2201      	movs	r2, #1
 8007a5a:	409a      	lsls	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d108      	bne.n	8007a82 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	60da      	str	r2, [r3, #12]
}
 8007a80:	e007      	b.n	8007a92 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	60da      	str	r2, [r3, #12]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	58025408 	.word	0x58025408
 8007aa4:	5802541c 	.word	0x5802541c
 8007aa8:	58025430 	.word	0x58025430
 8007aac:	58025444 	.word	0x58025444
 8007ab0:	58025458 	.word	0x58025458
 8007ab4:	5802546c 	.word	0x5802546c
 8007ab8:	58025480 	.word	0x58025480
 8007abc:	58025494 	.word	0x58025494

08007ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a42      	ldr	r2, [pc, #264]	; (8007bd8 <DMA_CalcBaseAndBitshift+0x118>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d04a      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a41      	ldr	r2, [pc, #260]	; (8007bdc <DMA_CalcBaseAndBitshift+0x11c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d045      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a3f      	ldr	r2, [pc, #252]	; (8007be0 <DMA_CalcBaseAndBitshift+0x120>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d040      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a3e      	ldr	r2, [pc, #248]	; (8007be4 <DMA_CalcBaseAndBitshift+0x124>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d03b      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a3c      	ldr	r2, [pc, #240]	; (8007be8 <DMA_CalcBaseAndBitshift+0x128>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d036      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a3b      	ldr	r2, [pc, #236]	; (8007bec <DMA_CalcBaseAndBitshift+0x12c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d031      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a39      	ldr	r2, [pc, #228]	; (8007bf0 <DMA_CalcBaseAndBitshift+0x130>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d02c      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a38      	ldr	r2, [pc, #224]	; (8007bf4 <DMA_CalcBaseAndBitshift+0x134>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d027      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a36      	ldr	r2, [pc, #216]	; (8007bf8 <DMA_CalcBaseAndBitshift+0x138>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d022      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a35      	ldr	r2, [pc, #212]	; (8007bfc <DMA_CalcBaseAndBitshift+0x13c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d01d      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a33      	ldr	r2, [pc, #204]	; (8007c00 <DMA_CalcBaseAndBitshift+0x140>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d018      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a32      	ldr	r2, [pc, #200]	; (8007c04 <DMA_CalcBaseAndBitshift+0x144>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a30      	ldr	r2, [pc, #192]	; (8007c08 <DMA_CalcBaseAndBitshift+0x148>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00e      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a2f      	ldr	r2, [pc, #188]	; (8007c0c <DMA_CalcBaseAndBitshift+0x14c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d009      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a2d      	ldr	r2, [pc, #180]	; (8007c10 <DMA_CalcBaseAndBitshift+0x150>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d004      	beq.n	8007b68 <DMA_CalcBaseAndBitshift+0xa8>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a2c      	ldr	r2, [pc, #176]	; (8007c14 <DMA_CalcBaseAndBitshift+0x154>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d101      	bne.n	8007b6c <DMA_CalcBaseAndBitshift+0xac>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e000      	b.n	8007b6e <DMA_CalcBaseAndBitshift+0xae>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d024      	beq.n	8007bbc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	3b10      	subs	r3, #16
 8007b7a:	4a27      	ldr	r2, [pc, #156]	; (8007c18 <DMA_CalcBaseAndBitshift+0x158>)
 8007b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	4a24      	ldr	r2, [pc, #144]	; (8007c1c <DMA_CalcBaseAndBitshift+0x15c>)
 8007b8c:	5cd3      	ldrb	r3, [r2, r3]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d908      	bls.n	8007bac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4b1f      	ldr	r3, [pc, #124]	; (8007c20 <DMA_CalcBaseAndBitshift+0x160>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	1d1a      	adds	r2, r3, #4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8007baa:	e00d      	b.n	8007bc8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <DMA_CalcBaseAndBitshift+0x160>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bba:	e005      	b.n	8007bc8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	40020010 	.word	0x40020010
 8007bdc:	40020028 	.word	0x40020028
 8007be0:	40020040 	.word	0x40020040
 8007be4:	40020058 	.word	0x40020058
 8007be8:	40020070 	.word	0x40020070
 8007bec:	40020088 	.word	0x40020088
 8007bf0:	400200a0 	.word	0x400200a0
 8007bf4:	400200b8 	.word	0x400200b8
 8007bf8:	40020410 	.word	0x40020410
 8007bfc:	40020428 	.word	0x40020428
 8007c00:	40020440 	.word	0x40020440
 8007c04:	40020458 	.word	0x40020458
 8007c08:	40020470 	.word	0x40020470
 8007c0c:	40020488 	.word	0x40020488
 8007c10:	400204a0 	.word	0x400204a0
 8007c14:	400204b8 	.word	0x400204b8
 8007c18:	aaaaaaab 	.word	0xaaaaaaab
 8007c1c:	080155d4 	.word	0x080155d4
 8007c20:	fffffc00 	.word	0xfffffc00

08007c24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d120      	bne.n	8007c7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d858      	bhi.n	8007cf2 <DMA_CheckFifoParam+0xce>
 8007c40:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <DMA_CheckFifoParam+0x24>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007c6b 	.word	0x08007c6b
 8007c50:	08007c59 	.word	0x08007c59
 8007c54:	08007cf3 	.word	0x08007cf3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d048      	beq.n	8007cf6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c68:	e045      	b.n	8007cf6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c72:	d142      	bne.n	8007cfa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c78:	e03f      	b.n	8007cfa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d123      	bne.n	8007ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d838      	bhi.n	8007cfe <DMA_CheckFifoParam+0xda>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <DMA_CheckFifoParam+0x70>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cab 	.word	0x08007cab
 8007c9c:	08007ca5 	.word	0x08007ca5
 8007ca0:	08007cbd 	.word	0x08007cbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
        break;
 8007ca8:	e030      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d025      	beq.n	8007d02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cba:	e022      	b.n	8007d02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cc4:	d11f      	bne.n	8007d06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cca:	e01c      	b.n	8007d06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d902      	bls.n	8007cda <DMA_CheckFifoParam+0xb6>
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d003      	beq.n	8007ce0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007cd8:	e018      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8007cde:	e015      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00e      	beq.n	8007d0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf0:	e00b      	b.n	8007d0a <DMA_CheckFifoParam+0xe6>
        break;
 8007cf2:	bf00      	nop
 8007cf4:	e00a      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007cf6:	bf00      	nop
 8007cf8:	e008      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007cfa:	bf00      	nop
 8007cfc:	e006      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e004      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
        break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <DMA_CheckFifoParam+0xe8>
    break;
 8007d0a:	bf00      	nop
    }
  }

  return status;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop

08007d1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a38      	ldr	r2, [pc, #224]	; (8007e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d022      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a36      	ldr	r2, [pc, #216]	; (8007e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01d      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a35      	ldr	r2, [pc, #212]	; (8007e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d018      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a33      	ldr	r2, [pc, #204]	; (8007e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a32      	ldr	r2, [pc, #200]	; (8007e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00e      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a30      	ldr	r2, [pc, #192]	; (8007e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d009      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a2f      	ldr	r2, [pc, #188]	; (8007e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d004      	beq.n	8007d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a2d      	ldr	r2, [pc, #180]	; (8007e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d101      	bne.n	8007d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01a      	beq.n	8007dba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	3b08      	subs	r3, #8
 8007d8c:	4a28      	ldr	r2, [pc, #160]	; (8007e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	091b      	lsrs	r3, r3, #4
 8007d94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	461a      	mov	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007da8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	2201      	movs	r2, #1
 8007db2:	409a      	lsls	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007db8:	e024      	b.n	8007e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	3b10      	subs	r3, #16
 8007dc2:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc8:	091b      	lsrs	r3, r3, #4
 8007dca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4a1c      	ldr	r2, [pc, #112]	; (8007e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d806      	bhi.n	8007de2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d902      	bls.n	8007de2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3308      	adds	r3, #8
 8007de0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4b18      	ldr	r3, [pc, #96]	; (8007e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	461a      	mov	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007df4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	58025408 	.word	0x58025408
 8007e14:	5802541c 	.word	0x5802541c
 8007e18:	58025430 	.word	0x58025430
 8007e1c:	58025444 	.word	0x58025444
 8007e20:	58025458 	.word	0x58025458
 8007e24:	5802546c 	.word	0x5802546c
 8007e28:	58025480 	.word	0x58025480
 8007e2c:	58025494 	.word	0x58025494
 8007e30:	cccccccd 	.word	0xcccccccd
 8007e34:	16009600 	.word	0x16009600
 8007e38:	58025880 	.word	0x58025880
 8007e3c:	aaaaaaab 	.word	0xaaaaaaab
 8007e40:	400204b8 	.word	0x400204b8
 8007e44:	4002040f 	.word	0x4002040f
 8007e48:	10008200 	.word	0x10008200
 8007e4c:	40020880 	.word	0x40020880

08007e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d04a      	beq.n	8007efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d847      	bhi.n	8007efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a25      	ldr	r2, [pc, #148]	; (8007f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d022      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a24      	ldr	r2, [pc, #144]	; (8007f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d01d      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a22      	ldr	r2, [pc, #136]	; (8007f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d018      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a21      	ldr	r2, [pc, #132]	; (8007f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d013      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1f      	ldr	r2, [pc, #124]	; (8007f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00e      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1e      	ldr	r2, [pc, #120]	; (8007f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a1c      	ldr	r2, [pc, #112]	; (8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d004      	beq.n	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	; (8007f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d101      	bne.n	8007ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4b17      	ldr	r3, [pc, #92]	; (8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	461a      	mov	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007ed8:	671a      	str	r2, [r3, #112]	; 0x70
 8007eda:	e009      	b.n	8007ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b14      	ldr	r3, [pc, #80]	; (8007f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a11      	ldr	r2, [pc, #68]	; (8007f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007eee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	409a      	lsls	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	58025408 	.word	0x58025408
 8007f0c:	5802541c 	.word	0x5802541c
 8007f10:	58025430 	.word	0x58025430
 8007f14:	58025444 	.word	0x58025444
 8007f18:	58025458 	.word	0x58025458
 8007f1c:	5802546c 	.word	0x5802546c
 8007f20:	58025480 	.word	0x58025480
 8007f24:	58025494 	.word	0x58025494
 8007f28:	1600963f 	.word	0x1600963f
 8007f2c:	58025940 	.word	0x58025940
 8007f30:	1000823f 	.word	0x1000823f
 8007f34:	40020940 	.word	0x40020940

08007f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b089      	sub	sp, #36	; 0x24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007f46:	4b89      	ldr	r3, [pc, #548]	; (800816c <HAL_GPIO_Init+0x234>)
 8007f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f4a:	e194      	b.n	8008276 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	2101      	movs	r1, #1
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	fa01 f303 	lsl.w	r3, r1, r3
 8007f58:	4013      	ands	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8186 	beq.w	8008270 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d005      	beq.n	8007f7c <HAL_GPIO_Init+0x44>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d130      	bne.n	8007fde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	2203      	movs	r2, #3
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	4013      	ands	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	091b      	lsrs	r3, r3, #4
 8007fc8:	f003 0201 	and.w	r2, r3, #1
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d017      	beq.n	800801a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	4013      	ands	r3, r2
 8008000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4313      	orrs	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d123      	bne.n	800806e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	08da      	lsrs	r2, r3, #3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3208      	adds	r2, #8
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	220f      	movs	r2, #15
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	43db      	mvns	r3, r3
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	4013      	ands	r3, r2
 8008048:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	4313      	orrs	r3, r2
 800805e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	08da      	lsrs	r2, r3, #3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3208      	adds	r2, #8
 8008068:	69b9      	ldr	r1, [r7, #24]
 800806a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	2203      	movs	r2, #3
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	43db      	mvns	r3, r3
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	4013      	ands	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f003 0203 	and.w	r2, r3, #3
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	fa02 f303 	lsl.w	r3, r2, r3
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	4313      	orrs	r3, r2
 800809a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80e0 	beq.w	8008270 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080b0:	4b2f      	ldr	r3, [pc, #188]	; (8008170 <HAL_GPIO_Init+0x238>)
 80080b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080b6:	4a2e      	ldr	r2, [pc, #184]	; (8008170 <HAL_GPIO_Init+0x238>)
 80080b8:	f043 0302 	orr.w	r3, r3, #2
 80080bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080c0:	4b2b      	ldr	r3, [pc, #172]	; (8008170 <HAL_GPIO_Init+0x238>)
 80080c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080ce:	4a29      	ldr	r2, [pc, #164]	; (8008174 <HAL_GPIO_Init+0x23c>)
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	089b      	lsrs	r3, r3, #2
 80080d4:	3302      	adds	r3, #2
 80080d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	220f      	movs	r2, #15
 80080e6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ea:	43db      	mvns	r3, r3
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	4013      	ands	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a20      	ldr	r2, [pc, #128]	; (8008178 <HAL_GPIO_Init+0x240>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d052      	beq.n	80081a0 <HAL_GPIO_Init+0x268>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a1f      	ldr	r2, [pc, #124]	; (800817c <HAL_GPIO_Init+0x244>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d031      	beq.n	8008166 <HAL_GPIO_Init+0x22e>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <HAL_GPIO_Init+0x248>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d02b      	beq.n	8008162 <HAL_GPIO_Init+0x22a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a1d      	ldr	r2, [pc, #116]	; (8008184 <HAL_GPIO_Init+0x24c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d025      	beq.n	800815e <HAL_GPIO_Init+0x226>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a1c      	ldr	r2, [pc, #112]	; (8008188 <HAL_GPIO_Init+0x250>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01f      	beq.n	800815a <HAL_GPIO_Init+0x222>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a1b      	ldr	r2, [pc, #108]	; (800818c <HAL_GPIO_Init+0x254>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d019      	beq.n	8008156 <HAL_GPIO_Init+0x21e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a1a      	ldr	r2, [pc, #104]	; (8008190 <HAL_GPIO_Init+0x258>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <HAL_GPIO_Init+0x21a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a19      	ldr	r2, [pc, #100]	; (8008194 <HAL_GPIO_Init+0x25c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00d      	beq.n	800814e <HAL_GPIO_Init+0x216>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a18      	ldr	r2, [pc, #96]	; (8008198 <HAL_GPIO_Init+0x260>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d007      	beq.n	800814a <HAL_GPIO_Init+0x212>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a17      	ldr	r2, [pc, #92]	; (800819c <HAL_GPIO_Init+0x264>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d101      	bne.n	8008146 <HAL_GPIO_Init+0x20e>
 8008142:	2309      	movs	r3, #9
 8008144:	e02d      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 8008146:	230a      	movs	r3, #10
 8008148:	e02b      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 800814a:	2308      	movs	r3, #8
 800814c:	e029      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 800814e:	2307      	movs	r3, #7
 8008150:	e027      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 8008152:	2306      	movs	r3, #6
 8008154:	e025      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 8008156:	2305      	movs	r3, #5
 8008158:	e023      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 800815a:	2304      	movs	r3, #4
 800815c:	e021      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 800815e:	2303      	movs	r3, #3
 8008160:	e01f      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 8008162:	2302      	movs	r3, #2
 8008164:	e01d      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 8008166:	2301      	movs	r3, #1
 8008168:	e01b      	b.n	80081a2 <HAL_GPIO_Init+0x26a>
 800816a:	bf00      	nop
 800816c:	58000080 	.word	0x58000080
 8008170:	58024400 	.word	0x58024400
 8008174:	58000400 	.word	0x58000400
 8008178:	58020000 	.word	0x58020000
 800817c:	58020400 	.word	0x58020400
 8008180:	58020800 	.word	0x58020800
 8008184:	58020c00 	.word	0x58020c00
 8008188:	58021000 	.word	0x58021000
 800818c:	58021400 	.word	0x58021400
 8008190:	58021800 	.word	0x58021800
 8008194:	58021c00 	.word	0x58021c00
 8008198:	58022000 	.word	0x58022000
 800819c:	58022400 	.word	0x58022400
 80081a0:	2300      	movs	r3, #0
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	f002 0203 	and.w	r2, r2, #3
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	4093      	lsls	r3, r2
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081b2:	4938      	ldr	r1, [pc, #224]	; (8008294 <HAL_GPIO_Init+0x35c>)
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	089b      	lsrs	r3, r3, #2
 80081b8:	3302      	adds	r3, #2
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80081c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	43db      	mvns	r3, r3
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	4013      	ands	r3, r2
 80081d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80081e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80081ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	43db      	mvns	r3, r3
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	4013      	ands	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	43db      	mvns	r3, r3
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	4013      	ands	r3, r2
 800822a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	43db      	mvns	r3, r3
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	4013      	ands	r3, r2
 8008254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	3301      	adds	r3, #1
 8008274:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	fa22 f303 	lsr.w	r3, r2, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	f47f ae63 	bne.w	8007f4c <HAL_GPIO_Init+0x14>
  }
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	3724      	adds	r7, #36	; 0x24
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	58000400 	.word	0x58000400

08008298 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	887b      	ldrh	r3, [r7, #2]
 80082aa:	4013      	ands	r3, r2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
 80082b4:	e001      	b.n	80082ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	807b      	strh	r3, [r7, #2]
 80082d4:	4613      	mov	r3, r2
 80082d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082d8:	787b      	ldrb	r3, [r7, #1]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082de:	887a      	ldrh	r2, [r7, #2]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80082e4:	e003      	b.n	80082ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80082e6:	887b      	ldrh	r3, [r7, #2]
 80082e8:	041a      	lsls	r2, r3, #16
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	619a      	str	r2, [r3, #24]
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
	...

080082fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e08b      	b.n	8008426 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7fa f938 	bl	8002598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2224      	movs	r2, #36	; 0x24
 800832c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0201 	bic.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800834c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800835c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d107      	bne.n	8008376 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008372:	609a      	str	r2, [r3, #8]
 8008374:	e006      	b.n	8008384 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008382:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	2b02      	cmp	r3, #2
 800838a:	d108      	bne.n	800839e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800839a:	605a      	str	r2, [r3, #4]
 800839c:	e007      	b.n	80083ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6859      	ldr	r1, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <HAL_I2C_Init+0x134>)
 80083ba:	430b      	orrs	r3, r1
 80083bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a1a      	ldr	r2, [r3, #32]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2220      	movs	r2, #32
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	02008000 	.word	0x02008000

08008434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b20      	cmp	r3, #32
 8008448:	d138      	bne.n	80084bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008454:	2302      	movs	r3, #2
 8008456:	e032      	b.n	80084be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2224      	movs	r2, #36	; 0x24
 8008464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0201 	bic.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6819      	ldr	r1, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0201 	orr.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	e000      	b.n	80084be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084bc:	2302      	movs	r3, #2
  }
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b20      	cmp	r3, #32
 80084de:	d139      	bne.n	8008554 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084ea:	2302      	movs	r3, #2
 80084ec:	e033      	b.n	8008556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2224      	movs	r2, #36	; 0x24
 80084fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0201 	bic.w	r2, r2, #1
 800850c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800851c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	e000      	b.n	8008556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008554:	2302      	movs	r3, #2
  }
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
	...

08008564 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800856c:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <HAL_PWREx_ConfigSupply+0x70>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b04      	cmp	r3, #4
 8008576:	d00a      	beq.n	800858e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008578:	4b16      	ldr	r3, [pc, #88]	; (80085d4 <HAL_PWREx_ConfigSupply+0x70>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	429a      	cmp	r2, r3
 8008584:	d001      	beq.n	800858a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e01f      	b.n	80085ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	e01d      	b.n	80085ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800858e:	4b11      	ldr	r3, [pc, #68]	; (80085d4 <HAL_PWREx_ConfigSupply+0x70>)
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f023 0207 	bic.w	r2, r3, #7
 8008596:	490f      	ldr	r1, [pc, #60]	; (80085d4 <HAL_PWREx_ConfigSupply+0x70>)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4313      	orrs	r3, r2
 800859c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800859e:	f7fa fd67 	bl	8003070 <HAL_GetTick>
 80085a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085a4:	e009      	b.n	80085ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80085a6:	f7fa fd63 	bl	8003070 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085b4:	d901      	bls.n	80085ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e007      	b.n	80085ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085ba:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <HAL_PWREx_ConfigSupply+0x70>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c6:	d1ee      	bne.n	80085a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	58024800 	.word	0x58024800

080085d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08c      	sub	sp, #48	; 0x30
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d102      	bne.n	80085ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f000 bc48 	b.w	8008e7c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 8088 	beq.w	800870a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085fa:	4b99      	ldr	r3, [pc, #612]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008604:	4b96      	ldr	r3, [pc, #600]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	2b10      	cmp	r3, #16
 800860e:	d007      	beq.n	8008620 <HAL_RCC_OscConfig+0x48>
 8008610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008612:	2b18      	cmp	r3, #24
 8008614:	d111      	bne.n	800863a <HAL_RCC_OscConfig+0x62>
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d10c      	bne.n	800863a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008620:	4b8f      	ldr	r3, [pc, #572]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d06d      	beq.n	8008708 <HAL_RCC_OscConfig+0x130>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d169      	bne.n	8008708 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f000 bc21 	b.w	8008e7c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008642:	d106      	bne.n	8008652 <HAL_RCC_OscConfig+0x7a>
 8008644:	4b86      	ldr	r3, [pc, #536]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a85      	ldr	r2, [pc, #532]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800864a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	e02e      	b.n	80086b0 <HAL_RCC_OscConfig+0xd8>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10c      	bne.n	8008674 <HAL_RCC_OscConfig+0x9c>
 800865a:	4b81      	ldr	r3, [pc, #516]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a80      	ldr	r2, [pc, #512]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	4b7e      	ldr	r3, [pc, #504]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a7d      	ldr	r2, [pc, #500]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800866c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	e01d      	b.n	80086b0 <HAL_RCC_OscConfig+0xd8>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800867c:	d10c      	bne.n	8008698 <HAL_RCC_OscConfig+0xc0>
 800867e:	4b78      	ldr	r3, [pc, #480]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a77      	ldr	r2, [pc, #476]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	4b75      	ldr	r3, [pc, #468]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a74      	ldr	r2, [pc, #464]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	e00b      	b.n	80086b0 <HAL_RCC_OscConfig+0xd8>
 8008698:	4b71      	ldr	r3, [pc, #452]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a70      	ldr	r2, [pc, #448]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800869e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	4b6e      	ldr	r3, [pc, #440]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a6d      	ldr	r2, [pc, #436]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80086aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d013      	beq.n	80086e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b8:	f7fa fcda 	bl	8003070 <HAL_GetTick>
 80086bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086be:	e008      	b.n	80086d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086c0:	f7fa fcd6 	bl	8003070 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b64      	cmp	r3, #100	; 0x64
 80086cc:	d901      	bls.n	80086d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e3d4      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086d2:	4b63      	ldr	r3, [pc, #396]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0f0      	beq.n	80086c0 <HAL_RCC_OscConfig+0xe8>
 80086de:	e014      	b.n	800870a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e0:	f7fa fcc6 	bl	8003070 <HAL_GetTick>
 80086e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086e6:	e008      	b.n	80086fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086e8:	f7fa fcc2 	bl	8003070 <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b64      	cmp	r3, #100	; 0x64
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e3c0      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086fa:	4b59      	ldr	r3, [pc, #356]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1f0      	bne.n	80086e8 <HAL_RCC_OscConfig+0x110>
 8008706:	e000      	b.n	800870a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80ca 	beq.w	80088ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008718:	4b51      	ldr	r3, [pc, #324]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008720:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008722:	4b4f      	ldr	r3, [pc, #316]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <HAL_RCC_OscConfig+0x166>
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	2b18      	cmp	r3, #24
 8008732:	d156      	bne.n	80087e2 <HAL_RCC_OscConfig+0x20a>
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d151      	bne.n	80087e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800873e:	4b48      	ldr	r3, [pc, #288]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0304 	and.w	r3, r3, #4
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <HAL_RCC_OscConfig+0x17e>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e392      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008756:	4b42      	ldr	r3, [pc, #264]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f023 0219 	bic.w	r2, r3, #25
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	493f      	ldr	r1, [pc, #252]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008764:	4313      	orrs	r3, r2
 8008766:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008768:	f7fa fc82 	bl	8003070 <HAL_GetTick>
 800876c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800876e:	e008      	b.n	8008782 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008770:	f7fa fc7e 	bl	8003070 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b02      	cmp	r3, #2
 800877c:	d901      	bls.n	8008782 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e37c      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008782:	4b37      	ldr	r3, [pc, #220]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0f0      	beq.n	8008770 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800878e:	f7fa fc7b 	bl	8003088 <HAL_GetREVID>
 8008792:	4603      	mov	r3, r0
 8008794:	f241 0203 	movw	r2, #4099	; 0x1003
 8008798:	4293      	cmp	r3, r2
 800879a:	d817      	bhi.n	80087cc <HAL_RCC_OscConfig+0x1f4>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	2b40      	cmp	r3, #64	; 0x40
 80087a2:	d108      	bne.n	80087b6 <HAL_RCC_OscConfig+0x1de>
 80087a4:	4b2e      	ldr	r3, [pc, #184]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087ac:	4a2c      	ldr	r2, [pc, #176]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80087ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087b4:	e07a      	b.n	80088ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b6:	4b2a      	ldr	r3, [pc, #168]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	031b      	lsls	r3, r3, #12
 80087c4:	4926      	ldr	r1, [pc, #152]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ca:	e06f      	b.n	80088ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087cc:	4b24      	ldr	r3, [pc, #144]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	061b      	lsls	r3, r3, #24
 80087da:	4921      	ldr	r1, [pc, #132]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087e0:	e064      	b.n	80088ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d047      	beq.n	800887a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087ea:	4b1d      	ldr	r3, [pc, #116]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f023 0219 	bic.w	r2, r3, #25
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	491a      	ldr	r1, [pc, #104]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fc:	f7fa fc38 	bl	8003070 <HAL_GetTick>
 8008800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008804:	f7fa fc34 	bl	8003070 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b02      	cmp	r3, #2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e332      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008816:	4b12      	ldr	r3, [pc, #72]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0304 	and.w	r3, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0f0      	beq.n	8008804 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008822:	f7fa fc31 	bl	8003088 <HAL_GetREVID>
 8008826:	4603      	mov	r3, r0
 8008828:	f241 0203 	movw	r2, #4099	; 0x1003
 800882c:	4293      	cmp	r3, r2
 800882e:	d819      	bhi.n	8008864 <HAL_RCC_OscConfig+0x28c>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	2b40      	cmp	r3, #64	; 0x40
 8008836:	d108      	bne.n	800884a <HAL_RCC_OscConfig+0x272>
 8008838:	4b09      	ldr	r3, [pc, #36]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008840:	4a07      	ldr	r2, [pc, #28]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 8008842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008846:	6053      	str	r3, [r2, #4]
 8008848:	e030      	b.n	80088ac <HAL_RCC_OscConfig+0x2d4>
 800884a:	4b05      	ldr	r3, [pc, #20]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	031b      	lsls	r3, r3, #12
 8008858:	4901      	ldr	r1, [pc, #4]	; (8008860 <HAL_RCC_OscConfig+0x288>)
 800885a:	4313      	orrs	r3, r2
 800885c:	604b      	str	r3, [r1, #4]
 800885e:	e025      	b.n	80088ac <HAL_RCC_OscConfig+0x2d4>
 8008860:	58024400 	.word	0x58024400
 8008864:	4b9a      	ldr	r3, [pc, #616]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	061b      	lsls	r3, r3, #24
 8008872:	4997      	ldr	r1, [pc, #604]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008874:	4313      	orrs	r3, r2
 8008876:	604b      	str	r3, [r1, #4]
 8008878:	e018      	b.n	80088ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800887a:	4b95      	ldr	r3, [pc, #596]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a94      	ldr	r2, [pc, #592]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008886:	f7fa fbf3 	bl	8003070 <HAL_GetTick>
 800888a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800888c:	e008      	b.n	80088a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800888e:	f7fa fbef 	bl	8003070 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e2ed      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088a0:	4b8b      	ldr	r3, [pc, #556]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f0      	bne.n	800888e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0310 	and.w	r3, r3, #16
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80a9 	beq.w	8008a0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088ba:	4b85      	ldr	r3, [pc, #532]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088c4:	4b82      	ldr	r3, [pc, #520]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	d007      	beq.n	80088e0 <HAL_RCC_OscConfig+0x308>
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	2b18      	cmp	r3, #24
 80088d4:	d13a      	bne.n	800894c <HAL_RCC_OscConfig+0x374>
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d135      	bne.n	800894c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088e0:	4b7b      	ldr	r3, [pc, #492]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_RCC_OscConfig+0x320>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	2b80      	cmp	r3, #128	; 0x80
 80088f2:	d001      	beq.n	80088f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e2c1      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088f8:	f7fa fbc6 	bl	8003088 <HAL_GetREVID>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8008902:	4293      	cmp	r3, r2
 8008904:	d817      	bhi.n	8008936 <HAL_RCC_OscConfig+0x35e>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	2b20      	cmp	r3, #32
 800890c:	d108      	bne.n	8008920 <HAL_RCC_OscConfig+0x348>
 800890e:	4b70      	ldr	r3, [pc, #448]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008916:	4a6e      	ldr	r2, [pc, #440]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800891c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800891e:	e075      	b.n	8008a0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008920:	4b6b      	ldr	r3, [pc, #428]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	069b      	lsls	r3, r3, #26
 800892e:	4968      	ldr	r1, [pc, #416]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008930:	4313      	orrs	r3, r2
 8008932:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008934:	e06a      	b.n	8008a0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008936:	4b66      	ldr	r3, [pc, #408]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	061b      	lsls	r3, r3, #24
 8008944:	4962      	ldr	r1, [pc, #392]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008946:	4313      	orrs	r3, r2
 8008948:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800894a:	e05f      	b.n	8008a0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d042      	beq.n	80089da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008954:	4b5e      	ldr	r3, [pc, #376]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a5d      	ldr	r2, [pc, #372]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 800895a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008960:	f7fa fb86 	bl	8003070 <HAL_GetTick>
 8008964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008966:	e008      	b.n	800897a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008968:	f7fa fb82 	bl	8003070 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b02      	cmp	r3, #2
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e280      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800897a:	4b55      	ldr	r3, [pc, #340]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0f0      	beq.n	8008968 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008986:	f7fa fb7f 	bl	8003088 <HAL_GetREVID>
 800898a:	4603      	mov	r3, r0
 800898c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008990:	4293      	cmp	r3, r2
 8008992:	d817      	bhi.n	80089c4 <HAL_RCC_OscConfig+0x3ec>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	2b20      	cmp	r3, #32
 800899a:	d108      	bne.n	80089ae <HAL_RCC_OscConfig+0x3d6>
 800899c:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089a4:	4a4a      	ldr	r2, [pc, #296]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80089a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089aa:	6053      	str	r3, [r2, #4]
 80089ac:	e02e      	b.n	8008a0c <HAL_RCC_OscConfig+0x434>
 80089ae:	4b48      	ldr	r3, [pc, #288]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	069b      	lsls	r3, r3, #26
 80089bc:	4944      	ldr	r1, [pc, #272]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	604b      	str	r3, [r1, #4]
 80089c2:	e023      	b.n	8008a0c <HAL_RCC_OscConfig+0x434>
 80089c4:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	061b      	lsls	r3, r3, #24
 80089d2:	493f      	ldr	r1, [pc, #252]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60cb      	str	r3, [r1, #12]
 80089d8:	e018      	b.n	8008a0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089da:	4b3d      	ldr	r3, [pc, #244]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a3c      	ldr	r2, [pc, #240]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 80089e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e6:	f7fa fb43 	bl	8003070 <HAL_GetTick>
 80089ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089ee:	f7fa fb3f 	bl	8003070 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e23d      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a00:	4b33      	ldr	r3, [pc, #204]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f0      	bne.n	80089ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d036      	beq.n	8008a86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d019      	beq.n	8008a54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a20:	4b2b      	ldr	r3, [pc, #172]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a24:	4a2a      	ldr	r2, [pc, #168]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a2c:	f7fa fb20 	bl	8003070 <HAL_GetTick>
 8008a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a34:	f7fa fb1c 	bl	8003070 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e21a      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a46:	4b22      	ldr	r3, [pc, #136]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0f0      	beq.n	8008a34 <HAL_RCC_OscConfig+0x45c>
 8008a52:	e018      	b.n	8008a86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a54:	4b1e      	ldr	r3, [pc, #120]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a58:	4a1d      	ldr	r2, [pc, #116]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008a5a:	f023 0301 	bic.w	r3, r3, #1
 8008a5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a60:	f7fa fb06 	bl	8003070 <HAL_GetTick>
 8008a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a68:	f7fa fb02 	bl	8003070 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e200      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a7a:	4b15      	ldr	r3, [pc, #84]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d039      	beq.n	8008b06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d01c      	beq.n	8008ad4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a0c      	ldr	r2, [pc, #48]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008aa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008aa6:	f7fa fae3 	bl	8003070 <HAL_GetTick>
 8008aaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aac:	e008      	b.n	8008ac0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aae:	f7fa fadf 	bl	8003070 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e1dd      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ac0:	4b03      	ldr	r3, [pc, #12]	; (8008ad0 <HAL_RCC_OscConfig+0x4f8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0f0      	beq.n	8008aae <HAL_RCC_OscConfig+0x4d6>
 8008acc:	e01b      	b.n	8008b06 <HAL_RCC_OscConfig+0x52e>
 8008ace:	bf00      	nop
 8008ad0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ad4:	4b9b      	ldr	r3, [pc, #620]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a9a      	ldr	r2, [pc, #616]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ade:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ae0:	f7fa fac6 	bl	8003070 <HAL_GetTick>
 8008ae4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ae8:	f7fa fac2 	bl	8003070 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e1c0      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008afa:	4b92      	ldr	r3, [pc, #584]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f0      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 8081 	beq.w	8008c16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b14:	4b8c      	ldr	r3, [pc, #560]	; (8008d48 <HAL_RCC_OscConfig+0x770>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a8b      	ldr	r2, [pc, #556]	; (8008d48 <HAL_RCC_OscConfig+0x770>)
 8008b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b20:	f7fa faa6 	bl	8003070 <HAL_GetTick>
 8008b24:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b28:	f7fa faa2 	bl	8003070 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b64      	cmp	r3, #100	; 0x64
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e1a0      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b3a:	4b83      	ldr	r3, [pc, #524]	; (8008d48 <HAL_RCC_OscConfig+0x770>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0f0      	beq.n	8008b28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d106      	bne.n	8008b5c <HAL_RCC_OscConfig+0x584>
 8008b4e:	4b7d      	ldr	r3, [pc, #500]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b52:	4a7c      	ldr	r2, [pc, #496]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b54:	f043 0301 	orr.w	r3, r3, #1
 8008b58:	6713      	str	r3, [r2, #112]	; 0x70
 8008b5a:	e02d      	b.n	8008bb8 <HAL_RCC_OscConfig+0x5e0>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10c      	bne.n	8008b7e <HAL_RCC_OscConfig+0x5a6>
 8008b64:	4b77      	ldr	r3, [pc, #476]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b68:	4a76      	ldr	r2, [pc, #472]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b6a:	f023 0301 	bic.w	r3, r3, #1
 8008b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b70:	4b74      	ldr	r3, [pc, #464]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b74:	4a73      	ldr	r2, [pc, #460]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b76:	f023 0304 	bic.w	r3, r3, #4
 8008b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b7c:	e01c      	b.n	8008bb8 <HAL_RCC_OscConfig+0x5e0>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	2b05      	cmp	r3, #5
 8008b84:	d10c      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x5c8>
 8008b86:	4b6f      	ldr	r3, [pc, #444]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8a:	4a6e      	ldr	r2, [pc, #440]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b8c:	f043 0304 	orr.w	r3, r3, #4
 8008b90:	6713      	str	r3, [r2, #112]	; 0x70
 8008b92:	4b6c      	ldr	r3, [pc, #432]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b96:	4a6b      	ldr	r2, [pc, #428]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008b98:	f043 0301 	orr.w	r3, r3, #1
 8008b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b9e:	e00b      	b.n	8008bb8 <HAL_RCC_OscConfig+0x5e0>
 8008ba0:	4b68      	ldr	r3, [pc, #416]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba4:	4a67      	ldr	r2, [pc, #412]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	6713      	str	r3, [r2, #112]	; 0x70
 8008bac:	4b65      	ldr	r3, [pc, #404]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb0:	4a64      	ldr	r2, [pc, #400]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008bb2:	f023 0304 	bic.w	r3, r3, #4
 8008bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d015      	beq.n	8008bec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bc0:	f7fa fa56 	bl	8003070 <HAL_GetTick>
 8008bc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc6:	e00a      	b.n	8008bde <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc8:	f7fa fa52 	bl	8003070 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d901      	bls.n	8008bde <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e14e      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bde:	4b59      	ldr	r3, [pc, #356]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0ee      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x5f0>
 8008bea:	e014      	b.n	8008c16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bec:	f7fa fa40 	bl	8003070 <HAL_GetTick>
 8008bf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bf2:	e00a      	b.n	8008c0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bf4:	f7fa fa3c 	bl	8003070 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e138      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c0a:	4b4e      	ldr	r3, [pc, #312]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1ee      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 812d 	beq.w	8008e7a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c20:	4b48      	ldr	r3, [pc, #288]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c28:	2b18      	cmp	r3, #24
 8008c2a:	f000 80bd 	beq.w	8008da8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f040 809e 	bne.w	8008d74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c38:	4b42      	ldr	r3, [pc, #264]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a41      	ldr	r2, [pc, #260]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c44:	f7fa fa14 	bl	8003070 <HAL_GetTick>
 8008c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c4c:	f7fa fa10 	bl	8003070 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e10e      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c5e:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f0      	bne.n	8008c4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c6a:	4b36      	ldr	r3, [pc, #216]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c6e:	4b37      	ldr	r3, [pc, #220]	; (8008d4c <HAL_RCC_OscConfig+0x774>)
 8008c70:	4013      	ands	r3, r2
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c7a:	0112      	lsls	r2, r2, #4
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	4931      	ldr	r1, [pc, #196]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	628b      	str	r3, [r1, #40]	; 0x28
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c92:	3b01      	subs	r3, #1
 8008c94:	025b      	lsls	r3, r3, #9
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	041b      	lsls	r3, r3, #16
 8008ca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cac:	3b01      	subs	r3, #1
 8008cae:	061b      	lsls	r3, r3, #24
 8008cb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cb4:	4923      	ldr	r1, [pc, #140]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008cba:	4b22      	ldr	r3, [pc, #136]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	4a21      	ldr	r2, [pc, #132]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008cc0:	f023 0301 	bic.w	r3, r3, #1
 8008cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cc6:	4b1f      	ldr	r3, [pc, #124]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cca:	4b21      	ldr	r3, [pc, #132]	; (8008d50 <HAL_RCC_OscConfig+0x778>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008cd2:	00d2      	lsls	r2, r2, #3
 8008cd4:	491b      	ldr	r1, [pc, #108]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cda:	4b1a      	ldr	r3, [pc, #104]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	f023 020c 	bic.w	r2, r3, #12
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	4917      	ldr	r1, [pc, #92]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008cec:	4b15      	ldr	r3, [pc, #84]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	f023 0202 	bic.w	r2, r3, #2
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf8:	4912      	ldr	r1, [pc, #72]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cfe:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	4a10      	ldr	r2, [pc, #64]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d0a:	4b0e      	ldr	r3, [pc, #56]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	4a0d      	ldr	r2, [pc, #52]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	4a0a      	ldr	r2, [pc, #40]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d22:	4b08      	ldr	r3, [pc, #32]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d26:	4a07      	ldr	r2, [pc, #28]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d28:	f043 0301 	orr.w	r3, r3, #1
 8008d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a04      	ldr	r2, [pc, #16]	; (8008d44 <HAL_RCC_OscConfig+0x76c>)
 8008d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d3a:	f7fa f999 	bl	8003070 <HAL_GetTick>
 8008d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d40:	e011      	b.n	8008d66 <HAL_RCC_OscConfig+0x78e>
 8008d42:	bf00      	nop
 8008d44:	58024400 	.word	0x58024400
 8008d48:	58024800 	.word	0x58024800
 8008d4c:	fffffc0c 	.word	0xfffffc0c
 8008d50:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d54:	f7fa f98c 	bl	8003070 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e08a      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d66:	4b47      	ldr	r3, [pc, #284]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <HAL_RCC_OscConfig+0x77c>
 8008d72:	e082      	b.n	8008e7a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d74:	4b43      	ldr	r3, [pc, #268]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a42      	ldr	r2, [pc, #264]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d80:	f7fa f976 	bl	8003070 <HAL_GetTick>
 8008d84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d88:	f7fa f972 	bl	8003070 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e070      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d9a:	4b3a      	ldr	r3, [pc, #232]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1f0      	bne.n	8008d88 <HAL_RCC_OscConfig+0x7b0>
 8008da6:	e068      	b.n	8008e7a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008da8:	4b36      	ldr	r3, [pc, #216]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008dae:	4b35      	ldr	r3, [pc, #212]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d031      	beq.n	8008e20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f003 0203 	and.w	r2, r3, #3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d12a      	bne.n	8008e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	091b      	lsrs	r3, r3, #4
 8008dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d122      	bne.n	8008e20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d11a      	bne.n	8008e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	0a5b      	lsrs	r3, r3, #9
 8008dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d111      	bne.n	8008e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	0c1b      	lsrs	r3, r3, #16
 8008e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d108      	bne.n	8008e20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	0e1b      	lsrs	r3, r3, #24
 8008e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d001      	beq.n	8008e24 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e02b      	b.n	8008e7c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e24:	4b17      	ldr	r3, [pc, #92]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e28:	08db      	lsrs	r3, r3, #3
 8008e2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d01f      	beq.n	8008e7a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e3a:	4b12      	ldr	r3, [pc, #72]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	4a11      	ldr	r2, [pc, #68]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e46:	f7fa f913 	bl	8003070 <HAL_GetTick>
 8008e4a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008e4c:	bf00      	nop
 8008e4e:	f7fa f90f 	bl	8003070 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d0f9      	beq.n	8008e4e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5e:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <HAL_RCC_OscConfig+0x8b0>)
 8008e60:	4013      	ands	r3, r2
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e66:	00d2      	lsls	r2, r2, #3
 8008e68:	4906      	ldr	r1, [pc, #24]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	4a04      	ldr	r2, [pc, #16]	; (8008e84 <HAL_RCC_OscConfig+0x8ac>)
 8008e74:	f043 0301 	orr.w	r3, r3, #1
 8008e78:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3730      	adds	r7, #48	; 0x30
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	58024400 	.word	0x58024400
 8008e88:	ffff0007 	.word	0xffff0007

08008e8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e19c      	b.n	80091da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ea0:	4b8a      	ldr	r3, [pc, #552]	; (80090cc <HAL_RCC_ClockConfig+0x240>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 030f 	and.w	r3, r3, #15
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d910      	bls.n	8008ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eae:	4b87      	ldr	r3, [pc, #540]	; (80090cc <HAL_RCC_ClockConfig+0x240>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f023 020f 	bic.w	r2, r3, #15
 8008eb6:	4985      	ldr	r1, [pc, #532]	; (80090cc <HAL_RCC_ClockConfig+0x240>)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ebe:	4b83      	ldr	r3, [pc, #524]	; (80090cc <HAL_RCC_ClockConfig+0x240>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d001      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e184      	b.n	80091da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d010      	beq.n	8008efe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	4b7b      	ldr	r3, [pc, #492]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d908      	bls.n	8008efe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008eec:	4b78      	ldr	r3, [pc, #480]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	4975      	ldr	r1, [pc, #468]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d010      	beq.n	8008f2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	695a      	ldr	r2, [r3, #20]
 8008f0e:	4b70      	ldr	r3, [pc, #448]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d908      	bls.n	8008f2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f1a:	4b6d      	ldr	r3, [pc, #436]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	496a      	ldr	r1, [pc, #424]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0310 	and.w	r3, r3, #16
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d010      	beq.n	8008f5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699a      	ldr	r2, [r3, #24]
 8008f3c:	4b64      	ldr	r3, [pc, #400]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d908      	bls.n	8008f5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f48:	4b61      	ldr	r3, [pc, #388]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	495e      	ldr	r1, [pc, #376]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d010      	beq.n	8008f88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	4b59      	ldr	r3, [pc, #356]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d908      	bls.n	8008f88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f76:	4b56      	ldr	r3, [pc, #344]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	4953      	ldr	r1, [pc, #332]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d010      	beq.n	8008fb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	4b4d      	ldr	r3, [pc, #308]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d908      	bls.n	8008fb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fa4:	4b4a      	ldr	r3, [pc, #296]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	f023 020f 	bic.w	r2, r3, #15
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	4947      	ldr	r1, [pc, #284]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d055      	beq.n	800906e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008fc2:	4b43      	ldr	r3, [pc, #268]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	4940      	ldr	r1, [pc, #256]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d107      	bne.n	8008fec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fdc:	4b3c      	ldr	r3, [pc, #240]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d121      	bne.n	800902c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e0f6      	b.n	80091da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d107      	bne.n	8009004 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ff4:	4b36      	ldr	r3, [pc, #216]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d115      	bne.n	800902c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e0ea      	b.n	80091da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d107      	bne.n	800901c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800900c:	4b30      	ldr	r3, [pc, #192]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e0de      	b.n	80091da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800901c:	4b2c      	ldr	r3, [pc, #176]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e0d6      	b.n	80091da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800902c:	4b28      	ldr	r3, [pc, #160]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	f023 0207 	bic.w	r2, r3, #7
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	4925      	ldr	r1, [pc, #148]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 800903a:	4313      	orrs	r3, r2
 800903c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800903e:	f7fa f817 	bl	8003070 <HAL_GetTick>
 8009042:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009044:	e00a      	b.n	800905c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009046:	f7fa f813 	bl	8003070 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	f241 3288 	movw	r2, #5000	; 0x1388
 8009054:	4293      	cmp	r3, r2
 8009056:	d901      	bls.n	800905c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e0be      	b.n	80091da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800905c:	4b1c      	ldr	r3, [pc, #112]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	429a      	cmp	r2, r3
 800906c:	d1eb      	bne.n	8009046 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d010      	beq.n	800909c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68da      	ldr	r2, [r3, #12]
 800907e:	4b14      	ldr	r3, [pc, #80]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	429a      	cmp	r2, r3
 8009088:	d208      	bcs.n	800909c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800908a:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	f023 020f 	bic.w	r2, r3, #15
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	490e      	ldr	r1, [pc, #56]	; (80090d0 <HAL_RCC_ClockConfig+0x244>)
 8009098:	4313      	orrs	r3, r2
 800909a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <HAL_RCC_ClockConfig+0x240>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d214      	bcs.n	80090d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <HAL_RCC_ClockConfig+0x240>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f023 020f 	bic.w	r2, r3, #15
 80090b2:	4906      	ldr	r1, [pc, #24]	; (80090cc <HAL_RCC_ClockConfig+0x240>)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ba:	4b04      	ldr	r3, [pc, #16]	; (80090cc <HAL_RCC_ClockConfig+0x240>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d005      	beq.n	80090d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e086      	b.n	80091da <HAL_RCC_ClockConfig+0x34e>
 80090cc:	52002000 	.word	0x52002000
 80090d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d010      	beq.n	8009102 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	4b3f      	ldr	r3, [pc, #252]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d208      	bcs.n	8009102 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090f0:	4b3c      	ldr	r3, [pc, #240]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	4939      	ldr	r1, [pc, #228]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d010      	beq.n	8009130 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	695a      	ldr	r2, [r3, #20]
 8009112:	4b34      	ldr	r3, [pc, #208]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800911a:	429a      	cmp	r2, r3
 800911c:	d208      	bcs.n	8009130 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800911e:	4b31      	ldr	r3, [pc, #196]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	492e      	ldr	r1, [pc, #184]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 800912c:	4313      	orrs	r3, r2
 800912e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	2b00      	cmp	r3, #0
 800913a:	d010      	beq.n	800915e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699a      	ldr	r2, [r3, #24]
 8009140:	4b28      	ldr	r3, [pc, #160]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009148:	429a      	cmp	r2, r3
 800914a:	d208      	bcs.n	800915e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800914c:	4b25      	ldr	r3, [pc, #148]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	4922      	ldr	r1, [pc, #136]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 800915a:	4313      	orrs	r3, r2
 800915c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0320 	and.w	r3, r3, #32
 8009166:	2b00      	cmp	r3, #0
 8009168:	d010      	beq.n	800918c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69da      	ldr	r2, [r3, #28]
 800916e:	4b1d      	ldr	r3, [pc, #116]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009176:	429a      	cmp	r2, r3
 8009178:	d208      	bcs.n	800918c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800917a:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	4917      	ldr	r1, [pc, #92]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 8009188:	4313      	orrs	r3, r2
 800918a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800918c:	f000 f834 	bl	80091f8 <HAL_RCC_GetSysClockFreq>
 8009190:	4602      	mov	r2, r0
 8009192:	4b14      	ldr	r3, [pc, #80]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	0a1b      	lsrs	r3, r3, #8
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	4912      	ldr	r1, [pc, #72]	; (80091e8 <HAL_RCC_ClockConfig+0x35c>)
 800919e:	5ccb      	ldrb	r3, [r1, r3]
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	fa22 f303 	lsr.w	r3, r2, r3
 80091a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091aa:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <HAL_RCC_ClockConfig+0x358>)
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	4a0d      	ldr	r2, [pc, #52]	; (80091e8 <HAL_RCC_ClockConfig+0x35c>)
 80091b4:	5cd3      	ldrb	r3, [r2, r3]
 80091b6:	f003 031f 	and.w	r3, r3, #31
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	fa22 f303 	lsr.w	r3, r2, r3
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <HAL_RCC_ClockConfig+0x360>)
 80091c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091c4:	4a0a      	ldr	r2, [pc, #40]	; (80091f0 <HAL_RCC_ClockConfig+0x364>)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80091ca:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <HAL_RCC_ClockConfig+0x368>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7f9 fc86 	bl	8002ae0 <HAL_InitTick>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	58024400 	.word	0x58024400
 80091e8:	080155c4 	.word	0x080155c4
 80091ec:	2400008c 	.word	0x2400008c
 80091f0:	24000088 	.word	0x24000088
 80091f4:	24000090 	.word	0x24000090

080091f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b089      	sub	sp, #36	; 0x24
 80091fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091fe:	4bb3      	ldr	r3, [pc, #716]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009206:	2b18      	cmp	r3, #24
 8009208:	f200 8155 	bhi.w	80094b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <HAL_RCC_GetSysClockFreq+0x1c>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009279 	.word	0x08009279
 8009218:	080094b7 	.word	0x080094b7
 800921c:	080094b7 	.word	0x080094b7
 8009220:	080094b7 	.word	0x080094b7
 8009224:	080094b7 	.word	0x080094b7
 8009228:	080094b7 	.word	0x080094b7
 800922c:	080094b7 	.word	0x080094b7
 8009230:	080094b7 	.word	0x080094b7
 8009234:	0800929f 	.word	0x0800929f
 8009238:	080094b7 	.word	0x080094b7
 800923c:	080094b7 	.word	0x080094b7
 8009240:	080094b7 	.word	0x080094b7
 8009244:	080094b7 	.word	0x080094b7
 8009248:	080094b7 	.word	0x080094b7
 800924c:	080094b7 	.word	0x080094b7
 8009250:	080094b7 	.word	0x080094b7
 8009254:	080092a5 	.word	0x080092a5
 8009258:	080094b7 	.word	0x080094b7
 800925c:	080094b7 	.word	0x080094b7
 8009260:	080094b7 	.word	0x080094b7
 8009264:	080094b7 	.word	0x080094b7
 8009268:	080094b7 	.word	0x080094b7
 800926c:	080094b7 	.word	0x080094b7
 8009270:	080094b7 	.word	0x080094b7
 8009274:	080092ab 	.word	0x080092ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009278:	4b94      	ldr	r3, [pc, #592]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0320 	and.w	r3, r3, #32
 8009280:	2b00      	cmp	r3, #0
 8009282:	d009      	beq.n	8009298 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009284:	4b91      	ldr	r3, [pc, #580]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	08db      	lsrs	r3, r3, #3
 800928a:	f003 0303 	and.w	r3, r3, #3
 800928e:	4a90      	ldr	r2, [pc, #576]	; (80094d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009290:	fa22 f303 	lsr.w	r3, r2, r3
 8009294:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009296:	e111      	b.n	80094bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009298:	4b8d      	ldr	r3, [pc, #564]	; (80094d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800929a:	61bb      	str	r3, [r7, #24]
      break;
 800929c:	e10e      	b.n	80094bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800929e:	4b8d      	ldr	r3, [pc, #564]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092a0:	61bb      	str	r3, [r7, #24]
      break;
 80092a2:	e10b      	b.n	80094bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80092a4:	4b8c      	ldr	r3, [pc, #560]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80092a6:	61bb      	str	r3, [r7, #24]
      break;
 80092a8:	e108      	b.n	80094bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092aa:	4b88      	ldr	r3, [pc, #544]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	f003 0303 	and.w	r3, r3, #3
 80092b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80092b4:	4b85      	ldr	r3, [pc, #532]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	091b      	lsrs	r3, r3, #4
 80092ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80092c0:	4b82      	ldr	r3, [pc, #520]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092ca:	4b80      	ldr	r3, [pc, #512]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ce:	08db      	lsrs	r3, r3, #3
 80092d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	fb02 f303 	mul.w	r3, r2, r3
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80e1 	beq.w	80094b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	f000 8083 	beq.w	80093fc <HAL_RCC_GetSysClockFreq+0x204>
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	f200 80a1 	bhi.w	8009440 <HAL_RCC_GetSysClockFreq+0x248>
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0x114>
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d056      	beq.n	80093b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800930a:	e099      	b.n	8009440 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800930c:	4b6f      	ldr	r3, [pc, #444]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b00      	cmp	r3, #0
 8009316:	d02d      	beq.n	8009374 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009318:	4b6c      	ldr	r3, [pc, #432]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	08db      	lsrs	r3, r3, #3
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	4a6b      	ldr	r2, [pc, #428]	; (80094d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009324:	fa22 f303 	lsr.w	r3, r2, r3
 8009328:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	ee07 3a90 	vmov	s15, r3
 8009330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009342:	4b62      	ldr	r3, [pc, #392]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009352:	ed97 6a02 	vldr	s12, [r7, #8]
 8009356:	eddf 5a61 	vldr	s11, [pc, #388]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800935a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009372:	e087      	b.n	8009484 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80094e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009386:	4b51      	ldr	r3, [pc, #324]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009396:	ed97 6a02 	vldr	s12, [r7, #8]
 800939a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800939e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093b6:	e065      	b.n	8009484 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80094e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ca:	4b40      	ldr	r3, [pc, #256]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093da:	ed97 6a02 	vldr	s12, [r7, #8]
 80093de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80093e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093fa:	e043      	b.n	8009484 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eddf 6a38 	vldr	s13, [pc, #224]	; 80094e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	4b2f      	ldr	r3, [pc, #188]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009422:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800943e:	e021      	b.n	8009484 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80094e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a02 	vldr	s12, [r7, #8]
 8009466:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009482:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009484:	4b11      	ldr	r3, [pc, #68]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	0a5b      	lsrs	r3, r3, #9
 800948a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948e:	3301      	adds	r3, #1
 8009490:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	ee07 3a90 	vmov	s15, r3
 8009498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800949c:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a8:	ee17 3a90 	vmov	r3, s15
 80094ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80094ae:	e005      	b.n	80094bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	61bb      	str	r3, [r7, #24]
      break;
 80094b4:	e002      	b.n	80094bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80094b6:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094b8:	61bb      	str	r3, [r7, #24]
      break;
 80094ba:	bf00      	nop
  }

  return sysclockfreq;
 80094bc:	69bb      	ldr	r3, [r7, #24]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3724      	adds	r7, #36	; 0x24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	58024400 	.word	0x58024400
 80094d0:	03d09000 	.word	0x03d09000
 80094d4:	003d0900 	.word	0x003d0900
 80094d8:	017d7840 	.word	0x017d7840
 80094dc:	46000000 	.word	0x46000000
 80094e0:	4c742400 	.word	0x4c742400
 80094e4:	4a742400 	.word	0x4a742400
 80094e8:	4bbebc20 	.word	0x4bbebc20

080094ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80094f2:	f7ff fe81 	bl	80091f8 <HAL_RCC_GetSysClockFreq>
 80094f6:	4602      	mov	r2, r0
 80094f8:	4b10      	ldr	r3, [pc, #64]	; (800953c <HAL_RCC_GetHCLKFreq+0x50>)
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	0a1b      	lsrs	r3, r3, #8
 80094fe:	f003 030f 	and.w	r3, r3, #15
 8009502:	490f      	ldr	r1, [pc, #60]	; (8009540 <HAL_RCC_GetHCLKFreq+0x54>)
 8009504:	5ccb      	ldrb	r3, [r1, r3]
 8009506:	f003 031f 	and.w	r3, r3, #31
 800950a:	fa22 f303 	lsr.w	r3, r2, r3
 800950e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <HAL_RCC_GetHCLKFreq+0x50>)
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	f003 030f 	and.w	r3, r3, #15
 8009518:	4a09      	ldr	r2, [pc, #36]	; (8009540 <HAL_RCC_GetHCLKFreq+0x54>)
 800951a:	5cd3      	ldrb	r3, [r2, r3]
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	fa22 f303 	lsr.w	r3, r2, r3
 8009526:	4a07      	ldr	r2, [pc, #28]	; (8009544 <HAL_RCC_GetHCLKFreq+0x58>)
 8009528:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800952a:	4a07      	ldr	r2, [pc, #28]	; (8009548 <HAL_RCC_GetHCLKFreq+0x5c>)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <HAL_RCC_GetHCLKFreq+0x58>)
 8009532:	681b      	ldr	r3, [r3, #0]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	58024400 	.word	0x58024400
 8009540:	080155c4 	.word	0x080155c4
 8009544:	2400008c 	.word	0x2400008c
 8009548:	24000088 	.word	0x24000088

0800954c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009550:	f7ff ffcc 	bl	80094ec <HAL_RCC_GetHCLKFreq>
 8009554:	4602      	mov	r2, r0
 8009556:	4b06      	ldr	r3, [pc, #24]	; (8009570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	091b      	lsrs	r3, r3, #4
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	4904      	ldr	r1, [pc, #16]	; (8009574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009562:	5ccb      	ldrb	r3, [r1, r3]
 8009564:	f003 031f 	and.w	r3, r3, #31
 8009568:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800956c:	4618      	mov	r0, r3
 800956e:	bd80      	pop	{r7, pc}
 8009570:	58024400 	.word	0x58024400
 8009574:	080155c4 	.word	0x080155c4

08009578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800957c:	f7ff ffb6 	bl	80094ec <HAL_RCC_GetHCLKFreq>
 8009580:	4602      	mov	r2, r0
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	0a1b      	lsrs	r3, r3, #8
 8009588:	f003 0307 	and.w	r3, r3, #7
 800958c:	4904      	ldr	r1, [pc, #16]	; (80095a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800958e:	5ccb      	ldrb	r3, [r1, r3]
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009598:	4618      	mov	r0, r3
 800959a:	bd80      	pop	{r7, pc}
 800959c:	58024400 	.word	0x58024400
 80095a0:	080155c4 	.word	0x080155c4

080095a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	223f      	movs	r2, #63	; 0x3f
 80095b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80095b4:	4b1a      	ldr	r3, [pc, #104]	; (8009620 <HAL_RCC_GetClockConfig+0x7c>)
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	f003 0207 	and.w	r2, r3, #7
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80095c0:	4b17      	ldr	r3, [pc, #92]	; (8009620 <HAL_RCC_GetClockConfig+0x7c>)
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80095cc:	4b14      	ldr	r3, [pc, #80]	; (8009620 <HAL_RCC_GetClockConfig+0x7c>)
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	f003 020f 	and.w	r2, r3, #15
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80095d8:	4b11      	ldr	r3, [pc, #68]	; (8009620 <HAL_RCC_GetClockConfig+0x7c>)
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80095e4:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <HAL_RCC_GetClockConfig+0x7c>)
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80095f0:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <HAL_RCC_GetClockConfig+0x7c>)
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80095fc:	4b08      	ldr	r3, [pc, #32]	; (8009620 <HAL_RCC_GetClockConfig+0x7c>)
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <HAL_RCC_GetClockConfig+0x80>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 020f 	and.w	r2, r3, #15
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	601a      	str	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	58024400 	.word	0x58024400
 8009624:	52002000 	.word	0x52002000

08009628 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800962c:	b0ca      	sub	sp, #296	; 0x128
 800962e:	af00      	add	r7, sp, #0
 8009630:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009634:	2300      	movs	r3, #0
 8009636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800963a:	2300      	movs	r3, #0
 800963c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800964c:	2500      	movs	r5, #0
 800964e:	ea54 0305 	orrs.w	r3, r4, r5
 8009652:	d049      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800965a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800965e:	d02f      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009664:	d828      	bhi.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800966a:	d01a      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800966c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009670:	d822      	bhi.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800967a:	d007      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800967c:	e01c      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800967e:	4bb8      	ldr	r3, [pc, #736]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	4ab7      	ldr	r2, [pc, #732]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009688:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800968a:	e01a      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800968c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009690:	3308      	adds	r3, #8
 8009692:	2102      	movs	r1, #2
 8009694:	4618      	mov	r0, r3
 8009696:	f002 fb61 	bl	800bd5c <RCCEx_PLL2_Config>
 800969a:	4603      	mov	r3, r0
 800969c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096a0:	e00f      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a6:	3328      	adds	r3, #40	; 0x28
 80096a8:	2102      	movs	r1, #2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f002 fc08 	bl	800bec0 <RCCEx_PLL3_Config>
 80096b0:	4603      	mov	r3, r0
 80096b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096b6:	e004      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096be:	e000      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80096c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80096ca:	4ba5      	ldr	r3, [pc, #660]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d8:	4aa1      	ldr	r2, [pc, #644]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096da:	430b      	orrs	r3, r1
 80096dc:	6513      	str	r3, [r2, #80]	; 0x50
 80096de:	e003      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80096f4:	f04f 0900 	mov.w	r9, #0
 80096f8:	ea58 0309 	orrs.w	r3, r8, r9
 80096fc:	d047      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80096fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009704:	2b04      	cmp	r3, #4
 8009706:	d82a      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009708:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009725 	.word	0x08009725
 8009714:	08009733 	.word	0x08009733
 8009718:	08009749 	.word	0x08009749
 800971c:	08009767 	.word	0x08009767
 8009720:	08009767 	.word	0x08009767
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009724:	4b8e      	ldr	r3, [pc, #568]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	4a8d      	ldr	r2, [pc, #564]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800972a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800972e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009730:	e01a      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009736:	3308      	adds	r3, #8
 8009738:	2100      	movs	r1, #0
 800973a:	4618      	mov	r0, r3
 800973c:	f002 fb0e 	bl	800bd5c <RCCEx_PLL2_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009746:	e00f      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974c:	3328      	adds	r3, #40	; 0x28
 800974e:	2100      	movs	r1, #0
 8009750:	4618      	mov	r0, r3
 8009752:	f002 fbb5 	bl	800bec0 <RCCEx_PLL3_Config>
 8009756:	4603      	mov	r3, r0
 8009758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800975c:	e004      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009764:	e000      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009770:	4b7b      	ldr	r3, [pc, #492]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009774:	f023 0107 	bic.w	r1, r3, #7
 8009778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800977e:	4a78      	ldr	r2, [pc, #480]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009780:	430b      	orrs	r3, r1
 8009782:	6513      	str	r3, [r2, #80]	; 0x50
 8009784:	e003      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800978a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800979a:	f04f 0b00 	mov.w	fp, #0
 800979e:	ea5a 030b 	orrs.w	r3, sl, fp
 80097a2:	d04c      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80097a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ae:	d030      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80097b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097b4:	d829      	bhi.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097b6:	2bc0      	cmp	r3, #192	; 0xc0
 80097b8:	d02d      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80097ba:	2bc0      	cmp	r3, #192	; 0xc0
 80097bc:	d825      	bhi.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097be:	2b80      	cmp	r3, #128	; 0x80
 80097c0:	d018      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80097c2:	2b80      	cmp	r3, #128	; 0x80
 80097c4:	d821      	bhi.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80097ca:	2b40      	cmp	r3, #64	; 0x40
 80097cc:	d007      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80097ce:	e01c      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d0:	4b63      	ldr	r3, [pc, #396]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	4a62      	ldr	r2, [pc, #392]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80097dc:	e01c      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e2:	3308      	adds	r3, #8
 80097e4:	2100      	movs	r1, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f002 fab8 	bl	800bd5c <RCCEx_PLL2_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80097f2:	e011      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f8:	3328      	adds	r3, #40	; 0x28
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f002 fb5f 	bl	800bec0 <RCCEx_PLL3_Config>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009808:	e006      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009810:	e002      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009820:	4b4f      	ldr	r3, [pc, #316]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009824:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800982e:	4a4c      	ldr	r2, [pc, #304]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009830:	430b      	orrs	r3, r1
 8009832:	6513      	str	r3, [r2, #80]	; 0x50
 8009834:	e003      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800983a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800984a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800984e:	2300      	movs	r3, #0
 8009850:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009854:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009858:	460b      	mov	r3, r1
 800985a:	4313      	orrs	r3, r2
 800985c:	d053      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800985e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009862:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800986a:	d035      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800986c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009870:	d82e      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009872:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009876:	d031      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009878:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800987c:	d828      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800987e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009882:	d01a      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009888:	d822      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800988e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009892:	d007      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009894:	e01c      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009896:	4b32      	ldr	r3, [pc, #200]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989a:	4a31      	ldr	r2, [pc, #196]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800989c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098a2:	e01c      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a8:	3308      	adds	r3, #8
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f002 fa55 	bl	800bd5c <RCCEx_PLL2_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098b8:	e011      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098be:	3328      	adds	r3, #40	; 0x28
 80098c0:	2100      	movs	r1, #0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f002 fafc 	bl	800bec0 <RCCEx_PLL3_Config>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098ce:	e006      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098d6:	e002      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80098d8:	bf00      	nop
 80098da:	e000      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80098dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10b      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098e6:	4b1e      	ldr	r3, [pc, #120]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80098ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098f6:	4a1a      	ldr	r2, [pc, #104]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098f8:	430b      	orrs	r3, r1
 80098fa:	6593      	str	r3, [r2, #88]	; 0x58
 80098fc:	e003      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009902:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009912:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009916:	2300      	movs	r3, #0
 8009918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800991c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009920:	460b      	mov	r3, r1
 8009922:	4313      	orrs	r3, r2
 8009924:	d056      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800992e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009932:	d038      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009938:	d831      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800993a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800993e:	d034      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009940:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009944:	d82b      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800994a:	d01d      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800994c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009950:	d825      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800995a:	d00a      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800995c:	e01f      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800995e:	bf00      	nop
 8009960:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009964:	4ba2      	ldr	r3, [pc, #648]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	4aa1      	ldr	r2, [pc, #644]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800996a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800996e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009970:	e01c      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009976:	3308      	adds	r3, #8
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f002 f9ee 	bl	800bd5c <RCCEx_PLL2_Config>
 8009980:	4603      	mov	r3, r0
 8009982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009986:	e011      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998c:	3328      	adds	r3, #40	; 0x28
 800998e:	2100      	movs	r1, #0
 8009990:	4618      	mov	r0, r3
 8009992:	f002 fa95 	bl	800bec0 <RCCEx_PLL3_Config>
 8009996:	4603      	mov	r3, r0
 8009998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800999c:	e006      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099a4:	e002      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80099a6:	bf00      	nop
 80099a8:	e000      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80099aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10b      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80099b4:	4b8e      	ldr	r3, [pc, #568]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099c4:	4a8a      	ldr	r2, [pc, #552]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099c6:	430b      	orrs	r3, r1
 80099c8:	6593      	str	r3, [r2, #88]	; 0x58
 80099ca:	e003      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80099d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80099e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099e4:	2300      	movs	r3, #0
 80099e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80099ee:	460b      	mov	r3, r1
 80099f0:	4313      	orrs	r3, r2
 80099f2:	d03a      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fa:	2b30      	cmp	r3, #48	; 0x30
 80099fc:	d01f      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80099fe:	2b30      	cmp	r3, #48	; 0x30
 8009a00:	d819      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d00c      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d815      	bhi.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d019      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009a0e:	2b10      	cmp	r3, #16
 8009a10:	d111      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a12:	4b77      	ldr	r3, [pc, #476]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a16:	4a76      	ldr	r2, [pc, #472]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a1e:	e011      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a24:	3308      	adds	r3, #8
 8009a26:	2102      	movs	r1, #2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f002 f997 	bl	800bd5c <RCCEx_PLL2_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a34:	e006      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a3c:	e002      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009a3e:	bf00      	nop
 8009a40:	e000      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a4c:	4b68      	ldr	r3, [pc, #416]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a50:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5a:	4a65      	ldr	r2, [pc, #404]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a60:	e003      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009a76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4313      	orrs	r3, r2
 8009a88:	d051      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a94:	d035      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a9a:	d82e      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009aa0:	d031      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009aa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009aa6:	d828      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aac:	d01a      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ab2:	d822      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009abc:	d007      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009abe:	e01c      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac0:	4b4b      	ldr	r3, [pc, #300]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac4:	4a4a      	ldr	r2, [pc, #296]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009acc:	e01c      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f002 f940 	bl	800bd5c <RCCEx_PLL2_Config>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ae2:	e011      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ae8:	3328      	adds	r3, #40	; 0x28
 8009aea:	2100      	movs	r1, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f002 f9e7 	bl	800bec0 <RCCEx_PLL3_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009af8:	e006      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b00:	e002      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b02:	bf00      	nop
 8009b04:	e000      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b10:	4b37      	ldr	r3, [pc, #220]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b14:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b1e:	4a34      	ldr	r2, [pc, #208]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b20:	430b      	orrs	r3, r1
 8009b22:	6513      	str	r3, [r2, #80]	; 0x50
 8009b24:	e003      	b.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	d056      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b58:	d033      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b5e:	d82c      	bhi.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b64:	d02f      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009b66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b6a:	d826      	bhi.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b70:	d02b      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009b72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b76:	d820      	bhi.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b7c:	d012      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b82:	d81a      	bhi.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d022      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b8c:	d115      	bne.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b92:	3308      	adds	r3, #8
 8009b94:	2101      	movs	r1, #1
 8009b96:	4618      	mov	r0, r3
 8009b98:	f002 f8e0 	bl	800bd5c <RCCEx_PLL2_Config>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ba2:	e015      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba8:	3328      	adds	r3, #40	; 0x28
 8009baa:	2101      	movs	r1, #1
 8009bac:	4618      	mov	r0, r3
 8009bae:	f002 f987 	bl	800bec0 <RCCEx_PLL3_Config>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009bb8:	e00a      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bc0:	e006      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bc2:	bf00      	nop
 8009bc4:	e004      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bc6:	bf00      	nop
 8009bc8:	e002      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bca:	bf00      	nop
 8009bcc:	e000      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10d      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bdc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009be6:	4a02      	ldr	r2, [pc, #8]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009be8:	430b      	orrs	r3, r1
 8009bea:	6513      	str	r3, [r2, #80]	; 0x50
 8009bec:	e006      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009bee:	bf00      	nop
 8009bf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	d055      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c28:	d033      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c2e:	d82c      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c34:	d02f      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c3a:	d826      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c40:	d02b      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009c42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c46:	d820      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c4c:	d012      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c52:	d81a      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d022      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5c:	d115      	bne.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c62:	3308      	adds	r3, #8
 8009c64:	2101      	movs	r1, #1
 8009c66:	4618      	mov	r0, r3
 8009c68:	f002 f878 	bl	800bd5c <RCCEx_PLL2_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009c72:	e015      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c78:	3328      	adds	r3, #40	; 0x28
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f002 f91f 	bl	800bec0 <RCCEx_PLL3_Config>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009c88:	e00a      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c90:	e006      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c92:	bf00      	nop
 8009c94:	e004      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c96:	bf00      	nop
 8009c98:	e002      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c9a:	bf00      	nop
 8009c9c:	e000      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10b      	bne.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ca8:	4ba3      	ldr	r3, [pc, #652]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cb8:	4a9f      	ldr	r2, [pc, #636]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8009cbe:	e003      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	d037      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf2:	d00e      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf8:	d816      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d018      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d02:	d111      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d04:	4b8c      	ldr	r3, [pc, #560]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	4a8b      	ldr	r2, [pc, #556]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d10:	e00f      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d16:	3308      	adds	r3, #8
 8009d18:	2101      	movs	r1, #1
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f002 f81e 	bl	800bd5c <RCCEx_PLL2_Config>
 8009d20:	4603      	mov	r3, r0
 8009d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d26:	e004      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d2e:	e000      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d3a:	4b7f      	ldr	r3, [pc, #508]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d3e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d48:	4a7b      	ldr	r2, [pc, #492]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d4a:	430b      	orrs	r3, r1
 8009d4c:	6513      	str	r3, [r2, #80]	; 0x50
 8009d4e:	e003      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4313      	orrs	r3, r2
 8009d76:	d039      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d81c      	bhi.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009dc5 	.word	0x08009dc5
 8009d8c:	08009d99 	.word	0x08009d99
 8009d90:	08009da7 	.word	0x08009da7
 8009d94:	08009dc5 	.word	0x08009dc5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d98:	4b67      	ldr	r3, [pc, #412]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	4a66      	ldr	r2, [pc, #408]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009da4:	e00f      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009daa:	3308      	adds	r3, #8
 8009dac:	2102      	movs	r1, #2
 8009dae:	4618      	mov	r0, r3
 8009db0:	f001 ffd4 	bl	800bd5c <RCCEx_PLL2_Config>
 8009db4:	4603      	mov	r3, r0
 8009db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009dba:	e004      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dc2:	e000      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009dce:	4b5a      	ldr	r3, [pc, #360]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd2:	f023 0103 	bic.w	r1, r3, #3
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ddc:	4a56      	ldr	r2, [pc, #344]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dde:	430b      	orrs	r3, r1
 8009de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009de2:	e003      	b.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009de8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009e06:	460b      	mov	r3, r1
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	f000 809f 	beq.w	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e0e:	4b4b      	ldr	r3, [pc, #300]	; (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a4a      	ldr	r2, [pc, #296]	; (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e1a:	f7f9 f929 	bl	8003070 <HAL_GetTick>
 8009e1e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e22:	e00b      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e24:	f7f9 f924 	bl	8003070 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	2b64      	cmp	r3, #100	; 0x64
 8009e32:	d903      	bls.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e3a:	e005      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e3c:	4b3f      	ldr	r3, [pc, #252]	; (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0ed      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d179      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e50:	4b39      	ldr	r3, [pc, #228]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e5c:	4053      	eors	r3, r2
 8009e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d015      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e66:	4b34      	ldr	r3, [pc, #208]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e72:	4b31      	ldr	r3, [pc, #196]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e76:	4a30      	ldr	r2, [pc, #192]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e7c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e7e:	4b2e      	ldr	r3, [pc, #184]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e82:	4a2d      	ldr	r2, [pc, #180]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e88:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009e8a:	4a2b      	ldr	r2, [pc, #172]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9e:	d118      	bne.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ea0:	f7f9 f8e6 	bl	8003070 <HAL_GetTick>
 8009ea4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ea8:	e00d      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009eaa:	f7f9 f8e1 	bl	8003070 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009eb4:	1ad2      	subs	r2, r2, r3
 8009eb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d903      	bls.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009ec4:	e005      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ec6:	4b1c      	ldr	r3, [pc, #112]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0eb      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d129      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eea:	d10e      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009eec:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009efc:	091a      	lsrs	r2, r3, #4
 8009efe:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	4a0d      	ldr	r2, [pc, #52]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f04:	430b      	orrs	r3, r1
 8009f06:	6113      	str	r3, [r2, #16]
 8009f08:	e005      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009f0a:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	4a0a      	ldr	r2, [pc, #40]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f14:	6113      	str	r3, [r2, #16]
 8009f16:	4b08      	ldr	r3, [pc, #32]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f26:	4a04      	ldr	r2, [pc, #16]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8009f2c:	e00e      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009f36:	e009      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	58024800 	.word	0x58024800
 8009f40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	f002 0301 	and.w	r3, r2, #1
 8009f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	f000 8089 	beq.w	800a080 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f74:	2b28      	cmp	r3, #40	; 0x28
 8009f76:	d86b      	bhi.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009f78:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	0800a059 	.word	0x0800a059
 8009f84:	0800a051 	.word	0x0800a051
 8009f88:	0800a051 	.word	0x0800a051
 8009f8c:	0800a051 	.word	0x0800a051
 8009f90:	0800a051 	.word	0x0800a051
 8009f94:	0800a051 	.word	0x0800a051
 8009f98:	0800a051 	.word	0x0800a051
 8009f9c:	0800a051 	.word	0x0800a051
 8009fa0:	0800a025 	.word	0x0800a025
 8009fa4:	0800a051 	.word	0x0800a051
 8009fa8:	0800a051 	.word	0x0800a051
 8009fac:	0800a051 	.word	0x0800a051
 8009fb0:	0800a051 	.word	0x0800a051
 8009fb4:	0800a051 	.word	0x0800a051
 8009fb8:	0800a051 	.word	0x0800a051
 8009fbc:	0800a051 	.word	0x0800a051
 8009fc0:	0800a03b 	.word	0x0800a03b
 8009fc4:	0800a051 	.word	0x0800a051
 8009fc8:	0800a051 	.word	0x0800a051
 8009fcc:	0800a051 	.word	0x0800a051
 8009fd0:	0800a051 	.word	0x0800a051
 8009fd4:	0800a051 	.word	0x0800a051
 8009fd8:	0800a051 	.word	0x0800a051
 8009fdc:	0800a051 	.word	0x0800a051
 8009fe0:	0800a059 	.word	0x0800a059
 8009fe4:	0800a051 	.word	0x0800a051
 8009fe8:	0800a051 	.word	0x0800a051
 8009fec:	0800a051 	.word	0x0800a051
 8009ff0:	0800a051 	.word	0x0800a051
 8009ff4:	0800a051 	.word	0x0800a051
 8009ff8:	0800a051 	.word	0x0800a051
 8009ffc:	0800a051 	.word	0x0800a051
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a051 	.word	0x0800a051
 800a008:	0800a051 	.word	0x0800a051
 800a00c:	0800a051 	.word	0x0800a051
 800a010:	0800a051 	.word	0x0800a051
 800a014:	0800a051 	.word	0x0800a051
 800a018:	0800a051 	.word	0x0800a051
 800a01c:	0800a051 	.word	0x0800a051
 800a020:	0800a059 	.word	0x0800a059
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a028:	3308      	adds	r3, #8
 800a02a:	2101      	movs	r1, #1
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 fe95 	bl	800bd5c <RCCEx_PLL2_Config>
 800a032:	4603      	mov	r3, r0
 800a034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a038:	e00f      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03e:	3328      	adds	r3, #40	; 0x28
 800a040:	2101      	movs	r1, #1
 800a042:	4618      	mov	r0, r3
 800a044:	f001 ff3c 	bl	800bec0 <RCCEx_PLL3_Config>
 800a048:	4603      	mov	r3, r0
 800a04a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a04e:	e004      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a056:	e000      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a05a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10a      	bne.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a062:	4bbf      	ldr	r3, [pc, #764]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a066:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a070:	4abb      	ldr	r2, [pc, #748]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a072:	430b      	orrs	r3, r1
 800a074:	6553      	str	r3, [r2, #84]	; 0x54
 800a076:	e003      	b.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a07c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f002 0302 	and.w	r3, r2, #2
 800a08c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a090:	2300      	movs	r3, #0
 800a092:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a096:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a09a:	460b      	mov	r3, r1
 800a09c:	4313      	orrs	r3, r2
 800a09e:	d041      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	d824      	bhi.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a0aa:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b0:	0800a0fd 	.word	0x0800a0fd
 800a0b4:	0800a0c9 	.word	0x0800a0c9
 800a0b8:	0800a0df 	.word	0x0800a0df
 800a0bc:	0800a0fd 	.word	0x0800a0fd
 800a0c0:	0800a0fd 	.word	0x0800a0fd
 800a0c4:	0800a0fd 	.word	0x0800a0fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 fe43 	bl	800bd5c <RCCEx_PLL2_Config>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a0dc:	e00f      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e2:	3328      	adds	r3, #40	; 0x28
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 feea 	bl	800bec0 <RCCEx_PLL3_Config>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a0f2:	e004      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0fa:	e000      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a0fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a106:	4b96      	ldr	r3, [pc, #600]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a10a:	f023 0107 	bic.w	r1, r3, #7
 800a10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a114:	4a92      	ldr	r2, [pc, #584]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a116:	430b      	orrs	r3, r1
 800a118:	6553      	str	r3, [r2, #84]	; 0x54
 800a11a:	e003      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a11c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a120:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12c:	f002 0304 	and.w	r3, r2, #4
 800a130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a134:	2300      	movs	r3, #0
 800a136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a13a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a13e:	460b      	mov	r3, r1
 800a140:	4313      	orrs	r3, r2
 800a142:	d044      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a14c:	2b05      	cmp	r3, #5
 800a14e:	d825      	bhi.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a150:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a1a5 	.word	0x0800a1a5
 800a15c:	0800a171 	.word	0x0800a171
 800a160:	0800a187 	.word	0x0800a187
 800a164:	0800a1a5 	.word	0x0800a1a5
 800a168:	0800a1a5 	.word	0x0800a1a5
 800a16c:	0800a1a5 	.word	0x0800a1a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a174:	3308      	adds	r3, #8
 800a176:	2101      	movs	r1, #1
 800a178:	4618      	mov	r0, r3
 800a17a:	f001 fdef 	bl	800bd5c <RCCEx_PLL2_Config>
 800a17e:	4603      	mov	r3, r0
 800a180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a184:	e00f      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a18a:	3328      	adds	r3, #40	; 0x28
 800a18c:	2101      	movs	r1, #1
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 fe96 	bl	800bec0 <RCCEx_PLL3_Config>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a19a:	e004      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1a2:	e000      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a1a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10b      	bne.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a1ae:	4b6c      	ldr	r3, [pc, #432]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1b2:	f023 0107 	bic.w	r1, r3, #7
 800a1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1be:	4a68      	ldr	r2, [pc, #416]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1c0:	430b      	orrs	r3, r1
 800a1c2:	6593      	str	r3, [r2, #88]	; 0x58
 800a1c4:	e003      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	f002 0320 	and.w	r3, r2, #32
 800a1da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	d055      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1fa:	d033      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a1fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a200:	d82c      	bhi.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a206:	d02f      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a20c:	d826      	bhi.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a20e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a212:	d02b      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a218:	d820      	bhi.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a21a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a21e:	d012      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a224:	d81a      	bhi.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d022      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a22a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a22e:	d115      	bne.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a234:	3308      	adds	r3, #8
 800a236:	2100      	movs	r1, #0
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 fd8f 	bl	800bd5c <RCCEx_PLL2_Config>
 800a23e:	4603      	mov	r3, r0
 800a240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a244:	e015      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24a:	3328      	adds	r3, #40	; 0x28
 800a24c:	2102      	movs	r1, #2
 800a24e:	4618      	mov	r0, r3
 800a250:	f001 fe36 	bl	800bec0 <RCCEx_PLL3_Config>
 800a254:	4603      	mov	r3, r0
 800a256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a25a:	e00a      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a262:	e006      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a264:	bf00      	nop
 800a266:	e004      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a268:	bf00      	nop
 800a26a:	e002      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a26c:	bf00      	nop
 800a26e:	e000      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a27a:	4b39      	ldr	r3, [pc, #228]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a28a:	4a35      	ldr	r2, [pc, #212]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6553      	str	r3, [r2, #84]	; 0x54
 800a290:	e003      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a2a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a2b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	d058      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2c6:	d033      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a2c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2cc:	d82c      	bhi.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a2ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d2:	d02f      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a2d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d8:	d826      	bhi.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a2da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2de:	d02b      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a2e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2e4:	d820      	bhi.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a2e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2ea:	d012      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a2ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2f0:	d81a      	bhi.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d022      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a2f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2fa:	d115      	bne.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a300:	3308      	adds	r3, #8
 800a302:	2100      	movs	r1, #0
 800a304:	4618      	mov	r0, r3
 800a306:	f001 fd29 	bl	800bd5c <RCCEx_PLL2_Config>
 800a30a:	4603      	mov	r3, r0
 800a30c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a310:	e015      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a316:	3328      	adds	r3, #40	; 0x28
 800a318:	2102      	movs	r1, #2
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 fdd0 	bl	800bec0 <RCCEx_PLL3_Config>
 800a320:	4603      	mov	r3, r0
 800a322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a326:	e00a      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a32e:	e006      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a330:	bf00      	nop
 800a332:	e004      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a334:	bf00      	nop
 800a336:	e002      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a338:	bf00      	nop
 800a33a:	e000      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a33e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10e      	bne.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a346:	4b06      	ldr	r3, [pc, #24]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a34a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a356:	4a02      	ldr	r2, [pc, #8]	; (800a360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a358:	430b      	orrs	r3, r1
 800a35a:	6593      	str	r3, [r2, #88]	; 0x58
 800a35c:	e006      	b.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a35e:	bf00      	nop
 800a360:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a37c:	2300      	movs	r3, #0
 800a37e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a382:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a386:	460b      	mov	r3, r1
 800a388:	4313      	orrs	r3, r2
 800a38a:	d055      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a394:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a398:	d033      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a39a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a39e:	d82c      	bhi.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3a4:	d02f      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a3a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3aa:	d826      	bhi.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3b0:	d02b      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a3b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3b6:	d820      	bhi.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3bc:	d012      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a3be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c2:	d81a      	bhi.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d022      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a3c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3cc:	d115      	bne.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f001 fcc0 	bl	800bd5c <RCCEx_PLL2_Config>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a3e2:	e015      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e8:	3328      	adds	r3, #40	; 0x28
 800a3ea:	2102      	movs	r1, #2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 fd67 	bl	800bec0 <RCCEx_PLL3_Config>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a3f8:	e00a      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a400:	e006      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a402:	bf00      	nop
 800a404:	e004      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a406:	bf00      	nop
 800a408:	e002      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a40a:	bf00      	nop
 800a40c:	e000      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a40e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10b      	bne.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a418:	4ba1      	ldr	r3, [pc, #644]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a41a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a428:	4a9d      	ldr	r2, [pc, #628]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a42a:	430b      	orrs	r3, r1
 800a42c:	6593      	str	r3, [r2, #88]	; 0x58
 800a42e:	e003      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a434:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	f002 0308 	and.w	r3, r2, #8
 800a444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a448:	2300      	movs	r3, #0
 800a44a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a44e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a452:	460b      	mov	r3, r1
 800a454:	4313      	orrs	r3, r2
 800a456:	d01e      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a45c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a464:	d10c      	bne.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a46a:	3328      	adds	r3, #40	; 0x28
 800a46c:	2102      	movs	r1, #2
 800a46e:	4618      	mov	r0, r3
 800a470:	f001 fd26 	bl	800bec0 <RCCEx_PLL3_Config>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a480:	4b87      	ldr	r3, [pc, #540]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a484:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a490:	4a83      	ldr	r2, [pc, #524]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a492:	430b      	orrs	r3, r1
 800a494:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	f002 0310 	and.w	r3, r2, #16
 800a4a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a4ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	d01e      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c2:	d10c      	bne.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c8:	3328      	adds	r3, #40	; 0x28
 800a4ca:	2102      	movs	r1, #2
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f001 fcf7 	bl	800bec0 <RCCEx_PLL3_Config>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a4de:	4b70      	ldr	r3, [pc, #448]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4ee:	4a6c      	ldr	r2, [pc, #432]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a504:	2300      	movs	r3, #0
 800a506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a50a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a50e:	460b      	mov	r3, r1
 800a510:	4313      	orrs	r3, r2
 800a512:	d03e      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a518:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a51c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a520:	d022      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a526:	d81b      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a530:	d00b      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a532:	e015      	b.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a538:	3308      	adds	r3, #8
 800a53a:	2100      	movs	r1, #0
 800a53c:	4618      	mov	r0, r3
 800a53e:	f001 fc0d 	bl	800bd5c <RCCEx_PLL2_Config>
 800a542:	4603      	mov	r3, r0
 800a544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a548:	e00f      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54e:	3328      	adds	r3, #40	; 0x28
 800a550:	2102      	movs	r1, #2
 800a552:	4618      	mov	r0, r3
 800a554:	f001 fcb4 	bl	800bec0 <RCCEx_PLL3_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a55e:	e004      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a566:	e000      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a56a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10b      	bne.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a572:	4b4b      	ldr	r3, [pc, #300]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a576:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a57e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a582:	4a47      	ldr	r2, [pc, #284]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a584:	430b      	orrs	r3, r1
 800a586:	6593      	str	r3, [r2, #88]	; 0x58
 800a588:	e003      	b.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a58e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a59e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a5a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	d03b      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5ba:	d01f      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a5bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5c0:	d818      	bhi.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a5c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5c6:	d003      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a5c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5cc:	d007      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a5ce:	e011      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5d0:	4b33      	ldr	r3, [pc, #204]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	4a32      	ldr	r2, [pc, #200]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a5dc:	e00f      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e2:	3328      	adds	r3, #40	; 0x28
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f001 fc6a 	bl	800bec0 <RCCEx_PLL3_Config>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a5f2:	e004      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5fa:	e000      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a5fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10b      	bne.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a606:	4b26      	ldr	r3, [pc, #152]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a616:	4a22      	ldr	r2, [pc, #136]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a618:	430b      	orrs	r3, r1
 800a61a:	6553      	str	r3, [r2, #84]	; 0x54
 800a61c:	e003      	b.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a61e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a622:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a632:	673b      	str	r3, [r7, #112]	; 0x70
 800a634:	2300      	movs	r3, #0
 800a636:	677b      	str	r3, [r7, #116]	; 0x74
 800a638:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a63c:	460b      	mov	r3, r1
 800a63e:	4313      	orrs	r3, r2
 800a640:	d034      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a64c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a650:	d007      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a652:	e011      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a654:	4b12      	ldr	r3, [pc, #72]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	4a11      	ldr	r2, [pc, #68]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a65a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a65e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a660:	e00e      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a666:	3308      	adds	r3, #8
 800a668:	2102      	movs	r1, #2
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 fb76 	bl	800bd5c <RCCEx_PLL2_Config>
 800a670:	4603      	mov	r3, r0
 800a672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a676:	e003      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a67e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10d      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a688:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a68a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a696:	4a02      	ldr	r2, [pc, #8]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a698:	430b      	orrs	r3, r1
 800a69a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a69c:	e006      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a69e:	bf00      	nop
 800a6a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a6b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	d00c      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6cc:	3328      	adds	r3, #40	; 0x28
 800a6ce:	2102      	movs	r1, #2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f001 fbf5 	bl	800bec0 <RCCEx_PLL3_Config>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a6ee:	663b      	str	r3, [r7, #96]	; 0x60
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	667b      	str	r3, [r7, #100]	; 0x64
 800a6f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	d038      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a70a:	d018      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a70c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a710:	d811      	bhi.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a716:	d014      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a71c:	d80b      	bhi.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d011      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a726:	d106      	bne.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a728:	4bc3      	ldr	r3, [pc, #780]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	4ac2      	ldr	r2, [pc, #776]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a72e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a734:	e008      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a73c:	e004      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a73e:	bf00      	nop
 800a740:	e002      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a742:	bf00      	nop
 800a744:	e000      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a746:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10b      	bne.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a750:	4bb9      	ldr	r3, [pc, #740]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a754:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a760:	4ab5      	ldr	r2, [pc, #724]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a762:	430b      	orrs	r3, r1
 800a764:	6553      	str	r3, [r2, #84]	; 0x54
 800a766:	e003      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a76c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a77c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a77e:	2300      	movs	r3, #0
 800a780:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a782:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a786:	460b      	mov	r3, r1
 800a788:	4313      	orrs	r3, r2
 800a78a:	d009      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a78c:	4baa      	ldr	r3, [pc, #680]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a790:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a79a:	4aa7      	ldr	r2, [pc, #668]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a79c:	430b      	orrs	r3, r1
 800a79e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a7ac:	653b      	str	r3, [r7, #80]	; 0x50
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	657b      	str	r3, [r7, #84]	; 0x54
 800a7b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	d00a      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a7bc:	4b9e      	ldr	r3, [pc, #632]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a7cc:	4a9a      	ldr	r2, [pc, #616]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7ce:	430b      	orrs	r3, r1
 800a7d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a7de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	d009      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a7ee:	4b92      	ldr	r3, [pc, #584]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fc:	4a8e      	ldr	r2, [pc, #568]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7fe:	430b      	orrs	r3, r1
 800a800:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a80e:	643b      	str	r3, [r7, #64]	; 0x40
 800a810:	2300      	movs	r3, #0
 800a812:	647b      	str	r3, [r7, #68]	; 0x44
 800a814:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a818:	460b      	mov	r3, r1
 800a81a:	4313      	orrs	r3, r2
 800a81c:	d00e      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a81e:	4b86      	ldr	r3, [pc, #536]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	4a85      	ldr	r2, [pc, #532]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a828:	6113      	str	r3, [r2, #16]
 800a82a:	4b83      	ldr	r3, [pc, #524]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a82c:	6919      	ldr	r1, [r3, #16]
 800a82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a832:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a836:	4a80      	ldr	r2, [pc, #512]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a838:	430b      	orrs	r3, r1
 800a83a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a848:	63bb      	str	r3, [r7, #56]	; 0x38
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a84e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a852:	460b      	mov	r3, r1
 800a854:	4313      	orrs	r3, r2
 800a856:	d009      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a858:	4b77      	ldr	r3, [pc, #476]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a866:	4a74      	ldr	r2, [pc, #464]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a868:	430b      	orrs	r3, r1
 800a86a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a878:	633b      	str	r3, [r7, #48]	; 0x30
 800a87a:	2300      	movs	r3, #0
 800a87c:	637b      	str	r3, [r7, #52]	; 0x34
 800a87e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d00a      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a888:	4b6b      	ldr	r3, [pc, #428]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a88a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a898:	4a67      	ldr	r2, [pc, #412]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a89a:	430b      	orrs	r3, r1
 800a89c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	62b9      	str	r1, [r7, #40]	; 0x28
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	d011      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8be:	3308      	adds	r3, #8
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f001 fa4a 	bl	800bd5c <RCCEx_PLL2_Config>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d003      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	6239      	str	r1, [r7, #32]
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a8f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	d011      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8fe:	3308      	adds	r3, #8
 800a900:	2101      	movs	r1, #1
 800a902:	4618      	mov	r0, r3
 800a904:	f001 fa2a 	bl	800bd5c <RCCEx_PLL2_Config>
 800a908:	4603      	mov	r3, r0
 800a90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a90e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a91a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	2100      	movs	r1, #0
 800a928:	61b9      	str	r1, [r7, #24]
 800a92a:	f003 0304 	and.w	r3, r3, #4
 800a92e:	61fb      	str	r3, [r7, #28]
 800a930:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a934:	460b      	mov	r3, r1
 800a936:	4313      	orrs	r3, r2
 800a938:	d011      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a93e:	3308      	adds	r3, #8
 800a940:	2102      	movs	r1, #2
 800a942:	4618      	mov	r0, r3
 800a944:	f001 fa0a 	bl	800bd5c <RCCEx_PLL2_Config>
 800a948:	4603      	mov	r3, r0
 800a94a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a94e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a95a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	2100      	movs	r1, #0
 800a968:	6139      	str	r1, [r7, #16]
 800a96a:	f003 0308 	and.w	r3, r3, #8
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a974:	460b      	mov	r3, r1
 800a976:	4313      	orrs	r3, r2
 800a978:	d011      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97e:	3328      	adds	r3, #40	; 0x28
 800a980:	2100      	movs	r1, #0
 800a982:	4618      	mov	r0, r3
 800a984:	f001 fa9c 	bl	800bec0 <RCCEx_PLL3_Config>
 800a988:	4603      	mov	r3, r0
 800a98a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a98e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a99a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	f003 0310 	and.w	r3, r3, #16
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	d011      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9be:	3328      	adds	r3, #40	; 0x28
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f001 fa7c 	bl	800bec0 <RCCEx_PLL3_Config>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	6039      	str	r1, [r7, #0]
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	607b      	str	r3, [r7, #4]
 800a9f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	d011      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fe:	3328      	adds	r3, #40	; 0x28
 800aa00:	2102      	movs	r1, #2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 fa5c 	bl	800bec0 <RCCEx_PLL3_Config>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800aa1e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	e000      	b.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800aa32:	46bd      	mov	sp, r7
 800aa34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa38:	58024400 	.word	0x58024400

0800aa3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b090      	sub	sp, #64	; 0x40
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aa46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa4a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800aa4e:	430b      	orrs	r3, r1
 800aa50:	f040 8094 	bne.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800aa54:	4b9e      	ldr	r3, [pc, #632]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa58:	f003 0307 	and.w	r3, r3, #7
 800aa5c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	2b04      	cmp	r3, #4
 800aa62:	f200 8087 	bhi.w	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa81 	.word	0x0800aa81
 800aa70:	0800aaa9 	.word	0x0800aaa9
 800aa74:	0800aad1 	.word	0x0800aad1
 800aa78:	0800ab6d 	.word	0x0800ab6d
 800aa7c:	0800aaf9 	.word	0x0800aaf9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa80:	4b93      	ldr	r3, [pc, #588]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa8c:	d108      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa92:	4618      	mov	r0, r3
 800aa94:	f001 f810 	bl	800bab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa9c:	f000 bd45 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaa4:	f000 bd41 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaa8:	4b89      	ldr	r3, [pc, #548]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aab4:	d108      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aab6:	f107 0318 	add.w	r3, r7, #24
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 fd54 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac4:	f000 bd31 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aacc:	f000 bd2d 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aad0:	4b7f      	ldr	r3, [pc, #508]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aadc:	d108      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aade:	f107 030c 	add.w	r3, r7, #12
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fe94 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaec:	f000 bd1d 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf4:	f000 bd19 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aaf8:	4b75      	ldr	r3, [pc, #468]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aafa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aafc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab00:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab02:	4b73      	ldr	r3, [pc, #460]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 0304 	and.w	r3, r3, #4
 800ab0a:	2b04      	cmp	r3, #4
 800ab0c:	d10c      	bne.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ab0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d109      	bne.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab14:	4b6e      	ldr	r3, [pc, #440]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	08db      	lsrs	r3, r3, #3
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	4a6d      	ldr	r2, [pc, #436]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ab20:	fa22 f303 	lsr.w	r3, r2, r3
 800ab24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab26:	e01f      	b.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab28:	4b69      	ldr	r3, [pc, #420]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab34:	d106      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab3c:	d102      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab3e:	4b66      	ldr	r3, [pc, #408]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ab40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab42:	e011      	b.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab44:	4b62      	ldr	r3, [pc, #392]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab50:	d106      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab58:	d102      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab5a:	4b60      	ldr	r3, [pc, #384]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ab5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab5e:	e003      	b.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab64:	f000 bce1 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab68:	f000 bcdf 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab6c:	4b5c      	ldr	r3, [pc, #368]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab70:	f000 bcdb 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab78:	f000 bcd7 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ab7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab80:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ab84:	430b      	orrs	r3, r1
 800ab86:	f040 80ad 	bne.w	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ab8a:	4b51      	ldr	r3, [pc, #324]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab8e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ab92:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab9a:	d056      	beq.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aba2:	f200 8090 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	2bc0      	cmp	r3, #192	; 0xc0
 800abaa:	f000 8088 	beq.w	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	2bc0      	cmp	r3, #192	; 0xc0
 800abb2:	f200 8088 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	2b80      	cmp	r3, #128	; 0x80
 800abba:	d032      	beq.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	2b80      	cmp	r3, #128	; 0x80
 800abc0:	f200 8081 	bhi.w	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	2b40      	cmp	r3, #64	; 0x40
 800abce:	d014      	beq.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800abd0:	e079      	b.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abd2:	4b3f      	ldr	r3, [pc, #252]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abde:	d108      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 ff67 	bl	800bab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abee:	f000 bc9c 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf6:	f000 bc98 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abfa:	4b35      	ldr	r3, [pc, #212]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac06:	d108      	bne.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac08:	f107 0318 	add.w	r3, r7, #24
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 fcab 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac16:	f000 bc88 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac1e:	f000 bc84 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac22:	4b2b      	ldr	r3, [pc, #172]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac2e:	d108      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac30:	f107 030c 	add.w	r3, r7, #12
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 fdeb 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac3e:	f000 bc74 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac46:	f000 bc70 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac4a:	4b21      	ldr	r3, [pc, #132]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac54:	4b1e      	ldr	r3, [pc, #120]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d10c      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ac60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d109      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac66:	4b1a      	ldr	r3, [pc, #104]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	08db      	lsrs	r3, r3, #3
 800ac6c:	f003 0303 	and.w	r3, r3, #3
 800ac70:	4a18      	ldr	r2, [pc, #96]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac72:	fa22 f303 	lsr.w	r3, r2, r3
 800ac76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac78:	e01f      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac7a:	4b15      	ldr	r3, [pc, #84]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac86:	d106      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ac88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac8e:	d102      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac94:	e011      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac96:	4b0e      	ldr	r3, [pc, #56]	; (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aca2:	d106      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800aca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acaa:	d102      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acb0:	e003      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800acb6:	f000 bc38 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acba:	f000 bc36 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800acbe:	4b08      	ldr	r3, [pc, #32]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc2:	f000 bc32 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acca:	f000 bc2e 	b.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acce:	bf00      	nop
 800acd0:	58024400 	.word	0x58024400
 800acd4:	03d09000 	.word	0x03d09000
 800acd8:	003d0900 	.word	0x003d0900
 800acdc:	017d7840 	.word	0x017d7840
 800ace0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ace4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ace8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800acec:	430b      	orrs	r3, r1
 800acee:	f040 809c 	bne.w	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800acf2:	4b9e      	ldr	r3, [pc, #632]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acf6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800acfa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad02:	d054      	beq.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad0a:	f200 808b 	bhi.w	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad14:	f000 8083 	beq.w	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad1e:	f200 8081 	bhi.w	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad28:	d02f      	beq.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad30:	d878      	bhi.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d004      	beq.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad3e:	d012      	beq.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ad40:	e070      	b.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad42:	4b8a      	ldr	r3, [pc, #552]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad4e:	d107      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 feaf 	bl	800bab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad5e:	e3e4      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad64:	e3e1      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad66:	4b81      	ldr	r3, [pc, #516]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad72:	d107      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad74:	f107 0318 	add.w	r3, r7, #24
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fbf5 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad82:	e3d2      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad88:	e3cf      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad8a:	4b78      	ldr	r3, [pc, #480]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad96:	d107      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad98:	f107 030c 	add.w	r3, r7, #12
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fd37 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ada6:	e3c0      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adac:	e3bd      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adae:	4b6f      	ldr	r3, [pc, #444]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800adb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adb8:	4b6c      	ldr	r3, [pc, #432]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b04      	cmp	r3, #4
 800adc2:	d10c      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800adc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adca:	4b68      	ldr	r3, [pc, #416]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	08db      	lsrs	r3, r3, #3
 800add0:	f003 0303 	and.w	r3, r3, #3
 800add4:	4a66      	ldr	r2, [pc, #408]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800add6:	fa22 f303 	lsr.w	r3, r2, r3
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800addc:	e01e      	b.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adde:	4b63      	ldr	r3, [pc, #396]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adea:	d106      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800adec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adf2:	d102      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adf4:	4b5f      	ldr	r3, [pc, #380]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800adf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adf8:	e010      	b.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adfa:	4b5c      	ldr	r3, [pc, #368]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae06:	d106      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ae08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae0e:	d102      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae10:	4b59      	ldr	r3, [pc, #356]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae14:	e002      	b.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae1a:	e386      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae1c:	e385      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae1e:	4b57      	ldr	r3, [pc, #348]	; (800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae22:	e382      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae28:	e37f      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ae2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae2e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ae32:	430b      	orrs	r3, r1
 800ae34:	f040 80a7 	bne.w	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ae38:	4b4c      	ldr	r3, [pc, #304]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae3c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ae40:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae48:	d055      	beq.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae50:	f200 8096 	bhi.w	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae5a:	f000 8084 	beq.w	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae64:	f200 808c 	bhi.w	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae6e:	d030      	beq.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae76:	f200 8083 	bhi.w	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d004      	beq.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ae80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae86:	d012      	beq.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ae88:	e07a      	b.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae8a:	4b38      	ldr	r3, [pc, #224]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae96:	d107      	bne.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fe0b 	bl	800bab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea6:	e340      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeac:	e33d      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeae:	4b2f      	ldr	r3, [pc, #188]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aeb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aeba:	d107      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aebc:	f107 0318 	add.w	r3, r7, #24
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 fb51 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeca:	e32e      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed0:	e32b      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aed2:	4b26      	ldr	r3, [pc, #152]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aeda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aede:	d107      	bne.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aee0:	f107 030c 	add.w	r3, r7, #12
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 fc93 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeee:	e31c      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aef4:	e319      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aef6:	4b1d      	ldr	r3, [pc, #116]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aefe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af00:	4b1a      	ldr	r3, [pc, #104]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b04      	cmp	r3, #4
 800af0a:	d10c      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800af0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d109      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af12:	4b16      	ldr	r3, [pc, #88]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	08db      	lsrs	r3, r3, #3
 800af18:	f003 0303 	and.w	r3, r3, #3
 800af1c:	4a14      	ldr	r2, [pc, #80]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800af1e:	fa22 f303 	lsr.w	r3, r2, r3
 800af22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af24:	e01e      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af26:	4b11      	ldr	r3, [pc, #68]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af32:	d106      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800af34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af3a:	d102      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af3c:	4b0d      	ldr	r3, [pc, #52]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af40:	e010      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af42:	4b0a      	ldr	r3, [pc, #40]	; (800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af4e:	d106      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800af50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af56:	d102      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af58:	4b07      	ldr	r3, [pc, #28]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800af5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af5c:	e002      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af62:	e2e2      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af64:	e2e1      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af66:	4b05      	ldr	r3, [pc, #20]	; (800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af6a:	e2de      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af6c:	58024400 	.word	0x58024400
 800af70:	03d09000 	.word	0x03d09000
 800af74:	003d0900 	.word	0x003d0900
 800af78:	017d7840 	.word	0x017d7840
 800af7c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af84:	e2d1      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800af86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af8a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800af8e:	430b      	orrs	r3, r1
 800af90:	f040 809c 	bne.w	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800af94:	4b93      	ldr	r3, [pc, #588]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800af9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afa4:	d054      	beq.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800afa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afac:	f200 808b 	bhi.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afb6:	f000 8083 	beq.w	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afc0:	f200 8081 	bhi.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afca:	d02f      	beq.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afd2:	d878      	bhi.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afe0:	d012      	beq.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800afe2:	e070      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afe4:	4b7f      	ldr	r3, [pc, #508]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aff0:	d107      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fd5e 	bl	800bab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b000:	e293      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b006:	e290      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b008:	4b76      	ldr	r3, [pc, #472]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b014:	d107      	bne.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b016:	f107 0318 	add.w	r3, r7, #24
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 faa4 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b024:	e281      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b02a:	e27e      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b02c:	4b6d      	ldr	r3, [pc, #436]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b038:	d107      	bne.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b03a:	f107 030c 	add.w	r3, r7, #12
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fbe6 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b048:	e26f      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b04e:	e26c      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b050:	4b64      	ldr	r3, [pc, #400]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b058:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b05a:	4b62      	ldr	r3, [pc, #392]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0304 	and.w	r3, r3, #4
 800b062:	2b04      	cmp	r3, #4
 800b064:	d10c      	bne.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d109      	bne.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b06c:	4b5d      	ldr	r3, [pc, #372]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	08db      	lsrs	r3, r3, #3
 800b072:	f003 0303 	and.w	r3, r3, #3
 800b076:	4a5c      	ldr	r2, [pc, #368]	; (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b078:	fa22 f303 	lsr.w	r3, r2, r3
 800b07c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b07e:	e01e      	b.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b080:	4b58      	ldr	r3, [pc, #352]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b08c:	d106      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b094:	d102      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b096:	4b55      	ldr	r3, [pc, #340]	; (800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b09a:	e010      	b.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b09c:	4b51      	ldr	r3, [pc, #324]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0a8:	d106      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0b0:	d102      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0b2:	4b4f      	ldr	r3, [pc, #316]	; (800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0b6:	e002      	b.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0bc:	e235      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0be:	e234      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0c0:	4b4c      	ldr	r3, [pc, #304]	; (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c4:	e231      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0ca:	e22e      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b0cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b0d4:	430b      	orrs	r3, r1
 800b0d6:	f040 808f 	bne.w	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b0da:	4b42      	ldr	r3, [pc, #264]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0de:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b0e2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0ea:	d06b      	beq.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0f2:	d874      	bhi.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0fa:	d056      	beq.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b102:	d86c      	bhi.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b10a:	d03b      	beq.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b112:	d864      	bhi.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b11a:	d021      	beq.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b122:	d85c      	bhi.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	2b00      	cmp	r3, #0
 800b128:	d004      	beq.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b130:	d004      	beq.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b132:	e054      	b.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b134:	f7fe fa0a 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800b138:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b13a:	e1f6      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b13c:	4b29      	ldr	r3, [pc, #164]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b148:	d107      	bne.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b14a:	f107 0318 	add.w	r3, r7, #24
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 fa0a 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b158:	e1e7      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b15e:	e1e4      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b160:	4b20      	ldr	r3, [pc, #128]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b16c:	d107      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b16e:	f107 030c 	add.w	r3, r7, #12
 800b172:	4618      	mov	r0, r3
 800b174:	f000 fb4c 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b17c:	e1d5      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b182:	e1d2      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b184:	4b17      	ldr	r3, [pc, #92]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b04      	cmp	r3, #4
 800b18e:	d109      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b190:	4b14      	ldr	r3, [pc, #80]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	08db      	lsrs	r3, r3, #3
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	4a13      	ldr	r2, [pc, #76]	; (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a2:	e1c2      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1a8:	e1bf      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b1aa:	4b0e      	ldr	r3, [pc, #56]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1b6:	d102      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b1b8:	4b0c      	ldr	r3, [pc, #48]	; (800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1bc:	e1b5      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c2:	e1b2      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1c4:	4b07      	ldr	r3, [pc, #28]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1d0:	d102      	bne.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b1d2:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d6:	e1a8      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1dc:	e1a5      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1e2:	e1a2      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1e4:	58024400 	.word	0x58024400
 800b1e8:	03d09000 	.word	0x03d09000
 800b1ec:	003d0900 	.word	0x003d0900
 800b1f0:	017d7840 	.word	0x017d7840
 800b1f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1fc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b200:	430b      	orrs	r3, r1
 800b202:	d173      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b204:	4b9c      	ldr	r3, [pc, #624]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b20c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b214:	d02f      	beq.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b21c:	d863      	bhi.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	2b00      	cmp	r3, #0
 800b222:	d004      	beq.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b22a:	d012      	beq.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b22c:	e05b      	b.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b22e:	4b92      	ldr	r3, [pc, #584]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b23a:	d107      	bne.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b23c:	f107 0318 	add.w	r3, r7, #24
 800b240:	4618      	mov	r0, r3
 800b242:	f000 f991 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b24a:	e16e      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b250:	e16b      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b252:	4b89      	ldr	r3, [pc, #548]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b25a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b25e:	d107      	bne.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b260:	f107 030c 	add.w	r3, r7, #12
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fad3 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b26e:	e15c      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b270:	2300      	movs	r3, #0
 800b272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b274:	e159      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b276:	4b80      	ldr	r3, [pc, #512]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b27a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b27e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b280:	4b7d      	ldr	r3, [pc, #500]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b04      	cmp	r3, #4
 800b28a:	d10c      	bne.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d109      	bne.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b292:	4b79      	ldr	r3, [pc, #484]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	08db      	lsrs	r3, r3, #3
 800b298:	f003 0303 	and.w	r3, r3, #3
 800b29c:	4a77      	ldr	r2, [pc, #476]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b29e:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2a4:	e01e      	b.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2a6:	4b74      	ldr	r3, [pc, #464]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2b2:	d106      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ba:	d102      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2bc:	4b70      	ldr	r3, [pc, #448]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2c0:	e010      	b.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2c2:	4b6d      	ldr	r3, [pc, #436]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2ce:	d106      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2d6:	d102      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2d8:	4b6a      	ldr	r3, [pc, #424]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2dc:	e002      	b.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2e2:	e122      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2e4:	e121      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ea:	e11e      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	d133      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b2f8:	4b5f      	ldr	r3, [pc, #380]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b300:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	2b00      	cmp	r3, #0
 800b306:	d004      	beq.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b30e:	d012      	beq.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b310:	e023      	b.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b312:	4b59      	ldr	r3, [pc, #356]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b31a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b31e:	d107      	bne.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b324:	4618      	mov	r0, r3
 800b326:	f000 fbc7 	bl	800bab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b32e:	e0fc      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b334:	e0f9      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b336:	4b50      	ldr	r3, [pc, #320]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b33e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b342:	d107      	bne.n	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b344:	f107 0318 	add.w	r3, r7, #24
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 f90d 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b352:	e0ea      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b358:	e0e7      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b35e:	e0e4      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b360:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b364:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b368:	430b      	orrs	r3, r1
 800b36a:	f040 808d 	bne.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b36e:	4b42      	ldr	r3, [pc, #264]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b372:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b376:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b37e:	d06b      	beq.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b386:	d874      	bhi.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b38e:	d056      	beq.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b396:	d86c      	bhi.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b39e:	d03b      	beq.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3a6:	d864      	bhi.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ae:	d021      	beq.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b6:	d85c      	bhi.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d004      	beq.n	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3c4:	d004      	beq.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b3c6:	e054      	b.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b3c8:	f000 f8b8 	bl	800b53c <HAL_RCCEx_GetD3PCLK1Freq>
 800b3cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3ce:	e0ac      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3d0:	4b29      	ldr	r3, [pc, #164]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3dc:	d107      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3de:	f107 0318 	add.w	r3, r7, #24
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 f8c0 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ec:	e09d      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3f2:	e09a      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3f4:	4b20      	ldr	r3, [pc, #128]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b400:	d107      	bne.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b402:	f107 030c 	add.w	r3, r7, #12
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fa02 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b410:	e08b      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b416:	e088      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b418:	4b17      	ldr	r3, [pc, #92]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 0304 	and.w	r3, r3, #4
 800b420:	2b04      	cmp	r3, #4
 800b422:	d109      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b424:	4b14      	ldr	r3, [pc, #80]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	08db      	lsrs	r3, r3, #3
 800b42a:	f003 0303 	and.w	r3, r3, #3
 800b42e:	4a13      	ldr	r2, [pc, #76]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b430:	fa22 f303 	lsr.w	r3, r2, r3
 800b434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b436:	e078      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b43c:	e075      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b43e:	4b0e      	ldr	r3, [pc, #56]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b44a:	d102      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b44c:	4b0c      	ldr	r3, [pc, #48]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b450:	e06b      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b456:	e068      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b458:	4b07      	ldr	r3, [pc, #28]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b464:	d102      	bne.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b466:	4b07      	ldr	r3, [pc, #28]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b46a:	e05e      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b470:	e05b      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b476:	e058      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b478:	58024400 	.word	0x58024400
 800b47c:	03d09000 	.word	0x03d09000
 800b480:	003d0900 	.word	0x003d0900
 800b484:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b490:	430b      	orrs	r3, r1
 800b492:	d148      	bne.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b494:	4b27      	ldr	r3, [pc, #156]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b49c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4a4:	d02a      	beq.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ac:	d838      	bhi.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d004      	beq.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4ba:	d00d      	beq.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b4bc:	e030      	b.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b4be:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ca:	d102      	bne.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b4cc:	4b1a      	ldr	r3, [pc, #104]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4d0:	e02b      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d6:	e028      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4d8:	4b16      	ldr	r3, [pc, #88]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4e4:	d107      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f000 fae4 	bl	800bab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4f4:	e019      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4fa:	e016      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4fc:	4b0d      	ldr	r3, [pc, #52]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b508:	d107      	bne.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b50a:	f107 0318 	add.w	r3, r7, #24
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f82a 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b518:	e007      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b51e:	e004      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b524:	e001      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b526:	2300      	movs	r3, #0
 800b528:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3740      	adds	r7, #64	; 0x40
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	58024400 	.word	0x58024400
 800b538:	017d7840 	.word	0x017d7840

0800b53c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b540:	f7fd ffd4 	bl	80094ec <HAL_RCC_GetHCLKFreq>
 800b544:	4602      	mov	r2, r0
 800b546:	4b06      	ldr	r3, [pc, #24]	; (800b560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	091b      	lsrs	r3, r3, #4
 800b54c:	f003 0307 	and.w	r3, r3, #7
 800b550:	4904      	ldr	r1, [pc, #16]	; (800b564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b552:	5ccb      	ldrb	r3, [r1, r3]
 800b554:	f003 031f 	and.w	r3, r3, #31
 800b558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	58024400 	.word	0x58024400
 800b564:	080155c4 	.word	0x080155c4

0800b568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b568:	b480      	push	{r7}
 800b56a:	b089      	sub	sp, #36	; 0x24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b570:	4ba1      	ldr	r3, [pc, #644]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b574:	f003 0303 	and.w	r3, r3, #3
 800b578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b57a:	4b9f      	ldr	r3, [pc, #636]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57e:	0b1b      	lsrs	r3, r3, #12
 800b580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b586:	4b9c      	ldr	r3, [pc, #624]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58a:	091b      	lsrs	r3, r3, #4
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b592:	4b99      	ldr	r3, [pc, #612]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b596:	08db      	lsrs	r3, r3, #3
 800b598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	fb02 f303 	mul.w	r3, r2, r3
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 8111 	beq.w	800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	f000 8083 	beq.w	800b6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	f200 80a1 	bhi.w	800b708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d056      	beq.n	800b680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b5d2:	e099      	b.n	800b708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5d4:	4b88      	ldr	r3, [pc, #544]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d02d      	beq.n	800b63c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5e0:	4b85      	ldr	r3, [pc, #532]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	08db      	lsrs	r3, r3, #3
 800b5e6:	f003 0303 	and.w	r3, r3, #3
 800b5ea:	4a84      	ldr	r2, [pc, #528]	; (800b7fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b5ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	ee07 3a90 	vmov	s15, r3
 800b5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b60a:	4b7b      	ldr	r3, [pc, #492]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b612:	ee07 3a90 	vmov	s15, r3
 800b616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b62a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b63a:	e087      	b.n	800b74c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b64e:	4b6a      	ldr	r3, [pc, #424]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b656:	ee07 3a90 	vmov	s15, r3
 800b65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b662:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b66e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b67a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b67e:	e065      	b.n	800b74c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b692:	4b59      	ldr	r3, [pc, #356]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b69a:	ee07 3a90 	vmov	s15, r3
 800b69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6c2:	e043      	b.n	800b74c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b80c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b6d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6d6:	4b48      	ldr	r3, [pc, #288]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b706:	e021      	b.n	800b74c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b71a:	4b37      	ldr	r3, [pc, #220]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b722:	ee07 3a90 	vmov	s15, r3
 800b726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b72a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b72e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b73a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b73e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b742:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b74a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b74c:	4b2a      	ldr	r3, [pc, #168]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b750:	0a5b      	lsrs	r3, r3, #9
 800b752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b762:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b766:	edd7 6a07 	vldr	s13, [r7, #28]
 800b76a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b76e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b772:	ee17 2a90 	vmov	r2, s15
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b77a:	4b1f      	ldr	r3, [pc, #124]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77e:	0c1b      	lsrs	r3, r3, #16
 800b780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b784:	ee07 3a90 	vmov	s15, r3
 800b788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b790:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b794:	edd7 6a07 	vldr	s13, [r7, #28]
 800b798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b79c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7a0:	ee17 2a90 	vmov	r2, s15
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b7a8:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ac:	0e1b      	lsrs	r3, r3, #24
 800b7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b2:	ee07 3a90 	vmov	s15, r3
 800b7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ce:	ee17 2a90 	vmov	r2, s15
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b7d6:	e008      	b.n	800b7ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	609a      	str	r2, [r3, #8]
}
 800b7ea:	bf00      	nop
 800b7ec:	3724      	adds	r7, #36	; 0x24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	58024400 	.word	0x58024400
 800b7fc:	03d09000 	.word	0x03d09000
 800b800:	46000000 	.word	0x46000000
 800b804:	4c742400 	.word	0x4c742400
 800b808:	4a742400 	.word	0x4a742400
 800b80c:	4bbebc20 	.word	0x4bbebc20

0800b810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b810:	b480      	push	{r7}
 800b812:	b089      	sub	sp, #36	; 0x24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b818:	4ba1      	ldr	r3, [pc, #644]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81c:	f003 0303 	and.w	r3, r3, #3
 800b820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b822:	4b9f      	ldr	r3, [pc, #636]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b826:	0d1b      	lsrs	r3, r3, #20
 800b828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b82c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b82e:	4b9c      	ldr	r3, [pc, #624]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b832:	0a1b      	lsrs	r3, r3, #8
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b83a:	4b99      	ldr	r3, [pc, #612]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b83e:	08db      	lsrs	r3, r3, #3
 800b840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	fb02 f303 	mul.w	r3, r2, r3
 800b84a:	ee07 3a90 	vmov	s15, r3
 800b84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 8111 	beq.w	800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	2b02      	cmp	r3, #2
 800b862:	f000 8083 	beq.w	800b96c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	f200 80a1 	bhi.w	800b9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d003      	beq.n	800b87c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d056      	beq.n	800b928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b87a:	e099      	b.n	800b9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b87c:	4b88      	ldr	r3, [pc, #544]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b00      	cmp	r3, #0
 800b886:	d02d      	beq.n	800b8e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b888:	4b85      	ldr	r3, [pc, #532]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	08db      	lsrs	r3, r3, #3
 800b88e:	f003 0303 	and.w	r3, r3, #3
 800b892:	4a84      	ldr	r2, [pc, #528]	; (800baa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b894:	fa22 f303 	lsr.w	r3, r2, r3
 800b898:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	ee07 3a90 	vmov	s15, r3
 800b8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8b2:	4b7b      	ldr	r3, [pc, #492]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ba:	ee07 3a90 	vmov	s15, r3
 800b8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8e2:	e087      	b.n	800b9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800baac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8f6:	4b6a      	ldr	r3, [pc, #424]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8fe:	ee07 3a90 	vmov	s15, r3
 800b902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b906:	ed97 6a03 	vldr	s12, [r7, #12]
 800b90a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b926:	e065      	b.n	800b9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b932:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b93a:	4b59      	ldr	r3, [pc, #356]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b942:	ee07 3a90 	vmov	s15, r3
 800b946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b94e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b96a:	e043      	b.n	800b9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b976:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b97e:	4b48      	ldr	r3, [pc, #288]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b986:	ee07 3a90 	vmov	s15, r3
 800b98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b992:	eddf 5a45 	vldr	s11, [pc, #276]	; 800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b99e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9ae:	e021      	b.n	800b9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9c2:	4b37      	ldr	r3, [pc, #220]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ca:	ee07 3a90 	vmov	s15, r3
 800b9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b9f4:	4b2a      	ldr	r3, [pc, #168]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f8:	0a5b      	lsrs	r3, r3, #9
 800b9fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba1a:	ee17 2a90 	vmov	r2, s15
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ba22:	4b1f      	ldr	r3, [pc, #124]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba26:	0c1b      	lsrs	r3, r3, #16
 800ba28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba2c:	ee07 3a90 	vmov	s15, r3
 800ba30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba48:	ee17 2a90 	vmov	r2, s15
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ba50:	4b13      	ldr	r3, [pc, #76]	; (800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba54:	0e1b      	lsrs	r3, r3, #24
 800ba56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba76:	ee17 2a90 	vmov	r2, s15
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ba7e:	e008      	b.n	800ba92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	609a      	str	r2, [r3, #8]
}
 800ba92:	bf00      	nop
 800ba94:	3724      	adds	r7, #36	; 0x24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	58024400 	.word	0x58024400
 800baa4:	03d09000 	.word	0x03d09000
 800baa8:	46000000 	.word	0x46000000
 800baac:	4c742400 	.word	0x4c742400
 800bab0:	4a742400 	.word	0x4a742400
 800bab4:	4bbebc20 	.word	0x4bbebc20

0800bab8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bab8:	b480      	push	{r7}
 800baba:	b089      	sub	sp, #36	; 0x24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bac0:	4ba0      	ldr	r3, [pc, #640]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac4:	f003 0303 	and.w	r3, r3, #3
 800bac8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800baca:	4b9e      	ldr	r3, [pc, #632]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bace:	091b      	lsrs	r3, r3, #4
 800bad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bad4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bad6:	4b9b      	ldr	r3, [pc, #620]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bae0:	4b98      	ldr	r3, [pc, #608]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae4:	08db      	lsrs	r3, r3, #3
 800bae6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	fb02 f303 	mul.w	r3, r2, r3
 800baf0:	ee07 3a90 	vmov	s15, r3
 800baf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 8111 	beq.w	800bd26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	f000 8083 	beq.w	800bc12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	f200 80a1 	bhi.w	800bc56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d003      	beq.n	800bb22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d056      	beq.n	800bbce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bb20:	e099      	b.n	800bc56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb22:	4b88      	ldr	r3, [pc, #544]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0320 	and.w	r3, r3, #32
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d02d      	beq.n	800bb8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb2e:	4b85      	ldr	r3, [pc, #532]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	08db      	lsrs	r3, r3, #3
 800bb34:	f003 0303 	and.w	r3, r3, #3
 800bb38:	4a83      	ldr	r2, [pc, #524]	; (800bd48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bb3a:	fa22 f303 	lsr.w	r3, r2, r3
 800bb3e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	ee07 3a90 	vmov	s15, r3
 800bb50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb58:	4b7a      	ldr	r3, [pc, #488]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb60:	ee07 3a90 	vmov	s15, r3
 800bb64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb68:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bd4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb88:	e087      	b.n	800bc9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bd50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb9c:	4b69      	ldr	r3, [pc, #420]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba4:	ee07 3a90 	vmov	s15, r3
 800bba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbac:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bd4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbcc:	e065      	b.n	800bc9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	ee07 3a90 	vmov	s15, r3
 800bbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bd54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bbdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe0:	4b58      	ldr	r3, [pc, #352]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe8:	ee07 3a90 	vmov	s15, r3
 800bbec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbf4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bd4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc10:	e043      	b.n	800bc9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	ee07 3a90 	vmov	s15, r3
 800bc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bd58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bc20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc24:	4b47      	ldr	r3, [pc, #284]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc2c:	ee07 3a90 	vmov	s15, r3
 800bc30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc34:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc38:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bd4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc54:	e021      	b.n	800bc9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	ee07 3a90 	vmov	s15, r3
 800bc5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc60:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bd50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc68:	4b36      	ldr	r3, [pc, #216]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc70:	ee07 3a90 	vmov	s15, r3
 800bc74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc78:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bd4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bc9a:	4b2a      	ldr	r3, [pc, #168]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9e:	0a5b      	lsrs	r3, r3, #9
 800bca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bca4:	ee07 3a90 	vmov	s15, r3
 800bca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc0:	ee17 2a90 	vmov	r2, s15
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bcc8:	4b1e      	ldr	r3, [pc, #120]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bccc:	0c1b      	lsrs	r3, r3, #16
 800bcce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bce2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcee:	ee17 2a90 	vmov	r2, s15
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bcf6:	4b13      	ldr	r3, [pc, #76]	; (800bd44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfa:	0e1b      	lsrs	r3, r3, #24
 800bcfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd00:	ee07 3a90 	vmov	s15, r3
 800bd04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd10:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd1c:	ee17 2a90 	vmov	r2, s15
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bd24:	e008      	b.n	800bd38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	609a      	str	r2, [r3, #8]
}
 800bd38:	bf00      	nop
 800bd3a:	3724      	adds	r7, #36	; 0x24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	58024400 	.word	0x58024400
 800bd48:	03d09000 	.word	0x03d09000
 800bd4c:	46000000 	.word	0x46000000
 800bd50:	4c742400 	.word	0x4c742400
 800bd54:	4a742400 	.word	0x4a742400
 800bd58:	4bbebc20 	.word	0x4bbebc20

0800bd5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd6a:	4b53      	ldr	r3, [pc, #332]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6e:	f003 0303 	and.w	r3, r3, #3
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d101      	bne.n	800bd7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e099      	b.n	800beae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bd7a:	4b4f      	ldr	r3, [pc, #316]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a4e      	ldr	r2, [pc, #312]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bd80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd86:	f7f7 f973 	bl	8003070 <HAL_GetTick>
 800bd8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd8c:	e008      	b.n	800bda0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd8e:	f7f7 f96f 	bl	8003070 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d901      	bls.n	800bda0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e086      	b.n	800beae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bda0:	4b45      	ldr	r3, [pc, #276]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1f0      	bne.n	800bd8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bdac:	4b42      	ldr	r3, [pc, #264]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	031b      	lsls	r3, r3, #12
 800bdba:	493f      	ldr	r1, [pc, #252]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	628b      	str	r3, [r1, #40]	; 0x28
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	025b      	lsls	r3, r3, #9
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	3b01      	subs	r3, #1
 800bddc:	041b      	lsls	r3, r3, #16
 800bdde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bde2:	431a      	orrs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	061b      	lsls	r3, r3, #24
 800bdec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bdf0:	4931      	ldr	r1, [pc, #196]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bdf6:	4b30      	ldr	r3, [pc, #192]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	492d      	ldr	r1, [pc, #180]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be04:	4313      	orrs	r3, r2
 800be06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be08:	4b2b      	ldr	r3, [pc, #172]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0c:	f023 0220 	bic.w	r2, r3, #32
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	4928      	ldr	r1, [pc, #160]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be16:	4313      	orrs	r3, r2
 800be18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be1a:	4b27      	ldr	r3, [pc, #156]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1e:	4a26      	ldr	r2, [pc, #152]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be20:	f023 0310 	bic.w	r3, r3, #16
 800be24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be26:	4b24      	ldr	r3, [pc, #144]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be2a:	4b24      	ldr	r3, [pc, #144]	; (800bebc <RCCEx_PLL2_Config+0x160>)
 800be2c:	4013      	ands	r3, r2
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	69d2      	ldr	r2, [r2, #28]
 800be32:	00d2      	lsls	r2, r2, #3
 800be34:	4920      	ldr	r1, [pc, #128]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be36:	4313      	orrs	r3, r2
 800be38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be3a:	4b1f      	ldr	r3, [pc, #124]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	4a1e      	ldr	r2, [pc, #120]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be40:	f043 0310 	orr.w	r3, r3, #16
 800be44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d106      	bne.n	800be5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be4c:	4b1a      	ldr	r3, [pc, #104]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be50:	4a19      	ldr	r2, [pc, #100]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be58:	e00f      	b.n	800be7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d106      	bne.n	800be6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800be60:	4b15      	ldr	r3, [pc, #84]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be64:	4a14      	ldr	r2, [pc, #80]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be6c:	e005      	b.n	800be7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800be6e:	4b12      	ldr	r3, [pc, #72]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be72:	4a11      	ldr	r2, [pc, #68]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800be7a:	4b0f      	ldr	r3, [pc, #60]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a0e      	ldr	r2, [pc, #56]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800be80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be86:	f7f7 f8f3 	bl	8003070 <HAL_GetTick>
 800be8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be8c:	e008      	b.n	800bea0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be8e:	f7f7 f8ef 	bl	8003070 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d901      	bls.n	800bea0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e006      	b.n	800beae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bea0:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <RCCEx_PLL2_Config+0x15c>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d0f0      	beq.n	800be8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800beac:	7bfb      	ldrb	r3, [r7, #15]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	58024400 	.word	0x58024400
 800bebc:	ffff0007 	.word	0xffff0007

0800bec0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bece:	4b53      	ldr	r3, [pc, #332]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed2:	f003 0303 	and.w	r3, r3, #3
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d101      	bne.n	800bede <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e099      	b.n	800c012 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bede:	4b4f      	ldr	r3, [pc, #316]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a4e      	ldr	r2, [pc, #312]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beea:	f7f7 f8c1 	bl	8003070 <HAL_GetTick>
 800beee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bef0:	e008      	b.n	800bf04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bef2:	f7f7 f8bd 	bl	8003070 <HAL_GetTick>
 800bef6:	4602      	mov	r2, r0
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	2b02      	cmp	r3, #2
 800befe:	d901      	bls.n	800bf04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e086      	b.n	800c012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf04:	4b45      	ldr	r3, [pc, #276]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1f0      	bne.n	800bef2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf10:	4b42      	ldr	r3, [pc, #264]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	051b      	lsls	r3, r3, #20
 800bf1e:	493f      	ldr	r1, [pc, #252]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf20:	4313      	orrs	r3, r2
 800bf22:	628b      	str	r3, [r1, #40]	; 0x28
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	025b      	lsls	r3, r3, #9
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	041b      	lsls	r3, r3, #16
 800bf42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf46:	431a      	orrs	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	061b      	lsls	r3, r3, #24
 800bf50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf54:	4931      	ldr	r1, [pc, #196]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf56:	4313      	orrs	r3, r2
 800bf58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf5a:	4b30      	ldr	r3, [pc, #192]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	492d      	ldr	r1, [pc, #180]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bf6c:	4b2b      	ldr	r3, [pc, #172]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	4928      	ldr	r1, [pc, #160]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf7e:	4b27      	ldr	r3, [pc, #156]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf82:	4a26      	ldr	r2, [pc, #152]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf8a:	4b24      	ldr	r3, [pc, #144]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf8e:	4b24      	ldr	r3, [pc, #144]	; (800c020 <RCCEx_PLL3_Config+0x160>)
 800bf90:	4013      	ands	r3, r2
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	69d2      	ldr	r2, [r2, #28]
 800bf96:	00d2      	lsls	r2, r2, #3
 800bf98:	4920      	ldr	r1, [pc, #128]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf9e:	4b1f      	ldr	r3, [pc, #124]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa2:	4a1e      	ldr	r2, [pc, #120]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d106      	bne.n	800bfbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bfb0:	4b1a      	ldr	r3, [pc, #104]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb4:	4a19      	ldr	r2, [pc, #100]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bfba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfbc:	e00f      	b.n	800bfde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d106      	bne.n	800bfd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bfc4:	4b15      	ldr	r3, [pc, #84]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc8:	4a14      	ldr	r2, [pc, #80]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bfce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfd0:	e005      	b.n	800bfde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bfd2:	4b12      	ldr	r3, [pc, #72]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd6:	4a11      	ldr	r2, [pc, #68]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bfdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bfde:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a0e      	ldr	r2, [pc, #56]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800bfe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfea:	f7f7 f841 	bl	8003070 <HAL_GetTick>
 800bfee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bff0:	e008      	b.n	800c004 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bff2:	f7f7 f83d 	bl	8003070 <HAL_GetTick>
 800bff6:	4602      	mov	r2, r0
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d901      	bls.n	800c004 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e006      	b.n	800c012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <RCCEx_PLL3_Config+0x15c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d0f0      	beq.n	800bff2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c010:	7bfb      	ldrb	r3, [r7, #15]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	58024400 	.word	0x58024400
 800c020:	ffff0007 	.word	0xffff0007

0800c024 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d071      	beq.n	800c11a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d106      	bne.n	800c050 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7f6 fb0e 	bl	800266c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2202      	movs	r2, #2
 800c054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	f003 0310 	and.w	r3, r3, #16
 800c062:	2b10      	cmp	r3, #16
 800c064:	d050      	beq.n	800c108 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	22ca      	movs	r2, #202	; 0xca
 800c06c:	625a      	str	r2, [r3, #36]	; 0x24
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2253      	movs	r2, #83	; 0x53
 800c074:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa4a 	bl	800c510 <RTC_EnterInitMode>
 800c07c:	4603      	mov	r3, r0
 800c07e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d124      	bne.n	800c0d0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6899      	ldr	r1, [r3, #8]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	4b24      	ldr	r3, [pc, #144]	; (800c124 <HAL_RTC_Init+0x100>)
 800c092:	400b      	ands	r3, r1
 800c094:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	6899      	ldr	r1, [r3, #8]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	431a      	orrs	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	0419      	lsls	r1, r3, #16
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68da      	ldr	r2, [r3, #12]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fa56 	bl	800c578 <RTC_ExitInitMode>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d113      	bne.n	800c0fe <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f022 0203 	bic.w	r2, r2, #3
 800c0e4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	69da      	ldr	r2, [r3, #28]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	430a      	orrs	r2, r1
 800c0fc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	22ff      	movs	r2, #255	; 0xff
 800c104:	625a      	str	r2, [r3, #36]	; 0x24
 800c106:	e001      	b.n	800c10c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d103      	bne.n	800c11a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	ff8fffbf 	.word	0xff8fffbf

0800c128 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c128:	b590      	push	{r4, r7, lr}
 800c12a:	b087      	sub	sp, #28
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d101      	bne.n	800c142 <HAL_RTC_SetTime+0x1a>
 800c13e:	2302      	movs	r3, #2
 800c140:	e089      	b.n	800c256 <HAL_RTC_SetTime+0x12e>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2201      	movs	r2, #1
 800c146:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2202      	movs	r2, #2
 800c14e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	22ca      	movs	r2, #202	; 0xca
 800c158:	625a      	str	r2, [r3, #36]	; 0x24
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2253      	movs	r2, #83	; 0x53
 800c160:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f000 f9d4 	bl	800c510 <RTC_EnterInitMode>
 800c168:	4603      	mov	r3, r0
 800c16a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c16c:	7cfb      	ldrb	r3, [r7, #19]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d161      	bne.n	800c236 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d126      	bne.n	800c1c6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c182:	2b00      	cmp	r3, #0
 800c184:	d102      	bne.n	800c18c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2200      	movs	r2, #0
 800c18a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	4618      	mov	r0, r3
 800c192:	f000 fa2f 	bl	800c5f4 <RTC_ByteToBcd2>
 800c196:	4603      	mov	r3, r0
 800c198:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f000 fa28 	bl	800c5f4 <RTC_ByteToBcd2>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1a8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	789b      	ldrb	r3, [r3, #2]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 fa20 	bl	800c5f4 <RTC_ByteToBcd2>
 800c1b4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1b6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	78db      	ldrb	r3, [r3, #3]
 800c1be:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]
 800c1c4:	e018      	b.n	800c1f8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d102      	bne.n	800c1da <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	785b      	ldrb	r3, [r3, #1]
 800c1e4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1e6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1ec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	78db      	ldrb	r3, [r3, #3]
 800c1f2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	6979      	ldr	r1, [r7, #20]
 800c1fe:	4b18      	ldr	r3, [pc, #96]	; (800c260 <HAL_RTC_SetTime+0x138>)
 800c200:	400b      	ands	r3, r1
 800c202:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689a      	ldr	r2, [r3, #8]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c212:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6899      	ldr	r1, [r3, #8]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	68da      	ldr	r2, [r3, #12]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	431a      	orrs	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f000 f9a3 	bl	800c578 <RTC_ExitInitMode>
 800c232:	4603      	mov	r3, r0
 800c234:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	22ff      	movs	r2, #255	; 0xff
 800c23c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c23e:	7cfb      	ldrb	r3, [r7, #19]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d103      	bne.n	800c24c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c254:	7cfb      	ldrb	r3, [r7, #19]
}
 800c256:	4618      	mov	r0, r3
 800c258:	371c      	adds	r7, #28
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd90      	pop	{r4, r7, pc}
 800c25e:	bf00      	nop
 800c260:	007f7f7f 	.word	0x007f7f7f

0800c264 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	4b22      	ldr	r3, [pc, #136]	; (800c318 <HAL_RTC_GetTime+0xb4>)
 800c290:	4013      	ands	r3, r2
 800c292:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	0c1b      	lsrs	r3, r3, #16
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	0a1b      	lsrs	r3, r3, #8
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	0d9b      	lsrs	r3, r3, #22
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d11a      	bne.n	800c30e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 f9a9 	bl	800c634 <RTC_Bcd2ToByte>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	785b      	ldrb	r3, [r3, #1]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f9a0 	bl	800c634 <RTC_Bcd2ToByte>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	789b      	ldrb	r3, [r3, #2]
 800c300:	4618      	mov	r0, r3
 800c302:	f000 f997 	bl	800c634 <RTC_Bcd2ToByte>
 800c306:	4603      	mov	r3, r0
 800c308:	461a      	mov	r2, r3
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3718      	adds	r7, #24
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	007f7f7f 	.word	0x007f7f7f

0800c31c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c31c:	b590      	push	{r4, r7, lr}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d101      	bne.n	800c336 <HAL_RTC_SetDate+0x1a>
 800c332:	2302      	movs	r3, #2
 800c334:	e073      	b.n	800c41e <HAL_RTC_SetDate+0x102>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2202      	movs	r2, #2
 800c342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10e      	bne.n	800c36a <HAL_RTC_SetDate+0x4e>
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	785b      	ldrb	r3, [r3, #1]
 800c350:	f003 0310 	and.w	r3, r3, #16
 800c354:	2b00      	cmp	r3, #0
 800c356:	d008      	beq.n	800c36a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	785b      	ldrb	r3, [r3, #1]
 800c35c:	f023 0310 	bic.w	r3, r3, #16
 800c360:	b2db      	uxtb	r3, r3
 800c362:	330a      	adds	r3, #10
 800c364:	b2da      	uxtb	r2, r3
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d11c      	bne.n	800c3aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	78db      	ldrb	r3, [r3, #3]
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f93d 	bl	800c5f4 <RTC_ByteToBcd2>
 800c37a:	4603      	mov	r3, r0
 800c37c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	4618      	mov	r0, r3
 800c384:	f000 f936 	bl	800c5f4 <RTC_ByteToBcd2>
 800c388:	4603      	mov	r3, r0
 800c38a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c38c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	789b      	ldrb	r3, [r3, #2]
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f92e 	bl	800c5f4 <RTC_ByteToBcd2>
 800c398:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c39a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	617b      	str	r3, [r7, #20]
 800c3a8:	e00e      	b.n	800c3c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	78db      	ldrb	r3, [r3, #3]
 800c3ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	785b      	ldrb	r3, [r3, #1]
 800c3b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c3b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c3bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	22ca      	movs	r2, #202	; 0xca
 800c3ce:	625a      	str	r2, [r3, #36]	; 0x24
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2253      	movs	r2, #83	; 0x53
 800c3d6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f899 	bl	800c510 <RTC_EnterInitMode>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c3e2:	7cfb      	ldrb	r3, [r7, #19]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10a      	bne.n	800c3fe <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	6979      	ldr	r1, [r7, #20]
 800c3ee:	4b0e      	ldr	r3, [pc, #56]	; (800c428 <HAL_RTC_SetDate+0x10c>)
 800c3f0:	400b      	ands	r3, r1
 800c3f2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 f8bf 	bl	800c578 <RTC_ExitInitMode>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	22ff      	movs	r2, #255	; 0xff
 800c404:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c406:	7cfb      	ldrb	r3, [r7, #19]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d103      	bne.n	800c414 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c41c:	7cfb      	ldrb	r3, [r7, #19]


}
 800c41e:	4618      	mov	r0, r3
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	bd90      	pop	{r4, r7, pc}
 800c426:	bf00      	nop
 800c428:	00ffff3f 	.word	0x00ffff3f

0800c42c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	4b21      	ldr	r3, [pc, #132]	; (800c4c4 <HAL_RTC_GetDate+0x98>)
 800c440:	4013      	ands	r3, r2
 800c442:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	0c1b      	lsrs	r3, r3, #16
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	0a1b      	lsrs	r3, r3, #8
 800c452:	b2db      	uxtb	r3, r3
 800c454:	f003 031f 	and.w	r3, r3, #31
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	b2db      	uxtb	r3, r3
 800c462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c466:	b2da      	uxtb	r2, r3
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	0b5b      	lsrs	r3, r3, #13
 800c470:	b2db      	uxtb	r3, r3
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	b2da      	uxtb	r2, r3
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d11a      	bne.n	800c4b8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	78db      	ldrb	r3, [r3, #3]
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f8d4 	bl	800c634 <RTC_Bcd2ToByte>
 800c48c:	4603      	mov	r3, r0
 800c48e:	461a      	mov	r2, r3
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	785b      	ldrb	r3, [r3, #1]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 f8cb 	bl	800c634 <RTC_Bcd2ToByte>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	789b      	ldrb	r3, [r3, #2]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 f8c2 	bl	800c634 <RTC_Bcd2ToByte>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	00ffff3f 	.word	0x00ffff3f

0800c4c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	; (800c50c <HAL_RTC_WaitForSynchro+0x44>)
 800c4d6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c4d8:	f7f6 fdca 	bl	8003070 <HAL_GetTick>
 800c4dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c4de:	e009      	b.n	800c4f4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c4e0:	f7f6 fdc6 	bl	8003070 <HAL_GetTick>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4ee:	d901      	bls.n	800c4f4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e007      	b.n	800c504 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	f003 0320 	and.w	r3, r3, #32
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d0ee      	beq.n	800c4e0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	0003ff5f 	.word	0x0003ff5f

0800c510 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c518:	2300      	movs	r3, #0
 800c51a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c526:	2b00      	cmp	r3, #0
 800c528:	d120      	bne.n	800c56c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c532:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c534:	f7f6 fd9c 	bl	8003070 <HAL_GetTick>
 800c538:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c53a:	e00d      	b.n	800c558 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c53c:	f7f6 fd98 	bl	8003070 <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c54a:	d905      	bls.n	800c558 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c54c:	2303      	movs	r3, #3
 800c54e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2203      	movs	r2, #3
 800c554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c562:	2b00      	cmp	r3, #0
 800c564:	d102      	bne.n	800c56c <RTC_EnterInitMode+0x5c>
 800c566:	7bfb      	ldrb	r3, [r7, #15]
 800c568:	2b03      	cmp	r3, #3
 800c56a:	d1e7      	bne.n	800c53c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c584:	4b1a      	ldr	r3, [pc, #104]	; (800c5f0 <RTC_ExitInitMode+0x78>)
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	4a19      	ldr	r2, [pc, #100]	; (800c5f0 <RTC_ExitInitMode+0x78>)
 800c58a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c58e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c590:	4b17      	ldr	r3, [pc, #92]	; (800c5f0 <RTC_ExitInitMode+0x78>)
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10c      	bne.n	800c5b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7ff ff93 	bl	800c4c8 <HAL_RTC_WaitForSynchro>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d01e      	beq.n	800c5e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	73fb      	strb	r3, [r7, #15]
 800c5b4:	e017      	b.n	800c5e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c5b6:	4b0e      	ldr	r3, [pc, #56]	; (800c5f0 <RTC_ExitInitMode+0x78>)
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	4a0d      	ldr	r2, [pc, #52]	; (800c5f0 <RTC_ExitInitMode+0x78>)
 800c5bc:	f023 0320 	bic.w	r3, r3, #32
 800c5c0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff ff80 	bl	800c4c8 <HAL_RTC_WaitForSynchro>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d005      	beq.n	800c5da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2203      	movs	r2, #3
 800c5d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c5d6:	2303      	movs	r3, #3
 800c5d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c5da:	4b05      	ldr	r3, [pc, #20]	; (800c5f0 <RTC_ExitInitMode+0x78>)
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	4a04      	ldr	r2, [pc, #16]	; (800c5f0 <RTC_ExitInitMode+0x78>)
 800c5e0:	f043 0320 	orr.w	r3, r3, #32
 800c5e4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	58004000 	.word	0x58004000

0800c5f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c5fe:	2300      	movs	r3, #0
 800c600:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c602:	79fb      	ldrb	r3, [r7, #7]
 800c604:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c606:	e005      	b.n	800c614 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	3301      	adds	r3, #1
 800c60c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c60e:	7afb      	ldrb	r3, [r7, #11]
 800c610:	3b0a      	subs	r3, #10
 800c612:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c614:	7afb      	ldrb	r3, [r7, #11]
 800c616:	2b09      	cmp	r3, #9
 800c618:	d8f6      	bhi.n	800c608 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	011b      	lsls	r3, r3, #4
 800c620:	b2da      	uxtb	r2, r3
 800c622:	7afb      	ldrb	r3, [r7, #11]
 800c624:	4313      	orrs	r3, r2
 800c626:	b2db      	uxtb	r3, r3
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	4603      	mov	r3, r0
 800c63c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c63e:	79fb      	ldrb	r3, [r7, #7]
 800c640:	091b      	lsrs	r3, r3, #4
 800c642:	b2db      	uxtb	r3, r3
 800c644:	461a      	mov	r2, r3
 800c646:	0092      	lsls	r2, r2, #2
 800c648:	4413      	add	r3, r2
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c64e:	79fb      	ldrb	r3, [r7, #7]
 800c650:	f003 030f 	and.w	r3, r3, #15
 800c654:	b2da      	uxtb	r2, r3
 800c656:	7bfb      	ldrb	r3, [r7, #15]
 800c658:	4413      	add	r3, r2
 800c65a:	b2db      	uxtb	r3, r3
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e10f      	b.n	800c89a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a87      	ldr	r2, [pc, #540]	; (800c8a4 <HAL_SPI_Init+0x23c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00f      	beq.n	800c6aa <HAL_SPI_Init+0x42>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a86      	ldr	r2, [pc, #536]	; (800c8a8 <HAL_SPI_Init+0x240>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00a      	beq.n	800c6aa <HAL_SPI_Init+0x42>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a84      	ldr	r2, [pc, #528]	; (800c8ac <HAL_SPI_Init+0x244>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d005      	beq.n	800c6aa <HAL_SPI_Init+0x42>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	2b0f      	cmp	r3, #15
 800c6a4:	d901      	bls.n	800c6aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e0f7      	b.n	800c89a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f900 	bl	800c8b0 <SPI_GetPacketSize>
 800c6b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a7b      	ldr	r2, [pc, #492]	; (800c8a4 <HAL_SPI_Init+0x23c>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d00c      	beq.n	800c6d6 <HAL_SPI_Init+0x6e>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a79      	ldr	r2, [pc, #484]	; (800c8a8 <HAL_SPI_Init+0x240>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d007      	beq.n	800c6d6 <HAL_SPI_Init+0x6e>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a78      	ldr	r2, [pc, #480]	; (800c8ac <HAL_SPI_Init+0x244>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d002      	beq.n	800c6d6 <HAL_SPI_Init+0x6e>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b08      	cmp	r3, #8
 800c6d4:	d811      	bhi.n	800c6fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c6da:	4a72      	ldr	r2, [pc, #456]	; (800c8a4 <HAL_SPI_Init+0x23c>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d009      	beq.n	800c6f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a70      	ldr	r2, [pc, #448]	; (800c8a8 <HAL_SPI_Init+0x240>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d004      	beq.n	800c6f4 <HAL_SPI_Init+0x8c>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a6f      	ldr	r2, [pc, #444]	; (800c8ac <HAL_SPI_Init+0x244>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d104      	bne.n	800c6fe <HAL_SPI_Init+0x96>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b10      	cmp	r3, #16
 800c6f8:	d901      	bls.n	800c6fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e0cd      	b.n	800c89a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d106      	bne.n	800c718 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7f5 ffdc 	bl	80026d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2202      	movs	r2, #2
 800c71c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f022 0201 	bic.w	r2, r2, #1
 800c72e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c73a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c744:	d119      	bne.n	800c77a <HAL_SPI_Init+0x112>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c74e:	d103      	bne.n	800c758 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c754:	2b00      	cmp	r3, #0
 800c756:	d008      	beq.n	800c76a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10c      	bne.n	800c77a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c768:	d107      	bne.n	800c77a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c778:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00f      	beq.n	800c7a6 <HAL_SPI_Init+0x13e>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	2b06      	cmp	r3, #6
 800c78c:	d90b      	bls.n	800c7a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	430a      	orrs	r2, r1
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	e007      	b.n	800c7b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	69da      	ldr	r2, [r3, #28]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	431a      	orrs	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c8:	ea42 0103 	orr.w	r1, r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68da      	ldr	r2, [r3, #12]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	430a      	orrs	r2, r1
 800c7d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	431a      	orrs	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	431a      	orrs	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	431a      	orrs	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	431a      	orrs	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	431a      	orrs	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c80a:	431a      	orrs	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	431a      	orrs	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c816:	ea42 0103 	orr.w	r1, r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	430a      	orrs	r2, r1
 800c824:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d113      	bne.n	800c856 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c840:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c854:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f022 0201 	bic.w	r2, r2, #1
 800c864:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00a      	beq.n	800c888 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	430a      	orrs	r2, r1
 800c886:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	40013000 	.word	0x40013000
 800c8a8:	40003800 	.word	0x40003800
 800c8ac:	40003c00 	.word	0x40003c00

0800c8b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8bc:	095b      	lsrs	r3, r3, #5
 800c8be:	3301      	adds	r3, #1
 800c8c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	3307      	adds	r3, #7
 800c8ce:	08db      	lsrs	r3, r3, #3
 800c8d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	fb02 f303 	mul.w	r3, r2, r3
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e049      	b.n	800c98c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b00      	cmp	r3, #0
 800c902:	d106      	bne.n	800c912 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f7f5 ff95 	bl	800283c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2202      	movs	r2, #2
 800c916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3304      	adds	r3, #4
 800c922:	4619      	mov	r1, r3
 800c924:	4610      	mov	r0, r2
 800c926:	f000 ff41 	bl	800d7ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2201      	movs	r2, #1
 800c92e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2201      	movs	r2, #1
 800c936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2201      	movs	r2, #1
 800c96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2201      	movs	r2, #1
 800c986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d001      	beq.n	800c9ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e04c      	b.n	800ca46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a26      	ldr	r2, [pc, #152]	; (800ca54 <HAL_TIM_Base_Start+0xc0>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d022      	beq.n	800ca04 <HAL_TIM_Base_Start+0x70>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9c6:	d01d      	beq.n	800ca04 <HAL_TIM_Base_Start+0x70>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a22      	ldr	r2, [pc, #136]	; (800ca58 <HAL_TIM_Base_Start+0xc4>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d018      	beq.n	800ca04 <HAL_TIM_Base_Start+0x70>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a21      	ldr	r2, [pc, #132]	; (800ca5c <HAL_TIM_Base_Start+0xc8>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d013      	beq.n	800ca04 <HAL_TIM_Base_Start+0x70>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a1f      	ldr	r2, [pc, #124]	; (800ca60 <HAL_TIM_Base_Start+0xcc>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d00e      	beq.n	800ca04 <HAL_TIM_Base_Start+0x70>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a1e      	ldr	r2, [pc, #120]	; (800ca64 <HAL_TIM_Base_Start+0xd0>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d009      	beq.n	800ca04 <HAL_TIM_Base_Start+0x70>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a1c      	ldr	r2, [pc, #112]	; (800ca68 <HAL_TIM_Base_Start+0xd4>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d004      	beq.n	800ca04 <HAL_TIM_Base_Start+0x70>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a1b      	ldr	r2, [pc, #108]	; (800ca6c <HAL_TIM_Base_Start+0xd8>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d115      	bne.n	800ca30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	689a      	ldr	r2, [r3, #8]
 800ca0a:	4b19      	ldr	r3, [pc, #100]	; (800ca70 <HAL_TIM_Base_Start+0xdc>)
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b06      	cmp	r3, #6
 800ca14:	d015      	beq.n	800ca42 <HAL_TIM_Base_Start+0xae>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca1c:	d011      	beq.n	800ca42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f042 0201 	orr.w	r2, r2, #1
 800ca2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca2e:	e008      	b.n	800ca42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f042 0201 	orr.w	r2, r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	e000      	b.n	800ca44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	40010000 	.word	0x40010000
 800ca58:	40000400 	.word	0x40000400
 800ca5c:	40000800 	.word	0x40000800
 800ca60:	40000c00 	.word	0x40000c00
 800ca64:	40010400 	.word	0x40010400
 800ca68:	40001800 	.word	0x40001800
 800ca6c:	40014000 	.word	0x40014000
 800ca70:	00010007 	.word	0x00010007

0800ca74 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6a1a      	ldr	r2, [r3, #32]
 800ca82:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca86:	4013      	ands	r3, r2
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10f      	bne.n	800caac <HAL_TIM_Base_Stop+0x38>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6a1a      	ldr	r2, [r3, #32]
 800ca92:	f240 4344 	movw	r3, #1092	; 0x444
 800ca96:	4013      	ands	r3, r2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d107      	bne.n	800caac <HAL_TIM_Base_Stop+0x38>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f022 0201 	bic.w	r2, r2, #1
 800caaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
	...

0800cac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d001      	beq.n	800cadc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	e054      	b.n	800cb86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2202      	movs	r2, #2
 800cae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68da      	ldr	r2, [r3, #12]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f042 0201 	orr.w	r2, r2, #1
 800caf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a26      	ldr	r2, [pc, #152]	; (800cb94 <HAL_TIM_Base_Start_IT+0xd0>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d022      	beq.n	800cb44 <HAL_TIM_Base_Start_IT+0x80>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb06:	d01d      	beq.n	800cb44 <HAL_TIM_Base_Start_IT+0x80>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a22      	ldr	r2, [pc, #136]	; (800cb98 <HAL_TIM_Base_Start_IT+0xd4>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d018      	beq.n	800cb44 <HAL_TIM_Base_Start_IT+0x80>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a21      	ldr	r2, [pc, #132]	; (800cb9c <HAL_TIM_Base_Start_IT+0xd8>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d013      	beq.n	800cb44 <HAL_TIM_Base_Start_IT+0x80>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a1f      	ldr	r2, [pc, #124]	; (800cba0 <HAL_TIM_Base_Start_IT+0xdc>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d00e      	beq.n	800cb44 <HAL_TIM_Base_Start_IT+0x80>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a1e      	ldr	r2, [pc, #120]	; (800cba4 <HAL_TIM_Base_Start_IT+0xe0>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d009      	beq.n	800cb44 <HAL_TIM_Base_Start_IT+0x80>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a1c      	ldr	r2, [pc, #112]	; (800cba8 <HAL_TIM_Base_Start_IT+0xe4>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d004      	beq.n	800cb44 <HAL_TIM_Base_Start_IT+0x80>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a1b      	ldr	r2, [pc, #108]	; (800cbac <HAL_TIM_Base_Start_IT+0xe8>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d115      	bne.n	800cb70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689a      	ldr	r2, [r3, #8]
 800cb4a:	4b19      	ldr	r3, [pc, #100]	; (800cbb0 <HAL_TIM_Base_Start_IT+0xec>)
 800cb4c:	4013      	ands	r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2b06      	cmp	r3, #6
 800cb54:	d015      	beq.n	800cb82 <HAL_TIM_Base_Start_IT+0xbe>
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb5c:	d011      	beq.n	800cb82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f042 0201 	orr.w	r2, r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb6e:	e008      	b.n	800cb82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f042 0201 	orr.w	r2, r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	e000      	b.n	800cb84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	40010000 	.word	0x40010000
 800cb98:	40000400 	.word	0x40000400
 800cb9c:	40000800 	.word	0x40000800
 800cba0:	40000c00 	.word	0x40000c00
 800cba4:	40010400 	.word	0x40010400
 800cba8:	40001800 	.word	0x40001800
 800cbac:	40014000 	.word	0x40014000
 800cbb0:	00010007 	.word	0x00010007

0800cbb4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d109      	bne.n	800cbdc <HAL_TIM_OC_Start_IT+0x28>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	bf14      	ite	ne
 800cbd4:	2301      	movne	r3, #1
 800cbd6:	2300      	moveq	r3, #0
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	e03c      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0xa2>
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	d109      	bne.n	800cbf6 <HAL_TIM_OC_Start_IT+0x42>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	bf14      	ite	ne
 800cbee:	2301      	movne	r3, #1
 800cbf0:	2300      	moveq	r3, #0
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	e02f      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0xa2>
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b08      	cmp	r3, #8
 800cbfa:	d109      	bne.n	800cc10 <HAL_TIM_OC_Start_IT+0x5c>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	bf14      	ite	ne
 800cc08:	2301      	movne	r3, #1
 800cc0a:	2300      	moveq	r3, #0
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	e022      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0xa2>
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b0c      	cmp	r3, #12
 800cc14:	d109      	bne.n	800cc2a <HAL_TIM_OC_Start_IT+0x76>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	bf14      	ite	ne
 800cc22:	2301      	movne	r3, #1
 800cc24:	2300      	moveq	r3, #0
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	e015      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0xa2>
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b10      	cmp	r3, #16
 800cc2e:	d109      	bne.n	800cc44 <HAL_TIM_OC_Start_IT+0x90>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	bf14      	ite	ne
 800cc3c:	2301      	movne	r3, #1
 800cc3e:	2300      	moveq	r3, #0
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	e008      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0xa2>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	bf14      	ite	ne
 800cc50:	2301      	movne	r3, #1
 800cc52:	2300      	moveq	r3, #0
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e0ec      	b.n	800ce38 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d104      	bne.n	800cc6e <HAL_TIM_OC_Start_IT+0xba>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2202      	movs	r2, #2
 800cc68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc6c:	e023      	b.n	800ccb6 <HAL_TIM_OC_Start_IT+0x102>
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	2b04      	cmp	r3, #4
 800cc72:	d104      	bne.n	800cc7e <HAL_TIM_OC_Start_IT+0xca>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2202      	movs	r2, #2
 800cc78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc7c:	e01b      	b.n	800ccb6 <HAL_TIM_OC_Start_IT+0x102>
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b08      	cmp	r3, #8
 800cc82:	d104      	bne.n	800cc8e <HAL_TIM_OC_Start_IT+0xda>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2202      	movs	r2, #2
 800cc88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc8c:	e013      	b.n	800ccb6 <HAL_TIM_OC_Start_IT+0x102>
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b0c      	cmp	r3, #12
 800cc92:	d104      	bne.n	800cc9e <HAL_TIM_OC_Start_IT+0xea>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2202      	movs	r2, #2
 800cc98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc9c:	e00b      	b.n	800ccb6 <HAL_TIM_OC_Start_IT+0x102>
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b10      	cmp	r3, #16
 800cca2:	d104      	bne.n	800ccae <HAL_TIM_OC_Start_IT+0xfa>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2202      	movs	r2, #2
 800cca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ccac:	e003      	b.n	800ccb6 <HAL_TIM_OC_Start_IT+0x102>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2202      	movs	r2, #2
 800ccb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	2b0c      	cmp	r3, #12
 800ccba:	d841      	bhi.n	800cd40 <HAL_TIM_OC_Start_IT+0x18c>
 800ccbc:	a201      	add	r2, pc, #4	; (adr r2, 800ccc4 <HAL_TIM_OC_Start_IT+0x110>)
 800ccbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc2:	bf00      	nop
 800ccc4:	0800ccf9 	.word	0x0800ccf9
 800ccc8:	0800cd41 	.word	0x0800cd41
 800cccc:	0800cd41 	.word	0x0800cd41
 800ccd0:	0800cd41 	.word	0x0800cd41
 800ccd4:	0800cd0b 	.word	0x0800cd0b
 800ccd8:	0800cd41 	.word	0x0800cd41
 800ccdc:	0800cd41 	.word	0x0800cd41
 800cce0:	0800cd41 	.word	0x0800cd41
 800cce4:	0800cd1d 	.word	0x0800cd1d
 800cce8:	0800cd41 	.word	0x0800cd41
 800ccec:	0800cd41 	.word	0x0800cd41
 800ccf0:	0800cd41 	.word	0x0800cd41
 800ccf4:	0800cd2f 	.word	0x0800cd2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68da      	ldr	r2, [r3, #12]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f042 0202 	orr.w	r2, r2, #2
 800cd06:	60da      	str	r2, [r3, #12]
      break;
 800cd08:	e01d      	b.n	800cd46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68da      	ldr	r2, [r3, #12]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f042 0204 	orr.w	r2, r2, #4
 800cd18:	60da      	str	r2, [r3, #12]
      break;
 800cd1a:	e014      	b.n	800cd46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68da      	ldr	r2, [r3, #12]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f042 0208 	orr.w	r2, r2, #8
 800cd2a:	60da      	str	r2, [r3, #12]
      break;
 800cd2c:	e00b      	b.n	800cd46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68da      	ldr	r2, [r3, #12]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f042 0210 	orr.w	r2, r2, #16
 800cd3c:	60da      	str	r2, [r3, #12]
      break;
 800cd3e:	e002      	b.n	800cd46 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	73fb      	strb	r3, [r7, #15]
      break;
 800cd44:	bf00      	nop
  }

  if (status == HAL_OK)
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d174      	bne.n	800ce36 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2201      	movs	r2, #1
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f001 f943 	bl	800dfe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a38      	ldr	r2, [pc, #224]	; (800ce40 <HAL_TIM_OC_Start_IT+0x28c>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d013      	beq.n	800cd8c <HAL_TIM_OC_Start_IT+0x1d8>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a36      	ldr	r2, [pc, #216]	; (800ce44 <HAL_TIM_OC_Start_IT+0x290>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d00e      	beq.n	800cd8c <HAL_TIM_OC_Start_IT+0x1d8>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a35      	ldr	r2, [pc, #212]	; (800ce48 <HAL_TIM_OC_Start_IT+0x294>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d009      	beq.n	800cd8c <HAL_TIM_OC_Start_IT+0x1d8>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a33      	ldr	r2, [pc, #204]	; (800ce4c <HAL_TIM_OC_Start_IT+0x298>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d004      	beq.n	800cd8c <HAL_TIM_OC_Start_IT+0x1d8>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a32      	ldr	r2, [pc, #200]	; (800ce50 <HAL_TIM_OC_Start_IT+0x29c>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d101      	bne.n	800cd90 <HAL_TIM_OC_Start_IT+0x1dc>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e000      	b.n	800cd92 <HAL_TIM_OC_Start_IT+0x1de>
 800cd90:	2300      	movs	r3, #0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d007      	beq.n	800cda6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cda4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a25      	ldr	r2, [pc, #148]	; (800ce40 <HAL_TIM_OC_Start_IT+0x28c>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d022      	beq.n	800cdf6 <HAL_TIM_OC_Start_IT+0x242>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdb8:	d01d      	beq.n	800cdf6 <HAL_TIM_OC_Start_IT+0x242>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a25      	ldr	r2, [pc, #148]	; (800ce54 <HAL_TIM_OC_Start_IT+0x2a0>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d018      	beq.n	800cdf6 <HAL_TIM_OC_Start_IT+0x242>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a23      	ldr	r2, [pc, #140]	; (800ce58 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d013      	beq.n	800cdf6 <HAL_TIM_OC_Start_IT+0x242>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a22      	ldr	r2, [pc, #136]	; (800ce5c <HAL_TIM_OC_Start_IT+0x2a8>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d00e      	beq.n	800cdf6 <HAL_TIM_OC_Start_IT+0x242>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a19      	ldr	r2, [pc, #100]	; (800ce44 <HAL_TIM_OC_Start_IT+0x290>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d009      	beq.n	800cdf6 <HAL_TIM_OC_Start_IT+0x242>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a1e      	ldr	r2, [pc, #120]	; (800ce60 <HAL_TIM_OC_Start_IT+0x2ac>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d004      	beq.n	800cdf6 <HAL_TIM_OC_Start_IT+0x242>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a15      	ldr	r2, [pc, #84]	; (800ce48 <HAL_TIM_OC_Start_IT+0x294>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d115      	bne.n	800ce22 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	4b19      	ldr	r3, [pc, #100]	; (800ce64 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cdfe:	4013      	ands	r3, r2
 800ce00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b06      	cmp	r3, #6
 800ce06:	d015      	beq.n	800ce34 <HAL_TIM_OC_Start_IT+0x280>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce0e:	d011      	beq.n	800ce34 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f042 0201 	orr.w	r2, r2, #1
 800ce1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce20:	e008      	b.n	800ce34 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f042 0201 	orr.w	r2, r2, #1
 800ce30:	601a      	str	r2, [r3, #0]
 800ce32:	e000      	b.n	800ce36 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ce36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	40010000 	.word	0x40010000
 800ce44:	40010400 	.word	0x40010400
 800ce48:	40014000 	.word	0x40014000
 800ce4c:	40014400 	.word	0x40014400
 800ce50:	40014800 	.word	0x40014800
 800ce54:	40000400 	.word	0x40000400
 800ce58:	40000800 	.word	0x40000800
 800ce5c:	40000c00 	.word	0x40000c00
 800ce60:	40001800 	.word	0x40001800
 800ce64:	00010007 	.word	0x00010007

0800ce68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d101      	bne.n	800ce7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e049      	b.n	800cf0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d106      	bne.n	800ce94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 f841 	bl	800cf16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2202      	movs	r2, #2
 800ce98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	3304      	adds	r3, #4
 800cea4:	4619      	mov	r1, r3
 800cea6:	4610      	mov	r0, r2
 800cea8:	f000 fc80 	bl	800d7ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2201      	movs	r2, #1
 800cee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf1e:	bf00      	nop
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr
	...

0800cf2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d109      	bne.n	800cf50 <HAL_TIM_PWM_Start+0x24>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	bf14      	ite	ne
 800cf48:	2301      	movne	r3, #1
 800cf4a:	2300      	moveq	r3, #0
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	e03c      	b.n	800cfca <HAL_TIM_PWM_Start+0x9e>
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2b04      	cmp	r3, #4
 800cf54:	d109      	bne.n	800cf6a <HAL_TIM_PWM_Start+0x3e>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	bf14      	ite	ne
 800cf62:	2301      	movne	r3, #1
 800cf64:	2300      	moveq	r3, #0
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	e02f      	b.n	800cfca <HAL_TIM_PWM_Start+0x9e>
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2b08      	cmp	r3, #8
 800cf6e:	d109      	bne.n	800cf84 <HAL_TIM_PWM_Start+0x58>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	bf14      	ite	ne
 800cf7c:	2301      	movne	r3, #1
 800cf7e:	2300      	moveq	r3, #0
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	e022      	b.n	800cfca <HAL_TIM_PWM_Start+0x9e>
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	2b0c      	cmp	r3, #12
 800cf88:	d109      	bne.n	800cf9e <HAL_TIM_PWM_Start+0x72>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	bf14      	ite	ne
 800cf96:	2301      	movne	r3, #1
 800cf98:	2300      	moveq	r3, #0
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	e015      	b.n	800cfca <HAL_TIM_PWM_Start+0x9e>
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	2b10      	cmp	r3, #16
 800cfa2:	d109      	bne.n	800cfb8 <HAL_TIM_PWM_Start+0x8c>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	bf14      	ite	ne
 800cfb0:	2301      	movne	r3, #1
 800cfb2:	2300      	moveq	r3, #0
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	e008      	b.n	800cfca <HAL_TIM_PWM_Start+0x9e>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	bf14      	ite	ne
 800cfc4:	2301      	movne	r3, #1
 800cfc6:	2300      	moveq	r3, #0
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e0a1      	b.n	800d116 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d104      	bne.n	800cfe2 <HAL_TIM_PWM_Start+0xb6>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfe0:	e023      	b.n	800d02a <HAL_TIM_PWM_Start+0xfe>
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	2b04      	cmp	r3, #4
 800cfe6:	d104      	bne.n	800cff2 <HAL_TIM_PWM_Start+0xc6>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2202      	movs	r2, #2
 800cfec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cff0:	e01b      	b.n	800d02a <HAL_TIM_PWM_Start+0xfe>
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	2b08      	cmp	r3, #8
 800cff6:	d104      	bne.n	800d002 <HAL_TIM_PWM_Start+0xd6>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2202      	movs	r2, #2
 800cffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d000:	e013      	b.n	800d02a <HAL_TIM_PWM_Start+0xfe>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b0c      	cmp	r3, #12
 800d006:	d104      	bne.n	800d012 <HAL_TIM_PWM_Start+0xe6>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2202      	movs	r2, #2
 800d00c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d010:	e00b      	b.n	800d02a <HAL_TIM_PWM_Start+0xfe>
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b10      	cmp	r3, #16
 800d016:	d104      	bne.n	800d022 <HAL_TIM_PWM_Start+0xf6>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2202      	movs	r2, #2
 800d01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d020:	e003      	b.n	800d02a <HAL_TIM_PWM_Start+0xfe>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2202      	movs	r2, #2
 800d026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2201      	movs	r2, #1
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	4618      	mov	r0, r3
 800d034:	f000 ffd4 	bl	800dfe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a38      	ldr	r2, [pc, #224]	; (800d120 <HAL_TIM_PWM_Start+0x1f4>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d013      	beq.n	800d06a <HAL_TIM_PWM_Start+0x13e>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a37      	ldr	r2, [pc, #220]	; (800d124 <HAL_TIM_PWM_Start+0x1f8>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d00e      	beq.n	800d06a <HAL_TIM_PWM_Start+0x13e>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a35      	ldr	r2, [pc, #212]	; (800d128 <HAL_TIM_PWM_Start+0x1fc>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d009      	beq.n	800d06a <HAL_TIM_PWM_Start+0x13e>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a34      	ldr	r2, [pc, #208]	; (800d12c <HAL_TIM_PWM_Start+0x200>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d004      	beq.n	800d06a <HAL_TIM_PWM_Start+0x13e>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a32      	ldr	r2, [pc, #200]	; (800d130 <HAL_TIM_PWM_Start+0x204>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d101      	bne.n	800d06e <HAL_TIM_PWM_Start+0x142>
 800d06a:	2301      	movs	r3, #1
 800d06c:	e000      	b.n	800d070 <HAL_TIM_PWM_Start+0x144>
 800d06e:	2300      	movs	r3, #0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d007      	beq.n	800d084 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d082:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a25      	ldr	r2, [pc, #148]	; (800d120 <HAL_TIM_PWM_Start+0x1f4>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d022      	beq.n	800d0d4 <HAL_TIM_PWM_Start+0x1a8>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d096:	d01d      	beq.n	800d0d4 <HAL_TIM_PWM_Start+0x1a8>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a25      	ldr	r2, [pc, #148]	; (800d134 <HAL_TIM_PWM_Start+0x208>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d018      	beq.n	800d0d4 <HAL_TIM_PWM_Start+0x1a8>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a24      	ldr	r2, [pc, #144]	; (800d138 <HAL_TIM_PWM_Start+0x20c>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d013      	beq.n	800d0d4 <HAL_TIM_PWM_Start+0x1a8>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a22      	ldr	r2, [pc, #136]	; (800d13c <HAL_TIM_PWM_Start+0x210>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d00e      	beq.n	800d0d4 <HAL_TIM_PWM_Start+0x1a8>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a1a      	ldr	r2, [pc, #104]	; (800d124 <HAL_TIM_PWM_Start+0x1f8>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d009      	beq.n	800d0d4 <HAL_TIM_PWM_Start+0x1a8>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a1e      	ldr	r2, [pc, #120]	; (800d140 <HAL_TIM_PWM_Start+0x214>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d004      	beq.n	800d0d4 <HAL_TIM_PWM_Start+0x1a8>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a16      	ldr	r2, [pc, #88]	; (800d128 <HAL_TIM_PWM_Start+0x1fc>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d115      	bne.n	800d100 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	689a      	ldr	r2, [r3, #8]
 800d0da:	4b1a      	ldr	r3, [pc, #104]	; (800d144 <HAL_TIM_PWM_Start+0x218>)
 800d0dc:	4013      	ands	r3, r2
 800d0de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2b06      	cmp	r3, #6
 800d0e4:	d015      	beq.n	800d112 <HAL_TIM_PWM_Start+0x1e6>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0ec:	d011      	beq.n	800d112 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f042 0201 	orr.w	r2, r2, #1
 800d0fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0fe:	e008      	b.n	800d112 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f042 0201 	orr.w	r2, r2, #1
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	e000      	b.n	800d114 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d112:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	40010000 	.word	0x40010000
 800d124:	40010400 	.word	0x40010400
 800d128:	40014000 	.word	0x40014000
 800d12c:	40014400 	.word	0x40014400
 800d130:	40014800 	.word	0x40014800
 800d134:	40000400 	.word	0x40000400
 800d138:	40000800 	.word	0x40000800
 800d13c:	40000c00 	.word	0x40000c00
 800d140:	40001800 	.word	0x40001800
 800d144:	00010007 	.word	0x00010007

0800d148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	f003 0302 	and.w	r3, r3, #2
 800d166:	2b00      	cmp	r3, #0
 800d168:	d020      	beq.n	800d1ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f003 0302 	and.w	r3, r3, #2
 800d170:	2b00      	cmp	r3, #0
 800d172:	d01b      	beq.n	800d1ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f06f 0202 	mvn.w	r2, #2
 800d17c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2201      	movs	r2, #1
 800d182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	699b      	ldr	r3, [r3, #24]
 800d18a:	f003 0303 	and.w	r3, r3, #3
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d003      	beq.n	800d19a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 faec 	bl	800d770 <HAL_TIM_IC_CaptureCallback>
 800d198:	e005      	b.n	800d1a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f7f3 fa72 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 faef 	bl	800d784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	f003 0304 	and.w	r3, r3, #4
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d020      	beq.n	800d1f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f003 0304 	and.w	r3, r3, #4
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d01b      	beq.n	800d1f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f06f 0204 	mvn.w	r2, #4
 800d1c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2202      	movs	r2, #2
 800d1ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	699b      	ldr	r3, [r3, #24]
 800d1d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d003      	beq.n	800d1e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fac6 	bl	800d770 <HAL_TIM_IC_CaptureCallback>
 800d1e4:	e005      	b.n	800d1f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7f3 fa4c 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 fac9 	bl	800d784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	f003 0308 	and.w	r3, r3, #8
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d020      	beq.n	800d244 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f003 0308 	and.w	r3, r3, #8
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d01b      	beq.n	800d244 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f06f 0208 	mvn.w	r2, #8
 800d214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2204      	movs	r2, #4
 800d21a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	69db      	ldr	r3, [r3, #28]
 800d222:	f003 0303 	and.w	r3, r3, #3
 800d226:	2b00      	cmp	r3, #0
 800d228:	d003      	beq.n	800d232 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 faa0 	bl	800d770 <HAL_TIM_IC_CaptureCallback>
 800d230:	e005      	b.n	800d23e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7f3 fa26 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 faa3 	bl	800d784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	f003 0310 	and.w	r3, r3, #16
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d020      	beq.n	800d290 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f003 0310 	and.w	r3, r3, #16
 800d254:	2b00      	cmp	r3, #0
 800d256:	d01b      	beq.n	800d290 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f06f 0210 	mvn.w	r2, #16
 800d260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2208      	movs	r2, #8
 800d266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	69db      	ldr	r3, [r3, #28]
 800d26e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d272:	2b00      	cmp	r3, #0
 800d274:	d003      	beq.n	800d27e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fa7a 	bl	800d770 <HAL_TIM_IC_CaptureCallback>
 800d27c:	e005      	b.n	800d28a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7f3 fa00 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 fa7d 	bl	800d784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00c      	beq.n	800d2b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d007      	beq.n	800d2b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f06f 0201 	mvn.w	r2, #1
 800d2ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7f4 ffa0 	bl	80021f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d104      	bne.n	800d2c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00c      	beq.n	800d2e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d007      	beq.n	800d2e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d2da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 ffbb 	bl	800e258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00c      	beq.n	800d306 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d007      	beq.n	800d306 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 ffb3 	bl	800e26c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00c      	beq.n	800d32a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d316:	2b00      	cmp	r3, #0
 800d318:	d007      	beq.n	800d32a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fa37 	bl	800d798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	f003 0320 	and.w	r3, r3, #32
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00c      	beq.n	800d34e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f003 0320 	and.w	r3, r3, #32
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d007      	beq.n	800d34e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f06f 0220 	mvn.w	r2, #32
 800d346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 ff7b 	bl	800e244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d34e:	bf00      	nop
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d364:	2300      	movs	r3, #0
 800d366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d101      	bne.n	800d376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d372:	2302      	movs	r3, #2
 800d374:	e0ff      	b.n	800d576 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b14      	cmp	r3, #20
 800d382:	f200 80f0 	bhi.w	800d566 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d386:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38c:	0800d3e1 	.word	0x0800d3e1
 800d390:	0800d567 	.word	0x0800d567
 800d394:	0800d567 	.word	0x0800d567
 800d398:	0800d567 	.word	0x0800d567
 800d39c:	0800d421 	.word	0x0800d421
 800d3a0:	0800d567 	.word	0x0800d567
 800d3a4:	0800d567 	.word	0x0800d567
 800d3a8:	0800d567 	.word	0x0800d567
 800d3ac:	0800d463 	.word	0x0800d463
 800d3b0:	0800d567 	.word	0x0800d567
 800d3b4:	0800d567 	.word	0x0800d567
 800d3b8:	0800d567 	.word	0x0800d567
 800d3bc:	0800d4a3 	.word	0x0800d4a3
 800d3c0:	0800d567 	.word	0x0800d567
 800d3c4:	0800d567 	.word	0x0800d567
 800d3c8:	0800d567 	.word	0x0800d567
 800d3cc:	0800d4e5 	.word	0x0800d4e5
 800d3d0:	0800d567 	.word	0x0800d567
 800d3d4:	0800d567 	.word	0x0800d567
 800d3d8:	0800d567 	.word	0x0800d567
 800d3dc:	0800d525 	.word	0x0800d525
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	68b9      	ldr	r1, [r7, #8]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 fa86 	bl	800d8f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	699a      	ldr	r2, [r3, #24]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f042 0208 	orr.w	r2, r2, #8
 800d3fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	699a      	ldr	r2, [r3, #24]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f022 0204 	bic.w	r2, r2, #4
 800d40a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6999      	ldr	r1, [r3, #24]
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	691a      	ldr	r2, [r3, #16]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	430a      	orrs	r2, r1
 800d41c:	619a      	str	r2, [r3, #24]
      break;
 800d41e:	e0a5      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	4618      	mov	r0, r3
 800d428:	f000 faf6 	bl	800da18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	699a      	ldr	r2, [r3, #24]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d43a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	699a      	ldr	r2, [r3, #24]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d44a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6999      	ldr	r1, [r3, #24]
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	021a      	lsls	r2, r3, #8
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	430a      	orrs	r2, r1
 800d45e:	619a      	str	r2, [r3, #24]
      break;
 800d460:	e084      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	68b9      	ldr	r1, [r7, #8]
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 fb5f 	bl	800db2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	69da      	ldr	r2, [r3, #28]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f042 0208 	orr.w	r2, r2, #8
 800d47c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	69da      	ldr	r2, [r3, #28]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f022 0204 	bic.w	r2, r2, #4
 800d48c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	69d9      	ldr	r1, [r3, #28]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	691a      	ldr	r2, [r3, #16]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	430a      	orrs	r2, r1
 800d49e:	61da      	str	r2, [r3, #28]
      break;
 800d4a0:	e064      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68b9      	ldr	r1, [r7, #8]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f000 fbc7 	bl	800dc3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	69da      	ldr	r2, [r3, #28]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69da      	ldr	r2, [r3, #28]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	69d9      	ldr	r1, [r3, #28]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	021a      	lsls	r2, r3, #8
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	430a      	orrs	r2, r1
 800d4e0:	61da      	str	r2, [r3, #28]
      break;
 800d4e2:	e043      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 fc10 	bl	800dd10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f042 0208 	orr.w	r2, r2, #8
 800d4fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f022 0204 	bic.w	r2, r2, #4
 800d50e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	691a      	ldr	r2, [r3, #16]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	430a      	orrs	r2, r1
 800d520:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d522:	e023      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 fc54 	bl	800ddd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d53e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d54e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	691b      	ldr	r3, [r3, #16]
 800d55a:	021a      	lsls	r2, r3, #8
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	430a      	orrs	r2, r1
 800d562:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d564:	e002      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d566:	2301      	movs	r3, #1
 800d568:	75fb      	strb	r3, [r7, #23]
      break;
 800d56a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d574:	7dfb      	ldrb	r3, [r7, #23]
}
 800d576:	4618      	mov	r0, r3
 800d578:	3718      	adds	r7, #24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop

0800d580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d58a:	2300      	movs	r3, #0
 800d58c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d594:	2b01      	cmp	r3, #1
 800d596:	d101      	bne.n	800d59c <HAL_TIM_ConfigClockSource+0x1c>
 800d598:	2302      	movs	r3, #2
 800d59a:	e0dc      	b.n	800d756 <HAL_TIM_ConfigClockSource+0x1d6>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	4b6a      	ldr	r3, [pc, #424]	; (800d760 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a64      	ldr	r2, [pc, #400]	; (800d764 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	f000 80a9 	beq.w	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d5d8:	4a62      	ldr	r2, [pc, #392]	; (800d764 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	f200 80ae 	bhi.w	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d5e0:	4a61      	ldr	r2, [pc, #388]	; (800d768 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	f000 80a1 	beq.w	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d5e8:	4a5f      	ldr	r2, [pc, #380]	; (800d768 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	f200 80a6 	bhi.w	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d5f0:	4a5e      	ldr	r2, [pc, #376]	; (800d76c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	f000 8099 	beq.w	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d5f8:	4a5c      	ldr	r2, [pc, #368]	; (800d76c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	f200 809e 	bhi.w	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d600:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d604:	f000 8091 	beq.w	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d608:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d60c:	f200 8096 	bhi.w	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d614:	f000 8089 	beq.w	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d61c:	f200 808e 	bhi.w	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d624:	d03e      	beq.n	800d6a4 <HAL_TIM_ConfigClockSource+0x124>
 800d626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d62a:	f200 8087 	bhi.w	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d62e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d632:	f000 8086 	beq.w	800d742 <HAL_TIM_ConfigClockSource+0x1c2>
 800d636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d63a:	d87f      	bhi.n	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d63c:	2b70      	cmp	r3, #112	; 0x70
 800d63e:	d01a      	beq.n	800d676 <HAL_TIM_ConfigClockSource+0xf6>
 800d640:	2b70      	cmp	r3, #112	; 0x70
 800d642:	d87b      	bhi.n	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d644:	2b60      	cmp	r3, #96	; 0x60
 800d646:	d050      	beq.n	800d6ea <HAL_TIM_ConfigClockSource+0x16a>
 800d648:	2b60      	cmp	r3, #96	; 0x60
 800d64a:	d877      	bhi.n	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d64c:	2b50      	cmp	r3, #80	; 0x50
 800d64e:	d03c      	beq.n	800d6ca <HAL_TIM_ConfigClockSource+0x14a>
 800d650:	2b50      	cmp	r3, #80	; 0x50
 800d652:	d873      	bhi.n	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d654:	2b40      	cmp	r3, #64	; 0x40
 800d656:	d058      	beq.n	800d70a <HAL_TIM_ConfigClockSource+0x18a>
 800d658:	2b40      	cmp	r3, #64	; 0x40
 800d65a:	d86f      	bhi.n	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d65c:	2b30      	cmp	r3, #48	; 0x30
 800d65e:	d064      	beq.n	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d660:	2b30      	cmp	r3, #48	; 0x30
 800d662:	d86b      	bhi.n	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d664:	2b20      	cmp	r3, #32
 800d666:	d060      	beq.n	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d668:	2b20      	cmp	r3, #32
 800d66a:	d867      	bhi.n	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d05c      	beq.n	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d670:	2b10      	cmp	r3, #16
 800d672:	d05a      	beq.n	800d72a <HAL_TIM_ConfigClockSource+0x1aa>
 800d674:	e062      	b.n	800d73c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	6899      	ldr	r1, [r3, #8]
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	685a      	ldr	r2, [r3, #4]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	f000 fc8b 	bl	800dfa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	609a      	str	r2, [r3, #8]
      break;
 800d6a2:	e04f      	b.n	800d744 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6818      	ldr	r0, [r3, #0]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	6899      	ldr	r1, [r3, #8]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	f000 fc74 	bl	800dfa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	689a      	ldr	r2, [r3, #8]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6c6:	609a      	str	r2, [r3, #8]
      break;
 800d6c8:	e03c      	b.n	800d744 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6818      	ldr	r0, [r3, #0]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	6859      	ldr	r1, [r3, #4]
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f000 fbe4 	bl	800dea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2150      	movs	r1, #80	; 0x50
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f000 fc3e 	bl	800df64 <TIM_ITRx_SetConfig>
      break;
 800d6e8:	e02c      	b.n	800d744 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6818      	ldr	r0, [r3, #0]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	6859      	ldr	r1, [r3, #4]
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	f000 fc03 	bl	800df02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2160      	movs	r1, #96	; 0x60
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fc2e 	bl	800df64 <TIM_ITRx_SetConfig>
      break;
 800d708:	e01c      	b.n	800d744 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6818      	ldr	r0, [r3, #0]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	6859      	ldr	r1, [r3, #4]
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	461a      	mov	r2, r3
 800d718:	f000 fbc4 	bl	800dea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2140      	movs	r1, #64	; 0x40
 800d722:	4618      	mov	r0, r3
 800d724:	f000 fc1e 	bl	800df64 <TIM_ITRx_SetConfig>
      break;
 800d728:	e00c      	b.n	800d744 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4619      	mov	r1, r3
 800d734:	4610      	mov	r0, r2
 800d736:	f000 fc15 	bl	800df64 <TIM_ITRx_SetConfig>
      break;
 800d73a:	e003      	b.n	800d744 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	73fb      	strb	r3, [r7, #15]
      break;
 800d740:	e000      	b.n	800d744 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d754:	7bfb      	ldrb	r3, [r7, #15]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	ffceff88 	.word	0xffceff88
 800d764:	00100040 	.word	0x00100040
 800d768:	00100030 	.word	0x00100030
 800d76c:	00100020 	.word	0x00100020

0800d770 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a46      	ldr	r2, [pc, #280]	; (800d8d8 <TIM_Base_SetConfig+0x12c>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d013      	beq.n	800d7ec <TIM_Base_SetConfig+0x40>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7ca:	d00f      	beq.n	800d7ec <TIM_Base_SetConfig+0x40>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a43      	ldr	r2, [pc, #268]	; (800d8dc <TIM_Base_SetConfig+0x130>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d00b      	beq.n	800d7ec <TIM_Base_SetConfig+0x40>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a42      	ldr	r2, [pc, #264]	; (800d8e0 <TIM_Base_SetConfig+0x134>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d007      	beq.n	800d7ec <TIM_Base_SetConfig+0x40>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a41      	ldr	r2, [pc, #260]	; (800d8e4 <TIM_Base_SetConfig+0x138>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d003      	beq.n	800d7ec <TIM_Base_SetConfig+0x40>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a40      	ldr	r2, [pc, #256]	; (800d8e8 <TIM_Base_SetConfig+0x13c>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d108      	bne.n	800d7fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a35      	ldr	r2, [pc, #212]	; (800d8d8 <TIM_Base_SetConfig+0x12c>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d01f      	beq.n	800d846 <TIM_Base_SetConfig+0x9a>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d80c:	d01b      	beq.n	800d846 <TIM_Base_SetConfig+0x9a>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a32      	ldr	r2, [pc, #200]	; (800d8dc <TIM_Base_SetConfig+0x130>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d017      	beq.n	800d846 <TIM_Base_SetConfig+0x9a>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a31      	ldr	r2, [pc, #196]	; (800d8e0 <TIM_Base_SetConfig+0x134>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d013      	beq.n	800d846 <TIM_Base_SetConfig+0x9a>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a30      	ldr	r2, [pc, #192]	; (800d8e4 <TIM_Base_SetConfig+0x138>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d00f      	beq.n	800d846 <TIM_Base_SetConfig+0x9a>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a2f      	ldr	r2, [pc, #188]	; (800d8e8 <TIM_Base_SetConfig+0x13c>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d00b      	beq.n	800d846 <TIM_Base_SetConfig+0x9a>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a2e      	ldr	r2, [pc, #184]	; (800d8ec <TIM_Base_SetConfig+0x140>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d007      	beq.n	800d846 <TIM_Base_SetConfig+0x9a>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a2d      	ldr	r2, [pc, #180]	; (800d8f0 <TIM_Base_SetConfig+0x144>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d003      	beq.n	800d846 <TIM_Base_SetConfig+0x9a>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a2c      	ldr	r2, [pc, #176]	; (800d8f4 <TIM_Base_SetConfig+0x148>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d108      	bne.n	800d858 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d84c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	4313      	orrs	r3, r2
 800d856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	695b      	ldr	r3, [r3, #20]
 800d862:	4313      	orrs	r3, r2
 800d864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	689a      	ldr	r2, [r3, #8]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a16      	ldr	r2, [pc, #88]	; (800d8d8 <TIM_Base_SetConfig+0x12c>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d00f      	beq.n	800d8a4 <TIM_Base_SetConfig+0xf8>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4a18      	ldr	r2, [pc, #96]	; (800d8e8 <TIM_Base_SetConfig+0x13c>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d00b      	beq.n	800d8a4 <TIM_Base_SetConfig+0xf8>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4a17      	ldr	r2, [pc, #92]	; (800d8ec <TIM_Base_SetConfig+0x140>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d007      	beq.n	800d8a4 <TIM_Base_SetConfig+0xf8>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4a16      	ldr	r2, [pc, #88]	; (800d8f0 <TIM_Base_SetConfig+0x144>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d003      	beq.n	800d8a4 <TIM_Base_SetConfig+0xf8>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4a15      	ldr	r2, [pc, #84]	; (800d8f4 <TIM_Base_SetConfig+0x148>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d103      	bne.n	800d8ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	691a      	ldr	r2, [r3, #16]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	f003 0301 	and.w	r3, r3, #1
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d105      	bne.n	800d8ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	f023 0201 	bic.w	r2, r3, #1
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	611a      	str	r2, [r3, #16]
  }
}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	40010000 	.word	0x40010000
 800d8dc:	40000400 	.word	0x40000400
 800d8e0:	40000800 	.word	0x40000800
 800d8e4:	40000c00 	.word	0x40000c00
 800d8e8:	40010400 	.word	0x40010400
 800d8ec:	40014000 	.word	0x40014000
 800d8f0:	40014400 	.word	0x40014400
 800d8f4:	40014800 	.word	0x40014800

0800d8f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b087      	sub	sp, #28
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a1b      	ldr	r3, [r3, #32]
 800d906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6a1b      	ldr	r3, [r3, #32]
 800d90c:	f023 0201 	bic.w	r2, r3, #1
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	699b      	ldr	r3, [r3, #24]
 800d91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	4b37      	ldr	r3, [pc, #220]	; (800da00 <TIM_OC1_SetConfig+0x108>)
 800d924:	4013      	ands	r3, r2
 800d926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f023 0303 	bic.w	r3, r3, #3
 800d92e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	4313      	orrs	r3, r2
 800d938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f023 0302 	bic.w	r3, r3, #2
 800d940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	4313      	orrs	r3, r2
 800d94a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a2d      	ldr	r2, [pc, #180]	; (800da04 <TIM_OC1_SetConfig+0x10c>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d00f      	beq.n	800d974 <TIM_OC1_SetConfig+0x7c>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a2c      	ldr	r2, [pc, #176]	; (800da08 <TIM_OC1_SetConfig+0x110>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d00b      	beq.n	800d974 <TIM_OC1_SetConfig+0x7c>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a2b      	ldr	r2, [pc, #172]	; (800da0c <TIM_OC1_SetConfig+0x114>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d007      	beq.n	800d974 <TIM_OC1_SetConfig+0x7c>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4a2a      	ldr	r2, [pc, #168]	; (800da10 <TIM_OC1_SetConfig+0x118>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d003      	beq.n	800d974 <TIM_OC1_SetConfig+0x7c>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a29      	ldr	r2, [pc, #164]	; (800da14 <TIM_OC1_SetConfig+0x11c>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d10c      	bne.n	800d98e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	f023 0308 	bic.w	r3, r3, #8
 800d97a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	697a      	ldr	r2, [r7, #20]
 800d982:	4313      	orrs	r3, r2
 800d984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	f023 0304 	bic.w	r3, r3, #4
 800d98c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4a1c      	ldr	r2, [pc, #112]	; (800da04 <TIM_OC1_SetConfig+0x10c>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d00f      	beq.n	800d9b6 <TIM_OC1_SetConfig+0xbe>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a1b      	ldr	r2, [pc, #108]	; (800da08 <TIM_OC1_SetConfig+0x110>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d00b      	beq.n	800d9b6 <TIM_OC1_SetConfig+0xbe>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a1a      	ldr	r2, [pc, #104]	; (800da0c <TIM_OC1_SetConfig+0x114>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d007      	beq.n	800d9b6 <TIM_OC1_SetConfig+0xbe>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a19      	ldr	r2, [pc, #100]	; (800da10 <TIM_OC1_SetConfig+0x118>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d003      	beq.n	800d9b6 <TIM_OC1_SetConfig+0xbe>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a18      	ldr	r2, [pc, #96]	; (800da14 <TIM_OC1_SetConfig+0x11c>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d111      	bne.n	800d9da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d9c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	693a      	ldr	r2, [r7, #16]
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	693a      	ldr	r2, [r7, #16]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	685a      	ldr	r2, [r3, #4]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	697a      	ldr	r2, [r7, #20]
 800d9f2:	621a      	str	r2, [r3, #32]
}
 800d9f4:	bf00      	nop
 800d9f6:	371c      	adds	r7, #28
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr
 800da00:	fffeff8f 	.word	0xfffeff8f
 800da04:	40010000 	.word	0x40010000
 800da08:	40010400 	.word	0x40010400
 800da0c:	40014000 	.word	0x40014000
 800da10:	40014400 	.word	0x40014400
 800da14:	40014800 	.word	0x40014800

0800da18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da18:	b480      	push	{r7}
 800da1a:	b087      	sub	sp, #28
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a1b      	ldr	r3, [r3, #32]
 800da26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6a1b      	ldr	r3, [r3, #32]
 800da2c:	f023 0210 	bic.w	r2, r3, #16
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	699b      	ldr	r3, [r3, #24]
 800da3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	4b34      	ldr	r3, [pc, #208]	; (800db14 <TIM_OC2_SetConfig+0xfc>)
 800da44:	4013      	ands	r3, r2
 800da46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	021b      	lsls	r3, r3, #8
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	4313      	orrs	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f023 0320 	bic.w	r3, r3, #32
 800da62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	011b      	lsls	r3, r3, #4
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	4313      	orrs	r3, r2
 800da6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a29      	ldr	r2, [pc, #164]	; (800db18 <TIM_OC2_SetConfig+0x100>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d003      	beq.n	800da80 <TIM_OC2_SetConfig+0x68>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a28      	ldr	r2, [pc, #160]	; (800db1c <TIM_OC2_SetConfig+0x104>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d10d      	bne.n	800da9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	68db      	ldr	r3, [r3, #12]
 800da8c:	011b      	lsls	r3, r3, #4
 800da8e:	697a      	ldr	r2, [r7, #20]
 800da90:	4313      	orrs	r3, r2
 800da92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a1e      	ldr	r2, [pc, #120]	; (800db18 <TIM_OC2_SetConfig+0x100>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d00f      	beq.n	800dac4 <TIM_OC2_SetConfig+0xac>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4a1d      	ldr	r2, [pc, #116]	; (800db1c <TIM_OC2_SetConfig+0x104>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d00b      	beq.n	800dac4 <TIM_OC2_SetConfig+0xac>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4a1c      	ldr	r2, [pc, #112]	; (800db20 <TIM_OC2_SetConfig+0x108>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d007      	beq.n	800dac4 <TIM_OC2_SetConfig+0xac>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a1b      	ldr	r2, [pc, #108]	; (800db24 <TIM_OC2_SetConfig+0x10c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d003      	beq.n	800dac4 <TIM_OC2_SetConfig+0xac>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a1a      	ldr	r2, [pc, #104]	; (800db28 <TIM_OC2_SetConfig+0x110>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d113      	bne.n	800daec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800daca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	695b      	ldr	r3, [r3, #20]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	693a      	ldr	r2, [r7, #16]
 800dadc:	4313      	orrs	r3, r2
 800dade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	693a      	ldr	r2, [r7, #16]
 800dae8:	4313      	orrs	r3, r2
 800daea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	697a      	ldr	r2, [r7, #20]
 800db04:	621a      	str	r2, [r3, #32]
}
 800db06:	bf00      	nop
 800db08:	371c      	adds	r7, #28
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	feff8fff 	.word	0xfeff8fff
 800db18:	40010000 	.word	0x40010000
 800db1c:	40010400 	.word	0x40010400
 800db20:	40014000 	.word	0x40014000
 800db24:	40014400 	.word	0x40014400
 800db28:	40014800 	.word	0x40014800

0800db2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b087      	sub	sp, #28
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a1b      	ldr	r3, [r3, #32]
 800db3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a1b      	ldr	r3, [r3, #32]
 800db40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	69db      	ldr	r3, [r3, #28]
 800db52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	4b33      	ldr	r3, [pc, #204]	; (800dc24 <TIM_OC3_SetConfig+0xf8>)
 800db58:	4013      	ands	r3, r2
 800db5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f023 0303 	bic.w	r3, r3, #3
 800db62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	021b      	lsls	r3, r3, #8
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	4313      	orrs	r3, r2
 800db80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4a28      	ldr	r2, [pc, #160]	; (800dc28 <TIM_OC3_SetConfig+0xfc>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d003      	beq.n	800db92 <TIM_OC3_SetConfig+0x66>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4a27      	ldr	r2, [pc, #156]	; (800dc2c <TIM_OC3_SetConfig+0x100>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d10d      	bne.n	800dbae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	021b      	lsls	r3, r3, #8
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4a1d      	ldr	r2, [pc, #116]	; (800dc28 <TIM_OC3_SetConfig+0xfc>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d00f      	beq.n	800dbd6 <TIM_OC3_SetConfig+0xaa>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a1c      	ldr	r2, [pc, #112]	; (800dc2c <TIM_OC3_SetConfig+0x100>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d00b      	beq.n	800dbd6 <TIM_OC3_SetConfig+0xaa>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4a1b      	ldr	r2, [pc, #108]	; (800dc30 <TIM_OC3_SetConfig+0x104>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d007      	beq.n	800dbd6 <TIM_OC3_SetConfig+0xaa>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4a1a      	ldr	r2, [pc, #104]	; (800dc34 <TIM_OC3_SetConfig+0x108>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d003      	beq.n	800dbd6 <TIM_OC3_SetConfig+0xaa>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a19      	ldr	r2, [pc, #100]	; (800dc38 <TIM_OC3_SetConfig+0x10c>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d113      	bne.n	800dbfe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	695b      	ldr	r3, [r3, #20]
 800dbea:	011b      	lsls	r3, r3, #4
 800dbec:	693a      	ldr	r2, [r7, #16]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	011b      	lsls	r3, r3, #4
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68fa      	ldr	r2, [r7, #12]
 800dc08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	685a      	ldr	r2, [r3, #4]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	621a      	str	r2, [r3, #32]
}
 800dc18:	bf00      	nop
 800dc1a:	371c      	adds	r7, #28
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	fffeff8f 	.word	0xfffeff8f
 800dc28:	40010000 	.word	0x40010000
 800dc2c:	40010400 	.word	0x40010400
 800dc30:	40014000 	.word	0x40014000
 800dc34:	40014400 	.word	0x40014400
 800dc38:	40014800 	.word	0x40014800

0800dc3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a1b      	ldr	r3, [r3, #32]
 800dc4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a1b      	ldr	r3, [r3, #32]
 800dc50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	69db      	ldr	r3, [r3, #28]
 800dc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	4b24      	ldr	r3, [pc, #144]	; (800dcf8 <TIM_OC4_SetConfig+0xbc>)
 800dc68:	4013      	ands	r3, r2
 800dc6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	021b      	lsls	r3, r3, #8
 800dc7a:	68fa      	ldr	r2, [r7, #12]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	031b      	lsls	r3, r3, #12
 800dc8e:	693a      	ldr	r2, [r7, #16]
 800dc90:	4313      	orrs	r3, r2
 800dc92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4a19      	ldr	r2, [pc, #100]	; (800dcfc <TIM_OC4_SetConfig+0xc0>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d00f      	beq.n	800dcbc <TIM_OC4_SetConfig+0x80>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a18      	ldr	r2, [pc, #96]	; (800dd00 <TIM_OC4_SetConfig+0xc4>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d00b      	beq.n	800dcbc <TIM_OC4_SetConfig+0x80>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4a17      	ldr	r2, [pc, #92]	; (800dd04 <TIM_OC4_SetConfig+0xc8>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d007      	beq.n	800dcbc <TIM_OC4_SetConfig+0x80>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4a16      	ldr	r2, [pc, #88]	; (800dd08 <TIM_OC4_SetConfig+0xcc>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d003      	beq.n	800dcbc <TIM_OC4_SetConfig+0x80>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	4a15      	ldr	r2, [pc, #84]	; (800dd0c <TIM_OC4_SetConfig+0xd0>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d109      	bne.n	800dcd0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	695b      	ldr	r3, [r3, #20]
 800dcc8:	019b      	lsls	r3, r3, #6
 800dcca:	697a      	ldr	r2, [r7, #20]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	685a      	ldr	r2, [r3, #4]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	693a      	ldr	r2, [r7, #16]
 800dce8:	621a      	str	r2, [r3, #32]
}
 800dcea:	bf00      	nop
 800dcec:	371c      	adds	r7, #28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	feff8fff 	.word	0xfeff8fff
 800dcfc:	40010000 	.word	0x40010000
 800dd00:	40010400 	.word	0x40010400
 800dd04:	40014000 	.word	0x40014000
 800dd08:	40014400 	.word	0x40014400
 800dd0c:	40014800 	.word	0x40014800

0800dd10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a1b      	ldr	r3, [r3, #32]
 800dd1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	4b21      	ldr	r3, [pc, #132]	; (800ddc0 <TIM_OC5_SetConfig+0xb0>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dd50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	041b      	lsls	r3, r3, #16
 800dd58:	693a      	ldr	r2, [r7, #16]
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a18      	ldr	r2, [pc, #96]	; (800ddc4 <TIM_OC5_SetConfig+0xb4>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d00f      	beq.n	800dd86 <TIM_OC5_SetConfig+0x76>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a17      	ldr	r2, [pc, #92]	; (800ddc8 <TIM_OC5_SetConfig+0xb8>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d00b      	beq.n	800dd86 <TIM_OC5_SetConfig+0x76>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a16      	ldr	r2, [pc, #88]	; (800ddcc <TIM_OC5_SetConfig+0xbc>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d007      	beq.n	800dd86 <TIM_OC5_SetConfig+0x76>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a15      	ldr	r2, [pc, #84]	; (800ddd0 <TIM_OC5_SetConfig+0xc0>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d003      	beq.n	800dd86 <TIM_OC5_SetConfig+0x76>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a14      	ldr	r2, [pc, #80]	; (800ddd4 <TIM_OC5_SetConfig+0xc4>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d109      	bne.n	800dd9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	021b      	lsls	r3, r3, #8
 800dd94:	697a      	ldr	r2, [r7, #20]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	697a      	ldr	r2, [r7, #20]
 800dd9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	621a      	str	r2, [r3, #32]
}
 800ddb4:	bf00      	nop
 800ddb6:	371c      	adds	r7, #28
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	fffeff8f 	.word	0xfffeff8f
 800ddc4:	40010000 	.word	0x40010000
 800ddc8:	40010400 	.word	0x40010400
 800ddcc:	40014000 	.word	0x40014000
 800ddd0:	40014400 	.word	0x40014400
 800ddd4:	40014800 	.word	0x40014800

0800ddd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b087      	sub	sp, #28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6a1b      	ldr	r3, [r3, #32]
 800dde6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a1b      	ldr	r3, [r3, #32]
 800ddec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	4b22      	ldr	r3, [pc, #136]	; (800de8c <TIM_OC6_SetConfig+0xb4>)
 800de04:	4013      	ands	r3, r2
 800de06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	021b      	lsls	r3, r3, #8
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	4313      	orrs	r3, r2
 800de12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	051b      	lsls	r3, r3, #20
 800de22:	693a      	ldr	r2, [r7, #16]
 800de24:	4313      	orrs	r3, r2
 800de26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a19      	ldr	r2, [pc, #100]	; (800de90 <TIM_OC6_SetConfig+0xb8>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d00f      	beq.n	800de50 <TIM_OC6_SetConfig+0x78>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a18      	ldr	r2, [pc, #96]	; (800de94 <TIM_OC6_SetConfig+0xbc>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d00b      	beq.n	800de50 <TIM_OC6_SetConfig+0x78>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a17      	ldr	r2, [pc, #92]	; (800de98 <TIM_OC6_SetConfig+0xc0>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d007      	beq.n	800de50 <TIM_OC6_SetConfig+0x78>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4a16      	ldr	r2, [pc, #88]	; (800de9c <TIM_OC6_SetConfig+0xc4>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d003      	beq.n	800de50 <TIM_OC6_SetConfig+0x78>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a15      	ldr	r2, [pc, #84]	; (800dea0 <TIM_OC6_SetConfig+0xc8>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d109      	bne.n	800de64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	695b      	ldr	r3, [r3, #20]
 800de5c:	029b      	lsls	r3, r3, #10
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	4313      	orrs	r3, r2
 800de62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	685a      	ldr	r2, [r3, #4]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	693a      	ldr	r2, [r7, #16]
 800de7c:	621a      	str	r2, [r3, #32]
}
 800de7e:	bf00      	nop
 800de80:	371c      	adds	r7, #28
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	feff8fff 	.word	0xfeff8fff
 800de90:	40010000 	.word	0x40010000
 800de94:	40010400 	.word	0x40010400
 800de98:	40014000 	.word	0x40014000
 800de9c:	40014400 	.word	0x40014400
 800dea0:	40014800 	.word	0x40014800

0800dea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b087      	sub	sp, #28
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6a1b      	ldr	r3, [r3, #32]
 800deb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	f023 0201 	bic.w	r2, r3, #1
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	699b      	ldr	r3, [r3, #24]
 800dec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	011b      	lsls	r3, r3, #4
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	f023 030a 	bic.w	r3, r3, #10
 800dee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dee2:	697a      	ldr	r2, [r7, #20]
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	4313      	orrs	r3, r2
 800dee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	693a      	ldr	r2, [r7, #16]
 800deee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	697a      	ldr	r2, [r7, #20]
 800def4:	621a      	str	r2, [r3, #32]
}
 800def6:	bf00      	nop
 800def8:	371c      	adds	r7, #28
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df02:	b480      	push	{r7}
 800df04:	b087      	sub	sp, #28
 800df06:	af00      	add	r7, sp, #0
 800df08:	60f8      	str	r0, [r7, #12]
 800df0a:	60b9      	str	r1, [r7, #8]
 800df0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6a1b      	ldr	r3, [r3, #32]
 800df12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6a1b      	ldr	r3, [r3, #32]
 800df18:	f023 0210 	bic.w	r2, r3, #16
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	699b      	ldr	r3, [r3, #24]
 800df24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	031b      	lsls	r3, r3, #12
 800df32:	693a      	ldr	r2, [r7, #16]
 800df34:	4313      	orrs	r3, r2
 800df36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	011b      	lsls	r3, r3, #4
 800df44:	697a      	ldr	r2, [r7, #20]
 800df46:	4313      	orrs	r3, r2
 800df48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	621a      	str	r2, [r3, #32]
}
 800df56:	bf00      	nop
 800df58:	371c      	adds	r7, #28
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
	...

0800df64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800df64:	b480      	push	{r7}
 800df66:	b085      	sub	sp, #20
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	4b09      	ldr	r3, [pc, #36]	; (800df9c <TIM_ITRx_SetConfig+0x38>)
 800df78:	4013      	ands	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800df7c:	683a      	ldr	r2, [r7, #0]
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	4313      	orrs	r3, r2
 800df82:	f043 0307 	orr.w	r3, r3, #7
 800df86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	609a      	str	r2, [r3, #8]
}
 800df8e:	bf00      	nop
 800df90:	3714      	adds	r7, #20
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	ffcfff8f 	.word	0xffcfff8f

0800dfa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b087      	sub	sp, #28
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dfba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	021a      	lsls	r2, r3, #8
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	431a      	orrs	r2, r3
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	697a      	ldr	r2, [r7, #20]
 800dfd2:	609a      	str	r2, [r3, #8]
}
 800dfd4:	bf00      	nop
 800dfd6:	371c      	adds	r7, #28
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b087      	sub	sp, #28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	f003 031f 	and.w	r3, r3, #31
 800dff2:	2201      	movs	r2, #1
 800dff4:	fa02 f303 	lsl.w	r3, r2, r3
 800dff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6a1a      	ldr	r2, [r3, #32]
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	43db      	mvns	r3, r3
 800e002:	401a      	ands	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6a1a      	ldr	r2, [r3, #32]
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	f003 031f 	and.w	r3, r3, #31
 800e012:	6879      	ldr	r1, [r7, #4]
 800e014:	fa01 f303 	lsl.w	r3, r1, r3
 800e018:	431a      	orrs	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	621a      	str	r2, [r3, #32]
}
 800e01e:	bf00      	nop
 800e020:	371c      	adds	r7, #28
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr
	...

0800e02c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d101      	bne.n	800e044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e040:	2302      	movs	r3, #2
 800e042:	e06d      	b.n	800e120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2202      	movs	r2, #2
 800e050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a30      	ldr	r2, [pc, #192]	; (800e12c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d004      	beq.n	800e078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4a2f      	ldr	r2, [pc, #188]	; (800e130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d108      	bne.n	800e08a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e07e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	4313      	orrs	r3, r2
 800e088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	4313      	orrs	r3, r2
 800e09a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a20      	ldr	r2, [pc, #128]	; (800e12c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d022      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0b6:	d01d      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a1d      	ldr	r2, [pc, #116]	; (800e134 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d018      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a1c      	ldr	r2, [pc, #112]	; (800e138 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d013      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a1a      	ldr	r2, [pc, #104]	; (800e13c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d00e      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a15      	ldr	r2, [pc, #84]	; (800e130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d009      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a16      	ldr	r2, [pc, #88]	; (800e140 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d004      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a15      	ldr	r2, [pc, #84]	; (800e144 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d10c      	bne.n	800e10e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	4313      	orrs	r3, r2
 800e104:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e11e:	2300      	movs	r3, #0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	40010000 	.word	0x40010000
 800e130:	40010400 	.word	0x40010400
 800e134:	40000400 	.word	0x40000400
 800e138:	40000800 	.word	0x40000800
 800e13c:	40000c00 	.word	0x40000c00
 800e140:	40001800 	.word	0x40001800
 800e144:	40014000 	.word	0x40014000

0800e148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e152:	2300      	movs	r3, #0
 800e154:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d101      	bne.n	800e164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e160:	2302      	movs	r3, #2
 800e162:	e065      	b.n	800e230 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	4313      	orrs	r3, r2
 800e178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	4313      	orrs	r3, r2
 800e186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	4313      	orrs	r3, r2
 800e194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	695b      	ldr	r3, [r3, #20]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	041b      	lsls	r3, r3, #16
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a16      	ldr	r2, [pc, #88]	; (800e23c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d004      	beq.n	800e1f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a14      	ldr	r2, [pc, #80]	; (800e240 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d115      	bne.n	800e21e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1fc:	051b      	lsls	r3, r3, #20
 800e1fe:	4313      	orrs	r3, r2
 800e200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	69db      	ldr	r3, [r3, #28]
 800e20c:	4313      	orrs	r3, r2
 800e20e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	6a1b      	ldr	r3, [r3, #32]
 800e21a:	4313      	orrs	r3, r2
 800e21c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr
 800e23c:	40010000 	.word	0x40010000
 800e240:	40010400 	.word	0x40010400

0800e244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e24c:	bf00      	nop
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e274:	bf00      	nop
 800e276:	370c      	adds	r7, #12
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	e042      	b.n	800e318 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d106      	bne.n	800e2aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7f4 fba9 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2224      	movs	r2, #36	; 0x24
 800e2ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f022 0201 	bic.w	r2, r2, #1
 800e2c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d002      	beq.n	800e2d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f001 fa44 	bl	800f758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 fcd9 	bl	800ec88 <UART_SetConfig>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d101      	bne.n	800e2e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e01b      	b.n	800e318 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	685a      	ldr	r2, [r3, #4]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e2ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	689a      	ldr	r2, [r3, #8]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e2fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f042 0201 	orr.w	r2, r2, #1
 800e30e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f001 fac3 	bl	800f89c <UART_CheckIdleState>
 800e316:	4603      	mov	r3, r0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08a      	sub	sp, #40	; 0x28
 800e324:	af02      	add	r7, sp, #8
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	603b      	str	r3, [r7, #0]
 800e32c:	4613      	mov	r3, r2
 800e32e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e336:	2b20      	cmp	r3, #32
 800e338:	d17b      	bne.n	800e432 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <HAL_UART_Transmit+0x26>
 800e340:	88fb      	ldrh	r3, [r7, #6]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d101      	bne.n	800e34a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e346:	2301      	movs	r3, #1
 800e348:	e074      	b.n	800e434 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2221      	movs	r2, #33	; 0x21
 800e356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e35a:	f7f4 fe89 	bl	8003070 <HAL_GetTick>
 800e35e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	88fa      	ldrh	r2, [r7, #6]
 800e364:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	88fa      	ldrh	r2, [r7, #6]
 800e36c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	689b      	ldr	r3, [r3, #8]
 800e374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e378:	d108      	bne.n	800e38c <HAL_UART_Transmit+0x6c>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d104      	bne.n	800e38c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	61bb      	str	r3, [r7, #24]
 800e38a:	e003      	b.n	800e394 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e390:	2300      	movs	r3, #0
 800e392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e394:	e030      	b.n	800e3f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	2200      	movs	r2, #0
 800e39e:	2180      	movs	r1, #128	; 0x80
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f001 fb25 	bl	800f9f0 <UART_WaitOnFlagUntilTimeout>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d005      	beq.n	800e3b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2220      	movs	r2, #32
 800e3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e3b4:	2303      	movs	r3, #3
 800e3b6:	e03d      	b.n	800e434 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10b      	bne.n	800e3d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	3302      	adds	r3, #2
 800e3d2:	61bb      	str	r3, [r7, #24]
 800e3d4:	e007      	b.n	800e3e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	781a      	ldrb	r2, [r3, #0]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1c8      	bne.n	800e396 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	2200      	movs	r2, #0
 800e40c:	2140      	movs	r1, #64	; 0x40
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f001 faee 	bl	800f9f0 <UART_WaitOnFlagUntilTimeout>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d005      	beq.n	800e426 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2220      	movs	r2, #32
 800e41e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e422:	2303      	movs	r3, #3
 800e424:	e006      	b.n	800e434 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2220      	movs	r2, #32
 800e42a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	e000      	b.n	800e434 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e432:	2302      	movs	r3, #2
  }
}
 800e434:	4618      	mov	r0, r3
 800e436:	3720      	adds	r7, #32
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08a      	sub	sp, #40	; 0x28
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	4613      	mov	r3, r2
 800e448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e450:	2b20      	cmp	r3, #32
 800e452:	d137      	bne.n	800e4c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <HAL_UART_Receive_IT+0x24>
 800e45a:	88fb      	ldrh	r3, [r7, #6]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d101      	bne.n	800e464 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e460:	2301      	movs	r3, #1
 800e462:	e030      	b.n	800e4c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2200      	movs	r2, #0
 800e468:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a18      	ldr	r2, [pc, #96]	; (800e4d0 <HAL_UART_Receive_IT+0x94>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d01f      	beq.n	800e4b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d018      	beq.n	800e4b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	e853 3f00 	ldrex	r3, [r3]
 800e48e:	613b      	str	r3, [r7, #16]
   return(result);
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	461a      	mov	r2, r3
 800e49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a0:	623b      	str	r3, [r7, #32]
 800e4a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a4:	69f9      	ldr	r1, [r7, #28]
 800e4a6:	6a3a      	ldr	r2, [r7, #32]
 800e4a8:	e841 2300 	strex	r3, r2, [r1]
 800e4ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1e6      	bne.n	800e482 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e4b4:	88fb      	ldrh	r3, [r7, #6]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	68b9      	ldr	r1, [r7, #8]
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f001 fb06 	bl	800facc <UART_Start_Receive_IT>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	e000      	b.n	800e4c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e4c4:	2302      	movs	r3, #2
  }
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3728      	adds	r7, #40	; 0x28
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	58000c00 	.word	0x58000c00

0800e4d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b0ba      	sub	sp, #232	; 0xe8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e4fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e4fe:	f640 030f 	movw	r3, #2063	; 0x80f
 800e502:	4013      	ands	r3, r2
 800e504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d11b      	bne.n	800e548 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e514:	f003 0320 	and.w	r3, r3, #32
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d015      	beq.n	800e548 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e51c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e520:	f003 0320 	and.w	r3, r3, #32
 800e524:	2b00      	cmp	r3, #0
 800e526:	d105      	bne.n	800e534 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e52c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e530:	2b00      	cmp	r3, #0
 800e532:	d009      	beq.n	800e548 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 8377 	beq.w	800ec2c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	4798      	blx	r3
      }
      return;
 800e546:	e371      	b.n	800ec2c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f000 8123 	beq.w	800e798 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e552:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e556:	4b8d      	ldr	r3, [pc, #564]	; (800e78c <HAL_UART_IRQHandler+0x2b8>)
 800e558:	4013      	ands	r3, r2
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d106      	bne.n	800e56c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e55e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e562:	4b8b      	ldr	r3, [pc, #556]	; (800e790 <HAL_UART_IRQHandler+0x2bc>)
 800e564:	4013      	ands	r3, r2
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8116 	beq.w	800e798 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e570:	f003 0301 	and.w	r3, r3, #1
 800e574:	2b00      	cmp	r3, #0
 800e576:	d011      	beq.n	800e59c <HAL_UART_IRQHandler+0xc8>
 800e578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00b      	beq.n	800e59c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2201      	movs	r2, #1
 800e58a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e592:	f043 0201 	orr.w	r2, r3, #1
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5a0:	f003 0302 	and.w	r3, r3, #2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d011      	beq.n	800e5cc <HAL_UART_IRQHandler+0xf8>
 800e5a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00b      	beq.n	800e5cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c2:	f043 0204 	orr.w	r2, r3, #4
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5d0:	f003 0304 	and.w	r3, r3, #4
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d011      	beq.n	800e5fc <HAL_UART_IRQHandler+0x128>
 800e5d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5dc:	f003 0301 	and.w	r3, r3, #1
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00b      	beq.n	800e5fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2204      	movs	r2, #4
 800e5ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5f2:	f043 0202 	orr.w	r2, r3, #2
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e600:	f003 0308 	and.w	r3, r3, #8
 800e604:	2b00      	cmp	r3, #0
 800e606:	d017      	beq.n	800e638 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e60c:	f003 0320 	and.w	r3, r3, #32
 800e610:	2b00      	cmp	r3, #0
 800e612:	d105      	bne.n	800e620 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e614:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e618:	4b5c      	ldr	r3, [pc, #368]	; (800e78c <HAL_UART_IRQHandler+0x2b8>)
 800e61a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00b      	beq.n	800e638 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2208      	movs	r2, #8
 800e626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e62e:	f043 0208 	orr.w	r2, r3, #8
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e63c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e640:	2b00      	cmp	r3, #0
 800e642:	d012      	beq.n	800e66a <HAL_UART_IRQHandler+0x196>
 800e644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00c      	beq.n	800e66a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e660:	f043 0220 	orr.w	r2, r3, #32
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e670:	2b00      	cmp	r3, #0
 800e672:	f000 82dd 	beq.w	800ec30 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e67a:	f003 0320 	and.w	r3, r3, #32
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d013      	beq.n	800e6aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e686:	f003 0320 	and.w	r3, r3, #32
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e68e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e696:	2b00      	cmp	r3, #0
 800e698:	d007      	beq.n	800e6aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d003      	beq.n	800e6aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6be:	2b40      	cmp	r3, #64	; 0x40
 800e6c0:	d005      	beq.n	800e6ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e6c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d054      	beq.n	800e778 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f001 fb1e 	bl	800fd10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6de:	2b40      	cmp	r3, #64	; 0x40
 800e6e0:	d146      	bne.n	800e770 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e6f0:	e853 3f00 	ldrex	r3, [r3]
 800e6f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e6f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e6fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3308      	adds	r3, #8
 800e70a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e70e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e71a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e71e:	e841 2300 	strex	r3, r2, [r1]
 800e722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1d9      	bne.n	800e6e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e734:	2b00      	cmp	r3, #0
 800e736:	d017      	beq.n	800e768 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e73e:	4a15      	ldr	r2, [pc, #84]	; (800e794 <HAL_UART_IRQHandler+0x2c0>)
 800e740:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e748:	4618      	mov	r0, r3
 800e74a:	f7f7 fe9d 	bl	8006488 <HAL_DMA_Abort_IT>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d019      	beq.n	800e788 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e762:	4610      	mov	r0, r2
 800e764:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e766:	e00f      	b.n	800e788 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 fa77 	bl	800ec5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e76e:	e00b      	b.n	800e788 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 fa73 	bl	800ec5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e776:	e007      	b.n	800e788 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 fa6f 	bl	800ec5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e786:	e253      	b.n	800ec30 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e788:	bf00      	nop
    return;
 800e78a:	e251      	b.n	800ec30 <HAL_UART_IRQHandler+0x75c>
 800e78c:	10000001 	.word	0x10000001
 800e790:	04000120 	.word	0x04000120
 800e794:	0800fddd 	.word	0x0800fddd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	f040 81e7 	bne.w	800eb70 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7a6:	f003 0310 	and.w	r3, r3, #16
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f000 81e0 	beq.w	800eb70 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7b4:	f003 0310 	and.w	r3, r3, #16
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f000 81d9 	beq.w	800eb70 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2210      	movs	r2, #16
 800e7c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d0:	2b40      	cmp	r3, #64	; 0x40
 800e7d2:	f040 8151 	bne.w	800ea78 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4a96      	ldr	r2, [pc, #600]	; (800ea38 <HAL_UART_IRQHandler+0x564>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d068      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a93      	ldr	r2, [pc, #588]	; (800ea3c <HAL_UART_IRQHandler+0x568>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d061      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a91      	ldr	r2, [pc, #580]	; (800ea40 <HAL_UART_IRQHandler+0x56c>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d05a      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4a8e      	ldr	r2, [pc, #568]	; (800ea44 <HAL_UART_IRQHandler+0x570>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d053      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a8c      	ldr	r2, [pc, #560]	; (800ea48 <HAL_UART_IRQHandler+0x574>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d04c      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a89      	ldr	r2, [pc, #548]	; (800ea4c <HAL_UART_IRQHandler+0x578>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d045      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a87      	ldr	r2, [pc, #540]	; (800ea50 <HAL_UART_IRQHandler+0x57c>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d03e      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a84      	ldr	r2, [pc, #528]	; (800ea54 <HAL_UART_IRQHandler+0x580>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d037      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a82      	ldr	r2, [pc, #520]	; (800ea58 <HAL_UART_IRQHandler+0x584>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d030      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a7f      	ldr	r2, [pc, #508]	; (800ea5c <HAL_UART_IRQHandler+0x588>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d029      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a7d      	ldr	r2, [pc, #500]	; (800ea60 <HAL_UART_IRQHandler+0x58c>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d022      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a7a      	ldr	r2, [pc, #488]	; (800ea64 <HAL_UART_IRQHandler+0x590>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d01b      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a78      	ldr	r2, [pc, #480]	; (800ea68 <HAL_UART_IRQHandler+0x594>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d014      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a75      	ldr	r2, [pc, #468]	; (800ea6c <HAL_UART_IRQHandler+0x598>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d00d      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a73      	ldr	r2, [pc, #460]	; (800ea70 <HAL_UART_IRQHandler+0x59c>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d006      	beq.n	800e8b6 <HAL_UART_IRQHandler+0x3e2>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a70      	ldr	r2, [pc, #448]	; (800ea74 <HAL_UART_IRQHandler+0x5a0>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d106      	bne.n	800e8c4 <HAL_UART_IRQHandler+0x3f0>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	e005      	b.n	800e8d0 <HAL_UART_IRQHandler+0x3fc>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e8d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 81ab 	beq.w	800ec34 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	f080 81a3 	bcs.w	800ec34 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e8f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8fe:	69db      	ldr	r3, [r3, #28]
 800e900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e904:	f000 8087 	beq.w	800ea16 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e914:	e853 3f00 	ldrex	r3, [r3]
 800e918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e91c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	461a      	mov	r2, r3
 800e92e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e936:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e93e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e942:	e841 2300 	strex	r3, r2, [r1]
 800e946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e94a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1da      	bne.n	800e908 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3308      	adds	r3, #8
 800e958:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e95c:	e853 3f00 	ldrex	r3, [r3]
 800e960:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e964:	f023 0301 	bic.w	r3, r3, #1
 800e968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e976:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e97a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e97e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e982:	e841 2300 	strex	r3, r2, [r1]
 800e986:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e1      	bne.n	800e952 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3308      	adds	r3, #8
 800e994:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e998:	e853 3f00 	ldrex	r3, [r3]
 800e99c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e99e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e9b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e9b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e9b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e9ba:	e841 2300 	strex	r3, r2, [r1]
 800e9be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e9c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1e3      	bne.n	800e98e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2220      	movs	r2, #32
 800e9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9dc:	e853 3f00 	ldrex	r3, [r3]
 800e9e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9e4:	f023 0310 	bic.w	r3, r3, #16
 800e9e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e9f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9fe:	e841 2300 	strex	r3, r2, [r1]
 800ea02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d1e4      	bne.n	800e9d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f7 fa1b 	bl	8005e4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2202      	movs	r2, #2
 800ea1a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 f91d 	bl	800ec70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea36:	e0fd      	b.n	800ec34 <HAL_UART_IRQHandler+0x760>
 800ea38:	40020010 	.word	0x40020010
 800ea3c:	40020028 	.word	0x40020028
 800ea40:	40020040 	.word	0x40020040
 800ea44:	40020058 	.word	0x40020058
 800ea48:	40020070 	.word	0x40020070
 800ea4c:	40020088 	.word	0x40020088
 800ea50:	400200a0 	.word	0x400200a0
 800ea54:	400200b8 	.word	0x400200b8
 800ea58:	40020410 	.word	0x40020410
 800ea5c:	40020428 	.word	0x40020428
 800ea60:	40020440 	.word	0x40020440
 800ea64:	40020458 	.word	0x40020458
 800ea68:	40020470 	.word	0x40020470
 800ea6c:	40020488 	.word	0x40020488
 800ea70:	400204a0 	.word	0x400204a0
 800ea74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f000 80cf 	beq.w	800ec38 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ea9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 80ca 	beq.w	800ec38 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaac:	e853 3f00 	ldrex	r3, [r3]
 800eab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	461a      	mov	r2, r3
 800eac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eac6:	647b      	str	r3, [r7, #68]	; 0x44
 800eac8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eacc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eace:	e841 2300 	strex	r3, r2, [r1]
 800ead2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ead4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1e4      	bne.n	800eaa4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	3308      	adds	r3, #8
 800eae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae4:	e853 3f00 	ldrex	r3, [r3]
 800eae8:	623b      	str	r3, [r7, #32]
   return(result);
 800eaea:	6a3a      	ldr	r2, [r7, #32]
 800eaec:	4b55      	ldr	r3, [pc, #340]	; (800ec44 <HAL_UART_IRQHandler+0x770>)
 800eaee:	4013      	ands	r3, r2
 800eaf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3308      	adds	r3, #8
 800eafa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eafe:	633a      	str	r2, [r7, #48]	; 0x30
 800eb00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb06:	e841 2300 	strex	r3, r2, [r1]
 800eb0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1e3      	bne.n	800eada <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2220      	movs	r2, #32
 800eb16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	e853 3f00 	ldrex	r3, [r3]
 800eb32:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f023 0310 	bic.w	r3, r3, #16
 800eb3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	461a      	mov	r2, r3
 800eb44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eb48:	61fb      	str	r3, [r7, #28]
 800eb4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4c:	69b9      	ldr	r1, [r7, #24]
 800eb4e:	69fa      	ldr	r2, [r7, #28]
 800eb50:	e841 2300 	strex	r3, r2, [r1]
 800eb54:	617b      	str	r3, [r7, #20]
   return(result);
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e4      	bne.n	800eb26 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 f881 	bl	800ec70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb6e:	e063      	b.n	800ec38 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00e      	beq.n	800eb9a <HAL_UART_IRQHandler+0x6c6>
 800eb7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d008      	beq.n	800eb9a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eb90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f001 fe80 	bl	8010898 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb98:	e051      	b.n	800ec3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d014      	beq.n	800ebd0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d105      	bne.n	800ebbe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ebb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d008      	beq.n	800ebd0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d03a      	beq.n	800ec3c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	4798      	blx	r3
    }
    return;
 800ebce:	e035      	b.n	800ec3c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ebd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d009      	beq.n	800ebf0 <HAL_UART_IRQHandler+0x71c>
 800ebdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d003      	beq.n	800ebf0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f001 f90d 	bl	800fe08 <UART_EndTransmit_IT>
    return;
 800ebee:	e026      	b.n	800ec3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ebf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d009      	beq.n	800ec10 <HAL_UART_IRQHandler+0x73c>
 800ebfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d003      	beq.n	800ec10 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f001 fe59 	bl	80108c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec0e:	e016      	b.n	800ec3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d010      	beq.n	800ec3e <HAL_UART_IRQHandler+0x76a>
 800ec1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	da0c      	bge.n	800ec3e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f001 fe41 	bl	80108ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec2a:	e008      	b.n	800ec3e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec2c:	bf00      	nop
 800ec2e:	e006      	b.n	800ec3e <HAL_UART_IRQHandler+0x76a>
    return;
 800ec30:	bf00      	nop
 800ec32:	e004      	b.n	800ec3e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec34:	bf00      	nop
 800ec36:	e002      	b.n	800ec3e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec38:	bf00      	nop
 800ec3a:	e000      	b.n	800ec3e <HAL_UART_IRQHandler+0x76a>
    return;
 800ec3c:	bf00      	nop
  }
}
 800ec3e:	37e8      	adds	r7, #232	; 0xe8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	effffffe 	.word	0xeffffffe

0800ec48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ec50:	bf00      	nop
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec8c:	b092      	sub	sp, #72	; 0x48
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec92:	2300      	movs	r3, #0
 800ec94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	689a      	ldr	r2, [r3, #8]
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	431a      	orrs	r2, r3
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	431a      	orrs	r2, r3
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	69db      	ldr	r3, [r3, #28]
 800ecac:	4313      	orrs	r3, r2
 800ecae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	4bbe      	ldr	r3, [pc, #760]	; (800efb0 <UART_SetConfig+0x328>)
 800ecb8:	4013      	ands	r3, r2
 800ecba:	697a      	ldr	r2, [r7, #20]
 800ecbc:	6812      	ldr	r2, [r2, #0]
 800ecbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecc0:	430b      	orrs	r3, r1
 800ecc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	68da      	ldr	r2, [r3, #12]
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	430a      	orrs	r2, r1
 800ecd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	699b      	ldr	r3, [r3, #24]
 800ecde:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4ab3      	ldr	r2, [pc, #716]	; (800efb4 <UART_SetConfig+0x32c>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d004      	beq.n	800ecf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	6a1b      	ldr	r3, [r3, #32]
 800ecee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	689a      	ldr	r2, [r3, #8]
 800ecfa:	4baf      	ldr	r3, [pc, #700]	; (800efb8 <UART_SetConfig+0x330>)
 800ecfc:	4013      	ands	r3, r2
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	6812      	ldr	r2, [r2, #0]
 800ed02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed04:	430b      	orrs	r3, r1
 800ed06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0e:	f023 010f 	bic.w	r1, r3, #15
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	430a      	orrs	r2, r1
 800ed1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4aa6      	ldr	r2, [pc, #664]	; (800efbc <UART_SetConfig+0x334>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d177      	bne.n	800ee18 <UART_SetConfig+0x190>
 800ed28:	4ba5      	ldr	r3, [pc, #660]	; (800efc0 <UART_SetConfig+0x338>)
 800ed2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed30:	2b28      	cmp	r3, #40	; 0x28
 800ed32:	d86d      	bhi.n	800ee10 <UART_SetConfig+0x188>
 800ed34:	a201      	add	r2, pc, #4	; (adr r2, 800ed3c <UART_SetConfig+0xb4>)
 800ed36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed3a:	bf00      	nop
 800ed3c:	0800ede1 	.word	0x0800ede1
 800ed40:	0800ee11 	.word	0x0800ee11
 800ed44:	0800ee11 	.word	0x0800ee11
 800ed48:	0800ee11 	.word	0x0800ee11
 800ed4c:	0800ee11 	.word	0x0800ee11
 800ed50:	0800ee11 	.word	0x0800ee11
 800ed54:	0800ee11 	.word	0x0800ee11
 800ed58:	0800ee11 	.word	0x0800ee11
 800ed5c:	0800ede9 	.word	0x0800ede9
 800ed60:	0800ee11 	.word	0x0800ee11
 800ed64:	0800ee11 	.word	0x0800ee11
 800ed68:	0800ee11 	.word	0x0800ee11
 800ed6c:	0800ee11 	.word	0x0800ee11
 800ed70:	0800ee11 	.word	0x0800ee11
 800ed74:	0800ee11 	.word	0x0800ee11
 800ed78:	0800ee11 	.word	0x0800ee11
 800ed7c:	0800edf1 	.word	0x0800edf1
 800ed80:	0800ee11 	.word	0x0800ee11
 800ed84:	0800ee11 	.word	0x0800ee11
 800ed88:	0800ee11 	.word	0x0800ee11
 800ed8c:	0800ee11 	.word	0x0800ee11
 800ed90:	0800ee11 	.word	0x0800ee11
 800ed94:	0800ee11 	.word	0x0800ee11
 800ed98:	0800ee11 	.word	0x0800ee11
 800ed9c:	0800edf9 	.word	0x0800edf9
 800eda0:	0800ee11 	.word	0x0800ee11
 800eda4:	0800ee11 	.word	0x0800ee11
 800eda8:	0800ee11 	.word	0x0800ee11
 800edac:	0800ee11 	.word	0x0800ee11
 800edb0:	0800ee11 	.word	0x0800ee11
 800edb4:	0800ee11 	.word	0x0800ee11
 800edb8:	0800ee11 	.word	0x0800ee11
 800edbc:	0800ee01 	.word	0x0800ee01
 800edc0:	0800ee11 	.word	0x0800ee11
 800edc4:	0800ee11 	.word	0x0800ee11
 800edc8:	0800ee11 	.word	0x0800ee11
 800edcc:	0800ee11 	.word	0x0800ee11
 800edd0:	0800ee11 	.word	0x0800ee11
 800edd4:	0800ee11 	.word	0x0800ee11
 800edd8:	0800ee11 	.word	0x0800ee11
 800eddc:	0800ee09 	.word	0x0800ee09
 800ede0:	2301      	movs	r3, #1
 800ede2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede6:	e222      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ede8:	2304      	movs	r3, #4
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edee:	e21e      	b.n	800f22e <UART_SetConfig+0x5a6>
 800edf0:	2308      	movs	r3, #8
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf6:	e21a      	b.n	800f22e <UART_SetConfig+0x5a6>
 800edf8:	2310      	movs	r3, #16
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfe:	e216      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee00:	2320      	movs	r3, #32
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee06:	e212      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee08:	2340      	movs	r3, #64	; 0x40
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0e:	e20e      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee10:	2380      	movs	r3, #128	; 0x80
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee16:	e20a      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a69      	ldr	r2, [pc, #420]	; (800efc4 <UART_SetConfig+0x33c>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d130      	bne.n	800ee84 <UART_SetConfig+0x1fc>
 800ee22:	4b67      	ldr	r3, [pc, #412]	; (800efc0 <UART_SetConfig+0x338>)
 800ee24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee26:	f003 0307 	and.w	r3, r3, #7
 800ee2a:	2b05      	cmp	r3, #5
 800ee2c:	d826      	bhi.n	800ee7c <UART_SetConfig+0x1f4>
 800ee2e:	a201      	add	r2, pc, #4	; (adr r2, 800ee34 <UART_SetConfig+0x1ac>)
 800ee30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee34:	0800ee4d 	.word	0x0800ee4d
 800ee38:	0800ee55 	.word	0x0800ee55
 800ee3c:	0800ee5d 	.word	0x0800ee5d
 800ee40:	0800ee65 	.word	0x0800ee65
 800ee44:	0800ee6d 	.word	0x0800ee6d
 800ee48:	0800ee75 	.word	0x0800ee75
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee52:	e1ec      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee54:	2304      	movs	r3, #4
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5a:	e1e8      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee5c:	2308      	movs	r3, #8
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee62:	e1e4      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee64:	2310      	movs	r3, #16
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6a:	e1e0      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee6c:	2320      	movs	r3, #32
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee72:	e1dc      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee74:	2340      	movs	r3, #64	; 0x40
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7a:	e1d8      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee7c:	2380      	movs	r3, #128	; 0x80
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee82:	e1d4      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a4f      	ldr	r2, [pc, #316]	; (800efc8 <UART_SetConfig+0x340>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d130      	bne.n	800eef0 <UART_SetConfig+0x268>
 800ee8e:	4b4c      	ldr	r3, [pc, #304]	; (800efc0 <UART_SetConfig+0x338>)
 800ee90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee92:	f003 0307 	and.w	r3, r3, #7
 800ee96:	2b05      	cmp	r3, #5
 800ee98:	d826      	bhi.n	800eee8 <UART_SetConfig+0x260>
 800ee9a:	a201      	add	r2, pc, #4	; (adr r2, 800eea0 <UART_SetConfig+0x218>)
 800ee9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea0:	0800eeb9 	.word	0x0800eeb9
 800eea4:	0800eec1 	.word	0x0800eec1
 800eea8:	0800eec9 	.word	0x0800eec9
 800eeac:	0800eed1 	.word	0x0800eed1
 800eeb0:	0800eed9 	.word	0x0800eed9
 800eeb4:	0800eee1 	.word	0x0800eee1
 800eeb8:	2300      	movs	r3, #0
 800eeba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eebe:	e1b6      	b.n	800f22e <UART_SetConfig+0x5a6>
 800eec0:	2304      	movs	r3, #4
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec6:	e1b2      	b.n	800f22e <UART_SetConfig+0x5a6>
 800eec8:	2308      	movs	r3, #8
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eece:	e1ae      	b.n	800f22e <UART_SetConfig+0x5a6>
 800eed0:	2310      	movs	r3, #16
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed6:	e1aa      	b.n	800f22e <UART_SetConfig+0x5a6>
 800eed8:	2320      	movs	r3, #32
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eede:	e1a6      	b.n	800f22e <UART_SetConfig+0x5a6>
 800eee0:	2340      	movs	r3, #64	; 0x40
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee6:	e1a2      	b.n	800f22e <UART_SetConfig+0x5a6>
 800eee8:	2380      	movs	r3, #128	; 0x80
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeee:	e19e      	b.n	800f22e <UART_SetConfig+0x5a6>
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4a35      	ldr	r2, [pc, #212]	; (800efcc <UART_SetConfig+0x344>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d130      	bne.n	800ef5c <UART_SetConfig+0x2d4>
 800eefa:	4b31      	ldr	r3, [pc, #196]	; (800efc0 <UART_SetConfig+0x338>)
 800eefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eefe:	f003 0307 	and.w	r3, r3, #7
 800ef02:	2b05      	cmp	r3, #5
 800ef04:	d826      	bhi.n	800ef54 <UART_SetConfig+0x2cc>
 800ef06:	a201      	add	r2, pc, #4	; (adr r2, 800ef0c <UART_SetConfig+0x284>)
 800ef08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef0c:	0800ef25 	.word	0x0800ef25
 800ef10:	0800ef2d 	.word	0x0800ef2d
 800ef14:	0800ef35 	.word	0x0800ef35
 800ef18:	0800ef3d 	.word	0x0800ef3d
 800ef1c:	0800ef45 	.word	0x0800ef45
 800ef20:	0800ef4d 	.word	0x0800ef4d
 800ef24:	2300      	movs	r3, #0
 800ef26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2a:	e180      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ef2c:	2304      	movs	r3, #4
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef32:	e17c      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ef34:	2308      	movs	r3, #8
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef3a:	e178      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ef3c:	2310      	movs	r3, #16
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef42:	e174      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ef44:	2320      	movs	r3, #32
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4a:	e170      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ef4c:	2340      	movs	r3, #64	; 0x40
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef52:	e16c      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ef54:	2380      	movs	r3, #128	; 0x80
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5a:	e168      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a1b      	ldr	r2, [pc, #108]	; (800efd0 <UART_SetConfig+0x348>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d142      	bne.n	800efec <UART_SetConfig+0x364>
 800ef66:	4b16      	ldr	r3, [pc, #88]	; (800efc0 <UART_SetConfig+0x338>)
 800ef68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef6a:	f003 0307 	and.w	r3, r3, #7
 800ef6e:	2b05      	cmp	r3, #5
 800ef70:	d838      	bhi.n	800efe4 <UART_SetConfig+0x35c>
 800ef72:	a201      	add	r2, pc, #4	; (adr r2, 800ef78 <UART_SetConfig+0x2f0>)
 800ef74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef78:	0800ef91 	.word	0x0800ef91
 800ef7c:	0800ef99 	.word	0x0800ef99
 800ef80:	0800efa1 	.word	0x0800efa1
 800ef84:	0800efa9 	.word	0x0800efa9
 800ef88:	0800efd5 	.word	0x0800efd5
 800ef8c:	0800efdd 	.word	0x0800efdd
 800ef90:	2300      	movs	r3, #0
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef96:	e14a      	b.n	800f22e <UART_SetConfig+0x5a6>
 800ef98:	2304      	movs	r3, #4
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9e:	e146      	b.n	800f22e <UART_SetConfig+0x5a6>
 800efa0:	2308      	movs	r3, #8
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efa6:	e142      	b.n	800f22e <UART_SetConfig+0x5a6>
 800efa8:	2310      	movs	r3, #16
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efae:	e13e      	b.n	800f22e <UART_SetConfig+0x5a6>
 800efb0:	cfff69f3 	.word	0xcfff69f3
 800efb4:	58000c00 	.word	0x58000c00
 800efb8:	11fff4ff 	.word	0x11fff4ff
 800efbc:	40011000 	.word	0x40011000
 800efc0:	58024400 	.word	0x58024400
 800efc4:	40004400 	.word	0x40004400
 800efc8:	40004800 	.word	0x40004800
 800efcc:	40004c00 	.word	0x40004c00
 800efd0:	40005000 	.word	0x40005000
 800efd4:	2320      	movs	r3, #32
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e128      	b.n	800f22e <UART_SetConfig+0x5a6>
 800efdc:	2340      	movs	r3, #64	; 0x40
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e124      	b.n	800f22e <UART_SetConfig+0x5a6>
 800efe4:	2380      	movs	r3, #128	; 0x80
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e120      	b.n	800f22e <UART_SetConfig+0x5a6>
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4acb      	ldr	r2, [pc, #812]	; (800f320 <UART_SetConfig+0x698>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d176      	bne.n	800f0e4 <UART_SetConfig+0x45c>
 800eff6:	4bcb      	ldr	r3, [pc, #812]	; (800f324 <UART_SetConfig+0x69c>)
 800eff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800effa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800effe:	2b28      	cmp	r3, #40	; 0x28
 800f000:	d86c      	bhi.n	800f0dc <UART_SetConfig+0x454>
 800f002:	a201      	add	r2, pc, #4	; (adr r2, 800f008 <UART_SetConfig+0x380>)
 800f004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f008:	0800f0ad 	.word	0x0800f0ad
 800f00c:	0800f0dd 	.word	0x0800f0dd
 800f010:	0800f0dd 	.word	0x0800f0dd
 800f014:	0800f0dd 	.word	0x0800f0dd
 800f018:	0800f0dd 	.word	0x0800f0dd
 800f01c:	0800f0dd 	.word	0x0800f0dd
 800f020:	0800f0dd 	.word	0x0800f0dd
 800f024:	0800f0dd 	.word	0x0800f0dd
 800f028:	0800f0b5 	.word	0x0800f0b5
 800f02c:	0800f0dd 	.word	0x0800f0dd
 800f030:	0800f0dd 	.word	0x0800f0dd
 800f034:	0800f0dd 	.word	0x0800f0dd
 800f038:	0800f0dd 	.word	0x0800f0dd
 800f03c:	0800f0dd 	.word	0x0800f0dd
 800f040:	0800f0dd 	.word	0x0800f0dd
 800f044:	0800f0dd 	.word	0x0800f0dd
 800f048:	0800f0bd 	.word	0x0800f0bd
 800f04c:	0800f0dd 	.word	0x0800f0dd
 800f050:	0800f0dd 	.word	0x0800f0dd
 800f054:	0800f0dd 	.word	0x0800f0dd
 800f058:	0800f0dd 	.word	0x0800f0dd
 800f05c:	0800f0dd 	.word	0x0800f0dd
 800f060:	0800f0dd 	.word	0x0800f0dd
 800f064:	0800f0dd 	.word	0x0800f0dd
 800f068:	0800f0c5 	.word	0x0800f0c5
 800f06c:	0800f0dd 	.word	0x0800f0dd
 800f070:	0800f0dd 	.word	0x0800f0dd
 800f074:	0800f0dd 	.word	0x0800f0dd
 800f078:	0800f0dd 	.word	0x0800f0dd
 800f07c:	0800f0dd 	.word	0x0800f0dd
 800f080:	0800f0dd 	.word	0x0800f0dd
 800f084:	0800f0dd 	.word	0x0800f0dd
 800f088:	0800f0cd 	.word	0x0800f0cd
 800f08c:	0800f0dd 	.word	0x0800f0dd
 800f090:	0800f0dd 	.word	0x0800f0dd
 800f094:	0800f0dd 	.word	0x0800f0dd
 800f098:	0800f0dd 	.word	0x0800f0dd
 800f09c:	0800f0dd 	.word	0x0800f0dd
 800f0a0:	0800f0dd 	.word	0x0800f0dd
 800f0a4:	0800f0dd 	.word	0x0800f0dd
 800f0a8:	0800f0d5 	.word	0x0800f0d5
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e0bc      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f0b4:	2304      	movs	r3, #4
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e0b8      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f0bc:	2308      	movs	r3, #8
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e0b4      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f0c4:	2310      	movs	r3, #16
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ca:	e0b0      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f0cc:	2320      	movs	r3, #32
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d2:	e0ac      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f0d4:	2340      	movs	r3, #64	; 0x40
 800f0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0da:	e0a8      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f0dc:	2380      	movs	r3, #128	; 0x80
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e2:	e0a4      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a8f      	ldr	r2, [pc, #572]	; (800f328 <UART_SetConfig+0x6a0>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d130      	bne.n	800f150 <UART_SetConfig+0x4c8>
 800f0ee:	4b8d      	ldr	r3, [pc, #564]	; (800f324 <UART_SetConfig+0x69c>)
 800f0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0f2:	f003 0307 	and.w	r3, r3, #7
 800f0f6:	2b05      	cmp	r3, #5
 800f0f8:	d826      	bhi.n	800f148 <UART_SetConfig+0x4c0>
 800f0fa:	a201      	add	r2, pc, #4	; (adr r2, 800f100 <UART_SetConfig+0x478>)
 800f0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f100:	0800f119 	.word	0x0800f119
 800f104:	0800f121 	.word	0x0800f121
 800f108:	0800f129 	.word	0x0800f129
 800f10c:	0800f131 	.word	0x0800f131
 800f110:	0800f139 	.word	0x0800f139
 800f114:	0800f141 	.word	0x0800f141
 800f118:	2300      	movs	r3, #0
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11e:	e086      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f120:	2304      	movs	r3, #4
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f126:	e082      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f128:	2308      	movs	r3, #8
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12e:	e07e      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f130:	2310      	movs	r3, #16
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f136:	e07a      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f138:	2320      	movs	r3, #32
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13e:	e076      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f140:	2340      	movs	r3, #64	; 0x40
 800f142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f146:	e072      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f148:	2380      	movs	r3, #128	; 0x80
 800f14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14e:	e06e      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a75      	ldr	r2, [pc, #468]	; (800f32c <UART_SetConfig+0x6a4>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d130      	bne.n	800f1bc <UART_SetConfig+0x534>
 800f15a:	4b72      	ldr	r3, [pc, #456]	; (800f324 <UART_SetConfig+0x69c>)
 800f15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f15e:	f003 0307 	and.w	r3, r3, #7
 800f162:	2b05      	cmp	r3, #5
 800f164:	d826      	bhi.n	800f1b4 <UART_SetConfig+0x52c>
 800f166:	a201      	add	r2, pc, #4	; (adr r2, 800f16c <UART_SetConfig+0x4e4>)
 800f168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f16c:	0800f185 	.word	0x0800f185
 800f170:	0800f18d 	.word	0x0800f18d
 800f174:	0800f195 	.word	0x0800f195
 800f178:	0800f19d 	.word	0x0800f19d
 800f17c:	0800f1a5 	.word	0x0800f1a5
 800f180:	0800f1ad 	.word	0x0800f1ad
 800f184:	2300      	movs	r3, #0
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f18a:	e050      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f18c:	2304      	movs	r3, #4
 800f18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f192:	e04c      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f194:	2308      	movs	r3, #8
 800f196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19a:	e048      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f19c:	2310      	movs	r3, #16
 800f19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a2:	e044      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f1a4:	2320      	movs	r3, #32
 800f1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1aa:	e040      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f1ac:	2340      	movs	r3, #64	; 0x40
 800f1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b2:	e03c      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f1b4:	2380      	movs	r3, #128	; 0x80
 800f1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ba:	e038      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4a5b      	ldr	r2, [pc, #364]	; (800f330 <UART_SetConfig+0x6a8>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d130      	bne.n	800f228 <UART_SetConfig+0x5a0>
 800f1c6:	4b57      	ldr	r3, [pc, #348]	; (800f324 <UART_SetConfig+0x69c>)
 800f1c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1ca:	f003 0307 	and.w	r3, r3, #7
 800f1ce:	2b05      	cmp	r3, #5
 800f1d0:	d826      	bhi.n	800f220 <UART_SetConfig+0x598>
 800f1d2:	a201      	add	r2, pc, #4	; (adr r2, 800f1d8 <UART_SetConfig+0x550>)
 800f1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d8:	0800f1f1 	.word	0x0800f1f1
 800f1dc:	0800f1f9 	.word	0x0800f1f9
 800f1e0:	0800f201 	.word	0x0800f201
 800f1e4:	0800f209 	.word	0x0800f209
 800f1e8:	0800f211 	.word	0x0800f211
 800f1ec:	0800f219 	.word	0x0800f219
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1f6:	e01a      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f1f8:	2304      	movs	r3, #4
 800f1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1fe:	e016      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f200:	2308      	movs	r3, #8
 800f202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f206:	e012      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f208:	2310      	movs	r3, #16
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f20e:	e00e      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f210:	2320      	movs	r3, #32
 800f212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f216:	e00a      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f218:	2340      	movs	r3, #64	; 0x40
 800f21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f21e:	e006      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f220:	2380      	movs	r3, #128	; 0x80
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f226:	e002      	b.n	800f22e <UART_SetConfig+0x5a6>
 800f228:	2380      	movs	r3, #128	; 0x80
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	4a3f      	ldr	r2, [pc, #252]	; (800f330 <UART_SetConfig+0x6a8>)
 800f234:	4293      	cmp	r3, r2
 800f236:	f040 80f8 	bne.w	800f42a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f23a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f23e:	2b20      	cmp	r3, #32
 800f240:	dc46      	bgt.n	800f2d0 <UART_SetConfig+0x648>
 800f242:	2b02      	cmp	r3, #2
 800f244:	f2c0 8082 	blt.w	800f34c <UART_SetConfig+0x6c4>
 800f248:	3b02      	subs	r3, #2
 800f24a:	2b1e      	cmp	r3, #30
 800f24c:	d87e      	bhi.n	800f34c <UART_SetConfig+0x6c4>
 800f24e:	a201      	add	r2, pc, #4	; (adr r2, 800f254 <UART_SetConfig+0x5cc>)
 800f250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f254:	0800f2d7 	.word	0x0800f2d7
 800f258:	0800f34d 	.word	0x0800f34d
 800f25c:	0800f2df 	.word	0x0800f2df
 800f260:	0800f34d 	.word	0x0800f34d
 800f264:	0800f34d 	.word	0x0800f34d
 800f268:	0800f34d 	.word	0x0800f34d
 800f26c:	0800f2ef 	.word	0x0800f2ef
 800f270:	0800f34d 	.word	0x0800f34d
 800f274:	0800f34d 	.word	0x0800f34d
 800f278:	0800f34d 	.word	0x0800f34d
 800f27c:	0800f34d 	.word	0x0800f34d
 800f280:	0800f34d 	.word	0x0800f34d
 800f284:	0800f34d 	.word	0x0800f34d
 800f288:	0800f34d 	.word	0x0800f34d
 800f28c:	0800f2ff 	.word	0x0800f2ff
 800f290:	0800f34d 	.word	0x0800f34d
 800f294:	0800f34d 	.word	0x0800f34d
 800f298:	0800f34d 	.word	0x0800f34d
 800f29c:	0800f34d 	.word	0x0800f34d
 800f2a0:	0800f34d 	.word	0x0800f34d
 800f2a4:	0800f34d 	.word	0x0800f34d
 800f2a8:	0800f34d 	.word	0x0800f34d
 800f2ac:	0800f34d 	.word	0x0800f34d
 800f2b0:	0800f34d 	.word	0x0800f34d
 800f2b4:	0800f34d 	.word	0x0800f34d
 800f2b8:	0800f34d 	.word	0x0800f34d
 800f2bc:	0800f34d 	.word	0x0800f34d
 800f2c0:	0800f34d 	.word	0x0800f34d
 800f2c4:	0800f34d 	.word	0x0800f34d
 800f2c8:	0800f34d 	.word	0x0800f34d
 800f2cc:	0800f33f 	.word	0x0800f33f
 800f2d0:	2b40      	cmp	r3, #64	; 0x40
 800f2d2:	d037      	beq.n	800f344 <UART_SetConfig+0x6bc>
 800f2d4:	e03a      	b.n	800f34c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f2d6:	f7fc f931 	bl	800b53c <HAL_RCCEx_GetD3PCLK1Freq>
 800f2da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f2dc:	e03c      	b.n	800f358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fc f940 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2ec:	e034      	b.n	800f358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2ee:	f107 0318 	add.w	r3, r7, #24
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fc fa8c 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2fc:	e02c      	b.n	800f358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2fe:	4b09      	ldr	r3, [pc, #36]	; (800f324 <UART_SetConfig+0x69c>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f003 0320 	and.w	r3, r3, #32
 800f306:	2b00      	cmp	r3, #0
 800f308:	d016      	beq.n	800f338 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f30a:	4b06      	ldr	r3, [pc, #24]	; (800f324 <UART_SetConfig+0x69c>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	08db      	lsrs	r3, r3, #3
 800f310:	f003 0303 	and.w	r3, r3, #3
 800f314:	4a07      	ldr	r2, [pc, #28]	; (800f334 <UART_SetConfig+0x6ac>)
 800f316:	fa22 f303 	lsr.w	r3, r2, r3
 800f31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f31c:	e01c      	b.n	800f358 <UART_SetConfig+0x6d0>
 800f31e:	bf00      	nop
 800f320:	40011400 	.word	0x40011400
 800f324:	58024400 	.word	0x58024400
 800f328:	40007800 	.word	0x40007800
 800f32c:	40007c00 	.word	0x40007c00
 800f330:	58000c00 	.word	0x58000c00
 800f334:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f338:	4b9d      	ldr	r3, [pc, #628]	; (800f5b0 <UART_SetConfig+0x928>)
 800f33a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f33c:	e00c      	b.n	800f358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f33e:	4b9d      	ldr	r3, [pc, #628]	; (800f5b4 <UART_SetConfig+0x92c>)
 800f340:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f342:	e009      	b.n	800f358 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f34a:	e005      	b.n	800f358 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f34c:	2300      	movs	r3, #0
 800f34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f350:	2301      	movs	r3, #1
 800f352:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f356:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f000 81de 	beq.w	800f71c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f364:	4a94      	ldr	r2, [pc, #592]	; (800f5b8 <UART_SetConfig+0x930>)
 800f366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f36a:	461a      	mov	r2, r3
 800f36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f36e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f372:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	4613      	mov	r3, r2
 800f37a:	005b      	lsls	r3, r3, #1
 800f37c:	4413      	add	r3, r2
 800f37e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f380:	429a      	cmp	r2, r3
 800f382:	d305      	bcc.n	800f390 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d903      	bls.n	800f398 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f390:	2301      	movs	r3, #1
 800f392:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f396:	e1c1      	b.n	800f71c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f39a:	2200      	movs	r2, #0
 800f39c:	60bb      	str	r3, [r7, #8]
 800f39e:	60fa      	str	r2, [r7, #12]
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a4:	4a84      	ldr	r2, [pc, #528]	; (800f5b8 <UART_SetConfig+0x930>)
 800f3a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	603b      	str	r3, [r7, #0]
 800f3b0:	607a      	str	r2, [r7, #4]
 800f3b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f3ba:	f7f0 ffe1 	bl	8000380 <__aeabi_uldivmod>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4610      	mov	r0, r2
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	f04f 0200 	mov.w	r2, #0
 800f3ca:	f04f 0300 	mov.w	r3, #0
 800f3ce:	020b      	lsls	r3, r1, #8
 800f3d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f3d4:	0202      	lsls	r2, r0, #8
 800f3d6:	6979      	ldr	r1, [r7, #20]
 800f3d8:	6849      	ldr	r1, [r1, #4]
 800f3da:	0849      	lsrs	r1, r1, #1
 800f3dc:	2000      	movs	r0, #0
 800f3de:	460c      	mov	r4, r1
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	eb12 0804 	adds.w	r8, r2, r4
 800f3e6:	eb43 0905 	adc.w	r9, r3, r5
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	469a      	mov	sl, r3
 800f3f2:	4693      	mov	fp, r2
 800f3f4:	4652      	mov	r2, sl
 800f3f6:	465b      	mov	r3, fp
 800f3f8:	4640      	mov	r0, r8
 800f3fa:	4649      	mov	r1, r9
 800f3fc:	f7f0 ffc0 	bl	8000380 <__aeabi_uldivmod>
 800f400:	4602      	mov	r2, r0
 800f402:	460b      	mov	r3, r1
 800f404:	4613      	mov	r3, r2
 800f406:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f40a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f40e:	d308      	bcc.n	800f422 <UART_SetConfig+0x79a>
 800f410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f416:	d204      	bcs.n	800f422 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f41e:	60da      	str	r2, [r3, #12]
 800f420:	e17c      	b.n	800f71c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f422:	2301      	movs	r3, #1
 800f424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f428:	e178      	b.n	800f71c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	69db      	ldr	r3, [r3, #28]
 800f42e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f432:	f040 80c5 	bne.w	800f5c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f436:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f43a:	2b20      	cmp	r3, #32
 800f43c:	dc48      	bgt.n	800f4d0 <UART_SetConfig+0x848>
 800f43e:	2b00      	cmp	r3, #0
 800f440:	db7b      	blt.n	800f53a <UART_SetConfig+0x8b2>
 800f442:	2b20      	cmp	r3, #32
 800f444:	d879      	bhi.n	800f53a <UART_SetConfig+0x8b2>
 800f446:	a201      	add	r2, pc, #4	; (adr r2, 800f44c <UART_SetConfig+0x7c4>)
 800f448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f44c:	0800f4d7 	.word	0x0800f4d7
 800f450:	0800f4df 	.word	0x0800f4df
 800f454:	0800f53b 	.word	0x0800f53b
 800f458:	0800f53b 	.word	0x0800f53b
 800f45c:	0800f4e7 	.word	0x0800f4e7
 800f460:	0800f53b 	.word	0x0800f53b
 800f464:	0800f53b 	.word	0x0800f53b
 800f468:	0800f53b 	.word	0x0800f53b
 800f46c:	0800f4f7 	.word	0x0800f4f7
 800f470:	0800f53b 	.word	0x0800f53b
 800f474:	0800f53b 	.word	0x0800f53b
 800f478:	0800f53b 	.word	0x0800f53b
 800f47c:	0800f53b 	.word	0x0800f53b
 800f480:	0800f53b 	.word	0x0800f53b
 800f484:	0800f53b 	.word	0x0800f53b
 800f488:	0800f53b 	.word	0x0800f53b
 800f48c:	0800f507 	.word	0x0800f507
 800f490:	0800f53b 	.word	0x0800f53b
 800f494:	0800f53b 	.word	0x0800f53b
 800f498:	0800f53b 	.word	0x0800f53b
 800f49c:	0800f53b 	.word	0x0800f53b
 800f4a0:	0800f53b 	.word	0x0800f53b
 800f4a4:	0800f53b 	.word	0x0800f53b
 800f4a8:	0800f53b 	.word	0x0800f53b
 800f4ac:	0800f53b 	.word	0x0800f53b
 800f4b0:	0800f53b 	.word	0x0800f53b
 800f4b4:	0800f53b 	.word	0x0800f53b
 800f4b8:	0800f53b 	.word	0x0800f53b
 800f4bc:	0800f53b 	.word	0x0800f53b
 800f4c0:	0800f53b 	.word	0x0800f53b
 800f4c4:	0800f53b 	.word	0x0800f53b
 800f4c8:	0800f53b 	.word	0x0800f53b
 800f4cc:	0800f52d 	.word	0x0800f52d
 800f4d0:	2b40      	cmp	r3, #64	; 0x40
 800f4d2:	d02e      	beq.n	800f532 <UART_SetConfig+0x8aa>
 800f4d4:	e031      	b.n	800f53a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4d6:	f7fa f839 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800f4da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f4dc:	e033      	b.n	800f546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f4de:	f7fa f84b 	bl	8009578 <HAL_RCC_GetPCLK2Freq>
 800f4e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f4e4:	e02f      	b.n	800f546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fc f83c 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4f4:	e027      	b.n	800f546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4f6:	f107 0318 	add.w	r3, r7, #24
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fc f988 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f504:	e01f      	b.n	800f546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f506:	4b2d      	ldr	r3, [pc, #180]	; (800f5bc <UART_SetConfig+0x934>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f003 0320 	and.w	r3, r3, #32
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d009      	beq.n	800f526 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f512:	4b2a      	ldr	r3, [pc, #168]	; (800f5bc <UART_SetConfig+0x934>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	08db      	lsrs	r3, r3, #3
 800f518:	f003 0303 	and.w	r3, r3, #3
 800f51c:	4a24      	ldr	r2, [pc, #144]	; (800f5b0 <UART_SetConfig+0x928>)
 800f51e:	fa22 f303 	lsr.w	r3, r2, r3
 800f522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f524:	e00f      	b.n	800f546 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f526:	4b22      	ldr	r3, [pc, #136]	; (800f5b0 <UART_SetConfig+0x928>)
 800f528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f52a:	e00c      	b.n	800f546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f52c:	4b21      	ldr	r3, [pc, #132]	; (800f5b4 <UART_SetConfig+0x92c>)
 800f52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f530:	e009      	b.n	800f546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f538:	e005      	b.n	800f546 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f53a:	2300      	movs	r3, #0
 800f53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f000 80e7 	beq.w	800f71c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f552:	4a19      	ldr	r2, [pc, #100]	; (800f5b8 <UART_SetConfig+0x930>)
 800f554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f558:	461a      	mov	r2, r3
 800f55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f55c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f560:	005a      	lsls	r2, r3, #1
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	085b      	lsrs	r3, r3, #1
 800f568:	441a      	add	r2, r3
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f572:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f576:	2b0f      	cmp	r3, #15
 800f578:	d916      	bls.n	800f5a8 <UART_SetConfig+0x920>
 800f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f580:	d212      	bcs.n	800f5a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	b29b      	uxth	r3, r3
 800f586:	f023 030f 	bic.w	r3, r3, #15
 800f58a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58e:	085b      	lsrs	r3, r3, #1
 800f590:	b29b      	uxth	r3, r3
 800f592:	f003 0307 	and.w	r3, r3, #7
 800f596:	b29a      	uxth	r2, r3
 800f598:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f59a:	4313      	orrs	r3, r2
 800f59c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5a4:	60da      	str	r2, [r3, #12]
 800f5a6:	e0b9      	b.n	800f71c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f5ae:	e0b5      	b.n	800f71c <UART_SetConfig+0xa94>
 800f5b0:	03d09000 	.word	0x03d09000
 800f5b4:	003d0900 	.word	0x003d0900
 800f5b8:	080155dc 	.word	0x080155dc
 800f5bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f5c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f5c4:	2b20      	cmp	r3, #32
 800f5c6:	dc49      	bgt.n	800f65c <UART_SetConfig+0x9d4>
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	db7c      	blt.n	800f6c6 <UART_SetConfig+0xa3e>
 800f5cc:	2b20      	cmp	r3, #32
 800f5ce:	d87a      	bhi.n	800f6c6 <UART_SetConfig+0xa3e>
 800f5d0:	a201      	add	r2, pc, #4	; (adr r2, 800f5d8 <UART_SetConfig+0x950>)
 800f5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d6:	bf00      	nop
 800f5d8:	0800f663 	.word	0x0800f663
 800f5dc:	0800f66b 	.word	0x0800f66b
 800f5e0:	0800f6c7 	.word	0x0800f6c7
 800f5e4:	0800f6c7 	.word	0x0800f6c7
 800f5e8:	0800f673 	.word	0x0800f673
 800f5ec:	0800f6c7 	.word	0x0800f6c7
 800f5f0:	0800f6c7 	.word	0x0800f6c7
 800f5f4:	0800f6c7 	.word	0x0800f6c7
 800f5f8:	0800f683 	.word	0x0800f683
 800f5fc:	0800f6c7 	.word	0x0800f6c7
 800f600:	0800f6c7 	.word	0x0800f6c7
 800f604:	0800f6c7 	.word	0x0800f6c7
 800f608:	0800f6c7 	.word	0x0800f6c7
 800f60c:	0800f6c7 	.word	0x0800f6c7
 800f610:	0800f6c7 	.word	0x0800f6c7
 800f614:	0800f6c7 	.word	0x0800f6c7
 800f618:	0800f693 	.word	0x0800f693
 800f61c:	0800f6c7 	.word	0x0800f6c7
 800f620:	0800f6c7 	.word	0x0800f6c7
 800f624:	0800f6c7 	.word	0x0800f6c7
 800f628:	0800f6c7 	.word	0x0800f6c7
 800f62c:	0800f6c7 	.word	0x0800f6c7
 800f630:	0800f6c7 	.word	0x0800f6c7
 800f634:	0800f6c7 	.word	0x0800f6c7
 800f638:	0800f6c7 	.word	0x0800f6c7
 800f63c:	0800f6c7 	.word	0x0800f6c7
 800f640:	0800f6c7 	.word	0x0800f6c7
 800f644:	0800f6c7 	.word	0x0800f6c7
 800f648:	0800f6c7 	.word	0x0800f6c7
 800f64c:	0800f6c7 	.word	0x0800f6c7
 800f650:	0800f6c7 	.word	0x0800f6c7
 800f654:	0800f6c7 	.word	0x0800f6c7
 800f658:	0800f6b9 	.word	0x0800f6b9
 800f65c:	2b40      	cmp	r3, #64	; 0x40
 800f65e:	d02e      	beq.n	800f6be <UART_SetConfig+0xa36>
 800f660:	e031      	b.n	800f6c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f662:	f7f9 ff73 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800f666:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f668:	e033      	b.n	800f6d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f66a:	f7f9 ff85 	bl	8009578 <HAL_RCC_GetPCLK2Freq>
 800f66e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f670:	e02f      	b.n	800f6d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f676:	4618      	mov	r0, r3
 800f678:	f7fb ff76 	bl	800b568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f680:	e027      	b.n	800f6d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f682:	f107 0318 	add.w	r3, r7, #24
 800f686:	4618      	mov	r0, r3
 800f688:	f7fc f8c2 	bl	800b810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f690:	e01f      	b.n	800f6d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f692:	4b2d      	ldr	r3, [pc, #180]	; (800f748 <UART_SetConfig+0xac0>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f003 0320 	and.w	r3, r3, #32
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d009      	beq.n	800f6b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f69e:	4b2a      	ldr	r3, [pc, #168]	; (800f748 <UART_SetConfig+0xac0>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	08db      	lsrs	r3, r3, #3
 800f6a4:	f003 0303 	and.w	r3, r3, #3
 800f6a8:	4a28      	ldr	r2, [pc, #160]	; (800f74c <UART_SetConfig+0xac4>)
 800f6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6b0:	e00f      	b.n	800f6d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f6b2:	4b26      	ldr	r3, [pc, #152]	; (800f74c <UART_SetConfig+0xac4>)
 800f6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6b6:	e00c      	b.n	800f6d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6b8:	4b25      	ldr	r3, [pc, #148]	; (800f750 <UART_SetConfig+0xac8>)
 800f6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6bc:	e009      	b.n	800f6d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6c4:	e005      	b.n	800f6d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f6d0:	bf00      	nop
    }

    if (pclk != 0U)
 800f6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d021      	beq.n	800f71c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6dc:	4a1d      	ldr	r2, [pc, #116]	; (800f754 <UART_SetConfig+0xacc>)
 800f6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	085b      	lsrs	r3, r3, #1
 800f6f0:	441a      	add	r2, r3
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fe:	2b0f      	cmp	r3, #15
 800f700:	d909      	bls.n	800f716 <UART_SetConfig+0xa8e>
 800f702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f708:	d205      	bcs.n	800f716 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	60da      	str	r2, [r3, #12]
 800f714:	e002      	b.n	800f71c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f716:	2301      	movs	r3, #1
 800f718:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	2201      	movs	r2, #1
 800f720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	2201      	movs	r2, #1
 800f728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	2200      	movs	r2, #0
 800f730:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	2200      	movs	r2, #0
 800f736:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f738:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3748      	adds	r7, #72	; 0x48
 800f740:	46bd      	mov	sp, r7
 800f742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f746:	bf00      	nop
 800f748:	58024400 	.word	0x58024400
 800f74c:	03d09000 	.word	0x03d09000
 800f750:	003d0900 	.word	0x003d0900
 800f754:	080155dc 	.word	0x080155dc

0800f758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f764:	f003 0308 	and.w	r3, r3, #8
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00a      	beq.n	800f782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	430a      	orrs	r2, r1
 800f780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f786:	f003 0301 	and.w	r3, r3, #1
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00a      	beq.n	800f7a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	430a      	orrs	r2, r1
 800f7a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7a8:	f003 0302 	and.w	r3, r3, #2
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00a      	beq.n	800f7c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	430a      	orrs	r2, r1
 800f7c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ca:	f003 0304 	and.w	r3, r3, #4
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00a      	beq.n	800f7e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	430a      	orrs	r2, r1
 800f7e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ec:	f003 0310 	and.w	r3, r3, #16
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d00a      	beq.n	800f80a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	430a      	orrs	r2, r1
 800f808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80e:	f003 0320 	and.w	r3, r3, #32
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00a      	beq.n	800f82c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	430a      	orrs	r2, r1
 800f82a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f834:	2b00      	cmp	r3, #0
 800f836:	d01a      	beq.n	800f86e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	430a      	orrs	r2, r1
 800f84c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f856:	d10a      	bne.n	800f86e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	430a      	orrs	r2, r1
 800f86c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00a      	beq.n	800f890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	430a      	orrs	r2, r1
 800f88e:	605a      	str	r2, [r3, #4]
  }
}
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b098      	sub	sp, #96	; 0x60
 800f8a0:	af02      	add	r7, sp, #8
 800f8a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f8ac:	f7f3 fbe0 	bl	8003070 <HAL_GetTick>
 800f8b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f003 0308 	and.w	r3, r3, #8
 800f8bc:	2b08      	cmp	r3, #8
 800f8be:	d12f      	bne.n	800f920 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f8c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 f88e 	bl	800f9f0 <UART_WaitOnFlagUntilTimeout>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d022      	beq.n	800f920 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e2:	e853 3f00 	ldrex	r3, [r3]
 800f8e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8ee:	653b      	str	r3, [r7, #80]	; 0x50
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f8:	647b      	str	r3, [r7, #68]	; 0x44
 800f8fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f900:	e841 2300 	strex	r3, r2, [r1]
 800f904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1e6      	bne.n	800f8da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2220      	movs	r2, #32
 800f910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2200      	movs	r2, #0
 800f918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f91c:	2303      	movs	r3, #3
 800f91e:	e063      	b.n	800f9e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f003 0304 	and.w	r3, r3, #4
 800f92a:	2b04      	cmp	r3, #4
 800f92c:	d149      	bne.n	800f9c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f92e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f932:	9300      	str	r3, [sp, #0]
 800f934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f936:	2200      	movs	r2, #0
 800f938:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 f857 	bl	800f9f0 <UART_WaitOnFlagUntilTimeout>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d03c      	beq.n	800f9c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f950:	e853 3f00 	ldrex	r3, [r3]
 800f954:	623b      	str	r3, [r7, #32]
   return(result);
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f95c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f966:	633b      	str	r3, [r7, #48]	; 0x30
 800f968:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f96c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f96e:	e841 2300 	strex	r3, r2, [r1]
 800f972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1e6      	bne.n	800f948 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3308      	adds	r3, #8
 800f980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	e853 3f00 	ldrex	r3, [r3]
 800f988:	60fb      	str	r3, [r7, #12]
   return(result);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f023 0301 	bic.w	r3, r3, #1
 800f990:	64bb      	str	r3, [r7, #72]	; 0x48
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	3308      	adds	r3, #8
 800f998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f99a:	61fa      	str	r2, [r7, #28]
 800f99c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99e:	69b9      	ldr	r1, [r7, #24]
 800f9a0:	69fa      	ldr	r2, [r7, #28]
 800f9a2:	e841 2300 	strex	r3, r2, [r1]
 800f9a6:	617b      	str	r3, [r7, #20]
   return(result);
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1e5      	bne.n	800f97a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2220      	movs	r2, #32
 800f9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	e012      	b.n	800f9e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2220      	movs	r2, #32
 800f9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2220      	movs	r2, #32
 800f9ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f9e6:	2300      	movs	r3, #0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3758      	adds	r7, #88	; 0x58
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	603b      	str	r3, [r7, #0]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa00:	e04f      	b.n	800faa2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa08:	d04b      	beq.n	800faa2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa0a:	f7f3 fb31 	bl	8003070 <HAL_GetTick>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	1ad3      	subs	r3, r2, r3
 800fa14:	69ba      	ldr	r2, [r7, #24]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d302      	bcc.n	800fa20 <UART_WaitOnFlagUntilTimeout+0x30>
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d101      	bne.n	800fa24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fa20:	2303      	movs	r3, #3
 800fa22:	e04e      	b.n	800fac2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f003 0304 	and.w	r3, r3, #4
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d037      	beq.n	800faa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	2b80      	cmp	r3, #128	; 0x80
 800fa36:	d034      	beq.n	800faa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	2b40      	cmp	r3, #64	; 0x40
 800fa3c:	d031      	beq.n	800faa2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	69db      	ldr	r3, [r3, #28]
 800fa44:	f003 0308 	and.w	r3, r3, #8
 800fa48:	2b08      	cmp	r3, #8
 800fa4a:	d110      	bne.n	800fa6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2208      	movs	r2, #8
 800fa52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f000 f95b 	bl	800fd10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2208      	movs	r2, #8
 800fa5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2200      	movs	r2, #0
 800fa66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e029      	b.n	800fac2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa7c:	d111      	bne.n	800faa2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f000 f941 	bl	800fd10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2220      	movs	r2, #32
 800fa92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fa9e:	2303      	movs	r3, #3
 800faa0:	e00f      	b.n	800fac2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	69da      	ldr	r2, [r3, #28]
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	4013      	ands	r3, r2
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	429a      	cmp	r2, r3
 800fab0:	bf0c      	ite	eq
 800fab2:	2301      	moveq	r3, #1
 800fab4:	2300      	movne	r3, #0
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	461a      	mov	r2, r3
 800faba:	79fb      	ldrb	r3, [r7, #7]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d0a0      	beq.n	800fa02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
	...

0800facc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800facc:	b480      	push	{r7}
 800face:	b0a3      	sub	sp, #140	; 0x8c
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	4613      	mov	r3, r2
 800fad8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	88fa      	ldrh	r2, [r7, #6]
 800fae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	88fa      	ldrh	r2, [r7, #6]
 800faec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fafe:	d10e      	bne.n	800fb1e <UART_Start_Receive_IT+0x52>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	691b      	ldr	r3, [r3, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d105      	bne.n	800fb14 <UART_Start_Receive_IT+0x48>
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb12:	e02d      	b.n	800fb70 <UART_Start_Receive_IT+0xa4>
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	22ff      	movs	r2, #255	; 0xff
 800fb18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb1c:	e028      	b.n	800fb70 <UART_Start_Receive_IT+0xa4>
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d10d      	bne.n	800fb42 <UART_Start_Receive_IT+0x76>
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d104      	bne.n	800fb38 <UART_Start_Receive_IT+0x6c>
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	22ff      	movs	r2, #255	; 0xff
 800fb32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb36:	e01b      	b.n	800fb70 <UART_Start_Receive_IT+0xa4>
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	227f      	movs	r2, #127	; 0x7f
 800fb3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb40:	e016      	b.n	800fb70 <UART_Start_Receive_IT+0xa4>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	689b      	ldr	r3, [r3, #8]
 800fb46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb4a:	d10d      	bne.n	800fb68 <UART_Start_Receive_IT+0x9c>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d104      	bne.n	800fb5e <UART_Start_Receive_IT+0x92>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	227f      	movs	r2, #127	; 0x7f
 800fb58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb5c:	e008      	b.n	800fb70 <UART_Start_Receive_IT+0xa4>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	223f      	movs	r2, #63	; 0x3f
 800fb62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb66:	e003      	b.n	800fb70 <UART_Start_Receive_IT+0xa4>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2222      	movs	r2, #34	; 0x22
 800fb7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	3308      	adds	r3, #8
 800fb86:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb8a:	e853 3f00 	ldrex	r3, [r3]
 800fb8e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fb90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb92:	f043 0301 	orr.w	r3, r3, #1
 800fb96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3308      	adds	r3, #8
 800fba0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fba4:	673a      	str	r2, [r7, #112]	; 0x70
 800fba6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fbaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fbac:	e841 2300 	strex	r3, r2, [r1]
 800fbb0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fbb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d1e3      	bne.n	800fb80 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fbbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbc0:	d14f      	bne.n	800fc62 <UART_Start_Receive_IT+0x196>
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fbc8:	88fa      	ldrh	r2, [r7, #6]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d349      	bcc.n	800fc62 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbd6:	d107      	bne.n	800fbe8 <UART_Start_Receive_IT+0x11c>
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d103      	bne.n	800fbe8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	4a47      	ldr	r2, [pc, #284]	; (800fd00 <UART_Start_Receive_IT+0x234>)
 800fbe4:	675a      	str	r2, [r3, #116]	; 0x74
 800fbe6:	e002      	b.n	800fbee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	4a46      	ldr	r2, [pc, #280]	; (800fd04 <UART_Start_Receive_IT+0x238>)
 800fbec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	691b      	ldr	r3, [r3, #16]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d01a      	beq.n	800fc2c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbfe:	e853 3f00 	ldrex	r3, [r3]
 800fc02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fc04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	461a      	mov	r2, r3
 800fc14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc20:	e841 2300 	strex	r3, r2, [r1]
 800fc24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fc26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1e4      	bne.n	800fbf6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	3308      	adds	r3, #8
 800fc32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc36:	e853 3f00 	ldrex	r3, [r3]
 800fc3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc42:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3308      	adds	r3, #8
 800fc4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fc4c:	64ba      	str	r2, [r7, #72]	; 0x48
 800fc4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc54:	e841 2300 	strex	r3, r2, [r1]
 800fc58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d1e5      	bne.n	800fc2c <UART_Start_Receive_IT+0x160>
 800fc60:	e046      	b.n	800fcf0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc6a:	d107      	bne.n	800fc7c <UART_Start_Receive_IT+0x1b0>
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d103      	bne.n	800fc7c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	4a24      	ldr	r2, [pc, #144]	; (800fd08 <UART_Start_Receive_IT+0x23c>)
 800fc78:	675a      	str	r2, [r3, #116]	; 0x74
 800fc7a:	e002      	b.n	800fc82 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	4a23      	ldr	r2, [pc, #140]	; (800fd0c <UART_Start_Receive_IT+0x240>)
 800fc80:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	691b      	ldr	r3, [r3, #16]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d019      	beq.n	800fcbe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc92:	e853 3f00 	ldrex	r3, [r3]
 800fc96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fc9e:	677b      	str	r3, [r7, #116]	; 0x74
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	461a      	mov	r2, r3
 800fca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fca8:	637b      	str	r3, [r7, #52]	; 0x34
 800fcaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcb0:	e841 2300 	strex	r3, r2, [r1]
 800fcb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1e6      	bne.n	800fc8a <UART_Start_Receive_IT+0x1be>
 800fcbc:	e018      	b.n	800fcf0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	e853 3f00 	ldrex	r3, [r3]
 800fcca:	613b      	str	r3, [r7, #16]
   return(result);
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	f043 0320 	orr.w	r3, r3, #32
 800fcd2:	67bb      	str	r3, [r7, #120]	; 0x78
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	461a      	mov	r2, r3
 800fcda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcdc:	623b      	str	r3, [r7, #32]
 800fcde:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce0:	69f9      	ldr	r1, [r7, #28]
 800fce2:	6a3a      	ldr	r2, [r7, #32]
 800fce4:	e841 2300 	strex	r3, r2, [r1]
 800fce8:	61bb      	str	r3, [r7, #24]
   return(result);
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1e6      	bne.n	800fcbe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	378c      	adds	r7, #140	; 0x8c
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	08010531 	.word	0x08010531
 800fd04:	080101d1 	.word	0x080101d1
 800fd08:	08010019 	.word	0x08010019
 800fd0c:	0800fe61 	.word	0x0800fe61

0800fd10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b095      	sub	sp, #84	; 0x54
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd20:	e853 3f00 	ldrex	r3, [r3]
 800fd24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	461a      	mov	r2, r3
 800fd34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd36:	643b      	str	r3, [r7, #64]	; 0x40
 800fd38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd3e:	e841 2300 	strex	r3, r2, [r1]
 800fd42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d1e6      	bne.n	800fd18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	3308      	adds	r3, #8
 800fd50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd52:	6a3b      	ldr	r3, [r7, #32]
 800fd54:	e853 3f00 	ldrex	r3, [r3]
 800fd58:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd5a:	69fa      	ldr	r2, [r7, #28]
 800fd5c:	4b1e      	ldr	r3, [pc, #120]	; (800fdd8 <UART_EndRxTransfer+0xc8>)
 800fd5e:	4013      	ands	r3, r2
 800fd60:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	3308      	adds	r3, #8
 800fd68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd72:	e841 2300 	strex	r3, r2, [r1]
 800fd76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d1e5      	bne.n	800fd4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d118      	bne.n	800fdb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	e853 3f00 	ldrex	r3, [r3]
 800fd92:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	f023 0310 	bic.w	r3, r3, #16
 800fd9a:	647b      	str	r3, [r7, #68]	; 0x44
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	461a      	mov	r2, r3
 800fda2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fda4:	61bb      	str	r3, [r7, #24]
 800fda6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda8:	6979      	ldr	r1, [r7, #20]
 800fdaa:	69ba      	ldr	r2, [r7, #24]
 800fdac:	e841 2300 	strex	r3, r2, [r1]
 800fdb0:	613b      	str	r3, [r7, #16]
   return(result);
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d1e6      	bne.n	800fd86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2220      	movs	r2, #32
 800fdbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fdcc:	bf00      	nop
 800fdce:	3754      	adds	r7, #84	; 0x54
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	effffffe 	.word	0xeffffffe

0800fddc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fde8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f7fe ff2e 	bl	800ec5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe00:	bf00      	nop
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b088      	sub	sp, #32
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe24:	61fb      	str	r3, [r7, #28]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	61bb      	str	r3, [r7, #24]
 800fe30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe32:	6979      	ldr	r1, [r7, #20]
 800fe34:	69ba      	ldr	r2, [r7, #24]
 800fe36:	e841 2300 	strex	r3, r2, [r1]
 800fe3a:	613b      	str	r3, [r7, #16]
   return(result);
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1e6      	bne.n	800fe10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2220      	movs	r2, #32
 800fe46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7fe fef9 	bl	800ec48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe56:	bf00      	nop
 800fe58:	3720      	adds	r7, #32
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
	...

0800fe60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b09c      	sub	sp, #112	; 0x70
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe78:	2b22      	cmp	r3, #34	; 0x22
 800fe7a:	f040 80be 	bne.w	800fffa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fe88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fe8c:	b2d9      	uxtb	r1, r3
 800fe8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe98:	400a      	ands	r2, r1
 800fe9a:	b2d2      	uxtb	r2, r2
 800fe9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fea2:	1c5a      	adds	r2, r3, #1
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800feae:	b29b      	uxth	r3, r3
 800feb0:	3b01      	subs	r3, #1
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f040 80a1 	bne.w	801000a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed0:	e853 3f00 	ldrex	r3, [r3]
 800fed4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fedc:	66bb      	str	r3, [r7, #104]	; 0x68
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	461a      	mov	r2, r3
 800fee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fee6:	65bb      	str	r3, [r7, #88]	; 0x58
 800fee8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800feec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800feee:	e841 2300 	strex	r3, r2, [r1]
 800fef2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d1e6      	bne.n	800fec8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	3308      	adds	r3, #8
 800ff00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff04:	e853 3f00 	ldrex	r3, [r3]
 800ff08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff0c:	f023 0301 	bic.w	r3, r3, #1
 800ff10:	667b      	str	r3, [r7, #100]	; 0x64
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	3308      	adds	r3, #8
 800ff18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff1a:	647a      	str	r2, [r7, #68]	; 0x44
 800ff1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff22:	e841 2300 	strex	r3, r2, [r1]
 800ff26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1e5      	bne.n	800fefa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2220      	movs	r2, #32
 800ff32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4a33      	ldr	r2, [pc, #204]	; (8010014 <UART_RxISR_8BIT+0x1b4>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d01f      	beq.n	800ff8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d018      	beq.n	800ff8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff62:	e853 3f00 	ldrex	r3, [r3]
 800ff66:	623b      	str	r3, [r7, #32]
   return(result);
 800ff68:	6a3b      	ldr	r3, [r7, #32]
 800ff6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ff6e:	663b      	str	r3, [r7, #96]	; 0x60
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	461a      	mov	r2, r3
 800ff76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff78:	633b      	str	r3, [r7, #48]	; 0x30
 800ff7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff80:	e841 2300 	strex	r3, r2, [r1]
 800ff84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1e6      	bne.n	800ff5a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d12e      	bne.n	800fff2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2200      	movs	r2, #0
 800ff98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	e853 3f00 	ldrex	r3, [r3]
 800ffa6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f023 0310 	bic.w	r3, r3, #16
 800ffae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffb8:	61fb      	str	r3, [r7, #28]
 800ffba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffbc:	69b9      	ldr	r1, [r7, #24]
 800ffbe:	69fa      	ldr	r2, [r7, #28]
 800ffc0:	e841 2300 	strex	r3, r2, [r1]
 800ffc4:	617b      	str	r3, [r7, #20]
   return(result);
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1e6      	bne.n	800ff9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	f003 0310 	and.w	r3, r3, #16
 800ffd6:	2b10      	cmp	r3, #16
 800ffd8:	d103      	bne.n	800ffe2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2210      	movs	r2, #16
 800ffe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ffe8:	4619      	mov	r1, r3
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f7fe fe40 	bl	800ec70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fff0:	e00b      	b.n	801000a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7f0 fb7c 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800fff8:	e007      	b.n	801000a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	699a      	ldr	r2, [r3, #24]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f042 0208 	orr.w	r2, r2, #8
 8010008:	619a      	str	r2, [r3, #24]
}
 801000a:	bf00      	nop
 801000c:	3770      	adds	r7, #112	; 0x70
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	58000c00 	.word	0x58000c00

08010018 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b09c      	sub	sp, #112	; 0x70
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010026:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010030:	2b22      	cmp	r3, #34	; 0x22
 8010032:	f040 80be 	bne.w	80101b2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801003c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010044:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010046:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801004a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801004e:	4013      	ands	r3, r2
 8010050:	b29a      	uxth	r2, r3
 8010052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010054:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801005a:	1c9a      	adds	r2, r3, #2
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010066:	b29b      	uxth	r3, r3
 8010068:	3b01      	subs	r3, #1
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010078:	b29b      	uxth	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	f040 80a1 	bne.w	80101c2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010088:	e853 3f00 	ldrex	r3, [r3]
 801008c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801008e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010094:	667b      	str	r3, [r7, #100]	; 0x64
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	461a      	mov	r2, r3
 801009c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801009e:	657b      	str	r3, [r7, #84]	; 0x54
 80100a0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100a6:	e841 2300 	strex	r3, r2, [r1]
 80100aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d1e6      	bne.n	8010080 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	3308      	adds	r3, #8
 80100b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100bc:	e853 3f00 	ldrex	r3, [r3]
 80100c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80100c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c4:	f023 0301 	bic.w	r3, r3, #1
 80100c8:	663b      	str	r3, [r7, #96]	; 0x60
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	3308      	adds	r3, #8
 80100d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80100d2:	643a      	str	r2, [r7, #64]	; 0x40
 80100d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100da:	e841 2300 	strex	r3, r2, [r1]
 80100de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d1e5      	bne.n	80100b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2220      	movs	r2, #32
 80100ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a33      	ldr	r2, [pc, #204]	; (80101cc <UART_RxISR_16BIT+0x1b4>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d01f      	beq.n	8010144 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801010e:	2b00      	cmp	r3, #0
 8010110:	d018      	beq.n	8010144 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010118:	6a3b      	ldr	r3, [r7, #32]
 801011a:	e853 3f00 	ldrex	r3, [r3]
 801011e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	461a      	mov	r2, r3
 801012e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010132:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010138:	e841 2300 	strex	r3, r2, [r1]
 801013c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801013e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010140:	2b00      	cmp	r3, #0
 8010142:	d1e6      	bne.n	8010112 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010148:	2b01      	cmp	r3, #1
 801014a:	d12e      	bne.n	80101aa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	e853 3f00 	ldrex	r3, [r3]
 801015e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	f023 0310 	bic.w	r3, r3, #16
 8010166:	65bb      	str	r3, [r7, #88]	; 0x58
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	461a      	mov	r2, r3
 801016e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010170:	61bb      	str	r3, [r7, #24]
 8010172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010174:	6979      	ldr	r1, [r7, #20]
 8010176:	69ba      	ldr	r2, [r7, #24]
 8010178:	e841 2300 	strex	r3, r2, [r1]
 801017c:	613b      	str	r3, [r7, #16]
   return(result);
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d1e6      	bne.n	8010152 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	69db      	ldr	r3, [r3, #28]
 801018a:	f003 0310 	and.w	r3, r3, #16
 801018e:	2b10      	cmp	r3, #16
 8010190:	d103      	bne.n	801019a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	2210      	movs	r2, #16
 8010198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101a0:	4619      	mov	r1, r3
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f7fe fd64 	bl	800ec70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101a8:	e00b      	b.n	80101c2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7f0 faa0 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80101b0:	e007      	b.n	80101c2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	699a      	ldr	r2, [r3, #24]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f042 0208 	orr.w	r2, r2, #8
 80101c0:	619a      	str	r2, [r3, #24]
}
 80101c2:	bf00      	nop
 80101c4:	3770      	adds	r7, #112	; 0x70
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	58000c00 	.word	0x58000c00

080101d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b0ac      	sub	sp, #176	; 0xb0
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	69db      	ldr	r3, [r3, #28]
 80101e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010206:	2b22      	cmp	r3, #34	; 0x22
 8010208:	f040 8180 	bne.w	801050c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010212:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010216:	e123      	b.n	8010460 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801021e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010222:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010226:	b2d9      	uxtb	r1, r3
 8010228:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801022c:	b2da      	uxtb	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010232:	400a      	ands	r2, r1
 8010234:	b2d2      	uxtb	r2, r2
 8010236:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801023c:	1c5a      	adds	r2, r3, #1
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010248:	b29b      	uxth	r3, r3
 801024a:	3b01      	subs	r3, #1
 801024c:	b29a      	uxth	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	69db      	ldr	r3, [r3, #28]
 801025a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801025e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010262:	f003 0307 	and.w	r3, r3, #7
 8010266:	2b00      	cmp	r3, #0
 8010268:	d053      	beq.n	8010312 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801026a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	d011      	beq.n	801029a <UART_RxISR_8BIT_FIFOEN+0xca>
 8010276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801027a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00b      	beq.n	801029a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	2201      	movs	r2, #1
 8010288:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010290:	f043 0201 	orr.w	r2, r3, #1
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801029a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801029e:	f003 0302 	and.w	r3, r3, #2
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d011      	beq.n	80102ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80102a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102aa:	f003 0301 	and.w	r3, r3, #1
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d00b      	beq.n	80102ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2202      	movs	r2, #2
 80102b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102c0:	f043 0204 	orr.w	r2, r3, #4
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102ce:	f003 0304 	and.w	r3, r3, #4
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d011      	beq.n	80102fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80102d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102da:	f003 0301 	and.w	r3, r3, #1
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00b      	beq.n	80102fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2204      	movs	r2, #4
 80102e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102f0:	f043 0202 	orr.w	r2, r3, #2
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010300:	2b00      	cmp	r3, #0
 8010302:	d006      	beq.n	8010312 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7fe fca9 	bl	800ec5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010318:	b29b      	uxth	r3, r3
 801031a:	2b00      	cmp	r3, #0
 801031c:	f040 80a0 	bne.w	8010460 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010328:	e853 3f00 	ldrex	r3, [r3]
 801032c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801032e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010342:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010344:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010346:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010348:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801034a:	e841 2300 	strex	r3, r2, [r1]
 801034e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1e4      	bne.n	8010320 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	3308      	adds	r3, #8
 801035c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010360:	e853 3f00 	ldrex	r3, [r3]
 8010364:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010368:	4b6e      	ldr	r3, [pc, #440]	; (8010524 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801036a:	4013      	ands	r3, r2
 801036c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	3308      	adds	r3, #8
 8010376:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801037a:	66ba      	str	r2, [r7, #104]	; 0x68
 801037c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801037e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010380:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010382:	e841 2300 	strex	r3, r2, [r1]
 8010386:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801038a:	2b00      	cmp	r3, #0
 801038c:	d1e3      	bne.n	8010356 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2220      	movs	r2, #32
 8010392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2200      	movs	r2, #0
 80103a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4a60      	ldr	r2, [pc, #384]	; (8010528 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d021      	beq.n	80103f0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d01a      	beq.n	80103f0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103c2:	e853 3f00 	ldrex	r3, [r3]
 80103c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80103c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80103ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	461a      	mov	r2, r3
 80103d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103dc:	657b      	str	r3, [r7, #84]	; 0x54
 80103de:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103e4:	e841 2300 	strex	r3, r2, [r1]
 80103e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80103ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d1e4      	bne.n	80103ba <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d130      	bne.n	801045a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010406:	e853 3f00 	ldrex	r3, [r3]
 801040a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801040c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040e:	f023 0310 	bic.w	r3, r3, #16
 8010412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	461a      	mov	r2, r3
 801041c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010420:	643b      	str	r3, [r7, #64]	; 0x40
 8010422:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010428:	e841 2300 	strex	r3, r2, [r1]
 801042c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801042e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1e4      	bne.n	80103fe <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	69db      	ldr	r3, [r3, #28]
 801043a:	f003 0310 	and.w	r3, r3, #16
 801043e:	2b10      	cmp	r3, #16
 8010440:	d103      	bne.n	801044a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2210      	movs	r2, #16
 8010448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010450:	4619      	mov	r1, r3
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f7fe fc0c 	bl	800ec70 <HAL_UARTEx_RxEventCallback>
 8010458:	e002      	b.n	8010460 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7f0 f948 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010460:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010464:	2b00      	cmp	r3, #0
 8010466:	d006      	beq.n	8010476 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801046c:	f003 0320 	and.w	r3, r3, #32
 8010470:	2b00      	cmp	r3, #0
 8010472:	f47f aed1 	bne.w	8010218 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801047c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010480:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010484:	2b00      	cmp	r3, #0
 8010486:	d049      	beq.n	801051c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801048e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010492:	429a      	cmp	r2, r3
 8010494:	d242      	bcs.n	801051c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	3308      	adds	r3, #8
 801049c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801049e:	6a3b      	ldr	r3, [r7, #32]
 80104a0:	e853 3f00 	ldrex	r3, [r3]
 80104a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80104ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	3308      	adds	r3, #8
 80104b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80104ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80104bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104c2:	e841 2300 	strex	r3, r2, [r1]
 80104c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d1e3      	bne.n	8010496 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4a16      	ldr	r2, [pc, #88]	; (801052c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80104d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	e853 3f00 	ldrex	r3, [r3]
 80104e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	f043 0320 	orr.w	r3, r3, #32
 80104e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	461a      	mov	r2, r3
 80104f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104f6:	61bb      	str	r3, [r7, #24]
 80104f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fa:	6979      	ldr	r1, [r7, #20]
 80104fc:	69ba      	ldr	r2, [r7, #24]
 80104fe:	e841 2300 	strex	r3, r2, [r1]
 8010502:	613b      	str	r3, [r7, #16]
   return(result);
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d1e4      	bne.n	80104d4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801050a:	e007      	b.n	801051c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	699a      	ldr	r2, [r3, #24]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f042 0208 	orr.w	r2, r2, #8
 801051a:	619a      	str	r2, [r3, #24]
}
 801051c:	bf00      	nop
 801051e:	37b0      	adds	r7, #176	; 0xb0
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	effffffe 	.word	0xeffffffe
 8010528:	58000c00 	.word	0x58000c00
 801052c:	0800fe61 	.word	0x0800fe61

08010530 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b0ae      	sub	sp, #184	; 0xb8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801053e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	69db      	ldr	r3, [r3, #28]
 8010548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	689b      	ldr	r3, [r3, #8]
 801055c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010566:	2b22      	cmp	r3, #34	; 0x22
 8010568:	f040 8184 	bne.w	8010874 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010572:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010576:	e127      	b.n	80107c8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801058a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801058e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010592:	4013      	ands	r3, r2
 8010594:	b29a      	uxth	r2, r3
 8010596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801059a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105a0:	1c9a      	adds	r2, r3, #2
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	3b01      	subs	r3, #1
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	69db      	ldr	r3, [r3, #28]
 80105be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80105c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80105c6:	f003 0307 	and.w	r3, r3, #7
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d053      	beq.n	8010676 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80105ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80105d2:	f003 0301 	and.w	r3, r3, #1
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d011      	beq.n	80105fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80105da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00b      	beq.n	80105fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2201      	movs	r2, #1
 80105ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105f4:	f043 0201 	orr.w	r2, r3, #1
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80105fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010602:	f003 0302 	and.w	r3, r3, #2
 8010606:	2b00      	cmp	r3, #0
 8010608:	d011      	beq.n	801062e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801060a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801060e:	f003 0301 	and.w	r3, r3, #1
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00b      	beq.n	801062e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2202      	movs	r2, #2
 801061c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010624:	f043 0204 	orr.w	r2, r3, #4
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801062e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010632:	f003 0304 	and.w	r3, r3, #4
 8010636:	2b00      	cmp	r3, #0
 8010638:	d011      	beq.n	801065e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801063a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801063e:	f003 0301 	and.w	r3, r3, #1
 8010642:	2b00      	cmp	r3, #0
 8010644:	d00b      	beq.n	801065e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2204      	movs	r2, #4
 801064c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010654:	f043 0202 	orr.w	r2, r3, #2
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010664:	2b00      	cmp	r3, #0
 8010666:	d006      	beq.n	8010676 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7fe faf7 	bl	800ec5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2200      	movs	r2, #0
 8010672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801067c:	b29b      	uxth	r3, r3
 801067e:	2b00      	cmp	r3, #0
 8010680:	f040 80a2 	bne.w	80107c8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801068a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801068c:	e853 3f00 	ldrex	r3, [r3]
 8010690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	461a      	mov	r2, r3
 80106a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80106a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80106aa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80106ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80106b2:	e841 2300 	strex	r3, r2, [r1]
 80106b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80106b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d1e2      	bne.n	8010684 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3308      	adds	r3, #8
 80106c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106c8:	e853 3f00 	ldrex	r3, [r3]
 80106cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80106ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80106d0:	4b6e      	ldr	r3, [pc, #440]	; (801088c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80106d2:	4013      	ands	r3, r2
 80106d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	3308      	adds	r3, #8
 80106de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80106e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80106e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80106e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80106ea:	e841 2300 	strex	r3, r2, [r1]
 80106ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80106f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1e3      	bne.n	80106be <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2220      	movs	r2, #32
 80106fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2200      	movs	r2, #0
 8010702:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2200      	movs	r2, #0
 8010708:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4a60      	ldr	r2, [pc, #384]	; (8010890 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d021      	beq.n	8010758 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801071e:	2b00      	cmp	r3, #0
 8010720:	d01a      	beq.n	8010758 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801072a:	e853 3f00 	ldrex	r3, [r3]
 801072e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	461a      	mov	r2, r3
 8010740:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010744:	65bb      	str	r3, [r7, #88]	; 0x58
 8010746:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801074a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801074c:	e841 2300 	strex	r3, r2, [r1]
 8010750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010754:	2b00      	cmp	r3, #0
 8010756:	d1e4      	bne.n	8010722 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801075c:	2b01      	cmp	r3, #1
 801075e:	d130      	bne.n	80107c2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2200      	movs	r2, #0
 8010764:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076e:	e853 3f00 	ldrex	r3, [r3]
 8010772:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010776:	f023 0310 	bic.w	r3, r3, #16
 801077a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010788:	647b      	str	r3, [r7, #68]	; 0x44
 801078a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801078e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010790:	e841 2300 	strex	r3, r2, [r1]
 8010794:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1e4      	bne.n	8010766 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	69db      	ldr	r3, [r3, #28]
 80107a2:	f003 0310 	and.w	r3, r3, #16
 80107a6:	2b10      	cmp	r3, #16
 80107a8:	d103      	bne.n	80107b2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2210      	movs	r2, #16
 80107b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80107b8:	4619      	mov	r1, r3
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7fe fa58 	bl	800ec70 <HAL_UARTEx_RxEventCallback>
 80107c0:	e002      	b.n	80107c8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7ef ff94 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80107c8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d006      	beq.n	80107de <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80107d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107d4:	f003 0320 	and.w	r3, r3, #32
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f47f aecd 	bne.w	8010578 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107e4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80107e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d049      	beq.n	8010884 <UART_RxISR_16BIT_FIFOEN+0x354>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80107f6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d242      	bcs.n	8010884 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	3308      	adds	r3, #8
 8010804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010808:	e853 3f00 	ldrex	r3, [r3]
 801080c:	623b      	str	r3, [r7, #32]
   return(result);
 801080e:	6a3b      	ldr	r3, [r7, #32]
 8010810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	3308      	adds	r3, #8
 801081e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010822:	633a      	str	r2, [r7, #48]	; 0x30
 8010824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801082a:	e841 2300 	strex	r3, r2, [r1]
 801082e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1e3      	bne.n	80107fe <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	4a16      	ldr	r2, [pc, #88]	; (8010894 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801083a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	e853 3f00 	ldrex	r3, [r3]
 8010848:	60fb      	str	r3, [r7, #12]
   return(result);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f043 0320 	orr.w	r3, r3, #32
 8010850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	461a      	mov	r2, r3
 801085a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801085e:	61fb      	str	r3, [r7, #28]
 8010860:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010862:	69b9      	ldr	r1, [r7, #24]
 8010864:	69fa      	ldr	r2, [r7, #28]
 8010866:	e841 2300 	strex	r3, r2, [r1]
 801086a:	617b      	str	r3, [r7, #20]
   return(result);
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1e4      	bne.n	801083c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010872:	e007      	b.n	8010884 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	699a      	ldr	r2, [r3, #24]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f042 0208 	orr.w	r2, r2, #8
 8010882:	619a      	str	r2, [r3, #24]
}
 8010884:	bf00      	nop
 8010886:	37b8      	adds	r7, #184	; 0xb8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	effffffe 	.word	0xeffffffe
 8010890:	58000c00 	.word	0x58000c00
 8010894:	08010019 	.word	0x08010019

08010898 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80108a0:	bf00      	nop
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80108b4:	bf00      	nop
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr

080108c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80108c8:	bf00      	nop
 80108ca:	370c      	adds	r7, #12
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d101      	bne.n	80108ea <HAL_UARTEx_DisableFifoMode+0x16>
 80108e6:	2302      	movs	r3, #2
 80108e8:	e027      	b.n	801093a <HAL_UARTEx_DisableFifoMode+0x66>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2201      	movs	r2, #1
 80108ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2224      	movs	r2, #36	; 0x24
 80108f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f022 0201 	bic.w	r2, r2, #1
 8010910:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010918:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2200      	movs	r2, #0
 801091e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68fa      	ldr	r2, [r7, #12]
 8010926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2220      	movs	r2, #32
 801092c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	3714      	adds	r7, #20
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b084      	sub	sp, #16
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
 801094e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010956:	2b01      	cmp	r3, #1
 8010958:	d101      	bne.n	801095e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801095a:	2302      	movs	r3, #2
 801095c:	e02d      	b.n	80109ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2201      	movs	r2, #1
 8010962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2224      	movs	r2, #36	; 0x24
 801096a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f022 0201 	bic.w	r2, r2, #1
 8010984:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	689b      	ldr	r3, [r3, #8]
 801098c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	683a      	ldr	r2, [r7, #0]
 8010996:	430a      	orrs	r2, r1
 8010998:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f000 f850 	bl	8010a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2220      	movs	r2, #32
 80109ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80109b8:	2300      	movs	r3, #0
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3710      	adds	r7, #16
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}

080109c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109c2:	b580      	push	{r7, lr}
 80109c4:	b084      	sub	sp, #16
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
 80109ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d101      	bne.n	80109da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80109d6:	2302      	movs	r3, #2
 80109d8:	e02d      	b.n	8010a36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2201      	movs	r2, #1
 80109de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2224      	movs	r2, #36	; 0x24
 80109e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f022 0201 	bic.w	r2, r2, #1
 8010a00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	689b      	ldr	r3, [r3, #8]
 8010a08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	683a      	ldr	r2, [r7, #0]
 8010a12:	430a      	orrs	r2, r1
 8010a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f000 f812 	bl	8010a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	68fa      	ldr	r2, [r7, #12]
 8010a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2220      	movs	r2, #32
 8010a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
	...

08010a40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b085      	sub	sp, #20
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d108      	bne.n	8010a62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2201      	movs	r2, #1
 8010a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010a60:	e031      	b.n	8010ac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010a62:	2310      	movs	r3, #16
 8010a64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a66:	2310      	movs	r3, #16
 8010a68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	0e5b      	lsrs	r3, r3, #25
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	f003 0307 	and.w	r3, r3, #7
 8010a78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	0f5b      	lsrs	r3, r3, #29
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	f003 0307 	and.w	r3, r3, #7
 8010a88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a8a:	7bbb      	ldrb	r3, [r7, #14]
 8010a8c:	7b3a      	ldrb	r2, [r7, #12]
 8010a8e:	4911      	ldr	r1, [pc, #68]	; (8010ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8010a90:	5c8a      	ldrb	r2, [r1, r2]
 8010a92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a96:	7b3a      	ldrb	r2, [r7, #12]
 8010a98:	490f      	ldr	r1, [pc, #60]	; (8010ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8010a9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
 8010aaa:	7b7a      	ldrb	r2, [r7, #13]
 8010aac:	4909      	ldr	r1, [pc, #36]	; (8010ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8010aae:	5c8a      	ldrb	r2, [r1, r2]
 8010ab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010ab4:	7b7a      	ldrb	r2, [r7, #13]
 8010ab6:	4908      	ldr	r1, [pc, #32]	; (8010ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8010ab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010aba:	fb93 f3f2 	sdiv	r3, r3, r2
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010ac6:	bf00      	nop
 8010ac8:	3714      	adds	r7, #20
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr
 8010ad2:	bf00      	nop
 8010ad4:	080155f4 	.word	0x080155f4
 8010ad8:	080155fc 	.word	0x080155fc

08010adc <__NVIC_SetPriority>:
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	6039      	str	r1, [r7, #0]
 8010ae6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	db0a      	blt.n	8010b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	490c      	ldr	r1, [pc, #48]	; (8010b28 <__NVIC_SetPriority+0x4c>)
 8010af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010afa:	0112      	lsls	r2, r2, #4
 8010afc:	b2d2      	uxtb	r2, r2
 8010afe:	440b      	add	r3, r1
 8010b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010b04:	e00a      	b.n	8010b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	b2da      	uxtb	r2, r3
 8010b0a:	4908      	ldr	r1, [pc, #32]	; (8010b2c <__NVIC_SetPriority+0x50>)
 8010b0c:	88fb      	ldrh	r3, [r7, #6]
 8010b0e:	f003 030f 	and.w	r3, r3, #15
 8010b12:	3b04      	subs	r3, #4
 8010b14:	0112      	lsls	r2, r2, #4
 8010b16:	b2d2      	uxtb	r2, r2
 8010b18:	440b      	add	r3, r1
 8010b1a:	761a      	strb	r2, [r3, #24]
}
 8010b1c:	bf00      	nop
 8010b1e:	370c      	adds	r7, #12
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr
 8010b28:	e000e100 	.word	0xe000e100
 8010b2c:	e000ed00 	.word	0xe000ed00

08010b30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010b30:	b580      	push	{r7, lr}
 8010b32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010b34:	4b05      	ldr	r3, [pc, #20]	; (8010b4c <SysTick_Handler+0x1c>)
 8010b36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010b38:	f002 fada 	bl	80130f0 <xTaskGetSchedulerState>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d001      	beq.n	8010b46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010b42:	f003 f8f9 	bl	8013d38 <xPortSysTickHandler>
  }
}
 8010b46:	bf00      	nop
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	e000e010 	.word	0xe000e010

08010b50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010b50:	b580      	push	{r7, lr}
 8010b52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010b54:	2100      	movs	r1, #0
 8010b56:	f06f 0004 	mvn.w	r0, #4
 8010b5a:	f7ff ffbf 	bl	8010adc <__NVIC_SetPriority>
#endif
}
 8010b5e:	bf00      	nop
 8010b60:	bd80      	pop	{r7, pc}
	...

08010b64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b6a:	f3ef 8305 	mrs	r3, IPSR
 8010b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8010b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d003      	beq.n	8010b7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010b76:	f06f 0305 	mvn.w	r3, #5
 8010b7a:	607b      	str	r3, [r7, #4]
 8010b7c:	e00c      	b.n	8010b98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010b7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ba8 <osKernelInitialize+0x44>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d105      	bne.n	8010b92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010b86:	4b08      	ldr	r3, [pc, #32]	; (8010ba8 <osKernelInitialize+0x44>)
 8010b88:	2201      	movs	r2, #1
 8010b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	607b      	str	r3, [r7, #4]
 8010b90:	e002      	b.n	8010b98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010b98:	687b      	ldr	r3, [r7, #4]
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	2400077c 	.word	0x2400077c

08010bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bb2:	f3ef 8305 	mrs	r3, IPSR
 8010bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8010bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d003      	beq.n	8010bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8010bbe:	f06f 0305 	mvn.w	r3, #5
 8010bc2:	607b      	str	r3, [r7, #4]
 8010bc4:	e010      	b.n	8010be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010bc6:	4b0b      	ldr	r3, [pc, #44]	; (8010bf4 <osKernelStart+0x48>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d109      	bne.n	8010be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010bce:	f7ff ffbf 	bl	8010b50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010bd2:	4b08      	ldr	r3, [pc, #32]	; (8010bf4 <osKernelStart+0x48>)
 8010bd4:	2202      	movs	r2, #2
 8010bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010bd8:	f001 fda4 	bl	8012724 <vTaskStartScheduler>
      stat = osOK;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	607b      	str	r3, [r7, #4]
 8010be0:	e002      	b.n	8010be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010be8:	687b      	ldr	r3, [r7, #4]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	2400077c 	.word	0x2400077c

08010bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b08e      	sub	sp, #56	; 0x38
 8010bfc:	af04      	add	r7, sp, #16
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010c04:	2300      	movs	r3, #0
 8010c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c08:	f3ef 8305 	mrs	r3, IPSR
 8010c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8010c0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d17e      	bne.n	8010d12 <osThreadNew+0x11a>
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d07b      	beq.n	8010d12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010c1a:	2380      	movs	r3, #128	; 0x80
 8010c1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010c1e:	2318      	movs	r3, #24
 8010c20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010c22:	2300      	movs	r3, #0
 8010c24:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d045      	beq.n	8010cbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d002      	beq.n	8010c40 <osThreadNew+0x48>
        name = attr->name;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	699b      	ldr	r3, [r3, #24]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	699b      	ldr	r3, [r3, #24]
 8010c4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d008      	beq.n	8010c66 <osThreadNew+0x6e>
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	2b38      	cmp	r3, #56	; 0x38
 8010c58:	d805      	bhi.n	8010c66 <osThreadNew+0x6e>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	f003 0301 	and.w	r3, r3, #1
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d001      	beq.n	8010c6a <osThreadNew+0x72>
        return (NULL);
 8010c66:	2300      	movs	r3, #0
 8010c68:	e054      	b.n	8010d14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	695b      	ldr	r3, [r3, #20]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d003      	beq.n	8010c7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	695b      	ldr	r3, [r3, #20]
 8010c76:	089b      	lsrs	r3, r3, #2
 8010c78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	689b      	ldr	r3, [r3, #8]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00e      	beq.n	8010ca0 <osThreadNew+0xa8>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	2b5b      	cmp	r3, #91	; 0x5b
 8010c88:	d90a      	bls.n	8010ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d006      	beq.n	8010ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	695b      	ldr	r3, [r3, #20]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d002      	beq.n	8010ca0 <osThreadNew+0xa8>
        mem = 1;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	61bb      	str	r3, [r7, #24]
 8010c9e:	e010      	b.n	8010cc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	689b      	ldr	r3, [r3, #8]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d10c      	bne.n	8010cc2 <osThreadNew+0xca>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d108      	bne.n	8010cc2 <osThreadNew+0xca>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	691b      	ldr	r3, [r3, #16]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d104      	bne.n	8010cc2 <osThreadNew+0xca>
          mem = 0;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	61bb      	str	r3, [r7, #24]
 8010cbc:	e001      	b.n	8010cc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d110      	bne.n	8010cea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010cd0:	9202      	str	r2, [sp, #8]
 8010cd2:	9301      	str	r3, [sp, #4]
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	6a3a      	ldr	r2, [r7, #32]
 8010cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010cde:	68f8      	ldr	r0, [r7, #12]
 8010ce0:	f001 fb4a 	bl	8012378 <xTaskCreateStatic>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	613b      	str	r3, [r7, #16]
 8010ce8:	e013      	b.n	8010d12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d110      	bne.n	8010d12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010cf0:	6a3b      	ldr	r3, [r7, #32]
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	f107 0310 	add.w	r3, r7, #16
 8010cf8:	9301      	str	r3, [sp, #4]
 8010cfa:	69fb      	ldr	r3, [r7, #28]
 8010cfc:	9300      	str	r3, [sp, #0]
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d02:	68f8      	ldr	r0, [r7, #12]
 8010d04:	f001 fb95 	bl	8012432 <xTaskCreate>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d001      	beq.n	8010d12 <osThreadNew+0x11a>
            hTask = NULL;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010d12:	693b      	ldr	r3, [r7, #16]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3728      	adds	r7, #40	; 0x28
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d22:	f3ef 8305 	mrs	r3, IPSR
 8010d26:	603b      	str	r3, [r7, #0]
  return(result);
 8010d28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d003      	beq.n	8010d36 <osThreadYield+0x1a>
    stat = osErrorISR;
 8010d2e:	f06f 0305 	mvn.w	r3, #5
 8010d32:	607b      	str	r3, [r7, #4]
 8010d34:	e009      	b.n	8010d4a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8010d36:	2300      	movs	r3, #0
 8010d38:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8010d3a:	4b07      	ldr	r3, [pc, #28]	; (8010d58 <osThreadYield+0x3c>)
 8010d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d40:	601a      	str	r2, [r3, #0]
 8010d42:	f3bf 8f4f 	dsb	sy
 8010d46:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8010d4a:	687b      	ldr	r3, [r7, #4]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr
 8010d58:	e000ed04 	.word	0xe000ed04

08010d5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d64:	f3ef 8305 	mrs	r3, IPSR
 8010d68:	60bb      	str	r3, [r7, #8]
  return(result);
 8010d6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d003      	beq.n	8010d78 <osDelay+0x1c>
    stat = osErrorISR;
 8010d70:	f06f 0305 	mvn.w	r3, #5
 8010d74:	60fb      	str	r3, [r7, #12]
 8010d76:	e007      	b.n	8010d88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d002      	beq.n	8010d88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f001 fc9a 	bl	80126bc <vTaskDelay>
    }
  }

  return (stat);
 8010d88:	68fb      	ldr	r3, [r7, #12]
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3710      	adds	r7, #16
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b086      	sub	sp, #24
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d9e:	f3ef 8305 	mrs	r3, IPSR
 8010da2:	60fb      	str	r3, [r7, #12]
  return(result);
 8010da4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d12d      	bne.n	8010e06 <osEventFlagsNew+0x74>
    mem = -1;
 8010daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dae:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d015      	beq.n	8010de2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	689b      	ldr	r3, [r3, #8]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d006      	beq.n	8010dcc <osEventFlagsNew+0x3a>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	2b1f      	cmp	r3, #31
 8010dc4:	d902      	bls.n	8010dcc <osEventFlagsNew+0x3a>
        mem = 1;
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	613b      	str	r3, [r7, #16]
 8010dca:	e00c      	b.n	8010de6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	689b      	ldr	r3, [r3, #8]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d108      	bne.n	8010de6 <osEventFlagsNew+0x54>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d104      	bne.n	8010de6 <osEventFlagsNew+0x54>
          mem = 0;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	613b      	str	r3, [r7, #16]
 8010de0:	e001      	b.n	8010de6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8010de2:	2300      	movs	r3, #0
 8010de4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d106      	bne.n	8010dfa <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f000 fa3d 	bl	8011270 <xEventGroupCreateStatic>
 8010df6:	6178      	str	r0, [r7, #20]
 8010df8:	e005      	b.n	8010e06 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d102      	bne.n	8010e06 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8010e00:	f000 fa6d 	bl	80112de <xEventGroupCreate>
 8010e04:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010e06:	697b      	ldr	r3, [r7, #20]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3718      	adds	r7, #24
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b086      	sub	sp, #24
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d004      	beq.n	8010e2e <osEventFlagsSet+0x1e>
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d003      	beq.n	8010e36 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8010e2e:	f06f 0303 	mvn.w	r3, #3
 8010e32:	617b      	str	r3, [r7, #20]
 8010e34:	e028      	b.n	8010e88 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e36:	f3ef 8305 	mrs	r3, IPSR
 8010e3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d01d      	beq.n	8010e7e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010e42:	2300      	movs	r3, #0
 8010e44:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8010e46:	f107 0308 	add.w	r3, r7, #8
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	6839      	ldr	r1, [r7, #0]
 8010e4e:	6938      	ldr	r0, [r7, #16]
 8010e50:	f000 fbe8 	bl	8011624 <xEventGroupSetBitsFromISR>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d103      	bne.n	8010e62 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8010e5a:	f06f 0302 	mvn.w	r3, #2
 8010e5e:	617b      	str	r3, [r7, #20]
 8010e60:	e012      	b.n	8010e88 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00d      	beq.n	8010e88 <osEventFlagsSet+0x78>
 8010e6c:	4b09      	ldr	r3, [pc, #36]	; (8010e94 <osEventFlagsSet+0x84>)
 8010e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	f3bf 8f4f 	dsb	sy
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	e004      	b.n	8010e88 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8010e7e:	6839      	ldr	r1, [r7, #0]
 8010e80:	6938      	ldr	r0, [r7, #16]
 8010e82:	f000 fb15 	bl	80114b0 <xEventGroupSetBits>
 8010e86:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010e88:	697b      	ldr	r3, [r7, #20]
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3718      	adds	r7, #24
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	bf00      	nop
 8010e94:	e000ed04 	.word	0xe000ed04

08010e98 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b08c      	sub	sp, #48	; 0x30
 8010e9c:	af02      	add	r7, sp, #8
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
 8010ea4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010eaa:	69bb      	ldr	r3, [r7, #24]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d004      	beq.n	8010eba <osEventFlagsWait+0x22>
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d003      	beq.n	8010ec2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8010eba:	f06f 0303 	mvn.w	r3, #3
 8010ebe:	61fb      	str	r3, [r7, #28]
 8010ec0:	e04b      	b.n	8010f5a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ec2:	f3ef 8305 	mrs	r3, IPSR
 8010ec6:	617b      	str	r3, [r7, #20]
  return(result);
 8010ec8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d003      	beq.n	8010ed6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8010ece:	f06f 0305 	mvn.w	r3, #5
 8010ed2:	61fb      	str	r3, [r7, #28]
 8010ed4:	e041      	b.n	8010f5a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d002      	beq.n	8010ee6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8010ee4:	e001      	b.n	8010eea <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f003 0302 	and.w	r3, r3, #2
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	623b      	str	r3, [r7, #32]
 8010ef8:	e001      	b.n	8010efe <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8010efa:	2301      	movs	r3, #1
 8010efc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f04:	6a3a      	ldr	r2, [r7, #32]
 8010f06:	68b9      	ldr	r1, [r7, #8]
 8010f08:	69b8      	ldr	r0, [r7, #24]
 8010f0a:	f000 fa03 	bl	8011314 <xEventGroupWaitBits>
 8010f0e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f003 0301 	and.w	r3, r3, #1
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d010      	beq.n	8010f3c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	4013      	ands	r3, r2
 8010f20:	68ba      	ldr	r2, [r7, #8]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d019      	beq.n	8010f5a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d003      	beq.n	8010f34 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8010f2c:	f06f 0301 	mvn.w	r3, #1
 8010f30:	61fb      	str	r3, [r7, #28]
 8010f32:	e012      	b.n	8010f5a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010f34:	f06f 0302 	mvn.w	r3, #2
 8010f38:	61fb      	str	r3, [r7, #28]
 8010f3a:	e00e      	b.n	8010f5a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8010f3c:	68ba      	ldr	r2, [r7, #8]
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	4013      	ands	r3, r2
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d109      	bne.n	8010f5a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d003      	beq.n	8010f54 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8010f4c:	f06f 0301 	mvn.w	r3, #1
 8010f50:	61fb      	str	r3, [r7, #28]
 8010f52:	e002      	b.n	8010f5a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010f54:	f06f 0302 	mvn.w	r3, #2
 8010f58:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8010f5a:	69fb      	ldr	r3, [r7, #28]
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3728      	adds	r7, #40	; 0x28
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}

08010f64 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b08a      	sub	sp, #40	; 0x28
 8010f68:	af02      	add	r7, sp, #8
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010f70:	2300      	movs	r3, #0
 8010f72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f74:	f3ef 8305 	mrs	r3, IPSR
 8010f78:	613b      	str	r3, [r7, #16]
  return(result);
 8010f7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d15f      	bne.n	8011040 <osMessageQueueNew+0xdc>
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d05c      	beq.n	8011040 <osMessageQueueNew+0xdc>
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d059      	beq.n	8011040 <osMessageQueueNew+0xdc>
    mem = -1;
 8010f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d029      	beq.n	8010fec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d012      	beq.n	8010fc6 <osMessageQueueNew+0x62>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	2b4f      	cmp	r3, #79	; 0x4f
 8010fa6:	d90e      	bls.n	8010fc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00a      	beq.n	8010fc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	695a      	ldr	r2, [r3, #20]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	68b9      	ldr	r1, [r7, #8]
 8010fb8:	fb01 f303 	mul.w	r3, r1, r3
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d302      	bcc.n	8010fc6 <osMessageQueueNew+0x62>
        mem = 1;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	61bb      	str	r3, [r7, #24]
 8010fc4:	e014      	b.n	8010ff0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	689b      	ldr	r3, [r3, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d110      	bne.n	8010ff0 <osMessageQueueNew+0x8c>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d10c      	bne.n	8010ff0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d108      	bne.n	8010ff0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	695b      	ldr	r3, [r3, #20]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d104      	bne.n	8010ff0 <osMessageQueueNew+0x8c>
          mem = 0;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	61bb      	str	r3, [r7, #24]
 8010fea:	e001      	b.n	8010ff0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d10b      	bne.n	801100e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	691a      	ldr	r2, [r3, #16]
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	689b      	ldr	r3, [r3, #8]
 8010ffe:	2100      	movs	r1, #0
 8011000:	9100      	str	r1, [sp, #0]
 8011002:	68b9      	ldr	r1, [r7, #8]
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f000 fc3d 	bl	8011884 <xQueueGenericCreateStatic>
 801100a:	61f8      	str	r0, [r7, #28]
 801100c:	e008      	b.n	8011020 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801100e:	69bb      	ldr	r3, [r7, #24]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d105      	bne.n	8011020 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011014:	2200      	movs	r2, #0
 8011016:	68b9      	ldr	r1, [r7, #8]
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	f000 fcab 	bl	8011974 <xQueueGenericCreate>
 801101e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d00c      	beq.n	8011040 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d003      	beq.n	8011034 <osMessageQueueNew+0xd0>
        name = attr->name;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	617b      	str	r3, [r7, #20]
 8011032:	e001      	b.n	8011038 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011034:	2300      	movs	r3, #0
 8011036:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011038:	6979      	ldr	r1, [r7, #20]
 801103a:	69f8      	ldr	r0, [r7, #28]
 801103c:	f001 f93e 	bl	80122bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011040:	69fb      	ldr	r3, [r7, #28]
}
 8011042:	4618      	mov	r0, r3
 8011044:	3720      	adds	r7, #32
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
	...

0801104c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801104c:	b580      	push	{r7, lr}
 801104e:	b088      	sub	sp, #32
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	603b      	str	r3, [r7, #0]
 8011058:	4613      	mov	r3, r2
 801105a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011060:	2300      	movs	r3, #0
 8011062:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011064:	f3ef 8305 	mrs	r3, IPSR
 8011068:	617b      	str	r3, [r7, #20]
  return(result);
 801106a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801106c:	2b00      	cmp	r3, #0
 801106e:	d028      	beq.n	80110c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d005      	beq.n	8011082 <osMessageQueuePut+0x36>
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d002      	beq.n	8011082 <osMessageQueuePut+0x36>
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d003      	beq.n	801108a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011082:	f06f 0303 	mvn.w	r3, #3
 8011086:	61fb      	str	r3, [r7, #28]
 8011088:	e038      	b.n	80110fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801108a:	2300      	movs	r3, #0
 801108c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801108e:	f107 0210 	add.w	r2, r7, #16
 8011092:	2300      	movs	r3, #0
 8011094:	68b9      	ldr	r1, [r7, #8]
 8011096:	69b8      	ldr	r0, [r7, #24]
 8011098:	f000 fdc8 	bl	8011c2c <xQueueGenericSendFromISR>
 801109c:	4603      	mov	r3, r0
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d003      	beq.n	80110aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80110a2:	f06f 0302 	mvn.w	r3, #2
 80110a6:	61fb      	str	r3, [r7, #28]
 80110a8:	e028      	b.n	80110fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d025      	beq.n	80110fc <osMessageQueuePut+0xb0>
 80110b0:	4b15      	ldr	r3, [pc, #84]	; (8011108 <osMessageQueuePut+0xbc>)
 80110b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110b6:	601a      	str	r2, [r3, #0]
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	f3bf 8f6f 	isb	sy
 80110c0:	e01c      	b.n	80110fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d002      	beq.n	80110ce <osMessageQueuePut+0x82>
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d103      	bne.n	80110d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80110ce:	f06f 0303 	mvn.w	r3, #3
 80110d2:	61fb      	str	r3, [r7, #28]
 80110d4:	e012      	b.n	80110fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80110d6:	2300      	movs	r3, #0
 80110d8:	683a      	ldr	r2, [r7, #0]
 80110da:	68b9      	ldr	r1, [r7, #8]
 80110dc:	69b8      	ldr	r0, [r7, #24]
 80110de:	f000 fca7 	bl	8011a30 <xQueueGenericSend>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d009      	beq.n	80110fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d003      	beq.n	80110f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80110ee:	f06f 0301 	mvn.w	r3, #1
 80110f2:	61fb      	str	r3, [r7, #28]
 80110f4:	e002      	b.n	80110fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80110f6:	f06f 0302 	mvn.w	r3, #2
 80110fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80110fc:	69fb      	ldr	r3, [r7, #28]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3720      	adds	r7, #32
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop
 8011108:	e000ed04 	.word	0xe000ed04

0801110c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801110c:	b580      	push	{r7, lr}
 801110e:	b088      	sub	sp, #32
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	607a      	str	r2, [r7, #4]
 8011118:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801111e:	2300      	movs	r3, #0
 8011120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011122:	f3ef 8305 	mrs	r3, IPSR
 8011126:	617b      	str	r3, [r7, #20]
  return(result);
 8011128:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801112a:	2b00      	cmp	r3, #0
 801112c:	d028      	beq.n	8011180 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d005      	beq.n	8011140 <osMessageQueueGet+0x34>
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d002      	beq.n	8011140 <osMessageQueueGet+0x34>
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d003      	beq.n	8011148 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011140:	f06f 0303 	mvn.w	r3, #3
 8011144:	61fb      	str	r3, [r7, #28]
 8011146:	e037      	b.n	80111b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011148:	2300      	movs	r3, #0
 801114a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801114c:	f107 0310 	add.w	r3, r7, #16
 8011150:	461a      	mov	r2, r3
 8011152:	68b9      	ldr	r1, [r7, #8]
 8011154:	69b8      	ldr	r0, [r7, #24]
 8011156:	f000 fee5 	bl	8011f24 <xQueueReceiveFromISR>
 801115a:	4603      	mov	r3, r0
 801115c:	2b01      	cmp	r3, #1
 801115e:	d003      	beq.n	8011168 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011160:	f06f 0302 	mvn.w	r3, #2
 8011164:	61fb      	str	r3, [r7, #28]
 8011166:	e027      	b.n	80111b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d024      	beq.n	80111b8 <osMessageQueueGet+0xac>
 801116e:	4b15      	ldr	r3, [pc, #84]	; (80111c4 <osMessageQueueGet+0xb8>)
 8011170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011174:	601a      	str	r2, [r3, #0]
 8011176:	f3bf 8f4f 	dsb	sy
 801117a:	f3bf 8f6f 	isb	sy
 801117e:	e01b      	b.n	80111b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011180:	69bb      	ldr	r3, [r7, #24]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d002      	beq.n	801118c <osMessageQueueGet+0x80>
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d103      	bne.n	8011194 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801118c:	f06f 0303 	mvn.w	r3, #3
 8011190:	61fb      	str	r3, [r7, #28]
 8011192:	e011      	b.n	80111b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011194:	683a      	ldr	r2, [r7, #0]
 8011196:	68b9      	ldr	r1, [r7, #8]
 8011198:	69b8      	ldr	r0, [r7, #24]
 801119a:	f000 fde3 	bl	8011d64 <xQueueReceive>
 801119e:	4603      	mov	r3, r0
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d009      	beq.n	80111b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d003      	beq.n	80111b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80111aa:	f06f 0301 	mvn.w	r3, #1
 80111ae:	61fb      	str	r3, [r7, #28]
 80111b0:	e002      	b.n	80111b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80111b2:	f06f 0302 	mvn.w	r3, #2
 80111b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80111b8:	69fb      	ldr	r3, [r7, #28]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3720      	adds	r7, #32
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	e000ed04 	.word	0xe000ed04

080111c8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b086      	sub	sp, #24
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d102      	bne.n	80111e0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80111da:	2300      	movs	r3, #0
 80111dc:	617b      	str	r3, [r7, #20]
 80111de:	e00e      	b.n	80111fe <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111e0:	f3ef 8305 	mrs	r3, IPSR
 80111e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80111e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d004      	beq.n	80111f6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80111ec:	6938      	ldr	r0, [r7, #16]
 80111ee:	f000 ff37 	bl	8012060 <uxQueueMessagesWaitingFromISR>
 80111f2:	6178      	str	r0, [r7, #20]
 80111f4:	e003      	b.n	80111fe <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80111f6:	6938      	ldr	r0, [r7, #16]
 80111f8:	f000 ff14 	bl	8012024 <uxQueueMessagesWaiting>
 80111fc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80111fe:	697b      	ldr	r3, [r7, #20]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3718      	adds	r7, #24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011208:	b480      	push	{r7}
 801120a:	b085      	sub	sp, #20
 801120c:	af00      	add	r7, sp, #0
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	4a07      	ldr	r2, [pc, #28]	; (8011234 <vApplicationGetIdleTaskMemory+0x2c>)
 8011218:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	4a06      	ldr	r2, [pc, #24]	; (8011238 <vApplicationGetIdleTaskMemory+0x30>)
 801121e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2280      	movs	r2, #128	; 0x80
 8011224:	601a      	str	r2, [r3, #0]
}
 8011226:	bf00      	nop
 8011228:	3714      	adds	r7, #20
 801122a:	46bd      	mov	sp, r7
 801122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011230:	4770      	bx	lr
 8011232:	bf00      	nop
 8011234:	24000780 	.word	0x24000780
 8011238:	240007dc 	.word	0x240007dc

0801123c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801123c:	b480      	push	{r7}
 801123e:	b085      	sub	sp, #20
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	4a07      	ldr	r2, [pc, #28]	; (8011268 <vApplicationGetTimerTaskMemory+0x2c>)
 801124c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	4a06      	ldr	r2, [pc, #24]	; (801126c <vApplicationGetTimerTaskMemory+0x30>)
 8011252:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f44f 7280 	mov.w	r2, #256	; 0x100
 801125a:	601a      	str	r2, [r3, #0]
}
 801125c:	bf00      	nop
 801125e:	3714      	adds	r7, #20
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	240009dc 	.word	0x240009dc
 801126c:	24000a38 	.word	0x24000a38

08011270 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011270:	b580      	push	{r7, lr}
 8011272:	b086      	sub	sp, #24
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d10a      	bne.n	8011294 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801127e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011282:	f383 8811 	msr	BASEPRI, r3
 8011286:	f3bf 8f6f 	isb	sy
 801128a:	f3bf 8f4f 	dsb	sy
 801128e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011290:	bf00      	nop
 8011292:	e7fe      	b.n	8011292 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011294:	2320      	movs	r3, #32
 8011296:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	2b20      	cmp	r3, #32
 801129c:	d00a      	beq.n	80112b4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a2:	f383 8811 	msr	BASEPRI, r3
 80112a6:	f3bf 8f6f 	isb	sy
 80112aa:	f3bf 8f4f 	dsb	sy
 80112ae:	60fb      	str	r3, [r7, #12]
}
 80112b0:	bf00      	nop
 80112b2:	e7fe      	b.n	80112b2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00a      	beq.n	80112d4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	2200      	movs	r2, #0
 80112c2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	3304      	adds	r3, #4
 80112c8:	4618      	mov	r0, r3
 80112ca:	f000 f9bf 	bl	801164c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2201      	movs	r2, #1
 80112d2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80112d4:	697b      	ldr	r3, [r7, #20]
	}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3718      	adds	r7, #24
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b082      	sub	sp, #8
 80112e2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80112e4:	2020      	movs	r0, #32
 80112e6:	f002 fdb7 	bl	8013e58 <pvPortMalloc>
 80112ea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d00a      	beq.n	8011308 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2200      	movs	r2, #0
 80112f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	3304      	adds	r3, #4
 80112fc:	4618      	mov	r0, r3
 80112fe:	f000 f9a5 	bl	801164c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2200      	movs	r2, #0
 8011306:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011308:	687b      	ldr	r3, [r7, #4]
	}
 801130a:	4618      	mov	r0, r3
 801130c:	3708      	adds	r7, #8
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
	...

08011314 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b090      	sub	sp, #64	; 0x40
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	607a      	str	r2, [r7, #4]
 8011320:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011326:	2300      	movs	r3, #0
 8011328:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801132a:	2300      	movs	r3, #0
 801132c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d10a      	bne.n	801134a <xEventGroupWaitBits+0x36>
	__asm volatile
 8011334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011338:	f383 8811 	msr	BASEPRI, r3
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	623b      	str	r3, [r7, #32]
}
 8011346:	bf00      	nop
 8011348:	e7fe      	b.n	8011348 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00a      	beq.n	801136a <xEventGroupWaitBits+0x56>
	__asm volatile
 8011354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011358:	f383 8811 	msr	BASEPRI, r3
 801135c:	f3bf 8f6f 	isb	sy
 8011360:	f3bf 8f4f 	dsb	sy
 8011364:	61fb      	str	r3, [r7, #28]
}
 8011366:	bf00      	nop
 8011368:	e7fe      	b.n	8011368 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d10a      	bne.n	8011386 <xEventGroupWaitBits+0x72>
	__asm volatile
 8011370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011374:	f383 8811 	msr	BASEPRI, r3
 8011378:	f3bf 8f6f 	isb	sy
 801137c:	f3bf 8f4f 	dsb	sy
 8011380:	61bb      	str	r3, [r7, #24]
}
 8011382:	bf00      	nop
 8011384:	e7fe      	b.n	8011384 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011386:	f001 feb3 	bl	80130f0 <xTaskGetSchedulerState>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d102      	bne.n	8011396 <xEventGroupWaitBits+0x82>
 8011390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011392:	2b00      	cmp	r3, #0
 8011394:	d101      	bne.n	801139a <xEventGroupWaitBits+0x86>
 8011396:	2301      	movs	r3, #1
 8011398:	e000      	b.n	801139c <xEventGroupWaitBits+0x88>
 801139a:	2300      	movs	r3, #0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d10a      	bne.n	80113b6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80113a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a4:	f383 8811 	msr	BASEPRI, r3
 80113a8:	f3bf 8f6f 	isb	sy
 80113ac:	f3bf 8f4f 	dsb	sy
 80113b0:	617b      	str	r3, [r7, #20]
}
 80113b2:	bf00      	nop
 80113b4:	e7fe      	b.n	80113b4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80113b6:	f001 fa1b 	bl	80127f0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80113ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80113c0:	683a      	ldr	r2, [r7, #0]
 80113c2:	68b9      	ldr	r1, [r7, #8]
 80113c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113c6:	f000 f90b 	bl	80115e0 <prvTestWaitCondition>
 80113ca:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80113cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00e      	beq.n	80113f0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80113d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80113d6:	2300      	movs	r3, #0
 80113d8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d028      	beq.n	8011432 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80113e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	43db      	mvns	r3, r3
 80113e8:	401a      	ands	r2, r3
 80113ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ec:	601a      	str	r2, [r3, #0]
 80113ee:	e020      	b.n	8011432 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80113f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d104      	bne.n	8011400 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80113f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80113fa:	2301      	movs	r3, #1
 80113fc:	633b      	str	r3, [r7, #48]	; 0x30
 80113fe:	e018      	b.n	8011432 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d003      	beq.n	801140e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801140c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d003      	beq.n	801141c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801141a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801141e:	1d18      	adds	r0, r3, #4
 8011420:	68ba      	ldr	r2, [r7, #8]
 8011422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011424:	4313      	orrs	r3, r2
 8011426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011428:	4619      	mov	r1, r3
 801142a:	f001 fbd9 	bl	8012be0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801142e:	2300      	movs	r3, #0
 8011430:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011432:	f001 f9eb 	bl	801280c <xTaskResumeAll>
 8011436:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801143a:	2b00      	cmp	r3, #0
 801143c:	d031      	beq.n	80114a2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011440:	2b00      	cmp	r3, #0
 8011442:	d107      	bne.n	8011454 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011444:	4b19      	ldr	r3, [pc, #100]	; (80114ac <xEventGroupWaitBits+0x198>)
 8011446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801144a:	601a      	str	r2, [r3, #0]
 801144c:	f3bf 8f4f 	dsb	sy
 8011450:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011454:	f001 fed8 	bl	8013208 <uxTaskResetEventItemValue>
 8011458:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801145a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011460:	2b00      	cmp	r3, #0
 8011462:	d11a      	bne.n	801149a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011464:	f002 fbd6 	bl	8013c14 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801146e:	683a      	ldr	r2, [r7, #0]
 8011470:	68b9      	ldr	r1, [r7, #8]
 8011472:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011474:	f000 f8b4 	bl	80115e0 <prvTestWaitCondition>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d009      	beq.n	8011492 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d006      	beq.n	8011492 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	43db      	mvns	r3, r3
 801148c:	401a      	ands	r2, r3
 801148e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011490:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011492:	2301      	movs	r3, #1
 8011494:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011496:	f002 fbed 	bl	8013c74 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801149a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801149c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80114a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80114a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3740      	adds	r7, #64	; 0x40
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	e000ed04 	.word	0xe000ed04

080114b0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b08e      	sub	sp, #56	; 0x38
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80114ba:	2300      	movs	r3, #0
 80114bc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80114c2:	2300      	movs	r3, #0
 80114c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d10a      	bne.n	80114e2 <xEventGroupSetBits+0x32>
	__asm volatile
 80114cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d0:	f383 8811 	msr	BASEPRI, r3
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	f3bf 8f4f 	dsb	sy
 80114dc:	613b      	str	r3, [r7, #16]
}
 80114de:	bf00      	nop
 80114e0:	e7fe      	b.n	80114e0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00a      	beq.n	8011502 <xEventGroupSetBits+0x52>
	__asm volatile
 80114ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f0:	f383 8811 	msr	BASEPRI, r3
 80114f4:	f3bf 8f6f 	isb	sy
 80114f8:	f3bf 8f4f 	dsb	sy
 80114fc:	60fb      	str	r3, [r7, #12]
}
 80114fe:	bf00      	nop
 8011500:	e7fe      	b.n	8011500 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011504:	3304      	adds	r3, #4
 8011506:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150a:	3308      	adds	r3, #8
 801150c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801150e:	f001 f96f 	bl	80127f0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	68db      	ldr	r3, [r3, #12]
 8011516:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	431a      	orrs	r2, r3
 8011520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011522:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011524:	e03c      	b.n	80115a0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011532:	2300      	movs	r3, #0
 8011534:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801153c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011544:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801154c:	2b00      	cmp	r3, #0
 801154e:	d108      	bne.n	8011562 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	4013      	ands	r3, r2
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00b      	beq.n	8011574 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801155c:	2301      	movs	r3, #1
 801155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011560:	e008      	b.n	8011574 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	4013      	ands	r3, r2
 801156a:	69ba      	ldr	r2, [r7, #24]
 801156c:	429a      	cmp	r2, r3
 801156e:	d101      	bne.n	8011574 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011570:	2301      	movs	r3, #1
 8011572:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011576:	2b00      	cmp	r3, #0
 8011578:	d010      	beq.n	801159c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011580:	2b00      	cmp	r3, #0
 8011582:	d003      	beq.n	801158c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	4313      	orrs	r3, r2
 801158a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011594:	4619      	mov	r1, r3
 8011596:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011598:	f001 fbee 	bl	8012d78 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80115a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115a2:	6a3b      	ldr	r3, [r7, #32]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d1be      	bne.n	8011526 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ae:	43db      	mvns	r3, r3
 80115b0:	401a      	ands	r2, r3
 80115b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80115b6:	f001 f929 	bl	801280c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80115ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115bc:	681b      	ldr	r3, [r3, #0]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3738      	adds	r7, #56	; 0x38
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b082      	sub	sp, #8
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80115d0:	6839      	ldr	r1, [r7, #0]
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7ff ff6c 	bl	80114b0 <xEventGroupSetBits>
}
 80115d8:	bf00      	nop
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80115e0:	b480      	push	{r7}
 80115e2:	b087      	sub	sp, #28
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80115ec:	2300      	movs	r3, #0
 80115ee:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d107      	bne.n	8011606 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	4013      	ands	r3, r2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00a      	beq.n	8011616 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011600:	2301      	movs	r3, #1
 8011602:	617b      	str	r3, [r7, #20]
 8011604:	e007      	b.n	8011616 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011606:	68fa      	ldr	r2, [r7, #12]
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	4013      	ands	r3, r2
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	429a      	cmp	r2, r3
 8011610:	d101      	bne.n	8011616 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011612:	2301      	movs	r3, #1
 8011614:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011616:	697b      	ldr	r3, [r7, #20]
}
 8011618:	4618      	mov	r0, r3
 801161a:	371c      	adds	r7, #28
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr

08011624 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011624:	b580      	push	{r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	68ba      	ldr	r2, [r7, #8]
 8011634:	68f9      	ldr	r1, [r7, #12]
 8011636:	4804      	ldr	r0, [pc, #16]	; (8011648 <xEventGroupSetBitsFromISR+0x24>)
 8011638:	f002 f9a0 	bl	801397c <xTimerPendFunctionCallFromISR>
 801163c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801163e:	697b      	ldr	r3, [r7, #20]
	}
 8011640:	4618      	mov	r0, r3
 8011642:	3718      	adds	r7, #24
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	080115c7 	.word	0x080115c7

0801164c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f103 0208 	add.w	r2, r3, #8
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f103 0208 	add.w	r2, r3, #8
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f103 0208 	add.w	r2, r3, #8
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2200      	movs	r2, #0
 801167e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011680:	bf00      	nop
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801168c:	b480      	push	{r7}
 801168e:	b083      	sub	sp, #12
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801169a:	bf00      	nop
 801169c:	370c      	adds	r7, #12
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr

080116a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116a6:	b480      	push	{r7}
 80116a8:	b085      	sub	sp, #20
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	68fa      	ldr	r2, [r7, #12]
 80116ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	689a      	ldr	r2, [r3, #8]
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	689b      	ldr	r3, [r3, #8]
 80116c8:	683a      	ldr	r2, [r7, #0]
 80116ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	1c5a      	adds	r2, r3, #1
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	601a      	str	r2, [r3, #0]
}
 80116e2:	bf00      	nop
 80116e4:	3714      	adds	r7, #20
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr

080116ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116ee:	b480      	push	{r7}
 80116f0:	b085      	sub	sp, #20
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011704:	d103      	bne.n	801170e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	60fb      	str	r3, [r7, #12]
 801170c:	e00c      	b.n	8011728 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	3308      	adds	r3, #8
 8011712:	60fb      	str	r3, [r7, #12]
 8011714:	e002      	b.n	801171c <vListInsert+0x2e>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	60fb      	str	r3, [r7, #12]
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	68ba      	ldr	r2, [r7, #8]
 8011724:	429a      	cmp	r2, r3
 8011726:	d2f6      	bcs.n	8011716 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	685a      	ldr	r2, [r3, #4]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	68fa      	ldr	r2, [r7, #12]
 801173c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	683a      	ldr	r2, [r7, #0]
 8011742:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	1c5a      	adds	r2, r3, #1
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	601a      	str	r2, [r3, #0]
}
 8011754:	bf00      	nop
 8011756:	3714      	adds	r7, #20
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011760:	b480      	push	{r7}
 8011762:	b085      	sub	sp, #20
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	691b      	ldr	r3, [r3, #16]
 801176c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	687a      	ldr	r2, [r7, #4]
 8011774:	6892      	ldr	r2, [r2, #8]
 8011776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	689b      	ldr	r3, [r3, #8]
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	6852      	ldr	r2, [r2, #4]
 8011780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	429a      	cmp	r2, r3
 801178a:	d103      	bne.n	8011794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	689a      	ldr	r2, [r3, #8]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	1e5a      	subs	r2, r3, #1
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	681b      	ldr	r3, [r3, #0]
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3714      	adds	r7, #20
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr

080117b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d10a      	bne.n	80117de <xQueueGenericReset+0x2a>
	__asm volatile
 80117c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117cc:	f383 8811 	msr	BASEPRI, r3
 80117d0:	f3bf 8f6f 	isb	sy
 80117d4:	f3bf 8f4f 	dsb	sy
 80117d8:	60bb      	str	r3, [r7, #8]
}
 80117da:	bf00      	nop
 80117dc:	e7fe      	b.n	80117dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80117de:	f002 fa19 	bl	8013c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117ea:	68f9      	ldr	r1, [r7, #12]
 80117ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80117ee:	fb01 f303 	mul.w	r3, r1, r3
 80117f2:	441a      	add	r2, r3
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	2200      	movs	r2, #0
 80117fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801180e:	3b01      	subs	r3, #1
 8011810:	68f9      	ldr	r1, [r7, #12]
 8011812:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011814:	fb01 f303 	mul.w	r3, r1, r3
 8011818:	441a      	add	r2, r3
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	22ff      	movs	r2, #255	; 0xff
 8011822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	22ff      	movs	r2, #255	; 0xff
 801182a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d114      	bne.n	801185e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	691b      	ldr	r3, [r3, #16]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d01a      	beq.n	8011872 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	3310      	adds	r3, #16
 8011840:	4618      	mov	r0, r3
 8011842:	f001 fa35 	bl	8012cb0 <xTaskRemoveFromEventList>
 8011846:	4603      	mov	r3, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d012      	beq.n	8011872 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801184c:	4b0c      	ldr	r3, [pc, #48]	; (8011880 <xQueueGenericReset+0xcc>)
 801184e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011852:	601a      	str	r2, [r3, #0]
 8011854:	f3bf 8f4f 	dsb	sy
 8011858:	f3bf 8f6f 	isb	sy
 801185c:	e009      	b.n	8011872 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	3310      	adds	r3, #16
 8011862:	4618      	mov	r0, r3
 8011864:	f7ff fef2 	bl	801164c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	3324      	adds	r3, #36	; 0x24
 801186c:	4618      	mov	r0, r3
 801186e:	f7ff feed 	bl	801164c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011872:	f002 f9ff 	bl	8013c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011876:	2301      	movs	r3, #1
}
 8011878:	4618      	mov	r0, r3
 801187a:	3710      	adds	r7, #16
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	e000ed04 	.word	0xe000ed04

08011884 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011884:	b580      	push	{r7, lr}
 8011886:	b08e      	sub	sp, #56	; 0x38
 8011888:	af02      	add	r7, sp, #8
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	607a      	str	r2, [r7, #4]
 8011890:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d10a      	bne.n	80118ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189c:	f383 8811 	msr	BASEPRI, r3
 80118a0:	f3bf 8f6f 	isb	sy
 80118a4:	f3bf 8f4f 	dsb	sy
 80118a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80118aa:	bf00      	nop
 80118ac:	e7fe      	b.n	80118ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d10a      	bne.n	80118ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80118b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b8:	f383 8811 	msr	BASEPRI, r3
 80118bc:	f3bf 8f6f 	isb	sy
 80118c0:	f3bf 8f4f 	dsb	sy
 80118c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80118c6:	bf00      	nop
 80118c8:	e7fe      	b.n	80118c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <xQueueGenericCreateStatic+0x52>
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d001      	beq.n	80118da <xQueueGenericCreateStatic+0x56>
 80118d6:	2301      	movs	r3, #1
 80118d8:	e000      	b.n	80118dc <xQueueGenericCreateStatic+0x58>
 80118da:	2300      	movs	r3, #0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d10a      	bne.n	80118f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80118e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e4:	f383 8811 	msr	BASEPRI, r3
 80118e8:	f3bf 8f6f 	isb	sy
 80118ec:	f3bf 8f4f 	dsb	sy
 80118f0:	623b      	str	r3, [r7, #32]
}
 80118f2:	bf00      	nop
 80118f4:	e7fe      	b.n	80118f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d102      	bne.n	8011902 <xQueueGenericCreateStatic+0x7e>
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d101      	bne.n	8011906 <xQueueGenericCreateStatic+0x82>
 8011902:	2301      	movs	r3, #1
 8011904:	e000      	b.n	8011908 <xQueueGenericCreateStatic+0x84>
 8011906:	2300      	movs	r3, #0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d10a      	bne.n	8011922 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801190c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011910:	f383 8811 	msr	BASEPRI, r3
 8011914:	f3bf 8f6f 	isb	sy
 8011918:	f3bf 8f4f 	dsb	sy
 801191c:	61fb      	str	r3, [r7, #28]
}
 801191e:	bf00      	nop
 8011920:	e7fe      	b.n	8011920 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011922:	2350      	movs	r3, #80	; 0x50
 8011924:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	2b50      	cmp	r3, #80	; 0x50
 801192a:	d00a      	beq.n	8011942 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801192c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011930:	f383 8811 	msr	BASEPRI, r3
 8011934:	f3bf 8f6f 	isb	sy
 8011938:	f3bf 8f4f 	dsb	sy
 801193c:	61bb      	str	r3, [r7, #24]
}
 801193e:	bf00      	nop
 8011940:	e7fe      	b.n	8011940 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011942:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00d      	beq.n	801196a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011950:	2201      	movs	r2, #1
 8011952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011956:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195c:	9300      	str	r3, [sp, #0]
 801195e:	4613      	mov	r3, r2
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	68b9      	ldr	r1, [r7, #8]
 8011964:	68f8      	ldr	r0, [r7, #12]
 8011966:	f000 f83f 	bl	80119e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801196c:	4618      	mov	r0, r3
 801196e:	3730      	adds	r7, #48	; 0x30
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011974:	b580      	push	{r7, lr}
 8011976:	b08a      	sub	sp, #40	; 0x28
 8011978:	af02      	add	r7, sp, #8
 801197a:	60f8      	str	r0, [r7, #12]
 801197c:	60b9      	str	r1, [r7, #8]
 801197e:	4613      	mov	r3, r2
 8011980:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d10a      	bne.n	801199e <xQueueGenericCreate+0x2a>
	__asm volatile
 8011988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198c:	f383 8811 	msr	BASEPRI, r3
 8011990:	f3bf 8f6f 	isb	sy
 8011994:	f3bf 8f4f 	dsb	sy
 8011998:	613b      	str	r3, [r7, #16]
}
 801199a:	bf00      	nop
 801199c:	e7fe      	b.n	801199c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	fb02 f303 	mul.w	r3, r2, r3
 80119a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	3350      	adds	r3, #80	; 0x50
 80119ac:	4618      	mov	r0, r3
 80119ae:	f002 fa53 	bl	8013e58 <pvPortMalloc>
 80119b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80119b4:	69bb      	ldr	r3, [r7, #24]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d011      	beq.n	80119de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	3350      	adds	r3, #80	; 0x50
 80119c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80119c4:	69bb      	ldr	r3, [r7, #24]
 80119c6:	2200      	movs	r2, #0
 80119c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80119cc:	79fa      	ldrb	r2, [r7, #7]
 80119ce:	69bb      	ldr	r3, [r7, #24]
 80119d0:	9300      	str	r3, [sp, #0]
 80119d2:	4613      	mov	r3, r2
 80119d4:	697a      	ldr	r2, [r7, #20]
 80119d6:	68b9      	ldr	r1, [r7, #8]
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f000 f805 	bl	80119e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80119de:	69bb      	ldr	r3, [r7, #24]
	}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3720      	adds	r7, #32
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	60f8      	str	r0, [r7, #12]
 80119f0:	60b9      	str	r1, [r7, #8]
 80119f2:	607a      	str	r2, [r7, #4]
 80119f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d103      	bne.n	8011a04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80119fc:	69bb      	ldr	r3, [r7, #24]
 80119fe:	69ba      	ldr	r2, [r7, #24]
 8011a00:	601a      	str	r2, [r3, #0]
 8011a02:	e002      	b.n	8011a0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011a0a:	69bb      	ldr	r3, [r7, #24]
 8011a0c:	68fa      	ldr	r2, [r7, #12]
 8011a0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011a16:	2101      	movs	r1, #1
 8011a18:	69b8      	ldr	r0, [r7, #24]
 8011a1a:	f7ff fecb 	bl	80117b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	78fa      	ldrb	r2, [r7, #3]
 8011a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011a26:	bf00      	nop
 8011a28:	3710      	adds	r7, #16
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
	...

08011a30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b08e      	sub	sp, #56	; 0x38
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
 8011a3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d10a      	bne.n	8011a62 <xQueueGenericSend+0x32>
	__asm volatile
 8011a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a50:	f383 8811 	msr	BASEPRI, r3
 8011a54:	f3bf 8f6f 	isb	sy
 8011a58:	f3bf 8f4f 	dsb	sy
 8011a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011a5e:	bf00      	nop
 8011a60:	e7fe      	b.n	8011a60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d103      	bne.n	8011a70 <xQueueGenericSend+0x40>
 8011a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d101      	bne.n	8011a74 <xQueueGenericSend+0x44>
 8011a70:	2301      	movs	r3, #1
 8011a72:	e000      	b.n	8011a76 <xQueueGenericSend+0x46>
 8011a74:	2300      	movs	r3, #0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d10a      	bne.n	8011a90 <xQueueGenericSend+0x60>
	__asm volatile
 8011a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7e:	f383 8811 	msr	BASEPRI, r3
 8011a82:	f3bf 8f6f 	isb	sy
 8011a86:	f3bf 8f4f 	dsb	sy
 8011a8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011a8c:	bf00      	nop
 8011a8e:	e7fe      	b.n	8011a8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	2b02      	cmp	r3, #2
 8011a94:	d103      	bne.n	8011a9e <xQueueGenericSend+0x6e>
 8011a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d101      	bne.n	8011aa2 <xQueueGenericSend+0x72>
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e000      	b.n	8011aa4 <xQueueGenericSend+0x74>
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d10a      	bne.n	8011abe <xQueueGenericSend+0x8e>
	__asm volatile
 8011aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aac:	f383 8811 	msr	BASEPRI, r3
 8011ab0:	f3bf 8f6f 	isb	sy
 8011ab4:	f3bf 8f4f 	dsb	sy
 8011ab8:	623b      	str	r3, [r7, #32]
}
 8011aba:	bf00      	nop
 8011abc:	e7fe      	b.n	8011abc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011abe:	f001 fb17 	bl	80130f0 <xTaskGetSchedulerState>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d102      	bne.n	8011ace <xQueueGenericSend+0x9e>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d101      	bne.n	8011ad2 <xQueueGenericSend+0xa2>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	e000      	b.n	8011ad4 <xQueueGenericSend+0xa4>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d10a      	bne.n	8011aee <xQueueGenericSend+0xbe>
	__asm volatile
 8011ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011adc:	f383 8811 	msr	BASEPRI, r3
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	f3bf 8f4f 	dsb	sy
 8011ae8:	61fb      	str	r3, [r7, #28]
}
 8011aea:	bf00      	nop
 8011aec:	e7fe      	b.n	8011aec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011aee:	f002 f891 	bl	8013c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d302      	bcc.n	8011b04 <xQueueGenericSend+0xd4>
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	2b02      	cmp	r3, #2
 8011b02:	d129      	bne.n	8011b58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b04:	683a      	ldr	r2, [r7, #0]
 8011b06:	68b9      	ldr	r1, [r7, #8]
 8011b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b0a:	f000 fac7 	bl	801209c <prvCopyDataToQueue>
 8011b0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d010      	beq.n	8011b3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b1a:	3324      	adds	r3, #36	; 0x24
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f001 f8c7 	bl	8012cb0 <xTaskRemoveFromEventList>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d013      	beq.n	8011b50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011b28:	4b3f      	ldr	r3, [pc, #252]	; (8011c28 <xQueueGenericSend+0x1f8>)
 8011b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b2e:	601a      	str	r2, [r3, #0]
 8011b30:	f3bf 8f4f 	dsb	sy
 8011b34:	f3bf 8f6f 	isb	sy
 8011b38:	e00a      	b.n	8011b50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d007      	beq.n	8011b50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011b40:	4b39      	ldr	r3, [pc, #228]	; (8011c28 <xQueueGenericSend+0x1f8>)
 8011b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b46:	601a      	str	r2, [r3, #0]
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011b50:	f002 f890 	bl	8013c74 <vPortExitCritical>
				return pdPASS;
 8011b54:	2301      	movs	r3, #1
 8011b56:	e063      	b.n	8011c20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d103      	bne.n	8011b66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b5e:	f002 f889 	bl	8013c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011b62:	2300      	movs	r3, #0
 8011b64:	e05c      	b.n	8011c20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d106      	bne.n	8011b7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b6c:	f107 0314 	add.w	r3, r7, #20
 8011b70:	4618      	mov	r0, r3
 8011b72:	f001 f963 	bl	8012e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b76:	2301      	movs	r3, #1
 8011b78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b7a:	f002 f87b 	bl	8013c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b7e:	f000 fe37 	bl	80127f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b82:	f002 f847 	bl	8013c14 <vPortEnterCritical>
 8011b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b8c:	b25b      	sxtb	r3, r3
 8011b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b92:	d103      	bne.n	8011b9c <xQueueGenericSend+0x16c>
 8011b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b96:	2200      	movs	r2, #0
 8011b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ba2:	b25b      	sxtb	r3, r3
 8011ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ba8:	d103      	bne.n	8011bb2 <xQueueGenericSend+0x182>
 8011baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bac:	2200      	movs	r2, #0
 8011bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bb2:	f002 f85f 	bl	8013c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011bb6:	1d3a      	adds	r2, r7, #4
 8011bb8:	f107 0314 	add.w	r3, r7, #20
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f001 f952 	bl	8012e68 <xTaskCheckForTimeOut>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d124      	bne.n	8011c14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bcc:	f000 fb5e 	bl	801228c <prvIsQueueFull>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d018      	beq.n	8011c08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd8:	3310      	adds	r3, #16
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	4611      	mov	r1, r2
 8011bde:	4618      	mov	r0, r3
 8011be0:	f000 ffda 	bl	8012b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011be6:	f000 fae9 	bl	80121bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011bea:	f000 fe0f 	bl	801280c <xTaskResumeAll>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f47f af7c 	bne.w	8011aee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011bf6:	4b0c      	ldr	r3, [pc, #48]	; (8011c28 <xQueueGenericSend+0x1f8>)
 8011bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bfc:	601a      	str	r2, [r3, #0]
 8011bfe:	f3bf 8f4f 	dsb	sy
 8011c02:	f3bf 8f6f 	isb	sy
 8011c06:	e772      	b.n	8011aee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c0a:	f000 fad7 	bl	80121bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c0e:	f000 fdfd 	bl	801280c <xTaskResumeAll>
 8011c12:	e76c      	b.n	8011aee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c16:	f000 fad1 	bl	80121bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c1a:	f000 fdf7 	bl	801280c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011c1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3738      	adds	r7, #56	; 0x38
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	e000ed04 	.word	0xe000ed04

08011c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b090      	sub	sp, #64	; 0x40
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
 8011c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d10a      	bne.n	8011c5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c48:	f383 8811 	msr	BASEPRI, r3
 8011c4c:	f3bf 8f6f 	isb	sy
 8011c50:	f3bf 8f4f 	dsb	sy
 8011c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011c56:	bf00      	nop
 8011c58:	e7fe      	b.n	8011c58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d103      	bne.n	8011c68 <xQueueGenericSendFromISR+0x3c>
 8011c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d101      	bne.n	8011c6c <xQueueGenericSendFromISR+0x40>
 8011c68:	2301      	movs	r3, #1
 8011c6a:	e000      	b.n	8011c6e <xQueueGenericSendFromISR+0x42>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d10a      	bne.n	8011c88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c76:	f383 8811 	msr	BASEPRI, r3
 8011c7a:	f3bf 8f6f 	isb	sy
 8011c7e:	f3bf 8f4f 	dsb	sy
 8011c82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011c84:	bf00      	nop
 8011c86:	e7fe      	b.n	8011c86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	d103      	bne.n	8011c96 <xQueueGenericSendFromISR+0x6a>
 8011c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d101      	bne.n	8011c9a <xQueueGenericSendFromISR+0x6e>
 8011c96:	2301      	movs	r3, #1
 8011c98:	e000      	b.n	8011c9c <xQueueGenericSendFromISR+0x70>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d10a      	bne.n	8011cb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca4:	f383 8811 	msr	BASEPRI, r3
 8011ca8:	f3bf 8f6f 	isb	sy
 8011cac:	f3bf 8f4f 	dsb	sy
 8011cb0:	623b      	str	r3, [r7, #32]
}
 8011cb2:	bf00      	nop
 8011cb4:	e7fe      	b.n	8011cb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011cb6:	f002 f88f 	bl	8013dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011cba:	f3ef 8211 	mrs	r2, BASEPRI
 8011cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc2:	f383 8811 	msr	BASEPRI, r3
 8011cc6:	f3bf 8f6f 	isb	sy
 8011cca:	f3bf 8f4f 	dsb	sy
 8011cce:	61fa      	str	r2, [r7, #28]
 8011cd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011cd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011cd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d302      	bcc.n	8011ce8 <xQueueGenericSendFromISR+0xbc>
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	d12f      	bne.n	8011d48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011cf8:	683a      	ldr	r2, [r7, #0]
 8011cfa:	68b9      	ldr	r1, [r7, #8]
 8011cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011cfe:	f000 f9cd 	bl	801209c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011d02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d0a:	d112      	bne.n	8011d32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d016      	beq.n	8011d42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d16:	3324      	adds	r3, #36	; 0x24
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f000 ffc9 	bl	8012cb0 <xTaskRemoveFromEventList>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d00e      	beq.n	8011d42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d00b      	beq.n	8011d42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	601a      	str	r2, [r3, #0]
 8011d30:	e007      	b.n	8011d42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011d36:	3301      	adds	r3, #1
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	b25a      	sxtb	r2, r3
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011d42:	2301      	movs	r3, #1
 8011d44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011d46:	e001      	b.n	8011d4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011d56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3740      	adds	r7, #64	; 0x40
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
	...

08011d64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b08c      	sub	sp, #48	; 0x30
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011d70:	2300      	movs	r3, #0
 8011d72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d10a      	bne.n	8011d94 <xQueueReceive+0x30>
	__asm volatile
 8011d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d82:	f383 8811 	msr	BASEPRI, r3
 8011d86:	f3bf 8f6f 	isb	sy
 8011d8a:	f3bf 8f4f 	dsb	sy
 8011d8e:	623b      	str	r3, [r7, #32]
}
 8011d90:	bf00      	nop
 8011d92:	e7fe      	b.n	8011d92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d103      	bne.n	8011da2 <xQueueReceive+0x3e>
 8011d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <xQueueReceive+0x42>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e000      	b.n	8011da8 <xQueueReceive+0x44>
 8011da6:	2300      	movs	r3, #0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d10a      	bne.n	8011dc2 <xQueueReceive+0x5e>
	__asm volatile
 8011dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db0:	f383 8811 	msr	BASEPRI, r3
 8011db4:	f3bf 8f6f 	isb	sy
 8011db8:	f3bf 8f4f 	dsb	sy
 8011dbc:	61fb      	str	r3, [r7, #28]
}
 8011dbe:	bf00      	nop
 8011dc0:	e7fe      	b.n	8011dc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011dc2:	f001 f995 	bl	80130f0 <xTaskGetSchedulerState>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d102      	bne.n	8011dd2 <xQueueReceive+0x6e>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d101      	bne.n	8011dd6 <xQueueReceive+0x72>
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	e000      	b.n	8011dd8 <xQueueReceive+0x74>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d10a      	bne.n	8011df2 <xQueueReceive+0x8e>
	__asm volatile
 8011ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de0:	f383 8811 	msr	BASEPRI, r3
 8011de4:	f3bf 8f6f 	isb	sy
 8011de8:	f3bf 8f4f 	dsb	sy
 8011dec:	61bb      	str	r3, [r7, #24]
}
 8011dee:	bf00      	nop
 8011df0:	e7fe      	b.n	8011df0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011df2:	f001 ff0f 	bl	8013c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d01f      	beq.n	8011e42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e02:	68b9      	ldr	r1, [r7, #8]
 8011e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e06:	f000 f9b3 	bl	8012170 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0c:	1e5a      	subs	r2, r3, #1
 8011e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e14:	691b      	ldr	r3, [r3, #16]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d00f      	beq.n	8011e3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1c:	3310      	adds	r3, #16
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f000 ff46 	bl	8012cb0 <xTaskRemoveFromEventList>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d007      	beq.n	8011e3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011e2a:	4b3d      	ldr	r3, [pc, #244]	; (8011f20 <xQueueReceive+0x1bc>)
 8011e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e30:	601a      	str	r2, [r3, #0]
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011e3a:	f001 ff1b 	bl	8013c74 <vPortExitCritical>
				return pdPASS;
 8011e3e:	2301      	movs	r3, #1
 8011e40:	e069      	b.n	8011f16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d103      	bne.n	8011e50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e48:	f001 ff14 	bl	8013c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	e062      	b.n	8011f16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d106      	bne.n	8011e64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e56:	f107 0310 	add.w	r3, r7, #16
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f000 ffee 	bl	8012e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e60:	2301      	movs	r3, #1
 8011e62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e64:	f001 ff06 	bl	8013c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e68:	f000 fcc2 	bl	80127f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e6c:	f001 fed2 	bl	8013c14 <vPortEnterCritical>
 8011e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e76:	b25b      	sxtb	r3, r3
 8011e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e7c:	d103      	bne.n	8011e86 <xQueueReceive+0x122>
 8011e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e80:	2200      	movs	r2, #0
 8011e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e8c:	b25b      	sxtb	r3, r3
 8011e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e92:	d103      	bne.n	8011e9c <xQueueReceive+0x138>
 8011e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e96:	2200      	movs	r2, #0
 8011e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e9c:	f001 feea 	bl	8013c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ea0:	1d3a      	adds	r2, r7, #4
 8011ea2:	f107 0310 	add.w	r3, r7, #16
 8011ea6:	4611      	mov	r1, r2
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f000 ffdd 	bl	8012e68 <xTaskCheckForTimeOut>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d123      	bne.n	8011efc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eb6:	f000 f9d3 	bl	8012260 <prvIsQueueEmpty>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d017      	beq.n	8011ef0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec2:	3324      	adds	r3, #36	; 0x24
 8011ec4:	687a      	ldr	r2, [r7, #4]
 8011ec6:	4611      	mov	r1, r2
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f000 fe65 	bl	8012b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ed0:	f000 f974 	bl	80121bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011ed4:	f000 fc9a 	bl	801280c <xTaskResumeAll>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d189      	bne.n	8011df2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011ede:	4b10      	ldr	r3, [pc, #64]	; (8011f20 <xQueueReceive+0x1bc>)
 8011ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	f3bf 8f6f 	isb	sy
 8011eee:	e780      	b.n	8011df2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ef2:	f000 f963 	bl	80121bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ef6:	f000 fc89 	bl	801280c <xTaskResumeAll>
 8011efa:	e77a      	b.n	8011df2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011efe:	f000 f95d 	bl	80121bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f02:	f000 fc83 	bl	801280c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f08:	f000 f9aa 	bl	8012260 <prvIsQueueEmpty>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	f43f af6f 	beq.w	8011df2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011f14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3730      	adds	r7, #48	; 0x30
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	e000ed04 	.word	0xe000ed04

08011f24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b08e      	sub	sp, #56	; 0x38
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d10a      	bne.n	8011f50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3e:	f383 8811 	msr	BASEPRI, r3
 8011f42:	f3bf 8f6f 	isb	sy
 8011f46:	f3bf 8f4f 	dsb	sy
 8011f4a:	623b      	str	r3, [r7, #32]
}
 8011f4c:	bf00      	nop
 8011f4e:	e7fe      	b.n	8011f4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d103      	bne.n	8011f5e <xQueueReceiveFromISR+0x3a>
 8011f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d101      	bne.n	8011f62 <xQueueReceiveFromISR+0x3e>
 8011f5e:	2301      	movs	r3, #1
 8011f60:	e000      	b.n	8011f64 <xQueueReceiveFromISR+0x40>
 8011f62:	2300      	movs	r3, #0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d10a      	bne.n	8011f7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6c:	f383 8811 	msr	BASEPRI, r3
 8011f70:	f3bf 8f6f 	isb	sy
 8011f74:	f3bf 8f4f 	dsb	sy
 8011f78:	61fb      	str	r3, [r7, #28]
}
 8011f7a:	bf00      	nop
 8011f7c:	e7fe      	b.n	8011f7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f7e:	f001 ff2b 	bl	8013dd8 <vPortValidateInterruptPriority>
	__asm volatile
 8011f82:	f3ef 8211 	mrs	r2, BASEPRI
 8011f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8a:	f383 8811 	msr	BASEPRI, r3
 8011f8e:	f3bf 8f6f 	isb	sy
 8011f92:	f3bf 8f4f 	dsb	sy
 8011f96:	61ba      	str	r2, [r7, #24]
 8011f98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011f9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d02f      	beq.n	801200a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011fb4:	68b9      	ldr	r1, [r7, #8]
 8011fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fb8:	f000 f8da 	bl	8012170 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbe:	1e5a      	subs	r2, r3, #1
 8011fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011fc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fcc:	d112      	bne.n	8011ff4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd0:	691b      	ldr	r3, [r3, #16]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d016      	beq.n	8012004 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd8:	3310      	adds	r3, #16
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f000 fe68 	bl	8012cb0 <xTaskRemoveFromEventList>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00e      	beq.n	8012004 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00b      	beq.n	8012004 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2201      	movs	r2, #1
 8011ff0:	601a      	str	r2, [r3, #0]
 8011ff2:	e007      	b.n	8012004 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	b25a      	sxtb	r2, r3
 8011ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012004:	2301      	movs	r3, #1
 8012006:	637b      	str	r3, [r7, #52]	; 0x34
 8012008:	e001      	b.n	801200e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801200a:	2300      	movs	r3, #0
 801200c:	637b      	str	r3, [r7, #52]	; 0x34
 801200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012010:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	f383 8811 	msr	BASEPRI, r3
}
 8012018:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801201c:	4618      	mov	r0, r3
 801201e:	3738      	adds	r7, #56	; 0x38
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b084      	sub	sp, #16
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10a      	bne.n	8012048 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8012032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	60bb      	str	r3, [r7, #8]
}
 8012044:	bf00      	nop
 8012046:	e7fe      	b.n	8012046 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8012048:	f001 fde4 	bl	8013c14 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012050:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012052:	f001 fe0f 	bl	8013c74 <vPortExitCritical>

	return uxReturn;
 8012056:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012058:	4618      	mov	r0, r3
 801205a:	3710      	adds	r7, #16
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8012060:	b480      	push	{r7}
 8012062:	b087      	sub	sp, #28
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d10a      	bne.n	8012088 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8012072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012076:	f383 8811 	msr	BASEPRI, r3
 801207a:	f3bf 8f6f 	isb	sy
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	60fb      	str	r3, [r7, #12]
}
 8012084:	bf00      	nop
 8012086:	e7fe      	b.n	8012086 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801208c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801208e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012090:	4618      	mov	r0, r3
 8012092:	371c      	adds	r7, #28
 8012094:	46bd      	mov	sp, r7
 8012096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209a:	4770      	bx	lr

0801209c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b086      	sub	sp, #24
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80120a8:	2300      	movs	r3, #0
 80120aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d10d      	bne.n	80120d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d14d      	bne.n	801215e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	689b      	ldr	r3, [r3, #8]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f001 f830 	bl	801312c <xTaskPriorityDisinherit>
 80120cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2200      	movs	r2, #0
 80120d2:	609a      	str	r2, [r3, #8]
 80120d4:	e043      	b.n	801215e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d119      	bne.n	8012110 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	6858      	ldr	r0, [r3, #4]
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120e4:	461a      	mov	r2, r3
 80120e6:	68b9      	ldr	r1, [r7, #8]
 80120e8:	f002 f8da 	bl	80142a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	685a      	ldr	r2, [r3, #4]
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120f4:	441a      	add	r2, r3
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	685a      	ldr	r2, [r3, #4]
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	689b      	ldr	r3, [r3, #8]
 8012102:	429a      	cmp	r2, r3
 8012104:	d32b      	bcc.n	801215e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	605a      	str	r2, [r3, #4]
 801210e:	e026      	b.n	801215e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	68d8      	ldr	r0, [r3, #12]
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012118:	461a      	mov	r2, r3
 801211a:	68b9      	ldr	r1, [r7, #8]
 801211c:	f002 f8c0 	bl	80142a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	68da      	ldr	r2, [r3, #12]
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012128:	425b      	negs	r3, r3
 801212a:	441a      	add	r2, r3
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	68da      	ldr	r2, [r3, #12]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	429a      	cmp	r2, r3
 801213a:	d207      	bcs.n	801214c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	689a      	ldr	r2, [r3, #8]
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012144:	425b      	negs	r3, r3
 8012146:	441a      	add	r2, r3
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2b02      	cmp	r3, #2
 8012150:	d105      	bne.n	801215e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d002      	beq.n	801215e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	3b01      	subs	r3, #1
 801215c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	1c5a      	adds	r2, r3, #1
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012166:	697b      	ldr	r3, [r7, #20]
}
 8012168:	4618      	mov	r0, r3
 801216a:	3718      	adds	r7, #24
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801217e:	2b00      	cmp	r3, #0
 8012180:	d018      	beq.n	80121b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	68da      	ldr	r2, [r3, #12]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801218a:	441a      	add	r2, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	68da      	ldr	r2, [r3, #12]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	689b      	ldr	r3, [r3, #8]
 8012198:	429a      	cmp	r2, r3
 801219a:	d303      	bcc.n	80121a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681a      	ldr	r2, [r3, #0]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	68d9      	ldr	r1, [r3, #12]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121ac:	461a      	mov	r2, r3
 80121ae:	6838      	ldr	r0, [r7, #0]
 80121b0:	f002 f876 	bl	80142a0 <memcpy>
	}
}
 80121b4:	bf00      	nop
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80121c4:	f001 fd26 	bl	8013c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80121ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80121d0:	e011      	b.n	80121f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d012      	beq.n	8012200 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	3324      	adds	r3, #36	; 0x24
 80121de:	4618      	mov	r0, r3
 80121e0:	f000 fd66 	bl	8012cb0 <xTaskRemoveFromEventList>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d001      	beq.n	80121ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80121ea:	f000 fe9f 	bl	8012f2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80121ee:	7bfb      	ldrb	r3, [r7, #15]
 80121f0:	3b01      	subs	r3, #1
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80121f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	dce9      	bgt.n	80121d2 <prvUnlockQueue+0x16>
 80121fe:	e000      	b.n	8012202 <prvUnlockQueue+0x46>
					break;
 8012200:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	22ff      	movs	r2, #255	; 0xff
 8012206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801220a:	f001 fd33 	bl	8013c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801220e:	f001 fd01 	bl	8013c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012218:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801221a:	e011      	b.n	8012240 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	691b      	ldr	r3, [r3, #16]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d012      	beq.n	801224a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	3310      	adds	r3, #16
 8012228:	4618      	mov	r0, r3
 801222a:	f000 fd41 	bl	8012cb0 <xTaskRemoveFromEventList>
 801222e:	4603      	mov	r3, r0
 8012230:	2b00      	cmp	r3, #0
 8012232:	d001      	beq.n	8012238 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012234:	f000 fe7a 	bl	8012f2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012238:	7bbb      	ldrb	r3, [r7, #14]
 801223a:	3b01      	subs	r3, #1
 801223c:	b2db      	uxtb	r3, r3
 801223e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012244:	2b00      	cmp	r3, #0
 8012246:	dce9      	bgt.n	801221c <prvUnlockQueue+0x60>
 8012248:	e000      	b.n	801224c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801224a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	22ff      	movs	r2, #255	; 0xff
 8012250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012254:	f001 fd0e 	bl	8013c74 <vPortExitCritical>
}
 8012258:	bf00      	nop
 801225a:	3710      	adds	r7, #16
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012268:	f001 fcd4 	bl	8013c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012270:	2b00      	cmp	r3, #0
 8012272:	d102      	bne.n	801227a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012274:	2301      	movs	r3, #1
 8012276:	60fb      	str	r3, [r7, #12]
 8012278:	e001      	b.n	801227e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801227a:	2300      	movs	r3, #0
 801227c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801227e:	f001 fcf9 	bl	8013c74 <vPortExitCritical>

	return xReturn;
 8012282:	68fb      	ldr	r3, [r7, #12]
}
 8012284:	4618      	mov	r0, r3
 8012286:	3710      	adds	r7, #16
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012294:	f001 fcbe 	bl	8013c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122a0:	429a      	cmp	r2, r3
 80122a2:	d102      	bne.n	80122aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80122a4:	2301      	movs	r3, #1
 80122a6:	60fb      	str	r3, [r7, #12]
 80122a8:	e001      	b.n	80122ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80122aa:	2300      	movs	r3, #0
 80122ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80122ae:	f001 fce1 	bl	8013c74 <vPortExitCritical>

	return xReturn;
 80122b2:	68fb      	ldr	r3, [r7, #12]
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3710      	adds	r7, #16
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80122bc:	b480      	push	{r7}
 80122be:	b085      	sub	sp, #20
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80122c6:	2300      	movs	r3, #0
 80122c8:	60fb      	str	r3, [r7, #12]
 80122ca:	e014      	b.n	80122f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80122cc:	4a0f      	ldr	r2, [pc, #60]	; (801230c <vQueueAddToRegistry+0x50>)
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d10b      	bne.n	80122f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80122d8:	490c      	ldr	r1, [pc, #48]	; (801230c <vQueueAddToRegistry+0x50>)
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	683a      	ldr	r2, [r7, #0]
 80122de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80122e2:	4a0a      	ldr	r2, [pc, #40]	; (801230c <vQueueAddToRegistry+0x50>)
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	00db      	lsls	r3, r3, #3
 80122e8:	4413      	add	r3, r2
 80122ea:	687a      	ldr	r2, [r7, #4]
 80122ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80122ee:	e006      	b.n	80122fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	3301      	adds	r3, #1
 80122f4:	60fb      	str	r3, [r7, #12]
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2b07      	cmp	r3, #7
 80122fa:	d9e7      	bls.n	80122cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80122fc:	bf00      	nop
 80122fe:	bf00      	nop
 8012300:	3714      	adds	r7, #20
 8012302:	46bd      	mov	sp, r7
 8012304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012308:	4770      	bx	lr
 801230a:	bf00      	nop
 801230c:	24000e38 	.word	0x24000e38

08012310 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012320:	f001 fc78 	bl	8013c14 <vPortEnterCritical>
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801232a:	b25b      	sxtb	r3, r3
 801232c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012330:	d103      	bne.n	801233a <vQueueWaitForMessageRestricted+0x2a>
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	2200      	movs	r2, #0
 8012336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012340:	b25b      	sxtb	r3, r3
 8012342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012346:	d103      	bne.n	8012350 <vQueueWaitForMessageRestricted+0x40>
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	2200      	movs	r2, #0
 801234c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012350:	f001 fc90 	bl	8013c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012358:	2b00      	cmp	r3, #0
 801235a:	d106      	bne.n	801236a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	3324      	adds	r3, #36	; 0x24
 8012360:	687a      	ldr	r2, [r7, #4]
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	4618      	mov	r0, r3
 8012366:	f000 fc77 	bl	8012c58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801236a:	6978      	ldr	r0, [r7, #20]
 801236c:	f7ff ff26 	bl	80121bc <prvUnlockQueue>
	}
 8012370:	bf00      	nop
 8012372:	3718      	adds	r7, #24
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012378:	b580      	push	{r7, lr}
 801237a:	b08e      	sub	sp, #56	; 0x38
 801237c:	af04      	add	r7, sp, #16
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	607a      	str	r2, [r7, #4]
 8012384:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012388:	2b00      	cmp	r3, #0
 801238a:	d10a      	bne.n	80123a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 801238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012390:	f383 8811 	msr	BASEPRI, r3
 8012394:	f3bf 8f6f 	isb	sy
 8012398:	f3bf 8f4f 	dsb	sy
 801239c:	623b      	str	r3, [r7, #32]
}
 801239e:	bf00      	nop
 80123a0:	e7fe      	b.n	80123a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80123a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d10a      	bne.n	80123be <xTaskCreateStatic+0x46>
	__asm volatile
 80123a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ac:	f383 8811 	msr	BASEPRI, r3
 80123b0:	f3bf 8f6f 	isb	sy
 80123b4:	f3bf 8f4f 	dsb	sy
 80123b8:	61fb      	str	r3, [r7, #28]
}
 80123ba:	bf00      	nop
 80123bc:	e7fe      	b.n	80123bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80123be:	235c      	movs	r3, #92	; 0x5c
 80123c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80123c2:	693b      	ldr	r3, [r7, #16]
 80123c4:	2b5c      	cmp	r3, #92	; 0x5c
 80123c6:	d00a      	beq.n	80123de <xTaskCreateStatic+0x66>
	__asm volatile
 80123c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123cc:	f383 8811 	msr	BASEPRI, r3
 80123d0:	f3bf 8f6f 	isb	sy
 80123d4:	f3bf 8f4f 	dsb	sy
 80123d8:	61bb      	str	r3, [r7, #24]
}
 80123da:	bf00      	nop
 80123dc:	e7fe      	b.n	80123dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80123de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80123e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d01e      	beq.n	8012424 <xTaskCreateStatic+0xac>
 80123e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d01b      	beq.n	8012424 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80123ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80123f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80123f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f8:	2202      	movs	r2, #2
 80123fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80123fe:	2300      	movs	r3, #0
 8012400:	9303      	str	r3, [sp, #12]
 8012402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012404:	9302      	str	r3, [sp, #8]
 8012406:	f107 0314 	add.w	r3, r7, #20
 801240a:	9301      	str	r3, [sp, #4]
 801240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240e:	9300      	str	r3, [sp, #0]
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	68b9      	ldr	r1, [r7, #8]
 8012416:	68f8      	ldr	r0, [r7, #12]
 8012418:	f000 f850 	bl	80124bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801241c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801241e:	f000 f8dd 	bl	80125dc <prvAddNewTaskToReadyList>
 8012422:	e001      	b.n	8012428 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012424:	2300      	movs	r3, #0
 8012426:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012428:	697b      	ldr	r3, [r7, #20]
	}
 801242a:	4618      	mov	r0, r3
 801242c:	3728      	adds	r7, #40	; 0x28
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012432:	b580      	push	{r7, lr}
 8012434:	b08c      	sub	sp, #48	; 0x30
 8012436:	af04      	add	r7, sp, #16
 8012438:	60f8      	str	r0, [r7, #12]
 801243a:	60b9      	str	r1, [r7, #8]
 801243c:	603b      	str	r3, [r7, #0]
 801243e:	4613      	mov	r3, r2
 8012440:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012442:	88fb      	ldrh	r3, [r7, #6]
 8012444:	009b      	lsls	r3, r3, #2
 8012446:	4618      	mov	r0, r3
 8012448:	f001 fd06 	bl	8013e58 <pvPortMalloc>
 801244c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d00e      	beq.n	8012472 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012454:	205c      	movs	r0, #92	; 0x5c
 8012456:	f001 fcff 	bl	8013e58 <pvPortMalloc>
 801245a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d003      	beq.n	801246a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	697a      	ldr	r2, [r7, #20]
 8012466:	631a      	str	r2, [r3, #48]	; 0x30
 8012468:	e005      	b.n	8012476 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801246a:	6978      	ldr	r0, [r7, #20]
 801246c:	f001 fdc0 	bl	8013ff0 <vPortFree>
 8012470:	e001      	b.n	8012476 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012472:	2300      	movs	r3, #0
 8012474:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012476:	69fb      	ldr	r3, [r7, #28]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d017      	beq.n	80124ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	2200      	movs	r2, #0
 8012480:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012484:	88fa      	ldrh	r2, [r7, #6]
 8012486:	2300      	movs	r3, #0
 8012488:	9303      	str	r3, [sp, #12]
 801248a:	69fb      	ldr	r3, [r7, #28]
 801248c:	9302      	str	r3, [sp, #8]
 801248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012490:	9301      	str	r3, [sp, #4]
 8012492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012494:	9300      	str	r3, [sp, #0]
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	68b9      	ldr	r1, [r7, #8]
 801249a:	68f8      	ldr	r0, [r7, #12]
 801249c:	f000 f80e 	bl	80124bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80124a0:	69f8      	ldr	r0, [r7, #28]
 80124a2:	f000 f89b 	bl	80125dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80124a6:	2301      	movs	r3, #1
 80124a8:	61bb      	str	r3, [r7, #24]
 80124aa:	e002      	b.n	80124b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80124ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80124b2:	69bb      	ldr	r3, [r7, #24]
	}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b088      	sub	sp, #32
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	60f8      	str	r0, [r7, #12]
 80124c4:	60b9      	str	r1, [r7, #8]
 80124c6:	607a      	str	r2, [r7, #4]
 80124c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80124ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	461a      	mov	r2, r3
 80124d4:	21a5      	movs	r1, #165	; 0xa5
 80124d6:	f001 fef1 	bl	80142bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80124da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124de:	6879      	ldr	r1, [r7, #4]
 80124e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80124e4:	440b      	add	r3, r1
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	4413      	add	r3, r2
 80124ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	f023 0307 	bic.w	r3, r3, #7
 80124f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80124f4:	69bb      	ldr	r3, [r7, #24]
 80124f6:	f003 0307 	and.w	r3, r3, #7
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d00a      	beq.n	8012514 <prvInitialiseNewTask+0x58>
	__asm volatile
 80124fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012502:	f383 8811 	msr	BASEPRI, r3
 8012506:	f3bf 8f6f 	isb	sy
 801250a:	f3bf 8f4f 	dsb	sy
 801250e:	617b      	str	r3, [r7, #20]
}
 8012510:	bf00      	nop
 8012512:	e7fe      	b.n	8012512 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d01f      	beq.n	801255a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801251a:	2300      	movs	r3, #0
 801251c:	61fb      	str	r3, [r7, #28]
 801251e:	e012      	b.n	8012546 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012520:	68ba      	ldr	r2, [r7, #8]
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	4413      	add	r3, r2
 8012526:	7819      	ldrb	r1, [r3, #0]
 8012528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	4413      	add	r3, r2
 801252e:	3334      	adds	r3, #52	; 0x34
 8012530:	460a      	mov	r2, r1
 8012532:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012534:	68ba      	ldr	r2, [r7, #8]
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	4413      	add	r3, r2
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d006      	beq.n	801254e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	3301      	adds	r3, #1
 8012544:	61fb      	str	r3, [r7, #28]
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	2b0f      	cmp	r3, #15
 801254a:	d9e9      	bls.n	8012520 <prvInitialiseNewTask+0x64>
 801254c:	e000      	b.n	8012550 <prvInitialiseNewTask+0x94>
			{
				break;
 801254e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012552:	2200      	movs	r2, #0
 8012554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012558:	e003      	b.n	8012562 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255c:	2200      	movs	r2, #0
 801255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012564:	2b37      	cmp	r3, #55	; 0x37
 8012566:	d901      	bls.n	801256c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012568:	2337      	movs	r3, #55	; 0x37
 801256a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801256e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012570:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012576:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257a:	2200      	movs	r2, #0
 801257c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012580:	3304      	adds	r3, #4
 8012582:	4618      	mov	r0, r3
 8012584:	f7ff f882 	bl	801168c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258a:	3318      	adds	r3, #24
 801258c:	4618      	mov	r0, r3
 801258e:	f7ff f87d 	bl	801168c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012596:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80125a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80125a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125aa:	2200      	movs	r2, #0
 80125ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80125ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b0:	2200      	movs	r2, #0
 80125b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80125b6:	683a      	ldr	r2, [r7, #0]
 80125b8:	68f9      	ldr	r1, [r7, #12]
 80125ba:	69b8      	ldr	r0, [r7, #24]
 80125bc:	f001 f9fe 	bl	80139bc <pxPortInitialiseStack>
 80125c0:	4602      	mov	r2, r0
 80125c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80125c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d002      	beq.n	80125d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80125cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80125d2:	bf00      	nop
 80125d4:	3720      	adds	r7, #32
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
	...

080125dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80125e4:	f001 fb16 	bl	8013c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80125e8:	4b2d      	ldr	r3, [pc, #180]	; (80126a0 <prvAddNewTaskToReadyList+0xc4>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	3301      	adds	r3, #1
 80125ee:	4a2c      	ldr	r2, [pc, #176]	; (80126a0 <prvAddNewTaskToReadyList+0xc4>)
 80125f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80125f2:	4b2c      	ldr	r3, [pc, #176]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d109      	bne.n	801260e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80125fa:	4a2a      	ldr	r2, [pc, #168]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012600:	4b27      	ldr	r3, [pc, #156]	; (80126a0 <prvAddNewTaskToReadyList+0xc4>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2b01      	cmp	r3, #1
 8012606:	d110      	bne.n	801262a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012608:	f000 fcb4 	bl	8012f74 <prvInitialiseTaskLists>
 801260c:	e00d      	b.n	801262a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801260e:	4b26      	ldr	r3, [pc, #152]	; (80126a8 <prvAddNewTaskToReadyList+0xcc>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d109      	bne.n	801262a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012616:	4b23      	ldr	r3, [pc, #140]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012620:	429a      	cmp	r2, r3
 8012622:	d802      	bhi.n	801262a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012624:	4a1f      	ldr	r2, [pc, #124]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801262a:	4b20      	ldr	r3, [pc, #128]	; (80126ac <prvAddNewTaskToReadyList+0xd0>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	3301      	adds	r3, #1
 8012630:	4a1e      	ldr	r2, [pc, #120]	; (80126ac <prvAddNewTaskToReadyList+0xd0>)
 8012632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012634:	4b1d      	ldr	r3, [pc, #116]	; (80126ac <prvAddNewTaskToReadyList+0xd0>)
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012640:	4b1b      	ldr	r3, [pc, #108]	; (80126b0 <prvAddNewTaskToReadyList+0xd4>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	429a      	cmp	r2, r3
 8012646:	d903      	bls.n	8012650 <prvAddNewTaskToReadyList+0x74>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801264c:	4a18      	ldr	r2, [pc, #96]	; (80126b0 <prvAddNewTaskToReadyList+0xd4>)
 801264e:	6013      	str	r3, [r2, #0]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012654:	4613      	mov	r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	4413      	add	r3, r2
 801265a:	009b      	lsls	r3, r3, #2
 801265c:	4a15      	ldr	r2, [pc, #84]	; (80126b4 <prvAddNewTaskToReadyList+0xd8>)
 801265e:	441a      	add	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	3304      	adds	r3, #4
 8012664:	4619      	mov	r1, r3
 8012666:	4610      	mov	r0, r2
 8012668:	f7ff f81d 	bl	80116a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801266c:	f001 fb02 	bl	8013c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012670:	4b0d      	ldr	r3, [pc, #52]	; (80126a8 <prvAddNewTaskToReadyList+0xcc>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d00e      	beq.n	8012696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012678:	4b0a      	ldr	r3, [pc, #40]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012682:	429a      	cmp	r2, r3
 8012684:	d207      	bcs.n	8012696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012686:	4b0c      	ldr	r3, [pc, #48]	; (80126b8 <prvAddNewTaskToReadyList+0xdc>)
 8012688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012696:	bf00      	nop
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	2400134c 	.word	0x2400134c
 80126a4:	24000e78 	.word	0x24000e78
 80126a8:	24001358 	.word	0x24001358
 80126ac:	24001368 	.word	0x24001368
 80126b0:	24001354 	.word	0x24001354
 80126b4:	24000e7c 	.word	0x24000e7c
 80126b8:	e000ed04 	.word	0xe000ed04

080126bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80126c4:	2300      	movs	r3, #0
 80126c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d017      	beq.n	80126fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80126ce:	4b13      	ldr	r3, [pc, #76]	; (801271c <vTaskDelay+0x60>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d00a      	beq.n	80126ec <vTaskDelay+0x30>
	__asm volatile
 80126d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126da:	f383 8811 	msr	BASEPRI, r3
 80126de:	f3bf 8f6f 	isb	sy
 80126e2:	f3bf 8f4f 	dsb	sy
 80126e6:	60bb      	str	r3, [r7, #8]
}
 80126e8:	bf00      	nop
 80126ea:	e7fe      	b.n	80126ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80126ec:	f000 f880 	bl	80127f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80126f0:	2100      	movs	r1, #0
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 fda0 	bl	8013238 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80126f8:	f000 f888 	bl	801280c <xTaskResumeAll>
 80126fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d107      	bne.n	8012714 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012704:	4b06      	ldr	r3, [pc, #24]	; (8012720 <vTaskDelay+0x64>)
 8012706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801270a:	601a      	str	r2, [r3, #0]
 801270c:	f3bf 8f4f 	dsb	sy
 8012710:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012714:	bf00      	nop
 8012716:	3710      	adds	r7, #16
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}
 801271c:	24001374 	.word	0x24001374
 8012720:	e000ed04 	.word	0xe000ed04

08012724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b08a      	sub	sp, #40	; 0x28
 8012728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801272a:	2300      	movs	r3, #0
 801272c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801272e:	2300      	movs	r3, #0
 8012730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012732:	463a      	mov	r2, r7
 8012734:	1d39      	adds	r1, r7, #4
 8012736:	f107 0308 	add.w	r3, r7, #8
 801273a:	4618      	mov	r0, r3
 801273c:	f7fe fd64 	bl	8011208 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012740:	6839      	ldr	r1, [r7, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	68ba      	ldr	r2, [r7, #8]
 8012746:	9202      	str	r2, [sp, #8]
 8012748:	9301      	str	r3, [sp, #4]
 801274a:	2300      	movs	r3, #0
 801274c:	9300      	str	r3, [sp, #0]
 801274e:	2300      	movs	r3, #0
 8012750:	460a      	mov	r2, r1
 8012752:	4921      	ldr	r1, [pc, #132]	; (80127d8 <vTaskStartScheduler+0xb4>)
 8012754:	4821      	ldr	r0, [pc, #132]	; (80127dc <vTaskStartScheduler+0xb8>)
 8012756:	f7ff fe0f 	bl	8012378 <xTaskCreateStatic>
 801275a:	4603      	mov	r3, r0
 801275c:	4a20      	ldr	r2, [pc, #128]	; (80127e0 <vTaskStartScheduler+0xbc>)
 801275e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012760:	4b1f      	ldr	r3, [pc, #124]	; (80127e0 <vTaskStartScheduler+0xbc>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012768:	2301      	movs	r3, #1
 801276a:	617b      	str	r3, [r7, #20]
 801276c:	e001      	b.n	8012772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801276e:	2300      	movs	r3, #0
 8012770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d102      	bne.n	801277e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012778:	f000 fdb2 	bl	80132e0 <xTimerCreateTimerTask>
 801277c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d116      	bne.n	80127b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8012784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012788:	f383 8811 	msr	BASEPRI, r3
 801278c:	f3bf 8f6f 	isb	sy
 8012790:	f3bf 8f4f 	dsb	sy
 8012794:	613b      	str	r3, [r7, #16]
}
 8012796:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012798:	4b12      	ldr	r3, [pc, #72]	; (80127e4 <vTaskStartScheduler+0xc0>)
 801279a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801279e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80127a0:	4b11      	ldr	r3, [pc, #68]	; (80127e8 <vTaskStartScheduler+0xc4>)
 80127a2:	2201      	movs	r2, #1
 80127a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80127a6:	4b11      	ldr	r3, [pc, #68]	; (80127ec <vTaskStartScheduler+0xc8>)
 80127a8:	2200      	movs	r2, #0
 80127aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80127ac:	f001 f990 	bl	8013ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80127b0:	e00e      	b.n	80127d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127b8:	d10a      	bne.n	80127d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80127ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127be:	f383 8811 	msr	BASEPRI, r3
 80127c2:	f3bf 8f6f 	isb	sy
 80127c6:	f3bf 8f4f 	dsb	sy
 80127ca:	60fb      	str	r3, [r7, #12]
}
 80127cc:	bf00      	nop
 80127ce:	e7fe      	b.n	80127ce <vTaskStartScheduler+0xaa>
}
 80127d0:	bf00      	nop
 80127d2:	3718      	adds	r7, #24
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	080154f8 	.word	0x080154f8
 80127dc:	08012f45 	.word	0x08012f45
 80127e0:	24001370 	.word	0x24001370
 80127e4:	2400136c 	.word	0x2400136c
 80127e8:	24001358 	.word	0x24001358
 80127ec:	24001350 	.word	0x24001350

080127f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80127f0:	b480      	push	{r7}
 80127f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80127f4:	4b04      	ldr	r3, [pc, #16]	; (8012808 <vTaskSuspendAll+0x18>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	3301      	adds	r3, #1
 80127fa:	4a03      	ldr	r2, [pc, #12]	; (8012808 <vTaskSuspendAll+0x18>)
 80127fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80127fe:	bf00      	nop
 8012800:	46bd      	mov	sp, r7
 8012802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012806:	4770      	bx	lr
 8012808:	24001374 	.word	0x24001374

0801280c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012812:	2300      	movs	r3, #0
 8012814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012816:	2300      	movs	r3, #0
 8012818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801281a:	4b42      	ldr	r3, [pc, #264]	; (8012924 <xTaskResumeAll+0x118>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d10a      	bne.n	8012838 <xTaskResumeAll+0x2c>
	__asm volatile
 8012822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012826:	f383 8811 	msr	BASEPRI, r3
 801282a:	f3bf 8f6f 	isb	sy
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	603b      	str	r3, [r7, #0]
}
 8012834:	bf00      	nop
 8012836:	e7fe      	b.n	8012836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012838:	f001 f9ec 	bl	8013c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801283c:	4b39      	ldr	r3, [pc, #228]	; (8012924 <xTaskResumeAll+0x118>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	3b01      	subs	r3, #1
 8012842:	4a38      	ldr	r2, [pc, #224]	; (8012924 <xTaskResumeAll+0x118>)
 8012844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012846:	4b37      	ldr	r3, [pc, #220]	; (8012924 <xTaskResumeAll+0x118>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d162      	bne.n	8012914 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801284e:	4b36      	ldr	r3, [pc, #216]	; (8012928 <xTaskResumeAll+0x11c>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d05e      	beq.n	8012914 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012856:	e02f      	b.n	80128b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012858:	4b34      	ldr	r3, [pc, #208]	; (801292c <xTaskResumeAll+0x120>)
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	68db      	ldr	r3, [r3, #12]
 801285e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	3318      	adds	r3, #24
 8012864:	4618      	mov	r0, r3
 8012866:	f7fe ff7b 	bl	8011760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	3304      	adds	r3, #4
 801286e:	4618      	mov	r0, r3
 8012870:	f7fe ff76 	bl	8011760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012878:	4b2d      	ldr	r3, [pc, #180]	; (8012930 <xTaskResumeAll+0x124>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	429a      	cmp	r2, r3
 801287e:	d903      	bls.n	8012888 <xTaskResumeAll+0x7c>
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012884:	4a2a      	ldr	r2, [pc, #168]	; (8012930 <xTaskResumeAll+0x124>)
 8012886:	6013      	str	r3, [r2, #0]
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801288c:	4613      	mov	r3, r2
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	4413      	add	r3, r2
 8012892:	009b      	lsls	r3, r3, #2
 8012894:	4a27      	ldr	r2, [pc, #156]	; (8012934 <xTaskResumeAll+0x128>)
 8012896:	441a      	add	r2, r3
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	3304      	adds	r3, #4
 801289c:	4619      	mov	r1, r3
 801289e:	4610      	mov	r0, r2
 80128a0:	f7fe ff01 	bl	80116a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128a8:	4b23      	ldr	r3, [pc, #140]	; (8012938 <xTaskResumeAll+0x12c>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d302      	bcc.n	80128b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80128b2:	4b22      	ldr	r3, [pc, #136]	; (801293c <xTaskResumeAll+0x130>)
 80128b4:	2201      	movs	r2, #1
 80128b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80128b8:	4b1c      	ldr	r3, [pc, #112]	; (801292c <xTaskResumeAll+0x120>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d1cb      	bne.n	8012858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d001      	beq.n	80128ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80128c6:	f000 fbf3 	bl	80130b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80128ca:	4b1d      	ldr	r3, [pc, #116]	; (8012940 <xTaskResumeAll+0x134>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d010      	beq.n	80128f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80128d6:	f000 f847 	bl	8012968 <xTaskIncrementTick>
 80128da:	4603      	mov	r3, r0
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d002      	beq.n	80128e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80128e0:	4b16      	ldr	r3, [pc, #88]	; (801293c <xTaskResumeAll+0x130>)
 80128e2:	2201      	movs	r2, #1
 80128e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	3b01      	subs	r3, #1
 80128ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d1f1      	bne.n	80128d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80128f2:	4b13      	ldr	r3, [pc, #76]	; (8012940 <xTaskResumeAll+0x134>)
 80128f4:	2200      	movs	r2, #0
 80128f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80128f8:	4b10      	ldr	r3, [pc, #64]	; (801293c <xTaskResumeAll+0x130>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d009      	beq.n	8012914 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012900:	2301      	movs	r3, #1
 8012902:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012904:	4b0f      	ldr	r3, [pc, #60]	; (8012944 <xTaskResumeAll+0x138>)
 8012906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801290a:	601a      	str	r2, [r3, #0]
 801290c:	f3bf 8f4f 	dsb	sy
 8012910:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012914:	f001 f9ae 	bl	8013c74 <vPortExitCritical>

	return xAlreadyYielded;
 8012918:	68bb      	ldr	r3, [r7, #8]
}
 801291a:	4618      	mov	r0, r3
 801291c:	3710      	adds	r7, #16
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	24001374 	.word	0x24001374
 8012928:	2400134c 	.word	0x2400134c
 801292c:	2400130c 	.word	0x2400130c
 8012930:	24001354 	.word	0x24001354
 8012934:	24000e7c 	.word	0x24000e7c
 8012938:	24000e78 	.word	0x24000e78
 801293c:	24001360 	.word	0x24001360
 8012940:	2400135c 	.word	0x2400135c
 8012944:	e000ed04 	.word	0xe000ed04

08012948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012948:	b480      	push	{r7}
 801294a:	b083      	sub	sp, #12
 801294c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801294e:	4b05      	ldr	r3, [pc, #20]	; (8012964 <xTaskGetTickCount+0x1c>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012954:	687b      	ldr	r3, [r7, #4]
}
 8012956:	4618      	mov	r0, r3
 8012958:	370c      	adds	r7, #12
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr
 8012962:	bf00      	nop
 8012964:	24001350 	.word	0x24001350

08012968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b086      	sub	sp, #24
 801296c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801296e:	2300      	movs	r3, #0
 8012970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012972:	4b4f      	ldr	r3, [pc, #316]	; (8012ab0 <xTaskIncrementTick+0x148>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	f040 808f 	bne.w	8012a9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801297c:	4b4d      	ldr	r3, [pc, #308]	; (8012ab4 <xTaskIncrementTick+0x14c>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	3301      	adds	r3, #1
 8012982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012984:	4a4b      	ldr	r2, [pc, #300]	; (8012ab4 <xTaskIncrementTick+0x14c>)
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d120      	bne.n	80129d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012990:	4b49      	ldr	r3, [pc, #292]	; (8012ab8 <xTaskIncrementTick+0x150>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d00a      	beq.n	80129b0 <xTaskIncrementTick+0x48>
	__asm volatile
 801299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801299e:	f383 8811 	msr	BASEPRI, r3
 80129a2:	f3bf 8f6f 	isb	sy
 80129a6:	f3bf 8f4f 	dsb	sy
 80129aa:	603b      	str	r3, [r7, #0]
}
 80129ac:	bf00      	nop
 80129ae:	e7fe      	b.n	80129ae <xTaskIncrementTick+0x46>
 80129b0:	4b41      	ldr	r3, [pc, #260]	; (8012ab8 <xTaskIncrementTick+0x150>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	60fb      	str	r3, [r7, #12]
 80129b6:	4b41      	ldr	r3, [pc, #260]	; (8012abc <xTaskIncrementTick+0x154>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4a3f      	ldr	r2, [pc, #252]	; (8012ab8 <xTaskIncrementTick+0x150>)
 80129bc:	6013      	str	r3, [r2, #0]
 80129be:	4a3f      	ldr	r2, [pc, #252]	; (8012abc <xTaskIncrementTick+0x154>)
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	6013      	str	r3, [r2, #0]
 80129c4:	4b3e      	ldr	r3, [pc, #248]	; (8012ac0 <xTaskIncrementTick+0x158>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	3301      	adds	r3, #1
 80129ca:	4a3d      	ldr	r2, [pc, #244]	; (8012ac0 <xTaskIncrementTick+0x158>)
 80129cc:	6013      	str	r3, [r2, #0]
 80129ce:	f000 fb6f 	bl	80130b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80129d2:	4b3c      	ldr	r3, [pc, #240]	; (8012ac4 <xTaskIncrementTick+0x15c>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	693a      	ldr	r2, [r7, #16]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d349      	bcc.n	8012a70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129dc:	4b36      	ldr	r3, [pc, #216]	; (8012ab8 <xTaskIncrementTick+0x150>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d104      	bne.n	80129f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129e6:	4b37      	ldr	r3, [pc, #220]	; (8012ac4 <xTaskIncrementTick+0x15c>)
 80129e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129ec:	601a      	str	r2, [r3, #0]
					break;
 80129ee:	e03f      	b.n	8012a70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129f0:	4b31      	ldr	r3, [pc, #196]	; (8012ab8 <xTaskIncrementTick+0x150>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012a00:	693a      	ldr	r2, [r7, #16]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d203      	bcs.n	8012a10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012a08:	4a2e      	ldr	r2, [pc, #184]	; (8012ac4 <xTaskIncrementTick+0x15c>)
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012a0e:	e02f      	b.n	8012a70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	3304      	adds	r3, #4
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fe fea3 	bl	8011760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d004      	beq.n	8012a2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	3318      	adds	r3, #24
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fe fe9a 	bl	8011760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a30:	4b25      	ldr	r3, [pc, #148]	; (8012ac8 <xTaskIncrementTick+0x160>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d903      	bls.n	8012a40 <xTaskIncrementTick+0xd8>
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a3c:	4a22      	ldr	r2, [pc, #136]	; (8012ac8 <xTaskIncrementTick+0x160>)
 8012a3e:	6013      	str	r3, [r2, #0]
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a44:	4613      	mov	r3, r2
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	4413      	add	r3, r2
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	4a1f      	ldr	r2, [pc, #124]	; (8012acc <xTaskIncrementTick+0x164>)
 8012a4e:	441a      	add	r2, r3
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	3304      	adds	r3, #4
 8012a54:	4619      	mov	r1, r3
 8012a56:	4610      	mov	r0, r2
 8012a58:	f7fe fe25 	bl	80116a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a60:	4b1b      	ldr	r3, [pc, #108]	; (8012ad0 <xTaskIncrementTick+0x168>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d3b8      	bcc.n	80129dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a6e:	e7b5      	b.n	80129dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012a70:	4b17      	ldr	r3, [pc, #92]	; (8012ad0 <xTaskIncrementTick+0x168>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a76:	4915      	ldr	r1, [pc, #84]	; (8012acc <xTaskIncrementTick+0x164>)
 8012a78:	4613      	mov	r3, r2
 8012a7a:	009b      	lsls	r3, r3, #2
 8012a7c:	4413      	add	r3, r2
 8012a7e:	009b      	lsls	r3, r3, #2
 8012a80:	440b      	add	r3, r1
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d901      	bls.n	8012a8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012a8c:	4b11      	ldr	r3, [pc, #68]	; (8012ad4 <xTaskIncrementTick+0x16c>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d007      	beq.n	8012aa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012a94:	2301      	movs	r3, #1
 8012a96:	617b      	str	r3, [r7, #20]
 8012a98:	e004      	b.n	8012aa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012a9a:	4b0f      	ldr	r3, [pc, #60]	; (8012ad8 <xTaskIncrementTick+0x170>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	4a0d      	ldr	r2, [pc, #52]	; (8012ad8 <xTaskIncrementTick+0x170>)
 8012aa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012aa4:	697b      	ldr	r3, [r7, #20]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3718      	adds	r7, #24
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	24001374 	.word	0x24001374
 8012ab4:	24001350 	.word	0x24001350
 8012ab8:	24001304 	.word	0x24001304
 8012abc:	24001308 	.word	0x24001308
 8012ac0:	24001364 	.word	0x24001364
 8012ac4:	2400136c 	.word	0x2400136c
 8012ac8:	24001354 	.word	0x24001354
 8012acc:	24000e7c 	.word	0x24000e7c
 8012ad0:	24000e78 	.word	0x24000e78
 8012ad4:	24001360 	.word	0x24001360
 8012ad8:	2400135c 	.word	0x2400135c

08012adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012adc:	b480      	push	{r7}
 8012ade:	b085      	sub	sp, #20
 8012ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012ae2:	4b28      	ldr	r3, [pc, #160]	; (8012b84 <vTaskSwitchContext+0xa8>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d003      	beq.n	8012af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012aea:	4b27      	ldr	r3, [pc, #156]	; (8012b88 <vTaskSwitchContext+0xac>)
 8012aec:	2201      	movs	r2, #1
 8012aee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012af0:	e041      	b.n	8012b76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012af2:	4b25      	ldr	r3, [pc, #148]	; (8012b88 <vTaskSwitchContext+0xac>)
 8012af4:	2200      	movs	r2, #0
 8012af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012af8:	4b24      	ldr	r3, [pc, #144]	; (8012b8c <vTaskSwitchContext+0xb0>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	60fb      	str	r3, [r7, #12]
 8012afe:	e010      	b.n	8012b22 <vTaskSwitchContext+0x46>
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d10a      	bne.n	8012b1c <vTaskSwitchContext+0x40>
	__asm volatile
 8012b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0a:	f383 8811 	msr	BASEPRI, r3
 8012b0e:	f3bf 8f6f 	isb	sy
 8012b12:	f3bf 8f4f 	dsb	sy
 8012b16:	607b      	str	r3, [r7, #4]
}
 8012b18:	bf00      	nop
 8012b1a:	e7fe      	b.n	8012b1a <vTaskSwitchContext+0x3e>
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	3b01      	subs	r3, #1
 8012b20:	60fb      	str	r3, [r7, #12]
 8012b22:	491b      	ldr	r1, [pc, #108]	; (8012b90 <vTaskSwitchContext+0xb4>)
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	4613      	mov	r3, r2
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	4413      	add	r3, r2
 8012b2c:	009b      	lsls	r3, r3, #2
 8012b2e:	440b      	add	r3, r1
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d0e4      	beq.n	8012b00 <vTaskSwitchContext+0x24>
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	4613      	mov	r3, r2
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	4413      	add	r3, r2
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	4a13      	ldr	r2, [pc, #76]	; (8012b90 <vTaskSwitchContext+0xb4>)
 8012b42:	4413      	add	r3, r2
 8012b44:	60bb      	str	r3, [r7, #8]
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	685b      	ldr	r3, [r3, #4]
 8012b4a:	685a      	ldr	r2, [r3, #4]
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	605a      	str	r2, [r3, #4]
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	685a      	ldr	r2, [r3, #4]
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	3308      	adds	r3, #8
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d104      	bne.n	8012b66 <vTaskSwitchContext+0x8a>
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	685a      	ldr	r2, [r3, #4]
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	605a      	str	r2, [r3, #4]
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	68db      	ldr	r3, [r3, #12]
 8012b6c:	4a09      	ldr	r2, [pc, #36]	; (8012b94 <vTaskSwitchContext+0xb8>)
 8012b6e:	6013      	str	r3, [r2, #0]
 8012b70:	4a06      	ldr	r2, [pc, #24]	; (8012b8c <vTaskSwitchContext+0xb0>)
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	6013      	str	r3, [r2, #0]
}
 8012b76:	bf00      	nop
 8012b78:	3714      	adds	r7, #20
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr
 8012b82:	bf00      	nop
 8012b84:	24001374 	.word	0x24001374
 8012b88:	24001360 	.word	0x24001360
 8012b8c:	24001354 	.word	0x24001354
 8012b90:	24000e7c 	.word	0x24000e7c
 8012b94:	24000e78 	.word	0x24000e78

08012b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d10a      	bne.n	8012bbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bac:	f383 8811 	msr	BASEPRI, r3
 8012bb0:	f3bf 8f6f 	isb	sy
 8012bb4:	f3bf 8f4f 	dsb	sy
 8012bb8:	60fb      	str	r3, [r7, #12]
}
 8012bba:	bf00      	nop
 8012bbc:	e7fe      	b.n	8012bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012bbe:	4b07      	ldr	r3, [pc, #28]	; (8012bdc <vTaskPlaceOnEventList+0x44>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	3318      	adds	r3, #24
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f7fe fd91 	bl	80116ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012bcc:	2101      	movs	r1, #1
 8012bce:	6838      	ldr	r0, [r7, #0]
 8012bd0:	f000 fb32 	bl	8013238 <prvAddCurrentTaskToDelayedList>
}
 8012bd4:	bf00      	nop
 8012bd6:	3710      	adds	r7, #16
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	24000e78 	.word	0x24000e78

08012be0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b086      	sub	sp, #24
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d10a      	bne.n	8012c08 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf6:	f383 8811 	msr	BASEPRI, r3
 8012bfa:	f3bf 8f6f 	isb	sy
 8012bfe:	f3bf 8f4f 	dsb	sy
 8012c02:	617b      	str	r3, [r7, #20]
}
 8012c04:	bf00      	nop
 8012c06:	e7fe      	b.n	8012c06 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8012c08:	4b11      	ldr	r3, [pc, #68]	; (8012c50 <vTaskPlaceOnUnorderedEventList+0x70>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d10a      	bne.n	8012c26 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c14:	f383 8811 	msr	BASEPRI, r3
 8012c18:	f3bf 8f6f 	isb	sy
 8012c1c:	f3bf 8f4f 	dsb	sy
 8012c20:	613b      	str	r3, [r7, #16]
}
 8012c22:	bf00      	nop
 8012c24:	e7fe      	b.n	8012c24 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012c26:	4b0b      	ldr	r3, [pc, #44]	; (8012c54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	68ba      	ldr	r2, [r7, #8]
 8012c2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012c30:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c32:	4b08      	ldr	r3, [pc, #32]	; (8012c54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	3318      	adds	r3, #24
 8012c38:	4619      	mov	r1, r3
 8012c3a:	68f8      	ldr	r0, [r7, #12]
 8012c3c:	f7fe fd33 	bl	80116a6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012c40:	2101      	movs	r1, #1
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f000 faf8 	bl	8013238 <prvAddCurrentTaskToDelayedList>
}
 8012c48:	bf00      	nop
 8012c4a:	3718      	adds	r7, #24
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	24001374 	.word	0x24001374
 8012c54:	24000e78 	.word	0x24000e78

08012c58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b086      	sub	sp, #24
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d10a      	bne.n	8012c80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6e:	f383 8811 	msr	BASEPRI, r3
 8012c72:	f3bf 8f6f 	isb	sy
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	617b      	str	r3, [r7, #20]
}
 8012c7c:	bf00      	nop
 8012c7e:	e7fe      	b.n	8012c7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c80:	4b0a      	ldr	r3, [pc, #40]	; (8012cac <vTaskPlaceOnEventListRestricted+0x54>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	3318      	adds	r3, #24
 8012c86:	4619      	mov	r1, r3
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f7fe fd0c 	bl	80116a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012c9a:	6879      	ldr	r1, [r7, #4]
 8012c9c:	68b8      	ldr	r0, [r7, #8]
 8012c9e:	f000 facb 	bl	8013238 <prvAddCurrentTaskToDelayedList>
	}
 8012ca2:	bf00      	nop
 8012ca4:	3718      	adds	r7, #24
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	24000e78 	.word	0x24000e78

08012cb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	68db      	ldr	r3, [r3, #12]
 8012cbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d10a      	bne.n	8012cdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cca:	f383 8811 	msr	BASEPRI, r3
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f3bf 8f4f 	dsb	sy
 8012cd6:	60fb      	str	r3, [r7, #12]
}
 8012cd8:	bf00      	nop
 8012cda:	e7fe      	b.n	8012cda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	3318      	adds	r3, #24
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fe fd3d 	bl	8011760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ce6:	4b1e      	ldr	r3, [pc, #120]	; (8012d60 <xTaskRemoveFromEventList+0xb0>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d11d      	bne.n	8012d2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7fe fd34 	bl	8011760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cfc:	4b19      	ldr	r3, [pc, #100]	; (8012d64 <xTaskRemoveFromEventList+0xb4>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d903      	bls.n	8012d0c <xTaskRemoveFromEventList+0x5c>
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d08:	4a16      	ldr	r2, [pc, #88]	; (8012d64 <xTaskRemoveFromEventList+0xb4>)
 8012d0a:	6013      	str	r3, [r2, #0]
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d10:	4613      	mov	r3, r2
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	4413      	add	r3, r2
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	4a13      	ldr	r2, [pc, #76]	; (8012d68 <xTaskRemoveFromEventList+0xb8>)
 8012d1a:	441a      	add	r2, r3
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	3304      	adds	r3, #4
 8012d20:	4619      	mov	r1, r3
 8012d22:	4610      	mov	r0, r2
 8012d24:	f7fe fcbf 	bl	80116a6 <vListInsertEnd>
 8012d28:	e005      	b.n	8012d36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	3318      	adds	r3, #24
 8012d2e:	4619      	mov	r1, r3
 8012d30:	480e      	ldr	r0, [pc, #56]	; (8012d6c <xTaskRemoveFromEventList+0xbc>)
 8012d32:	f7fe fcb8 	bl	80116a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d3a:	4b0d      	ldr	r3, [pc, #52]	; (8012d70 <xTaskRemoveFromEventList+0xc0>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d905      	bls.n	8012d50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012d44:	2301      	movs	r3, #1
 8012d46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012d48:	4b0a      	ldr	r3, [pc, #40]	; (8012d74 <xTaskRemoveFromEventList+0xc4>)
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	601a      	str	r2, [r3, #0]
 8012d4e:	e001      	b.n	8012d54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012d50:	2300      	movs	r3, #0
 8012d52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012d54:	697b      	ldr	r3, [r7, #20]
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3718      	adds	r7, #24
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	24001374 	.word	0x24001374
 8012d64:	24001354 	.word	0x24001354
 8012d68:	24000e7c 	.word	0x24000e7c
 8012d6c:	2400130c 	.word	0x2400130c
 8012d70:	24000e78 	.word	0x24000e78
 8012d74:	24001360 	.word	0x24001360

08012d78 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8012d82:	4b29      	ldr	r3, [pc, #164]	; (8012e28 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d10a      	bne.n	8012da0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d8e:	f383 8811 	msr	BASEPRI, r3
 8012d92:	f3bf 8f6f 	isb	sy
 8012d96:	f3bf 8f4f 	dsb	sy
 8012d9a:	613b      	str	r3, [r7, #16]
}
 8012d9c:	bf00      	nop
 8012d9e:	e7fe      	b.n	8012d9e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d10a      	bne.n	8012dcc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dba:	f383 8811 	msr	BASEPRI, r3
 8012dbe:	f3bf 8f6f 	isb	sy
 8012dc2:	f3bf 8f4f 	dsb	sy
 8012dc6:	60fb      	str	r3, [r7, #12]
}
 8012dc8:	bf00      	nop
 8012dca:	e7fe      	b.n	8012dca <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f7fe fcc7 	bl	8011760 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	3304      	adds	r3, #4
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7fe fcc2 	bl	8011760 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012de0:	4b12      	ldr	r3, [pc, #72]	; (8012e2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d903      	bls.n	8012df0 <vTaskRemoveFromUnorderedEventList+0x78>
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dec:	4a0f      	ldr	r2, [pc, #60]	; (8012e2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012dee:	6013      	str	r3, [r2, #0]
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012df4:	4613      	mov	r3, r2
 8012df6:	009b      	lsls	r3, r3, #2
 8012df8:	4413      	add	r3, r2
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	4a0c      	ldr	r2, [pc, #48]	; (8012e30 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8012dfe:	441a      	add	r2, r3
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	3304      	adds	r3, #4
 8012e04:	4619      	mov	r1, r3
 8012e06:	4610      	mov	r0, r2
 8012e08:	f7fe fc4d 	bl	80116a6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e10:	4b08      	ldr	r3, [pc, #32]	; (8012e34 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d902      	bls.n	8012e20 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8012e1a:	4b07      	ldr	r3, [pc, #28]	; (8012e38 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	601a      	str	r2, [r3, #0]
	}
}
 8012e20:	bf00      	nop
 8012e22:	3718      	adds	r7, #24
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	24001374 	.word	0x24001374
 8012e2c:	24001354 	.word	0x24001354
 8012e30:	24000e7c 	.word	0x24000e7c
 8012e34:	24000e78 	.word	0x24000e78
 8012e38:	24001360 	.word	0x24001360

08012e3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012e44:	4b06      	ldr	r3, [pc, #24]	; (8012e60 <vTaskInternalSetTimeOutState+0x24>)
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012e4c:	4b05      	ldr	r3, [pc, #20]	; (8012e64 <vTaskInternalSetTimeOutState+0x28>)
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	605a      	str	r2, [r3, #4]
}
 8012e54:	bf00      	nop
 8012e56:	370c      	adds	r7, #12
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr
 8012e60:	24001364 	.word	0x24001364
 8012e64:	24001350 	.word	0x24001350

08012e68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b088      	sub	sp, #32
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d10a      	bne.n	8012e8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e7c:	f383 8811 	msr	BASEPRI, r3
 8012e80:	f3bf 8f6f 	isb	sy
 8012e84:	f3bf 8f4f 	dsb	sy
 8012e88:	613b      	str	r3, [r7, #16]
}
 8012e8a:	bf00      	nop
 8012e8c:	e7fe      	b.n	8012e8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d10a      	bne.n	8012eaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e98:	f383 8811 	msr	BASEPRI, r3
 8012e9c:	f3bf 8f6f 	isb	sy
 8012ea0:	f3bf 8f4f 	dsb	sy
 8012ea4:	60fb      	str	r3, [r7, #12]
}
 8012ea6:	bf00      	nop
 8012ea8:	e7fe      	b.n	8012ea8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012eaa:	f000 feb3 	bl	8013c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012eae:	4b1d      	ldr	r3, [pc, #116]	; (8012f24 <xTaskCheckForTimeOut+0xbc>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	69ba      	ldr	r2, [r7, #24]
 8012eba:	1ad3      	subs	r3, r2, r3
 8012ebc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ec6:	d102      	bne.n	8012ece <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	61fb      	str	r3, [r7, #28]
 8012ecc:	e023      	b.n	8012f16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	4b15      	ldr	r3, [pc, #84]	; (8012f28 <xTaskCheckForTimeOut+0xc0>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d007      	beq.n	8012eea <xTaskCheckForTimeOut+0x82>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	69ba      	ldr	r2, [r7, #24]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d302      	bcc.n	8012eea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	61fb      	str	r3, [r7, #28]
 8012ee8:	e015      	b.n	8012f16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	697a      	ldr	r2, [r7, #20]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d20b      	bcs.n	8012f0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	681a      	ldr	r2, [r3, #0]
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	1ad2      	subs	r2, r2, r3
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f7ff ff9b 	bl	8012e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012f06:	2300      	movs	r3, #0
 8012f08:	61fb      	str	r3, [r7, #28]
 8012f0a:	e004      	b.n	8012f16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012f12:	2301      	movs	r3, #1
 8012f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012f16:	f000 fead 	bl	8013c74 <vPortExitCritical>

	return xReturn;
 8012f1a:	69fb      	ldr	r3, [r7, #28]
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3720      	adds	r7, #32
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	24001350 	.word	0x24001350
 8012f28:	24001364 	.word	0x24001364

08012f2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012f30:	4b03      	ldr	r3, [pc, #12]	; (8012f40 <vTaskMissedYield+0x14>)
 8012f32:	2201      	movs	r2, #1
 8012f34:	601a      	str	r2, [r3, #0]
}
 8012f36:	bf00      	nop
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr
 8012f40:	24001360 	.word	0x24001360

08012f44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012f4c:	f000 f852 	bl	8012ff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012f50:	4b06      	ldr	r3, [pc, #24]	; (8012f6c <prvIdleTask+0x28>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d9f9      	bls.n	8012f4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012f58:	4b05      	ldr	r3, [pc, #20]	; (8012f70 <prvIdleTask+0x2c>)
 8012f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f5e:	601a      	str	r2, [r3, #0]
 8012f60:	f3bf 8f4f 	dsb	sy
 8012f64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012f68:	e7f0      	b.n	8012f4c <prvIdleTask+0x8>
 8012f6a:	bf00      	nop
 8012f6c:	24000e7c 	.word	0x24000e7c
 8012f70:	e000ed04 	.word	0xe000ed04

08012f74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	607b      	str	r3, [r7, #4]
 8012f7e:	e00c      	b.n	8012f9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012f80:	687a      	ldr	r2, [r7, #4]
 8012f82:	4613      	mov	r3, r2
 8012f84:	009b      	lsls	r3, r3, #2
 8012f86:	4413      	add	r3, r2
 8012f88:	009b      	lsls	r3, r3, #2
 8012f8a:	4a12      	ldr	r2, [pc, #72]	; (8012fd4 <prvInitialiseTaskLists+0x60>)
 8012f8c:	4413      	add	r3, r2
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe fb5c 	bl	801164c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3301      	adds	r3, #1
 8012f98:	607b      	str	r3, [r7, #4]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2b37      	cmp	r3, #55	; 0x37
 8012f9e:	d9ef      	bls.n	8012f80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012fa0:	480d      	ldr	r0, [pc, #52]	; (8012fd8 <prvInitialiseTaskLists+0x64>)
 8012fa2:	f7fe fb53 	bl	801164c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012fa6:	480d      	ldr	r0, [pc, #52]	; (8012fdc <prvInitialiseTaskLists+0x68>)
 8012fa8:	f7fe fb50 	bl	801164c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012fac:	480c      	ldr	r0, [pc, #48]	; (8012fe0 <prvInitialiseTaskLists+0x6c>)
 8012fae:	f7fe fb4d 	bl	801164c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012fb2:	480c      	ldr	r0, [pc, #48]	; (8012fe4 <prvInitialiseTaskLists+0x70>)
 8012fb4:	f7fe fb4a 	bl	801164c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012fb8:	480b      	ldr	r0, [pc, #44]	; (8012fe8 <prvInitialiseTaskLists+0x74>)
 8012fba:	f7fe fb47 	bl	801164c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012fbe:	4b0b      	ldr	r3, [pc, #44]	; (8012fec <prvInitialiseTaskLists+0x78>)
 8012fc0:	4a05      	ldr	r2, [pc, #20]	; (8012fd8 <prvInitialiseTaskLists+0x64>)
 8012fc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012fc4:	4b0a      	ldr	r3, [pc, #40]	; (8012ff0 <prvInitialiseTaskLists+0x7c>)
 8012fc6:	4a05      	ldr	r2, [pc, #20]	; (8012fdc <prvInitialiseTaskLists+0x68>)
 8012fc8:	601a      	str	r2, [r3, #0]
}
 8012fca:	bf00      	nop
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	24000e7c 	.word	0x24000e7c
 8012fd8:	240012dc 	.word	0x240012dc
 8012fdc:	240012f0 	.word	0x240012f0
 8012fe0:	2400130c 	.word	0x2400130c
 8012fe4:	24001320 	.word	0x24001320
 8012fe8:	24001338 	.word	0x24001338
 8012fec:	24001304 	.word	0x24001304
 8012ff0:	24001308 	.word	0x24001308

08012ff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ffa:	e019      	b.n	8013030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012ffc:	f000 fe0a 	bl	8013c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013000:	4b10      	ldr	r3, [pc, #64]	; (8013044 <prvCheckTasksWaitingTermination+0x50>)
 8013002:	68db      	ldr	r3, [r3, #12]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	3304      	adds	r3, #4
 801300c:	4618      	mov	r0, r3
 801300e:	f7fe fba7 	bl	8011760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013012:	4b0d      	ldr	r3, [pc, #52]	; (8013048 <prvCheckTasksWaitingTermination+0x54>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	3b01      	subs	r3, #1
 8013018:	4a0b      	ldr	r2, [pc, #44]	; (8013048 <prvCheckTasksWaitingTermination+0x54>)
 801301a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801301c:	4b0b      	ldr	r3, [pc, #44]	; (801304c <prvCheckTasksWaitingTermination+0x58>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	3b01      	subs	r3, #1
 8013022:	4a0a      	ldr	r2, [pc, #40]	; (801304c <prvCheckTasksWaitingTermination+0x58>)
 8013024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013026:	f000 fe25 	bl	8013c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f000 f810 	bl	8013050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013030:	4b06      	ldr	r3, [pc, #24]	; (801304c <prvCheckTasksWaitingTermination+0x58>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d1e1      	bne.n	8012ffc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013038:	bf00      	nop
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	24001320 	.word	0x24001320
 8013048:	2400134c 	.word	0x2400134c
 801304c:	24001334 	.word	0x24001334

08013050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801305e:	2b00      	cmp	r3, #0
 8013060:	d108      	bne.n	8013074 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013066:	4618      	mov	r0, r3
 8013068:	f000 ffc2 	bl	8013ff0 <vPortFree>
				vPortFree( pxTCB );
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f000 ffbf 	bl	8013ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013072:	e018      	b.n	80130a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801307a:	2b01      	cmp	r3, #1
 801307c:	d103      	bne.n	8013086 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f000 ffb6 	bl	8013ff0 <vPortFree>
	}
 8013084:	e00f      	b.n	80130a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801308c:	2b02      	cmp	r3, #2
 801308e:	d00a      	beq.n	80130a6 <prvDeleteTCB+0x56>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	60fb      	str	r3, [r7, #12]
}
 80130a2:	bf00      	nop
 80130a4:	e7fe      	b.n	80130a4 <prvDeleteTCB+0x54>
	}
 80130a6:	bf00      	nop
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
	...

080130b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80130b0:	b480      	push	{r7}
 80130b2:	b083      	sub	sp, #12
 80130b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130b6:	4b0c      	ldr	r3, [pc, #48]	; (80130e8 <prvResetNextTaskUnblockTime+0x38>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d104      	bne.n	80130ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80130c0:	4b0a      	ldr	r3, [pc, #40]	; (80130ec <prvResetNextTaskUnblockTime+0x3c>)
 80130c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80130c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80130c8:	e008      	b.n	80130dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130ca:	4b07      	ldr	r3, [pc, #28]	; (80130e8 <prvResetNextTaskUnblockTime+0x38>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	4a04      	ldr	r2, [pc, #16]	; (80130ec <prvResetNextTaskUnblockTime+0x3c>)
 80130da:	6013      	str	r3, [r2, #0]
}
 80130dc:	bf00      	nop
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr
 80130e8:	24001304 	.word	0x24001304
 80130ec:	2400136c 	.word	0x2400136c

080130f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80130f0:	b480      	push	{r7}
 80130f2:	b083      	sub	sp, #12
 80130f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80130f6:	4b0b      	ldr	r3, [pc, #44]	; (8013124 <xTaskGetSchedulerState+0x34>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d102      	bne.n	8013104 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80130fe:	2301      	movs	r3, #1
 8013100:	607b      	str	r3, [r7, #4]
 8013102:	e008      	b.n	8013116 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013104:	4b08      	ldr	r3, [pc, #32]	; (8013128 <xTaskGetSchedulerState+0x38>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d102      	bne.n	8013112 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801310c:	2302      	movs	r3, #2
 801310e:	607b      	str	r3, [r7, #4]
 8013110:	e001      	b.n	8013116 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013112:	2300      	movs	r3, #0
 8013114:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013116:	687b      	ldr	r3, [r7, #4]
	}
 8013118:	4618      	mov	r0, r3
 801311a:	370c      	adds	r7, #12
 801311c:	46bd      	mov	sp, r7
 801311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013122:	4770      	bx	lr
 8013124:	24001358 	.word	0x24001358
 8013128:	24001374 	.word	0x24001374

0801312c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801312c:	b580      	push	{r7, lr}
 801312e:	b086      	sub	sp, #24
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013138:	2300      	movs	r3, #0
 801313a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d056      	beq.n	80131f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013142:	4b2e      	ldr	r3, [pc, #184]	; (80131fc <xTaskPriorityDisinherit+0xd0>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	693a      	ldr	r2, [r7, #16]
 8013148:	429a      	cmp	r2, r3
 801314a:	d00a      	beq.n	8013162 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013150:	f383 8811 	msr	BASEPRI, r3
 8013154:	f3bf 8f6f 	isb	sy
 8013158:	f3bf 8f4f 	dsb	sy
 801315c:	60fb      	str	r3, [r7, #12]
}
 801315e:	bf00      	nop
 8013160:	e7fe      	b.n	8013160 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013166:	2b00      	cmp	r3, #0
 8013168:	d10a      	bne.n	8013180 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801316e:	f383 8811 	msr	BASEPRI, r3
 8013172:	f3bf 8f6f 	isb	sy
 8013176:	f3bf 8f4f 	dsb	sy
 801317a:	60bb      	str	r3, [r7, #8]
}
 801317c:	bf00      	nop
 801317e:	e7fe      	b.n	801317e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013180:	693b      	ldr	r3, [r7, #16]
 8013182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013184:	1e5a      	subs	r2, r3, #1
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013192:	429a      	cmp	r2, r3
 8013194:	d02c      	beq.n	80131f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801319a:	2b00      	cmp	r3, #0
 801319c:	d128      	bne.n	80131f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	3304      	adds	r3, #4
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7fe fadc 	bl	8011760 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80131b8:	693b      	ldr	r3, [r7, #16]
 80131ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131c0:	4b0f      	ldr	r3, [pc, #60]	; (8013200 <xTaskPriorityDisinherit+0xd4>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d903      	bls.n	80131d0 <xTaskPriorityDisinherit+0xa4>
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131cc:	4a0c      	ldr	r2, [pc, #48]	; (8013200 <xTaskPriorityDisinherit+0xd4>)
 80131ce:	6013      	str	r3, [r2, #0]
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131d4:	4613      	mov	r3, r2
 80131d6:	009b      	lsls	r3, r3, #2
 80131d8:	4413      	add	r3, r2
 80131da:	009b      	lsls	r3, r3, #2
 80131dc:	4a09      	ldr	r2, [pc, #36]	; (8013204 <xTaskPriorityDisinherit+0xd8>)
 80131de:	441a      	add	r2, r3
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	3304      	adds	r3, #4
 80131e4:	4619      	mov	r1, r3
 80131e6:	4610      	mov	r0, r2
 80131e8:	f7fe fa5d 	bl	80116a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80131ec:	2301      	movs	r3, #1
 80131ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80131f0:	697b      	ldr	r3, [r7, #20]
	}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3718      	adds	r7, #24
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	24000e78 	.word	0x24000e78
 8013200:	24001354 	.word	0x24001354
 8013204:	24000e7c 	.word	0x24000e7c

08013208 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8013208:	b480      	push	{r7}
 801320a:	b083      	sub	sp, #12
 801320c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801320e:	4b09      	ldr	r3, [pc, #36]	; (8013234 <uxTaskResetEventItemValue+0x2c>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	699b      	ldr	r3, [r3, #24]
 8013214:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013216:	4b07      	ldr	r3, [pc, #28]	; (8013234 <uxTaskResetEventItemValue+0x2c>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801321c:	4b05      	ldr	r3, [pc, #20]	; (8013234 <uxTaskResetEventItemValue+0x2c>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013224:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8013226:	687b      	ldr	r3, [r7, #4]
}
 8013228:	4618      	mov	r0, r3
 801322a:	370c      	adds	r7, #12
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr
 8013234:	24000e78 	.word	0x24000e78

08013238 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b084      	sub	sp, #16
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013242:	4b21      	ldr	r3, [pc, #132]	; (80132c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013248:	4b20      	ldr	r3, [pc, #128]	; (80132cc <prvAddCurrentTaskToDelayedList+0x94>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	3304      	adds	r3, #4
 801324e:	4618      	mov	r0, r3
 8013250:	f7fe fa86 	bl	8011760 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801325a:	d10a      	bne.n	8013272 <prvAddCurrentTaskToDelayedList+0x3a>
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d007      	beq.n	8013272 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013262:	4b1a      	ldr	r3, [pc, #104]	; (80132cc <prvAddCurrentTaskToDelayedList+0x94>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	3304      	adds	r3, #4
 8013268:	4619      	mov	r1, r3
 801326a:	4819      	ldr	r0, [pc, #100]	; (80132d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801326c:	f7fe fa1b 	bl	80116a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013270:	e026      	b.n	80132c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013272:	68fa      	ldr	r2, [r7, #12]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	4413      	add	r3, r2
 8013278:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801327a:	4b14      	ldr	r3, [pc, #80]	; (80132cc <prvAddCurrentTaskToDelayedList+0x94>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	68ba      	ldr	r2, [r7, #8]
 8013280:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	429a      	cmp	r2, r3
 8013288:	d209      	bcs.n	801329e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801328a:	4b12      	ldr	r3, [pc, #72]	; (80132d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	4b0f      	ldr	r3, [pc, #60]	; (80132cc <prvAddCurrentTaskToDelayedList+0x94>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	3304      	adds	r3, #4
 8013294:	4619      	mov	r1, r3
 8013296:	4610      	mov	r0, r2
 8013298:	f7fe fa29 	bl	80116ee <vListInsert>
}
 801329c:	e010      	b.n	80132c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801329e:	4b0e      	ldr	r3, [pc, #56]	; (80132d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	4b0a      	ldr	r3, [pc, #40]	; (80132cc <prvAddCurrentTaskToDelayedList+0x94>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	3304      	adds	r3, #4
 80132a8:	4619      	mov	r1, r3
 80132aa:	4610      	mov	r0, r2
 80132ac:	f7fe fa1f 	bl	80116ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80132b0:	4b0a      	ldr	r3, [pc, #40]	; (80132dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	68ba      	ldr	r2, [r7, #8]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d202      	bcs.n	80132c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80132ba:	4a08      	ldr	r2, [pc, #32]	; (80132dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	6013      	str	r3, [r2, #0]
}
 80132c0:	bf00      	nop
 80132c2:	3710      	adds	r7, #16
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	24001350 	.word	0x24001350
 80132cc:	24000e78 	.word	0x24000e78
 80132d0:	24001338 	.word	0x24001338
 80132d4:	24001308 	.word	0x24001308
 80132d8:	24001304 	.word	0x24001304
 80132dc:	2400136c 	.word	0x2400136c

080132e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b08a      	sub	sp, #40	; 0x28
 80132e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80132e6:	2300      	movs	r3, #0
 80132e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80132ea:	f000 fb07 	bl	80138fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80132ee:	4b1c      	ldr	r3, [pc, #112]	; (8013360 <xTimerCreateTimerTask+0x80>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d021      	beq.n	801333a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80132f6:	2300      	movs	r3, #0
 80132f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80132fa:	2300      	movs	r3, #0
 80132fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80132fe:	1d3a      	adds	r2, r7, #4
 8013300:	f107 0108 	add.w	r1, r7, #8
 8013304:	f107 030c 	add.w	r3, r7, #12
 8013308:	4618      	mov	r0, r3
 801330a:	f7fd ff97 	bl	801123c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801330e:	6879      	ldr	r1, [r7, #4]
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	68fa      	ldr	r2, [r7, #12]
 8013314:	9202      	str	r2, [sp, #8]
 8013316:	9301      	str	r3, [sp, #4]
 8013318:	2302      	movs	r3, #2
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	2300      	movs	r3, #0
 801331e:	460a      	mov	r2, r1
 8013320:	4910      	ldr	r1, [pc, #64]	; (8013364 <xTimerCreateTimerTask+0x84>)
 8013322:	4811      	ldr	r0, [pc, #68]	; (8013368 <xTimerCreateTimerTask+0x88>)
 8013324:	f7ff f828 	bl	8012378 <xTaskCreateStatic>
 8013328:	4603      	mov	r3, r0
 801332a:	4a10      	ldr	r2, [pc, #64]	; (801336c <xTimerCreateTimerTask+0x8c>)
 801332c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801332e:	4b0f      	ldr	r3, [pc, #60]	; (801336c <xTimerCreateTimerTask+0x8c>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d001      	beq.n	801333a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013336:	2301      	movs	r3, #1
 8013338:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d10a      	bne.n	8013356 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013344:	f383 8811 	msr	BASEPRI, r3
 8013348:	f3bf 8f6f 	isb	sy
 801334c:	f3bf 8f4f 	dsb	sy
 8013350:	613b      	str	r3, [r7, #16]
}
 8013352:	bf00      	nop
 8013354:	e7fe      	b.n	8013354 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013356:	697b      	ldr	r3, [r7, #20]
}
 8013358:	4618      	mov	r0, r3
 801335a:	3718      	adds	r7, #24
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	240013a8 	.word	0x240013a8
 8013364:	08015500 	.word	0x08015500
 8013368:	080134a5 	.word	0x080134a5
 801336c:	240013ac 	.word	0x240013ac

08013370 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b08a      	sub	sp, #40	; 0x28
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801337e:	2300      	movs	r3, #0
 8013380:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d10a      	bne.n	801339e <xTimerGenericCommand+0x2e>
	__asm volatile
 8013388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801338c:	f383 8811 	msr	BASEPRI, r3
 8013390:	f3bf 8f6f 	isb	sy
 8013394:	f3bf 8f4f 	dsb	sy
 8013398:	623b      	str	r3, [r7, #32]
}
 801339a:	bf00      	nop
 801339c:	e7fe      	b.n	801339c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801339e:	4b1a      	ldr	r3, [pc, #104]	; (8013408 <xTimerGenericCommand+0x98>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d02a      	beq.n	80133fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	2b05      	cmp	r3, #5
 80133b6:	dc18      	bgt.n	80133ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80133b8:	f7ff fe9a 	bl	80130f0 <xTaskGetSchedulerState>
 80133bc:	4603      	mov	r3, r0
 80133be:	2b02      	cmp	r3, #2
 80133c0:	d109      	bne.n	80133d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80133c2:	4b11      	ldr	r3, [pc, #68]	; (8013408 <xTimerGenericCommand+0x98>)
 80133c4:	6818      	ldr	r0, [r3, #0]
 80133c6:	f107 0110 	add.w	r1, r7, #16
 80133ca:	2300      	movs	r3, #0
 80133cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133ce:	f7fe fb2f 	bl	8011a30 <xQueueGenericSend>
 80133d2:	6278      	str	r0, [r7, #36]	; 0x24
 80133d4:	e012      	b.n	80133fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80133d6:	4b0c      	ldr	r3, [pc, #48]	; (8013408 <xTimerGenericCommand+0x98>)
 80133d8:	6818      	ldr	r0, [r3, #0]
 80133da:	f107 0110 	add.w	r1, r7, #16
 80133de:	2300      	movs	r3, #0
 80133e0:	2200      	movs	r2, #0
 80133e2:	f7fe fb25 	bl	8011a30 <xQueueGenericSend>
 80133e6:	6278      	str	r0, [r7, #36]	; 0x24
 80133e8:	e008      	b.n	80133fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80133ea:	4b07      	ldr	r3, [pc, #28]	; (8013408 <xTimerGenericCommand+0x98>)
 80133ec:	6818      	ldr	r0, [r3, #0]
 80133ee:	f107 0110 	add.w	r1, r7, #16
 80133f2:	2300      	movs	r3, #0
 80133f4:	683a      	ldr	r2, [r7, #0]
 80133f6:	f7fe fc19 	bl	8011c2c <xQueueGenericSendFromISR>
 80133fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80133fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3728      	adds	r7, #40	; 0x28
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	240013a8 	.word	0x240013a8

0801340c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b088      	sub	sp, #32
 8013410:	af02      	add	r7, sp, #8
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013416:	4b22      	ldr	r3, [pc, #136]	; (80134a0 <prvProcessExpiredTimer+0x94>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	68db      	ldr	r3, [r3, #12]
 801341c:	68db      	ldr	r3, [r3, #12]
 801341e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	3304      	adds	r3, #4
 8013424:	4618      	mov	r0, r3
 8013426:	f7fe f99b 	bl	8011760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013430:	f003 0304 	and.w	r3, r3, #4
 8013434:	2b00      	cmp	r3, #0
 8013436:	d022      	beq.n	801347e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	699a      	ldr	r2, [r3, #24]
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	18d1      	adds	r1, r2, r3
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	683a      	ldr	r2, [r7, #0]
 8013444:	6978      	ldr	r0, [r7, #20]
 8013446:	f000 f8d1 	bl	80135ec <prvInsertTimerInActiveList>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d01f      	beq.n	8013490 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013450:	2300      	movs	r3, #0
 8013452:	9300      	str	r3, [sp, #0]
 8013454:	2300      	movs	r3, #0
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	2100      	movs	r1, #0
 801345a:	6978      	ldr	r0, [r7, #20]
 801345c:	f7ff ff88 	bl	8013370 <xTimerGenericCommand>
 8013460:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d113      	bne.n	8013490 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346c:	f383 8811 	msr	BASEPRI, r3
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	60fb      	str	r3, [r7, #12]
}
 801347a:	bf00      	nop
 801347c:	e7fe      	b.n	801347c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013484:	f023 0301 	bic.w	r3, r3, #1
 8013488:	b2da      	uxtb	r2, r3
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	6a1b      	ldr	r3, [r3, #32]
 8013494:	6978      	ldr	r0, [r7, #20]
 8013496:	4798      	blx	r3
}
 8013498:	bf00      	nop
 801349a:	3718      	adds	r7, #24
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	240013a0 	.word	0x240013a0

080134a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80134ac:	f107 0308 	add.w	r3, r7, #8
 80134b0:	4618      	mov	r0, r3
 80134b2:	f000 f857 	bl	8013564 <prvGetNextExpireTime>
 80134b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	4619      	mov	r1, r3
 80134bc:	68f8      	ldr	r0, [r7, #12]
 80134be:	f000 f803 	bl	80134c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80134c2:	f000 f8d5 	bl	8013670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80134c6:	e7f1      	b.n	80134ac <prvTimerTask+0x8>

080134c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b084      	sub	sp, #16
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80134d2:	f7ff f98d 	bl	80127f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80134d6:	f107 0308 	add.w	r3, r7, #8
 80134da:	4618      	mov	r0, r3
 80134dc:	f000 f866 	bl	80135ac <prvSampleTimeNow>
 80134e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d130      	bne.n	801354a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d10a      	bne.n	8013504 <prvProcessTimerOrBlockTask+0x3c>
 80134ee:	687a      	ldr	r2, [r7, #4]
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d806      	bhi.n	8013504 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80134f6:	f7ff f989 	bl	801280c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80134fa:	68f9      	ldr	r1, [r7, #12]
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7ff ff85 	bl	801340c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013502:	e024      	b.n	801354e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d008      	beq.n	801351c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801350a:	4b13      	ldr	r3, [pc, #76]	; (8013558 <prvProcessTimerOrBlockTask+0x90>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d101      	bne.n	8013518 <prvProcessTimerOrBlockTask+0x50>
 8013514:	2301      	movs	r3, #1
 8013516:	e000      	b.n	801351a <prvProcessTimerOrBlockTask+0x52>
 8013518:	2300      	movs	r3, #0
 801351a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801351c:	4b0f      	ldr	r3, [pc, #60]	; (801355c <prvProcessTimerOrBlockTask+0x94>)
 801351e:	6818      	ldr	r0, [r3, #0]
 8013520:	687a      	ldr	r2, [r7, #4]
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	1ad3      	subs	r3, r2, r3
 8013526:	683a      	ldr	r2, [r7, #0]
 8013528:	4619      	mov	r1, r3
 801352a:	f7fe fef1 	bl	8012310 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801352e:	f7ff f96d 	bl	801280c <xTaskResumeAll>
 8013532:	4603      	mov	r3, r0
 8013534:	2b00      	cmp	r3, #0
 8013536:	d10a      	bne.n	801354e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013538:	4b09      	ldr	r3, [pc, #36]	; (8013560 <prvProcessTimerOrBlockTask+0x98>)
 801353a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801353e:	601a      	str	r2, [r3, #0]
 8013540:	f3bf 8f4f 	dsb	sy
 8013544:	f3bf 8f6f 	isb	sy
}
 8013548:	e001      	b.n	801354e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801354a:	f7ff f95f 	bl	801280c <xTaskResumeAll>
}
 801354e:	bf00      	nop
 8013550:	3710      	adds	r7, #16
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	240013a4 	.word	0x240013a4
 801355c:	240013a8 	.word	0x240013a8
 8013560:	e000ed04 	.word	0xe000ed04

08013564 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013564:	b480      	push	{r7}
 8013566:	b085      	sub	sp, #20
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801356c:	4b0e      	ldr	r3, [pc, #56]	; (80135a8 <prvGetNextExpireTime+0x44>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d101      	bne.n	801357a <prvGetNextExpireTime+0x16>
 8013576:	2201      	movs	r2, #1
 8013578:	e000      	b.n	801357c <prvGetNextExpireTime+0x18>
 801357a:	2200      	movs	r2, #0
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d105      	bne.n	8013594 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013588:	4b07      	ldr	r3, [pc, #28]	; (80135a8 <prvGetNextExpireTime+0x44>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	60fb      	str	r3, [r7, #12]
 8013592:	e001      	b.n	8013598 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013594:	2300      	movs	r3, #0
 8013596:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013598:	68fb      	ldr	r3, [r7, #12]
}
 801359a:	4618      	mov	r0, r3
 801359c:	3714      	adds	r7, #20
 801359e:	46bd      	mov	sp, r7
 80135a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop
 80135a8:	240013a0 	.word	0x240013a0

080135ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b084      	sub	sp, #16
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80135b4:	f7ff f9c8 	bl	8012948 <xTaskGetTickCount>
 80135b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80135ba:	4b0b      	ldr	r3, [pc, #44]	; (80135e8 <prvSampleTimeNow+0x3c>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d205      	bcs.n	80135d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80135c4:	f000 f936 	bl	8013834 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2201      	movs	r2, #1
 80135cc:	601a      	str	r2, [r3, #0]
 80135ce:	e002      	b.n	80135d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2200      	movs	r2, #0
 80135d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80135d6:	4a04      	ldr	r2, [pc, #16]	; (80135e8 <prvSampleTimeNow+0x3c>)
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80135dc:	68fb      	ldr	r3, [r7, #12]
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	240013b0 	.word	0x240013b0

080135ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b086      	sub	sp, #24
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	60f8      	str	r0, [r7, #12]
 80135f4:	60b9      	str	r1, [r7, #8]
 80135f6:	607a      	str	r2, [r7, #4]
 80135f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80135fa:	2300      	movs	r3, #0
 80135fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	68ba      	ldr	r2, [r7, #8]
 8013602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	68fa      	ldr	r2, [r7, #12]
 8013608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801360a:	68ba      	ldr	r2, [r7, #8]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	429a      	cmp	r2, r3
 8013610:	d812      	bhi.n	8013638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	1ad2      	subs	r2, r2, r3
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	699b      	ldr	r3, [r3, #24]
 801361c:	429a      	cmp	r2, r3
 801361e:	d302      	bcc.n	8013626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013620:	2301      	movs	r3, #1
 8013622:	617b      	str	r3, [r7, #20]
 8013624:	e01b      	b.n	801365e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013626:	4b10      	ldr	r3, [pc, #64]	; (8013668 <prvInsertTimerInActiveList+0x7c>)
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	3304      	adds	r3, #4
 801362e:	4619      	mov	r1, r3
 8013630:	4610      	mov	r0, r2
 8013632:	f7fe f85c 	bl	80116ee <vListInsert>
 8013636:	e012      	b.n	801365e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	429a      	cmp	r2, r3
 801363e:	d206      	bcs.n	801364e <prvInsertTimerInActiveList+0x62>
 8013640:	68ba      	ldr	r2, [r7, #8]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	429a      	cmp	r2, r3
 8013646:	d302      	bcc.n	801364e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013648:	2301      	movs	r3, #1
 801364a:	617b      	str	r3, [r7, #20]
 801364c:	e007      	b.n	801365e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801364e:	4b07      	ldr	r3, [pc, #28]	; (801366c <prvInsertTimerInActiveList+0x80>)
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	3304      	adds	r3, #4
 8013656:	4619      	mov	r1, r3
 8013658:	4610      	mov	r0, r2
 801365a:	f7fe f848 	bl	80116ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 801365e:	697b      	ldr	r3, [r7, #20]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3718      	adds	r7, #24
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	240013a4 	.word	0x240013a4
 801366c:	240013a0 	.word	0x240013a0

08013670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b08e      	sub	sp, #56	; 0x38
 8013674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013676:	e0ca      	b.n	801380e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	da18      	bge.n	80136b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801367e:	1d3b      	adds	r3, r7, #4
 8013680:	3304      	adds	r3, #4
 8013682:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013686:	2b00      	cmp	r3, #0
 8013688:	d10a      	bne.n	80136a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801368e:	f383 8811 	msr	BASEPRI, r3
 8013692:	f3bf 8f6f 	isb	sy
 8013696:	f3bf 8f4f 	dsb	sy
 801369a:	61fb      	str	r3, [r7, #28]
}
 801369c:	bf00      	nop
 801369e:	e7fe      	b.n	801369e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80136a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136a6:	6850      	ldr	r0, [r2, #4]
 80136a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136aa:	6892      	ldr	r2, [r2, #8]
 80136ac:	4611      	mov	r1, r2
 80136ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	f2c0 80aa 	blt.w	801380c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80136bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136be:	695b      	ldr	r3, [r3, #20]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d004      	beq.n	80136ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c6:	3304      	adds	r3, #4
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7fe f849 	bl	8011760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80136ce:	463b      	mov	r3, r7
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7ff ff6b 	bl	80135ac <prvSampleTimeNow>
 80136d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2b09      	cmp	r3, #9
 80136dc:	f200 8097 	bhi.w	801380e <prvProcessReceivedCommands+0x19e>
 80136e0:	a201      	add	r2, pc, #4	; (adr r2, 80136e8 <prvProcessReceivedCommands+0x78>)
 80136e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136e6:	bf00      	nop
 80136e8:	08013711 	.word	0x08013711
 80136ec:	08013711 	.word	0x08013711
 80136f0:	08013711 	.word	0x08013711
 80136f4:	08013785 	.word	0x08013785
 80136f8:	08013799 	.word	0x08013799
 80136fc:	080137e3 	.word	0x080137e3
 8013700:	08013711 	.word	0x08013711
 8013704:	08013711 	.word	0x08013711
 8013708:	08013785 	.word	0x08013785
 801370c:	08013799 	.word	0x08013799
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013716:	f043 0301 	orr.w	r3, r3, #1
 801371a:	b2da      	uxtb	r2, r3
 801371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013722:	68ba      	ldr	r2, [r7, #8]
 8013724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013726:	699b      	ldr	r3, [r3, #24]
 8013728:	18d1      	adds	r1, r2, r3
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801372e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013730:	f7ff ff5c 	bl	80135ec <prvInsertTimerInActiveList>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d069      	beq.n	801380e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801373c:	6a1b      	ldr	r3, [r3, #32]
 801373e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013740:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013748:	f003 0304 	and.w	r3, r3, #4
 801374c:	2b00      	cmp	r3, #0
 801374e:	d05e      	beq.n	801380e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013750:	68ba      	ldr	r2, [r7, #8]
 8013752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013754:	699b      	ldr	r3, [r3, #24]
 8013756:	441a      	add	r2, r3
 8013758:	2300      	movs	r3, #0
 801375a:	9300      	str	r3, [sp, #0]
 801375c:	2300      	movs	r3, #0
 801375e:	2100      	movs	r1, #0
 8013760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013762:	f7ff fe05 	bl	8013370 <xTimerGenericCommand>
 8013766:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013768:	6a3b      	ldr	r3, [r7, #32]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d14f      	bne.n	801380e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013772:	f383 8811 	msr	BASEPRI, r3
 8013776:	f3bf 8f6f 	isb	sy
 801377a:	f3bf 8f4f 	dsb	sy
 801377e:	61bb      	str	r3, [r7, #24]
}
 8013780:	bf00      	nop
 8013782:	e7fe      	b.n	8013782 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801378a:	f023 0301 	bic.w	r3, r3, #1
 801378e:	b2da      	uxtb	r2, r3
 8013790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013796:	e03a      	b.n	801380e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801379e:	f043 0301 	orr.w	r3, r3, #1
 80137a2:	b2da      	uxtb	r2, r3
 80137a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80137aa:	68ba      	ldr	r2, [r7, #8]
 80137ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80137b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b2:	699b      	ldr	r3, [r3, #24]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d10a      	bne.n	80137ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80137b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137bc:	f383 8811 	msr	BASEPRI, r3
 80137c0:	f3bf 8f6f 	isb	sy
 80137c4:	f3bf 8f4f 	dsb	sy
 80137c8:	617b      	str	r3, [r7, #20]
}
 80137ca:	bf00      	nop
 80137cc:	e7fe      	b.n	80137cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80137ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d0:	699a      	ldr	r2, [r3, #24]
 80137d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d4:	18d1      	adds	r1, r2, r3
 80137d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137dc:	f7ff ff06 	bl	80135ec <prvInsertTimerInActiveList>
					break;
 80137e0:	e015      	b.n	801380e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80137e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137e8:	f003 0302 	and.w	r3, r3, #2
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d103      	bne.n	80137f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80137f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137f2:	f000 fbfd 	bl	8013ff0 <vPortFree>
 80137f6:	e00a      	b.n	801380e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80137f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137fe:	f023 0301 	bic.w	r3, r3, #1
 8013802:	b2da      	uxtb	r2, r3
 8013804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801380a:	e000      	b.n	801380e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801380c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801380e:	4b08      	ldr	r3, [pc, #32]	; (8013830 <prvProcessReceivedCommands+0x1c0>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	1d39      	adds	r1, r7, #4
 8013814:	2200      	movs	r2, #0
 8013816:	4618      	mov	r0, r3
 8013818:	f7fe faa4 	bl	8011d64 <xQueueReceive>
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	f47f af2a 	bne.w	8013678 <prvProcessReceivedCommands+0x8>
	}
}
 8013824:	bf00      	nop
 8013826:	bf00      	nop
 8013828:	3730      	adds	r7, #48	; 0x30
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	240013a8 	.word	0x240013a8

08013834 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b088      	sub	sp, #32
 8013838:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801383a:	e048      	b.n	80138ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801383c:	4b2d      	ldr	r3, [pc, #180]	; (80138f4 <prvSwitchTimerLists+0xc0>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013846:	4b2b      	ldr	r3, [pc, #172]	; (80138f4 <prvSwitchTimerLists+0xc0>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	68db      	ldr	r3, [r3, #12]
 801384e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	3304      	adds	r3, #4
 8013854:	4618      	mov	r0, r3
 8013856:	f7fd ff83 	bl	8011760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	6a1b      	ldr	r3, [r3, #32]
 801385e:	68f8      	ldr	r0, [r7, #12]
 8013860:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013868:	f003 0304 	and.w	r3, r3, #4
 801386c:	2b00      	cmp	r3, #0
 801386e:	d02e      	beq.n	80138ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	693a      	ldr	r2, [r7, #16]
 8013876:	4413      	add	r3, r2
 8013878:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801387a:	68ba      	ldr	r2, [r7, #8]
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	429a      	cmp	r2, r3
 8013880:	d90e      	bls.n	80138a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	68ba      	ldr	r2, [r7, #8]
 8013886:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	68fa      	ldr	r2, [r7, #12]
 801388c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801388e:	4b19      	ldr	r3, [pc, #100]	; (80138f4 <prvSwitchTimerLists+0xc0>)
 8013890:	681a      	ldr	r2, [r3, #0]
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	3304      	adds	r3, #4
 8013896:	4619      	mov	r1, r3
 8013898:	4610      	mov	r0, r2
 801389a:	f7fd ff28 	bl	80116ee <vListInsert>
 801389e:	e016      	b.n	80138ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80138a0:	2300      	movs	r3, #0
 80138a2:	9300      	str	r3, [sp, #0]
 80138a4:	2300      	movs	r3, #0
 80138a6:	693a      	ldr	r2, [r7, #16]
 80138a8:	2100      	movs	r1, #0
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f7ff fd60 	bl	8013370 <xTimerGenericCommand>
 80138b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d10a      	bne.n	80138ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80138b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138bc:	f383 8811 	msr	BASEPRI, r3
 80138c0:	f3bf 8f6f 	isb	sy
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	603b      	str	r3, [r7, #0]
}
 80138ca:	bf00      	nop
 80138cc:	e7fe      	b.n	80138cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80138ce:	4b09      	ldr	r3, [pc, #36]	; (80138f4 <prvSwitchTimerLists+0xc0>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d1b1      	bne.n	801383c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80138d8:	4b06      	ldr	r3, [pc, #24]	; (80138f4 <prvSwitchTimerLists+0xc0>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80138de:	4b06      	ldr	r3, [pc, #24]	; (80138f8 <prvSwitchTimerLists+0xc4>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	4a04      	ldr	r2, [pc, #16]	; (80138f4 <prvSwitchTimerLists+0xc0>)
 80138e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80138e6:	4a04      	ldr	r2, [pc, #16]	; (80138f8 <prvSwitchTimerLists+0xc4>)
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	6013      	str	r3, [r2, #0]
}
 80138ec:	bf00      	nop
 80138ee:	3718      	adds	r7, #24
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	240013a0 	.word	0x240013a0
 80138f8:	240013a4 	.word	0x240013a4

080138fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013902:	f000 f987 	bl	8013c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013906:	4b15      	ldr	r3, [pc, #84]	; (801395c <prvCheckForValidListAndQueue+0x60>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d120      	bne.n	8013950 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801390e:	4814      	ldr	r0, [pc, #80]	; (8013960 <prvCheckForValidListAndQueue+0x64>)
 8013910:	f7fd fe9c 	bl	801164c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013914:	4813      	ldr	r0, [pc, #76]	; (8013964 <prvCheckForValidListAndQueue+0x68>)
 8013916:	f7fd fe99 	bl	801164c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801391a:	4b13      	ldr	r3, [pc, #76]	; (8013968 <prvCheckForValidListAndQueue+0x6c>)
 801391c:	4a10      	ldr	r2, [pc, #64]	; (8013960 <prvCheckForValidListAndQueue+0x64>)
 801391e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013920:	4b12      	ldr	r3, [pc, #72]	; (801396c <prvCheckForValidListAndQueue+0x70>)
 8013922:	4a10      	ldr	r2, [pc, #64]	; (8013964 <prvCheckForValidListAndQueue+0x68>)
 8013924:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013926:	2300      	movs	r3, #0
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	4b11      	ldr	r3, [pc, #68]	; (8013970 <prvCheckForValidListAndQueue+0x74>)
 801392c:	4a11      	ldr	r2, [pc, #68]	; (8013974 <prvCheckForValidListAndQueue+0x78>)
 801392e:	2110      	movs	r1, #16
 8013930:	200a      	movs	r0, #10
 8013932:	f7fd ffa7 	bl	8011884 <xQueueGenericCreateStatic>
 8013936:	4603      	mov	r3, r0
 8013938:	4a08      	ldr	r2, [pc, #32]	; (801395c <prvCheckForValidListAndQueue+0x60>)
 801393a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801393c:	4b07      	ldr	r3, [pc, #28]	; (801395c <prvCheckForValidListAndQueue+0x60>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d005      	beq.n	8013950 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013944:	4b05      	ldr	r3, [pc, #20]	; (801395c <prvCheckForValidListAndQueue+0x60>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	490b      	ldr	r1, [pc, #44]	; (8013978 <prvCheckForValidListAndQueue+0x7c>)
 801394a:	4618      	mov	r0, r3
 801394c:	f7fe fcb6 	bl	80122bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013950:	f000 f990 	bl	8013c74 <vPortExitCritical>
}
 8013954:	bf00      	nop
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}
 801395a:	bf00      	nop
 801395c:	240013a8 	.word	0x240013a8
 8013960:	24001378 	.word	0x24001378
 8013964:	2400138c 	.word	0x2400138c
 8013968:	240013a0 	.word	0x240013a0
 801396c:	240013a4 	.word	0x240013a4
 8013970:	24001454 	.word	0x24001454
 8013974:	240013b4 	.word	0x240013b4
 8013978:	08015508 	.word	0x08015508

0801397c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801397c:	b580      	push	{r7, lr}
 801397e:	b08a      	sub	sp, #40	; 0x28
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
 8013988:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801398a:	f06f 0301 	mvn.w	r3, #1
 801398e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801399c:	4b06      	ldr	r3, [pc, #24]	; (80139b8 <xTimerPendFunctionCallFromISR+0x3c>)
 801399e:	6818      	ldr	r0, [r3, #0]
 80139a0:	f107 0114 	add.w	r1, r7, #20
 80139a4:	2300      	movs	r3, #0
 80139a6:	683a      	ldr	r2, [r7, #0]
 80139a8:	f7fe f940 	bl	8011c2c <xQueueGenericSendFromISR>
 80139ac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80139ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3728      	adds	r7, #40	; 0x28
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	240013a8 	.word	0x240013a8

080139bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80139bc:	b480      	push	{r7}
 80139be:	b085      	sub	sp, #20
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	3b04      	subs	r3, #4
 80139cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80139d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	3b04      	subs	r3, #4
 80139da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	f023 0201 	bic.w	r2, r3, #1
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	3b04      	subs	r3, #4
 80139ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80139ec:	4a0c      	ldr	r2, [pc, #48]	; (8013a20 <pxPortInitialiseStack+0x64>)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	3b14      	subs	r3, #20
 80139f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	3b04      	subs	r3, #4
 8013a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	f06f 0202 	mvn.w	r2, #2
 8013a0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	3b20      	subs	r3, #32
 8013a10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013a12:	68fb      	ldr	r3, [r7, #12]
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3714      	adds	r7, #20
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	08013a25 	.word	0x08013a25

08013a24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013a24:	b480      	push	{r7}
 8013a26:	b085      	sub	sp, #20
 8013a28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013a2e:	4b12      	ldr	r3, [pc, #72]	; (8013a78 <prvTaskExitError+0x54>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a36:	d00a      	beq.n	8013a4e <prvTaskExitError+0x2a>
	__asm volatile
 8013a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a3c:	f383 8811 	msr	BASEPRI, r3
 8013a40:	f3bf 8f6f 	isb	sy
 8013a44:	f3bf 8f4f 	dsb	sy
 8013a48:	60fb      	str	r3, [r7, #12]
}
 8013a4a:	bf00      	nop
 8013a4c:	e7fe      	b.n	8013a4c <prvTaskExitError+0x28>
	__asm volatile
 8013a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a52:	f383 8811 	msr	BASEPRI, r3
 8013a56:	f3bf 8f6f 	isb	sy
 8013a5a:	f3bf 8f4f 	dsb	sy
 8013a5e:	60bb      	str	r3, [r7, #8]
}
 8013a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013a62:	bf00      	nop
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d0fc      	beq.n	8013a64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013a6a:	bf00      	nop
 8013a6c:	bf00      	nop
 8013a6e:	3714      	adds	r7, #20
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr
 8013a78:	24000098 	.word	0x24000098
 8013a7c:	00000000 	.word	0x00000000

08013a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013a80:	4b07      	ldr	r3, [pc, #28]	; (8013aa0 <pxCurrentTCBConst2>)
 8013a82:	6819      	ldr	r1, [r3, #0]
 8013a84:	6808      	ldr	r0, [r1, #0]
 8013a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a8a:	f380 8809 	msr	PSP, r0
 8013a8e:	f3bf 8f6f 	isb	sy
 8013a92:	f04f 0000 	mov.w	r0, #0
 8013a96:	f380 8811 	msr	BASEPRI, r0
 8013a9a:	4770      	bx	lr
 8013a9c:	f3af 8000 	nop.w

08013aa0 <pxCurrentTCBConst2>:
 8013aa0:	24000e78 	.word	0x24000e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013aa4:	bf00      	nop
 8013aa6:	bf00      	nop

08013aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013aa8:	4808      	ldr	r0, [pc, #32]	; (8013acc <prvPortStartFirstTask+0x24>)
 8013aaa:	6800      	ldr	r0, [r0, #0]
 8013aac:	6800      	ldr	r0, [r0, #0]
 8013aae:	f380 8808 	msr	MSP, r0
 8013ab2:	f04f 0000 	mov.w	r0, #0
 8013ab6:	f380 8814 	msr	CONTROL, r0
 8013aba:	b662      	cpsie	i
 8013abc:	b661      	cpsie	f
 8013abe:	f3bf 8f4f 	dsb	sy
 8013ac2:	f3bf 8f6f 	isb	sy
 8013ac6:	df00      	svc	0
 8013ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013aca:	bf00      	nop
 8013acc:	e000ed08 	.word	0xe000ed08

08013ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013ad6:	4b46      	ldr	r3, [pc, #280]	; (8013bf0 <xPortStartScheduler+0x120>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	4a46      	ldr	r2, [pc, #280]	; (8013bf4 <xPortStartScheduler+0x124>)
 8013adc:	4293      	cmp	r3, r2
 8013ade:	d10a      	bne.n	8013af6 <xPortStartScheduler+0x26>
	__asm volatile
 8013ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae4:	f383 8811 	msr	BASEPRI, r3
 8013ae8:	f3bf 8f6f 	isb	sy
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	613b      	str	r3, [r7, #16]
}
 8013af2:	bf00      	nop
 8013af4:	e7fe      	b.n	8013af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013af6:	4b3e      	ldr	r3, [pc, #248]	; (8013bf0 <xPortStartScheduler+0x120>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4a3f      	ldr	r2, [pc, #252]	; (8013bf8 <xPortStartScheduler+0x128>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d10a      	bne.n	8013b16 <xPortStartScheduler+0x46>
	__asm volatile
 8013b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b04:	f383 8811 	msr	BASEPRI, r3
 8013b08:	f3bf 8f6f 	isb	sy
 8013b0c:	f3bf 8f4f 	dsb	sy
 8013b10:	60fb      	str	r3, [r7, #12]
}
 8013b12:	bf00      	nop
 8013b14:	e7fe      	b.n	8013b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013b16:	4b39      	ldr	r3, [pc, #228]	; (8013bfc <xPortStartScheduler+0x12c>)
 8013b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	b2db      	uxtb	r3, r3
 8013b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	22ff      	movs	r2, #255	; 0xff
 8013b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	781b      	ldrb	r3, [r3, #0]
 8013b2c:	b2db      	uxtb	r3, r3
 8013b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013b30:	78fb      	ldrb	r3, [r7, #3]
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013b38:	b2da      	uxtb	r2, r3
 8013b3a:	4b31      	ldr	r3, [pc, #196]	; (8013c00 <xPortStartScheduler+0x130>)
 8013b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013b3e:	4b31      	ldr	r3, [pc, #196]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b40:	2207      	movs	r2, #7
 8013b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013b44:	e009      	b.n	8013b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013b46:	4b2f      	ldr	r3, [pc, #188]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	3b01      	subs	r3, #1
 8013b4c:	4a2d      	ldr	r2, [pc, #180]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013b50:	78fb      	ldrb	r3, [r7, #3]
 8013b52:	b2db      	uxtb	r3, r3
 8013b54:	005b      	lsls	r3, r3, #1
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013b5a:	78fb      	ldrb	r3, [r7, #3]
 8013b5c:	b2db      	uxtb	r3, r3
 8013b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b62:	2b80      	cmp	r3, #128	; 0x80
 8013b64:	d0ef      	beq.n	8013b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013b66:	4b27      	ldr	r3, [pc, #156]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	f1c3 0307 	rsb	r3, r3, #7
 8013b6e:	2b04      	cmp	r3, #4
 8013b70:	d00a      	beq.n	8013b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8013b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b76:	f383 8811 	msr	BASEPRI, r3
 8013b7a:	f3bf 8f6f 	isb	sy
 8013b7e:	f3bf 8f4f 	dsb	sy
 8013b82:	60bb      	str	r3, [r7, #8]
}
 8013b84:	bf00      	nop
 8013b86:	e7fe      	b.n	8013b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013b88:	4b1e      	ldr	r3, [pc, #120]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	021b      	lsls	r3, r3, #8
 8013b8e:	4a1d      	ldr	r2, [pc, #116]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013b92:	4b1c      	ldr	r3, [pc, #112]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013b9a:	4a1a      	ldr	r2, [pc, #104]	; (8013c04 <xPortStartScheduler+0x134>)
 8013b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	b2da      	uxtb	r2, r3
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013ba6:	4b18      	ldr	r3, [pc, #96]	; (8013c08 <xPortStartScheduler+0x138>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4a17      	ldr	r2, [pc, #92]	; (8013c08 <xPortStartScheduler+0x138>)
 8013bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013bb2:	4b15      	ldr	r3, [pc, #84]	; (8013c08 <xPortStartScheduler+0x138>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	4a14      	ldr	r2, [pc, #80]	; (8013c08 <xPortStartScheduler+0x138>)
 8013bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013bbe:	f000 f8dd 	bl	8013d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013bc2:	4b12      	ldr	r3, [pc, #72]	; (8013c0c <xPortStartScheduler+0x13c>)
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013bc8:	f000 f8fc 	bl	8013dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013bcc:	4b10      	ldr	r3, [pc, #64]	; (8013c10 <xPortStartScheduler+0x140>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4a0f      	ldr	r2, [pc, #60]	; (8013c10 <xPortStartScheduler+0x140>)
 8013bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013bd8:	f7ff ff66 	bl	8013aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013bdc:	f7fe ff7e 	bl	8012adc <vTaskSwitchContext>
	prvTaskExitError();
 8013be0:	f7ff ff20 	bl	8013a24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013be4:	2300      	movs	r3, #0
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3718      	adds	r7, #24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	e000ed00 	.word	0xe000ed00
 8013bf4:	410fc271 	.word	0x410fc271
 8013bf8:	410fc270 	.word	0x410fc270
 8013bfc:	e000e400 	.word	0xe000e400
 8013c00:	240014a4 	.word	0x240014a4
 8013c04:	240014a8 	.word	0x240014a8
 8013c08:	e000ed20 	.word	0xe000ed20
 8013c0c:	24000098 	.word	0x24000098
 8013c10:	e000ef34 	.word	0xe000ef34

08013c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
	__asm volatile
 8013c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1e:	f383 8811 	msr	BASEPRI, r3
 8013c22:	f3bf 8f6f 	isb	sy
 8013c26:	f3bf 8f4f 	dsb	sy
 8013c2a:	607b      	str	r3, [r7, #4]
}
 8013c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013c2e:	4b0f      	ldr	r3, [pc, #60]	; (8013c6c <vPortEnterCritical+0x58>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	3301      	adds	r3, #1
 8013c34:	4a0d      	ldr	r2, [pc, #52]	; (8013c6c <vPortEnterCritical+0x58>)
 8013c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013c38:	4b0c      	ldr	r3, [pc, #48]	; (8013c6c <vPortEnterCritical+0x58>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	2b01      	cmp	r3, #1
 8013c3e:	d10f      	bne.n	8013c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013c40:	4b0b      	ldr	r3, [pc, #44]	; (8013c70 <vPortEnterCritical+0x5c>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	b2db      	uxtb	r3, r3
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00a      	beq.n	8013c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8013c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c4e:	f383 8811 	msr	BASEPRI, r3
 8013c52:	f3bf 8f6f 	isb	sy
 8013c56:	f3bf 8f4f 	dsb	sy
 8013c5a:	603b      	str	r3, [r7, #0]
}
 8013c5c:	bf00      	nop
 8013c5e:	e7fe      	b.n	8013c5e <vPortEnterCritical+0x4a>
	}
}
 8013c60:	bf00      	nop
 8013c62:	370c      	adds	r7, #12
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	24000098 	.word	0x24000098
 8013c70:	e000ed04 	.word	0xe000ed04

08013c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013c7a:	4b12      	ldr	r3, [pc, #72]	; (8013cc4 <vPortExitCritical+0x50>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d10a      	bne.n	8013c98 <vPortExitCritical+0x24>
	__asm volatile
 8013c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c86:	f383 8811 	msr	BASEPRI, r3
 8013c8a:	f3bf 8f6f 	isb	sy
 8013c8e:	f3bf 8f4f 	dsb	sy
 8013c92:	607b      	str	r3, [r7, #4]
}
 8013c94:	bf00      	nop
 8013c96:	e7fe      	b.n	8013c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013c98:	4b0a      	ldr	r3, [pc, #40]	; (8013cc4 <vPortExitCritical+0x50>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	4a09      	ldr	r2, [pc, #36]	; (8013cc4 <vPortExitCritical+0x50>)
 8013ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013ca2:	4b08      	ldr	r3, [pc, #32]	; (8013cc4 <vPortExitCritical+0x50>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d105      	bne.n	8013cb6 <vPortExitCritical+0x42>
 8013caa:	2300      	movs	r3, #0
 8013cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	f383 8811 	msr	BASEPRI, r3
}
 8013cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013cb6:	bf00      	nop
 8013cb8:	370c      	adds	r7, #12
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop
 8013cc4:	24000098 	.word	0x24000098
	...

08013cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013cd0:	f3ef 8009 	mrs	r0, PSP
 8013cd4:	f3bf 8f6f 	isb	sy
 8013cd8:	4b15      	ldr	r3, [pc, #84]	; (8013d30 <pxCurrentTCBConst>)
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	f01e 0f10 	tst.w	lr, #16
 8013ce0:	bf08      	it	eq
 8013ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cea:	6010      	str	r0, [r2, #0]
 8013cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013cf4:	f380 8811 	msr	BASEPRI, r0
 8013cf8:	f3bf 8f4f 	dsb	sy
 8013cfc:	f3bf 8f6f 	isb	sy
 8013d00:	f7fe feec 	bl	8012adc <vTaskSwitchContext>
 8013d04:	f04f 0000 	mov.w	r0, #0
 8013d08:	f380 8811 	msr	BASEPRI, r0
 8013d0c:	bc09      	pop	{r0, r3}
 8013d0e:	6819      	ldr	r1, [r3, #0]
 8013d10:	6808      	ldr	r0, [r1, #0]
 8013d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d16:	f01e 0f10 	tst.w	lr, #16
 8013d1a:	bf08      	it	eq
 8013d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013d20:	f380 8809 	msr	PSP, r0
 8013d24:	f3bf 8f6f 	isb	sy
 8013d28:	4770      	bx	lr
 8013d2a:	bf00      	nop
 8013d2c:	f3af 8000 	nop.w

08013d30 <pxCurrentTCBConst>:
 8013d30:	24000e78 	.word	0x24000e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013d34:	bf00      	nop
 8013d36:	bf00      	nop

08013d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8013d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d42:	f383 8811 	msr	BASEPRI, r3
 8013d46:	f3bf 8f6f 	isb	sy
 8013d4a:	f3bf 8f4f 	dsb	sy
 8013d4e:	607b      	str	r3, [r7, #4]
}
 8013d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013d52:	f7fe fe09 	bl	8012968 <xTaskIncrementTick>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d003      	beq.n	8013d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013d5c:	4b06      	ldr	r3, [pc, #24]	; (8013d78 <xPortSysTickHandler+0x40>)
 8013d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d62:	601a      	str	r2, [r3, #0]
 8013d64:	2300      	movs	r3, #0
 8013d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	f383 8811 	msr	BASEPRI, r3
}
 8013d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013d70:	bf00      	nop
 8013d72:	3708      	adds	r7, #8
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}
 8013d78:	e000ed04 	.word	0xe000ed04

08013d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013d80:	4b0b      	ldr	r3, [pc, #44]	; (8013db0 <vPortSetupTimerInterrupt+0x34>)
 8013d82:	2200      	movs	r2, #0
 8013d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013d86:	4b0b      	ldr	r3, [pc, #44]	; (8013db4 <vPortSetupTimerInterrupt+0x38>)
 8013d88:	2200      	movs	r2, #0
 8013d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013d8c:	4b0a      	ldr	r3, [pc, #40]	; (8013db8 <vPortSetupTimerInterrupt+0x3c>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4a0a      	ldr	r2, [pc, #40]	; (8013dbc <vPortSetupTimerInterrupt+0x40>)
 8013d92:	fba2 2303 	umull	r2, r3, r2, r3
 8013d96:	099b      	lsrs	r3, r3, #6
 8013d98:	4a09      	ldr	r2, [pc, #36]	; (8013dc0 <vPortSetupTimerInterrupt+0x44>)
 8013d9a:	3b01      	subs	r3, #1
 8013d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013d9e:	4b04      	ldr	r3, [pc, #16]	; (8013db0 <vPortSetupTimerInterrupt+0x34>)
 8013da0:	2207      	movs	r2, #7
 8013da2:	601a      	str	r2, [r3, #0]
}
 8013da4:	bf00      	nop
 8013da6:	46bd      	mov	sp, r7
 8013da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dac:	4770      	bx	lr
 8013dae:	bf00      	nop
 8013db0:	e000e010 	.word	0xe000e010
 8013db4:	e000e018 	.word	0xe000e018
 8013db8:	24000088 	.word	0x24000088
 8013dbc:	10624dd3 	.word	0x10624dd3
 8013dc0:	e000e014 	.word	0xe000e014

08013dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013dd4 <vPortEnableVFP+0x10>
 8013dc8:	6801      	ldr	r1, [r0, #0]
 8013dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013dce:	6001      	str	r1, [r0, #0]
 8013dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013dd2:	bf00      	nop
 8013dd4:	e000ed88 	.word	0xe000ed88

08013dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013dd8:	b480      	push	{r7}
 8013dda:	b085      	sub	sp, #20
 8013ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013dde:	f3ef 8305 	mrs	r3, IPSR
 8013de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2b0f      	cmp	r3, #15
 8013de8:	d914      	bls.n	8013e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013dea:	4a17      	ldr	r2, [pc, #92]	; (8013e48 <vPortValidateInterruptPriority+0x70>)
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	4413      	add	r3, r2
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013df4:	4b15      	ldr	r3, [pc, #84]	; (8013e4c <vPortValidateInterruptPriority+0x74>)
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	7afa      	ldrb	r2, [r7, #11]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d20a      	bcs.n	8013e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e02:	f383 8811 	msr	BASEPRI, r3
 8013e06:	f3bf 8f6f 	isb	sy
 8013e0a:	f3bf 8f4f 	dsb	sy
 8013e0e:	607b      	str	r3, [r7, #4]
}
 8013e10:	bf00      	nop
 8013e12:	e7fe      	b.n	8013e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013e14:	4b0e      	ldr	r3, [pc, #56]	; (8013e50 <vPortValidateInterruptPriority+0x78>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013e1c:	4b0d      	ldr	r3, [pc, #52]	; (8013e54 <vPortValidateInterruptPriority+0x7c>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d90a      	bls.n	8013e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e28:	f383 8811 	msr	BASEPRI, r3
 8013e2c:	f3bf 8f6f 	isb	sy
 8013e30:	f3bf 8f4f 	dsb	sy
 8013e34:	603b      	str	r3, [r7, #0]
}
 8013e36:	bf00      	nop
 8013e38:	e7fe      	b.n	8013e38 <vPortValidateInterruptPriority+0x60>
	}
 8013e3a:	bf00      	nop
 8013e3c:	3714      	adds	r7, #20
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	e000e3f0 	.word	0xe000e3f0
 8013e4c:	240014a4 	.word	0x240014a4
 8013e50:	e000ed0c 	.word	0xe000ed0c
 8013e54:	240014a8 	.word	0x240014a8

08013e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b08a      	sub	sp, #40	; 0x28
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013e60:	2300      	movs	r3, #0
 8013e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013e64:	f7fe fcc4 	bl	80127f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013e68:	4b5b      	ldr	r3, [pc, #364]	; (8013fd8 <pvPortMalloc+0x180>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d101      	bne.n	8013e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013e70:	f000 f920 	bl	80140b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013e74:	4b59      	ldr	r3, [pc, #356]	; (8013fdc <pvPortMalloc+0x184>)
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	4013      	ands	r3, r2
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	f040 8093 	bne.w	8013fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d01d      	beq.n	8013ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013e88:	2208      	movs	r2, #8
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4413      	add	r3, r2
 8013e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f003 0307 	and.w	r3, r3, #7
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d014      	beq.n	8013ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f023 0307 	bic.w	r3, r3, #7
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f003 0307 	and.w	r3, r3, #7
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d00a      	beq.n	8013ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8013eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb2:	f383 8811 	msr	BASEPRI, r3
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	f3bf 8f4f 	dsb	sy
 8013ebe:	617b      	str	r3, [r7, #20]
}
 8013ec0:	bf00      	nop
 8013ec2:	e7fe      	b.n	8013ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d06e      	beq.n	8013fa8 <pvPortMalloc+0x150>
 8013eca:	4b45      	ldr	r3, [pc, #276]	; (8013fe0 <pvPortMalloc+0x188>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d869      	bhi.n	8013fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013ed4:	4b43      	ldr	r3, [pc, #268]	; (8013fe4 <pvPortMalloc+0x18c>)
 8013ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013ed8:	4b42      	ldr	r3, [pc, #264]	; (8013fe4 <pvPortMalloc+0x18c>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ede:	e004      	b.n	8013eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d903      	bls.n	8013efc <pvPortMalloc+0xa4>
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1f1      	bne.n	8013ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013efc:	4b36      	ldr	r3, [pc, #216]	; (8013fd8 <pvPortMalloc+0x180>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d050      	beq.n	8013fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013f06:	6a3b      	ldr	r3, [r7, #32]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2208      	movs	r2, #8
 8013f0c:	4413      	add	r3, r2
 8013f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	6a3b      	ldr	r3, [r7, #32]
 8013f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1a:	685a      	ldr	r2, [r3, #4]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	1ad2      	subs	r2, r2, r3
 8013f20:	2308      	movs	r3, #8
 8013f22:	005b      	lsls	r3, r3, #1
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d91f      	bls.n	8013f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4413      	add	r3, r2
 8013f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	f003 0307 	and.w	r3, r3, #7
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d00a      	beq.n	8013f50 <pvPortMalloc+0xf8>
	__asm volatile
 8013f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3e:	f383 8811 	msr	BASEPRI, r3
 8013f42:	f3bf 8f6f 	isb	sy
 8013f46:	f3bf 8f4f 	dsb	sy
 8013f4a:	613b      	str	r3, [r7, #16]
}
 8013f4c:	bf00      	nop
 8013f4e:	e7fe      	b.n	8013f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f52:	685a      	ldr	r2, [r3, #4]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	1ad2      	subs	r2, r2, r3
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013f62:	69b8      	ldr	r0, [r7, #24]
 8013f64:	f000 f908 	bl	8014178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013f68:	4b1d      	ldr	r3, [pc, #116]	; (8013fe0 <pvPortMalloc+0x188>)
 8013f6a:	681a      	ldr	r2, [r3, #0]
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	1ad3      	subs	r3, r2, r3
 8013f72:	4a1b      	ldr	r2, [pc, #108]	; (8013fe0 <pvPortMalloc+0x188>)
 8013f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013f76:	4b1a      	ldr	r3, [pc, #104]	; (8013fe0 <pvPortMalloc+0x188>)
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	4b1b      	ldr	r3, [pc, #108]	; (8013fe8 <pvPortMalloc+0x190>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d203      	bcs.n	8013f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013f82:	4b17      	ldr	r3, [pc, #92]	; (8013fe0 <pvPortMalloc+0x188>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	4a18      	ldr	r2, [pc, #96]	; (8013fe8 <pvPortMalloc+0x190>)
 8013f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8c:	685a      	ldr	r2, [r3, #4]
 8013f8e:	4b13      	ldr	r3, [pc, #76]	; (8013fdc <pvPortMalloc+0x184>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	431a      	orrs	r2, r3
 8013f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013f9e:	4b13      	ldr	r3, [pc, #76]	; (8013fec <pvPortMalloc+0x194>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	4a11      	ldr	r2, [pc, #68]	; (8013fec <pvPortMalloc+0x194>)
 8013fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013fa8:	f7fe fc30 	bl	801280c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	f003 0307 	and.w	r3, r3, #7
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d00a      	beq.n	8013fcc <pvPortMalloc+0x174>
	__asm volatile
 8013fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fba:	f383 8811 	msr	BASEPRI, r3
 8013fbe:	f3bf 8f6f 	isb	sy
 8013fc2:	f3bf 8f4f 	dsb	sy
 8013fc6:	60fb      	str	r3, [r7, #12]
}
 8013fc8:	bf00      	nop
 8013fca:	e7fe      	b.n	8013fca <pvPortMalloc+0x172>
	return pvReturn;
 8013fcc:	69fb      	ldr	r3, [r7, #28]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3728      	adds	r7, #40	; 0x28
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	240050b4 	.word	0x240050b4
 8013fdc:	240050c8 	.word	0x240050c8
 8013fe0:	240050b8 	.word	0x240050b8
 8013fe4:	240050ac 	.word	0x240050ac
 8013fe8:	240050bc 	.word	0x240050bc
 8013fec:	240050c0 	.word	0x240050c0

08013ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d04d      	beq.n	801409e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014002:	2308      	movs	r3, #8
 8014004:	425b      	negs	r3, r3
 8014006:	697a      	ldr	r2, [r7, #20]
 8014008:	4413      	add	r3, r2
 801400a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	685a      	ldr	r2, [r3, #4]
 8014014:	4b24      	ldr	r3, [pc, #144]	; (80140a8 <vPortFree+0xb8>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	4013      	ands	r3, r2
 801401a:	2b00      	cmp	r3, #0
 801401c:	d10a      	bne.n	8014034 <vPortFree+0x44>
	__asm volatile
 801401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014022:	f383 8811 	msr	BASEPRI, r3
 8014026:	f3bf 8f6f 	isb	sy
 801402a:	f3bf 8f4f 	dsb	sy
 801402e:	60fb      	str	r3, [r7, #12]
}
 8014030:	bf00      	nop
 8014032:	e7fe      	b.n	8014032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00a      	beq.n	8014052 <vPortFree+0x62>
	__asm volatile
 801403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014040:	f383 8811 	msr	BASEPRI, r3
 8014044:	f3bf 8f6f 	isb	sy
 8014048:	f3bf 8f4f 	dsb	sy
 801404c:	60bb      	str	r3, [r7, #8]
}
 801404e:	bf00      	nop
 8014050:	e7fe      	b.n	8014050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	685a      	ldr	r2, [r3, #4]
 8014056:	4b14      	ldr	r3, [pc, #80]	; (80140a8 <vPortFree+0xb8>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4013      	ands	r3, r2
 801405c:	2b00      	cmp	r3, #0
 801405e:	d01e      	beq.n	801409e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d11a      	bne.n	801409e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	685a      	ldr	r2, [r3, #4]
 801406c:	4b0e      	ldr	r3, [pc, #56]	; (80140a8 <vPortFree+0xb8>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	43db      	mvns	r3, r3
 8014072:	401a      	ands	r2, r3
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014078:	f7fe fbba 	bl	80127f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	685a      	ldr	r2, [r3, #4]
 8014080:	4b0a      	ldr	r3, [pc, #40]	; (80140ac <vPortFree+0xbc>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	4413      	add	r3, r2
 8014086:	4a09      	ldr	r2, [pc, #36]	; (80140ac <vPortFree+0xbc>)
 8014088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801408a:	6938      	ldr	r0, [r7, #16]
 801408c:	f000 f874 	bl	8014178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014090:	4b07      	ldr	r3, [pc, #28]	; (80140b0 <vPortFree+0xc0>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	3301      	adds	r3, #1
 8014096:	4a06      	ldr	r2, [pc, #24]	; (80140b0 <vPortFree+0xc0>)
 8014098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801409a:	f7fe fbb7 	bl	801280c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801409e:	bf00      	nop
 80140a0:	3718      	adds	r7, #24
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}
 80140a6:	bf00      	nop
 80140a8:	240050c8 	.word	0x240050c8
 80140ac:	240050b8 	.word	0x240050b8
 80140b0:	240050c4 	.word	0x240050c4

080140b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80140b4:	b480      	push	{r7}
 80140b6:	b085      	sub	sp, #20
 80140b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80140ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80140be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80140c0:	4b27      	ldr	r3, [pc, #156]	; (8014160 <prvHeapInit+0xac>)
 80140c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	f003 0307 	and.w	r3, r3, #7
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d00c      	beq.n	80140e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	3307      	adds	r3, #7
 80140d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	f023 0307 	bic.w	r3, r3, #7
 80140da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80140dc:	68ba      	ldr	r2, [r7, #8]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	4a1f      	ldr	r2, [pc, #124]	; (8014160 <prvHeapInit+0xac>)
 80140e4:	4413      	add	r3, r2
 80140e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80140ec:	4a1d      	ldr	r2, [pc, #116]	; (8014164 <prvHeapInit+0xb0>)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80140f2:	4b1c      	ldr	r3, [pc, #112]	; (8014164 <prvHeapInit+0xb0>)
 80140f4:	2200      	movs	r2, #0
 80140f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	4413      	add	r3, r2
 80140fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014100:	2208      	movs	r2, #8
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	1a9b      	subs	r3, r3, r2
 8014106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	f023 0307 	bic.w	r3, r3, #7
 801410e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	4a15      	ldr	r2, [pc, #84]	; (8014168 <prvHeapInit+0xb4>)
 8014114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014116:	4b14      	ldr	r3, [pc, #80]	; (8014168 <prvHeapInit+0xb4>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2200      	movs	r2, #0
 801411c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801411e:	4b12      	ldr	r3, [pc, #72]	; (8014168 <prvHeapInit+0xb4>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2200      	movs	r2, #0
 8014124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	1ad2      	subs	r2, r2, r3
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014134:	4b0c      	ldr	r3, [pc, #48]	; (8014168 <prvHeapInit+0xb4>)
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	4a0a      	ldr	r2, [pc, #40]	; (801416c <prvHeapInit+0xb8>)
 8014142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	4a09      	ldr	r2, [pc, #36]	; (8014170 <prvHeapInit+0xbc>)
 801414a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801414c:	4b09      	ldr	r3, [pc, #36]	; (8014174 <prvHeapInit+0xc0>)
 801414e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014152:	601a      	str	r2, [r3, #0]
}
 8014154:	bf00      	nop
 8014156:	3714      	adds	r7, #20
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr
 8014160:	240014ac 	.word	0x240014ac
 8014164:	240050ac 	.word	0x240050ac
 8014168:	240050b4 	.word	0x240050b4
 801416c:	240050bc 	.word	0x240050bc
 8014170:	240050b8 	.word	0x240050b8
 8014174:	240050c8 	.word	0x240050c8

08014178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014178:	b480      	push	{r7}
 801417a:	b085      	sub	sp, #20
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014180:	4b28      	ldr	r3, [pc, #160]	; (8014224 <prvInsertBlockIntoFreeList+0xac>)
 8014182:	60fb      	str	r3, [r7, #12]
 8014184:	e002      	b.n	801418c <prvInsertBlockIntoFreeList+0x14>
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	60fb      	str	r3, [r7, #12]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	429a      	cmp	r2, r3
 8014194:	d8f7      	bhi.n	8014186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	68ba      	ldr	r2, [r7, #8]
 80141a0:	4413      	add	r3, r2
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	429a      	cmp	r2, r3
 80141a6:	d108      	bne.n	80141ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	685a      	ldr	r2, [r3, #4]
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	441a      	add	r2, r3
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	68ba      	ldr	r2, [r7, #8]
 80141c4:	441a      	add	r2, r3
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d118      	bne.n	8014200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	4b15      	ldr	r3, [pc, #84]	; (8014228 <prvInsertBlockIntoFreeList+0xb0>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d00d      	beq.n	80141f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	685a      	ldr	r2, [r3, #4]
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	441a      	add	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	681a      	ldr	r2, [r3, #0]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	601a      	str	r2, [r3, #0]
 80141f4:	e008      	b.n	8014208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80141f6:	4b0c      	ldr	r3, [pc, #48]	; (8014228 <prvInsertBlockIntoFreeList+0xb0>)
 80141f8:	681a      	ldr	r2, [r3, #0]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	601a      	str	r2, [r3, #0]
 80141fe:	e003      	b.n	8014208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014208:	68fa      	ldr	r2, [r7, #12]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	429a      	cmp	r2, r3
 801420e:	d002      	beq.n	8014216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014216:	bf00      	nop
 8014218:	3714      	adds	r7, #20
 801421a:	46bd      	mov	sp, r7
 801421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014220:	4770      	bx	lr
 8014222:	bf00      	nop
 8014224:	240050ac 	.word	0x240050ac
 8014228:	240050b4 	.word	0x240050b4

0801422c <__errno>:
 801422c:	4b01      	ldr	r3, [pc, #4]	; (8014234 <__errno+0x8>)
 801422e:	6818      	ldr	r0, [r3, #0]
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop
 8014234:	2400009c 	.word	0x2400009c

08014238 <__libc_init_array>:
 8014238:	b570      	push	{r4, r5, r6, lr}
 801423a:	4d0d      	ldr	r5, [pc, #52]	; (8014270 <__libc_init_array+0x38>)
 801423c:	4c0d      	ldr	r4, [pc, #52]	; (8014274 <__libc_init_array+0x3c>)
 801423e:	1b64      	subs	r4, r4, r5
 8014240:	10a4      	asrs	r4, r4, #2
 8014242:	2600      	movs	r6, #0
 8014244:	42a6      	cmp	r6, r4
 8014246:	d109      	bne.n	801425c <__libc_init_array+0x24>
 8014248:	4d0b      	ldr	r5, [pc, #44]	; (8014278 <__libc_init_array+0x40>)
 801424a:	4c0c      	ldr	r4, [pc, #48]	; (801427c <__libc_init_array+0x44>)
 801424c:	f001 f842 	bl	80152d4 <_init>
 8014250:	1b64      	subs	r4, r4, r5
 8014252:	10a4      	asrs	r4, r4, #2
 8014254:	2600      	movs	r6, #0
 8014256:	42a6      	cmp	r6, r4
 8014258:	d105      	bne.n	8014266 <__libc_init_array+0x2e>
 801425a:	bd70      	pop	{r4, r5, r6, pc}
 801425c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014260:	4798      	blx	r3
 8014262:	3601      	adds	r6, #1
 8014264:	e7ee      	b.n	8014244 <__libc_init_array+0xc>
 8014266:	f855 3b04 	ldr.w	r3, [r5], #4
 801426a:	4798      	blx	r3
 801426c:	3601      	adds	r6, #1
 801426e:	e7f2      	b.n	8014256 <__libc_init_array+0x1e>
 8014270:	080156a4 	.word	0x080156a4
 8014274:	080156a4 	.word	0x080156a4
 8014278:	080156a4 	.word	0x080156a4
 801427c:	080156a8 	.word	0x080156a8

08014280 <malloc>:
 8014280:	4b02      	ldr	r3, [pc, #8]	; (801428c <malloc+0xc>)
 8014282:	4601      	mov	r1, r0
 8014284:	6818      	ldr	r0, [r3, #0]
 8014286:	f000 b88d 	b.w	80143a4 <_malloc_r>
 801428a:	bf00      	nop
 801428c:	2400009c 	.word	0x2400009c

08014290 <free>:
 8014290:	4b02      	ldr	r3, [pc, #8]	; (801429c <free+0xc>)
 8014292:	4601      	mov	r1, r0
 8014294:	6818      	ldr	r0, [r3, #0]
 8014296:	f000 b819 	b.w	80142cc <_free_r>
 801429a:	bf00      	nop
 801429c:	2400009c 	.word	0x2400009c

080142a0 <memcpy>:
 80142a0:	440a      	add	r2, r1
 80142a2:	4291      	cmp	r1, r2
 80142a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80142a8:	d100      	bne.n	80142ac <memcpy+0xc>
 80142aa:	4770      	bx	lr
 80142ac:	b510      	push	{r4, lr}
 80142ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142b6:	4291      	cmp	r1, r2
 80142b8:	d1f9      	bne.n	80142ae <memcpy+0xe>
 80142ba:	bd10      	pop	{r4, pc}

080142bc <memset>:
 80142bc:	4402      	add	r2, r0
 80142be:	4603      	mov	r3, r0
 80142c0:	4293      	cmp	r3, r2
 80142c2:	d100      	bne.n	80142c6 <memset+0xa>
 80142c4:	4770      	bx	lr
 80142c6:	f803 1b01 	strb.w	r1, [r3], #1
 80142ca:	e7f9      	b.n	80142c0 <memset+0x4>

080142cc <_free_r>:
 80142cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142ce:	2900      	cmp	r1, #0
 80142d0:	d044      	beq.n	801435c <_free_r+0x90>
 80142d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142d6:	9001      	str	r0, [sp, #4]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	f1a1 0404 	sub.w	r4, r1, #4
 80142de:	bfb8      	it	lt
 80142e0:	18e4      	addlt	r4, r4, r3
 80142e2:	f000 fc51 	bl	8014b88 <__malloc_lock>
 80142e6:	4a1e      	ldr	r2, [pc, #120]	; (8014360 <_free_r+0x94>)
 80142e8:	9801      	ldr	r0, [sp, #4]
 80142ea:	6813      	ldr	r3, [r2, #0]
 80142ec:	b933      	cbnz	r3, 80142fc <_free_r+0x30>
 80142ee:	6063      	str	r3, [r4, #4]
 80142f0:	6014      	str	r4, [r2, #0]
 80142f2:	b003      	add	sp, #12
 80142f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142f8:	f000 bc4c 	b.w	8014b94 <__malloc_unlock>
 80142fc:	42a3      	cmp	r3, r4
 80142fe:	d908      	bls.n	8014312 <_free_r+0x46>
 8014300:	6825      	ldr	r5, [r4, #0]
 8014302:	1961      	adds	r1, r4, r5
 8014304:	428b      	cmp	r3, r1
 8014306:	bf01      	itttt	eq
 8014308:	6819      	ldreq	r1, [r3, #0]
 801430a:	685b      	ldreq	r3, [r3, #4]
 801430c:	1949      	addeq	r1, r1, r5
 801430e:	6021      	streq	r1, [r4, #0]
 8014310:	e7ed      	b.n	80142ee <_free_r+0x22>
 8014312:	461a      	mov	r2, r3
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	b10b      	cbz	r3, 801431c <_free_r+0x50>
 8014318:	42a3      	cmp	r3, r4
 801431a:	d9fa      	bls.n	8014312 <_free_r+0x46>
 801431c:	6811      	ldr	r1, [r2, #0]
 801431e:	1855      	adds	r5, r2, r1
 8014320:	42a5      	cmp	r5, r4
 8014322:	d10b      	bne.n	801433c <_free_r+0x70>
 8014324:	6824      	ldr	r4, [r4, #0]
 8014326:	4421      	add	r1, r4
 8014328:	1854      	adds	r4, r2, r1
 801432a:	42a3      	cmp	r3, r4
 801432c:	6011      	str	r1, [r2, #0]
 801432e:	d1e0      	bne.n	80142f2 <_free_r+0x26>
 8014330:	681c      	ldr	r4, [r3, #0]
 8014332:	685b      	ldr	r3, [r3, #4]
 8014334:	6053      	str	r3, [r2, #4]
 8014336:	4421      	add	r1, r4
 8014338:	6011      	str	r1, [r2, #0]
 801433a:	e7da      	b.n	80142f2 <_free_r+0x26>
 801433c:	d902      	bls.n	8014344 <_free_r+0x78>
 801433e:	230c      	movs	r3, #12
 8014340:	6003      	str	r3, [r0, #0]
 8014342:	e7d6      	b.n	80142f2 <_free_r+0x26>
 8014344:	6825      	ldr	r5, [r4, #0]
 8014346:	1961      	adds	r1, r4, r5
 8014348:	428b      	cmp	r3, r1
 801434a:	bf04      	itt	eq
 801434c:	6819      	ldreq	r1, [r3, #0]
 801434e:	685b      	ldreq	r3, [r3, #4]
 8014350:	6063      	str	r3, [r4, #4]
 8014352:	bf04      	itt	eq
 8014354:	1949      	addeq	r1, r1, r5
 8014356:	6021      	streq	r1, [r4, #0]
 8014358:	6054      	str	r4, [r2, #4]
 801435a:	e7ca      	b.n	80142f2 <_free_r+0x26>
 801435c:	b003      	add	sp, #12
 801435e:	bd30      	pop	{r4, r5, pc}
 8014360:	240050cc 	.word	0x240050cc

08014364 <sbrk_aligned>:
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	4e0e      	ldr	r6, [pc, #56]	; (80143a0 <sbrk_aligned+0x3c>)
 8014368:	460c      	mov	r4, r1
 801436a:	6831      	ldr	r1, [r6, #0]
 801436c:	4605      	mov	r5, r0
 801436e:	b911      	cbnz	r1, 8014376 <sbrk_aligned+0x12>
 8014370:	f000 f91a 	bl	80145a8 <_sbrk_r>
 8014374:	6030      	str	r0, [r6, #0]
 8014376:	4621      	mov	r1, r4
 8014378:	4628      	mov	r0, r5
 801437a:	f000 f915 	bl	80145a8 <_sbrk_r>
 801437e:	1c43      	adds	r3, r0, #1
 8014380:	d00a      	beq.n	8014398 <sbrk_aligned+0x34>
 8014382:	1cc4      	adds	r4, r0, #3
 8014384:	f024 0403 	bic.w	r4, r4, #3
 8014388:	42a0      	cmp	r0, r4
 801438a:	d007      	beq.n	801439c <sbrk_aligned+0x38>
 801438c:	1a21      	subs	r1, r4, r0
 801438e:	4628      	mov	r0, r5
 8014390:	f000 f90a 	bl	80145a8 <_sbrk_r>
 8014394:	3001      	adds	r0, #1
 8014396:	d101      	bne.n	801439c <sbrk_aligned+0x38>
 8014398:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801439c:	4620      	mov	r0, r4
 801439e:	bd70      	pop	{r4, r5, r6, pc}
 80143a0:	240050d0 	.word	0x240050d0

080143a4 <_malloc_r>:
 80143a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a8:	1ccd      	adds	r5, r1, #3
 80143aa:	f025 0503 	bic.w	r5, r5, #3
 80143ae:	3508      	adds	r5, #8
 80143b0:	2d0c      	cmp	r5, #12
 80143b2:	bf38      	it	cc
 80143b4:	250c      	movcc	r5, #12
 80143b6:	2d00      	cmp	r5, #0
 80143b8:	4607      	mov	r7, r0
 80143ba:	db01      	blt.n	80143c0 <_malloc_r+0x1c>
 80143bc:	42a9      	cmp	r1, r5
 80143be:	d905      	bls.n	80143cc <_malloc_r+0x28>
 80143c0:	230c      	movs	r3, #12
 80143c2:	603b      	str	r3, [r7, #0]
 80143c4:	2600      	movs	r6, #0
 80143c6:	4630      	mov	r0, r6
 80143c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143cc:	4e2e      	ldr	r6, [pc, #184]	; (8014488 <_malloc_r+0xe4>)
 80143ce:	f000 fbdb 	bl	8014b88 <__malloc_lock>
 80143d2:	6833      	ldr	r3, [r6, #0]
 80143d4:	461c      	mov	r4, r3
 80143d6:	bb34      	cbnz	r4, 8014426 <_malloc_r+0x82>
 80143d8:	4629      	mov	r1, r5
 80143da:	4638      	mov	r0, r7
 80143dc:	f7ff ffc2 	bl	8014364 <sbrk_aligned>
 80143e0:	1c43      	adds	r3, r0, #1
 80143e2:	4604      	mov	r4, r0
 80143e4:	d14d      	bne.n	8014482 <_malloc_r+0xde>
 80143e6:	6834      	ldr	r4, [r6, #0]
 80143e8:	4626      	mov	r6, r4
 80143ea:	2e00      	cmp	r6, #0
 80143ec:	d140      	bne.n	8014470 <_malloc_r+0xcc>
 80143ee:	6823      	ldr	r3, [r4, #0]
 80143f0:	4631      	mov	r1, r6
 80143f2:	4638      	mov	r0, r7
 80143f4:	eb04 0803 	add.w	r8, r4, r3
 80143f8:	f000 f8d6 	bl	80145a8 <_sbrk_r>
 80143fc:	4580      	cmp	r8, r0
 80143fe:	d13a      	bne.n	8014476 <_malloc_r+0xd2>
 8014400:	6821      	ldr	r1, [r4, #0]
 8014402:	3503      	adds	r5, #3
 8014404:	1a6d      	subs	r5, r5, r1
 8014406:	f025 0503 	bic.w	r5, r5, #3
 801440a:	3508      	adds	r5, #8
 801440c:	2d0c      	cmp	r5, #12
 801440e:	bf38      	it	cc
 8014410:	250c      	movcc	r5, #12
 8014412:	4629      	mov	r1, r5
 8014414:	4638      	mov	r0, r7
 8014416:	f7ff ffa5 	bl	8014364 <sbrk_aligned>
 801441a:	3001      	adds	r0, #1
 801441c:	d02b      	beq.n	8014476 <_malloc_r+0xd2>
 801441e:	6823      	ldr	r3, [r4, #0]
 8014420:	442b      	add	r3, r5
 8014422:	6023      	str	r3, [r4, #0]
 8014424:	e00e      	b.n	8014444 <_malloc_r+0xa0>
 8014426:	6822      	ldr	r2, [r4, #0]
 8014428:	1b52      	subs	r2, r2, r5
 801442a:	d41e      	bmi.n	801446a <_malloc_r+0xc6>
 801442c:	2a0b      	cmp	r2, #11
 801442e:	d916      	bls.n	801445e <_malloc_r+0xba>
 8014430:	1961      	adds	r1, r4, r5
 8014432:	42a3      	cmp	r3, r4
 8014434:	6025      	str	r5, [r4, #0]
 8014436:	bf18      	it	ne
 8014438:	6059      	strne	r1, [r3, #4]
 801443a:	6863      	ldr	r3, [r4, #4]
 801443c:	bf08      	it	eq
 801443e:	6031      	streq	r1, [r6, #0]
 8014440:	5162      	str	r2, [r4, r5]
 8014442:	604b      	str	r3, [r1, #4]
 8014444:	4638      	mov	r0, r7
 8014446:	f104 060b 	add.w	r6, r4, #11
 801444a:	f000 fba3 	bl	8014b94 <__malloc_unlock>
 801444e:	f026 0607 	bic.w	r6, r6, #7
 8014452:	1d23      	adds	r3, r4, #4
 8014454:	1af2      	subs	r2, r6, r3
 8014456:	d0b6      	beq.n	80143c6 <_malloc_r+0x22>
 8014458:	1b9b      	subs	r3, r3, r6
 801445a:	50a3      	str	r3, [r4, r2]
 801445c:	e7b3      	b.n	80143c6 <_malloc_r+0x22>
 801445e:	6862      	ldr	r2, [r4, #4]
 8014460:	42a3      	cmp	r3, r4
 8014462:	bf0c      	ite	eq
 8014464:	6032      	streq	r2, [r6, #0]
 8014466:	605a      	strne	r2, [r3, #4]
 8014468:	e7ec      	b.n	8014444 <_malloc_r+0xa0>
 801446a:	4623      	mov	r3, r4
 801446c:	6864      	ldr	r4, [r4, #4]
 801446e:	e7b2      	b.n	80143d6 <_malloc_r+0x32>
 8014470:	4634      	mov	r4, r6
 8014472:	6876      	ldr	r6, [r6, #4]
 8014474:	e7b9      	b.n	80143ea <_malloc_r+0x46>
 8014476:	230c      	movs	r3, #12
 8014478:	603b      	str	r3, [r7, #0]
 801447a:	4638      	mov	r0, r7
 801447c:	f000 fb8a 	bl	8014b94 <__malloc_unlock>
 8014480:	e7a1      	b.n	80143c6 <_malloc_r+0x22>
 8014482:	6025      	str	r5, [r4, #0]
 8014484:	e7de      	b.n	8014444 <_malloc_r+0xa0>
 8014486:	bf00      	nop
 8014488:	240050cc 	.word	0x240050cc

0801448c <iprintf>:
 801448c:	b40f      	push	{r0, r1, r2, r3}
 801448e:	4b0a      	ldr	r3, [pc, #40]	; (80144b8 <iprintf+0x2c>)
 8014490:	b513      	push	{r0, r1, r4, lr}
 8014492:	681c      	ldr	r4, [r3, #0]
 8014494:	b124      	cbz	r4, 80144a0 <iprintf+0x14>
 8014496:	69a3      	ldr	r3, [r4, #24]
 8014498:	b913      	cbnz	r3, 80144a0 <iprintf+0x14>
 801449a:	4620      	mov	r0, r4
 801449c:	f000 fa6e 	bl	801497c <__sinit>
 80144a0:	ab05      	add	r3, sp, #20
 80144a2:	9a04      	ldr	r2, [sp, #16]
 80144a4:	68a1      	ldr	r1, [r4, #8]
 80144a6:	9301      	str	r3, [sp, #4]
 80144a8:	4620      	mov	r0, r4
 80144aa:	f000 fba3 	bl	8014bf4 <_vfiprintf_r>
 80144ae:	b002      	add	sp, #8
 80144b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144b4:	b004      	add	sp, #16
 80144b6:	4770      	bx	lr
 80144b8:	2400009c 	.word	0x2400009c

080144bc <_puts_r>:
 80144bc:	b570      	push	{r4, r5, r6, lr}
 80144be:	460e      	mov	r6, r1
 80144c0:	4605      	mov	r5, r0
 80144c2:	b118      	cbz	r0, 80144cc <_puts_r+0x10>
 80144c4:	6983      	ldr	r3, [r0, #24]
 80144c6:	b90b      	cbnz	r3, 80144cc <_puts_r+0x10>
 80144c8:	f000 fa58 	bl	801497c <__sinit>
 80144cc:	69ab      	ldr	r3, [r5, #24]
 80144ce:	68ac      	ldr	r4, [r5, #8]
 80144d0:	b913      	cbnz	r3, 80144d8 <_puts_r+0x1c>
 80144d2:	4628      	mov	r0, r5
 80144d4:	f000 fa52 	bl	801497c <__sinit>
 80144d8:	4b2c      	ldr	r3, [pc, #176]	; (801458c <_puts_r+0xd0>)
 80144da:	429c      	cmp	r4, r3
 80144dc:	d120      	bne.n	8014520 <_puts_r+0x64>
 80144de:	686c      	ldr	r4, [r5, #4]
 80144e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144e2:	07db      	lsls	r3, r3, #31
 80144e4:	d405      	bmi.n	80144f2 <_puts_r+0x36>
 80144e6:	89a3      	ldrh	r3, [r4, #12]
 80144e8:	0598      	lsls	r0, r3, #22
 80144ea:	d402      	bmi.n	80144f2 <_puts_r+0x36>
 80144ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144ee:	f000 fae3 	bl	8014ab8 <__retarget_lock_acquire_recursive>
 80144f2:	89a3      	ldrh	r3, [r4, #12]
 80144f4:	0719      	lsls	r1, r3, #28
 80144f6:	d51d      	bpl.n	8014534 <_puts_r+0x78>
 80144f8:	6923      	ldr	r3, [r4, #16]
 80144fa:	b1db      	cbz	r3, 8014534 <_puts_r+0x78>
 80144fc:	3e01      	subs	r6, #1
 80144fe:	68a3      	ldr	r3, [r4, #8]
 8014500:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014504:	3b01      	subs	r3, #1
 8014506:	60a3      	str	r3, [r4, #8]
 8014508:	bb39      	cbnz	r1, 801455a <_puts_r+0x9e>
 801450a:	2b00      	cmp	r3, #0
 801450c:	da38      	bge.n	8014580 <_puts_r+0xc4>
 801450e:	4622      	mov	r2, r4
 8014510:	210a      	movs	r1, #10
 8014512:	4628      	mov	r0, r5
 8014514:	f000 f858 	bl	80145c8 <__swbuf_r>
 8014518:	3001      	adds	r0, #1
 801451a:	d011      	beq.n	8014540 <_puts_r+0x84>
 801451c:	250a      	movs	r5, #10
 801451e:	e011      	b.n	8014544 <_puts_r+0x88>
 8014520:	4b1b      	ldr	r3, [pc, #108]	; (8014590 <_puts_r+0xd4>)
 8014522:	429c      	cmp	r4, r3
 8014524:	d101      	bne.n	801452a <_puts_r+0x6e>
 8014526:	68ac      	ldr	r4, [r5, #8]
 8014528:	e7da      	b.n	80144e0 <_puts_r+0x24>
 801452a:	4b1a      	ldr	r3, [pc, #104]	; (8014594 <_puts_r+0xd8>)
 801452c:	429c      	cmp	r4, r3
 801452e:	bf08      	it	eq
 8014530:	68ec      	ldreq	r4, [r5, #12]
 8014532:	e7d5      	b.n	80144e0 <_puts_r+0x24>
 8014534:	4621      	mov	r1, r4
 8014536:	4628      	mov	r0, r5
 8014538:	f000 f898 	bl	801466c <__swsetup_r>
 801453c:	2800      	cmp	r0, #0
 801453e:	d0dd      	beq.n	80144fc <_puts_r+0x40>
 8014540:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014546:	07da      	lsls	r2, r3, #31
 8014548:	d405      	bmi.n	8014556 <_puts_r+0x9a>
 801454a:	89a3      	ldrh	r3, [r4, #12]
 801454c:	059b      	lsls	r3, r3, #22
 801454e:	d402      	bmi.n	8014556 <_puts_r+0x9a>
 8014550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014552:	f000 fab2 	bl	8014aba <__retarget_lock_release_recursive>
 8014556:	4628      	mov	r0, r5
 8014558:	bd70      	pop	{r4, r5, r6, pc}
 801455a:	2b00      	cmp	r3, #0
 801455c:	da04      	bge.n	8014568 <_puts_r+0xac>
 801455e:	69a2      	ldr	r2, [r4, #24]
 8014560:	429a      	cmp	r2, r3
 8014562:	dc06      	bgt.n	8014572 <_puts_r+0xb6>
 8014564:	290a      	cmp	r1, #10
 8014566:	d004      	beq.n	8014572 <_puts_r+0xb6>
 8014568:	6823      	ldr	r3, [r4, #0]
 801456a:	1c5a      	adds	r2, r3, #1
 801456c:	6022      	str	r2, [r4, #0]
 801456e:	7019      	strb	r1, [r3, #0]
 8014570:	e7c5      	b.n	80144fe <_puts_r+0x42>
 8014572:	4622      	mov	r2, r4
 8014574:	4628      	mov	r0, r5
 8014576:	f000 f827 	bl	80145c8 <__swbuf_r>
 801457a:	3001      	adds	r0, #1
 801457c:	d1bf      	bne.n	80144fe <_puts_r+0x42>
 801457e:	e7df      	b.n	8014540 <_puts_r+0x84>
 8014580:	6823      	ldr	r3, [r4, #0]
 8014582:	250a      	movs	r5, #10
 8014584:	1c5a      	adds	r2, r3, #1
 8014586:	6022      	str	r2, [r4, #0]
 8014588:	701d      	strb	r5, [r3, #0]
 801458a:	e7db      	b.n	8014544 <_puts_r+0x88>
 801458c:	08015628 	.word	0x08015628
 8014590:	08015648 	.word	0x08015648
 8014594:	08015608 	.word	0x08015608

08014598 <puts>:
 8014598:	4b02      	ldr	r3, [pc, #8]	; (80145a4 <puts+0xc>)
 801459a:	4601      	mov	r1, r0
 801459c:	6818      	ldr	r0, [r3, #0]
 801459e:	f7ff bf8d 	b.w	80144bc <_puts_r>
 80145a2:	bf00      	nop
 80145a4:	2400009c 	.word	0x2400009c

080145a8 <_sbrk_r>:
 80145a8:	b538      	push	{r3, r4, r5, lr}
 80145aa:	4d06      	ldr	r5, [pc, #24]	; (80145c4 <_sbrk_r+0x1c>)
 80145ac:	2300      	movs	r3, #0
 80145ae:	4604      	mov	r4, r0
 80145b0:	4608      	mov	r0, r1
 80145b2:	602b      	str	r3, [r5, #0]
 80145b4:	f7ee fc24 	bl	8002e00 <_sbrk>
 80145b8:	1c43      	adds	r3, r0, #1
 80145ba:	d102      	bne.n	80145c2 <_sbrk_r+0x1a>
 80145bc:	682b      	ldr	r3, [r5, #0]
 80145be:	b103      	cbz	r3, 80145c2 <_sbrk_r+0x1a>
 80145c0:	6023      	str	r3, [r4, #0]
 80145c2:	bd38      	pop	{r3, r4, r5, pc}
 80145c4:	240050d8 	.word	0x240050d8

080145c8 <__swbuf_r>:
 80145c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ca:	460e      	mov	r6, r1
 80145cc:	4614      	mov	r4, r2
 80145ce:	4605      	mov	r5, r0
 80145d0:	b118      	cbz	r0, 80145da <__swbuf_r+0x12>
 80145d2:	6983      	ldr	r3, [r0, #24]
 80145d4:	b90b      	cbnz	r3, 80145da <__swbuf_r+0x12>
 80145d6:	f000 f9d1 	bl	801497c <__sinit>
 80145da:	4b21      	ldr	r3, [pc, #132]	; (8014660 <__swbuf_r+0x98>)
 80145dc:	429c      	cmp	r4, r3
 80145de:	d12b      	bne.n	8014638 <__swbuf_r+0x70>
 80145e0:	686c      	ldr	r4, [r5, #4]
 80145e2:	69a3      	ldr	r3, [r4, #24]
 80145e4:	60a3      	str	r3, [r4, #8]
 80145e6:	89a3      	ldrh	r3, [r4, #12]
 80145e8:	071a      	lsls	r2, r3, #28
 80145ea:	d52f      	bpl.n	801464c <__swbuf_r+0x84>
 80145ec:	6923      	ldr	r3, [r4, #16]
 80145ee:	b36b      	cbz	r3, 801464c <__swbuf_r+0x84>
 80145f0:	6923      	ldr	r3, [r4, #16]
 80145f2:	6820      	ldr	r0, [r4, #0]
 80145f4:	1ac0      	subs	r0, r0, r3
 80145f6:	6963      	ldr	r3, [r4, #20]
 80145f8:	b2f6      	uxtb	r6, r6
 80145fa:	4283      	cmp	r3, r0
 80145fc:	4637      	mov	r7, r6
 80145fe:	dc04      	bgt.n	801460a <__swbuf_r+0x42>
 8014600:	4621      	mov	r1, r4
 8014602:	4628      	mov	r0, r5
 8014604:	f000 f926 	bl	8014854 <_fflush_r>
 8014608:	bb30      	cbnz	r0, 8014658 <__swbuf_r+0x90>
 801460a:	68a3      	ldr	r3, [r4, #8]
 801460c:	3b01      	subs	r3, #1
 801460e:	60a3      	str	r3, [r4, #8]
 8014610:	6823      	ldr	r3, [r4, #0]
 8014612:	1c5a      	adds	r2, r3, #1
 8014614:	6022      	str	r2, [r4, #0]
 8014616:	701e      	strb	r6, [r3, #0]
 8014618:	6963      	ldr	r3, [r4, #20]
 801461a:	3001      	adds	r0, #1
 801461c:	4283      	cmp	r3, r0
 801461e:	d004      	beq.n	801462a <__swbuf_r+0x62>
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	07db      	lsls	r3, r3, #31
 8014624:	d506      	bpl.n	8014634 <__swbuf_r+0x6c>
 8014626:	2e0a      	cmp	r6, #10
 8014628:	d104      	bne.n	8014634 <__swbuf_r+0x6c>
 801462a:	4621      	mov	r1, r4
 801462c:	4628      	mov	r0, r5
 801462e:	f000 f911 	bl	8014854 <_fflush_r>
 8014632:	b988      	cbnz	r0, 8014658 <__swbuf_r+0x90>
 8014634:	4638      	mov	r0, r7
 8014636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014638:	4b0a      	ldr	r3, [pc, #40]	; (8014664 <__swbuf_r+0x9c>)
 801463a:	429c      	cmp	r4, r3
 801463c:	d101      	bne.n	8014642 <__swbuf_r+0x7a>
 801463e:	68ac      	ldr	r4, [r5, #8]
 8014640:	e7cf      	b.n	80145e2 <__swbuf_r+0x1a>
 8014642:	4b09      	ldr	r3, [pc, #36]	; (8014668 <__swbuf_r+0xa0>)
 8014644:	429c      	cmp	r4, r3
 8014646:	bf08      	it	eq
 8014648:	68ec      	ldreq	r4, [r5, #12]
 801464a:	e7ca      	b.n	80145e2 <__swbuf_r+0x1a>
 801464c:	4621      	mov	r1, r4
 801464e:	4628      	mov	r0, r5
 8014650:	f000 f80c 	bl	801466c <__swsetup_r>
 8014654:	2800      	cmp	r0, #0
 8014656:	d0cb      	beq.n	80145f0 <__swbuf_r+0x28>
 8014658:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801465c:	e7ea      	b.n	8014634 <__swbuf_r+0x6c>
 801465e:	bf00      	nop
 8014660:	08015628 	.word	0x08015628
 8014664:	08015648 	.word	0x08015648
 8014668:	08015608 	.word	0x08015608

0801466c <__swsetup_r>:
 801466c:	4b32      	ldr	r3, [pc, #200]	; (8014738 <__swsetup_r+0xcc>)
 801466e:	b570      	push	{r4, r5, r6, lr}
 8014670:	681d      	ldr	r5, [r3, #0]
 8014672:	4606      	mov	r6, r0
 8014674:	460c      	mov	r4, r1
 8014676:	b125      	cbz	r5, 8014682 <__swsetup_r+0x16>
 8014678:	69ab      	ldr	r3, [r5, #24]
 801467a:	b913      	cbnz	r3, 8014682 <__swsetup_r+0x16>
 801467c:	4628      	mov	r0, r5
 801467e:	f000 f97d 	bl	801497c <__sinit>
 8014682:	4b2e      	ldr	r3, [pc, #184]	; (801473c <__swsetup_r+0xd0>)
 8014684:	429c      	cmp	r4, r3
 8014686:	d10f      	bne.n	80146a8 <__swsetup_r+0x3c>
 8014688:	686c      	ldr	r4, [r5, #4]
 801468a:	89a3      	ldrh	r3, [r4, #12]
 801468c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014690:	0719      	lsls	r1, r3, #28
 8014692:	d42c      	bmi.n	80146ee <__swsetup_r+0x82>
 8014694:	06dd      	lsls	r5, r3, #27
 8014696:	d411      	bmi.n	80146bc <__swsetup_r+0x50>
 8014698:	2309      	movs	r3, #9
 801469a:	6033      	str	r3, [r6, #0]
 801469c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80146a0:	81a3      	strh	r3, [r4, #12]
 80146a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146a6:	e03e      	b.n	8014726 <__swsetup_r+0xba>
 80146a8:	4b25      	ldr	r3, [pc, #148]	; (8014740 <__swsetup_r+0xd4>)
 80146aa:	429c      	cmp	r4, r3
 80146ac:	d101      	bne.n	80146b2 <__swsetup_r+0x46>
 80146ae:	68ac      	ldr	r4, [r5, #8]
 80146b0:	e7eb      	b.n	801468a <__swsetup_r+0x1e>
 80146b2:	4b24      	ldr	r3, [pc, #144]	; (8014744 <__swsetup_r+0xd8>)
 80146b4:	429c      	cmp	r4, r3
 80146b6:	bf08      	it	eq
 80146b8:	68ec      	ldreq	r4, [r5, #12]
 80146ba:	e7e6      	b.n	801468a <__swsetup_r+0x1e>
 80146bc:	0758      	lsls	r0, r3, #29
 80146be:	d512      	bpl.n	80146e6 <__swsetup_r+0x7a>
 80146c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146c2:	b141      	cbz	r1, 80146d6 <__swsetup_r+0x6a>
 80146c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146c8:	4299      	cmp	r1, r3
 80146ca:	d002      	beq.n	80146d2 <__swsetup_r+0x66>
 80146cc:	4630      	mov	r0, r6
 80146ce:	f7ff fdfd 	bl	80142cc <_free_r>
 80146d2:	2300      	movs	r3, #0
 80146d4:	6363      	str	r3, [r4, #52]	; 0x34
 80146d6:	89a3      	ldrh	r3, [r4, #12]
 80146d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80146dc:	81a3      	strh	r3, [r4, #12]
 80146de:	2300      	movs	r3, #0
 80146e0:	6063      	str	r3, [r4, #4]
 80146e2:	6923      	ldr	r3, [r4, #16]
 80146e4:	6023      	str	r3, [r4, #0]
 80146e6:	89a3      	ldrh	r3, [r4, #12]
 80146e8:	f043 0308 	orr.w	r3, r3, #8
 80146ec:	81a3      	strh	r3, [r4, #12]
 80146ee:	6923      	ldr	r3, [r4, #16]
 80146f0:	b94b      	cbnz	r3, 8014706 <__swsetup_r+0x9a>
 80146f2:	89a3      	ldrh	r3, [r4, #12]
 80146f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80146f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146fc:	d003      	beq.n	8014706 <__swsetup_r+0x9a>
 80146fe:	4621      	mov	r1, r4
 8014700:	4630      	mov	r0, r6
 8014702:	f000 fa01 	bl	8014b08 <__smakebuf_r>
 8014706:	89a0      	ldrh	r0, [r4, #12]
 8014708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801470c:	f010 0301 	ands.w	r3, r0, #1
 8014710:	d00a      	beq.n	8014728 <__swsetup_r+0xbc>
 8014712:	2300      	movs	r3, #0
 8014714:	60a3      	str	r3, [r4, #8]
 8014716:	6963      	ldr	r3, [r4, #20]
 8014718:	425b      	negs	r3, r3
 801471a:	61a3      	str	r3, [r4, #24]
 801471c:	6923      	ldr	r3, [r4, #16]
 801471e:	b943      	cbnz	r3, 8014732 <__swsetup_r+0xc6>
 8014720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014724:	d1ba      	bne.n	801469c <__swsetup_r+0x30>
 8014726:	bd70      	pop	{r4, r5, r6, pc}
 8014728:	0781      	lsls	r1, r0, #30
 801472a:	bf58      	it	pl
 801472c:	6963      	ldrpl	r3, [r4, #20]
 801472e:	60a3      	str	r3, [r4, #8]
 8014730:	e7f4      	b.n	801471c <__swsetup_r+0xb0>
 8014732:	2000      	movs	r0, #0
 8014734:	e7f7      	b.n	8014726 <__swsetup_r+0xba>
 8014736:	bf00      	nop
 8014738:	2400009c 	.word	0x2400009c
 801473c:	08015628 	.word	0x08015628
 8014740:	08015648 	.word	0x08015648
 8014744:	08015608 	.word	0x08015608

08014748 <__sflush_r>:
 8014748:	898a      	ldrh	r2, [r1, #12]
 801474a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801474e:	4605      	mov	r5, r0
 8014750:	0710      	lsls	r0, r2, #28
 8014752:	460c      	mov	r4, r1
 8014754:	d458      	bmi.n	8014808 <__sflush_r+0xc0>
 8014756:	684b      	ldr	r3, [r1, #4]
 8014758:	2b00      	cmp	r3, #0
 801475a:	dc05      	bgt.n	8014768 <__sflush_r+0x20>
 801475c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801475e:	2b00      	cmp	r3, #0
 8014760:	dc02      	bgt.n	8014768 <__sflush_r+0x20>
 8014762:	2000      	movs	r0, #0
 8014764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801476a:	2e00      	cmp	r6, #0
 801476c:	d0f9      	beq.n	8014762 <__sflush_r+0x1a>
 801476e:	2300      	movs	r3, #0
 8014770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014774:	682f      	ldr	r7, [r5, #0]
 8014776:	602b      	str	r3, [r5, #0]
 8014778:	d032      	beq.n	80147e0 <__sflush_r+0x98>
 801477a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801477c:	89a3      	ldrh	r3, [r4, #12]
 801477e:	075a      	lsls	r2, r3, #29
 8014780:	d505      	bpl.n	801478e <__sflush_r+0x46>
 8014782:	6863      	ldr	r3, [r4, #4]
 8014784:	1ac0      	subs	r0, r0, r3
 8014786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014788:	b10b      	cbz	r3, 801478e <__sflush_r+0x46>
 801478a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801478c:	1ac0      	subs	r0, r0, r3
 801478e:	2300      	movs	r3, #0
 8014790:	4602      	mov	r2, r0
 8014792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014794:	6a21      	ldr	r1, [r4, #32]
 8014796:	4628      	mov	r0, r5
 8014798:	47b0      	blx	r6
 801479a:	1c43      	adds	r3, r0, #1
 801479c:	89a3      	ldrh	r3, [r4, #12]
 801479e:	d106      	bne.n	80147ae <__sflush_r+0x66>
 80147a0:	6829      	ldr	r1, [r5, #0]
 80147a2:	291d      	cmp	r1, #29
 80147a4:	d82c      	bhi.n	8014800 <__sflush_r+0xb8>
 80147a6:	4a2a      	ldr	r2, [pc, #168]	; (8014850 <__sflush_r+0x108>)
 80147a8:	40ca      	lsrs	r2, r1
 80147aa:	07d6      	lsls	r6, r2, #31
 80147ac:	d528      	bpl.n	8014800 <__sflush_r+0xb8>
 80147ae:	2200      	movs	r2, #0
 80147b0:	6062      	str	r2, [r4, #4]
 80147b2:	04d9      	lsls	r1, r3, #19
 80147b4:	6922      	ldr	r2, [r4, #16]
 80147b6:	6022      	str	r2, [r4, #0]
 80147b8:	d504      	bpl.n	80147c4 <__sflush_r+0x7c>
 80147ba:	1c42      	adds	r2, r0, #1
 80147bc:	d101      	bne.n	80147c2 <__sflush_r+0x7a>
 80147be:	682b      	ldr	r3, [r5, #0]
 80147c0:	b903      	cbnz	r3, 80147c4 <__sflush_r+0x7c>
 80147c2:	6560      	str	r0, [r4, #84]	; 0x54
 80147c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147c6:	602f      	str	r7, [r5, #0]
 80147c8:	2900      	cmp	r1, #0
 80147ca:	d0ca      	beq.n	8014762 <__sflush_r+0x1a>
 80147cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147d0:	4299      	cmp	r1, r3
 80147d2:	d002      	beq.n	80147da <__sflush_r+0x92>
 80147d4:	4628      	mov	r0, r5
 80147d6:	f7ff fd79 	bl	80142cc <_free_r>
 80147da:	2000      	movs	r0, #0
 80147dc:	6360      	str	r0, [r4, #52]	; 0x34
 80147de:	e7c1      	b.n	8014764 <__sflush_r+0x1c>
 80147e0:	6a21      	ldr	r1, [r4, #32]
 80147e2:	2301      	movs	r3, #1
 80147e4:	4628      	mov	r0, r5
 80147e6:	47b0      	blx	r6
 80147e8:	1c41      	adds	r1, r0, #1
 80147ea:	d1c7      	bne.n	801477c <__sflush_r+0x34>
 80147ec:	682b      	ldr	r3, [r5, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d0c4      	beq.n	801477c <__sflush_r+0x34>
 80147f2:	2b1d      	cmp	r3, #29
 80147f4:	d001      	beq.n	80147fa <__sflush_r+0xb2>
 80147f6:	2b16      	cmp	r3, #22
 80147f8:	d101      	bne.n	80147fe <__sflush_r+0xb6>
 80147fa:	602f      	str	r7, [r5, #0]
 80147fc:	e7b1      	b.n	8014762 <__sflush_r+0x1a>
 80147fe:	89a3      	ldrh	r3, [r4, #12]
 8014800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014804:	81a3      	strh	r3, [r4, #12]
 8014806:	e7ad      	b.n	8014764 <__sflush_r+0x1c>
 8014808:	690f      	ldr	r7, [r1, #16]
 801480a:	2f00      	cmp	r7, #0
 801480c:	d0a9      	beq.n	8014762 <__sflush_r+0x1a>
 801480e:	0793      	lsls	r3, r2, #30
 8014810:	680e      	ldr	r6, [r1, #0]
 8014812:	bf08      	it	eq
 8014814:	694b      	ldreq	r3, [r1, #20]
 8014816:	600f      	str	r7, [r1, #0]
 8014818:	bf18      	it	ne
 801481a:	2300      	movne	r3, #0
 801481c:	eba6 0807 	sub.w	r8, r6, r7
 8014820:	608b      	str	r3, [r1, #8]
 8014822:	f1b8 0f00 	cmp.w	r8, #0
 8014826:	dd9c      	ble.n	8014762 <__sflush_r+0x1a>
 8014828:	6a21      	ldr	r1, [r4, #32]
 801482a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801482c:	4643      	mov	r3, r8
 801482e:	463a      	mov	r2, r7
 8014830:	4628      	mov	r0, r5
 8014832:	47b0      	blx	r6
 8014834:	2800      	cmp	r0, #0
 8014836:	dc06      	bgt.n	8014846 <__sflush_r+0xfe>
 8014838:	89a3      	ldrh	r3, [r4, #12]
 801483a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801483e:	81a3      	strh	r3, [r4, #12]
 8014840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014844:	e78e      	b.n	8014764 <__sflush_r+0x1c>
 8014846:	4407      	add	r7, r0
 8014848:	eba8 0800 	sub.w	r8, r8, r0
 801484c:	e7e9      	b.n	8014822 <__sflush_r+0xda>
 801484e:	bf00      	nop
 8014850:	20400001 	.word	0x20400001

08014854 <_fflush_r>:
 8014854:	b538      	push	{r3, r4, r5, lr}
 8014856:	690b      	ldr	r3, [r1, #16]
 8014858:	4605      	mov	r5, r0
 801485a:	460c      	mov	r4, r1
 801485c:	b913      	cbnz	r3, 8014864 <_fflush_r+0x10>
 801485e:	2500      	movs	r5, #0
 8014860:	4628      	mov	r0, r5
 8014862:	bd38      	pop	{r3, r4, r5, pc}
 8014864:	b118      	cbz	r0, 801486e <_fflush_r+0x1a>
 8014866:	6983      	ldr	r3, [r0, #24]
 8014868:	b90b      	cbnz	r3, 801486e <_fflush_r+0x1a>
 801486a:	f000 f887 	bl	801497c <__sinit>
 801486e:	4b14      	ldr	r3, [pc, #80]	; (80148c0 <_fflush_r+0x6c>)
 8014870:	429c      	cmp	r4, r3
 8014872:	d11b      	bne.n	80148ac <_fflush_r+0x58>
 8014874:	686c      	ldr	r4, [r5, #4]
 8014876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d0ef      	beq.n	801485e <_fflush_r+0xa>
 801487e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014880:	07d0      	lsls	r0, r2, #31
 8014882:	d404      	bmi.n	801488e <_fflush_r+0x3a>
 8014884:	0599      	lsls	r1, r3, #22
 8014886:	d402      	bmi.n	801488e <_fflush_r+0x3a>
 8014888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801488a:	f000 f915 	bl	8014ab8 <__retarget_lock_acquire_recursive>
 801488e:	4628      	mov	r0, r5
 8014890:	4621      	mov	r1, r4
 8014892:	f7ff ff59 	bl	8014748 <__sflush_r>
 8014896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014898:	07da      	lsls	r2, r3, #31
 801489a:	4605      	mov	r5, r0
 801489c:	d4e0      	bmi.n	8014860 <_fflush_r+0xc>
 801489e:	89a3      	ldrh	r3, [r4, #12]
 80148a0:	059b      	lsls	r3, r3, #22
 80148a2:	d4dd      	bmi.n	8014860 <_fflush_r+0xc>
 80148a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148a6:	f000 f908 	bl	8014aba <__retarget_lock_release_recursive>
 80148aa:	e7d9      	b.n	8014860 <_fflush_r+0xc>
 80148ac:	4b05      	ldr	r3, [pc, #20]	; (80148c4 <_fflush_r+0x70>)
 80148ae:	429c      	cmp	r4, r3
 80148b0:	d101      	bne.n	80148b6 <_fflush_r+0x62>
 80148b2:	68ac      	ldr	r4, [r5, #8]
 80148b4:	e7df      	b.n	8014876 <_fflush_r+0x22>
 80148b6:	4b04      	ldr	r3, [pc, #16]	; (80148c8 <_fflush_r+0x74>)
 80148b8:	429c      	cmp	r4, r3
 80148ba:	bf08      	it	eq
 80148bc:	68ec      	ldreq	r4, [r5, #12]
 80148be:	e7da      	b.n	8014876 <_fflush_r+0x22>
 80148c0:	08015628 	.word	0x08015628
 80148c4:	08015648 	.word	0x08015648
 80148c8:	08015608 	.word	0x08015608

080148cc <std>:
 80148cc:	2300      	movs	r3, #0
 80148ce:	b510      	push	{r4, lr}
 80148d0:	4604      	mov	r4, r0
 80148d2:	e9c0 3300 	strd	r3, r3, [r0]
 80148d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148da:	6083      	str	r3, [r0, #8]
 80148dc:	8181      	strh	r1, [r0, #12]
 80148de:	6643      	str	r3, [r0, #100]	; 0x64
 80148e0:	81c2      	strh	r2, [r0, #14]
 80148e2:	6183      	str	r3, [r0, #24]
 80148e4:	4619      	mov	r1, r3
 80148e6:	2208      	movs	r2, #8
 80148e8:	305c      	adds	r0, #92	; 0x5c
 80148ea:	f7ff fce7 	bl	80142bc <memset>
 80148ee:	4b05      	ldr	r3, [pc, #20]	; (8014904 <std+0x38>)
 80148f0:	6263      	str	r3, [r4, #36]	; 0x24
 80148f2:	4b05      	ldr	r3, [pc, #20]	; (8014908 <std+0x3c>)
 80148f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80148f6:	4b05      	ldr	r3, [pc, #20]	; (801490c <std+0x40>)
 80148f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148fa:	4b05      	ldr	r3, [pc, #20]	; (8014910 <std+0x44>)
 80148fc:	6224      	str	r4, [r4, #32]
 80148fe:	6323      	str	r3, [r4, #48]	; 0x30
 8014900:	bd10      	pop	{r4, pc}
 8014902:	bf00      	nop
 8014904:	0801517d 	.word	0x0801517d
 8014908:	0801519f 	.word	0x0801519f
 801490c:	080151d7 	.word	0x080151d7
 8014910:	080151fb 	.word	0x080151fb

08014914 <_cleanup_r>:
 8014914:	4901      	ldr	r1, [pc, #4]	; (801491c <_cleanup_r+0x8>)
 8014916:	f000 b8af 	b.w	8014a78 <_fwalk_reent>
 801491a:	bf00      	nop
 801491c:	08014855 	.word	0x08014855

08014920 <__sfmoreglue>:
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	2268      	movs	r2, #104	; 0x68
 8014924:	1e4d      	subs	r5, r1, #1
 8014926:	4355      	muls	r5, r2
 8014928:	460e      	mov	r6, r1
 801492a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801492e:	f7ff fd39 	bl	80143a4 <_malloc_r>
 8014932:	4604      	mov	r4, r0
 8014934:	b140      	cbz	r0, 8014948 <__sfmoreglue+0x28>
 8014936:	2100      	movs	r1, #0
 8014938:	e9c0 1600 	strd	r1, r6, [r0]
 801493c:	300c      	adds	r0, #12
 801493e:	60a0      	str	r0, [r4, #8]
 8014940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014944:	f7ff fcba 	bl	80142bc <memset>
 8014948:	4620      	mov	r0, r4
 801494a:	bd70      	pop	{r4, r5, r6, pc}

0801494c <__sfp_lock_acquire>:
 801494c:	4801      	ldr	r0, [pc, #4]	; (8014954 <__sfp_lock_acquire+0x8>)
 801494e:	f000 b8b3 	b.w	8014ab8 <__retarget_lock_acquire_recursive>
 8014952:	bf00      	nop
 8014954:	240050d5 	.word	0x240050d5

08014958 <__sfp_lock_release>:
 8014958:	4801      	ldr	r0, [pc, #4]	; (8014960 <__sfp_lock_release+0x8>)
 801495a:	f000 b8ae 	b.w	8014aba <__retarget_lock_release_recursive>
 801495e:	bf00      	nop
 8014960:	240050d5 	.word	0x240050d5

08014964 <__sinit_lock_acquire>:
 8014964:	4801      	ldr	r0, [pc, #4]	; (801496c <__sinit_lock_acquire+0x8>)
 8014966:	f000 b8a7 	b.w	8014ab8 <__retarget_lock_acquire_recursive>
 801496a:	bf00      	nop
 801496c:	240050d6 	.word	0x240050d6

08014970 <__sinit_lock_release>:
 8014970:	4801      	ldr	r0, [pc, #4]	; (8014978 <__sinit_lock_release+0x8>)
 8014972:	f000 b8a2 	b.w	8014aba <__retarget_lock_release_recursive>
 8014976:	bf00      	nop
 8014978:	240050d6 	.word	0x240050d6

0801497c <__sinit>:
 801497c:	b510      	push	{r4, lr}
 801497e:	4604      	mov	r4, r0
 8014980:	f7ff fff0 	bl	8014964 <__sinit_lock_acquire>
 8014984:	69a3      	ldr	r3, [r4, #24]
 8014986:	b11b      	cbz	r3, 8014990 <__sinit+0x14>
 8014988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801498c:	f7ff bff0 	b.w	8014970 <__sinit_lock_release>
 8014990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014994:	6523      	str	r3, [r4, #80]	; 0x50
 8014996:	4b13      	ldr	r3, [pc, #76]	; (80149e4 <__sinit+0x68>)
 8014998:	4a13      	ldr	r2, [pc, #76]	; (80149e8 <__sinit+0x6c>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	62a2      	str	r2, [r4, #40]	; 0x28
 801499e:	42a3      	cmp	r3, r4
 80149a0:	bf04      	itt	eq
 80149a2:	2301      	moveq	r3, #1
 80149a4:	61a3      	streq	r3, [r4, #24]
 80149a6:	4620      	mov	r0, r4
 80149a8:	f000 f820 	bl	80149ec <__sfp>
 80149ac:	6060      	str	r0, [r4, #4]
 80149ae:	4620      	mov	r0, r4
 80149b0:	f000 f81c 	bl	80149ec <__sfp>
 80149b4:	60a0      	str	r0, [r4, #8]
 80149b6:	4620      	mov	r0, r4
 80149b8:	f000 f818 	bl	80149ec <__sfp>
 80149bc:	2200      	movs	r2, #0
 80149be:	60e0      	str	r0, [r4, #12]
 80149c0:	2104      	movs	r1, #4
 80149c2:	6860      	ldr	r0, [r4, #4]
 80149c4:	f7ff ff82 	bl	80148cc <std>
 80149c8:	68a0      	ldr	r0, [r4, #8]
 80149ca:	2201      	movs	r2, #1
 80149cc:	2109      	movs	r1, #9
 80149ce:	f7ff ff7d 	bl	80148cc <std>
 80149d2:	68e0      	ldr	r0, [r4, #12]
 80149d4:	2202      	movs	r2, #2
 80149d6:	2112      	movs	r1, #18
 80149d8:	f7ff ff78 	bl	80148cc <std>
 80149dc:	2301      	movs	r3, #1
 80149de:	61a3      	str	r3, [r4, #24]
 80149e0:	e7d2      	b.n	8014988 <__sinit+0xc>
 80149e2:	bf00      	nop
 80149e4:	08015604 	.word	0x08015604
 80149e8:	08014915 	.word	0x08014915

080149ec <__sfp>:
 80149ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ee:	4607      	mov	r7, r0
 80149f0:	f7ff ffac 	bl	801494c <__sfp_lock_acquire>
 80149f4:	4b1e      	ldr	r3, [pc, #120]	; (8014a70 <__sfp+0x84>)
 80149f6:	681e      	ldr	r6, [r3, #0]
 80149f8:	69b3      	ldr	r3, [r6, #24]
 80149fa:	b913      	cbnz	r3, 8014a02 <__sfp+0x16>
 80149fc:	4630      	mov	r0, r6
 80149fe:	f7ff ffbd 	bl	801497c <__sinit>
 8014a02:	3648      	adds	r6, #72	; 0x48
 8014a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a08:	3b01      	subs	r3, #1
 8014a0a:	d503      	bpl.n	8014a14 <__sfp+0x28>
 8014a0c:	6833      	ldr	r3, [r6, #0]
 8014a0e:	b30b      	cbz	r3, 8014a54 <__sfp+0x68>
 8014a10:	6836      	ldr	r6, [r6, #0]
 8014a12:	e7f7      	b.n	8014a04 <__sfp+0x18>
 8014a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a18:	b9d5      	cbnz	r5, 8014a50 <__sfp+0x64>
 8014a1a:	4b16      	ldr	r3, [pc, #88]	; (8014a74 <__sfp+0x88>)
 8014a1c:	60e3      	str	r3, [r4, #12]
 8014a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a22:	6665      	str	r5, [r4, #100]	; 0x64
 8014a24:	f000 f847 	bl	8014ab6 <__retarget_lock_init_recursive>
 8014a28:	f7ff ff96 	bl	8014958 <__sfp_lock_release>
 8014a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a34:	6025      	str	r5, [r4, #0]
 8014a36:	61a5      	str	r5, [r4, #24]
 8014a38:	2208      	movs	r2, #8
 8014a3a:	4629      	mov	r1, r5
 8014a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a40:	f7ff fc3c 	bl	80142bc <memset>
 8014a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a50:	3468      	adds	r4, #104	; 0x68
 8014a52:	e7d9      	b.n	8014a08 <__sfp+0x1c>
 8014a54:	2104      	movs	r1, #4
 8014a56:	4638      	mov	r0, r7
 8014a58:	f7ff ff62 	bl	8014920 <__sfmoreglue>
 8014a5c:	4604      	mov	r4, r0
 8014a5e:	6030      	str	r0, [r6, #0]
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d1d5      	bne.n	8014a10 <__sfp+0x24>
 8014a64:	f7ff ff78 	bl	8014958 <__sfp_lock_release>
 8014a68:	230c      	movs	r3, #12
 8014a6a:	603b      	str	r3, [r7, #0]
 8014a6c:	e7ee      	b.n	8014a4c <__sfp+0x60>
 8014a6e:	bf00      	nop
 8014a70:	08015604 	.word	0x08015604
 8014a74:	ffff0001 	.word	0xffff0001

08014a78 <_fwalk_reent>:
 8014a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	4688      	mov	r8, r1
 8014a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a84:	2700      	movs	r7, #0
 8014a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8014a8e:	d505      	bpl.n	8014a9c <_fwalk_reent+0x24>
 8014a90:	6824      	ldr	r4, [r4, #0]
 8014a92:	2c00      	cmp	r4, #0
 8014a94:	d1f7      	bne.n	8014a86 <_fwalk_reent+0xe>
 8014a96:	4638      	mov	r0, r7
 8014a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a9c:	89ab      	ldrh	r3, [r5, #12]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d907      	bls.n	8014ab2 <_fwalk_reent+0x3a>
 8014aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	d003      	beq.n	8014ab2 <_fwalk_reent+0x3a>
 8014aaa:	4629      	mov	r1, r5
 8014aac:	4630      	mov	r0, r6
 8014aae:	47c0      	blx	r8
 8014ab0:	4307      	orrs	r7, r0
 8014ab2:	3568      	adds	r5, #104	; 0x68
 8014ab4:	e7e9      	b.n	8014a8a <_fwalk_reent+0x12>

08014ab6 <__retarget_lock_init_recursive>:
 8014ab6:	4770      	bx	lr

08014ab8 <__retarget_lock_acquire_recursive>:
 8014ab8:	4770      	bx	lr

08014aba <__retarget_lock_release_recursive>:
 8014aba:	4770      	bx	lr

08014abc <__swhatbuf_r>:
 8014abc:	b570      	push	{r4, r5, r6, lr}
 8014abe:	460e      	mov	r6, r1
 8014ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ac4:	2900      	cmp	r1, #0
 8014ac6:	b096      	sub	sp, #88	; 0x58
 8014ac8:	4614      	mov	r4, r2
 8014aca:	461d      	mov	r5, r3
 8014acc:	da08      	bge.n	8014ae0 <__swhatbuf_r+0x24>
 8014ace:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	602a      	str	r2, [r5, #0]
 8014ad6:	061a      	lsls	r2, r3, #24
 8014ad8:	d410      	bmi.n	8014afc <__swhatbuf_r+0x40>
 8014ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ade:	e00e      	b.n	8014afe <__swhatbuf_r+0x42>
 8014ae0:	466a      	mov	r2, sp
 8014ae2:	f000 fbb1 	bl	8015248 <_fstat_r>
 8014ae6:	2800      	cmp	r0, #0
 8014ae8:	dbf1      	blt.n	8014ace <__swhatbuf_r+0x12>
 8014aea:	9a01      	ldr	r2, [sp, #4]
 8014aec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014af0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014af4:	425a      	negs	r2, r3
 8014af6:	415a      	adcs	r2, r3
 8014af8:	602a      	str	r2, [r5, #0]
 8014afa:	e7ee      	b.n	8014ada <__swhatbuf_r+0x1e>
 8014afc:	2340      	movs	r3, #64	; 0x40
 8014afe:	2000      	movs	r0, #0
 8014b00:	6023      	str	r3, [r4, #0]
 8014b02:	b016      	add	sp, #88	; 0x58
 8014b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08014b08 <__smakebuf_r>:
 8014b08:	898b      	ldrh	r3, [r1, #12]
 8014b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b0c:	079d      	lsls	r5, r3, #30
 8014b0e:	4606      	mov	r6, r0
 8014b10:	460c      	mov	r4, r1
 8014b12:	d507      	bpl.n	8014b24 <__smakebuf_r+0x1c>
 8014b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014b18:	6023      	str	r3, [r4, #0]
 8014b1a:	6123      	str	r3, [r4, #16]
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	6163      	str	r3, [r4, #20]
 8014b20:	b002      	add	sp, #8
 8014b22:	bd70      	pop	{r4, r5, r6, pc}
 8014b24:	ab01      	add	r3, sp, #4
 8014b26:	466a      	mov	r2, sp
 8014b28:	f7ff ffc8 	bl	8014abc <__swhatbuf_r>
 8014b2c:	9900      	ldr	r1, [sp, #0]
 8014b2e:	4605      	mov	r5, r0
 8014b30:	4630      	mov	r0, r6
 8014b32:	f7ff fc37 	bl	80143a4 <_malloc_r>
 8014b36:	b948      	cbnz	r0, 8014b4c <__smakebuf_r+0x44>
 8014b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b3c:	059a      	lsls	r2, r3, #22
 8014b3e:	d4ef      	bmi.n	8014b20 <__smakebuf_r+0x18>
 8014b40:	f023 0303 	bic.w	r3, r3, #3
 8014b44:	f043 0302 	orr.w	r3, r3, #2
 8014b48:	81a3      	strh	r3, [r4, #12]
 8014b4a:	e7e3      	b.n	8014b14 <__smakebuf_r+0xc>
 8014b4c:	4b0d      	ldr	r3, [pc, #52]	; (8014b84 <__smakebuf_r+0x7c>)
 8014b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014b50:	89a3      	ldrh	r3, [r4, #12]
 8014b52:	6020      	str	r0, [r4, #0]
 8014b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b58:	81a3      	strh	r3, [r4, #12]
 8014b5a:	9b00      	ldr	r3, [sp, #0]
 8014b5c:	6163      	str	r3, [r4, #20]
 8014b5e:	9b01      	ldr	r3, [sp, #4]
 8014b60:	6120      	str	r0, [r4, #16]
 8014b62:	b15b      	cbz	r3, 8014b7c <__smakebuf_r+0x74>
 8014b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b68:	4630      	mov	r0, r6
 8014b6a:	f000 fb7f 	bl	801526c <_isatty_r>
 8014b6e:	b128      	cbz	r0, 8014b7c <__smakebuf_r+0x74>
 8014b70:	89a3      	ldrh	r3, [r4, #12]
 8014b72:	f023 0303 	bic.w	r3, r3, #3
 8014b76:	f043 0301 	orr.w	r3, r3, #1
 8014b7a:	81a3      	strh	r3, [r4, #12]
 8014b7c:	89a0      	ldrh	r0, [r4, #12]
 8014b7e:	4305      	orrs	r5, r0
 8014b80:	81a5      	strh	r5, [r4, #12]
 8014b82:	e7cd      	b.n	8014b20 <__smakebuf_r+0x18>
 8014b84:	08014915 	.word	0x08014915

08014b88 <__malloc_lock>:
 8014b88:	4801      	ldr	r0, [pc, #4]	; (8014b90 <__malloc_lock+0x8>)
 8014b8a:	f7ff bf95 	b.w	8014ab8 <__retarget_lock_acquire_recursive>
 8014b8e:	bf00      	nop
 8014b90:	240050d4 	.word	0x240050d4

08014b94 <__malloc_unlock>:
 8014b94:	4801      	ldr	r0, [pc, #4]	; (8014b9c <__malloc_unlock+0x8>)
 8014b96:	f7ff bf90 	b.w	8014aba <__retarget_lock_release_recursive>
 8014b9a:	bf00      	nop
 8014b9c:	240050d4 	.word	0x240050d4

08014ba0 <__sfputc_r>:
 8014ba0:	6893      	ldr	r3, [r2, #8]
 8014ba2:	3b01      	subs	r3, #1
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	b410      	push	{r4}
 8014ba8:	6093      	str	r3, [r2, #8]
 8014baa:	da08      	bge.n	8014bbe <__sfputc_r+0x1e>
 8014bac:	6994      	ldr	r4, [r2, #24]
 8014bae:	42a3      	cmp	r3, r4
 8014bb0:	db01      	blt.n	8014bb6 <__sfputc_r+0x16>
 8014bb2:	290a      	cmp	r1, #10
 8014bb4:	d103      	bne.n	8014bbe <__sfputc_r+0x1e>
 8014bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bba:	f7ff bd05 	b.w	80145c8 <__swbuf_r>
 8014bbe:	6813      	ldr	r3, [r2, #0]
 8014bc0:	1c58      	adds	r0, r3, #1
 8014bc2:	6010      	str	r0, [r2, #0]
 8014bc4:	7019      	strb	r1, [r3, #0]
 8014bc6:	4608      	mov	r0, r1
 8014bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bcc:	4770      	bx	lr

08014bce <__sfputs_r>:
 8014bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bd0:	4606      	mov	r6, r0
 8014bd2:	460f      	mov	r7, r1
 8014bd4:	4614      	mov	r4, r2
 8014bd6:	18d5      	adds	r5, r2, r3
 8014bd8:	42ac      	cmp	r4, r5
 8014bda:	d101      	bne.n	8014be0 <__sfputs_r+0x12>
 8014bdc:	2000      	movs	r0, #0
 8014bde:	e007      	b.n	8014bf0 <__sfputs_r+0x22>
 8014be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014be4:	463a      	mov	r2, r7
 8014be6:	4630      	mov	r0, r6
 8014be8:	f7ff ffda 	bl	8014ba0 <__sfputc_r>
 8014bec:	1c43      	adds	r3, r0, #1
 8014bee:	d1f3      	bne.n	8014bd8 <__sfputs_r+0xa>
 8014bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014bf4 <_vfiprintf_r>:
 8014bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bf8:	460d      	mov	r5, r1
 8014bfa:	b09d      	sub	sp, #116	; 0x74
 8014bfc:	4614      	mov	r4, r2
 8014bfe:	4698      	mov	r8, r3
 8014c00:	4606      	mov	r6, r0
 8014c02:	b118      	cbz	r0, 8014c0c <_vfiprintf_r+0x18>
 8014c04:	6983      	ldr	r3, [r0, #24]
 8014c06:	b90b      	cbnz	r3, 8014c0c <_vfiprintf_r+0x18>
 8014c08:	f7ff feb8 	bl	801497c <__sinit>
 8014c0c:	4b89      	ldr	r3, [pc, #548]	; (8014e34 <_vfiprintf_r+0x240>)
 8014c0e:	429d      	cmp	r5, r3
 8014c10:	d11b      	bne.n	8014c4a <_vfiprintf_r+0x56>
 8014c12:	6875      	ldr	r5, [r6, #4]
 8014c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c16:	07d9      	lsls	r1, r3, #31
 8014c18:	d405      	bmi.n	8014c26 <_vfiprintf_r+0x32>
 8014c1a:	89ab      	ldrh	r3, [r5, #12]
 8014c1c:	059a      	lsls	r2, r3, #22
 8014c1e:	d402      	bmi.n	8014c26 <_vfiprintf_r+0x32>
 8014c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c22:	f7ff ff49 	bl	8014ab8 <__retarget_lock_acquire_recursive>
 8014c26:	89ab      	ldrh	r3, [r5, #12]
 8014c28:	071b      	lsls	r3, r3, #28
 8014c2a:	d501      	bpl.n	8014c30 <_vfiprintf_r+0x3c>
 8014c2c:	692b      	ldr	r3, [r5, #16]
 8014c2e:	b9eb      	cbnz	r3, 8014c6c <_vfiprintf_r+0x78>
 8014c30:	4629      	mov	r1, r5
 8014c32:	4630      	mov	r0, r6
 8014c34:	f7ff fd1a 	bl	801466c <__swsetup_r>
 8014c38:	b1c0      	cbz	r0, 8014c6c <_vfiprintf_r+0x78>
 8014c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c3c:	07dc      	lsls	r4, r3, #31
 8014c3e:	d50e      	bpl.n	8014c5e <_vfiprintf_r+0x6a>
 8014c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c44:	b01d      	add	sp, #116	; 0x74
 8014c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4a:	4b7b      	ldr	r3, [pc, #492]	; (8014e38 <_vfiprintf_r+0x244>)
 8014c4c:	429d      	cmp	r5, r3
 8014c4e:	d101      	bne.n	8014c54 <_vfiprintf_r+0x60>
 8014c50:	68b5      	ldr	r5, [r6, #8]
 8014c52:	e7df      	b.n	8014c14 <_vfiprintf_r+0x20>
 8014c54:	4b79      	ldr	r3, [pc, #484]	; (8014e3c <_vfiprintf_r+0x248>)
 8014c56:	429d      	cmp	r5, r3
 8014c58:	bf08      	it	eq
 8014c5a:	68f5      	ldreq	r5, [r6, #12]
 8014c5c:	e7da      	b.n	8014c14 <_vfiprintf_r+0x20>
 8014c5e:	89ab      	ldrh	r3, [r5, #12]
 8014c60:	0598      	lsls	r0, r3, #22
 8014c62:	d4ed      	bmi.n	8014c40 <_vfiprintf_r+0x4c>
 8014c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c66:	f7ff ff28 	bl	8014aba <__retarget_lock_release_recursive>
 8014c6a:	e7e9      	b.n	8014c40 <_vfiprintf_r+0x4c>
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014c70:	2320      	movs	r3, #32
 8014c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c7a:	2330      	movs	r3, #48	; 0x30
 8014c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014e40 <_vfiprintf_r+0x24c>
 8014c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c84:	f04f 0901 	mov.w	r9, #1
 8014c88:	4623      	mov	r3, r4
 8014c8a:	469a      	mov	sl, r3
 8014c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c90:	b10a      	cbz	r2, 8014c96 <_vfiprintf_r+0xa2>
 8014c92:	2a25      	cmp	r2, #37	; 0x25
 8014c94:	d1f9      	bne.n	8014c8a <_vfiprintf_r+0x96>
 8014c96:	ebba 0b04 	subs.w	fp, sl, r4
 8014c9a:	d00b      	beq.n	8014cb4 <_vfiprintf_r+0xc0>
 8014c9c:	465b      	mov	r3, fp
 8014c9e:	4622      	mov	r2, r4
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	4630      	mov	r0, r6
 8014ca4:	f7ff ff93 	bl	8014bce <__sfputs_r>
 8014ca8:	3001      	adds	r0, #1
 8014caa:	f000 80aa 	beq.w	8014e02 <_vfiprintf_r+0x20e>
 8014cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cb0:	445a      	add	r2, fp
 8014cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8014cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	f000 80a2 	beq.w	8014e02 <_vfiprintf_r+0x20e>
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014cc8:	f10a 0a01 	add.w	sl, sl, #1
 8014ccc:	9304      	str	r3, [sp, #16]
 8014cce:	9307      	str	r3, [sp, #28]
 8014cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8014cd6:	4654      	mov	r4, sl
 8014cd8:	2205      	movs	r2, #5
 8014cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cde:	4858      	ldr	r0, [pc, #352]	; (8014e40 <_vfiprintf_r+0x24c>)
 8014ce0:	f7eb fafe 	bl	80002e0 <memchr>
 8014ce4:	9a04      	ldr	r2, [sp, #16]
 8014ce6:	b9d8      	cbnz	r0, 8014d20 <_vfiprintf_r+0x12c>
 8014ce8:	06d1      	lsls	r1, r2, #27
 8014cea:	bf44      	itt	mi
 8014cec:	2320      	movmi	r3, #32
 8014cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cf2:	0713      	lsls	r3, r2, #28
 8014cf4:	bf44      	itt	mi
 8014cf6:	232b      	movmi	r3, #43	; 0x2b
 8014cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8014d00:	2b2a      	cmp	r3, #42	; 0x2a
 8014d02:	d015      	beq.n	8014d30 <_vfiprintf_r+0x13c>
 8014d04:	9a07      	ldr	r2, [sp, #28]
 8014d06:	4654      	mov	r4, sl
 8014d08:	2000      	movs	r0, #0
 8014d0a:	f04f 0c0a 	mov.w	ip, #10
 8014d0e:	4621      	mov	r1, r4
 8014d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d14:	3b30      	subs	r3, #48	; 0x30
 8014d16:	2b09      	cmp	r3, #9
 8014d18:	d94e      	bls.n	8014db8 <_vfiprintf_r+0x1c4>
 8014d1a:	b1b0      	cbz	r0, 8014d4a <_vfiprintf_r+0x156>
 8014d1c:	9207      	str	r2, [sp, #28]
 8014d1e:	e014      	b.n	8014d4a <_vfiprintf_r+0x156>
 8014d20:	eba0 0308 	sub.w	r3, r0, r8
 8014d24:	fa09 f303 	lsl.w	r3, r9, r3
 8014d28:	4313      	orrs	r3, r2
 8014d2a:	9304      	str	r3, [sp, #16]
 8014d2c:	46a2      	mov	sl, r4
 8014d2e:	e7d2      	b.n	8014cd6 <_vfiprintf_r+0xe2>
 8014d30:	9b03      	ldr	r3, [sp, #12]
 8014d32:	1d19      	adds	r1, r3, #4
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	9103      	str	r1, [sp, #12]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	bfbb      	ittet	lt
 8014d3c:	425b      	neglt	r3, r3
 8014d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8014d42:	9307      	strge	r3, [sp, #28]
 8014d44:	9307      	strlt	r3, [sp, #28]
 8014d46:	bfb8      	it	lt
 8014d48:	9204      	strlt	r2, [sp, #16]
 8014d4a:	7823      	ldrb	r3, [r4, #0]
 8014d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8014d4e:	d10c      	bne.n	8014d6a <_vfiprintf_r+0x176>
 8014d50:	7863      	ldrb	r3, [r4, #1]
 8014d52:	2b2a      	cmp	r3, #42	; 0x2a
 8014d54:	d135      	bne.n	8014dc2 <_vfiprintf_r+0x1ce>
 8014d56:	9b03      	ldr	r3, [sp, #12]
 8014d58:	1d1a      	adds	r2, r3, #4
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	9203      	str	r2, [sp, #12]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	bfb8      	it	lt
 8014d62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014d66:	3402      	adds	r4, #2
 8014d68:	9305      	str	r3, [sp, #20]
 8014d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014e50 <_vfiprintf_r+0x25c>
 8014d6e:	7821      	ldrb	r1, [r4, #0]
 8014d70:	2203      	movs	r2, #3
 8014d72:	4650      	mov	r0, sl
 8014d74:	f7eb fab4 	bl	80002e0 <memchr>
 8014d78:	b140      	cbz	r0, 8014d8c <_vfiprintf_r+0x198>
 8014d7a:	2340      	movs	r3, #64	; 0x40
 8014d7c:	eba0 000a 	sub.w	r0, r0, sl
 8014d80:	fa03 f000 	lsl.w	r0, r3, r0
 8014d84:	9b04      	ldr	r3, [sp, #16]
 8014d86:	4303      	orrs	r3, r0
 8014d88:	3401      	adds	r4, #1
 8014d8a:	9304      	str	r3, [sp, #16]
 8014d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d90:	482c      	ldr	r0, [pc, #176]	; (8014e44 <_vfiprintf_r+0x250>)
 8014d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d96:	2206      	movs	r2, #6
 8014d98:	f7eb faa2 	bl	80002e0 <memchr>
 8014d9c:	2800      	cmp	r0, #0
 8014d9e:	d03f      	beq.n	8014e20 <_vfiprintf_r+0x22c>
 8014da0:	4b29      	ldr	r3, [pc, #164]	; (8014e48 <_vfiprintf_r+0x254>)
 8014da2:	bb1b      	cbnz	r3, 8014dec <_vfiprintf_r+0x1f8>
 8014da4:	9b03      	ldr	r3, [sp, #12]
 8014da6:	3307      	adds	r3, #7
 8014da8:	f023 0307 	bic.w	r3, r3, #7
 8014dac:	3308      	adds	r3, #8
 8014dae:	9303      	str	r3, [sp, #12]
 8014db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014db2:	443b      	add	r3, r7
 8014db4:	9309      	str	r3, [sp, #36]	; 0x24
 8014db6:	e767      	b.n	8014c88 <_vfiprintf_r+0x94>
 8014db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8014dbc:	460c      	mov	r4, r1
 8014dbe:	2001      	movs	r0, #1
 8014dc0:	e7a5      	b.n	8014d0e <_vfiprintf_r+0x11a>
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	3401      	adds	r4, #1
 8014dc6:	9305      	str	r3, [sp, #20]
 8014dc8:	4619      	mov	r1, r3
 8014dca:	f04f 0c0a 	mov.w	ip, #10
 8014dce:	4620      	mov	r0, r4
 8014dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014dd4:	3a30      	subs	r2, #48	; 0x30
 8014dd6:	2a09      	cmp	r2, #9
 8014dd8:	d903      	bls.n	8014de2 <_vfiprintf_r+0x1ee>
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d0c5      	beq.n	8014d6a <_vfiprintf_r+0x176>
 8014dde:	9105      	str	r1, [sp, #20]
 8014de0:	e7c3      	b.n	8014d6a <_vfiprintf_r+0x176>
 8014de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8014de6:	4604      	mov	r4, r0
 8014de8:	2301      	movs	r3, #1
 8014dea:	e7f0      	b.n	8014dce <_vfiprintf_r+0x1da>
 8014dec:	ab03      	add	r3, sp, #12
 8014dee:	9300      	str	r3, [sp, #0]
 8014df0:	462a      	mov	r2, r5
 8014df2:	4b16      	ldr	r3, [pc, #88]	; (8014e4c <_vfiprintf_r+0x258>)
 8014df4:	a904      	add	r1, sp, #16
 8014df6:	4630      	mov	r0, r6
 8014df8:	f3af 8000 	nop.w
 8014dfc:	4607      	mov	r7, r0
 8014dfe:	1c78      	adds	r0, r7, #1
 8014e00:	d1d6      	bne.n	8014db0 <_vfiprintf_r+0x1bc>
 8014e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e04:	07d9      	lsls	r1, r3, #31
 8014e06:	d405      	bmi.n	8014e14 <_vfiprintf_r+0x220>
 8014e08:	89ab      	ldrh	r3, [r5, #12]
 8014e0a:	059a      	lsls	r2, r3, #22
 8014e0c:	d402      	bmi.n	8014e14 <_vfiprintf_r+0x220>
 8014e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e10:	f7ff fe53 	bl	8014aba <__retarget_lock_release_recursive>
 8014e14:	89ab      	ldrh	r3, [r5, #12]
 8014e16:	065b      	lsls	r3, r3, #25
 8014e18:	f53f af12 	bmi.w	8014c40 <_vfiprintf_r+0x4c>
 8014e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e1e:	e711      	b.n	8014c44 <_vfiprintf_r+0x50>
 8014e20:	ab03      	add	r3, sp, #12
 8014e22:	9300      	str	r3, [sp, #0]
 8014e24:	462a      	mov	r2, r5
 8014e26:	4b09      	ldr	r3, [pc, #36]	; (8014e4c <_vfiprintf_r+0x258>)
 8014e28:	a904      	add	r1, sp, #16
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	f000 f880 	bl	8014f30 <_printf_i>
 8014e30:	e7e4      	b.n	8014dfc <_vfiprintf_r+0x208>
 8014e32:	bf00      	nop
 8014e34:	08015628 	.word	0x08015628
 8014e38:	08015648 	.word	0x08015648
 8014e3c:	08015608 	.word	0x08015608
 8014e40:	08015668 	.word	0x08015668
 8014e44:	08015672 	.word	0x08015672
 8014e48:	00000000 	.word	0x00000000
 8014e4c:	08014bcf 	.word	0x08014bcf
 8014e50:	0801566e 	.word	0x0801566e

08014e54 <_printf_common>:
 8014e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e58:	4616      	mov	r6, r2
 8014e5a:	4699      	mov	r9, r3
 8014e5c:	688a      	ldr	r2, [r1, #8]
 8014e5e:	690b      	ldr	r3, [r1, #16]
 8014e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014e64:	4293      	cmp	r3, r2
 8014e66:	bfb8      	it	lt
 8014e68:	4613      	movlt	r3, r2
 8014e6a:	6033      	str	r3, [r6, #0]
 8014e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014e70:	4607      	mov	r7, r0
 8014e72:	460c      	mov	r4, r1
 8014e74:	b10a      	cbz	r2, 8014e7a <_printf_common+0x26>
 8014e76:	3301      	adds	r3, #1
 8014e78:	6033      	str	r3, [r6, #0]
 8014e7a:	6823      	ldr	r3, [r4, #0]
 8014e7c:	0699      	lsls	r1, r3, #26
 8014e7e:	bf42      	ittt	mi
 8014e80:	6833      	ldrmi	r3, [r6, #0]
 8014e82:	3302      	addmi	r3, #2
 8014e84:	6033      	strmi	r3, [r6, #0]
 8014e86:	6825      	ldr	r5, [r4, #0]
 8014e88:	f015 0506 	ands.w	r5, r5, #6
 8014e8c:	d106      	bne.n	8014e9c <_printf_common+0x48>
 8014e8e:	f104 0a19 	add.w	sl, r4, #25
 8014e92:	68e3      	ldr	r3, [r4, #12]
 8014e94:	6832      	ldr	r2, [r6, #0]
 8014e96:	1a9b      	subs	r3, r3, r2
 8014e98:	42ab      	cmp	r3, r5
 8014e9a:	dc26      	bgt.n	8014eea <_printf_common+0x96>
 8014e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014ea0:	1e13      	subs	r3, r2, #0
 8014ea2:	6822      	ldr	r2, [r4, #0]
 8014ea4:	bf18      	it	ne
 8014ea6:	2301      	movne	r3, #1
 8014ea8:	0692      	lsls	r2, r2, #26
 8014eaa:	d42b      	bmi.n	8014f04 <_printf_common+0xb0>
 8014eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014eb0:	4649      	mov	r1, r9
 8014eb2:	4638      	mov	r0, r7
 8014eb4:	47c0      	blx	r8
 8014eb6:	3001      	adds	r0, #1
 8014eb8:	d01e      	beq.n	8014ef8 <_printf_common+0xa4>
 8014eba:	6823      	ldr	r3, [r4, #0]
 8014ebc:	68e5      	ldr	r5, [r4, #12]
 8014ebe:	6832      	ldr	r2, [r6, #0]
 8014ec0:	f003 0306 	and.w	r3, r3, #6
 8014ec4:	2b04      	cmp	r3, #4
 8014ec6:	bf08      	it	eq
 8014ec8:	1aad      	subeq	r5, r5, r2
 8014eca:	68a3      	ldr	r3, [r4, #8]
 8014ecc:	6922      	ldr	r2, [r4, #16]
 8014ece:	bf0c      	ite	eq
 8014ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ed4:	2500      	movne	r5, #0
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	bfc4      	itt	gt
 8014eda:	1a9b      	subgt	r3, r3, r2
 8014edc:	18ed      	addgt	r5, r5, r3
 8014ede:	2600      	movs	r6, #0
 8014ee0:	341a      	adds	r4, #26
 8014ee2:	42b5      	cmp	r5, r6
 8014ee4:	d11a      	bne.n	8014f1c <_printf_common+0xc8>
 8014ee6:	2000      	movs	r0, #0
 8014ee8:	e008      	b.n	8014efc <_printf_common+0xa8>
 8014eea:	2301      	movs	r3, #1
 8014eec:	4652      	mov	r2, sl
 8014eee:	4649      	mov	r1, r9
 8014ef0:	4638      	mov	r0, r7
 8014ef2:	47c0      	blx	r8
 8014ef4:	3001      	adds	r0, #1
 8014ef6:	d103      	bne.n	8014f00 <_printf_common+0xac>
 8014ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f00:	3501      	adds	r5, #1
 8014f02:	e7c6      	b.n	8014e92 <_printf_common+0x3e>
 8014f04:	18e1      	adds	r1, r4, r3
 8014f06:	1c5a      	adds	r2, r3, #1
 8014f08:	2030      	movs	r0, #48	; 0x30
 8014f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f0e:	4422      	add	r2, r4
 8014f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f18:	3302      	adds	r3, #2
 8014f1a:	e7c7      	b.n	8014eac <_printf_common+0x58>
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	4622      	mov	r2, r4
 8014f20:	4649      	mov	r1, r9
 8014f22:	4638      	mov	r0, r7
 8014f24:	47c0      	blx	r8
 8014f26:	3001      	adds	r0, #1
 8014f28:	d0e6      	beq.n	8014ef8 <_printf_common+0xa4>
 8014f2a:	3601      	adds	r6, #1
 8014f2c:	e7d9      	b.n	8014ee2 <_printf_common+0x8e>
	...

08014f30 <_printf_i>:
 8014f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f34:	7e0f      	ldrb	r7, [r1, #24]
 8014f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f38:	2f78      	cmp	r7, #120	; 0x78
 8014f3a:	4691      	mov	r9, r2
 8014f3c:	4680      	mov	r8, r0
 8014f3e:	460c      	mov	r4, r1
 8014f40:	469a      	mov	sl, r3
 8014f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014f46:	d807      	bhi.n	8014f58 <_printf_i+0x28>
 8014f48:	2f62      	cmp	r7, #98	; 0x62
 8014f4a:	d80a      	bhi.n	8014f62 <_printf_i+0x32>
 8014f4c:	2f00      	cmp	r7, #0
 8014f4e:	f000 80d8 	beq.w	8015102 <_printf_i+0x1d2>
 8014f52:	2f58      	cmp	r7, #88	; 0x58
 8014f54:	f000 80a3 	beq.w	801509e <_printf_i+0x16e>
 8014f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014f60:	e03a      	b.n	8014fd8 <_printf_i+0xa8>
 8014f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014f66:	2b15      	cmp	r3, #21
 8014f68:	d8f6      	bhi.n	8014f58 <_printf_i+0x28>
 8014f6a:	a101      	add	r1, pc, #4	; (adr r1, 8014f70 <_printf_i+0x40>)
 8014f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014f70:	08014fc9 	.word	0x08014fc9
 8014f74:	08014fdd 	.word	0x08014fdd
 8014f78:	08014f59 	.word	0x08014f59
 8014f7c:	08014f59 	.word	0x08014f59
 8014f80:	08014f59 	.word	0x08014f59
 8014f84:	08014f59 	.word	0x08014f59
 8014f88:	08014fdd 	.word	0x08014fdd
 8014f8c:	08014f59 	.word	0x08014f59
 8014f90:	08014f59 	.word	0x08014f59
 8014f94:	08014f59 	.word	0x08014f59
 8014f98:	08014f59 	.word	0x08014f59
 8014f9c:	080150e9 	.word	0x080150e9
 8014fa0:	0801500d 	.word	0x0801500d
 8014fa4:	080150cb 	.word	0x080150cb
 8014fa8:	08014f59 	.word	0x08014f59
 8014fac:	08014f59 	.word	0x08014f59
 8014fb0:	0801510b 	.word	0x0801510b
 8014fb4:	08014f59 	.word	0x08014f59
 8014fb8:	0801500d 	.word	0x0801500d
 8014fbc:	08014f59 	.word	0x08014f59
 8014fc0:	08014f59 	.word	0x08014f59
 8014fc4:	080150d3 	.word	0x080150d3
 8014fc8:	682b      	ldr	r3, [r5, #0]
 8014fca:	1d1a      	adds	r2, r3, #4
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	602a      	str	r2, [r5, #0]
 8014fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014fd8:	2301      	movs	r3, #1
 8014fda:	e0a3      	b.n	8015124 <_printf_i+0x1f4>
 8014fdc:	6820      	ldr	r0, [r4, #0]
 8014fde:	6829      	ldr	r1, [r5, #0]
 8014fe0:	0606      	lsls	r6, r0, #24
 8014fe2:	f101 0304 	add.w	r3, r1, #4
 8014fe6:	d50a      	bpl.n	8014ffe <_printf_i+0xce>
 8014fe8:	680e      	ldr	r6, [r1, #0]
 8014fea:	602b      	str	r3, [r5, #0]
 8014fec:	2e00      	cmp	r6, #0
 8014fee:	da03      	bge.n	8014ff8 <_printf_i+0xc8>
 8014ff0:	232d      	movs	r3, #45	; 0x2d
 8014ff2:	4276      	negs	r6, r6
 8014ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ff8:	485e      	ldr	r0, [pc, #376]	; (8015174 <_printf_i+0x244>)
 8014ffa:	230a      	movs	r3, #10
 8014ffc:	e019      	b.n	8015032 <_printf_i+0x102>
 8014ffe:	680e      	ldr	r6, [r1, #0]
 8015000:	602b      	str	r3, [r5, #0]
 8015002:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015006:	bf18      	it	ne
 8015008:	b236      	sxthne	r6, r6
 801500a:	e7ef      	b.n	8014fec <_printf_i+0xbc>
 801500c:	682b      	ldr	r3, [r5, #0]
 801500e:	6820      	ldr	r0, [r4, #0]
 8015010:	1d19      	adds	r1, r3, #4
 8015012:	6029      	str	r1, [r5, #0]
 8015014:	0601      	lsls	r1, r0, #24
 8015016:	d501      	bpl.n	801501c <_printf_i+0xec>
 8015018:	681e      	ldr	r6, [r3, #0]
 801501a:	e002      	b.n	8015022 <_printf_i+0xf2>
 801501c:	0646      	lsls	r6, r0, #25
 801501e:	d5fb      	bpl.n	8015018 <_printf_i+0xe8>
 8015020:	881e      	ldrh	r6, [r3, #0]
 8015022:	4854      	ldr	r0, [pc, #336]	; (8015174 <_printf_i+0x244>)
 8015024:	2f6f      	cmp	r7, #111	; 0x6f
 8015026:	bf0c      	ite	eq
 8015028:	2308      	moveq	r3, #8
 801502a:	230a      	movne	r3, #10
 801502c:	2100      	movs	r1, #0
 801502e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015032:	6865      	ldr	r5, [r4, #4]
 8015034:	60a5      	str	r5, [r4, #8]
 8015036:	2d00      	cmp	r5, #0
 8015038:	bfa2      	ittt	ge
 801503a:	6821      	ldrge	r1, [r4, #0]
 801503c:	f021 0104 	bicge.w	r1, r1, #4
 8015040:	6021      	strge	r1, [r4, #0]
 8015042:	b90e      	cbnz	r6, 8015048 <_printf_i+0x118>
 8015044:	2d00      	cmp	r5, #0
 8015046:	d04d      	beq.n	80150e4 <_printf_i+0x1b4>
 8015048:	4615      	mov	r5, r2
 801504a:	fbb6 f1f3 	udiv	r1, r6, r3
 801504e:	fb03 6711 	mls	r7, r3, r1, r6
 8015052:	5dc7      	ldrb	r7, [r0, r7]
 8015054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015058:	4637      	mov	r7, r6
 801505a:	42bb      	cmp	r3, r7
 801505c:	460e      	mov	r6, r1
 801505e:	d9f4      	bls.n	801504a <_printf_i+0x11a>
 8015060:	2b08      	cmp	r3, #8
 8015062:	d10b      	bne.n	801507c <_printf_i+0x14c>
 8015064:	6823      	ldr	r3, [r4, #0]
 8015066:	07de      	lsls	r6, r3, #31
 8015068:	d508      	bpl.n	801507c <_printf_i+0x14c>
 801506a:	6923      	ldr	r3, [r4, #16]
 801506c:	6861      	ldr	r1, [r4, #4]
 801506e:	4299      	cmp	r1, r3
 8015070:	bfde      	ittt	le
 8015072:	2330      	movle	r3, #48	; 0x30
 8015074:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015078:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801507c:	1b52      	subs	r2, r2, r5
 801507e:	6122      	str	r2, [r4, #16]
 8015080:	f8cd a000 	str.w	sl, [sp]
 8015084:	464b      	mov	r3, r9
 8015086:	aa03      	add	r2, sp, #12
 8015088:	4621      	mov	r1, r4
 801508a:	4640      	mov	r0, r8
 801508c:	f7ff fee2 	bl	8014e54 <_printf_common>
 8015090:	3001      	adds	r0, #1
 8015092:	d14c      	bne.n	801512e <_printf_i+0x1fe>
 8015094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015098:	b004      	add	sp, #16
 801509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801509e:	4835      	ldr	r0, [pc, #212]	; (8015174 <_printf_i+0x244>)
 80150a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80150a4:	6829      	ldr	r1, [r5, #0]
 80150a6:	6823      	ldr	r3, [r4, #0]
 80150a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80150ac:	6029      	str	r1, [r5, #0]
 80150ae:	061d      	lsls	r5, r3, #24
 80150b0:	d514      	bpl.n	80150dc <_printf_i+0x1ac>
 80150b2:	07df      	lsls	r7, r3, #31
 80150b4:	bf44      	itt	mi
 80150b6:	f043 0320 	orrmi.w	r3, r3, #32
 80150ba:	6023      	strmi	r3, [r4, #0]
 80150bc:	b91e      	cbnz	r6, 80150c6 <_printf_i+0x196>
 80150be:	6823      	ldr	r3, [r4, #0]
 80150c0:	f023 0320 	bic.w	r3, r3, #32
 80150c4:	6023      	str	r3, [r4, #0]
 80150c6:	2310      	movs	r3, #16
 80150c8:	e7b0      	b.n	801502c <_printf_i+0xfc>
 80150ca:	6823      	ldr	r3, [r4, #0]
 80150cc:	f043 0320 	orr.w	r3, r3, #32
 80150d0:	6023      	str	r3, [r4, #0]
 80150d2:	2378      	movs	r3, #120	; 0x78
 80150d4:	4828      	ldr	r0, [pc, #160]	; (8015178 <_printf_i+0x248>)
 80150d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80150da:	e7e3      	b.n	80150a4 <_printf_i+0x174>
 80150dc:	0659      	lsls	r1, r3, #25
 80150de:	bf48      	it	mi
 80150e0:	b2b6      	uxthmi	r6, r6
 80150e2:	e7e6      	b.n	80150b2 <_printf_i+0x182>
 80150e4:	4615      	mov	r5, r2
 80150e6:	e7bb      	b.n	8015060 <_printf_i+0x130>
 80150e8:	682b      	ldr	r3, [r5, #0]
 80150ea:	6826      	ldr	r6, [r4, #0]
 80150ec:	6961      	ldr	r1, [r4, #20]
 80150ee:	1d18      	adds	r0, r3, #4
 80150f0:	6028      	str	r0, [r5, #0]
 80150f2:	0635      	lsls	r5, r6, #24
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	d501      	bpl.n	80150fc <_printf_i+0x1cc>
 80150f8:	6019      	str	r1, [r3, #0]
 80150fa:	e002      	b.n	8015102 <_printf_i+0x1d2>
 80150fc:	0670      	lsls	r0, r6, #25
 80150fe:	d5fb      	bpl.n	80150f8 <_printf_i+0x1c8>
 8015100:	8019      	strh	r1, [r3, #0]
 8015102:	2300      	movs	r3, #0
 8015104:	6123      	str	r3, [r4, #16]
 8015106:	4615      	mov	r5, r2
 8015108:	e7ba      	b.n	8015080 <_printf_i+0x150>
 801510a:	682b      	ldr	r3, [r5, #0]
 801510c:	1d1a      	adds	r2, r3, #4
 801510e:	602a      	str	r2, [r5, #0]
 8015110:	681d      	ldr	r5, [r3, #0]
 8015112:	6862      	ldr	r2, [r4, #4]
 8015114:	2100      	movs	r1, #0
 8015116:	4628      	mov	r0, r5
 8015118:	f7eb f8e2 	bl	80002e0 <memchr>
 801511c:	b108      	cbz	r0, 8015122 <_printf_i+0x1f2>
 801511e:	1b40      	subs	r0, r0, r5
 8015120:	6060      	str	r0, [r4, #4]
 8015122:	6863      	ldr	r3, [r4, #4]
 8015124:	6123      	str	r3, [r4, #16]
 8015126:	2300      	movs	r3, #0
 8015128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801512c:	e7a8      	b.n	8015080 <_printf_i+0x150>
 801512e:	6923      	ldr	r3, [r4, #16]
 8015130:	462a      	mov	r2, r5
 8015132:	4649      	mov	r1, r9
 8015134:	4640      	mov	r0, r8
 8015136:	47d0      	blx	sl
 8015138:	3001      	adds	r0, #1
 801513a:	d0ab      	beq.n	8015094 <_printf_i+0x164>
 801513c:	6823      	ldr	r3, [r4, #0]
 801513e:	079b      	lsls	r3, r3, #30
 8015140:	d413      	bmi.n	801516a <_printf_i+0x23a>
 8015142:	68e0      	ldr	r0, [r4, #12]
 8015144:	9b03      	ldr	r3, [sp, #12]
 8015146:	4298      	cmp	r0, r3
 8015148:	bfb8      	it	lt
 801514a:	4618      	movlt	r0, r3
 801514c:	e7a4      	b.n	8015098 <_printf_i+0x168>
 801514e:	2301      	movs	r3, #1
 8015150:	4632      	mov	r2, r6
 8015152:	4649      	mov	r1, r9
 8015154:	4640      	mov	r0, r8
 8015156:	47d0      	blx	sl
 8015158:	3001      	adds	r0, #1
 801515a:	d09b      	beq.n	8015094 <_printf_i+0x164>
 801515c:	3501      	adds	r5, #1
 801515e:	68e3      	ldr	r3, [r4, #12]
 8015160:	9903      	ldr	r1, [sp, #12]
 8015162:	1a5b      	subs	r3, r3, r1
 8015164:	42ab      	cmp	r3, r5
 8015166:	dcf2      	bgt.n	801514e <_printf_i+0x21e>
 8015168:	e7eb      	b.n	8015142 <_printf_i+0x212>
 801516a:	2500      	movs	r5, #0
 801516c:	f104 0619 	add.w	r6, r4, #25
 8015170:	e7f5      	b.n	801515e <_printf_i+0x22e>
 8015172:	bf00      	nop
 8015174:	08015679 	.word	0x08015679
 8015178:	0801568a 	.word	0x0801568a

0801517c <__sread>:
 801517c:	b510      	push	{r4, lr}
 801517e:	460c      	mov	r4, r1
 8015180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015184:	f000 f894 	bl	80152b0 <_read_r>
 8015188:	2800      	cmp	r0, #0
 801518a:	bfab      	itete	ge
 801518c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801518e:	89a3      	ldrhlt	r3, [r4, #12]
 8015190:	181b      	addge	r3, r3, r0
 8015192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015196:	bfac      	ite	ge
 8015198:	6563      	strge	r3, [r4, #84]	; 0x54
 801519a:	81a3      	strhlt	r3, [r4, #12]
 801519c:	bd10      	pop	{r4, pc}

0801519e <__swrite>:
 801519e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a2:	461f      	mov	r7, r3
 80151a4:	898b      	ldrh	r3, [r1, #12]
 80151a6:	05db      	lsls	r3, r3, #23
 80151a8:	4605      	mov	r5, r0
 80151aa:	460c      	mov	r4, r1
 80151ac:	4616      	mov	r6, r2
 80151ae:	d505      	bpl.n	80151bc <__swrite+0x1e>
 80151b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151b4:	2302      	movs	r3, #2
 80151b6:	2200      	movs	r2, #0
 80151b8:	f000 f868 	bl	801528c <_lseek_r>
 80151bc:	89a3      	ldrh	r3, [r4, #12]
 80151be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80151c6:	81a3      	strh	r3, [r4, #12]
 80151c8:	4632      	mov	r2, r6
 80151ca:	463b      	mov	r3, r7
 80151cc:	4628      	mov	r0, r5
 80151ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151d2:	f000 b817 	b.w	8015204 <_write_r>

080151d6 <__sseek>:
 80151d6:	b510      	push	{r4, lr}
 80151d8:	460c      	mov	r4, r1
 80151da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151de:	f000 f855 	bl	801528c <_lseek_r>
 80151e2:	1c43      	adds	r3, r0, #1
 80151e4:	89a3      	ldrh	r3, [r4, #12]
 80151e6:	bf15      	itete	ne
 80151e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80151ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80151ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80151f2:	81a3      	strheq	r3, [r4, #12]
 80151f4:	bf18      	it	ne
 80151f6:	81a3      	strhne	r3, [r4, #12]
 80151f8:	bd10      	pop	{r4, pc}

080151fa <__sclose>:
 80151fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151fe:	f000 b813 	b.w	8015228 <_close_r>
	...

08015204 <_write_r>:
 8015204:	b538      	push	{r3, r4, r5, lr}
 8015206:	4d07      	ldr	r5, [pc, #28]	; (8015224 <_write_r+0x20>)
 8015208:	4604      	mov	r4, r0
 801520a:	4608      	mov	r0, r1
 801520c:	4611      	mov	r1, r2
 801520e:	2200      	movs	r2, #0
 8015210:	602a      	str	r2, [r5, #0]
 8015212:	461a      	mov	r2, r3
 8015214:	f7ed fda3 	bl	8002d5e <_write>
 8015218:	1c43      	adds	r3, r0, #1
 801521a:	d102      	bne.n	8015222 <_write_r+0x1e>
 801521c:	682b      	ldr	r3, [r5, #0]
 801521e:	b103      	cbz	r3, 8015222 <_write_r+0x1e>
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	bd38      	pop	{r3, r4, r5, pc}
 8015224:	240050d8 	.word	0x240050d8

08015228 <_close_r>:
 8015228:	b538      	push	{r3, r4, r5, lr}
 801522a:	4d06      	ldr	r5, [pc, #24]	; (8015244 <_close_r+0x1c>)
 801522c:	2300      	movs	r3, #0
 801522e:	4604      	mov	r4, r0
 8015230:	4608      	mov	r0, r1
 8015232:	602b      	str	r3, [r5, #0]
 8015234:	f7ed fdaf 	bl	8002d96 <_close>
 8015238:	1c43      	adds	r3, r0, #1
 801523a:	d102      	bne.n	8015242 <_close_r+0x1a>
 801523c:	682b      	ldr	r3, [r5, #0]
 801523e:	b103      	cbz	r3, 8015242 <_close_r+0x1a>
 8015240:	6023      	str	r3, [r4, #0]
 8015242:	bd38      	pop	{r3, r4, r5, pc}
 8015244:	240050d8 	.word	0x240050d8

08015248 <_fstat_r>:
 8015248:	b538      	push	{r3, r4, r5, lr}
 801524a:	4d07      	ldr	r5, [pc, #28]	; (8015268 <_fstat_r+0x20>)
 801524c:	2300      	movs	r3, #0
 801524e:	4604      	mov	r4, r0
 8015250:	4608      	mov	r0, r1
 8015252:	4611      	mov	r1, r2
 8015254:	602b      	str	r3, [r5, #0]
 8015256:	f7ed fdaa 	bl	8002dae <_fstat>
 801525a:	1c43      	adds	r3, r0, #1
 801525c:	d102      	bne.n	8015264 <_fstat_r+0x1c>
 801525e:	682b      	ldr	r3, [r5, #0]
 8015260:	b103      	cbz	r3, 8015264 <_fstat_r+0x1c>
 8015262:	6023      	str	r3, [r4, #0]
 8015264:	bd38      	pop	{r3, r4, r5, pc}
 8015266:	bf00      	nop
 8015268:	240050d8 	.word	0x240050d8

0801526c <_isatty_r>:
 801526c:	b538      	push	{r3, r4, r5, lr}
 801526e:	4d06      	ldr	r5, [pc, #24]	; (8015288 <_isatty_r+0x1c>)
 8015270:	2300      	movs	r3, #0
 8015272:	4604      	mov	r4, r0
 8015274:	4608      	mov	r0, r1
 8015276:	602b      	str	r3, [r5, #0]
 8015278:	f7ed fda9 	bl	8002dce <_isatty>
 801527c:	1c43      	adds	r3, r0, #1
 801527e:	d102      	bne.n	8015286 <_isatty_r+0x1a>
 8015280:	682b      	ldr	r3, [r5, #0]
 8015282:	b103      	cbz	r3, 8015286 <_isatty_r+0x1a>
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	bd38      	pop	{r3, r4, r5, pc}
 8015288:	240050d8 	.word	0x240050d8

0801528c <_lseek_r>:
 801528c:	b538      	push	{r3, r4, r5, lr}
 801528e:	4d07      	ldr	r5, [pc, #28]	; (80152ac <_lseek_r+0x20>)
 8015290:	4604      	mov	r4, r0
 8015292:	4608      	mov	r0, r1
 8015294:	4611      	mov	r1, r2
 8015296:	2200      	movs	r2, #0
 8015298:	602a      	str	r2, [r5, #0]
 801529a:	461a      	mov	r2, r3
 801529c:	f7ed fda2 	bl	8002de4 <_lseek>
 80152a0:	1c43      	adds	r3, r0, #1
 80152a2:	d102      	bne.n	80152aa <_lseek_r+0x1e>
 80152a4:	682b      	ldr	r3, [r5, #0]
 80152a6:	b103      	cbz	r3, 80152aa <_lseek_r+0x1e>
 80152a8:	6023      	str	r3, [r4, #0]
 80152aa:	bd38      	pop	{r3, r4, r5, pc}
 80152ac:	240050d8 	.word	0x240050d8

080152b0 <_read_r>:
 80152b0:	b538      	push	{r3, r4, r5, lr}
 80152b2:	4d07      	ldr	r5, [pc, #28]	; (80152d0 <_read_r+0x20>)
 80152b4:	4604      	mov	r4, r0
 80152b6:	4608      	mov	r0, r1
 80152b8:	4611      	mov	r1, r2
 80152ba:	2200      	movs	r2, #0
 80152bc:	602a      	str	r2, [r5, #0]
 80152be:	461a      	mov	r2, r3
 80152c0:	f7ed fd30 	bl	8002d24 <_read>
 80152c4:	1c43      	adds	r3, r0, #1
 80152c6:	d102      	bne.n	80152ce <_read_r+0x1e>
 80152c8:	682b      	ldr	r3, [r5, #0]
 80152ca:	b103      	cbz	r3, 80152ce <_read_r+0x1e>
 80152cc:	6023      	str	r3, [r4, #0]
 80152ce:	bd38      	pop	{r3, r4, r5, pc}
 80152d0:	240050d8 	.word	0x240050d8

080152d4 <_init>:
 80152d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152d6:	bf00      	nop
 80152d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152da:	bc08      	pop	{r3}
 80152dc:	469e      	mov	lr, r3
 80152de:	4770      	bx	lr

080152e0 <_fini>:
 80152e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152e2:	bf00      	nop
 80152e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152e6:	bc08      	pop	{r3}
 80152e8:	469e      	mov	lr, r3
 80152ea:	4770      	bx	lr
