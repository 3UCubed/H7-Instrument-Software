
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000169f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08016c90  08016c90  00026c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080170a4  080170a4  000270a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080170ac  080170ac  000270ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080170b0  080170b0  000270b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  080170b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000590c  24000120  080171bc  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a2c  080171bc  00035a2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   000335fc  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000570c  00000000  00000000  00063732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002718  00000000  00000000  00068e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002500  00000000  00000000  0006b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000400d0  00000000  00000000  0006da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032101  00000000  00000000  000adb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194933  00000000  00000000  000dfc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027455c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000af34  00000000  00000000  002745ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016c78 	.word	0x08016c78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016c78 	.word	0x08016c78

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	UptimeMillis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000bcc 	.word	0x24000bcc

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fb0a 	bl	8012c30 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e018      	b.n	8000650 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 faff 	bl	8012c30 <osEventFlagsSet>
}
 8000632:	e00d      	b.n	8000650 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 faf4 	bl	8012c30 <osEventFlagsSet>
}
 8000648:	e002      	b.n	8000650 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800064a:	4807      	ldr	r0, [pc, #28]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800064c:	f015 ff64 	bl	8016518 <puts>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	24000508 	.word	0x24000508
 800065c:	24000bec 	.word	0x24000bec
 8000660:	24000554 	.word	0x24000554
 8000664:	240005a0 	.word	0x240005a0
 8000668:	08016cf0 	.word	0x08016cf0

0800066c <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	49f2      	ldr	r1, [pc, #968]	; (8000a40 <HAL_UART_RxCpltCallback+0x3d4>)
 8000678:	48f2      	ldr	r0, [pc, #968]	; (8000a44 <HAL_UART_RxCpltCallback+0x3d8>)
 800067a:	f00f fc73 	bl	800ff64 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800067e:	4bf0      	ldr	r3, [pc, #960]	; (8000a40 <HAL_UART_RxCpltCallback+0x3d4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2be0      	cmp	r3, #224	; 0xe0
 8000688:	f200 83e8 	bhi.w	8000e5c <HAL_UART_RxCpltCallback+0x7f0>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <HAL_UART_RxCpltCallback+0x28>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	08000a2d 	.word	0x08000a2d
 8000698:	08000a69 	.word	0x08000a69
 800069c:	08000aef 	.word	0x08000aef
 80006a0:	08000b19 	.word	0x08000b19
 80006a4:	08000b41 	.word	0x08000b41
 80006a8:	08000b6b 	.word	0x08000b6b
 80006ac:	08000b97 	.word	0x08000b97
 80006b0:	08000bc3 	.word	0x08000bc3
 80006b4:	08000bed 	.word	0x08000bed
 80006b8:	08000c19 	.word	0x08000c19
 80006bc:	08000c45 	.word	0x08000c45
 80006c0:	08000c77 	.word	0x08000c77
 80006c4:	08000ca9 	.word	0x08000ca9
 80006c8:	08000cfb 	.word	0x08000cfb
 80006cc:	08000e01 	.word	0x08000e01
 80006d0:	08000e31 	.word	0x08000e31
 80006d4:	08000a19 	.word	0x08000a19
 80006d8:	08000a55 	.word	0x08000a55
 80006dc:	08000ad9 	.word	0x08000ad9
 80006e0:	08000b05 	.word	0x08000b05
 80006e4:	08000b2d 	.word	0x08000b2d
 80006e8:	08000b55 	.word	0x08000b55
 80006ec:	08000b81 	.word	0x08000b81
 80006f0:	08000bad 	.word	0x08000bad
 80006f4:	08000bd9 	.word	0x08000bd9
 80006f8:	08000c01 	.word	0x08000c01
 80006fc:	08000c29 	.word	0x08000c29
 8000700:	08000c5b 	.word	0x08000c5b
 8000704:	08000c8d 	.word	0x08000c8d
 8000708:	08000cbf 	.word	0x08000cbf
 800070c:	08000dd9 	.word	0x08000dd9
 8000710:	08000e29 	.word	0x08000e29
 8000714:	08000e5d 	.word	0x08000e5d
 8000718:	08000e5d 	.word	0x08000e5d
 800071c:	08000e5d 	.word	0x08000e5d
 8000720:	08000e5d 	.word	0x08000e5d
 8000724:	08000e5d 	.word	0x08000e5d
 8000728:	08000e5d 	.word	0x08000e5d
 800072c:	08000e5d 	.word	0x08000e5d
 8000730:	08000e5d 	.word	0x08000e5d
 8000734:	08000e5d 	.word	0x08000e5d
 8000738:	08000e5d 	.word	0x08000e5d
 800073c:	08000e5d 	.word	0x08000e5d
 8000740:	08000e5d 	.word	0x08000e5d
 8000744:	08000e5d 	.word	0x08000e5d
 8000748:	08000e5d 	.word	0x08000e5d
 800074c:	08000e5d 	.word	0x08000e5d
 8000750:	08000e5d 	.word	0x08000e5d
 8000754:	08000e5d 	.word	0x08000e5d
 8000758:	08000e5d 	.word	0x08000e5d
 800075c:	08000e5d 	.word	0x08000e5d
 8000760:	08000e5d 	.word	0x08000e5d
 8000764:	08000e5d 	.word	0x08000e5d
 8000768:	08000e5d 	.word	0x08000e5d
 800076c:	08000e5d 	.word	0x08000e5d
 8000770:	08000e5d 	.word	0x08000e5d
 8000774:	08000e5d 	.word	0x08000e5d
 8000778:	08000e5d 	.word	0x08000e5d
 800077c:	08000e5d 	.word	0x08000e5d
 8000780:	08000e5d 	.word	0x08000e5d
 8000784:	08000e5d 	.word	0x08000e5d
 8000788:	08000e5d 	.word	0x08000e5d
 800078c:	08000e5d 	.word	0x08000e5d
 8000790:	08000e5d 	.word	0x08000e5d
 8000794:	08000e5d 	.word	0x08000e5d
 8000798:	08000e5d 	.word	0x08000e5d
 800079c:	08000e5d 	.word	0x08000e5d
 80007a0:	08000e5d 	.word	0x08000e5d
 80007a4:	08000e5d 	.word	0x08000e5d
 80007a8:	08000e5d 	.word	0x08000e5d
 80007ac:	08000e5d 	.word	0x08000e5d
 80007b0:	08000e5d 	.word	0x08000e5d
 80007b4:	08000e5d 	.word	0x08000e5d
 80007b8:	08000e5d 	.word	0x08000e5d
 80007bc:	08000e5d 	.word	0x08000e5d
 80007c0:	08000e5d 	.word	0x08000e5d
 80007c4:	08000e5d 	.word	0x08000e5d
 80007c8:	08000e5d 	.word	0x08000e5d
 80007cc:	08000e5d 	.word	0x08000e5d
 80007d0:	08000e5d 	.word	0x08000e5d
 80007d4:	08000e5d 	.word	0x08000e5d
 80007d8:	08000e5d 	.word	0x08000e5d
 80007dc:	08000e5d 	.word	0x08000e5d
 80007e0:	08000e5d 	.word	0x08000e5d
 80007e4:	08000e5d 	.word	0x08000e5d
 80007e8:	08000e5d 	.word	0x08000e5d
 80007ec:	08000e5d 	.word	0x08000e5d
 80007f0:	08000e5d 	.word	0x08000e5d
 80007f4:	08000e5d 	.word	0x08000e5d
 80007f8:	08000e5d 	.word	0x08000e5d
 80007fc:	08000e5d 	.word	0x08000e5d
 8000800:	08000e5d 	.word	0x08000e5d
 8000804:	08000e5d 	.word	0x08000e5d
 8000808:	08000e5d 	.word	0x08000e5d
 800080c:	08000e5d 	.word	0x08000e5d
 8000810:	08000e5d 	.word	0x08000e5d
 8000814:	08000e5d 	.word	0x08000e5d
 8000818:	08000e5d 	.word	0x08000e5d
 800081c:	08000e5d 	.word	0x08000e5d
 8000820:	08000e5d 	.word	0x08000e5d
 8000824:	08000e5d 	.word	0x08000e5d
 8000828:	08000e5d 	.word	0x08000e5d
 800082c:	08000e5d 	.word	0x08000e5d
 8000830:	08000e5d 	.word	0x08000e5d
 8000834:	08000e5d 	.word	0x08000e5d
 8000838:	08000e5d 	.word	0x08000e5d
 800083c:	08000e5d 	.word	0x08000e5d
 8000840:	08000e5d 	.word	0x08000e5d
 8000844:	08000e5d 	.word	0x08000e5d
 8000848:	08000e5d 	.word	0x08000e5d
 800084c:	08000e5d 	.word	0x08000e5d
 8000850:	08000e5d 	.word	0x08000e5d
 8000854:	08000e5d 	.word	0x08000e5d
 8000858:	08000e5d 	.word	0x08000e5d
 800085c:	08000e5d 	.word	0x08000e5d
 8000860:	08000e5d 	.word	0x08000e5d
 8000864:	08000e5d 	.word	0x08000e5d
 8000868:	08000e5d 	.word	0x08000e5d
 800086c:	08000e5d 	.word	0x08000e5d
 8000870:	08000e5d 	.word	0x08000e5d
 8000874:	08000e5d 	.word	0x08000e5d
 8000878:	08000e5d 	.word	0x08000e5d
 800087c:	08000e5d 	.word	0x08000e5d
 8000880:	08000e5d 	.word	0x08000e5d
 8000884:	08000e5d 	.word	0x08000e5d
 8000888:	08000e5d 	.word	0x08000e5d
 800088c:	08000e5d 	.word	0x08000e5d
 8000890:	08000e5d 	.word	0x08000e5d
 8000894:	08000e5d 	.word	0x08000e5d
 8000898:	08000e5d 	.word	0x08000e5d
 800089c:	08000e5d 	.word	0x08000e5d
 80008a0:	08000e5d 	.word	0x08000e5d
 80008a4:	08000e5d 	.word	0x08000e5d
 80008a8:	08000e5d 	.word	0x08000e5d
 80008ac:	08000e5d 	.word	0x08000e5d
 80008b0:	08000e5d 	.word	0x08000e5d
 80008b4:	08000e5d 	.word	0x08000e5d
 80008b8:	08000e5d 	.word	0x08000e5d
 80008bc:	08000e5d 	.word	0x08000e5d
 80008c0:	08000e5d 	.word	0x08000e5d
 80008c4:	08000e5d 	.word	0x08000e5d
 80008c8:	08000e5d 	.word	0x08000e5d
 80008cc:	08000e5d 	.word	0x08000e5d
 80008d0:	08000e5d 	.word	0x08000e5d
 80008d4:	08000e5d 	.word	0x08000e5d
 80008d8:	08000e5d 	.word	0x08000e5d
 80008dc:	08000e5d 	.word	0x08000e5d
 80008e0:	08000e5d 	.word	0x08000e5d
 80008e4:	08000e5d 	.word	0x08000e5d
 80008e8:	08000e5d 	.word	0x08000e5d
 80008ec:	08000e5d 	.word	0x08000e5d
 80008f0:	08000e5d 	.word	0x08000e5d
 80008f4:	08000e5d 	.word	0x08000e5d
 80008f8:	08000e5d 	.word	0x08000e5d
 80008fc:	08000e5d 	.word	0x08000e5d
 8000900:	08000e5d 	.word	0x08000e5d
 8000904:	08000e5d 	.word	0x08000e5d
 8000908:	08000e5d 	.word	0x08000e5d
 800090c:	08000e5d 	.word	0x08000e5d
 8000910:	08000e5d 	.word	0x08000e5d
 8000914:	08000e5d 	.word	0x08000e5d
 8000918:	08000e5d 	.word	0x08000e5d
 800091c:	08000e5d 	.word	0x08000e5d
 8000920:	08000e5d 	.word	0x08000e5d
 8000924:	08000e5d 	.word	0x08000e5d
 8000928:	08000e5d 	.word	0x08000e5d
 800092c:	08000e5d 	.word	0x08000e5d
 8000930:	08000e5d 	.word	0x08000e5d
 8000934:	08000e5d 	.word	0x08000e5d
 8000938:	08000e5d 	.word	0x08000e5d
 800093c:	08000e5d 	.word	0x08000e5d
 8000940:	08000e5d 	.word	0x08000e5d
 8000944:	08000e5d 	.word	0x08000e5d
 8000948:	08000e5d 	.word	0x08000e5d
 800094c:	08000e5d 	.word	0x08000e5d
 8000950:	08000e5d 	.word	0x08000e5d
 8000954:	08000e5d 	.word	0x08000e5d
 8000958:	08000e5d 	.word	0x08000e5d
 800095c:	08000e5d 	.word	0x08000e5d
 8000960:	08000e5d 	.word	0x08000e5d
 8000964:	08000e5d 	.word	0x08000e5d
 8000968:	08000e5d 	.word	0x08000e5d
 800096c:	08000e5d 	.word	0x08000e5d
 8000970:	08000e5d 	.word	0x08000e5d
 8000974:	08000e5d 	.word	0x08000e5d
 8000978:	08000e5d 	.word	0x08000e5d
 800097c:	08000e5d 	.word	0x08000e5d
 8000980:	08000e5d 	.word	0x08000e5d
 8000984:	08000e5d 	.word	0x08000e5d
 8000988:	08000e5d 	.word	0x08000e5d
 800098c:	08000e5d 	.word	0x08000e5d
 8000990:	08000e5d 	.word	0x08000e5d
 8000994:	08000e5d 	.word	0x08000e5d
 8000998:	08000e5d 	.word	0x08000e5d
 800099c:	08000e5d 	.word	0x08000e5d
 80009a0:	08000e5d 	.word	0x08000e5d
 80009a4:	08000e5d 	.word	0x08000e5d
 80009a8:	08000e5d 	.word	0x08000e5d
 80009ac:	08000e5d 	.word	0x08000e5d
 80009b0:	08000e5d 	.word	0x08000e5d
 80009b4:	08000e5d 	.word	0x08000e5d
 80009b8:	08000e5d 	.word	0x08000e5d
 80009bc:	08000e5d 	.word	0x08000e5d
 80009c0:	08000e5d 	.word	0x08000e5d
 80009c4:	08000e5d 	.word	0x08000e5d
 80009c8:	08000e5d 	.word	0x08000e5d
 80009cc:	08000e5d 	.word	0x08000e5d
 80009d0:	08000e5d 	.word	0x08000e5d
 80009d4:	08000e4b 	.word	0x08000e4b
 80009d8:	08000e5d 	.word	0x08000e5d
 80009dc:	08000e5d 	.word	0x08000e5d
 80009e0:	08000e5d 	.word	0x08000e5d
 80009e4:	08000e5d 	.word	0x08000e5d
 80009e8:	08000e5d 	.word	0x08000e5d
 80009ec:	08000e5d 	.word	0x08000e5d
 80009f0:	08000e5d 	.word	0x08000e5d
 80009f4:	08000e5d 	.word	0x08000e5d
 80009f8:	08000e5d 	.word	0x08000e5d
 80009fc:	08000e5d 	.word	0x08000e5d
 8000a00:	08000e5d 	.word	0x08000e5d
 8000a04:	08000e5d 	.word	0x08000e5d
 8000a08:	08000e5d 	.word	0x08000e5d
 8000a0c:	08000e5d 	.word	0x08000e5d
 8000a10:	08000e5d 	.word	0x08000e5d
 8000a14:	08000e39 	.word	0x08000e39
	case 0x10: {
		printf("SDN1 ON\n");
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a1a:	f015 fd7d 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a20:	2104      	movs	r1, #4
 8000a22:	2201      	movs	r2, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f008 f975 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000a2a:	e222      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a2e:	f015 fd73 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a34:	2104      	movs	r1, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f008 f96b 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000a3e:	e218      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
 8000a40:	24000bf0 	.word	0x24000bf0
 8000a44:	240005ec 	.word	0x240005ec
 8000a48:	08016d08 	.word	0x08016d08
 8000a4c:	58020400 	.word	0x58020400
 8000a50:	08016d10 	.word	0x08016d10
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a54:	48b8      	ldr	r0, [pc, #736]	; (8000d38 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a56:	f015 fd5f 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a5a:	4bb8      	ldr	r3, [pc, #736]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f008 f957 	bl	8008d14 <HAL_GPIO_WritePin>

		break;
 8000a66:	e204      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a68:	48b5      	ldr	r0, [pc, #724]	; (8000d40 <HAL_UART_RxCpltCallback+0x6d4>)
 8000a6a:	f015 fd55 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a6e:	4bb3      	ldr	r3, [pc, #716]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a70:	2120      	movs	r1, #32
 8000a72:	2200      	movs	r2, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 f94d 	bl	8008d14 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a7a:	4bb0      	ldr	r3, [pc, #704]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f947 	bl	8008d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a86:	4baf      	ldr	r3, [pc, #700]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 f940 	bl	8008d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a94:	4bab      	ldr	r3, [pc, #684]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 f939 	bl	8008d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000aa2:	4ba8      	ldr	r3, [pc, #672]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 f932 	bl	8008d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ab0:	4ba4      	ldr	r3, [pc, #656]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 f92c 	bl	8008d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000abc:	4ba1      	ldr	r3, [pc, #644]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 f926 	bl	8008d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ac8:	4b9e      	ldr	r3, [pc, #632]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f008 f91f 	bl	8008d14 <HAL_GPIO_WritePin>

		break;
 8000ad6:	e1cc      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000ad8:	489b      	ldr	r0, [pc, #620]	; (8000d48 <HAL_UART_RxCpltCallback+0x6dc>)
 8000ada:	f015 fd1d 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ade:	4b99      	ldr	r3, [pc, #612]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f008 f914 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000aec:	e1c1      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000aee:	4897      	ldr	r0, [pc, #604]	; (8000d4c <HAL_UART_RxCpltCallback+0x6e0>)
 8000af0:	f015 fd12 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000af4:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afa:	2200      	movs	r2, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f008 f909 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000b02:	e1b6      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b04:	4892      	ldr	r0, [pc, #584]	; (8000d50 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b06:	f015 fd07 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b0a:	4b8e      	ldr	r3, [pc, #568]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 f8ff 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000b16:	e1ac      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b18:	488e      	ldr	r0, [pc, #568]	; (8000d54 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b1a:	f015 fcfd 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b1e:	4b89      	ldr	r3, [pc, #548]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	2200      	movs	r2, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f008 f8f5 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000b2a:	e1a2      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b2c:	488a      	ldr	r0, [pc, #552]	; (8000d58 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b2e:	f015 fcf3 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b32:	4b84      	ldr	r3, [pc, #528]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	2201      	movs	r2, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 f8eb 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000b3e:	e198      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b40:	4886      	ldr	r0, [pc, #536]	; (8000d5c <HAL_UART_RxCpltCallback+0x6f0>)
 8000b42:	f015 fce9 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b46:	4b7f      	ldr	r3, [pc, #508]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 f8e1 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000b52:	e18e      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b54:	4882      	ldr	r0, [pc, #520]	; (8000d60 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b56:	f015 fcdf 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b5a:	4b7a      	ldr	r3, [pc, #488]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	2201      	movs	r2, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 f8d6 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000b68:	e183      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b6a:	487e      	ldr	r0, [pc, #504]	; (8000d64 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b6c:	f015 fcd4 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b70:	4b74      	ldr	r3, [pc, #464]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	2200      	movs	r2, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f008 f8cb 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000b7e:	e178      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b80:	4879      	ldr	r0, [pc, #484]	; (8000d68 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b82:	f015 fcc9 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b86:	4b6f      	ldr	r3, [pc, #444]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 f8c0 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000b94:	e16d      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b96:	4875      	ldr	r0, [pc, #468]	; (8000d6c <HAL_UART_RxCpltCallback+0x700>)
 8000b98:	f015 fcbe 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 f8b5 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000baa:	e162      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bac:	4870      	ldr	r0, [pc, #448]	; (8000d70 <HAL_UART_RxCpltCallback+0x704>)
 8000bae:	f015 fcb3 	bl	8016518 <puts>
	    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bb2:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 f8aa 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000bc0:	e157      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bc2:	486c      	ldr	r0, [pc, #432]	; (8000d74 <HAL_UART_RxCpltCallback+0x708>)
 8000bc4:	f015 fca8 	bl	8016518 <puts>
	    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f008 f89f 	bl	8008d14 <HAL_GPIO_WritePin>

		break;
 8000bd6:	e14c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bd8:	4867      	ldr	r0, [pc, #412]	; (8000d78 <HAL_UART_RxCpltCallback+0x70c>)
 8000bda:	f015 fc9d 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bde:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	2201      	movs	r2, #1
 8000be4:	4618      	mov	r0, r3
 8000be6:	f008 f895 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000bea:	e142      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bec:	4863      	ldr	r0, [pc, #396]	; (8000d7c <HAL_UART_RxCpltCallback+0x710>)
 8000bee:	f015 fc93 	bl	8016518 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bf2:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000bf4:	2140      	movs	r1, #64	; 0x40
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f008 f88b 	bl	8008d14 <HAL_GPIO_WritePin>
		break;
 8000bfe:	e138      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c00:	485f      	ldr	r0, [pc, #380]	; (8000d80 <HAL_UART_RxCpltCallback+0x714>)
 8000c02:	f015 fc89 	bl	8016518 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c06:	2300      	movs	r3, #0
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	4a5d      	ldr	r2, [pc, #372]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	485d      	ldr	r0, [pc, #372]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000c12:	f004 fcef 	bl	80055f4 <HAL_DAC_Start_DMA>
		break;
 8000c16:	e12c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c18:	485c      	ldr	r0, [pc, #368]	; (8000d8c <HAL_UART_RxCpltCallback+0x720>)
 8000c1a:	f015 fc7d 	bl	8016518 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4859      	ldr	r0, [pc, #356]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000c22:	f004 fda7 	bl	8005774 <HAL_DAC_Stop_DMA>
		break;
 8000c26:	e124      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c28:	4859      	ldr	r0, [pc, #356]	; (8000d90 <HAL_UART_RxCpltCallback+0x724>)
 8000c2a:	f015 fc75 	bl	8016518 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	4858      	ldr	r0, [pc, #352]	; (8000d94 <HAL_UART_RxCpltCallback+0x728>)
 8000c32:	f00d fcb7 	bl	800e5a4 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c36:	4b58      	ldr	r3, [pc, #352]	; (8000d98 <HAL_UART_RxCpltCallback+0x72c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_UART_RxCpltCallback+0x730>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	801a      	strh	r2, [r3, #0]
		break;
 8000c42:	e116      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c44:	4856      	ldr	r0, [pc, #344]	; (8000da0 <HAL_UART_RxCpltCallback+0x734>)
 8000c46:	f015 fc67 	bl	8016518 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4851      	ldr	r0, [pc, #324]	; (8000d94 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fe03 	bl	800e858 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c52:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
		break;
 8000c58:	e10b      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c5a:	4852      	ldr	r0, [pc, #328]	; (8000da4 <HAL_UART_RxCpltCallback+0x738>)
 8000c5c:	f015 fc5c 	bl	8016518 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4851      	ldr	r0, [pc, #324]	; (8000da8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c64:	f00d fc9e 	bl	800e5a4 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_UART_RxCpltCallback+0x740>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c6e:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <HAL_UART_RxCpltCallback+0x744>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
		break;
 8000c74:	e0fd      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c76:	484f      	ldr	r0, [pc, #316]	; (8000db4 <HAL_UART_RxCpltCallback+0x748>)
 8000c78:	f015 fc4e 	bl	8016518 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	484a      	ldr	r0, [pc, #296]	; (8000da8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fdea 	bl	800e858 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
		break;
 8000c8a:	e0f2      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c8c:	484a      	ldr	r0, [pc, #296]	; (8000db8 <HAL_UART_RxCpltCallback+0x74c>)
 8000c8e:	f015 fc43 	bl	8016518 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4849      	ldr	r0, [pc, #292]	; (8000dbc <HAL_UART_RxCpltCallback+0x750>)
 8000c96:	f00d fc85 	bl	800e5a4 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_UART_RxCpltCallback+0x754>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000ca0:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <HAL_UART_RxCpltCallback+0x758>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
		break;
 8000ca6:	e0e4      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000ca8:	4847      	ldr	r0, [pc, #284]	; (8000dc8 <HAL_UART_RxCpltCallback+0x75c>)
 8000caa:	f015 fc35 	bl	8016518 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fdd1 	bl	800e858 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cb6:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
		break;
 8000cbc:	e0d9      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cbe:	4843      	ldr	r0, [pc, #268]	; (8000dcc <HAL_UART_RxCpltCallback+0x760>)
 8000cc0:	f015 fc2a 	bl	8016518 <puts>
		if (step < 17) {
 8000cc4:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	f200 80cb 	bhi.w	8000e64 <HAL_UART_RxCpltCallback+0x7f8>
			step+=2;
 8000cce:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cd8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cda:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4827      	ldr	r0, [pc, #156]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000cec:	f004 fde5 	bl	80058ba <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4825      	ldr	r0, [pc, #148]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000cf4:	f004 fc26 	bl	8005544 <HAL_DAC_Start>
		}
		break;
 8000cf8:	e0b4      	b.n	8000e64 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cfa:	4836      	ldr	r0, [pc, #216]	; (8000dd4 <HAL_UART_RxCpltCallback+0x768>)
 8000cfc:	f015 fc0c 	bl	8016518 <puts>
		if (step > 3) {
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	f240 80af 	bls.w	8000e68 <HAL_UART_RxCpltCallback+0x7fc>
			step-=2;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3b02      	subs	r3, #2
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d14:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000d28:	f004 fdc7 	bl	80058ba <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4816      	ldr	r0, [pc, #88]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000d30:	f004 fc08 	bl	8005544 <HAL_DAC_Start>
		}
		break;
 8000d34:	e098      	b.n	8000e68 <HAL_UART_RxCpltCallback+0x7fc>
 8000d36:	bf00      	nop
 8000d38:	08016d1c 	.word	0x08016d1c
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	08016d28 	.word	0x08016d28
 8000d44:	58020800 	.word	0x58020800
 8000d48:	08016d34 	.word	0x08016d34
 8000d4c:	08016d40 	.word	0x08016d40
 8000d50:	08016d50 	.word	0x08016d50
 8000d54:	08016d5c 	.word	0x08016d5c
 8000d58:	08016d68 	.word	0x08016d68
 8000d5c:	08016d74 	.word	0x08016d74
 8000d60:	08016d84 	.word	0x08016d84
 8000d64:	08016d90 	.word	0x08016d90
 8000d68:	08016d9c 	.word	0x08016d9c
 8000d6c:	08016da8 	.word	0x08016da8
 8000d70:	08016db4 	.word	0x08016db4
 8000d74:	08016dc4 	.word	0x08016dc4
 8000d78:	08016dd4 	.word	0x08016dd4
 8000d7c:	08016de0 	.word	0x08016de0
 8000d80:	08016df0 	.word	0x08016df0
 8000d84:	24000010 	.word	0x24000010
 8000d88:	240002f4 	.word	0x240002f4
 8000d8c:	08016e00 	.word	0x08016e00
 8000d90:	08016e10 	.word	0x08016e10
 8000d94:	24000554 	.word	0x24000554
 8000d98:	24000be7 	.word	0x24000be7
 8000d9c:	24000be2 	.word	0x24000be2
 8000da0:	08016e18 	.word	0x08016e18
 8000da4:	08016e24 	.word	0x08016e24
 8000da8:	24000508 	.word	0x24000508
 8000dac:	24000be6 	.word	0x24000be6
 8000db0:	24000be0 	.word	0x24000be0
 8000db4:	08016e2c 	.word	0x08016e2c
 8000db8:	08016e34 	.word	0x08016e34
 8000dbc:	240005a0 	.word	0x240005a0
 8000dc0:	24000be8 	.word	0x24000be8
 8000dc4:	24000be4 	.word	0x24000be4
 8000dc8:	08016e3c 	.word	0x08016e3c
 8000dcc:	08016e44 	.word	0x08016e44
 8000dd0:	2400000c 	.word	0x2400000c
 8000dd4:	08016e4c 	.word	0x08016e4c
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000dd8:	4828      	ldr	r0, [pc, #160]	; (8000e7c <HAL_UART_RxCpltCallback+0x810>)
 8000dda:	f015 fb9d 	bl	8016518 <puts>
		if (cadence <= 50000){
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d840      	bhi.n	8000e6c <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000df2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dfe:	e035      	b.n	8000e6c <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e00:	4820      	ldr	r0, [pc, #128]	; (8000e84 <HAL_UART_RxCpltCallback+0x818>)
 8000e02:	f015 fb89 	bl	8016518 <puts>
		if (cadence >= 6250){
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d92e      	bls.n	8000e70 <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	085b      	lsrs	r3, r3, #1
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e1a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e26:	e023      	b.n	8000e70 <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e28:	4817      	ldr	r0, [pc, #92]	; (8000e88 <HAL_UART_RxCpltCallback+0x81c>)
 8000e2a:	f015 fb75 	bl	8016518 <puts>
		// TODO: Exit stop mode
		break;
 8000e2e:	e020      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e30:	4816      	ldr	r0, [pc, #88]	; (8000e8c <HAL_UART_RxCpltCallback+0x820>)
 8000e32:	f015 fb71 	bl	8016518 <puts>
		// TODO: Enter stop mode
		break;
 8000e36:	e01c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e38:	4815      	ldr	r0, [pc, #84]	; (8000e90 <HAL_UART_RxCpltCallback+0x824>)
 8000e3a:	f015 fb6d 	bl	8016518 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_RxCpltCallback+0x828>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f013 fbca 	bl	80145dc <xTaskResumeFromISR>
		break;
 8000e48:	e013      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e4a:	4813      	ldr	r0, [pc, #76]	; (8000e98 <HAL_UART_RxCpltCallback+0x82c>)
 8000e4c:	f015 fb64 	bl	8016518 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_UART_RxCpltCallback+0x830>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f013 fbc1 	bl	80145dc <xTaskResumeFromISR>
		break;
 8000e5a:	e00a      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	default:{
		printf("Unknown Command\n");
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <HAL_UART_RxCpltCallback+0x834>)
 8000e5e:	f015 fb5b 	bl	8016518 <puts>
		break;
 8000e62:	e006      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e64:	bf00      	nop
 8000e66:	e004      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e68:	bf00      	nop
 8000e6a:	e002      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e70:	bf00      	nop
	}
	}
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08016e58 	.word	0x08016e58
 8000e80:	24000008 	.word	0x24000008
 8000e84:	08016e64 	.word	0x08016e64
 8000e88:	08016e70 	.word	0x08016e70
 8000e8c:	08016e80 	.word	0x08016e80
 8000e90:	08016e90 	.word	0x08016e90
 8000e94:	24000708 	.word	0x24000708
 8000e98:	08016e9c 	.word	0x08016e9c
 8000e9c:	24000968 	.word	0x24000968
 8000ea0:	08016ea8 	.word	0x08016ea8

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f002 fdb8 	bl	8003a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f8a4 	bl	8000ff8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eb0:	f000 f92c 	bl	800110c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 fe86 	bl	8001bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb8:	f000 fe4c 	bl	8001b54 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ebc:	f000 fdb0 	bl	8001a20 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 fdfc 	bl	8001abc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ec4:	f000 fb38 	bl	8001538 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ec8:	f000 fc2e 	bl	8001728 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ecc:	f000 fd32 	bl	8001934 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ed0:	f000 fc82 	bl	80017d8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ed4:	f000 fa6c 	bl	80013b0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000ed8:	f000 f948 	bl	800116c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000edc:	f000 fafa 	bl	80014d4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000ee0:	f000 fbca 	bl	8001678 <MX_SPI1_Init>
  MX_RTC_Init();
 8000ee4:	f000 fb6a 	bl	80015bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000ee8:	f001 f860 	bl	8001fac <handshake>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <main+0x52>
	{
		Error_Handler();
 8000ef2:	f001 fe7d 	bl	8002bf0 <Error_Handler>
	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ef6:	f011 fd23 	bl	8012940 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2108      	movs	r1, #8
 8000efe:	2010      	movs	r0, #16
 8000f00:	f011 ff40 	bl	8012d84 <osMessageQueueNew>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <main+0xf4>)
 8000f08:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f0a:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <main+0xf8>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4824      	ldr	r0, [pc, #144]	; (8000fa0 <main+0xfc>)
 8000f10:	f011 fd60 	bl	80129d4 <osThreadNew>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <main+0x100>)
 8000f18:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <main+0x104>)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4823      	ldr	r0, [pc, #140]	; (8000fac <main+0x108>)
 8000f20:	f011 fd58 	bl	80129d4 <osThreadNew>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <main+0x10c>)
 8000f28:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <main+0x110>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <main+0x114>)
 8000f30:	f011 fd50 	bl	80129d4 <osThreadNew>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <main+0x118>)
 8000f38:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f3a:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <main+0x11c>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <main+0x120>)
 8000f40:	f011 fd48 	bl	80129d4 <osThreadNew>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <main+0x124>)
 8000f48:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f4a:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <main+0x128>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <main+0x12c>)
 8000f50:	f011 fd40 	bl	80129d4 <osThreadNew>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <main+0x130>)
 8000f58:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <main+0x134>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	481f      	ldr	r0, [pc, #124]	; (8000fdc <main+0x138>)
 8000f60:	f011 fd38 	bl	80129d4 <osThreadNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <main+0x13c>)
 8000f68:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <main+0x140>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	481e      	ldr	r0, [pc, #120]	; (8000fe8 <main+0x144>)
 8000f70:	f011 fd30 	bl	80129d4 <osThreadNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <main+0x148>)
 8000f78:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f011 fe18 	bl	8012bb0 <osEventFlagsNew>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <main+0x14c>)
 8000f84:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f86:	f001 f89f 	bl	80020c8 <system_setup>
	printf("Starting kernal...\n");
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <main+0x150>)
 8000f8c:	f015 fac4 	bl	8016518 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f90:	f011 fcfa 	bl	8012988 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f94:	e7fe      	b.n	8000f94 <main+0xf0>
 8000f96:	bf00      	nop
 8000f98:	24000bd0 	.word	0x24000bd0
 8000f9c:	08016f04 	.word	0x08016f04
 8000fa0:	080028dd 	.word	0x080028dd
 8000fa4:	240006f8 	.word	0x240006f8
 8000fa8:	08016f28 	.word	0x08016f28
 8000fac:	08002921 	.word	0x08002921
 8000fb0:	240006fc 	.word	0x240006fc
 8000fb4:	08016f4c 	.word	0x08016f4c
 8000fb8:	08002965 	.word	0x08002965
 8000fbc:	24000700 	.word	0x24000700
 8000fc0:	08016f70 	.word	0x08016f70
 8000fc4:	080029a9 	.word	0x080029a9
 8000fc8:	24000704 	.word	0x24000704
 8000fcc:	08016f94 	.word	0x08016f94
 8000fd0:	080029cd 	.word	0x080029cd
 8000fd4:	24000708 	.word	0x24000708
 8000fd8:	08016fb8 	.word	0x08016fb8
 8000fdc:	08002a75 	.word	0x08002a75
 8000fe0:	24000968 	.word	0x24000968
 8000fe4:	08016fdc 	.word	0x08016fdc
 8000fe8:	08002b1d 	.word	0x08002b1d
 8000fec:	24000bc8 	.word	0x24000bc8
 8000ff0:	24000bec 	.word	0x24000bec
 8000ff4:	08016eb8 	.word	0x08016eb8

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09c      	sub	sp, #112	; 0x70
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	224c      	movs	r2, #76	; 0x4c
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f015 f930 	bl	801626c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2220      	movs	r2, #32
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f015 f92a 	bl	801626c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001018:	2002      	movs	r0, #2
 800101a:	f008 fcb1 	bl	8009980 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <SystemClock_Config+0x108>)
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	4a36      	ldr	r2, [pc, #216]	; (8001100 <SystemClock_Config+0x108>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <SystemClock_Config+0x108>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	4b32      	ldr	r3, [pc, #200]	; (8001104 <SystemClock_Config+0x10c>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001040:	4a30      	ldr	r2, [pc, #192]	; (8001104 <SystemClock_Config+0x10c>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <SystemClock_Config+0x10c>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001054:	bf00      	nop
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <SystemClock_Config+0x10c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800105e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001062:	d1f8      	bne.n	8001056 <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001064:	f008 fc7c 	bl	8009960 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001068:	f002 fd34 	bl	8003ad4 <HAL_GetREVID>
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <SystemClock_Config+0x110>)
 800106e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001070:	4a25      	ldr	r2, [pc, #148]	; (8001108 <SystemClock_Config+0x110>)
 8001072:	f023 0318 	bic.w	r3, r3, #24
 8001076:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001078:	2305      	movs	r3, #5
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001082:	2301      	movs	r3, #1
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108a:	2302      	movs	r3, #2
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800108e:	2304      	movs	r3, #4
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001092:	2320      	movs	r3, #32
 8001094:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001096:	2304      	movs	r3, #4
 8001098:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800109a:	2304      	movs	r3, #4
 800109c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010a2:	2308      	movs	r3, #8
 80010a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f008 fc9e 	bl	80099f4 <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010be:	f001 fd97 	bl	8002bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	233f      	movs	r3, #63	; 0x3f
 80010c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2303      	movs	r3, #3
 80010c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2101      	movs	r1, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f009 f8de 	bl	800a2a8 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80010f2:	f001 fd7d 	bl	8002bf0 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3770      	adds	r7, #112	; 0x70
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	58000400 	.word	0x58000400
 8001104:	58024800 	.word	0x58024800
 8001108:	58024400 	.word	0x58024400

0800110c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0b0      	sub	sp, #192	; 0xc0
 8001110:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	22c0      	movs	r2, #192	; 0xc0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f015 f8a7 	bl	801626c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800111e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800112a:	2304      	movs	r3, #4
 800112c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800112e:	2320      	movs	r3, #32
 8001130:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001132:	2308      	movs	r3, #8
 8001134:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001136:	2304      	movs	r3, #4
 8001138:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f009 fc76 	bl	800aa44 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800115e:	f001 fd47 	bl	8002bf0 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	37c0      	adds	r7, #192	; 0xc0
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001190:	4b7a      	ldr	r3, [pc, #488]	; (800137c <MX_ADC1_Init+0x210>)
 8001192:	4a7b      	ldr	r2, [pc, #492]	; (8001380 <MX_ADC1_Init+0x214>)
 8001194:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001196:	4b79      	ldr	r3, [pc, #484]	; (800137c <MX_ADC1_Init+0x210>)
 8001198:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800119c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800119e:	4b77      	ldr	r3, [pc, #476]	; (800137c <MX_ADC1_Init+0x210>)
 80011a0:	2208      	movs	r2, #8
 80011a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011a4:	4b75      	ldr	r3, [pc, #468]	; (800137c <MX_ADC1_Init+0x210>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011aa:	4b74      	ldr	r3, [pc, #464]	; (800137c <MX_ADC1_Init+0x210>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b0:	4b72      	ldr	r3, [pc, #456]	; (800137c <MX_ADC1_Init+0x210>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b6:	4b71      	ldr	r3, [pc, #452]	; (800137c <MX_ADC1_Init+0x210>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011bc:	4b6f      	ldr	r3, [pc, #444]	; (800137c <MX_ADC1_Init+0x210>)
 80011be:	220b      	movs	r2, #11
 80011c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c2:	4b6e      	ldr	r3, [pc, #440]	; (800137c <MX_ADC1_Init+0x210>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c8:	4b6c      	ldr	r3, [pc, #432]	; (800137c <MX_ADC1_Init+0x210>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ce:	4b6b      	ldr	r3, [pc, #428]	; (800137c <MX_ADC1_Init+0x210>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011d4:	4b69      	ldr	r3, [pc, #420]	; (800137c <MX_ADC1_Init+0x210>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011da:	4b68      	ldr	r3, [pc, #416]	; (800137c <MX_ADC1_Init+0x210>)
 80011dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011e2:	4b66      	ldr	r3, [pc, #408]	; (800137c <MX_ADC1_Init+0x210>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011e8:	4b64      	ldr	r3, [pc, #400]	; (800137c <MX_ADC1_Init+0x210>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f0:	4862      	ldr	r0, [pc, #392]	; (800137c <MX_ADC1_Init+0x210>)
 80011f2:	f002 fe9f 	bl	8003f34 <HAL_ADC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011fc:	f001 fcf8 	bl	8002bf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	485c      	ldr	r0, [pc, #368]	; (800137c <MX_ADC1_Init+0x210>)
 800120c:	f003 ffba 	bl	8005184 <HAL_ADCEx_MultiModeConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001216:	f001 fceb 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <MX_ADC1_Init+0x218>)
 800121c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121e:	2306      	movs	r3, #6
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001222:	2307      	movs	r3, #7
 8001224:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001226:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800122a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800122c:	2304      	movs	r3, #4
 800122e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	484f      	ldr	r0, [pc, #316]	; (800137c <MX_ADC1_Init+0x210>)
 800123e:	f003 f8fd 	bl	800443c <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001248:	f001 fcd2 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <MX_ADC1_Init+0x21c>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001250:	230c      	movs	r3, #12
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4848      	ldr	r0, [pc, #288]	; (800137c <MX_ADC1_Init+0x210>)
 800125a:	f003 f8ef 	bl	800443c <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001264:	f001 fcc4 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001268:	4b48      	ldr	r3, [pc, #288]	; (800138c <MX_ADC1_Init+0x220>)
 800126a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800126c:	2312      	movs	r3, #18
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4841      	ldr	r0, [pc, #260]	; (800137c <MX_ADC1_Init+0x210>)
 8001276:	f003 f8e1 	bl	800443c <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001280:	f001 fcb6 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001284:	4b42      	ldr	r3, [pc, #264]	; (8001390 <MX_ADC1_Init+0x224>)
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001288:	2318      	movs	r3, #24
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	483a      	ldr	r0, [pc, #232]	; (800137c <MX_ADC1_Init+0x210>)
 8001292:	f003 f8d3 	bl	800443c <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800129c:	f001 fca8 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012a0:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <MX_ADC1_Init+0x228>)
 80012a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4833      	ldr	r0, [pc, #204]	; (800137c <MX_ADC1_Init+0x210>)
 80012b0:	f003 f8c4 	bl	800443c <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012ba:	f001 fc99 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012be:	4b36      	ldr	r3, [pc, #216]	; (8001398 <MX_ADC1_Init+0x22c>)
 80012c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012c2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	482b      	ldr	r0, [pc, #172]	; (800137c <MX_ADC1_Init+0x210>)
 80012ce:	f003 f8b5 	bl	800443c <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012d8:	f001 fc8a 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <MX_ADC1_Init+0x230>)
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012e0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4824      	ldr	r0, [pc, #144]	; (800137c <MX_ADC1_Init+0x210>)
 80012ec:	f003 f8a6 	bl	800443c <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012f6:	f001 fc7b 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <MX_ADC1_Init+0x234>)
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012fe:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001302:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	481c      	ldr	r0, [pc, #112]	; (800137c <MX_ADC1_Init+0x210>)
 800130a:	f003 f897 	bl	800443c <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001314:	f001 fc6c 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <MX_ADC1_Init+0x238>)
 800131a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800131c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001320:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	4815      	ldr	r0, [pc, #84]	; (800137c <MX_ADC1_Init+0x210>)
 8001328:	f003 f888 	bl	800443c <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001332:	f001 fc5d 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_ADC1_Init+0x23c>)
 8001338:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800133a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_ADC1_Init+0x210>)
 8001346:	f003 f879 	bl	800443c <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001350:	f001 fc4e 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_ADC1_Init+0x240>)
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001358:	f240 2306 	movw	r3, #518	; 0x206
 800135c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_ADC1_Init+0x210>)
 8001364:	f003 f86a 	bl	800443c <HAL_ADC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800136e:	f001 fc3f 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2400013c 	.word	0x2400013c
 8001380:	40022000 	.word	0x40022000
 8001384:	0c900008 	.word	0x0c900008
 8001388:	10c00010 	.word	0x10c00010
 800138c:	14f00020 	.word	0x14f00020
 8001390:	1d500080 	.word	0x1d500080
 8001394:	21800100 	.word	0x21800100
 8001398:	25b00200 	.word	0x25b00200
 800139c:	2a000400 	.word	0x2a000400
 80013a0:	2e300800 	.word	0x2e300800
 80013a4:	3ac04000 	.word	0x3ac04000
 80013a8:	3ef08000 	.word	0x3ef08000
 80013ac:	47520000 	.word	0x47520000

080013b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013c8:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013ca:	4a3e      	ldr	r2, [pc, #248]	; (80014c4 <MX_ADC3_Init+0x114>)
 80013cc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013ce:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013d4:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013da:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013dc:	2204      	movs	r2, #4
 80013de:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013e0:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013ee:	2204      	movs	r2, #4
 80013f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <MX_ADC3_Init+0x110>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fe:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <MX_ADC3_Init+0x110>)
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001404:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <MX_ADC3_Init+0x110>)
 8001406:	2203      	movs	r2, #3
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <MX_ADC3_Init+0x110>)
 800140c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <MX_ADC3_Init+0x110>)
 8001414:	2200      	movs	r2, #0
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <MX_ADC3_Init+0x110>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001420:	4827      	ldr	r0, [pc, #156]	; (80014c0 <MX_ADC3_Init+0x110>)
 8001422:	f002 fd87 	bl	8003f34 <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800142c:	f001 fbe0 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <MX_ADC3_Init+0x118>)
 8001432:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001434:	2306      	movs	r3, #6
 8001436:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001438:	2307      	movs	r3, #7
 800143a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800143c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001440:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001442:	2304      	movs	r3, #4
 8001444:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	481b      	ldr	r0, [pc, #108]	; (80014c0 <MX_ADC3_Init+0x110>)
 8001454:	f002 fff2 	bl	800443c <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800145e:	f001 fbc7 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_ADC3_Init+0x11c>)
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001466:	230c      	movs	r3, #12
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_ADC3_Init+0x110>)
 8001470:	f002 ffe4 	bl	800443c <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800147a:	f001 fbb9 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800147e:	2301      	movs	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001482:	2312      	movs	r3, #18
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_ADC3_Init+0x110>)
 800148c:	f002 ffd6 	bl	800443c <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001496:	f001 fbab 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_ADC3_Init+0x120>)
 800149c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800149e:	2318      	movs	r3, #24
 80014a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <MX_ADC3_Init+0x110>)
 80014a8:	f002 ffc8 	bl	800443c <HAL_ADC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014b2:	f001 fb9d 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3720      	adds	r7, #32
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	240001a0 	.word	0x240001a0
 80014c4:	58026000 	.word	0x58026000
 80014c8:	cb840000 	.word	0xcb840000
 80014cc:	cfb80000 	.word	0xcfb80000
 80014d0:	04300002 	.word	0x04300002

080014d4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2224      	movs	r2, #36	; 0x24
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f014 fec3 	bl	801626c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_DAC1_Init+0x5c>)
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_DAC1_Init+0x60>)
 80014ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <MX_DAC1_Init+0x5c>)
 80014ee:	f004 f807 	bl	8005500 <HAL_DAC_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014f8:	f001 fb7a 	bl	8002bf0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001500:	230a      	movs	r3, #10
 8001502:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001508:	2301      	movs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_DAC1_Init+0x5c>)
 8001518:	f004 fa22 	bl	8005960 <HAL_DAC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001522:	f001 fb65 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	240002f4 	.word	0x240002f4
 8001534:	40007400 	.word	0x40007400

08001538 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_I2C1_Init+0x78>)
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <MX_I2C1_Init+0x7c>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001544:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <MX_I2C1_Init+0x80>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MX_I2C1_Init+0x78>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001550:	2201      	movs	r2, #1
 8001552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_I2C1_Init+0x78>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_I2C1_Init+0x78>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001572:	480f      	ldr	r0, [pc, #60]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001574:	f007 fbe8 	bl	8008d48 <HAL_I2C_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800157e:	f001 fb37 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001586:	f008 f92f 	bl	80097e8 <HAL_I2CEx_ConfigAnalogFilter>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001590:	f001 fb2e 	bl	8002bf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001598:	f008 f971 	bl	800987e <HAL_I2CEx_ConfigDigitalFilter>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f001 fb25 	bl	8002bf0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f008 f9b6 	bl	8009918 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	24000380 	.word	0x24000380
 80015b4:	40005400 	.word	0x40005400
 80015b8:	0020081f 	.word	0x0020081f

080015bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <MX_RTC_Init+0xb4>)
 80015d6:	4a27      	ldr	r2, [pc, #156]	; (8001674 <MX_RTC_Init+0xb8>)
 80015d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <MX_RTC_Init+0xb4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <MX_RTC_Init+0xb4>)
 80015e2:	2220      	movs	r2, #32
 80015e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1024;
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <MX_RTC_Init+0xb4>)
 80015e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <MX_RTC_Init+0xb4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_RTC_Init+0xb4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_RTC_Init+0xb4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_RTC_Init+0xb4>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001606:	481a      	ldr	r0, [pc, #104]	; (8001670 <MX_RTC_Init+0xb4>)
 8001608:	f00b ff1a 	bl	800d440 <HAL_RTC_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001612:	f001 faed 	bl	8002bf0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001616:	2300      	movs	r3, #0
 8001618:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800161a:	2300      	movs	r3, #0
 800161c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800161e:	2300      	movs	r3, #0
 8001620:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2201      	movs	r2, #1
 800162e:	4619      	mov	r1, r3
 8001630:	480f      	ldr	r0, [pc, #60]	; (8001670 <MX_RTC_Init+0xb4>)
 8001632:	f00b ff87 	bl	800d544 <HAL_RTC_SetTime>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800163c:	f001 fad8 	bl	8002bf0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001640:	2301      	movs	r3, #1
 8001642:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001644:	2301      	movs	r3, #1
 8001646:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001648:	2301      	movs	r3, #1
 800164a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800164c:	2300      	movs	r3, #0
 800164e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	2201      	movs	r2, #1
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_RTC_Init+0xb4>)
 8001658:	f00c f86e 	bl	800d738 <HAL_RTC_SetDate>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001662:	f001 fac5 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	240003d4 	.word	0x240003d4
 8001674:	58004000 	.word	0x58004000

08001678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <MX_SPI1_Init+0xa8>)
 800167e:	4a29      	ldr	r2, [pc, #164]	; (8001724 <MX_SPI1_Init+0xac>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <MX_SPI1_Init+0xa8>)
 8001684:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <MX_SPI1_Init+0xa8>)
 800168c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001690:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <MX_SPI1_Init+0xa8>)
 8001694:	220f      	movs	r2, #15
 8001696:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MX_SPI1_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016ae:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_SPI1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_SPI1_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_SPI1_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_SPI1_Init+0xa8>)
 800170c:	f00c f9ba 	bl	800da84 <HAL_SPI_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001716:	f001 fa6b 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	240003f8 	.word	0x240003f8
 8001724:	40013000 	.word	0x40013000

08001728 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <MX_SPI2_Init+0xa8>)
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <MX_SPI2_Init+0xac>)
 8001730:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001732:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001734:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001738:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <MX_SPI2_Init+0xa8>)
 800173c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001740:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001744:	220f      	movs	r2, #15
 8001746:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MX_SPI2_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001756:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800175a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_SPI2_Init+0xa8>)
 800175e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001762:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <MX_SPI2_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_SPI2_Init+0xa8>)
 800177e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_SPI2_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_SPI2_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_SPI2_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_SPI2_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_SPI2_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_SPI2_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_SPI2_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_SPI2_Init+0xa8>)
 80017bc:	f00c f962 	bl	800da84 <HAL_SPI_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017c6:	f001 fa13 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	24000480 	.word	0x24000480
 80017d4:	40003800 	.word	0x40003800

080017d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b09a      	sub	sp, #104	; 0x68
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	222c      	movs	r2, #44	; 0x2c
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f014 fd2a 	bl	801626c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <MX_TIM1_Init+0x154>)
 800181a:	4a45      	ldr	r2, [pc, #276]	; (8001930 <MX_TIM1_Init+0x158>)
 800181c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <MX_TIM1_Init+0x154>)
 8001820:	2231      	movs	r2, #49	; 0x31
 8001822:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b41      	ldr	r3, [pc, #260]	; (800192c <MX_TIM1_Init+0x154>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <MX_TIM1_Init+0x154>)
 800182c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001830:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <MX_TIM1_Init+0x154>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001838:	4b3c      	ldr	r3, [pc, #240]	; (800192c <MX_TIM1_Init+0x154>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <MX_TIM1_Init+0x154>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001844:	4839      	ldr	r0, [pc, #228]	; (800192c <MX_TIM1_Init+0x154>)
 8001846:	f00c fd6e 	bl	800e326 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001850:	f001 f9ce 	bl	8002bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001858:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800185a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800185e:	4619      	mov	r1, r3
 8001860:	4832      	ldr	r0, [pc, #200]	; (800192c <MX_TIM1_Init+0x154>)
 8001862:	f00d fb59 	bl	800ef18 <HAL_TIM_ConfigClockSource>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800186c:	f001 f9c0 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001870:	482e      	ldr	r0, [pc, #184]	; (800192c <MX_TIM1_Init+0x154>)
 8001872:	f00d f8d5 	bl	800ea20 <HAL_TIM_PWM_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800187c:	f001 f9b8 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800188c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001890:	4619      	mov	r1, r3
 8001892:	4826      	ldr	r0, [pc, #152]	; (800192c <MX_TIM1_Init+0x154>)
 8001894:	f00e f896 	bl	800f9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800189e:	f001 f9a7 	bl	8002bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a2:	2360      	movs	r3, #96	; 0x60
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80018a6:	f240 13df 	movw	r3, #479	; 0x1df
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4818      	ldr	r0, [pc, #96]	; (800192c <MX_TIM1_Init+0x154>)
 80018ca:	f00d fa11 	bl	800ecf0 <HAL_TIM_PWM_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018d4:	f001 f98c 	bl	8002bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <MX_TIM1_Init+0x154>)
 800190e:	f00e f8e7 	bl	800fae0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001918:	f001 f96a 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <MX_TIM1_Init+0x154>)
 800191e:	f001 fcf5 	bl	800330c <HAL_TIM_MspPostInit>

}
 8001922:	bf00      	nop
 8001924:	3768      	adds	r7, #104	; 0x68
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	24000508 	.word	0x24000508
 8001930:	40010000 	.word	0x40010000

08001934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	; 0x38
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001970:	2231      	movs	r2, #49	; 0x31
 8001972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_TIM2_Init+0xe8>)
 800197c:	f640 4234 	movw	r2, #3124	; 0xc34
 8001980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_TIM2_Init+0xe8>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800198e:	4823      	ldr	r0, [pc, #140]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001990:	f00c fcc9 	bl	800e326 <HAL_TIM_Base_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800199a:	f001 f929 	bl	8002bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a8:	4619      	mov	r1, r3
 80019aa:	481c      	ldr	r0, [pc, #112]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019ac:	f00d fab4 	bl	800ef18 <HAL_TIM_ConfigClockSource>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019b6:	f001 f91b 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019bc:	f00d f830 	bl	800ea20 <HAL_TIM_PWM_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019c6:	f001 f913 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ca:	2320      	movs	r3, #32
 80019cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4810      	ldr	r0, [pc, #64]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019da:	f00d fff3 	bl	800f9c4 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019e4:	f001 f904 	bl	8002bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e8:	2360      	movs	r3, #96	; 0x60
 80019ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	220c      	movs	r2, #12
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001a00:	f00d f976 	bl	800ecf0 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a0a:	f001 f8f1 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001a10:	f001 fc7c 	bl	800330c <HAL_TIM_MspPostInit>

}
 8001a14:	bf00      	nop
 8001a16:	3738      	adds	r7, #56	; 0x38
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	24000554 	.word	0x24000554

08001a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a46:	2263      	movs	r2, #99	; 0x63
 8001a48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a52:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a64:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a66:	f00c fc5e 	bl	800e326 <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a70:	f001 f8be 	bl	8002bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a82:	f00d fa49 	bl	800ef18 <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a8c:	f001 f8b0 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_TIM3_Init+0x94>)
 8001a9e:	f00d ff91 	bl	800f9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001aa8:	f001 f8a2 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	240005a0 	.word	0x240005a0
 8001ab8:	40000400 	.word	0x40000400

08001abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ac2:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <MX_USART1_UART_Init+0x94>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ac8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b06:	f00e f887 	bl	800fc18 <HAL_UART_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b10:	f001 f86e 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b14:	2100      	movs	r1, #0
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b18:	f010 fe03 	bl	8012722 <HAL_UARTEx_SetTxFifoThreshold>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b22:	f001 f865 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b2a:	f010 fe38 	bl	801279e <HAL_UARTEx_SetRxFifoThreshold>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b34:	f001 f85c 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_USART1_UART_Init+0x90>)
 8001b3a:	f010 fdb9 	bl	80126b0 <HAL_UARTEx_DisableFifoMode>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b44:	f001 f854 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	240005ec 	.word	0x240005ec
 8001b50:	40011000 	.word	0x40011000

08001b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_DMA_Init+0x6c>)
 8001b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b60:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <MX_DMA_Init+0x6c>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_DMA_Init+0x6c>)
 8001b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2105      	movs	r1, #5
 8001b7c:	200b      	movs	r0, #11
 8001b7e:	f003 fc97 	bl	80054b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b82:	200b      	movs	r0, #11
 8001b84:	f003 fcae 	bl	80054e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2105      	movs	r1, #5
 8001b8c:	200c      	movs	r0, #12
 8001b8e:	f003 fc8f 	bl	80054b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b92:	200c      	movs	r0, #12
 8001b94:	f003 fca6 	bl	80054e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2105      	movs	r1, #5
 8001b9c:	200d      	movs	r0, #13
 8001b9e:	f003 fc87 	bl	80054b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ba2:	200d      	movs	r0, #13
 8001ba4:	f003 fc9e 	bl	80054e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2105      	movs	r1, #5
 8001bac:	2010      	movs	r0, #16
 8001bae:	f003 fc7f 	bl	80054b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bb2:	2010      	movs	r0, #16
 8001bb4:	f003 fc96 	bl	80054e4 <HAL_NVIC_EnableIRQ>

}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	58024400 	.word	0x58024400

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	4a32      	ldr	r2, [pc, #200]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bea:	4b30      	ldr	r3, [pc, #192]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	4a2b      	ldr	r2, [pc, #172]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <MX_GPIO_Init+0xe8>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c52:	2200      	movs	r2, #0
 8001c54:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c58:	4815      	ldr	r0, [pc, #84]	; (8001cb0 <MX_GPIO_Init+0xec>)
 8001c5a:	f007 f85b 	bl	8008d14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2164      	movs	r1, #100	; 0x64
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <MX_GPIO_Init+0xf0>)
 8001c64:	f007 f856 	bl	8008d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c68:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <MX_GPIO_Init+0xec>)
 8001c82:	f006 fe7f 	bl	8008984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c86:	2364      	movs	r3, #100	; 0x64
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_GPIO_Init+0xf0>)
 8001c9e:	f006 fe71 	bl	8008984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	58020800 	.word	0x58020800
 8001cb4:	58020400 	.word	0x58020400

08001cb8 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	b299      	uxth	r1, r3
 8001cca:	f107 0208 	add.w	r2, r7, #8
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	4817      	ldr	r0, [pc, #92]	; (8001d34 <poll_i2c_sensor+0x7c>)
 8001cd8:	f007 f8d2 	bl	8008e80 <HAL_I2C_Master_Transmit>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001ce6:	4814      	ldr	r0, [pc, #80]	; (8001d38 <poll_i2c_sensor+0x80>)
 8001ce8:	f014 fc16 	bl	8016518 <puts>
 8001cec:	e01c      	b.n	8001d28 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	b299      	uxth	r1, r3
 8001cf2:	f107 0208 	add.w	r2, r7, #8
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	480d      	ldr	r0, [pc, #52]	; (8001d34 <poll_i2c_sensor+0x7c>)
 8001d00:	f007 f9d6 	bl	80090b0 <HAL_I2C_Master_Receive>
 8001d04:	4603      	mov	r3, r0
 8001d06:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001d08:	7b7b      	ldrb	r3, [r7, #13]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <poll_i2c_sensor+0x84>)
 8001d10:	f014 fc02 	bl	8016518 <puts>
 8001d14:	e008      	b.n	8001d28 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001d16:	7a3b      	ldrb	r3, [r7, #8]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001d1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d20:	7a7a      	ldrb	r2, [r7, #9]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	10db      	asrs	r3, r3, #3
 8001d26:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001d28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	24000380 	.word	0x24000380
 8001d38:	08016ecc 	.word	0x08016ecc
 8001d3c:	08016edc 	.word	0x08016edc

08001d40 <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001d48:	f107 010c 	add.w	r1, r7, #12
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	2201      	movs	r2, #1
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <receive_pmt_spi+0x44>)
 8001d52:	f00b ffbb 	bl	800dccc <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d5a:	7b7b      	ldrb	r3, [r7, #13]
 8001d5c:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <receive_pmt_spi+0x44>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <receive_pmt_spi+0x44>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d6c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7bba      	ldrb	r2, [r7, #14]
 8001d72:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3301      	adds	r3, #1
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	701a      	strb	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	240003f8 	.word	0x240003f8

08001d88 <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d90:	f107 010c 	add.w	r1, r7, #12
 8001d94:	2364      	movs	r3, #100	; 0x64
 8001d96:	2201      	movs	r2, #1
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <receive_erpa_spi+0x44>)
 8001d9a:	f00b ff97 	bl	800dccc <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001da2:	7b7b      	ldrb	r3, [r7, #13]
 8001da4:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <receive_erpa_spi+0x44>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <receive_erpa_spi+0x44>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001db4:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	701a      	strb	r2, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	24000480 	.word	0x24000480

08001dd0 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <receive_erpa_adc+0x30>)
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <receive_erpa_adc+0x30>)
 8001de0:	895b      	ldrh	r3, [r3, #10]
 8001de2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	89fa      	ldrh	r2, [r7, #14]
 8001de8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3302      	adds	r3, #2
 8001dee:	89ba      	ldrh	r2, [r7, #12]
 8001df0:	801a      	strh	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	24000c60 	.word	0x24000c60

08001e04 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001e0c:	2390      	movs	r3, #144	; 0x90
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff52 	bl	8001cb8 <poll_i2c_sensor>
 8001e14:	4603      	mov	r3, r0
 8001e16:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001e18:	2394      	movs	r3, #148	; 0x94
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff4c 	bl	8001cb8 <poll_i2c_sensor>
 8001e20:	4603      	mov	r3, r0
 8001e22:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001e24:	2392      	movs	r3, #146	; 0x92
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff46 	bl	8001cb8 <poll_i2c_sensor>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001e30:	2396      	movs	r3, #150	; 0x96
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff40 	bl	8001cb8 <poll_i2c_sensor>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	89fa      	ldrh	r2, [r7, #14]
 8001e40:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3302      	adds	r3, #2
 8001e46:	89ba      	ldrh	r2, [r7, #12]
 8001e48:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	897a      	ldrh	r2, [r7, #10]
 8001e50:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3306      	adds	r3, #6
 8001e56:	893a      	ldrh	r2, [r7, #8]
 8001e58:	801a      	strh	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e6e:	8a9b      	ldrh	r3, [r3, #20]
 8001e70:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e74:	8a1b      	ldrh	r3, [r3, #16]
 8001e76:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e7a:	899b      	ldrh	r3, [r3, #12]
 8001e7c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e80:	8a5b      	ldrh	r3, [r3, #18]
 8001e82:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e86:	889b      	ldrh	r3, [r3, #4]
 8001e88:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e8c:	88db      	ldrh	r3, [r3, #6]
 8001e8e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e92:	89db      	ldrh	r3, [r3, #14]
 8001e94:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e98:	891b      	ldrh	r3, [r3, #8]
 8001e9a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <receive_hk_adc1+0x90>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8bfa      	ldrh	r2, [r7, #30]
 8001ea6:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3302      	adds	r3, #2
 8001eac:	8bba      	ldrh	r2, [r7, #28]
 8001eae:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	8b7a      	ldrh	r2, [r7, #26]
 8001eb6:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3306      	adds	r3, #6
 8001ebc:	8b3a      	ldrh	r2, [r7, #24]
 8001ebe:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	8afa      	ldrh	r2, [r7, #22]
 8001ec6:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	330a      	adds	r3, #10
 8001ecc:	8aba      	ldrh	r2, [r7, #20]
 8001ece:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	330c      	adds	r3, #12
 8001ed4:	8a7a      	ldrh	r2, [r7, #18]
 8001ed6:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	330e      	adds	r3, #14
 8001edc:	8a3a      	ldrh	r2, [r7, #16]
 8001ede:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3310      	adds	r3, #16
 8001ee4:	89fa      	ldrh	r2, [r7, #14]
 8001ee6:	801a      	strh	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	3724      	adds	r7, #36	; 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	24000c60 	.word	0x24000c60

08001ef8 <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <receive_hk_adc3+0x4c>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <receive_hk_adc3+0x4c>)
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <receive_hk_adc3+0x4c>)
 8001f0e:	889b      	ldrh	r3, [r3, #4]
 8001f10:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <receive_hk_adc3+0x4c>)
 8001f14:	88db      	ldrh	r3, [r3, #6]
 8001f16:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	89fa      	ldrh	r2, [r7, #14]
 8001f1c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3302      	adds	r3, #2
 8001f22:	89ba      	ldrh	r2, [r7, #12]
 8001f24:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	897a      	ldrh	r2, [r7, #10]
 8001f2c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3306      	adds	r3, #6
 8001f32:	893a      	ldrh	r2, [r7, #8]
 8001f34:	801a      	strh	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	24000c80 	.word	0x24000c80

08001f48 <HAL_UART_TxCpltCallback>:

// *********************************************************************************************************** HELPER FUNCTIONS
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_UART_TxCpltCallback+0x1c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	24000000 	.word	0x24000000

08001f68 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f014 f959 	bl	8016230 <malloc>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	88fa      	ldrh	r2, [r7, #6]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f014 f961 	bl	8016250 <memcpy>
    packet.size = size;
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	461a      	mov	r2, r3
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <handshake>:

int handshake()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b090      	sub	sp, #64	; 0x40
 8001fb0:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001fb6:	f107 011c 	add.w	r1, r7, #28
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	2209      	movs	r2, #9
 8001fbe:	4840      	ldr	r0, [pc, #256]	; (80020c0 <handshake+0x114>)
 8001fc0:	f00d ff08 	bl	800fdd4 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001fc4:	7f3b      	ldrb	r3, [r7, #28]
 8001fc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001fca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fce:	2bff      	cmp	r3, #255	; 0xff
 8001fd0:	d1f1      	bne.n	8001fb6 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001fd2:	7f7b      	ldrb	r3, [r7, #29]
 8001fd4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001fd8:	7fbb      	ldrb	r3, [r7, #30]
 8001fda:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001fe4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001fec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001ff4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ff8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b21a      	sxth	r2, r3
 8002004:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002008:	b21b      	sxth	r3, r3
 800200a:	4313      	orrs	r3, r2
 800200c:	b21b      	sxth	r3, r3
 800200e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8002010:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002014:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8002016:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800201a:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 800201c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002020:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8002022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002026:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8002028:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800202c:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 800202e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002032:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8002034:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002036:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	2200      	movs	r2, #0
 800203e:	4619      	mov	r1, r3
 8002040:	4820      	ldr	r0, [pc, #128]	; (80020c4 <handshake+0x118>)
 8002042:	f00b fb79 	bl	800d738 <HAL_RTC_SetDate>
 8002046:	4603      	mov	r3, r0
 8002048:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 800204c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <handshake+0xac>
	{
		Error_Handler();
 8002054:	f000 fdcc 	bl	8002bf0 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	4819      	ldr	r0, [pc, #100]	; (80020c4 <handshake+0x118>)
 8002060:	f00b fa70 	bl	800d544 <HAL_RTC_SetTime>
 8002064:	4603      	mov	r3, r0
 8002066:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 800206a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <handshake+0xca>
	{
		Error_Handler();
 8002072:	f000 fdbd 	bl	8002bf0 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8002076:	23fa      	movs	r3, #250	; 0xfa
 8002078:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 800207c:	2301      	movs	r3, #1
 800207e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 800208e:	2302      	movs	r3, #2
 8002090:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002098:	e009      	b.n	80020ae <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 800209a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	2205      	movs	r2, #5
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <handshake+0x114>)
 80020a4:	f00d fe08 	bl	800fcb8 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 80020a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020aa:	3301      	adds	r3, #1
 80020ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dbf1      	blt.n	800209a <handshake+0xee>
	}

	return 1;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3740      	adds	r7, #64	; 0x40
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	240005ec 	.word	0x240005ec
 80020c4:	240003d4 	.word	0x240003d4

080020c8 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80020cc:	481a      	ldr	r0, [pc, #104]	; (8002138 <system_setup+0x70>)
 80020ce:	f00c f981 	bl	800e3d4 <HAL_TIM_Base_Start>
	TIM2->CCR4 = 312;
 80020d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80020da:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80020dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020e4:	4815      	ldr	r0, [pc, #84]	; (800213c <system_setup+0x74>)
 80020e6:	f002 ffe9 	bl	80050bc <HAL_ADCEx_Calibration_Start>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <system_setup+0x2c>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80020f0:	f000 fd7e 	bl	8002bf0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80020f4:	220b      	movs	r2, #11
 80020f6:	4912      	ldr	r1, [pc, #72]	; (8002140 <system_setup+0x78>)
 80020f8:	4810      	ldr	r0, [pc, #64]	; (800213c <system_setup+0x74>)
 80020fa:	f002 f8bd 	bl	8004278 <HAL_ADC_Start_DMA>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <system_setup+0x40>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002104:	f000 fd74 	bl	8002bf0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002108:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800210c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <system_setup+0x7c>)
 8002112:	f002 ffd3 	bl	80050bc <HAL_ADCEx_Calibration_Start>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <system_setup+0x58>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 800211c:	f000 fd68 	bl	8002bf0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002120:	2204      	movs	r2, #4
 8002122:	4909      	ldr	r1, [pc, #36]	; (8002148 <system_setup+0x80>)
 8002124:	4807      	ldr	r0, [pc, #28]	; (8002144 <system_setup+0x7c>)
 8002126:	f002 f8a7 	bl	8004278 <HAL_ADC_Start_DMA>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <system_setup+0x6c>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002130:	f000 fd5e 	bl	8002bf0 <Error_Handler>
	}
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	24000554 	.word	0x24000554
 800213c:	2400013c 	.word	0x2400013c
 8002140:	24000c60 	.word	0x24000c60
 8002144:	240001a0 	.word	0x240001a0
 8002148:	24000c80 	.word	0x24000c80

0800214c <getMicro>:

uint32_t getMicro()
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0

    uint32_t ms = UptimeMillis;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <getMicro+0x54>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	607b      	str	r3, [r7, #4]
    uint32_t st = SysTick->VAL;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <getMicro+0x58>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	603b      	str	r3, [r7, #0]

    // Did UptimeMillis rollover while reading SysTick->VAL?
    if (ms != UptimeMillis)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <getMicro+0x54>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d005      	beq.n	8002174 <getMicro+0x28>
        // Rollover occurred so read both again.
        // Must read both because we don't know whether the
        // rollover occurred before or after reading SysTick->VAL.
        // No need to check for another rollover because there is
        // no chance of another rollover occurring so quickly.
        ms = UptimeMillis;
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <getMicro+0x54>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	607b      	str	r3, [r7, #4]
        st = SysTick->VAL;
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <getMicro+0x58>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	603b      	str	r3, [r7, #0]
    }

    return ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217a:	fb03 f202 	mul.w	r2, r3, r2
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <getMicro+0x58>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	3301      	adds	r3, #1
 8002184:	4908      	ldr	r1, [pc, #32]	; (80021a8 <getMicro+0x5c>)
 8002186:	fba1 1303 	umull	r1, r3, r1, r3
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002192:	1ad3      	subs	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	24000bcc 	.word	0x24000bcc
 80021a4:	e000e010 	.word	0xe000e010
 80021a8:	10624dd3 	.word	0x10624dd3

080021ac <getTimestamp>:

void getTimestamp(uint8_t *buffer)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	481f      	ldr	r0, [pc, #124]	; (800223c <getTimestamp+0x90>)
 80021be:	f00b fa5f 	bl	800d680 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	2200      	movs	r2, #0
 80021c8:	4619      	mov	r1, r3
 80021ca:	481c      	ldr	r0, [pc, #112]	; (800223c <getTimestamp+0x90>)
 80021cc:	f00b fb3c 	bl	800d848 <HAL_RTC_GetDate>
	uint32_t micro = getMicro();
 80021d0:	f7ff ffbc 	bl	800214c <getMicro>
 80021d4:	6278      	str	r0, [r7, #36]	; 0x24
	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	7b7a      	ldrb	r2, [r7, #13]
 80021e2:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3302      	adds	r3, #2
 80021e8:	7bba      	ldrb	r2, [r7, #14]
 80021ea:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3303      	adds	r3, #3
 80021f0:	7c3a      	ldrb	r2, [r7, #16]
 80021f2:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	7c7a      	ldrb	r2, [r7, #17]
 80021fa:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3305      	adds	r3, #5
 8002200:	7cba      	ldrb	r2, [r7, #18]
 8002202:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((micro >> 24) & 0xFF);  // High byte of milliseconds
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	0e1a      	lsrs	r2, r3, #24
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3306      	adds	r3, #6
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((micro >> 16) & 0xFF);  // High byte of milliseconds
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	0c1a      	lsrs	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3307      	adds	r3, #7
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((micro >> 8) & 0xFF);  // High byte of milliseconds
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	0a1a      	lsrs	r2, r3, #8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3308      	adds	r3, #8
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
	buffer[9] = micro & 0xFF;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3309      	adds	r3, #9
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]


}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	240003d4 	.word	0x240003d4

08002240 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002246:	bf00      	nop
 8002248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224c:	4845      	ldr	r0, [pc, #276]	; (8002364 <sample_pmt+0x124>)
 800224e:	f006 fd49 	bl	8008ce4 <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f7      	bne.n	8002248 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002258:	2010      	movs	r0, #16
 800225a:	f013 ffe9 	bl	8016230 <malloc>
 800225e:	4603      	mov	r3, r0
 8002260:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8002262:	2002      	movs	r0, #2
 8002264:	f013 ffe4 	bl	8016230 <malloc>
 8002268:	4603      	mov	r3, r0
 800226a:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 800226c:	200a      	movs	r0, #10
 800226e:	f013 ffdf 	bl	8016230 <malloc>
 8002272:	4603      	mov	r3, r0
 8002274:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7ff ff98 	bl	80021ac <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 800227c:	6938      	ldr	r0, [r7, #16]
 800227e:	f7ff fd5f 	bl	8001d40 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	22bb      	movs	r2, #187	; 0xbb
 8002286:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	22bb      	movs	r2, #187	; 0xbb
 800228e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <sample_pmt+0x128>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29a      	uxth	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3302      	adds	r3, #2
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <sample_pmt+0x128>)
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3303      	adds	r3, #3
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3304      	adds	r3, #4
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3305      	adds	r3, #5
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	7852      	ldrb	r2, [r2, #1]
 80022be:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3306      	adds	r3, #6
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3307      	adds	r3, #7
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	7852      	ldrb	r2, [r2, #1]
 80022d2:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3308      	adds	r3, #8
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	7892      	ldrb	r2, [r2, #2]
 80022dc:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3309      	adds	r3, #9
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	78d2      	ldrb	r2, [r2, #3]
 80022e6:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	330a      	adds	r3, #10
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	7912      	ldrb	r2, [r2, #4]
 80022f0:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	330b      	adds	r3, #11
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	7952      	ldrb	r2, [r2, #5]
 80022fa:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	330c      	adds	r3, #12
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	7992      	ldrb	r2, [r2, #6]
 8002304:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	330d      	adds	r3, #13
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	79d2      	ldrb	r2, [r2, #7]
 800230e:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[8];
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	330e      	adds	r3, #14
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	7a12      	ldrb	r2, [r2, #8]
 8002318:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[9];
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	330f      	adds	r3, #15
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	7a52      	ldrb	r2, [r2, #9]
 8002322:	701a      	strb	r2, [r3, #0]


	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2210      	movs	r2, #16
 8002328:	6979      	ldr	r1, [r7, #20]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fe1c 	bl	8001f68 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <sample_pmt+0x12c>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	1d39      	adds	r1, r7, #4
 8002336:	2300      	movs	r3, #0
 8002338:	2200      	movs	r2, #0
 800233a:	f010 fd97 	bl	8012e6c <osMessageQueuePut>
	available_msgs++;
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <sample_pmt+0x130>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <sample_pmt+0x130>)
 8002346:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002348:	6978      	ldr	r0, [r7, #20]
 800234a:	f013 ff79 	bl	8016240 <free>
	free(pmt_spi);
 800234e:	6938      	ldr	r0, [r7, #16]
 8002350:	f013 ff76 	bl	8016240 <free>
	free(timestamp);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f013 ff73 	bl	8016240 <free>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58020000 	.word	0x58020000
 8002368:	24000be0 	.word	0x24000be0
 800236c:	24000bd0 	.word	0x24000bd0
 8002370:	24000bdc 	.word	0x24000bdc

08002374 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800237a:	bf00      	nop
 800237c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002380:	4859      	ldr	r0, [pc, #356]	; (80024e8 <sample_erpa+0x174>)
 8002382:	f006 fcaf 	bl	8008ce4 <HAL_GPIO_ReadPin>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f7      	bne.n	800237c <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800238c:	2014      	movs	r0, #20
 800238e:	f013 ff4f 	bl	8016230 <malloc>
 8002392:	4603      	mov	r3, r0
 8002394:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8002396:	2002      	movs	r0, #2
 8002398:	f013 ff4a 	bl	8016230 <malloc>
 800239c:	4603      	mov	r3, r0
 800239e:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80023a0:	2004      	movs	r0, #4
 80023a2:	f013 ff45 	bl	8016230 <malloc>
 80023a6:	4603      	mov	r3, r0
 80023a8:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 80023aa:	200a      	movs	r0, #10
 80023ac:	f013 ff40 	bl	8016230 <malloc>
 80023b0:	4603      	mov	r3, r0
 80023b2:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 80023b4:	68b8      	ldr	r0, [r7, #8]
 80023b6:	f7ff fef9 	bl	80021ac <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80023ba:	6938      	ldr	r0, [r7, #16]
 80023bc:	f7ff fce4 	bl	8001d88 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fd05 	bl	8001dd0 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	22aa      	movs	r2, #170	; 0xaa
 80023ca:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	22aa      	movs	r2, #170	; 0xaa
 80023d2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80023d4:	4b45      	ldr	r3, [pc, #276]	; (80024ec <sample_erpa+0x178>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	b29a      	uxth	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3302      	adds	r3, #2
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80023e4:	4b41      	ldr	r3, [pc, #260]	; (80024ec <sample_erpa+0x178>)
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3303      	adds	r3, #3
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3304      	adds	r3, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3305      	adds	r3, #5
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3302      	adds	r3, #2
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b29a      	uxth	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3306      	adds	r3, #6
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3302      	adds	r3, #2
 8002422:	881a      	ldrh	r2, [r3, #0]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3307      	adds	r3, #7
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3308      	adds	r3, #8
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3309      	adds	r3, #9
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	7852      	ldrb	r2, [r2, #1]
 800243e:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	330a      	adds	r3, #10
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	330b      	adds	r3, #11
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	7852      	ldrb	r2, [r2, #1]
 8002452:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	330c      	adds	r3, #12
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	7892      	ldrb	r2, [r2, #2]
 800245c:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	330d      	adds	r3, #13
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	78d2      	ldrb	r2, [r2, #3]
 8002466:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	330e      	adds	r3, #14
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	7912      	ldrb	r2, [r2, #4]
 8002470:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	330f      	adds	r3, #15
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	7952      	ldrb	r2, [r2, #5]
 800247a:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3310      	adds	r3, #16
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	7992      	ldrb	r2, [r2, #6]
 8002484:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3311      	adds	r3, #17
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	79d2      	ldrb	r2, [r2, #7]
 800248e:	701a      	strb	r2, [r3, #0]
	buffer[18] = timestamp[8];
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3312      	adds	r3, #18
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	7a12      	ldrb	r2, [r2, #8]
 8002498:	701a      	strb	r2, [r3, #0]
	buffer[19] = timestamp[9];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3313      	adds	r3, #19
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	7a52      	ldrb	r2, [r2, #9]
 80024a2:	701a      	strb	r2, [r3, #0]




	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80024a4:	463b      	mov	r3, r7
 80024a6:	2214      	movs	r2, #20
 80024a8:	6979      	ldr	r1, [r7, #20]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fd5c 	bl	8001f68 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <sample_erpa+0x17c>)
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	4639      	mov	r1, r7
 80024b6:	2300      	movs	r3, #0
 80024b8:	2200      	movs	r2, #0
 80024ba:	f010 fcd7 	bl	8012e6c <osMessageQueuePut>
	available_msgs++;
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <sample_erpa+0x180>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <sample_erpa+0x180>)
 80024c6:	6013      	str	r3, [r2, #0]
	free(buffer);
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f013 feb9 	bl	8016240 <free>
	free(erpa_spi);
 80024ce:	6938      	ldr	r0, [r7, #16]
 80024d0:	f013 feb6 	bl	8016240 <free>
	free(erpa_adc);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f013 feb3 	bl	8016240 <free>
	free(timestamp);
 80024da:	68b8      	ldr	r0, [r7, #8]
 80024dc:	f013 feb0 	bl	8016240 <free>
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	58020400 	.word	0x58020400
 80024ec:	24000be2 	.word	0x24000be2
 80024f0:	24000bd0 	.word	0x24000bd0
 80024f4:	24000bdc 	.word	0x24000bdc

080024f8 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80024fe:	2030      	movs	r0, #48	; 0x30
 8002500:	f013 fe96 	bl	8016230 <malloc>
 8002504:	4603      	mov	r3, r0
 8002506:	61fb      	str	r3, [r7, #28]

	static uint16_t last_i2c_reading[4];
	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002508:	2008      	movs	r0, #8
 800250a:	f013 fe91 	bl	8016230 <malloc>
 800250e:	4603      	mov	r3, r0
 8002510:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8002512:	2012      	movs	r0, #18
 8002514:	f013 fe8c 	bl	8016230 <malloc>
 8002518:	4603      	mov	r3, r0
 800251a:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 800251c:	2008      	movs	r0, #8
 800251e:	f013 fe87 	bl	8016230 <malloc>
 8002522:	4603      	mov	r3, r0
 8002524:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 8002526:	200a      	movs	r0, #10
 8002528:	f013 fe82 	bl	8016230 <malloc>
 800252c:	4603      	mov	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff fe3b 	bl	80021ac <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999){
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <sample_hk+0x8c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800253e:	db25      	blt.n	800258c <sample_hk+0x94>
		receive_hk_i2c(hk_i2c);
 8002540:	69b8      	ldr	r0, [r7, #24]
 8002542:	f7ff fc5f 	bl	8001e04 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <sample_hk+0x90>)
 8002550:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	3302      	adds	r3, #2
 8002556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <sample_hk+0x90>)
 800255e:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	3304      	adds	r3, #4
 8002564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <sample_hk+0x90>)
 800256c:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	3306      	adds	r3, #6
 8002572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <sample_hk+0x90>)
 800257a:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 800257c:	4b01      	ldr	r3, [pc, #4]	; (8002584 <sample_hk+0x8c>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e01f      	b.n	80025c4 <sample_hk+0xcc>
 8002584:	24000004 	.word	0x24000004
 8002588:	24000c88 	.word	0x24000c88
	}
	else{
		TEMPERATURE_COUNTER++;
 800258c:	4ba4      	ldr	r3, [pc, #656]	; (8002820 <sample_hk+0x328>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4aa3      	ldr	r2, [pc, #652]	; (8002820 <sample_hk+0x328>)
 8002594:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 8002596:	4ba3      	ldr	r3, [pc, #652]	; (8002824 <sample_hk+0x32c>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b21a      	sxth	r2, r3
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80025a0:	4ba0      	ldr	r3, [pc, #640]	; (8002824 <sample_hk+0x32c>)
 80025a2:	885a      	ldrh	r2, [r3, #2]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	3302      	adds	r3, #2
 80025a8:	b212      	sxth	r2, r2
 80025aa:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80025ac:	4b9d      	ldr	r3, [pc, #628]	; (8002824 <sample_hk+0x32c>)
 80025ae:	889a      	ldrh	r2, [r3, #4]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	3304      	adds	r3, #4
 80025b4:	b212      	sxth	r2, r2
 80025b6:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80025b8:	4b9a      	ldr	r3, [pc, #616]	; (8002824 <sample_hk+0x32c>)
 80025ba:	88da      	ldrh	r2, [r3, #6]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	3306      	adds	r3, #6
 80025c0:	b212      	sxth	r2, r2
 80025c2:	801a      	strh	r2, [r3, #0]
	}
	receive_hk_adc1(hk_adc1);
 80025c4:	6978      	ldr	r0, [r7, #20]
 80025c6:	f7ff fc4d 	bl	8001e64 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 80025ca:	6938      	ldr	r0, [r7, #16]
 80025cc:	f7ff fc94 	bl	8001ef8 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	22cc      	movs	r2, #204	; 0xcc
 80025d4:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3301      	adds	r3, #1
 80025da:	22cc      	movs	r2, #204	; 0xcc
 80025dc:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80025de:	4b92      	ldr	r3, [pc, #584]	; (8002828 <sample_hk+0x330>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3302      	adds	r3, #2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80025ee:	4b8e      	ldr	r3, [pc, #568]	; (8002828 <sample_hk+0x330>)
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3303      	adds	r3, #3
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	3302      	adds	r3, #2
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b29a      	uxth	r2, r3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	3304      	adds	r3, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	3302      	adds	r3, #2
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3305      	adds	r3, #5
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	b29a      	uxth	r2, r3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3306      	adds	r3, #6
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3307      	adds	r3, #7
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263c:	121a      	asrs	r2, r3, #8
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3308      	adds	r3, #8
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f9b3 2000 	ldrsh.w	r2, [r3]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3309      	adds	r3, #9
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	3302      	adds	r3, #2
 8002658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265c:	121a      	asrs	r2, r3, #8
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	330a      	adds	r3, #10
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	3302      	adds	r3, #2
 800266a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	330b      	adds	r3, #11
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	3304      	adds	r3, #4
 800267a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267e:	121a      	asrs	r2, r3, #8
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	330c      	adds	r3, #12
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	3304      	adds	r3, #4
 800268c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	330d      	adds	r3, #13
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	3306      	adds	r3, #6
 800269c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a0:	121a      	asrs	r2, r3, #8
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	330e      	adds	r3, #14
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3306      	adds	r3, #6
 80026ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	330f      	adds	r3, #15
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3310      	adds	r3, #16
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3311      	adds	r3, #17
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3302      	adds	r3, #2
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	b29a      	uxth	r2, r3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3312      	adds	r3, #18
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3302      	adds	r3, #2
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3313      	adds	r3, #19
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3304      	adds	r3, #4
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	b29a      	uxth	r2, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3314      	adds	r3, #20
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3304      	adds	r3, #4
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3315      	adds	r3, #21
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	3306      	adds	r3, #6
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29a      	uxth	r2, r3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3316      	adds	r3, #22
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	3306      	adds	r3, #6
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3317      	adds	r3, #23
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	330c      	adds	r3, #12
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	b29a      	uxth	r2, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3318      	adds	r3, #24
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	330c      	adds	r3, #12
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3319      	adds	r3, #25
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3306      	adds	r3, #6
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	b29a      	uxth	r2, r3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	331a      	adds	r3, #26
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3306      	adds	r3, #6
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	331b      	adds	r3, #27
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	3304      	adds	r3, #4
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	b29a      	uxth	r2, r3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	331c      	adds	r3, #28
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3304      	adds	r3, #4
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	331d      	adds	r3, #29
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	330e      	adds	r3, #14
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	b29a      	uxth	r2, r3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	331e      	adds	r3, #30
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	330e      	adds	r3, #14
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	331f      	adds	r3, #31
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3310      	adds	r3, #16
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	b29a      	uxth	r2, r3
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3320      	adds	r3, #32
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3310      	adds	r3, #16
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3321      	adds	r3, #33	; 0x21
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3308      	adds	r3, #8
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	b29a      	uxth	r2, r3
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3322      	adds	r3, #34	; 0x22
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3308      	adds	r3, #8
 80027ec:	881a      	ldrh	r2, [r3, #0]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3323      	adds	r3, #35	; 0x23
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	330a      	adds	r3, #10
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	b29a      	uxth	r2, r3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	3324      	adds	r3, #36	; 0x24
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	330a      	adds	r3, #10
 800280c:	881a      	ldrh	r2, [r3, #0]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3325      	adds	r3, #37	; 0x25
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3326      	adds	r3, #38	; 0x26
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	e006      	b.n	800282c <sample_hk+0x334>
 800281e:	bf00      	nop
 8002820:	24000004 	.word	0x24000004
 8002824:	24000c88 	.word	0x24000c88
 8002828:	24000be4 	.word	0x24000be4
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	3327      	adds	r3, #39	; 0x27
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	7852      	ldrb	r2, [r2, #1]
 8002838:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3328      	adds	r3, #40	; 0x28
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	7892      	ldrb	r2, [r2, #2]
 8002842:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	3329      	adds	r3, #41	; 0x29
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	78d2      	ldrb	r2, [r2, #3]
 800284c:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	332a      	adds	r3, #42	; 0x2a
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	7912      	ldrb	r2, [r2, #4]
 8002856:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	332b      	adds	r3, #43	; 0x2b
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	7952      	ldrb	r2, [r2, #5]
 8002860:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	332c      	adds	r3, #44	; 0x2c
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	7992      	ldrb	r2, [r2, #6]
 800286a:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	332d      	adds	r3, #45	; 0x2d
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	79d2      	ldrb	r2, [r2, #7]
 8002874:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	332e      	adds	r3, #46	; 0x2e
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	7a12      	ldrb	r2, [r2, #8]
 800287e:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	332f      	adds	r3, #47	; 0x2f
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	7a52      	ldrb	r2, [r2, #9]
 8002888:	701a      	strb	r2, [r3, #0]


	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	2230      	movs	r2, #48	; 0x30
 800288e:	69f9      	ldr	r1, [r7, #28]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fb69 	bl	8001f68 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <sample_hk+0x3dc>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	1d39      	adds	r1, r7, #4
 800289c:	2300      	movs	r3, #0
 800289e:	2200      	movs	r2, #0
 80028a0:	f010 fae4 	bl	8012e6c <osMessageQueuePut>
	available_msgs++;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <sample_hk+0x3e0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <sample_hk+0x3e0>)
 80028ac:	6013      	str	r3, [r2, #0]

	free(buffer);
 80028ae:	69f8      	ldr	r0, [r7, #28]
 80028b0:	f013 fcc6 	bl	8016240 <free>
	free(hk_i2c);
 80028b4:	69b8      	ldr	r0, [r7, #24]
 80028b6:	f013 fcc3 	bl	8016240 <free>
	free(hk_adc1);
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f013 fcc0 	bl	8016240 <free>
	free(hk_adc3);
 80028c0:	6938      	ldr	r0, [r7, #16]
 80028c2:	f013 fcbd 	bl	8016240 <free>
	free(timestamp);
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f013 fcba 	bl	8016240 <free>
}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	24000bd0 	.word	0x24000bd0
 80028d8:	24000bdc 	.word	0x24000bdc

080028dc <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <PMT_init+0x38>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ec:	2200      	movs	r2, #0
 80028ee:	2101      	movs	r1, #1
 80028f0:	f010 f9e2 	bl	8012cb8 <osEventFlagsWait>
		if(PMT_ON){
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <PMT_init+0x3c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <PMT_init+0x30>
			sample_pmt();
 80028fc:	f7ff fca0 	bl	8002240 <sample_pmt>
			pmt_seq++;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <PMT_init+0x40>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <PMT_init+0x40>)
 800290a:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 800290c:	f010 f8f4 	bl	8012af8 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002910:	e7e8      	b.n	80028e4 <PMT_init+0x8>
 8002912:	bf00      	nop
 8002914:	24000bec 	.word	0x24000bec
 8002918:	24000be6 	.word	0x24000be6
 800291c:	24000be0 	.word	0x24000be0

08002920 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <ERPA_init+0x38>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002930:	2200      	movs	r2, #0
 8002932:	2102      	movs	r1, #2
 8002934:	f010 f9c0 	bl	8012cb8 <osEventFlagsWait>
		if (ERPA_ON)
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <ERPA_init+0x3c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <ERPA_init+0x30>
		{
			sample_erpa();
 8002940:	f7ff fd18 	bl	8002374 <sample_erpa>
			erpa_seq++;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <ERPA_init+0x40>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <ERPA_init+0x40>)
 800294e:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002950:	f010 f8d2 	bl	8012af8 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002954:	e7e8      	b.n	8002928 <ERPA_init+0x8>
 8002956:	bf00      	nop
 8002958:	24000bec 	.word	0x24000bec
 800295c:	24000be7 	.word	0x24000be7
 8002960:	24000be2 	.word	0x24000be2

08002964 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HK_init+0x38>)
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002974:	2200      	movs	r2, #0
 8002976:	2104      	movs	r1, #4
 8002978:	f010 f99e 	bl	8012cb8 <osEventFlagsWait>
		if(HK_ON)
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HK_init+0x3c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <HK_init+0x30>
		{
			sample_hk();
 8002984:	f7ff fdb8 	bl	80024f8 <sample_hk>
			hk_seq++;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HK_init+0x40>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <HK_init+0x40>)
 8002992:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002994:	f010 f8b0 	bl	8012af8 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002998:	e7e8      	b.n	800296c <HK_init+0x8>
 800299a:	bf00      	nop
 800299c:	24000bec 	.word	0x24000bec
 80029a0:	24000be8 	.word	0x24000be8
 80029a4:	24000be4 	.word	0x24000be4

080029a8 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80029b0:	2201      	movs	r2, #1
 80029b2:	4904      	ldr	r1, [pc, #16]	; (80029c4 <UART_RX_init+0x1c>)
 80029b4:	4804      	ldr	r0, [pc, #16]	; (80029c8 <UART_RX_init+0x20>)
 80029b6:	f00d fad5 	bl	800ff64 <HAL_UART_Receive_IT>
		osDelay(5);
 80029ba:	2005      	movs	r0, #5
 80029bc:	f010 f8dd 	bl	8012b7a <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80029c0:	e7f6      	b.n	80029b0 <UART_RX_init+0x8>
 80029c2:	bf00      	nop
 80029c4:	24000bf0 	.word	0x24000bf0
 80029c8:	240005ec 	.word	0x240005ec

080029cc <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <GPIO_on_init+0x9c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f010 f8ad 	bl	8012b38 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <GPIO_on_init+0xa0>)
 80029e0:	2104      	movs	r1, #4
 80029e2:	2201      	movs	r2, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f006 f995 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 80029ea:	2064      	movs	r0, #100	; 0x64
 80029ec:	f010 f8c5 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <GPIO_on_init+0xa0>)
 80029f2:	2120      	movs	r1, #32
 80029f4:	2201      	movs	r2, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f006 f98c 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 80029fc:	2064      	movs	r0, #100	; 0x64
 80029fe:	f010 f8bc 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <GPIO_on_init+0xa4>)
 8002a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f006 f982 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a10:	2064      	movs	r0, #100	; 0x64
 8002a12:	f010 f8b2 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <GPIO_on_init+0xa4>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f006 f979 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a22:	2064      	movs	r0, #100	; 0x64
 8002a24:	f010 f8a9 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <GPIO_on_init+0xa4>)
 8002a2a:	2140      	movs	r1, #64	; 0x40
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f006 f970 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a34:	2064      	movs	r0, #100	; 0x64
 8002a36:	f010 f8a0 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <GPIO_on_init+0xa4>)
 8002a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a40:	2201      	movs	r2, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f006 f966 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a48:	2064      	movs	r0, #100	; 0x64
 8002a4a:	f010 f896 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <GPIO_on_init+0xa4>)
 8002a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a54:	2201      	movs	r2, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f006 f95c 	bl	8008d14 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002a5c:	4b02      	ldr	r3, [pc, #8]	; (8002a68 <GPIO_on_init+0x9c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f010 f869 	bl	8012b38 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002a66:	e7ba      	b.n	80029de <GPIO_on_init+0x12>
 8002a68:	24000708 	.word	0x24000708
 8002a6c:	58020400 	.word	0x58020400
 8002a70:	58020800 	.word	0x58020800

08002a74 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <GPIO_off_init+0x9c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f010 f859 	bl	8012b38 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <GPIO_off_init+0xa0>)
 8002a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 f940 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	f010 f870 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <GPIO_off_init+0xa0>)
 8002a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f006 f936 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002aa8:	2064      	movs	r0, #100	; 0x64
 8002aaa:	f010 f866 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002aae:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <GPIO_off_init+0xa0>)
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f006 f92d 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002aba:	2064      	movs	r0, #100	; 0x64
 8002abc:	f010 f85d 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <GPIO_off_init+0xa0>)
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f006 f924 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002acc:	2064      	movs	r0, #100	; 0x64
 8002ace:	f010 f854 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <GPIO_off_init+0xa0>)
 8002ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ad8:	2200      	movs	r2, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f006 f91a 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ae0:	2064      	movs	r0, #100	; 0x64
 8002ae2:	f010 f84a 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <GPIO_off_init+0xa4>)
 8002ae8:	2120      	movs	r1, #32
 8002aea:	2200      	movs	r2, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f006 f911 	bl	8008d14 <HAL_GPIO_WritePin>
		osDelay(100);
 8002af2:	2064      	movs	r0, #100	; 0x64
 8002af4:	f010 f841 	bl	8012b7a <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <GPIO_off_init+0xa4>)
 8002afa:	2104      	movs	r1, #4
 8002afc:	2200      	movs	r2, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f006 f908 	bl	8008d14 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <GPIO_off_init+0x9c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f010 f815 	bl	8012b38 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002b0e:	e7ba      	b.n	8002a86 <GPIO_off_init+0x12>
 8002b10:	24000968 	.word	0x24000968
 8002b14:	58020800 	.word	0x58020800
 8002b18:	58020400 	.word	0x58020400

08002b1c <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
  static uint8_t tx_buffer[1000];
  uint32_t total_size = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  osStatus_t status;

  while (1) {
    total_size = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]

    // Retrieve all messages from the queue and store them in tx_buffer
    do {
      status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002b2c:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <UART_TX_init+0x9c>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b34:	2200      	movs	r2, #0
 8002b36:	4921      	ldr	r1, [pc, #132]	; (8002bbc <UART_TX_init+0xa0>)
 8002b38:	f010 f9f8 	bl	8012f2c <osMessageQueueGet>
 8002b3c:	60b8      	str	r0, [r7, #8]
      if (status == osOK) {
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11c      	bne.n	8002b7e <UART_TX_init+0x62>
        if (total_size + msg.size <= 1000) {
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <UART_TX_init+0xa0>)
 8002b46:	889b      	ldrh	r3, [r3, #4]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b52:	d818      	bhi.n	8002b86 <UART_TX_init+0x6a>
          memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <UART_TX_init+0xa4>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <UART_TX_init+0xa0>)
 8002b5c:	6811      	ldr	r1, [r2, #0]
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <UART_TX_init+0xa0>)
 8002b60:	8892      	ldrh	r2, [r2, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f013 fb74 	bl	8016250 <memcpy>
          free(msg.array);
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <UART_TX_init+0xa0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f013 fb67 	bl	8016240 <free>
          total_size += msg.size;
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <UART_TX_init+0xa0>)
 8002b74:	889b      	ldrh	r3, [r3, #4]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
        } else {

          break;
        }
      }
    } while (status == osOK);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0d3      	beq.n	8002b2c <UART_TX_init+0x10>
 8002b84:	e000      	b.n	8002b88 <UART_TX_init+0x6c>
          break;
 8002b86:	bf00      	nop

    if (total_size > 0) {
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <UART_TX_init+0x94>
      HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <UART_TX_init+0xa4>)
 8002b96:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <UART_TX_init+0xa8>)
 8002b98:	f00d fa30 	bl	800fffc <HAL_UART_Transmit_DMA>

      // Wait for transmission to complete
      while (tx_flag == 0) {
 8002b9c:	e001      	b.n	8002ba2 <UART_TX_init+0x86>
        osThreadYield();
 8002b9e:	f00f ffab 	bl	8012af8 <osThreadYield>
      while (tx_flag == 0) {
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <UART_TX_init+0xac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f9      	beq.n	8002b9e <UART_TX_init+0x82>
      }

      // Reset the flag
      tx_flag = 0;
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <UART_TX_init+0xac>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    }

    // Yield thread control
    osThreadYield();
 8002bb0:	f00f ffa2 	bl	8012af8 <osThreadYield>
    total_size = 0;
 8002bb4:	e7b8      	b.n	8002b28 <UART_TX_init+0xc>
 8002bb6:	bf00      	nop
 8002bb8:	24000bd0 	.word	0x24000bd0
 8002bbc:	24000bd4 	.word	0x24000bd4
 8002bc0:	24000c90 	.word	0x24000c90
 8002bc4:	240005ec 	.word	0x240005ec
 8002bc8:	24000000 	.word	0x24000000

08002bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bde:	f000 ff59 	bl	8003a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40001000 	.word	0x40001000

08002bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf4:	b672      	cpsid	i
}
 8002bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bf8:	e7fe      	b.n	8002bf8 <Error_Handler+0x8>
	...

08002bfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_MspInit+0x38>)
 8002c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_MspInit+0x38>)
 8002c0a:	f043 0302 	orr.w	r3, r3, #2
 8002c0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_MspInit+0x38>)
 8002c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	210f      	movs	r1, #15
 8002c24:	f06f 0001 	mvn.w	r0, #1
 8002c28:	f002 fc42 	bl	80054b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	58024400 	.word	0x58024400

08002c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08e      	sub	sp, #56	; 0x38
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a7b      	ldr	r2, [pc, #492]	; (8002e44 <HAL_ADC_MspInit+0x20c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	f040 8091 	bne.w	8002d7e <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c5c:	4b7a      	ldr	r3, [pc, #488]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002c5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c62:	4a79      	ldr	r2, [pc, #484]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002c64:	f043 0320 	orr.w	r3, r3, #32
 8002c68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c6c:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002c6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	4a71      	ldr	r2, [pc, #452]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8a:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c98:	4b6b      	ldr	r3, [pc, #428]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca8:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	4b64      	ldr	r3, [pc, #400]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	4a62      	ldr	r2, [pc, #392]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc6:	4b60      	ldr	r3, [pc, #384]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002cd4:	2333      	movs	r3, #51	; 0x33
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4859      	ldr	r0, [pc, #356]	; (8002e4c <HAL_ADC_MspInit+0x214>)
 8002ce8:	f005 fe4c 	bl	8008984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002cec:	23ce      	movs	r3, #206	; 0xce
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4854      	ldr	r0, [pc, #336]	; (8002e50 <HAL_ADC_MspInit+0x218>)
 8002d00:	f005 fe40 	bl	8008984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d04:	2303      	movs	r3, #3
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d14:	4619      	mov	r1, r3
 8002d16:	484f      	ldr	r0, [pc, #316]	; (8002e54 <HAL_ADC_MspInit+0x21c>)
 8002d18:	f005 fe34 	bl	8008984 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002d1c:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d1e:	4a4f      	ldr	r2, [pc, #316]	; (8002e5c <HAL_ADC_MspInit+0x224>)
 8002d20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d22:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d24:	2209      	movs	r2, #9
 8002d26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d34:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d3c:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d44:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d4a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d4c:	4b42      	ldr	r3, [pc, #264]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d54:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d60:	483d      	ldr	r0, [pc, #244]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d62:	f002 ffd3 	bl	8005d0c <HAL_DMA_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002d6c:	f7ff ff40 	bl	8002bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a39      	ldr	r2, [pc, #228]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d74:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d76:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_ADC_MspInit+0x220>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d7c:	e05e      	b.n	8002e3c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a37      	ldr	r2, [pc, #220]	; (8002e60 <HAL_ADC_MspInit+0x228>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d159      	bne.n	8002e3c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d88:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d8e:	4a2e      	ldr	r2, [pc, #184]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d98:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_ADC_MspInit+0x210>)
 8002db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002dc4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002dc8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002dcc:	f000 fe8e 	bl	8003aec <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002dd0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002dd4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002dd8:	f000 fe88 	bl	8003aec <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002dde:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <HAL_ADC_MspInit+0x230>)
 8002de0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002de4:	2273      	movs	r2, #115	; 0x73
 8002de6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dfa:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e02:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e0a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e12:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002e20:	4810      	ldr	r0, [pc, #64]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002e22:	f002 ff73 	bl	8005d0c <HAL_DMA_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002e2c:	f7ff fee0 	bl	8002bf0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002e34:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <HAL_ADC_MspInit+0x22c>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e3c:	bf00      	nop
 8002e3e:	3738      	adds	r7, #56	; 0x38
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40022000 	.word	0x40022000
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58020800 	.word	0x58020800
 8002e50:	58020000 	.word	0x58020000
 8002e54:	58020400 	.word	0x58020400
 8002e58:	24000204 	.word	0x24000204
 8002e5c:	40020010 	.word	0x40020010
 8002e60:	58026000 	.word	0x58026000
 8002e64:	2400027c 	.word	0x2400027c
 8002e68:	40020028 	.word	0x40020028

08002e6c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_DAC_MspInit+0xf0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d161      	bne.n	8002f52 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002e8e:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_DAC_MspInit+0xf4>)
 8002e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e94:	4a32      	ldr	r2, [pc, #200]	; (8002f60 <HAL_DAC_MspInit+0xf4>)
 8002e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_DAC_MspInit+0xf4>)
 8002ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <HAL_DAC_MspInit+0xf4>)
 8002eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb2:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <HAL_DAC_MspInit+0xf4>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_DAC_MspInit+0xf4>)
 8002ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002eca:	2310      	movs	r3, #16
 8002ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f107 0314 	add.w	r3, r7, #20
 8002eda:	4619      	mov	r1, r3
 8002edc:	4821      	ldr	r0, [pc, #132]	; (8002f64 <HAL_DAC_MspInit+0xf8>)
 8002ede:	f005 fd51 	bl	8008984 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002ee4:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <HAL_DAC_MspInit+0x100>)
 8002ee6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002eea:	2243      	movs	r2, #67	; 0x43
 8002eec:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eee:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002ef0:	2240      	movs	r2, #64	; 0x40
 8002ef2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f00:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f08:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f10:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f18:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002f26:	4810      	ldr	r0, [pc, #64]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002f28:	f002 fef0 	bl	8005d0c <HAL_DMA_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002f32:	f7ff fe5d 	bl	8002bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_DAC_MspInit+0xfc>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2105      	movs	r1, #5
 8002f46:	2036      	movs	r0, #54	; 0x36
 8002f48:	f002 fab2 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f4c:	2036      	movs	r0, #54	; 0x36
 8002f4e:	f002 fac9 	bl	80054e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40007400 	.word	0x40007400
 8002f60:	58024400 	.word	0x58024400
 8002f64:	58020000 	.word	0x58020000
 8002f68:	24000308 	.word	0x24000308
 8002f6c:	40020088 	.word	0x40020088

08002f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0ba      	sub	sp, #232	; 0xe8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	22c0      	movs	r2, #192	; 0xc0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f013 f96b 	bl	801626c <memset>
  if(hi2c->Instance==I2C1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a27      	ldr	r2, [pc, #156]	; (8003038 <HAL_I2C_MspInit+0xc8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d146      	bne.n	800302e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002fa0:	f04f 0208 	mov.w	r2, #8
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f007 fd44 	bl	800aa44 <HAL_RCCEx_PeriphCLKConfig>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002fc2:	f7ff fe15 	bl	8002bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_I2C_MspInit+0xcc>)
 8002fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_I2C_MspInit+0xcc>)
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_I2C_MspInit+0xcc>)
 8002fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fe4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fec:	2312      	movs	r3, #18
 8002fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ffe:	2304      	movs	r3, #4
 8003000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003008:	4619      	mov	r1, r3
 800300a:	480d      	ldr	r0, [pc, #52]	; (8003040 <HAL_I2C_MspInit+0xd0>)
 800300c:	f005 fcba 	bl	8008984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_I2C_MspInit+0xcc>)
 8003012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <HAL_I2C_MspInit+0xcc>)
 8003018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800301c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_I2C_MspInit+0xcc>)
 8003022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	37e8      	adds	r7, #232	; 0xe8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40005400 	.word	0x40005400
 800303c:	58024400 	.word	0x58024400
 8003040:	58020400 	.word	0x58020400

08003044 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b0b2      	sub	sp, #200	; 0xc8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800304c:	f107 0308 	add.w	r3, r7, #8
 8003050:	22c0      	movs	r2, #192	; 0xc0
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f013 f909 	bl	801626c <memset>
  if(hrtc->Instance==RTC)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_RTC_MspInit+0x5c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d119      	bne.n	8003098 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003064:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003078:	f107 0308 	add.w	r3, r7, #8
 800307c:	4618      	mov	r0, r3
 800307e:	f007 fce1 	bl	800aa44 <HAL_RCCEx_PeriphCLKConfig>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003088:	f7ff fdb2 	bl	8002bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RTC_MspInit+0x60>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_RTC_MspInit+0x60>)
 8003092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003098:	bf00      	nop
 800309a:	37c8      	adds	r7, #200	; 0xc8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	58004000 	.word	0x58004000
 80030a4:	58024400 	.word	0x58024400

080030a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b0bc      	sub	sp, #240	; 0xf0
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030c0:	f107 0318 	add.w	r3, r7, #24
 80030c4:	22c0      	movs	r2, #192	; 0xc0
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f013 f8cf 	bl	801626c <memset>
  if(hspi->Instance==SPI1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a4c      	ldr	r2, [pc, #304]	; (8003204 <HAL_SPI_MspInit+0x15c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d145      	bne.n	8003164 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80030d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e8:	f107 0318 	add.w	r3, r7, #24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f007 fca9 	bl	800aa44 <HAL_RCCEx_PeriphCLKConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80030f8:	f7ff fd7a 	bl	8002bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80030fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003102:	4a41      	ldr	r2, [pc, #260]	; (8003208 <HAL_SPI_MspInit+0x160>)
 8003104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800310c:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <HAL_SPI_MspInit+0x160>)
 800310e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_SPI_MspInit+0x160>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003120:	4a39      	ldr	r2, [pc, #228]	; (8003208 <HAL_SPI_MspInit+0x160>)
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800312a:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_SPI_MspInit+0x160>)
 800312c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003138:	2318      	movs	r3, #24
 800313a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003150:	2305      	movs	r3, #5
 8003152:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003156:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800315a:	4619      	mov	r1, r3
 800315c:	482b      	ldr	r0, [pc, #172]	; (800320c <HAL_SPI_MspInit+0x164>)
 800315e:	f005 fc11 	bl	8008984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003162:	e04a      	b.n	80031fa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a29      	ldr	r2, [pc, #164]	; (8003210 <HAL_SPI_MspInit+0x168>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d145      	bne.n	80031fa <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800316e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800317a:	2300      	movs	r3, #0
 800317c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800317e:	f107 0318 	add.w	r3, r7, #24
 8003182:	4618      	mov	r0, r3
 8003184:	f007 fc5e 	bl	800aa44 <HAL_RCCEx_PeriphCLKConfig>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800318e:	f7ff fd2f 	bl	8002bf0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_SPI_MspInit+0x160>)
 8003194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_SPI_MspInit+0x160>)
 800319a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b6:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80031ce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80031d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031e8:	2305      	movs	r3, #5
 80031ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80031f2:	4619      	mov	r1, r3
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <HAL_SPI_MspInit+0x164>)
 80031f6:	f005 fbc5 	bl	8008984 <HAL_GPIO_Init>
}
 80031fa:	bf00      	nop
 80031fc:	37f0      	adds	r7, #240	; 0xf0
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40013000 	.word	0x40013000
 8003208:	58024400 	.word	0x58024400
 800320c:	58020400 	.word	0x58020400
 8003210:	40003800 	.word	0x40003800

08003214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a37      	ldr	r2, [pc, #220]	; (8003300 <HAL_TIM_Base_MspInit+0xec>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d12f      	bne.n	8003286 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003226:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 8003228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800322c:	4a35      	ldr	r2, [pc, #212]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003236:	4b33      	ldr	r3, [pc, #204]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 8003238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	2105      	movs	r1, #5
 8003248:	2018      	movs	r0, #24
 800324a:	f002 f931 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800324e:	2018      	movs	r0, #24
 8003250:	f002 f948 	bl	80054e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2105      	movs	r1, #5
 8003258:	2019      	movs	r0, #25
 800325a:	f002 f929 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800325e:	2019      	movs	r0, #25
 8003260:	f002 f940 	bl	80054e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2105      	movs	r1, #5
 8003268:	201a      	movs	r0, #26
 800326a:	f002 f921 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800326e:	201a      	movs	r0, #26
 8003270:	f002 f938 	bl	80054e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2105      	movs	r1, #5
 8003278:	201b      	movs	r0, #27
 800327a:	f002 f919 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800327e:	201b      	movs	r0, #27
 8003280:	f002 f930 	bl	80054e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003284:	e038      	b.n	80032f8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d117      	bne.n	80032c0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 8003292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003296:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 80032a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2105      	movs	r1, #5
 80032b2:	201c      	movs	r0, #28
 80032b4:	f002 f8fc 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032b8:	201c      	movs	r0, #28
 80032ba:	f002 f913 	bl	80054e4 <HAL_NVIC_EnableIRQ>
}
 80032be:	e01b      	b.n	80032f8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_TIM_Base_MspInit+0xf4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d116      	bne.n	80032f8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 80032cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d0:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_TIM_Base_MspInit+0xf0>)
 80032dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2105      	movs	r1, #5
 80032ec:	201d      	movs	r0, #29
 80032ee:	f002 f8df 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032f2:	201d      	movs	r0, #29
 80032f4:	f002 f8f6 	bl	80054e4 <HAL_NVIC_EnableIRQ>
}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40010000 	.word	0x40010000
 8003304:	58024400 	.word	0x58024400
 8003308:	40000400 	.word	0x40000400

0800330c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <HAL_TIM_MspPostInit+0xb8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d120      	bne.n	8003370 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 8003330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 8003340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800334c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800335e:	2301      	movs	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	4818      	ldr	r0, [pc, #96]	; (80033cc <HAL_TIM_MspPostInit+0xc0>)
 800336a:	f005 fb0b 	bl	8008984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800336e:	e024      	b.n	80033ba <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d11f      	bne.n	80033ba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 800337c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 800338c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800339c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	2300      	movs	r3, #0
 80033a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033aa:	2301      	movs	r3, #1
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	4619      	mov	r1, r3
 80033b4:	4806      	ldr	r0, [pc, #24]	; (80033d0 <HAL_TIM_MspPostInit+0xc4>)
 80033b6:	f005 fae5 	bl	8008984 <HAL_GPIO_Init>
}
 80033ba:	bf00      	nop
 80033bc:	3728      	adds	r7, #40	; 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40010000 	.word	0x40010000
 80033c8:	58024400 	.word	0x58024400
 80033cc:	58020000 	.word	0x58020000
 80033d0:	58020400 	.word	0x58020400

080033d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0ba      	sub	sp, #232	; 0xe8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ec:	f107 0310 	add.w	r3, r7, #16
 80033f0:	22c0      	movs	r2, #192	; 0xc0
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f012 ff39 	bl	801626c <memset>
  if(huart->Instance==USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a41      	ldr	r2, [pc, #260]	; (8003504 <HAL_UART_MspInit+0x130>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d17b      	bne.n	80034fc <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003404:	f04f 0201 	mov.w	r2, #1
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003416:	f107 0310 	add.w	r3, r7, #16
 800341a:	4618      	mov	r0, r3
 800341c:	f007 fb12 	bl	800aa44 <HAL_RCCEx_PeriphCLKConfig>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003426:	f7ff fbe3 	bl	8002bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_UART_MspInit+0x134>)
 800342c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003430:	4a35      	ldr	r2, [pc, #212]	; (8003508 <HAL_UART_MspInit+0x134>)
 8003432:	f043 0310 	orr.w	r3, r3, #16
 8003436:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <HAL_UART_MspInit+0x134>)
 800343c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <HAL_UART_MspInit+0x134>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344e:	4a2e      	ldr	r2, [pc, #184]	; (8003508 <HAL_UART_MspInit+0x134>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HAL_UART_MspInit+0x134>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003466:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800346a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003480:	2307      	movs	r3, #7
 8003482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003486:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800348a:	4619      	mov	r1, r3
 800348c:	481f      	ldr	r0, [pc, #124]	; (800350c <HAL_UART_MspInit+0x138>)
 800348e:	f005 fa79 	bl	8008984 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_UART_MspInit+0x13c>)
 8003494:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_UART_MspInit+0x140>)
 8003496:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_UART_MspInit+0x13c>)
 800349a:	222a      	movs	r2, #42	; 0x2a
 800349c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b8:	4b15      	ldr	r3, [pc, #84]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80034d0:	480f      	ldr	r0, [pc, #60]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034d2:	f002 fc1b 	bl	8005d0c <HAL_DMA_Init>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80034dc:	f7ff fb88 	bl	8002bf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <HAL_UART_MspInit+0x13c>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2105      	movs	r1, #5
 80034f0:	2025      	movs	r0, #37	; 0x25
 80034f2:	f001 ffdd 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034f6:	2025      	movs	r0, #37	; 0x25
 80034f8:	f001 fff4 	bl	80054e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034fc:	bf00      	nop
 80034fe:	37e8      	adds	r7, #232	; 0xe8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40011000 	.word	0x40011000
 8003508:	58024400 	.word	0x58024400
 800350c:	58020000 	.word	0x58020000
 8003510:	24000680 	.word	0x24000680
 8003514:	40020040 	.word	0x40020040

08003518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b090      	sub	sp, #64	; 0x40
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d827      	bhi.n	8003576 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003526:	2200      	movs	r2, #0
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	2036      	movs	r0, #54	; 0x36
 800352c:	f001 ffc0 	bl	80054b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003530:	2036      	movs	r0, #54	; 0x36
 8003532:	f001 ffd7 	bl	80054e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003536:	4a29      	ldr	r2, [pc, #164]	; (80035dc <HAL_InitTick+0xc4>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800353c:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <HAL_InitTick+0xc8>)
 800353e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003542:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <HAL_InitTick+0xc8>)
 8003544:	f043 0310 	orr.w	r3, r3, #16
 8003548:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_InitTick+0xc8>)
 800354e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800355a:	f107 0210 	add.w	r2, r7, #16
 800355e:	f107 0314 	add.w	r3, r7, #20
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f007 fa2b 	bl	800a9c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <HAL_InitTick+0x6a>
 8003574:	e001      	b.n	800357a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e02b      	b.n	80035d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800357a:	f007 f9f5 	bl	800a968 <HAL_RCC_GetPCLK1Freq>
 800357e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003580:	e004      	b.n	800358c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003582:	f007 f9f1 	bl	800a968 <HAL_RCC_GetPCLK1Freq>
 8003586:	4603      	mov	r3, r0
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358e:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <HAL_InitTick+0xcc>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	0c9b      	lsrs	r3, r3, #18
 8003596:	3b01      	subs	r3, #1
 8003598:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800359a:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_InitTick+0xd0>)
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_InitTick+0xd4>)
 800359e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_InitTick+0xd0>)
 80035a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035a8:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_InitTick+0xd0>)
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_InitTick+0xd0>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_InitTick+0xd0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80035ba:	480b      	ldr	r0, [pc, #44]	; (80035e8 <HAL_InitTick+0xd0>)
 80035bc:	f00a feb3 	bl	800e326 <HAL_TIM_Base_Init>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80035c6:	4808      	ldr	r0, [pc, #32]	; (80035e8 <HAL_InitTick+0xd0>)
 80035c8:	f00a ff74 	bl	800e4b4 <HAL_TIM_Base_Start_IT>
 80035cc:	4603      	mov	r3, r0
 80035ce:	e000      	b.n	80035d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3740      	adds	r7, #64	; 0x40
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	24000098 	.word	0x24000098
 80035e0:	58024400 	.word	0x58024400
 80035e4:	431bde83 	.word	0x431bde83
 80035e8:	24001078 	.word	0x24001078
 80035ec:	40001000 	.word	0x40001000

080035f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80035f4:	e7fe      	b.n	80035f4 <NMI_Handler+0x4>

080035f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035fa:	e7fe      	b.n	80035fa <HardFault_Handler+0x4>

080035fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003600:	e7fe      	b.n	8003600 <MemManage_Handler+0x4>

08003602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003606:	e7fe      	b.n	8003606 <BusFault_Handler+0x4>

08003608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800360c:	e7fe      	b.n	800360c <UsageFault_Handler+0x4>

0800360e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003620:	4802      	ldr	r0, [pc, #8]	; (800362c <DMA1_Stream0_IRQHandler+0x10>)
 8003622:	f003 fe9d 	bl	8007360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	24000204 	.word	0x24000204

08003630 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <DMA1_Stream1_IRQHandler+0x10>)
 8003636:	f003 fe93 	bl	8007360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	2400027c 	.word	0x2400027c

08003644 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <DMA1_Stream2_IRQHandler+0x10>)
 800364a:	f003 fe89 	bl	8007360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	24000680 	.word	0x24000680

08003658 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <DMA1_Stream5_IRQHandler+0x10>)
 800365e:	f003 fe7f 	bl	8007360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	24000308 	.word	0x24000308

0800366c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <TIM1_BRK_IRQHandler+0x10>)
 8003672:	f00b fa36 	bl	800eae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	24000508 	.word	0x24000508

08003680 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <TIM1_UP_IRQHandler+0x10>)
 8003686:	f00b fa2c 	bl	800eae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	24000508 	.word	0x24000508

08003694 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <TIM1_TRG_COM_IRQHandler+0x10>)
 800369a:	f00b fa22 	bl	800eae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	24000508 	.word	0x24000508

080036a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <TIM1_CC_IRQHandler+0x10>)
 80036ae:	f00b fa18 	bl	800eae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	24000508 	.word	0x24000508

080036bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <TIM2_IRQHandler+0x10>)
 80036c2:	f00b fa0e 	bl	800eae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	24000554 	.word	0x24000554

080036d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <TIM3_IRQHandler+0x10>)
 80036d6:	f00b fa04 	bl	800eae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	240005a0 	.word	0x240005a0

080036e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <USART1_IRQHandler+0x10>)
 80036ea:	f00c fd07 	bl	80100fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	240005ec 	.word	0x240005ec

080036f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <TIM6_DAC_IRQHandler+0x20>)
 80036fe:	791b      	ldrb	r3, [r3, #4]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003706:	4804      	ldr	r0, [pc, #16]	; (8003718 <TIM6_DAC_IRQHandler+0x20>)
 8003708:	f002 f881 	bl	800580e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800370c:	4803      	ldr	r0, [pc, #12]	; (800371c <TIM6_DAC_IRQHandler+0x24>)
 800370e:	f00b f9e8 	bl	800eae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	240002f4 	.word	0x240002f4
 800371c:	24001078 	.word	0x24001078

08003720 <ITM_SendChar>:
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <ITM_SendChar+0x48>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <ITM_SendChar+0x48>)
 8003730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <ITM_SendChar+0x4c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a0c      	ldr	r2, [pc, #48]	; (800376c <ITM_SendChar+0x4c>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	bf00      	nop
 8003744:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f8      	beq.n	8003744 <ITM_SendChar+0x24>
 8003752:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000edfc 	.word	0xe000edfc
 800376c:	e0000e00 	.word	0xe0000e00

08003770 <_read>:
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e00a      	b.n	8003798 <_read+0x28>
 8003782:	f3af 8000 	nop.w
 8003786:	4601      	mov	r1, r0
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	60ba      	str	r2, [r7, #8]
 800378e:	b2ca      	uxtb	r2, r1
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3301      	adds	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	dbf0      	blt.n	8003782 <_read+0x12>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_write>:
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e009      	b.n	80037d0 <_write+0x26>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	60ba      	str	r2, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ffab 	bl	8003720 <ITM_SendChar>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	dbf1      	blt.n	80037bc <_write+0x12>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_close>:
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <_fstat>:
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	2300      	movs	r3, #0
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <_isatty>:
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	2301      	movs	r3, #1
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_lseek>:
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	2300      	movs	r3, #0
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <_sbrk>:
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <_sbrk+0x5c>)
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <_sbrk+0x60>)
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <_sbrk+0x64>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <_sbrk+0x22>
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <_sbrk+0x64>)
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <_sbrk+0x68>)
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	429a      	cmp	r2, r3
 800387a:	d207      	bcs.n	800388c <_sbrk+0x40>
 800387c:	f012 fcae 	bl	80161dc <__errno>
 8003880:	4603      	mov	r3, r0
 8003882:	220c      	movs	r2, #12
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800388a:	e009      	b.n	80038a0 <_sbrk+0x54>
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <_sbrk+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <_sbrk+0x64>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <_sbrk+0x64>)
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	24080000 	.word	0x24080000
 80038ac:	00000400 	.word	0x00000400
 80038b0:	240010c4 	.word	0x240010c4
 80038b4:	24005a30 	.word	0x24005a30

080038b8 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80038bc:	4b37      	ldr	r3, [pc, #220]	; (800399c <SystemInit+0xe4>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	4a36      	ldr	r2, [pc, #216]	; (800399c <SystemInit+0xe4>)
 80038c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80038cc:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <SystemInit+0xe8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	2b06      	cmp	r3, #6
 80038d6:	d807      	bhi.n	80038e8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80038d8:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <SystemInit+0xe8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 030f 	bic.w	r3, r3, #15
 80038e0:	4a2f      	ldr	r2, [pc, #188]	; (80039a0 <SystemInit+0xe8>)
 80038e2:	f043 0307 	orr.w	r3, r3, #7
 80038e6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80038e8:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <SystemInit+0xec>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2d      	ldr	r2, [pc, #180]	; (80039a4 <SystemInit+0xec>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <SystemInit+0xec>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <SystemInit+0xec>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4929      	ldr	r1, [pc, #164]	; (80039a4 <SystemInit+0xec>)
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <SystemInit+0xf0>)
 8003902:	4013      	ands	r3, r2
 8003904:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <SystemInit+0xe8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <SystemInit+0xe8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 030f 	bic.w	r3, r3, #15
 800391a:	4a21      	ldr	r2, [pc, #132]	; (80039a0 <SystemInit+0xe8>)
 800391c:	f043 0307 	orr.w	r3, r3, #7
 8003920:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <SystemInit+0xec>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003928:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <SystemInit+0xec>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <SystemInit+0xec>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <SystemInit+0xec>)
 8003936:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <SystemInit+0xf4>)
 8003938:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <SystemInit+0xec>)
 800393c:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <SystemInit+0xf8>)
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <SystemInit+0xec>)
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <SystemInit+0xfc>)
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003946:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <SystemInit+0xec>)
 8003948:	2200      	movs	r2, #0
 800394a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 800394c:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <SystemInit+0xec>)
 800394e:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <SystemInit+0xfc>)
 8003950:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <SystemInit+0xec>)
 8003954:	2200      	movs	r2, #0
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <SystemInit+0xec>)
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <SystemInit+0xfc>)
 800395c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <SystemInit+0xec>)
 8003960:	2200      	movs	r2, #0
 8003962:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <SystemInit+0xec>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <SystemInit+0xec>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <SystemInit+0xec>)
 8003972:	2200      	movs	r2, #0
 8003974:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <SystemInit+0x100>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <SystemInit+0x104>)
 800397c:	4013      	ands	r3, r2
 800397e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003982:	d202      	bcs.n	800398a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <SystemInit+0x108>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800398a:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <SystemInit+0x10c>)
 800398c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003990:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00
 80039a0:	52002000 	.word	0x52002000
 80039a4:	58024400 	.word	0x58024400
 80039a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80039ac:	02020200 	.word	0x02020200
 80039b0:	01ff0000 	.word	0x01ff0000
 80039b4:	01010280 	.word	0x01010280
 80039b8:	5c001000 	.word	0x5c001000
 80039bc:	ffff0000 	.word	0xffff0000
 80039c0:	51008108 	.word	0x51008108
 80039c4:	52004000 	.word	0x52004000

080039c8 <Reset_Handler>:
 80039c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a00 <LoopFillZerobss+0xe>
 80039cc:	f7ff ff74 	bl	80038b8 <SystemInit>
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <LoopFillZerobss+0x12>)
 80039d2:	490d      	ldr	r1, [pc, #52]	; (8003a08 <LoopFillZerobss+0x16>)
 80039d4:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <LoopFillZerobss+0x1a>)
 80039d6:	2300      	movs	r3, #0
 80039d8:	e002      	b.n	80039e0 <LoopCopyDataInit>

080039da <CopyDataInit>:
 80039da:	58d4      	ldr	r4, [r2, r3]
 80039dc:	50c4      	str	r4, [r0, r3]
 80039de:	3304      	adds	r3, #4

080039e0 <LoopCopyDataInit>:
 80039e0:	18c4      	adds	r4, r0, r3
 80039e2:	428c      	cmp	r4, r1
 80039e4:	d3f9      	bcc.n	80039da <CopyDataInit>
 80039e6:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <LoopFillZerobss+0x1e>)
 80039e8:	4c0a      	ldr	r4, [pc, #40]	; (8003a14 <LoopFillZerobss+0x22>)
 80039ea:	2300      	movs	r3, #0
 80039ec:	e001      	b.n	80039f2 <LoopFillZerobss>

080039ee <FillZerobss>:
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	3204      	adds	r2, #4

080039f2 <LoopFillZerobss>:
 80039f2:	42a2      	cmp	r2, r4
 80039f4:	d3fb      	bcc.n	80039ee <FillZerobss>
 80039f6:	f012 fbf7 	bl	80161e8 <__libc_init_array>
 80039fa:	f7fd fa53 	bl	8000ea4 <main>
 80039fe:	4770      	bx	lr
 8003a00:	24080000 	.word	0x24080000
 8003a04:	24000000 	.word	0x24000000
 8003a08:	24000108 	.word	0x24000108
 8003a0c:	080170b4 	.word	0x080170b4
 8003a10:	24000120 	.word	0x24000120
 8003a14:	24005a2c 	.word	0x24005a2c

08003a18 <ADC3_IRQHandler>:
 8003a18:	e7fe      	b.n	8003a18 <ADC3_IRQHandler>
	...

08003a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a22:	2003      	movs	r0, #3
 8003a24:	f001 fd39 	bl	800549a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a28:	f006 fdf4 	bl	800a614 <HAL_RCC_GetSysClockFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <HAL_Init+0x68>)
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	4913      	ldr	r1, [pc, #76]	; (8003a88 <HAL_Init+0x6c>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
 8003a44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <HAL_Init+0x68>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <HAL_Init+0x6c>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <HAL_Init+0x70>)
 8003a5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_Init+0x74>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a66:	2005      	movs	r0, #5
 8003a68:	f7ff fd56 	bl	8003518 <HAL_InitTick>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e002      	b.n	8003a7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a76:	f7ff f8c1 	bl	8002bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	58024400 	.word	0x58024400
 8003a88:	08017000 	.word	0x08017000
 8003a8c:	24000094 	.word	0x24000094
 8003a90:	24000090 	.word	0x24000090

08003a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x20>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	2400009c 	.word	0x2400009c
 8003ab8:	240010c8 	.word	0x240010c8

08003abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_GetTick+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	240010c8 	.word	0x240010c8

08003ad4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_GetREVID+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0c1b      	lsrs	r3, r3, #16
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	5c001000 	.word	0x5c001000

08003aec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	4904      	ldr	r1, [pc, #16]	; (8003b14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	58000400 	.word	0x58000400

08003b18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	609a      	str	r2, [r3, #8]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3360      	adds	r3, #96	; 0x60
 8003b92:	461a      	mov	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	611a      	str	r2, [r3, #16]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3360      	adds	r3, #96	; 0x60
 8003c02:	461a      	mov	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	601a      	str	r2, [r3, #0]
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3330      	adds	r3, #48	; 0x30
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	211f      	movs	r1, #31
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	401a      	ands	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0e9b      	lsrs	r3, r3, #26
 8003c86:	f003 011f 	and.w	r1, r3, #31
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	431a      	orrs	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f023 0203 	bic.w	r2, r3, #3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	0e5b      	lsrs	r3, r3, #25
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	4413      	add	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	0d1b      	lsrs	r3, r3, #20
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2107      	movs	r1, #7
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	401a      	ands	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	0d1b      	lsrs	r3, r3, #20
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	431a      	orrs	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0318 	and.w	r3, r3, #24
 8003d46:	4908      	ldr	r1, [pc, #32]	; (8003d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d48:	40d9      	lsrs	r1, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	000fffff 	.word	0x000fffff

08003d6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 031f 	and.w	r3, r3, #31
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6093      	str	r3, [r2, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	5fffffc0 	.word	0x5fffffc0

08003dac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc0:	d101      	bne.n	8003dc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	6fffffc0 	.word	0x6fffffc0

08003dfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e10:	d101      	bne.n	8003e16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <LL_ADC_Enable+0x24>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	f043 0201 	orr.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	7fffffc0 	.word	0x7fffffc0

08003e4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <LL_ADC_Disable+0x24>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	f043 0202 	orr.w	r2, r3, #2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	7fffffc0 	.word	0x7fffffc0

08003e74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <LL_ADC_IsEnabled+0x18>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <LL_ADC_IsEnabled+0x1a>
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d101      	bne.n	8003eb2 <LL_ADC_IsDisableOngoing+0x18>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <LL_ADC_IsDisableOngoing+0x1a>
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <LL_ADC_REG_StartConversion+0x24>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	f043 0204 	orr.w	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	7fffffc0 	.word	0x7fffffc0

08003ee8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d101      	bne.n	8003f00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d101      	bne.n	8003f26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e18f      	b.n	800426e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fe fe6b 	bl	8002c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff19 	bl	8003dac <LL_ADC_IsDeepPowerDownEnabled>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff feff 	bl	8003d88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff34 	bl	8003dfc <LL_ADC_IsInternalRegulatorEnabled>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d114      	bne.n	8003fc4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ff18 	bl	8003dd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fa4:	4b87      	ldr	r3, [pc, #540]	; (80041c4 <HAL_ADC_Init+0x290>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	099b      	lsrs	r3, r3, #6
 8003faa:	4a87      	ldr	r2, [pc, #540]	; (80041c8 <HAL_ADC_Init+0x294>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fb6:	e002      	b.n	8003fbe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f9      	bne.n	8003fb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff17 	bl	8003dfc <LL_ADC_IsInternalRegulatorEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd8:	f043 0210 	orr.w	r2, r3, #16
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff77 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 8003ffa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 8129 	bne.w	800425c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 8125 	bne.w	800425c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800401a:	f043 0202 	orr.w	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff24 	bl	8003e74 <LL_ADC_IsEnabled>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d136      	bne.n	80040a0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a65      	ldr	r2, [pc, #404]	; (80041cc <HAL_ADC_Init+0x298>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_ADC_Init+0x112>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a63      	ldr	r2, [pc, #396]	; (80041d0 <HAL_ADC_Init+0x29c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10e      	bne.n	8004064 <HAL_ADC_Init+0x130>
 8004046:	4861      	ldr	r0, [pc, #388]	; (80041cc <HAL_ADC_Init+0x298>)
 8004048:	f7ff ff14 	bl	8003e74 <LL_ADC_IsEnabled>
 800404c:	4604      	mov	r4, r0
 800404e:	4860      	ldr	r0, [pc, #384]	; (80041d0 <HAL_ADC_Init+0x29c>)
 8004050:	f7ff ff10 	bl	8003e74 <LL_ADC_IsEnabled>
 8004054:	4603      	mov	r3, r0
 8004056:	4323      	orrs	r3, r4
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e008      	b.n	8004076 <HAL_ADC_Init+0x142>
 8004064:	485b      	ldr	r0, [pc, #364]	; (80041d4 <HAL_ADC_Init+0x2a0>)
 8004066:	f7ff ff05 	bl	8003e74 <LL_ADC_IsEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d012      	beq.n	80040a0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a53      	ldr	r2, [pc, #332]	; (80041cc <HAL_ADC_Init+0x298>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_ADC_Init+0x15a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a51      	ldr	r2, [pc, #324]	; (80041d0 <HAL_ADC_Init+0x29c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_ADC_Init+0x15e>
 800408e:	4a52      	ldr	r2, [pc, #328]	; (80041d8 <HAL_ADC_Init+0x2a4>)
 8004090:	e000      	b.n	8004094 <HAL_ADC_Init+0x160>
 8004092:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_ADC_Init+0x2a8>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7ff fd3c 	bl	8003b18 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80040a0:	f7ff fd18 	bl	8003ad4 <HAL_GetREVID>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d914      	bls.n	80040d8 <HAL_ADC_Init+0x1a4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d110      	bne.n	80040d8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7d5b      	ldrb	r3, [r3, #21]
 80040ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040c0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7f1b      	ldrb	r3, [r3, #28]
 80040cc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80040ce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040d0:	f043 030c 	orr.w	r3, r3, #12
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	e00d      	b.n	80040f4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7d5b      	ldrb	r3, [r3, #21]
 80040dc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040e2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040e8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7f1b      	ldrb	r3, [r3, #28]
 80040ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7f1b      	ldrb	r3, [r3, #28]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d106      	bne.n	800410a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	3b01      	subs	r3, #1
 8004102:	045b      	lsls	r3, r3, #17
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <HAL_ADC_Init+0x2ac>)
 800412e:	4013      	ands	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	69b9      	ldr	r1, [r7, #24]
 8004136:	430b      	orrs	r3, r1
 8004138:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fed2 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 8004144:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fedf 	bl	8003f0e <LL_ADC_INJ_IsConversionOngoing>
 8004150:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d15f      	bne.n	8004218 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d15c      	bne.n	8004218 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7d1b      	ldrb	r3, [r3, #20]
 8004162:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <HAL_ADC_Init+0x2b0>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	69b9      	ldr	r1, [r7, #24]
 800417c:	430b      	orrs	r3, r1
 800417e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004186:	2b01      	cmp	r3, #1
 8004188:	d130      	bne.n	80041ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <HAL_ADC_Init+0x2b4>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800419e:	3a01      	subs	r2, #1
 80041a0:	0411      	lsls	r1, r2, #16
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041ac:	4311      	orrs	r1, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041b2:	430a      	orrs	r2, r1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	611a      	str	r2, [r3, #16]
 80041c0:	e01c      	b.n	80041fc <HAL_ADC_Init+0x2c8>
 80041c2:	bf00      	nop
 80041c4:	24000090 	.word	0x24000090
 80041c8:	053e2d63 	.word	0x053e2d63
 80041cc:	40022000 	.word	0x40022000
 80041d0:	40022100 	.word	0x40022100
 80041d4:	58026000 	.word	0x58026000
 80041d8:	40022300 	.word	0x40022300
 80041dc:	58026300 	.word	0x58026300
 80041e0:	fff0c003 	.word	0xfff0c003
 80041e4:	ffffbffc 	.word	0xffffbffc
 80041e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fdec 	bl	8004df0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10c      	bne.n	800423a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f023 010f 	bic.w	r1, r3, #15
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	1e5a      	subs	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
 8004238:	e007      	b.n	800424a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 020f 	bic.w	r2, r2, #15
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
 800425a:	e007      	b.n	800426c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f043 0210 	orr.w	r2, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800426c:	7ffb      	ldrb	r3, [r7, #31]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3724      	adds	r7, #36	; 0x24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd90      	pop	{r4, r7, pc}
 8004276:	bf00      	nop

08004278 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a55      	ldr	r2, [pc, #340]	; (80043e0 <HAL_ADC_Start_DMA+0x168>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_ADC_Start_DMA+0x20>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a54      	ldr	r2, [pc, #336]	; (80043e4 <HAL_ADC_Start_DMA+0x16c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_ADC_Start_DMA+0x24>
 8004298:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <HAL_ADC_Start_DMA+0x170>)
 800429a:	e000      	b.n	800429e <HAL_ADC_Start_DMA+0x26>
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <HAL_ADC_Start_DMA+0x174>)
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fd64 	bl	8003d6c <LL_ADC_GetMultimode>
 80042a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fe1c 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 808c 	bne.w	80043d0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_Start_DMA+0x4e>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e087      	b.n	80043d6 <HAL_ADC_Start_DMA+0x15e>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d002      	beq.n	80042e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d170      	bne.n	80043c2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fc07 	bl	8004af4 <ADC_Enable>
 80042e6:	4603      	mov	r3, r0
 80042e8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d163      	bne.n	80043b8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042f4:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_ADC_Start_DMA+0x178>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a37      	ldr	r2, [pc, #220]	; (80043e4 <HAL_ADC_Start_DMA+0x16c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d002      	beq.n	8004310 <HAL_ADC_Start_DMA+0x98>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	e000      	b.n	8004312 <HAL_ADC_Start_DMA+0x9a>
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_ADC_Start_DMA+0x168>)
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	4293      	cmp	r3, r2
 8004318:	d002      	beq.n	8004320 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	f023 0206 	bic.w	r2, r3, #6
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	659a      	str	r2, [r3, #88]	; 0x58
 8004344:	e002      	b.n	800434c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004350:	4a28      	ldr	r2, [pc, #160]	; (80043f4 <HAL_ADC_Start_DMA+0x17c>)
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <HAL_ADC_Start_DMA+0x180>)
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004360:	4a26      	ldr	r2, [pc, #152]	; (80043fc <HAL_ADC_Start_DMA+0x184>)
 8004362:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	221c      	movs	r2, #28
 800436a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0210 	orr.w	r2, r2, #16
 8004382:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7ff fc89 	bl	8003ca6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3340      	adds	r3, #64	; 0x40
 800439e:	4619      	mov	r1, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f002 f80e 	bl	80063c4 <HAL_DMA_Start_IT>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fd85 	bl	8003ec0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80043b6:	e00d      	b.n	80043d4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80043c0:	e008      	b.n	80043d4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80043ce:	e001      	b.n	80043d4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40022000 	.word	0x40022000
 80043e4:	40022100 	.word	0x40022100
 80043e8:	40022300 	.word	0x40022300
 80043ec:	58026300 	.word	0x58026300
 80043f0:	fffff0fe 	.word	0xfffff0fe
 80043f4:	08004cc7 	.word	0x08004cc7
 80043f8:	08004d9f 	.word	0x08004d9f
 80043fc:	08004dbb 	.word	0x08004dbb

08004400 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b0a1      	sub	sp, #132	; 0x84
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4a65      	ldr	r2, [pc, #404]	; (80045ec <HAL_ADC_ConfigChannel+0x1b0>)
 8004456:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x2a>
 8004462:	2302      	movs	r3, #2
 8004464:	e32e      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x688>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fd38 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 8313 	bne.w	8004aa6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	db2c      	blt.n	80044e2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x6a>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	0e9b      	lsrs	r3, r3, #26
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2201      	movs	r2, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	e016      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x98>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044b6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80044be:	2320      	movs	r3, #32
 80044c0:	e003      	b.n	80044ca <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80044c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2201      	movs	r2, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	69d1      	ldr	r1, [r2, #28]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	430b      	orrs	r3, r1
 80044e0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7ff fbad 	bl	8003c4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fcf5 	bl	8003ee8 <LL_ADC_REG_IsConversionOngoing>
 80044fe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fd02 	bl	8003f0e <LL_ADC_INJ_IsConversionOngoing>
 800450a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800450c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 80b8 	bne.w	8004684 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004516:	2b00      	cmp	r3, #0
 8004518:	f040 80b4 	bne.w	8004684 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	461a      	mov	r2, r3
 800452a:	f7ff fbcf 	bl	8003ccc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800452e:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800453a:	d10b      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x118>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	e01d      	b.n	8004590 <HAL_ADC_ConfigChannel+0x154>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_ADC_ConfigChannel+0x13e>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	089b      	lsrs	r3, r3, #2
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	e00a      	b.n	8004590 <HAL_ADC_ConfigChannel+0x154>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b04      	cmp	r3, #4
 8004598:	d02c      	beq.n	80045f4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6919      	ldr	r1, [r3, #16]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a8:	f7ff faea 	bl	8003b80 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6919      	ldr	r1, [r3, #16]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	7e5b      	ldrb	r3, [r3, #25]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d102      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x186>
 80045bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045c0:	e000      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x188>
 80045c2:	2300      	movs	r3, #0
 80045c4:	461a      	mov	r2, r3
 80045c6:	f7ff fb14 	bl	8003bf2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6919      	ldr	r1, [r3, #16]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	7e1b      	ldrb	r3, [r3, #24]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d102      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x1a4>
 80045da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045de:	e000      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x1a6>
 80045e0:	2300      	movs	r3, #0
 80045e2:	461a      	mov	r2, r3
 80045e4:	f7ff faec 	bl	8003bc0 <LL_ADC_SetDataRightShift>
 80045e8:	e04c      	b.n	8004684 <HAL_ADC_ConfigChannel+0x248>
 80045ea:	bf00      	nop
 80045ec:	47ff0000 	.word	0x47ff0000
 80045f0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	069b      	lsls	r3, r3, #26
 8004604:	429a      	cmp	r2, r3
 8004606:	d107      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004616:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	069b      	lsls	r3, r3, #26
 8004628:	429a      	cmp	r2, r3
 800462a:	d107      	bne.n	800463c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800463a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	069b      	lsls	r3, r3, #26
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800465e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	069b      	lsls	r3, r3, #26
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004682:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fbf3 	bl	8003e74 <LL_ADC_IsEnabled>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 8211 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f7ff fb3e 	bl	8003d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4aa1      	ldr	r2, [pc, #644]	; (8004934 <HAL_ADC_ConfigChannel+0x4f8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	f040 812e 	bne.w	8004910 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x2a0>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	3301      	adds	r3, #1
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	bf94      	ite	ls
 80046d4:	2301      	movls	r3, #1
 80046d6:	2300      	movhi	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e019      	b.n	8004710 <HAL_ADC_ConfigChannel+0x2d4>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80046ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80046ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80046f4:	2320      	movs	r3, #32
 80046f6:	e003      	b.n	8004700 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80046f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	3301      	adds	r3, #1
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2b09      	cmp	r3, #9
 8004708:	bf94      	ite	ls
 800470a:	2301      	movls	r3, #1
 800470c:	2300      	movhi	r3, #0
 800470e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004710:	2b00      	cmp	r3, #0
 8004712:	d079      	beq.n	8004808 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x2f4>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0e9b      	lsrs	r3, r3, #26
 8004726:	3301      	adds	r3, #1
 8004728:	069b      	lsls	r3, r3, #26
 800472a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800472e:	e015      	b.n	800475c <HAL_ADC_ConfigChannel+0x320>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	fa93 f3a3 	rbit	r3, r3
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800473e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004740:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004748:	2320      	movs	r3, #32
 800474a:	e003      	b.n	8004754 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800474c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	3301      	adds	r3, #1
 8004756:	069b      	lsls	r3, r3, #26
 8004758:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_ADC_ConfigChannel+0x340>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	3301      	adds	r3, #1
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f303 	lsl.w	r3, r1, r3
 800477a:	e017      	b.n	80047ac <HAL_ADC_ConfigChannel+0x370>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004794:	2320      	movs	r3, #32
 8004796:	e003      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	3301      	adds	r3, #1
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	ea42 0103 	orr.w	r1, r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x396>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	0e9b      	lsrs	r3, r3, #26
 80047c2:	3301      	adds	r3, #1
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	4613      	mov	r3, r2
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4413      	add	r3, r2
 80047ce:	051b      	lsls	r3, r3, #20
 80047d0:	e018      	b.n	8004804 <HAL_ADC_ConfigChannel+0x3c8>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80047ea:	2320      	movs	r3, #32
 80047ec:	e003      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	f003 021f 	and.w	r2, r3, #31
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004804:	430b      	orrs	r3, r1
 8004806:	e07e      	b.n	8004906 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004810:	2b00      	cmp	r3, #0
 8004812:	d107      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x3e8>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0e9b      	lsrs	r3, r3, #26
 800481a:	3301      	adds	r3, #1
 800481c:	069b      	lsls	r3, r3, #26
 800481e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004822:	e015      	b.n	8004850 <HAL_ADC_ConfigChannel+0x414>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	fa93 f3a3 	rbit	r3, r3
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800483c:	2320      	movs	r3, #32
 800483e:	e003      	b.n	8004848 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	fab3 f383 	clz	r3, r3
 8004846:	b2db      	uxtb	r3, r3
 8004848:	3301      	adds	r3, #1
 800484a:	069b      	lsls	r3, r3, #26
 800484c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x434>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	3301      	adds	r3, #1
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	e017      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x464>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	61bb      	str	r3, [r7, #24]
  return result;
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004888:	2320      	movs	r3, #32
 800488a:	e003      	b.n	8004894 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	3301      	adds	r3, #1
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2101      	movs	r1, #1
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	ea42 0103 	orr.w	r1, r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10d      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x490>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	0e9b      	lsrs	r3, r3, #26
 80048b6:	3301      	adds	r3, #1
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	3b1e      	subs	r3, #30
 80048c4:	051b      	lsls	r3, r3, #20
 80048c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048ca:	e01b      	b.n	8004904 <HAL_ADC_ConfigChannel+0x4c8>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	60fb      	str	r3, [r7, #12]
  return result;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80048e4:	2320      	movs	r3, #32
 80048e6:	e003      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	fab3 f383 	clz	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	3301      	adds	r3, #1
 80048f2:	f003 021f 	and.w	r2, r3, #31
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	3b1e      	subs	r3, #30
 80048fe:	051b      	lsls	r3, r3, #20
 8004900:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004904:	430b      	orrs	r3, r1
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	4619      	mov	r1, r3
 800490c:	f7ff f9de 	bl	8003ccc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f280 80cf 	bge.w	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a06      	ldr	r2, [pc, #24]	; (8004938 <HAL_ADC_ConfigChannel+0x4fc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_ADC_ConfigChannel+0x4f2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <HAL_ADC_ConfigChannel+0x500>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10a      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x508>
 800492e:	4b04      	ldr	r3, [pc, #16]	; (8004940 <HAL_ADC_ConfigChannel+0x504>)
 8004930:	e009      	b.n	8004946 <HAL_ADC_ConfigChannel+0x50a>
 8004932:	bf00      	nop
 8004934:	47ff0000 	.word	0x47ff0000
 8004938:	40022000 	.word	0x40022000
 800493c:	40022100 	.word	0x40022100
 8004940:	40022300 	.word	0x40022300
 8004944:	4b61      	ldr	r3, [pc, #388]	; (8004acc <HAL_ADC_ConfigChannel+0x690>)
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff f90c 	bl	8003b64 <LL_ADC_GetCommonPathInternalCh>
 800494c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a5f      	ldr	r2, [pc, #380]	; (8004ad0 <HAL_ADC_ConfigChannel+0x694>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x526>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a5d      	ldr	r2, [pc, #372]	; (8004ad4 <HAL_ADC_ConfigChannel+0x698>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10e      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x544>
 8004962:	485b      	ldr	r0, [pc, #364]	; (8004ad0 <HAL_ADC_ConfigChannel+0x694>)
 8004964:	f7ff fa86 	bl	8003e74 <LL_ADC_IsEnabled>
 8004968:	4604      	mov	r4, r0
 800496a:	485a      	ldr	r0, [pc, #360]	; (8004ad4 <HAL_ADC_ConfigChannel+0x698>)
 800496c:	f7ff fa82 	bl	8003e74 <LL_ADC_IsEnabled>
 8004970:	4603      	mov	r3, r0
 8004972:	4323      	orrs	r3, r4
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e008      	b.n	8004992 <HAL_ADC_ConfigChannel+0x556>
 8004980:	4855      	ldr	r0, [pc, #340]	; (8004ad8 <HAL_ADC_ConfigChannel+0x69c>)
 8004982:	f7ff fa77 	bl	8003e74 <LL_ADC_IsEnabled>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d07d      	beq.n	8004a92 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a50      	ldr	r2, [pc, #320]	; (8004adc <HAL_ADC_ConfigChannel+0x6a0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d130      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x5c6>
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d12b      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4a      	ldr	r2, [pc, #296]	; (8004ad8 <HAL_ADC_ConfigChannel+0x69c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	f040 8081 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a45      	ldr	r2, [pc, #276]	; (8004ad0 <HAL_ADC_ConfigChannel+0x694>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_ADC_ConfigChannel+0x58e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a43      	ldr	r2, [pc, #268]	; (8004ad4 <HAL_ADC_ConfigChannel+0x698>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x592>
 80049ca:	4a45      	ldr	r2, [pc, #276]	; (8004ae0 <HAL_ADC_ConfigChannel+0x6a4>)
 80049cc:	e000      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x594>
 80049ce:	4a3f      	ldr	r2, [pc, #252]	; (8004acc <HAL_ADC_ConfigChannel+0x690>)
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7ff f8b0 	bl	8003b3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049de:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <HAL_ADC_ConfigChannel+0x6a8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	4a40      	ldr	r2, [pc, #256]	; (8004ae8 <HAL_ADC_ConfigChannel+0x6ac>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	099b      	lsrs	r3, r3, #6
 80049ec:	3301      	adds	r3, #1
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80049f2:	e002      	b.n	80049fa <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f9      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a00:	e05a      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a39      	ldr	r2, [pc, #228]	; (8004aec <HAL_ADC_ConfigChannel+0x6b0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d11e      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x60e>
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d119      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ad8 <HAL_ADC_ConfigChannel+0x69c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d14b      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <HAL_ADC_ConfigChannel+0x694>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_ADC_ConfigChannel+0x5f8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <HAL_ADC_ConfigChannel+0x698>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d101      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x5fc>
 8004a34:	4a2a      	ldr	r2, [pc, #168]	; (8004ae0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004a36:	e000      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x5fe>
 8004a38:	4a24      	ldr	r2, [pc, #144]	; (8004acc <HAL_ADC_ConfigChannel+0x690>)
 8004a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f7ff f87b 	bl	8003b3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a48:	e036      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d131      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d12c      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <HAL_ADC_ConfigChannel+0x69c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d127      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_ADC_ConfigChannel+0x694>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0x640>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <HAL_ADC_ConfigChannel+0x698>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d101      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x644>
 8004a7c:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004a7e:	e000      	b.n	8004a82 <HAL_ADC_ConfigChannel+0x646>
 8004a80:	4a12      	ldr	r2, [pc, #72]	; (8004acc <HAL_ADC_ConfigChannel+0x690>)
 8004a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7ff f857 	bl	8003b3e <LL_ADC_SetCommonPathInternalCh>
 8004a90:	e012      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004aa4:	e008      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	f043 0220 	orr.w	r2, r3, #32
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ac0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3784      	adds	r7, #132	; 0x84
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd90      	pop	{r4, r7, pc}
 8004acc:	58026300 	.word	0x58026300
 8004ad0:	40022000 	.word	0x40022000
 8004ad4:	40022100 	.word	0x40022100
 8004ad8:	58026000 	.word	0x58026000
 8004adc:	cb840000 	.word	0xcb840000
 8004ae0:	40022300 	.word	0x40022300
 8004ae4:	24000090 	.word	0x24000090
 8004ae8:	053e2d63 	.word	0x053e2d63
 8004aec:	c7520000 	.word	0xc7520000
 8004af0:	cfb80000 	.word	0xcfb80000

08004af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff f9b7 	bl	8003e74 <LL_ADC_IsEnabled>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d16e      	bne.n	8004bea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <ADC_Enable+0x100>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f043 0210 	orr.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e05a      	b.n	8004bec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff f972 	bl	8003e24 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b40:	f7fe ffbc 	bl	8003abc <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <ADC_Enable+0x104>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <ADC_Enable+0x66>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a29      	ldr	r2, [pc, #164]	; (8004bfc <ADC_Enable+0x108>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d101      	bne.n	8004b5e <ADC_Enable+0x6a>
 8004b5a:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <ADC_Enable+0x10c>)
 8004b5c:	e000      	b.n	8004b60 <ADC_Enable+0x6c>
 8004b5e:	4b29      	ldr	r3, [pc, #164]	; (8004c04 <ADC_Enable+0x110>)
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff f903 	bl	8003d6c <LL_ADC_GetMultimode>
 8004b66:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a23      	ldr	r2, [pc, #140]	; (8004bfc <ADC_Enable+0x108>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d002      	beq.n	8004b78 <ADC_Enable+0x84>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	e000      	b.n	8004b7a <ADC_Enable+0x86>
 8004b78:	4b1f      	ldr	r3, [pc, #124]	; (8004bf8 <ADC_Enable+0x104>)
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02c      	beq.n	8004bdc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d130      	bne.n	8004bea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b88:	e028      	b.n	8004bdc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff f970 	bl	8003e74 <LL_ADC_IsEnabled>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff f940 	bl	8003e24 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ba4:	f7fe ff8a 	bl	8003abc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d914      	bls.n	8004bdc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d00d      	beq.n	8004bdc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	f043 0210 	orr.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	f043 0201 	orr.w	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e007      	b.n	8004bec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d1cf      	bne.n	8004b8a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	8000003f 	.word	0x8000003f
 8004bf8:	40022000 	.word	0x40022000
 8004bfc:	40022100 	.word	0x40022100
 8004c00:	40022300 	.word	0x40022300
 8004c04:	58026300 	.word	0x58026300

08004c08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff f940 	bl	8003e9a <LL_ADC_IsDisableOngoing>
 8004c1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff f927 	bl	8003e74 <LL_ADC_IsEnabled>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d047      	beq.n	8004cbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d144      	bne.n	8004cbc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030d 	and.w	r3, r3, #13
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10c      	bne.n	8004c5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff f901 	bl	8003e4c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c52:	f7fe ff33 	bl	8003abc <HAL_GetTick>
 8004c56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c58:	e029      	b.n	8004cae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	f043 0210 	orr.w	r2, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	f043 0201 	orr.w	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e023      	b.n	8004cbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c76:	f7fe ff21 	bl	8003abc <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d914      	bls.n	8004cae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00d      	beq.n	8004cae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f043 0210 	orr.w	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	f043 0201 	orr.w	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e007      	b.n	8004cbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1dc      	bne.n	8004c76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d14b      	bne.n	8004d78 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d021      	beq.n	8004d3e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe ff92 	bl	8003c28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d032      	beq.n	8004d70 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d12b      	bne.n	8004d70 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11f      	bne.n	8004d70 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d34:	f043 0201 	orr.w	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d3c:	e018      	b.n	8004d70 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d111      	bne.n	8004d70 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	f043 0201 	orr.w	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fb45 	bl	8004400 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d76:	e00e      	b.n	8004d96 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff fb4f 	bl	8004428 <HAL_ADC_ErrorCallback>
}
 8004d8a:	e004      	b.n	8004d96 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fb31 	bl	8004414 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	f043 0204 	orr.w	r2, r3, #4
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff fb21 	bl	8004428 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a7a      	ldr	r2, [pc, #488]	; (8004fe8 <ADC_ConfigureBoostMode+0x1f8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <ADC_ConfigureBoostMode+0x1c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a79      	ldr	r2, [pc, #484]	; (8004fec <ADC_ConfigureBoostMode+0x1fc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <ADC_ConfigureBoostMode+0x30>
 8004e0c:	4b78      	ldr	r3, [pc, #480]	; (8004ff0 <ADC_ConfigureBoostMode+0x200>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e008      	b.n	8004e32 <ADC_ConfigureBoostMode+0x42>
 8004e20:	4b74      	ldr	r3, [pc, #464]	; (8004ff4 <ADC_ConfigureBoostMode+0x204>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01c      	beq.n	8004e70 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e36:	f005 fd67 	bl	800a908 <HAL_RCC_GetHCLKFreq>
 8004e3a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e44:	d010      	beq.n	8004e68 <ADC_ConfigureBoostMode+0x78>
 8004e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e4a:	d873      	bhi.n	8004f34 <ADC_ConfigureBoostMode+0x144>
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d002      	beq.n	8004e58 <ADC_ConfigureBoostMode+0x68>
 8004e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e56:	d16d      	bne.n	8004f34 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	60fb      	str	r3, [r7, #12]
        break;
 8004e66:	e068      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	60fb      	str	r3, [r7, #12]
        break;
 8004e6e:	e064      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	f006 ffee 	bl	800be58 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e7c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e86:	d051      	beq.n	8004f2c <ADC_ConfigureBoostMode+0x13c>
 8004e88:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e8c:	d854      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004e8e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e92:	d047      	beq.n	8004f24 <ADC_ConfigureBoostMode+0x134>
 8004e94:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e98:	d84e      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004e9a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e9e:	d03d      	beq.n	8004f1c <ADC_ConfigureBoostMode+0x12c>
 8004ea0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ea4:	d848      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eaa:	d033      	beq.n	8004f14 <ADC_ConfigureBoostMode+0x124>
 8004eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb0:	d842      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004eb2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004eb6:	d029      	beq.n	8004f0c <ADC_ConfigureBoostMode+0x11c>
 8004eb8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ebc:	d83c      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004ebe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ec2:	d01a      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004ec4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ec8:	d836      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004eca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ece:	d014      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004ed0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ed4:	d830      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eda:	d00e      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee0:	d82a      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004ee2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ee6:	d008      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004ee8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004eec:	d824      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004eee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ef2:	d002      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004ef4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef8:	d11e      	bne.n	8004f38 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	0c9b      	lsrs	r3, r3, #18
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	60fb      	str	r3, [r7, #12]
        break;
 8004f0a:	e016      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]
        break;
 8004f12:	e012      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	60fb      	str	r3, [r7, #12]
        break;
 8004f1a:	e00e      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	60fb      	str	r3, [r7, #12]
        break;
 8004f22:	e00a      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	09db      	lsrs	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]
        break;
 8004f2a:	e006      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	60fb      	str	r3, [r7, #12]
        break;
 8004f32:	e002      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f38:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f3a:	f7fe fdcb 	bl	8003ad4 <HAL_GetREVID>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d815      	bhi.n	8004f74 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <ADC_ConfigureBoostMode+0x208>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d908      	bls.n	8004f62 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f60:	e03e      	b.n	8004fe0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f70:	609a      	str	r2, [r3, #8]
}
 8004f72:	e035      	b.n	8004fe0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <ADC_ConfigureBoostMode+0x20c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d808      	bhi.n	8004f94 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f90:	609a      	str	r2, [r3, #8]
}
 8004f92:	e025      	b.n	8004fe0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a1a      	ldr	r2, [pc, #104]	; (8005000 <ADC_ConfigureBoostMode+0x210>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d80a      	bhi.n	8004fb2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	e016      	b.n	8004fe0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a13      	ldr	r2, [pc, #76]	; (8005004 <ADC_ConfigureBoostMode+0x214>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d80a      	bhi.n	8004fd0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fcc:	609a      	str	r2, [r3, #8]
}
 8004fce:	e007      	b.n	8004fe0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40022000 	.word	0x40022000
 8004fec:	40022100 	.word	0x40022100
 8004ff0:	40022300 	.word	0x40022300
 8004ff4:	58026300 	.word	0x58026300
 8004ff8:	01312d00 	.word	0x01312d00
 8004ffc:	005f5e10 	.word	0x005f5e10
 8005000:	00bebc20 	.word	0x00bebc20
 8005004:	017d7840 	.word	0x017d7840

08005008 <LL_ADC_IsEnabled>:
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <LL_ADC_IsEnabled+0x18>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <LL_ADC_IsEnabled+0x1a>
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <LL_ADC_StartCalibration>:
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <LL_ADC_StartCalibration+0x38>)
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005050:	430a      	orrs	r2, r1
 8005052:	4313      	orrs	r3, r2
 8005054:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	3ffeffc0 	.word	0x3ffeffc0

0800506c <LL_ADC_IsCalibrationOnGoing>:
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800507c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005080:	d101      	bne.n	8005086 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <LL_ADC_REG_IsConversionOngoing>:
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d101      	bne.n	80050ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_ADCEx_Calibration_Start+0x1e>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e04c      	b.n	8005174 <HAL_ADCEx_Calibration_Start+0xb8>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fd90 	bl	8004c08 <ADC_Disable>
 80050e8:	4603      	mov	r3, r0
 80050ea:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d135      	bne.n	800515e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f6:	4b21      	ldr	r3, [pc, #132]	; (800517c <HAL_ADCEx_Calibration_Start+0xc0>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	f043 0202 	orr.w	r2, r3, #2
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ff90 	bl	8005030 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005110:	e014      	b.n	800513c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3301      	adds	r3, #1
 8005116:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4a19      	ldr	r2, [pc, #100]	; (8005180 <HAL_ADCEx_Calibration_Start+0xc4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d30d      	bcc.n	800513c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005124:	f023 0312 	bic.w	r3, r3, #18
 8005128:	f043 0210 	orr.w	r2, r3, #16
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e01b      	b.n	8005174 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff93 	bl	800506c <LL_ADC_IsCalibrationOnGoing>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e2      	bne.n	8005112 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	f023 0303 	bic.w	r3, r3, #3
 8005154:	f043 0201 	orr.w	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
 800515c:	e005      	b.n	800516a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f043 0210 	orr.w	r2, r3, #16
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005172:	7dfb      	ldrb	r3, [r7, #23]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	ffffeefd 	.word	0xffffeefd
 8005180:	25c3f800 	.word	0x25c3f800

08005184 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b09f      	sub	sp, #124	; 0x7c
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800519e:	2302      	movs	r3, #2
 80051a0:	e0be      	b.n	8005320 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80051aa:	2300      	movs	r3, #0
 80051ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a5c      	ldr	r2, [pc, #368]	; (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d102      	bne.n	80051c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051bc:	4b5b      	ldr	r3, [pc, #364]	; (800532c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	e001      	b.n	80051c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e09d      	b.n	8005320 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff ff54 	bl	8005094 <LL_ADC_REG_IsConversionOngoing>
 80051ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff ff4e 	bl	8005094 <LL_ADC_REG_IsConversionOngoing>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d17f      	bne.n	80052fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80051fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005200:	2b00      	cmp	r3, #0
 8005202:	d17c      	bne.n	80052fe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a47      	ldr	r2, [pc, #284]	; (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a46      	ldr	r2, [pc, #280]	; (800532c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005218:	4b45      	ldr	r3, [pc, #276]	; (8005330 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800521a:	e000      	b.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800521c:	4b45      	ldr	r3, [pc, #276]	; (8005334 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800521e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d039      	beq.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	431a      	orrs	r2, r3
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a3a      	ldr	r2, [pc, #232]	; (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a38      	ldr	r2, [pc, #224]	; (800532c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d10e      	bne.n	800526c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800524e:	4836      	ldr	r0, [pc, #216]	; (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005250:	f7ff feda 	bl	8005008 <LL_ADC_IsEnabled>
 8005254:	4604      	mov	r4, r0
 8005256:	4835      	ldr	r0, [pc, #212]	; (800532c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005258:	f7ff fed6 	bl	8005008 <LL_ADC_IsEnabled>
 800525c:	4603      	mov	r3, r0
 800525e:	4323      	orrs	r3, r4
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e008      	b.n	800527e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800526c:	4832      	ldr	r0, [pc, #200]	; (8005338 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800526e:	f7ff fecb 	bl	8005008 <LL_ADC_IsEnabled>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf0c      	ite	eq
 8005278:	2301      	moveq	r3, #1
 800527a:	2300      	movne	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d047      	beq.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	4b2d      	ldr	r3, [pc, #180]	; (800533c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005288:	4013      	ands	r3, r2
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	6811      	ldr	r1, [r2, #0]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	6892      	ldr	r2, [r2, #8]
 8005292:	430a      	orrs	r2, r1
 8005294:	431a      	orrs	r2, r3
 8005296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005298:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800529a:	e03a      	b.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800529c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1d      	ldr	r2, [pc, #116]	; (800532c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10e      	bne.n	80052da <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80052bc:	481a      	ldr	r0, [pc, #104]	; (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052be:	f7ff fea3 	bl	8005008 <LL_ADC_IsEnabled>
 80052c2:	4604      	mov	r4, r0
 80052c4:	4819      	ldr	r0, [pc, #100]	; (800532c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80052c6:	f7ff fe9f 	bl	8005008 <LL_ADC_IsEnabled>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4323      	orrs	r3, r4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf0c      	ite	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	2300      	movne	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	e008      	b.n	80052ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80052da:	4817      	ldr	r0, [pc, #92]	; (8005338 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80052dc:	f7ff fe94 	bl	8005008 <LL_ADC_IsEnabled>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bf0c      	ite	eq
 80052e6:	2301      	moveq	r3, #1
 80052e8:	2300      	movne	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d010      	beq.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	4b11      	ldr	r3, [pc, #68]	; (800533c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052fa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052fc:	e009      	b.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005310:	e000      	b.n	8005314 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005312:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800531c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005320:	4618      	mov	r0, r3
 8005322:	377c      	adds	r7, #124	; 0x7c
 8005324:	46bd      	mov	sp, r7
 8005326:	bd90      	pop	{r4, r7, pc}
 8005328:	40022000 	.word	0x40022000
 800532c:	40022100 	.word	0x40022100
 8005330:	40022300 	.word	0x40022300
 8005334:	58026300 	.word	0x58026300
 8005338:	58026000 	.word	0x58026000
 800533c:	fffff0e0 	.word	0xfffff0e0

08005340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <__NVIC_SetPriorityGrouping+0x40>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800535c:	4013      	ands	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <__NVIC_SetPriorityGrouping+0x44>)
 800536a:	4313      	orrs	r3, r2
 800536c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800536e:	4a04      	ldr	r2, [pc, #16]	; (8005380 <__NVIC_SetPriorityGrouping+0x40>)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	60d3      	str	r3, [r2, #12]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000ed00 	.word	0xe000ed00
 8005384:	05fa0000 	.word	0x05fa0000

08005388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <__NVIC_GetPriorityGrouping+0x18>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	0a1b      	lsrs	r3, r3, #8
 8005392:	f003 0307 	and.w	r3, r3, #7
}
 8005396:	4618      	mov	r0, r3
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	db0b      	blt.n	80053ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	f003 021f 	and.w	r2, r3, #31
 80053bc:	4907      	ldr	r1, [pc, #28]	; (80053dc <__NVIC_EnableIRQ+0x38>)
 80053be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	2001      	movs	r0, #1
 80053c6:	fa00 f202 	lsl.w	r2, r0, r2
 80053ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000e100 	.word	0xe000e100

080053e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	6039      	str	r1, [r7, #0]
 80053ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db0a      	blt.n	800540a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <__NVIC_SetPriority+0x4c>)
 80053fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	440b      	add	r3, r1
 8005404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005408:	e00a      	b.n	8005420 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	4908      	ldr	r1, [pc, #32]	; (8005430 <__NVIC_SetPriority+0x50>)
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	3b04      	subs	r3, #4
 8005418:	0112      	lsls	r2, r2, #4
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	440b      	add	r3, r1
 800541e:	761a      	strb	r2, [r3, #24]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	e000e100 	.word	0xe000e100
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005434:	b480      	push	{r7}
 8005436:	b089      	sub	sp, #36	; 0x24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f1c3 0307 	rsb	r3, r3, #7
 800544e:	2b04      	cmp	r3, #4
 8005450:	bf28      	it	cs
 8005452:	2304      	movcs	r3, #4
 8005454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3304      	adds	r3, #4
 800545a:	2b06      	cmp	r3, #6
 800545c:	d902      	bls.n	8005464 <NVIC_EncodePriority+0x30>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	3b03      	subs	r3, #3
 8005462:	e000      	b.n	8005466 <NVIC_EncodePriority+0x32>
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43da      	mvns	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	401a      	ands	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800547c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	43d9      	mvns	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800548c:	4313      	orrs	r3, r2
         );
}
 800548e:	4618      	mov	r0, r3
 8005490:	3724      	adds	r7, #36	; 0x24
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff ff4c 	bl	8005340 <__NVIC_SetPriorityGrouping>
}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054be:	f7ff ff63 	bl	8005388 <__NVIC_GetPriorityGrouping>
 80054c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	6978      	ldr	r0, [r7, #20]
 80054ca:	f7ff ffb3 	bl	8005434 <NVIC_EncodePriority>
 80054ce:	4602      	mov	r2, r0
 80054d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff ff82 	bl	80053e0 <__NVIC_SetPriority>
}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	4603      	mov	r3, r0
 80054ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff56 	bl	80053a4 <__NVIC_EnableIRQ>
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e014      	b.n	800553c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	791b      	ldrb	r3, [r3, #4]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fd fca2 	bl	8002e6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e046      	b.n	80055e6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	795b      	ldrb	r3, [r3, #5]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_DAC_Start+0x20>
 8005560:	2302      	movs	r3, #2
 8005562:	e040      	b.n	80055e6 <HAL_DAC_Start+0xa2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2201      	movs	r2, #1
 800557e:	409a      	lsls	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10f      	bne.n	80055ae <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005598:	2b02      	cmp	r3, #2
 800559a:	d11d      	bne.n	80055d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	605a      	str	r2, [r3, #4]
 80055ac:	e014      	b.n	80055d8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2102      	movs	r1, #2
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d107      	bne.n	80055d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0202 	orr.w	r2, r2, #2
 80055d6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0a2      	b.n	8005752 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	795b      	ldrb	r3, [r3, #5]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_DAC_Start_DMA+0x24>
 8005614:	2302      	movs	r3, #2
 8005616:	e09c      	b.n	8005752 <HAL_DAC_Start_DMA+0x15e>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2202      	movs	r2, #2
 8005622:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d129      	bne.n	800567e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	4a4b      	ldr	r2, [pc, #300]	; (800575c <HAL_DAC_Start_DMA+0x168>)
 8005630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	4a4a      	ldr	r2, [pc, #296]	; (8005760 <HAL_DAC_Start_DMA+0x16c>)
 8005638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	4a49      	ldr	r2, [pc, #292]	; (8005764 <HAL_DAC_Start_DMA+0x170>)
 8005640:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005650:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_DAC_Start_DMA+0x6c>
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	2b04      	cmp	r3, #4
 800565c:	d005      	beq.n	800566a <HAL_DAC_Start_DMA+0x76>
 800565e:	e009      	b.n	8005674 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	613b      	str	r3, [r7, #16]
        break;
 8005668:	e033      	b.n	80056d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	613b      	str	r3, [r7, #16]
        break;
 8005672:	e02e      	b.n	80056d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3310      	adds	r3, #16
 800567a:	613b      	str	r3, [r7, #16]
        break;
 800567c:	e029      	b.n	80056d2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	4a39      	ldr	r2, [pc, #228]	; (8005768 <HAL_DAC_Start_DMA+0x174>)
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	4a38      	ldr	r2, [pc, #224]	; (800576c <HAL_DAC_Start_DMA+0x178>)
 800568c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4a37      	ldr	r2, [pc, #220]	; (8005770 <HAL_DAC_Start_DMA+0x17c>)
 8005694:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056a4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_DAC_Start_DMA+0xc0>
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d005      	beq.n	80056be <HAL_DAC_Start_DMA+0xca>
 80056b2:	e009      	b.n	80056c8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	613b      	str	r3, [r7, #16]
        break;
 80056bc:	e009      	b.n	80056d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3318      	adds	r3, #24
 80056c4:	613b      	str	r3, [r7, #16]
        break;
 80056c6:	e004      	b.n	80056d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	331c      	adds	r3, #28
 80056ce:	613b      	str	r3, [r7, #16]
        break;
 80056d0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d111      	bne.n	80056fc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6898      	ldr	r0, [r3, #8]
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	f000 fe67 	bl	80063c4 <HAL_DMA_Start_IT>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75fb      	strb	r3, [r7, #23]
 80056fa:	e010      	b.n	800571e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800570a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68d8      	ldr	r0, [r3, #12]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	f000 fe55 	bl	80063c4 <HAL_DMA_Start_IT>
 800571a:	4603      	mov	r3, r0
 800571c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10c      	bne.n	8005744 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6819      	ldr	r1, [r3, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2201      	movs	r2, #1
 8005738:	409a      	lsls	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e005      	b.n	8005750 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f043 0204 	orr.w	r2, r3, #4
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005750:	7dfb      	ldrb	r3, [r7, #23]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	08005be5 	.word	0x08005be5
 8005760:	08005c07 	.word	0x08005c07
 8005764:	08005c23 	.word	0x08005c23
 8005768:	08005ca1 	.word	0x08005ca1
 800576c:	08005cc3 	.word	0x08005cc3
 8005770:	08005cdf 	.word	0x08005cdf

08005774 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e03e      	b.n	8005806 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6819      	ldr	r1, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43da      	mvns	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	400a      	ands	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6819      	ldr	r1, [r3, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2201      	movs	r2, #1
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43da      	mvns	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	400a      	ands	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10d      	bne.n	80057e4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 f863 	bl	8006898 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	e00c      	b.n	80057fe <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 f855 	bl	8006898 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80057fc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01d      	beq.n	800586c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d018      	beq.n	800586c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2204      	movs	r2, #4
 800583e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f043 0201 	orr.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005854:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005864:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f86f 	bl	800594a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01d      	beq.n	80058b2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d018      	beq.n	80058b2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2204      	movs	r2, #4
 8005884:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f043 0202 	orr.w	r2, r3, #2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800589a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80058aa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9ed 	bl	8005c8c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80058b2:	bf00      	nop
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b087      	sub	sp, #28
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e015      	b.n	8005902 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d105      	bne.n	80058ee <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4413      	add	r3, r2
 80058e8:	3308      	adds	r3, #8
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	e004      	b.n	80058f8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	3314      	adds	r3, #20
 80058f6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	461a      	mov	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08a      	sub	sp, #40	; 0x28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_DAC_ConfigChannel+0x1e>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e12a      	b.n	8005bd8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	795b      	ldrb	r3, [r3, #5]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_DAC_ConfigChannel+0x2e>
 800598a:	2302      	movs	r3, #2
 800598c:	e124      	b.n	8005bd8 <HAL_DAC_ConfigChannel+0x278>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2202      	movs	r2, #2
 8005998:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d17a      	bne.n	8005a98 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80059a2:	f7fe f88b 	bl	8003abc <HAL_GetTick>
 80059a6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d13d      	bne.n	8005a2a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059ae:	e018      	b.n	80059e2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059b0:	f7fe f884 	bl	8003abc <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d911      	bls.n	80059e2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059c4:	4b86      	ldr	r3, [pc, #536]	; (8005be0 <HAL_DAC_ConfigChannel+0x280>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f043 0208 	orr.w	r2, r3, #8
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2203      	movs	r2, #3
 80059dc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e0fa      	b.n	8005bd8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e8:	4b7d      	ldr	r3, [pc, #500]	; (8005be0 <HAL_DAC_ConfigChannel+0x280>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1df      	bne.n	80059b0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	6992      	ldr	r2, [r2, #24]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
 80059fa:	e020      	b.n	8005a3e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059fc:	f7fe f85e 	bl	8003abc <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d90f      	bls.n	8005a2a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da0a      	bge.n	8005a2a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f043 0208 	orr.w	r2, r3, #8
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2203      	movs	r2, #3
 8005a24:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0d6      	b.n	8005bd8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	dbe3      	blt.n	80059fc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	6992      	ldr	r2, [r2, #24]
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	ea02 0103 	and.w	r1, r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	409a      	lsls	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	21ff      	movs	r1, #255	; 0xff
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	ea02 0103 	and.w	r1, r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d11d      	bne.n	8005adc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	221f      	movs	r2, #31
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2207      	movs	r2, #7
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d102      	bne.n	8005b06 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
 8005b04:	e00f      	b.n	8005b26 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d102      	bne.n	8005b14 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	e008      	b.n	8005b26 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b20:	e001      	b.n	8005b26 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6819      	ldr	r1, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	43da      	mvns	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	43db      	mvns	r3, r3
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	22c0      	movs	r2, #192	; 0xc0
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3728      	adds	r7, #40	; 0x28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20008000 	.word	0x20008000

08005be4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7ff fe8b 	bl	800590e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	711a      	strb	r2, [r3, #4]
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff fe84 	bl	8005922 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f043 0204 	orr.w	r2, r3, #4
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff fe7a 	bl	8005936 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	711a      	strb	r2, [r3, #4]
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff ffce 	bl	8005c50 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	711a      	strb	r2, [r3, #4]
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff ffc7 	bl	8005c64 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f043 0204 	orr.w	r2, r3, #4
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff ffbd 	bl	8005c78 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	711a      	strb	r2, [r3, #4]
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d14:	f7fd fed2 	bl	8003abc <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e316      	b.n	8006352 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a66      	ldr	r2, [pc, #408]	; (8005ec4 <HAL_DMA_Init+0x1b8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d04a      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a65      	ldr	r2, [pc, #404]	; (8005ec8 <HAL_DMA_Init+0x1bc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d045      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a63      	ldr	r2, [pc, #396]	; (8005ecc <HAL_DMA_Init+0x1c0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d040      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a62      	ldr	r2, [pc, #392]	; (8005ed0 <HAL_DMA_Init+0x1c4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d03b      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a60      	ldr	r2, [pc, #384]	; (8005ed4 <HAL_DMA_Init+0x1c8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d036      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a5f      	ldr	r2, [pc, #380]	; (8005ed8 <HAL_DMA_Init+0x1cc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d031      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a5d      	ldr	r2, [pc, #372]	; (8005edc <HAL_DMA_Init+0x1d0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d02c      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a5c      	ldr	r2, [pc, #368]	; (8005ee0 <HAL_DMA_Init+0x1d4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d027      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5a      	ldr	r2, [pc, #360]	; (8005ee4 <HAL_DMA_Init+0x1d8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d022      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a59      	ldr	r2, [pc, #356]	; (8005ee8 <HAL_DMA_Init+0x1dc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d01d      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a57      	ldr	r2, [pc, #348]	; (8005eec <HAL_DMA_Init+0x1e0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d018      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a56      	ldr	r2, [pc, #344]	; (8005ef0 <HAL_DMA_Init+0x1e4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a54      	ldr	r2, [pc, #336]	; (8005ef4 <HAL_DMA_Init+0x1e8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00e      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a53      	ldr	r2, [pc, #332]	; (8005ef8 <HAL_DMA_Init+0x1ec>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a51      	ldr	r2, [pc, #324]	; (8005efc <HAL_DMA_Init+0x1f0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_DMA_Init+0xb8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a50      	ldr	r2, [pc, #320]	; (8005f00 <HAL_DMA_Init+0x1f4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d101      	bne.n	8005dc8 <HAL_DMA_Init+0xbc>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <HAL_DMA_Init+0xbe>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 813b 	beq.w	8006046 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a37      	ldr	r2, [pc, #220]	; (8005ec4 <HAL_DMA_Init+0x1b8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d04a      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a36      	ldr	r2, [pc, #216]	; (8005ec8 <HAL_DMA_Init+0x1bc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d045      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a34      	ldr	r2, [pc, #208]	; (8005ecc <HAL_DMA_Init+0x1c0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d040      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a33      	ldr	r2, [pc, #204]	; (8005ed0 <HAL_DMA_Init+0x1c4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d03b      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <HAL_DMA_Init+0x1c8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d036      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <HAL_DMA_Init+0x1cc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d031      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2e      	ldr	r2, [pc, #184]	; (8005edc <HAL_DMA_Init+0x1d0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02c      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ee0 <HAL_DMA_Init+0x1d4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d027      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <HAL_DMA_Init+0x1d8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d022      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <HAL_DMA_Init+0x1dc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d01d      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a28      	ldr	r2, [pc, #160]	; (8005eec <HAL_DMA_Init+0x1e0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d018      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <HAL_DMA_Init+0x1e4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d013      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <HAL_DMA_Init+0x1e8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00e      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a24      	ldr	r2, [pc, #144]	; (8005ef8 <HAL_DMA_Init+0x1ec>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d009      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a22      	ldr	r2, [pc, #136]	; (8005efc <HAL_DMA_Init+0x1f0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d004      	beq.n	8005e80 <HAL_DMA_Init+0x174>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <HAL_DMA_Init+0x1f4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d108      	bne.n	8005e92 <HAL_DMA_Init+0x186>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e007      	b.n	8005ea2 <HAL_DMA_Init+0x196>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ea2:	e02f      	b.n	8005f04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ea4:	f7fd fe0a 	bl	8003abc <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d928      	bls.n	8005f04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2203      	movs	r2, #3
 8005ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e246      	b.n	8006352 <HAL_DMA_Init+0x646>
 8005ec4:	40020010 	.word	0x40020010
 8005ec8:	40020028 	.word	0x40020028
 8005ecc:	40020040 	.word	0x40020040
 8005ed0:	40020058 	.word	0x40020058
 8005ed4:	40020070 	.word	0x40020070
 8005ed8:	40020088 	.word	0x40020088
 8005edc:	400200a0 	.word	0x400200a0
 8005ee0:	400200b8 	.word	0x400200b8
 8005ee4:	40020410 	.word	0x40020410
 8005ee8:	40020428 	.word	0x40020428
 8005eec:	40020440 	.word	0x40020440
 8005ef0:	40020458 	.word	0x40020458
 8005ef4:	40020470 	.word	0x40020470
 8005ef8:	40020488 	.word	0x40020488
 8005efc:	400204a0 	.word	0x400204a0
 8005f00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1c8      	bne.n	8005ea4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4b83      	ldr	r3, [pc, #524]	; (800612c <HAL_DMA_Init+0x420>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d107      	bne.n	8005f68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	4313      	orrs	r3, r2
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005f68:	4b71      	ldr	r3, [pc, #452]	; (8006130 <HAL_DMA_Init+0x424>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	4b71      	ldr	r3, [pc, #452]	; (8006134 <HAL_DMA_Init+0x428>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f74:	d328      	bcc.n	8005fc8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b28      	cmp	r3, #40	; 0x28
 8005f7c:	d903      	bls.n	8005f86 <HAL_DMA_Init+0x27a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2b2e      	cmp	r3, #46	; 0x2e
 8005f84:	d917      	bls.n	8005fb6 <HAL_DMA_Init+0x2aa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005f8c:	d903      	bls.n	8005f96 <HAL_DMA_Init+0x28a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b42      	cmp	r3, #66	; 0x42
 8005f94:	d90f      	bls.n	8005fb6 <HAL_DMA_Init+0x2aa>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b46      	cmp	r3, #70	; 0x46
 8005f9c:	d903      	bls.n	8005fa6 <HAL_DMA_Init+0x29a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b48      	cmp	r3, #72	; 0x48
 8005fa4:	d907      	bls.n	8005fb6 <HAL_DMA_Init+0x2aa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b4e      	cmp	r3, #78	; 0x4e
 8005fac:	d905      	bls.n	8005fba <HAL_DMA_Init+0x2ae>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b52      	cmp	r3, #82	; 0x52
 8005fb4:	d801      	bhi.n	8005fba <HAL_DMA_Init+0x2ae>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <HAL_DMA_Init+0x2b0>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fc6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0307 	bic.w	r3, r3, #7
 8005fde:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d117      	bne.n	8006022 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00e      	beq.n	8006022 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f002 fb33 	bl	8008670 <DMA_CheckFifoParam>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2240      	movs	r2, #64	; 0x40
 8006014:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e197      	b.n	8006352 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f002 fa6e 	bl	800850c <DMA_CalcBaseAndBitshift>
 8006030:	4603      	mov	r3, r0
 8006032:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	223f      	movs	r2, #63	; 0x3f
 800603e:	409a      	lsls	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	e0cd      	b.n	80061e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a3b      	ldr	r2, [pc, #236]	; (8006138 <HAL_DMA_Init+0x42c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d022      	beq.n	8006096 <HAL_DMA_Init+0x38a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a39      	ldr	r2, [pc, #228]	; (800613c <HAL_DMA_Init+0x430>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01d      	beq.n	8006096 <HAL_DMA_Init+0x38a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a38      	ldr	r2, [pc, #224]	; (8006140 <HAL_DMA_Init+0x434>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d018      	beq.n	8006096 <HAL_DMA_Init+0x38a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a36      	ldr	r2, [pc, #216]	; (8006144 <HAL_DMA_Init+0x438>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <HAL_DMA_Init+0x38a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a35      	ldr	r2, [pc, #212]	; (8006148 <HAL_DMA_Init+0x43c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00e      	beq.n	8006096 <HAL_DMA_Init+0x38a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a33      	ldr	r2, [pc, #204]	; (800614c <HAL_DMA_Init+0x440>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d009      	beq.n	8006096 <HAL_DMA_Init+0x38a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a32      	ldr	r2, [pc, #200]	; (8006150 <HAL_DMA_Init+0x444>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d004      	beq.n	8006096 <HAL_DMA_Init+0x38a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a30      	ldr	r2, [pc, #192]	; (8006154 <HAL_DMA_Init+0x448>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d101      	bne.n	800609a <HAL_DMA_Init+0x38e>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <HAL_DMA_Init+0x390>
 800609a:	2300      	movs	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8097 	beq.w	80061d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a24      	ldr	r2, [pc, #144]	; (8006138 <HAL_DMA_Init+0x42c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d021      	beq.n	80060f0 <HAL_DMA_Init+0x3e4>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a22      	ldr	r2, [pc, #136]	; (800613c <HAL_DMA_Init+0x430>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01c      	beq.n	80060f0 <HAL_DMA_Init+0x3e4>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <HAL_DMA_Init+0x434>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d017      	beq.n	80060f0 <HAL_DMA_Init+0x3e4>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <HAL_DMA_Init+0x438>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d012      	beq.n	80060f0 <HAL_DMA_Init+0x3e4>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <HAL_DMA_Init+0x43c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00d      	beq.n	80060f0 <HAL_DMA_Init+0x3e4>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1c      	ldr	r2, [pc, #112]	; (800614c <HAL_DMA_Init+0x440>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d008      	beq.n	80060f0 <HAL_DMA_Init+0x3e4>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <HAL_DMA_Init+0x444>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <HAL_DMA_Init+0x3e4>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <HAL_DMA_Init+0x448>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4b12      	ldr	r3, [pc, #72]	; (8006158 <HAL_DMA_Init+0x44c>)
 800610e:	4013      	ands	r3, r2
 8006110:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d020      	beq.n	800615c <HAL_DMA_Init+0x450>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b80      	cmp	r3, #128	; 0x80
 8006120:	d102      	bne.n	8006128 <HAL_DMA_Init+0x41c>
 8006122:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006126:	e01a      	b.n	800615e <HAL_DMA_Init+0x452>
 8006128:	2300      	movs	r3, #0
 800612a:	e018      	b.n	800615e <HAL_DMA_Init+0x452>
 800612c:	fe10803f 	.word	0xfe10803f
 8006130:	5c001000 	.word	0x5c001000
 8006134:	ffff0000 	.word	0xffff0000
 8006138:	58025408 	.word	0x58025408
 800613c:	5802541c 	.word	0x5802541c
 8006140:	58025430 	.word	0x58025430
 8006144:	58025444 	.word	0x58025444
 8006148:	58025458 	.word	0x58025458
 800614c:	5802546c 	.word	0x5802546c
 8006150:	58025480 	.word	0x58025480
 8006154:	58025494 	.word	0x58025494
 8006158:	fffe000f 	.word	0xfffe000f
 800615c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	68d2      	ldr	r2, [r2, #12]
 8006162:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800616c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800617c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800618c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b6e      	ldr	r3, [pc, #440]	; (800635c <HAL_DMA_Init+0x650>)
 80061a4:	4413      	add	r3, r2
 80061a6:	4a6e      	ldr	r2, [pc, #440]	; (8006360 <HAL_DMA_Init+0x654>)
 80061a8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	009a      	lsls	r2, r3, #2
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f002 f9a9 	bl	800850c <DMA_CalcBaseAndBitshift>
 80061ba:	4603      	mov	r3, r0
 80061bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	2201      	movs	r2, #1
 80061c8:	409a      	lsls	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	e008      	b.n	80061e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2240      	movs	r2, #64	; 0x40
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2203      	movs	r2, #3
 80061da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e0b7      	b.n	8006352 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a5f      	ldr	r2, [pc, #380]	; (8006364 <HAL_DMA_Init+0x658>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d072      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a5d      	ldr	r2, [pc, #372]	; (8006368 <HAL_DMA_Init+0x65c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d06d      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a5c      	ldr	r2, [pc, #368]	; (800636c <HAL_DMA_Init+0x660>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d068      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a5a      	ldr	r2, [pc, #360]	; (8006370 <HAL_DMA_Init+0x664>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d063      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a59      	ldr	r2, [pc, #356]	; (8006374 <HAL_DMA_Init+0x668>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d05e      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a57      	ldr	r2, [pc, #348]	; (8006378 <HAL_DMA_Init+0x66c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d059      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a56      	ldr	r2, [pc, #344]	; (800637c <HAL_DMA_Init+0x670>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d054      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a54      	ldr	r2, [pc, #336]	; (8006380 <HAL_DMA_Init+0x674>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d04f      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a53      	ldr	r2, [pc, #332]	; (8006384 <HAL_DMA_Init+0x678>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d04a      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a51      	ldr	r2, [pc, #324]	; (8006388 <HAL_DMA_Init+0x67c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d045      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a50      	ldr	r2, [pc, #320]	; (800638c <HAL_DMA_Init+0x680>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d040      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a4e      	ldr	r2, [pc, #312]	; (8006390 <HAL_DMA_Init+0x684>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d03b      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a4d      	ldr	r2, [pc, #308]	; (8006394 <HAL_DMA_Init+0x688>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d036      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a4b      	ldr	r2, [pc, #300]	; (8006398 <HAL_DMA_Init+0x68c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d031      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a4a      	ldr	r2, [pc, #296]	; (800639c <HAL_DMA_Init+0x690>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d02c      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a48      	ldr	r2, [pc, #288]	; (80063a0 <HAL_DMA_Init+0x694>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d027      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a47      	ldr	r2, [pc, #284]	; (80063a4 <HAL_DMA_Init+0x698>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d022      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a45      	ldr	r2, [pc, #276]	; (80063a8 <HAL_DMA_Init+0x69c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01d      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a44      	ldr	r2, [pc, #272]	; (80063ac <HAL_DMA_Init+0x6a0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d018      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a42      	ldr	r2, [pc, #264]	; (80063b0 <HAL_DMA_Init+0x6a4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a41      	ldr	r2, [pc, #260]	; (80063b4 <HAL_DMA_Init+0x6a8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00e      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a3f      	ldr	r2, [pc, #252]	; (80063b8 <HAL_DMA_Init+0x6ac>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a3e      	ldr	r2, [pc, #248]	; (80063bc <HAL_DMA_Init+0x6b0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d004      	beq.n	80062d2 <HAL_DMA_Init+0x5c6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3c      	ldr	r2, [pc, #240]	; (80063c0 <HAL_DMA_Init+0x6b4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d101      	bne.n	80062d6 <HAL_DMA_Init+0x5ca>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <HAL_DMA_Init+0x5cc>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d032      	beq.n	8006342 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f002 fa43 	bl	8008768 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d102      	bne.n	80062f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006304:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d010      	beq.n	8006330 <HAL_DMA_Init+0x624>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b08      	cmp	r3, #8
 8006314:	d80c      	bhi.n	8006330 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f002 fac0 	bl	800889c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	e008      	b.n	8006342 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	a7fdabf8 	.word	0xa7fdabf8
 8006360:	cccccccd 	.word	0xcccccccd
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8
 80063a4:	58025408 	.word	0x58025408
 80063a8:	5802541c 	.word	0x5802541c
 80063ac:	58025430 	.word	0x58025430
 80063b0:	58025444 	.word	0x58025444
 80063b4:	58025458 	.word	0x58025458
 80063b8:	5802546c 	.word	0x5802546c
 80063bc:	58025480 	.word	0x58025480
 80063c0:	58025494 	.word	0x58025494

080063c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e226      	b.n	800682e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_DMA_Start_IT+0x2a>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e21f      	b.n	800682e <HAL_DMA_Start_IT+0x46a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	f040 820a 	bne.w	8006818 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a68      	ldr	r2, [pc, #416]	; (80065b8 <HAL_DMA_Start_IT+0x1f4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d04a      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a66      	ldr	r2, [pc, #408]	; (80065bc <HAL_DMA_Start_IT+0x1f8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d045      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a65      	ldr	r2, [pc, #404]	; (80065c0 <HAL_DMA_Start_IT+0x1fc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d040      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a63      	ldr	r2, [pc, #396]	; (80065c4 <HAL_DMA_Start_IT+0x200>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d03b      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a62      	ldr	r2, [pc, #392]	; (80065c8 <HAL_DMA_Start_IT+0x204>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d036      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a60      	ldr	r2, [pc, #384]	; (80065cc <HAL_DMA_Start_IT+0x208>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d031      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a5f      	ldr	r2, [pc, #380]	; (80065d0 <HAL_DMA_Start_IT+0x20c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d02c      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a5d      	ldr	r2, [pc, #372]	; (80065d4 <HAL_DMA_Start_IT+0x210>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d027      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a5c      	ldr	r2, [pc, #368]	; (80065d8 <HAL_DMA_Start_IT+0x214>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d022      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a5a      	ldr	r2, [pc, #360]	; (80065dc <HAL_DMA_Start_IT+0x218>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01d      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a59      	ldr	r2, [pc, #356]	; (80065e0 <HAL_DMA_Start_IT+0x21c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d018      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a57      	ldr	r2, [pc, #348]	; (80065e4 <HAL_DMA_Start_IT+0x220>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a56      	ldr	r2, [pc, #344]	; (80065e8 <HAL_DMA_Start_IT+0x224>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00e      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a54      	ldr	r2, [pc, #336]	; (80065ec <HAL_DMA_Start_IT+0x228>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a53      	ldr	r2, [pc, #332]	; (80065f0 <HAL_DMA_Start_IT+0x22c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_DMA_Start_IT+0xee>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a51      	ldr	r2, [pc, #324]	; (80065f4 <HAL_DMA_Start_IT+0x230>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d108      	bne.n	80064c4 <HAL_DMA_Start_IT+0x100>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e007      	b.n	80064d4 <HAL_DMA_Start_IT+0x110>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0201 	bic.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f001 fe6a 	bl	80081b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a34      	ldr	r2, [pc, #208]	; (80065b8 <HAL_DMA_Start_IT+0x1f4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d04a      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a33      	ldr	r2, [pc, #204]	; (80065bc <HAL_DMA_Start_IT+0x1f8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d045      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a31      	ldr	r2, [pc, #196]	; (80065c0 <HAL_DMA_Start_IT+0x1fc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d040      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a30      	ldr	r2, [pc, #192]	; (80065c4 <HAL_DMA_Start_IT+0x200>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d03b      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2e      	ldr	r2, [pc, #184]	; (80065c8 <HAL_DMA_Start_IT+0x204>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d036      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2d      	ldr	r2, [pc, #180]	; (80065cc <HAL_DMA_Start_IT+0x208>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d031      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <HAL_DMA_Start_IT+0x20c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d02c      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2a      	ldr	r2, [pc, #168]	; (80065d4 <HAL_DMA_Start_IT+0x210>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d027      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a28      	ldr	r2, [pc, #160]	; (80065d8 <HAL_DMA_Start_IT+0x214>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d022      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a27      	ldr	r2, [pc, #156]	; (80065dc <HAL_DMA_Start_IT+0x218>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d01d      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a25      	ldr	r2, [pc, #148]	; (80065e0 <HAL_DMA_Start_IT+0x21c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d018      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a24      	ldr	r2, [pc, #144]	; (80065e4 <HAL_DMA_Start_IT+0x220>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d013      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <HAL_DMA_Start_IT+0x224>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00e      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a21      	ldr	r2, [pc, #132]	; (80065ec <HAL_DMA_Start_IT+0x228>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d009      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <HAL_DMA_Start_IT+0x22c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d004      	beq.n	8006580 <HAL_DMA_Start_IT+0x1bc>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <HAL_DMA_Start_IT+0x230>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d101      	bne.n	8006584 <HAL_DMA_Start_IT+0x1c0>
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <HAL_DMA_Start_IT+0x1c2>
 8006584:	2300      	movs	r3, #0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d036      	beq.n	80065f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f023 021e 	bic.w	r2, r3, #30
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0216 	orr.w	r2, r2, #22
 800659c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d03e      	beq.n	8006624 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0208 	orr.w	r2, r2, #8
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e035      	b.n	8006624 <HAL_DMA_Start_IT+0x260>
 80065b8:	40020010 	.word	0x40020010
 80065bc:	40020028 	.word	0x40020028
 80065c0:	40020040 	.word	0x40020040
 80065c4:	40020058 	.word	0x40020058
 80065c8:	40020070 	.word	0x40020070
 80065cc:	40020088 	.word	0x40020088
 80065d0:	400200a0 	.word	0x400200a0
 80065d4:	400200b8 	.word	0x400200b8
 80065d8:	40020410 	.word	0x40020410
 80065dc:	40020428 	.word	0x40020428
 80065e0:	40020440 	.word	0x40020440
 80065e4:	40020458 	.word	0x40020458
 80065e8:	40020470 	.word	0x40020470
 80065ec:	40020488 	.word	0x40020488
 80065f0:	400204a0 	.word	0x400204a0
 80065f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f023 020e 	bic.w	r2, r3, #14
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 020a 	orr.w	r2, r2, #10
 800660a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0204 	orr.w	r2, r2, #4
 8006622:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a83      	ldr	r2, [pc, #524]	; (8006838 <HAL_DMA_Start_IT+0x474>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d072      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a82      	ldr	r2, [pc, #520]	; (800683c <HAL_DMA_Start_IT+0x478>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d06d      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a80      	ldr	r2, [pc, #512]	; (8006840 <HAL_DMA_Start_IT+0x47c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d068      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a7f      	ldr	r2, [pc, #508]	; (8006844 <HAL_DMA_Start_IT+0x480>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d063      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a7d      	ldr	r2, [pc, #500]	; (8006848 <HAL_DMA_Start_IT+0x484>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d05e      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a7c      	ldr	r2, [pc, #496]	; (800684c <HAL_DMA_Start_IT+0x488>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d059      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a7a      	ldr	r2, [pc, #488]	; (8006850 <HAL_DMA_Start_IT+0x48c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d054      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a79      	ldr	r2, [pc, #484]	; (8006854 <HAL_DMA_Start_IT+0x490>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d04f      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a77      	ldr	r2, [pc, #476]	; (8006858 <HAL_DMA_Start_IT+0x494>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d04a      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a76      	ldr	r2, [pc, #472]	; (800685c <HAL_DMA_Start_IT+0x498>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d045      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a74      	ldr	r2, [pc, #464]	; (8006860 <HAL_DMA_Start_IT+0x49c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d040      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a73      	ldr	r2, [pc, #460]	; (8006864 <HAL_DMA_Start_IT+0x4a0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d03b      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a71      	ldr	r2, [pc, #452]	; (8006868 <HAL_DMA_Start_IT+0x4a4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d036      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a70      	ldr	r2, [pc, #448]	; (800686c <HAL_DMA_Start_IT+0x4a8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d031      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a6e      	ldr	r2, [pc, #440]	; (8006870 <HAL_DMA_Start_IT+0x4ac>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d02c      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a6d      	ldr	r2, [pc, #436]	; (8006874 <HAL_DMA_Start_IT+0x4b0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d027      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a6b      	ldr	r2, [pc, #428]	; (8006878 <HAL_DMA_Start_IT+0x4b4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d022      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a6a      	ldr	r2, [pc, #424]	; (800687c <HAL_DMA_Start_IT+0x4b8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d01d      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a68      	ldr	r2, [pc, #416]	; (8006880 <HAL_DMA_Start_IT+0x4bc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d018      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a67      	ldr	r2, [pc, #412]	; (8006884 <HAL_DMA_Start_IT+0x4c0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d013      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a65      	ldr	r2, [pc, #404]	; (8006888 <HAL_DMA_Start_IT+0x4c4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00e      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a64      	ldr	r2, [pc, #400]	; (800688c <HAL_DMA_Start_IT+0x4c8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d009      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a62      	ldr	r2, [pc, #392]	; (8006890 <HAL_DMA_Start_IT+0x4cc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_DMA_Start_IT+0x350>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a61      	ldr	r2, [pc, #388]	; (8006894 <HAL_DMA_Start_IT+0x4d0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d101      	bne.n	8006718 <HAL_DMA_Start_IT+0x354>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <HAL_DMA_Start_IT+0x356>
 8006718:	2300      	movs	r3, #0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01a      	beq.n	8006754 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800673a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006752:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a37      	ldr	r2, [pc, #220]	; (8006838 <HAL_DMA_Start_IT+0x474>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d04a      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a36      	ldr	r2, [pc, #216]	; (800683c <HAL_DMA_Start_IT+0x478>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d045      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a34      	ldr	r2, [pc, #208]	; (8006840 <HAL_DMA_Start_IT+0x47c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d040      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a33      	ldr	r2, [pc, #204]	; (8006844 <HAL_DMA_Start_IT+0x480>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d03b      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a31      	ldr	r2, [pc, #196]	; (8006848 <HAL_DMA_Start_IT+0x484>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d036      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a30      	ldr	r2, [pc, #192]	; (800684c <HAL_DMA_Start_IT+0x488>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d031      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a2e      	ldr	r2, [pc, #184]	; (8006850 <HAL_DMA_Start_IT+0x48c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d02c      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a2d      	ldr	r2, [pc, #180]	; (8006854 <HAL_DMA_Start_IT+0x490>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d027      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a2b      	ldr	r2, [pc, #172]	; (8006858 <HAL_DMA_Start_IT+0x494>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d022      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a2a      	ldr	r2, [pc, #168]	; (800685c <HAL_DMA_Start_IT+0x498>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d01d      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a28      	ldr	r2, [pc, #160]	; (8006860 <HAL_DMA_Start_IT+0x49c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d018      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a27      	ldr	r2, [pc, #156]	; (8006864 <HAL_DMA_Start_IT+0x4a0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d013      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a25      	ldr	r2, [pc, #148]	; (8006868 <HAL_DMA_Start_IT+0x4a4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00e      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a24      	ldr	r2, [pc, #144]	; (800686c <HAL_DMA_Start_IT+0x4a8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d009      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a22      	ldr	r2, [pc, #136]	; (8006870 <HAL_DMA_Start_IT+0x4ac>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <HAL_DMA_Start_IT+0x430>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a21      	ldr	r2, [pc, #132]	; (8006874 <HAL_DMA_Start_IT+0x4b0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d108      	bne.n	8006806 <HAL_DMA_Start_IT+0x442>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e012      	b.n	800682c <HAL_DMA_Start_IT+0x468>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e009      	b.n	800682c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800681e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40020010 	.word	0x40020010
 800683c:	40020028 	.word	0x40020028
 8006840:	40020040 	.word	0x40020040
 8006844:	40020058 	.word	0x40020058
 8006848:	40020070 	.word	0x40020070
 800684c:	40020088 	.word	0x40020088
 8006850:	400200a0 	.word	0x400200a0
 8006854:	400200b8 	.word	0x400200b8
 8006858:	40020410 	.word	0x40020410
 800685c:	40020428 	.word	0x40020428
 8006860:	40020440 	.word	0x40020440
 8006864:	40020458 	.word	0x40020458
 8006868:	40020470 	.word	0x40020470
 800686c:	40020488 	.word	0x40020488
 8006870:	400204a0 	.word	0x400204a0
 8006874:	400204b8 	.word	0x400204b8
 8006878:	58025408 	.word	0x58025408
 800687c:	5802541c 	.word	0x5802541c
 8006880:	58025430 	.word	0x58025430
 8006884:	58025444 	.word	0x58025444
 8006888:	58025458 	.word	0x58025458
 800688c:	5802546c 	.word	0x5802546c
 8006890:	58025480 	.word	0x58025480
 8006894:	58025494 	.word	0x58025494

08006898 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068a0:	f7fd f90c 	bl	8003abc <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e2dc      	b.n	8006e6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d008      	beq.n	80068ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2280      	movs	r2, #128	; 0x80
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e2cd      	b.n	8006e6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a76      	ldr	r2, [pc, #472]	; (8006aac <HAL_DMA_Abort+0x214>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d04a      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a74      	ldr	r2, [pc, #464]	; (8006ab0 <HAL_DMA_Abort+0x218>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d045      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a73      	ldr	r2, [pc, #460]	; (8006ab4 <HAL_DMA_Abort+0x21c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d040      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a71      	ldr	r2, [pc, #452]	; (8006ab8 <HAL_DMA_Abort+0x220>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d03b      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a70      	ldr	r2, [pc, #448]	; (8006abc <HAL_DMA_Abort+0x224>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d036      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a6e      	ldr	r2, [pc, #440]	; (8006ac0 <HAL_DMA_Abort+0x228>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d031      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6d      	ldr	r2, [pc, #436]	; (8006ac4 <HAL_DMA_Abort+0x22c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d02c      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a6b      	ldr	r2, [pc, #428]	; (8006ac8 <HAL_DMA_Abort+0x230>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d027      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a6a      	ldr	r2, [pc, #424]	; (8006acc <HAL_DMA_Abort+0x234>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d022      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a68      	ldr	r2, [pc, #416]	; (8006ad0 <HAL_DMA_Abort+0x238>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01d      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a67      	ldr	r2, [pc, #412]	; (8006ad4 <HAL_DMA_Abort+0x23c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d018      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a65      	ldr	r2, [pc, #404]	; (8006ad8 <HAL_DMA_Abort+0x240>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a64      	ldr	r2, [pc, #400]	; (8006adc <HAL_DMA_Abort+0x244>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a62      	ldr	r2, [pc, #392]	; (8006ae0 <HAL_DMA_Abort+0x248>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d009      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a61      	ldr	r2, [pc, #388]	; (8006ae4 <HAL_DMA_Abort+0x24c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <HAL_DMA_Abort+0xd6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a5f      	ldr	r2, [pc, #380]	; (8006ae8 <HAL_DMA_Abort+0x250>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d101      	bne.n	8006972 <HAL_DMA_Abort+0xda>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <HAL_DMA_Abort+0xdc>
 8006972:	2300      	movs	r3, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d013      	beq.n	80069a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 021e 	bic.w	r2, r2, #30
 8006986:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006996:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	e00a      	b.n	80069b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 020e 	bic.w	r2, r2, #14
 80069ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a3c      	ldr	r2, [pc, #240]	; (8006aac <HAL_DMA_Abort+0x214>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d072      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a3a      	ldr	r2, [pc, #232]	; (8006ab0 <HAL_DMA_Abort+0x218>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d06d      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a39      	ldr	r2, [pc, #228]	; (8006ab4 <HAL_DMA_Abort+0x21c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d068      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a37      	ldr	r2, [pc, #220]	; (8006ab8 <HAL_DMA_Abort+0x220>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d063      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a36      	ldr	r2, [pc, #216]	; (8006abc <HAL_DMA_Abort+0x224>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d05e      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a34      	ldr	r2, [pc, #208]	; (8006ac0 <HAL_DMA_Abort+0x228>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d059      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a33      	ldr	r2, [pc, #204]	; (8006ac4 <HAL_DMA_Abort+0x22c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d054      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a31      	ldr	r2, [pc, #196]	; (8006ac8 <HAL_DMA_Abort+0x230>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d04f      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a30      	ldr	r2, [pc, #192]	; (8006acc <HAL_DMA_Abort+0x234>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d04a      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a2e      	ldr	r2, [pc, #184]	; (8006ad0 <HAL_DMA_Abort+0x238>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d045      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a2d      	ldr	r2, [pc, #180]	; (8006ad4 <HAL_DMA_Abort+0x23c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d040      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a2b      	ldr	r2, [pc, #172]	; (8006ad8 <HAL_DMA_Abort+0x240>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d03b      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <HAL_DMA_Abort+0x244>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d036      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a28      	ldr	r2, [pc, #160]	; (8006ae0 <HAL_DMA_Abort+0x248>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d031      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a27      	ldr	r2, [pc, #156]	; (8006ae4 <HAL_DMA_Abort+0x24c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d02c      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a25      	ldr	r2, [pc, #148]	; (8006ae8 <HAL_DMA_Abort+0x250>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d027      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a24      	ldr	r2, [pc, #144]	; (8006aec <HAL_DMA_Abort+0x254>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d022      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a22      	ldr	r2, [pc, #136]	; (8006af0 <HAL_DMA_Abort+0x258>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d01d      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <HAL_DMA_Abort+0x25c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d018      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <HAL_DMA_Abort+0x260>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <HAL_DMA_Abort+0x264>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <HAL_DMA_Abort+0x268>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d009      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <HAL_DMA_Abort+0x26c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_DMA_Abort+0x20e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a19      	ldr	r2, [pc, #100]	; (8006b08 <HAL_DMA_Abort+0x270>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d132      	bne.n	8006b0c <HAL_DMA_Abort+0x274>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e031      	b.n	8006b0e <HAL_DMA_Abort+0x276>
 8006aaa:	bf00      	nop
 8006aac:	40020010 	.word	0x40020010
 8006ab0:	40020028 	.word	0x40020028
 8006ab4:	40020040 	.word	0x40020040
 8006ab8:	40020058 	.word	0x40020058
 8006abc:	40020070 	.word	0x40020070
 8006ac0:	40020088 	.word	0x40020088
 8006ac4:	400200a0 	.word	0x400200a0
 8006ac8:	400200b8 	.word	0x400200b8
 8006acc:	40020410 	.word	0x40020410
 8006ad0:	40020428 	.word	0x40020428
 8006ad4:	40020440 	.word	0x40020440
 8006ad8:	40020458 	.word	0x40020458
 8006adc:	40020470 	.word	0x40020470
 8006ae0:	40020488 	.word	0x40020488
 8006ae4:	400204a0 	.word	0x400204a0
 8006ae8:	400204b8 	.word	0x400204b8
 8006aec:	58025408 	.word	0x58025408
 8006af0:	5802541c 	.word	0x5802541c
 8006af4:	58025430 	.word	0x58025430
 8006af8:	58025444 	.word	0x58025444
 8006afc:	58025458 	.word	0x58025458
 8006b00:	5802546c 	.word	0x5802546c
 8006b04:	58025480 	.word	0x58025480
 8006b08:	58025494 	.word	0x58025494
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6d      	ldr	r2, [pc, #436]	; (8006cdc <HAL_DMA_Abort+0x444>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d04a      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a6b      	ldr	r2, [pc, #428]	; (8006ce0 <HAL_DMA_Abort+0x448>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d045      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a6a      	ldr	r2, [pc, #424]	; (8006ce4 <HAL_DMA_Abort+0x44c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d040      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a68      	ldr	r2, [pc, #416]	; (8006ce8 <HAL_DMA_Abort+0x450>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d03b      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a67      	ldr	r2, [pc, #412]	; (8006cec <HAL_DMA_Abort+0x454>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d036      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a65      	ldr	r2, [pc, #404]	; (8006cf0 <HAL_DMA_Abort+0x458>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d031      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a64      	ldr	r2, [pc, #400]	; (8006cf4 <HAL_DMA_Abort+0x45c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d02c      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a62      	ldr	r2, [pc, #392]	; (8006cf8 <HAL_DMA_Abort+0x460>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d027      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a61      	ldr	r2, [pc, #388]	; (8006cfc <HAL_DMA_Abort+0x464>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d022      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a5f      	ldr	r2, [pc, #380]	; (8006d00 <HAL_DMA_Abort+0x468>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d01d      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a5e      	ldr	r2, [pc, #376]	; (8006d04 <HAL_DMA_Abort+0x46c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d018      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a5c      	ldr	r2, [pc, #368]	; (8006d08 <HAL_DMA_Abort+0x470>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d013      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a5b      	ldr	r2, [pc, #364]	; (8006d0c <HAL_DMA_Abort+0x474>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00e      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a59      	ldr	r2, [pc, #356]	; (8006d10 <HAL_DMA_Abort+0x478>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d009      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a58      	ldr	r2, [pc, #352]	; (8006d14 <HAL_DMA_Abort+0x47c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d004      	beq.n	8006bc2 <HAL_DMA_Abort+0x32a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a56      	ldr	r2, [pc, #344]	; (8006d18 <HAL_DMA_Abort+0x480>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d108      	bne.n	8006bd4 <HAL_DMA_Abort+0x33c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0201 	bic.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e007      	b.n	8006be4 <HAL_DMA_Abort+0x34c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0201 	bic.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006be4:	e013      	b.n	8006c0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006be6:	f7fc ff69 	bl	8003abc <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	d90c      	bls.n	8006c0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e12d      	b.n	8006e6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e5      	bne.n	8006be6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2f      	ldr	r2, [pc, #188]	; (8006cdc <HAL_DMA_Abort+0x444>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d04a      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2d      	ldr	r2, [pc, #180]	; (8006ce0 <HAL_DMA_Abort+0x448>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d045      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2c      	ldr	r2, [pc, #176]	; (8006ce4 <HAL_DMA_Abort+0x44c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d040      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ce8 <HAL_DMA_Abort+0x450>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d03b      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a29      	ldr	r2, [pc, #164]	; (8006cec <HAL_DMA_Abort+0x454>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d036      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <HAL_DMA_Abort+0x458>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d031      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <HAL_DMA_Abort+0x45c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d02c      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a24      	ldr	r2, [pc, #144]	; (8006cf8 <HAL_DMA_Abort+0x460>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d027      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <HAL_DMA_Abort+0x464>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d022      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <HAL_DMA_Abort+0x468>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d01d      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a20      	ldr	r2, [pc, #128]	; (8006d04 <HAL_DMA_Abort+0x46c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d018      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1e      	ldr	r2, [pc, #120]	; (8006d08 <HAL_DMA_Abort+0x470>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1d      	ldr	r2, [pc, #116]	; (8006d0c <HAL_DMA_Abort+0x474>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1b      	ldr	r2, [pc, #108]	; (8006d10 <HAL_DMA_Abort+0x478>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <HAL_DMA_Abort+0x47c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_DMA_Abort+0x422>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <HAL_DMA_Abort+0x480>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d101      	bne.n	8006cbe <HAL_DMA_Abort+0x426>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <HAL_DMA_Abort+0x428>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d02b      	beq.n	8006d1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	223f      	movs	r2, #63	; 0x3f
 8006cd4:	409a      	lsls	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	609a      	str	r2, [r3, #8]
 8006cda:	e02a      	b.n	8006d32 <HAL_DMA_Abort+0x49a>
 8006cdc:	40020010 	.word	0x40020010
 8006ce0:	40020028 	.word	0x40020028
 8006ce4:	40020040 	.word	0x40020040
 8006ce8:	40020058 	.word	0x40020058
 8006cec:	40020070 	.word	0x40020070
 8006cf0:	40020088 	.word	0x40020088
 8006cf4:	400200a0 	.word	0x400200a0
 8006cf8:	400200b8 	.word	0x400200b8
 8006cfc:	40020410 	.word	0x40020410
 8006d00:	40020428 	.word	0x40020428
 8006d04:	40020440 	.word	0x40020440
 8006d08:	40020458 	.word	0x40020458
 8006d0c:	40020470 	.word	0x40020470
 8006d10:	40020488 	.word	0x40020488
 8006d14:	400204a0 	.word	0x400204a0
 8006d18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a4f      	ldr	r2, [pc, #316]	; (8006e74 <HAL_DMA_Abort+0x5dc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d072      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a4d      	ldr	r2, [pc, #308]	; (8006e78 <HAL_DMA_Abort+0x5e0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d06d      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a4c      	ldr	r2, [pc, #304]	; (8006e7c <HAL_DMA_Abort+0x5e4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d068      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a4a      	ldr	r2, [pc, #296]	; (8006e80 <HAL_DMA_Abort+0x5e8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d063      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a49      	ldr	r2, [pc, #292]	; (8006e84 <HAL_DMA_Abort+0x5ec>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d05e      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a47      	ldr	r2, [pc, #284]	; (8006e88 <HAL_DMA_Abort+0x5f0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d059      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a46      	ldr	r2, [pc, #280]	; (8006e8c <HAL_DMA_Abort+0x5f4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d054      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a44      	ldr	r2, [pc, #272]	; (8006e90 <HAL_DMA_Abort+0x5f8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d04f      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a43      	ldr	r2, [pc, #268]	; (8006e94 <HAL_DMA_Abort+0x5fc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d04a      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a41      	ldr	r2, [pc, #260]	; (8006e98 <HAL_DMA_Abort+0x600>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d045      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a40      	ldr	r2, [pc, #256]	; (8006e9c <HAL_DMA_Abort+0x604>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d040      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a3e      	ldr	r2, [pc, #248]	; (8006ea0 <HAL_DMA_Abort+0x608>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d03b      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a3d      	ldr	r2, [pc, #244]	; (8006ea4 <HAL_DMA_Abort+0x60c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d036      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a3b      	ldr	r2, [pc, #236]	; (8006ea8 <HAL_DMA_Abort+0x610>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d031      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a3a      	ldr	r2, [pc, #232]	; (8006eac <HAL_DMA_Abort+0x614>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d02c      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a38      	ldr	r2, [pc, #224]	; (8006eb0 <HAL_DMA_Abort+0x618>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a37      	ldr	r2, [pc, #220]	; (8006eb4 <HAL_DMA_Abort+0x61c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a35      	ldr	r2, [pc, #212]	; (8006eb8 <HAL_DMA_Abort+0x620>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01d      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a34      	ldr	r2, [pc, #208]	; (8006ebc <HAL_DMA_Abort+0x624>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a32      	ldr	r2, [pc, #200]	; (8006ec0 <HAL_DMA_Abort+0x628>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a31      	ldr	r2, [pc, #196]	; (8006ec4 <HAL_DMA_Abort+0x62c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2f      	ldr	r2, [pc, #188]	; (8006ec8 <HAL_DMA_Abort+0x630>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2e      	ldr	r2, [pc, #184]	; (8006ecc <HAL_DMA_Abort+0x634>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_DMA_Abort+0x58a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2c      	ldr	r2, [pc, #176]	; (8006ed0 <HAL_DMA_Abort+0x638>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d101      	bne.n	8006e26 <HAL_DMA_Abort+0x58e>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <HAL_DMA_Abort+0x590>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d015      	beq.n	8006e58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	40020010 	.word	0x40020010
 8006e78:	40020028 	.word	0x40020028
 8006e7c:	40020040 	.word	0x40020040
 8006e80:	40020058 	.word	0x40020058
 8006e84:	40020070 	.word	0x40020070
 8006e88:	40020088 	.word	0x40020088
 8006e8c:	400200a0 	.word	0x400200a0
 8006e90:	400200b8 	.word	0x400200b8
 8006e94:	40020410 	.word	0x40020410
 8006e98:	40020428 	.word	0x40020428
 8006e9c:	40020440 	.word	0x40020440
 8006ea0:	40020458 	.word	0x40020458
 8006ea4:	40020470 	.word	0x40020470
 8006ea8:	40020488 	.word	0x40020488
 8006eac:	400204a0 	.word	0x400204a0
 8006eb0:	400204b8 	.word	0x400204b8
 8006eb4:	58025408 	.word	0x58025408
 8006eb8:	5802541c 	.word	0x5802541c
 8006ebc:	58025430 	.word	0x58025430
 8006ec0:	58025444 	.word	0x58025444
 8006ec4:	58025458 	.word	0x58025458
 8006ec8:	5802546c 	.word	0x5802546c
 8006ecc:	58025480 	.word	0x58025480
 8006ed0:	58025494 	.word	0x58025494

08006ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e237      	b.n	8007356 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d004      	beq.n	8006efc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2280      	movs	r2, #128	; 0x80
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e22c      	b.n	8007356 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a5c      	ldr	r2, [pc, #368]	; (8007074 <HAL_DMA_Abort_IT+0x1a0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d04a      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a5b      	ldr	r2, [pc, #364]	; (8007078 <HAL_DMA_Abort_IT+0x1a4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d045      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a59      	ldr	r2, [pc, #356]	; (800707c <HAL_DMA_Abort_IT+0x1a8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d040      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a58      	ldr	r2, [pc, #352]	; (8007080 <HAL_DMA_Abort_IT+0x1ac>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d03b      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a56      	ldr	r2, [pc, #344]	; (8007084 <HAL_DMA_Abort_IT+0x1b0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d036      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a55      	ldr	r2, [pc, #340]	; (8007088 <HAL_DMA_Abort_IT+0x1b4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d031      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a53      	ldr	r2, [pc, #332]	; (800708c <HAL_DMA_Abort_IT+0x1b8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d02c      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a52      	ldr	r2, [pc, #328]	; (8007090 <HAL_DMA_Abort_IT+0x1bc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d027      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a50      	ldr	r2, [pc, #320]	; (8007094 <HAL_DMA_Abort_IT+0x1c0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d022      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a4f      	ldr	r2, [pc, #316]	; (8007098 <HAL_DMA_Abort_IT+0x1c4>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d01d      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a4d      	ldr	r2, [pc, #308]	; (800709c <HAL_DMA_Abort_IT+0x1c8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d018      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a4c      	ldr	r2, [pc, #304]	; (80070a0 <HAL_DMA_Abort_IT+0x1cc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a4a      	ldr	r2, [pc, #296]	; (80070a4 <HAL_DMA_Abort_IT+0x1d0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00e      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a49      	ldr	r2, [pc, #292]	; (80070a8 <HAL_DMA_Abort_IT+0x1d4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d009      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a47      	ldr	r2, [pc, #284]	; (80070ac <HAL_DMA_Abort_IT+0x1d8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <HAL_DMA_Abort_IT+0xc8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a46      	ldr	r2, [pc, #280]	; (80070b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d101      	bne.n	8006fa0 <HAL_DMA_Abort_IT+0xcc>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <HAL_DMA_Abort_IT+0xce>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8086 	beq.w	80070b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2204      	movs	r2, #4
 8006fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2f      	ldr	r2, [pc, #188]	; (8007074 <HAL_DMA_Abort_IT+0x1a0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d04a      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a2e      	ldr	r2, [pc, #184]	; (8007078 <HAL_DMA_Abort_IT+0x1a4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d045      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <HAL_DMA_Abort_IT+0x1a8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d040      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <HAL_DMA_Abort_IT+0x1ac>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d03b      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a29      	ldr	r2, [pc, #164]	; (8007084 <HAL_DMA_Abort_IT+0x1b0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d036      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a28      	ldr	r2, [pc, #160]	; (8007088 <HAL_DMA_Abort_IT+0x1b4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d031      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a26      	ldr	r2, [pc, #152]	; (800708c <HAL_DMA_Abort_IT+0x1b8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d02c      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a25      	ldr	r2, [pc, #148]	; (8007090 <HAL_DMA_Abort_IT+0x1bc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d027      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a23      	ldr	r2, [pc, #140]	; (8007094 <HAL_DMA_Abort_IT+0x1c0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d022      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a22      	ldr	r2, [pc, #136]	; (8007098 <HAL_DMA_Abort_IT+0x1c4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d01d      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a20      	ldr	r2, [pc, #128]	; (800709c <HAL_DMA_Abort_IT+0x1c8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d018      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <HAL_DMA_Abort_IT+0x1cc>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <HAL_DMA_Abort_IT+0x1d0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00e      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1c      	ldr	r2, [pc, #112]	; (80070a8 <HAL_DMA_Abort_IT+0x1d4>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d009      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1a      	ldr	r2, [pc, #104]	; (80070ac <HAL_DMA_Abort_IT+0x1d8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_DMA_Abort_IT+0x17c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a19      	ldr	r2, [pc, #100]	; (80070b0 <HAL_DMA_Abort_IT+0x1dc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d108      	bne.n	8007062 <HAL_DMA_Abort_IT+0x18e>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0201 	bic.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e178      	b.n	8007354 <HAL_DMA_Abort_IT+0x480>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e16f      	b.n	8007354 <HAL_DMA_Abort_IT+0x480>
 8007074:	40020010 	.word	0x40020010
 8007078:	40020028 	.word	0x40020028
 800707c:	40020040 	.word	0x40020040
 8007080:	40020058 	.word	0x40020058
 8007084:	40020070 	.word	0x40020070
 8007088:	40020088 	.word	0x40020088
 800708c:	400200a0 	.word	0x400200a0
 8007090:	400200b8 	.word	0x400200b8
 8007094:	40020410 	.word	0x40020410
 8007098:	40020428 	.word	0x40020428
 800709c:	40020440 	.word	0x40020440
 80070a0:	40020458 	.word	0x40020458
 80070a4:	40020470 	.word	0x40020470
 80070a8:	40020488 	.word	0x40020488
 80070ac:	400204a0 	.word	0x400204a0
 80070b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 020e 	bic.w	r2, r2, #14
 80070c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a6c      	ldr	r2, [pc, #432]	; (800727c <HAL_DMA_Abort_IT+0x3a8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d04a      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a6b      	ldr	r2, [pc, #428]	; (8007280 <HAL_DMA_Abort_IT+0x3ac>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d045      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a69      	ldr	r2, [pc, #420]	; (8007284 <HAL_DMA_Abort_IT+0x3b0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d040      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a68      	ldr	r2, [pc, #416]	; (8007288 <HAL_DMA_Abort_IT+0x3b4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d03b      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a66      	ldr	r2, [pc, #408]	; (800728c <HAL_DMA_Abort_IT+0x3b8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d036      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a65      	ldr	r2, [pc, #404]	; (8007290 <HAL_DMA_Abort_IT+0x3bc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d031      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a63      	ldr	r2, [pc, #396]	; (8007294 <HAL_DMA_Abort_IT+0x3c0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d02c      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a62      	ldr	r2, [pc, #392]	; (8007298 <HAL_DMA_Abort_IT+0x3c4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d027      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a60      	ldr	r2, [pc, #384]	; (800729c <HAL_DMA_Abort_IT+0x3c8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d022      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a5f      	ldr	r2, [pc, #380]	; (80072a0 <HAL_DMA_Abort_IT+0x3cc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d01d      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a5d      	ldr	r2, [pc, #372]	; (80072a4 <HAL_DMA_Abort_IT+0x3d0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a5c      	ldr	r2, [pc, #368]	; (80072a8 <HAL_DMA_Abort_IT+0x3d4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a5a      	ldr	r2, [pc, #360]	; (80072ac <HAL_DMA_Abort_IT+0x3d8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a59      	ldr	r2, [pc, #356]	; (80072b0 <HAL_DMA_Abort_IT+0x3dc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a57      	ldr	r2, [pc, #348]	; (80072b4 <HAL_DMA_Abort_IT+0x3e0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_DMA_Abort_IT+0x290>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a56      	ldr	r2, [pc, #344]	; (80072b8 <HAL_DMA_Abort_IT+0x3e4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d108      	bne.n	8007176 <HAL_DMA_Abort_IT+0x2a2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e007      	b.n	8007186 <HAL_DMA_Abort_IT+0x2b2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0201 	bic.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3c      	ldr	r2, [pc, #240]	; (800727c <HAL_DMA_Abort_IT+0x3a8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d072      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a3a      	ldr	r2, [pc, #232]	; (8007280 <HAL_DMA_Abort_IT+0x3ac>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d06d      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a39      	ldr	r2, [pc, #228]	; (8007284 <HAL_DMA_Abort_IT+0x3b0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d068      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a37      	ldr	r2, [pc, #220]	; (8007288 <HAL_DMA_Abort_IT+0x3b4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d063      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a36      	ldr	r2, [pc, #216]	; (800728c <HAL_DMA_Abort_IT+0x3b8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d05e      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a34      	ldr	r2, [pc, #208]	; (8007290 <HAL_DMA_Abort_IT+0x3bc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d059      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a33      	ldr	r2, [pc, #204]	; (8007294 <HAL_DMA_Abort_IT+0x3c0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d054      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a31      	ldr	r2, [pc, #196]	; (8007298 <HAL_DMA_Abort_IT+0x3c4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d04f      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a30      	ldr	r2, [pc, #192]	; (800729c <HAL_DMA_Abort_IT+0x3c8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d04a      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a2e      	ldr	r2, [pc, #184]	; (80072a0 <HAL_DMA_Abort_IT+0x3cc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d045      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <HAL_DMA_Abort_IT+0x3d0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d040      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2b      	ldr	r2, [pc, #172]	; (80072a8 <HAL_DMA_Abort_IT+0x3d4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d03b      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2a      	ldr	r2, [pc, #168]	; (80072ac <HAL_DMA_Abort_IT+0x3d8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d036      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a28      	ldr	r2, [pc, #160]	; (80072b0 <HAL_DMA_Abort_IT+0x3dc>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d031      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a27      	ldr	r2, [pc, #156]	; (80072b4 <HAL_DMA_Abort_IT+0x3e0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d02c      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a25      	ldr	r2, [pc, #148]	; (80072b8 <HAL_DMA_Abort_IT+0x3e4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d027      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a24      	ldr	r2, [pc, #144]	; (80072bc <HAL_DMA_Abort_IT+0x3e8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d022      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <HAL_DMA_Abort_IT+0x3ec>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d01d      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a21      	ldr	r2, [pc, #132]	; (80072c4 <HAL_DMA_Abort_IT+0x3f0>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d018      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <HAL_DMA_Abort_IT+0x3f4>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d013      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1e      	ldr	r2, [pc, #120]	; (80072cc <HAL_DMA_Abort_IT+0x3f8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00e      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <HAL_DMA_Abort_IT+0x3fc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d009      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1b      	ldr	r2, [pc, #108]	; (80072d4 <HAL_DMA_Abort_IT+0x400>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d004      	beq.n	8007276 <HAL_DMA_Abort_IT+0x3a2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_DMA_Abort_IT+0x404>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d132      	bne.n	80072dc <HAL_DMA_Abort_IT+0x408>
 8007276:	2301      	movs	r3, #1
 8007278:	e031      	b.n	80072de <HAL_DMA_Abort_IT+0x40a>
 800727a:	bf00      	nop
 800727c:	40020010 	.word	0x40020010
 8007280:	40020028 	.word	0x40020028
 8007284:	40020040 	.word	0x40020040
 8007288:	40020058 	.word	0x40020058
 800728c:	40020070 	.word	0x40020070
 8007290:	40020088 	.word	0x40020088
 8007294:	400200a0 	.word	0x400200a0
 8007298:	400200b8 	.word	0x400200b8
 800729c:	40020410 	.word	0x40020410
 80072a0:	40020428 	.word	0x40020428
 80072a4:	40020440 	.word	0x40020440
 80072a8:	40020458 	.word	0x40020458
 80072ac:	40020470 	.word	0x40020470
 80072b0:	40020488 	.word	0x40020488
 80072b4:	400204a0 	.word	0x400204a0
 80072b8:	400204b8 	.word	0x400204b8
 80072bc:	58025408 	.word	0x58025408
 80072c0:	5802541c 	.word	0x5802541c
 80072c4:	58025430 	.word	0x58025430
 80072c8:	58025444 	.word	0x58025444
 80072cc:	58025458 	.word	0x58025458
 80072d0:	5802546c 	.word	0x5802546c
 80072d4:	58025480 	.word	0x58025480
 80072d8:	58025494 	.word	0x58025494
 80072dc:	2300      	movs	r3, #0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d028      	beq.n	8007334 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	2201      	movs	r2, #1
 8007302:	409a      	lsls	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007310:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00c      	beq.n	8007334 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007328:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007332:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop

08007360 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800736c:	4b67      	ldr	r3, [pc, #412]	; (800750c <HAL_DMA_IRQHandler+0x1ac>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a67      	ldr	r2, [pc, #412]	; (8007510 <HAL_DMA_IRQHandler+0x1b0>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	0a9b      	lsrs	r3, r3, #10
 8007378:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007384:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a5f      	ldr	r2, [pc, #380]	; (8007514 <HAL_DMA_IRQHandler+0x1b4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d04a      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5d      	ldr	r2, [pc, #372]	; (8007518 <HAL_DMA_IRQHandler+0x1b8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d045      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a5c      	ldr	r2, [pc, #368]	; (800751c <HAL_DMA_IRQHandler+0x1bc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d040      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a5a      	ldr	r2, [pc, #360]	; (8007520 <HAL_DMA_IRQHandler+0x1c0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d03b      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a59      	ldr	r2, [pc, #356]	; (8007524 <HAL_DMA_IRQHandler+0x1c4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d036      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a57      	ldr	r2, [pc, #348]	; (8007528 <HAL_DMA_IRQHandler+0x1c8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d031      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a56      	ldr	r2, [pc, #344]	; (800752c <HAL_DMA_IRQHandler+0x1cc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d02c      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a54      	ldr	r2, [pc, #336]	; (8007530 <HAL_DMA_IRQHandler+0x1d0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d027      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a53      	ldr	r2, [pc, #332]	; (8007534 <HAL_DMA_IRQHandler+0x1d4>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a51      	ldr	r2, [pc, #324]	; (8007538 <HAL_DMA_IRQHandler+0x1d8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01d      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a50      	ldr	r2, [pc, #320]	; (800753c <HAL_DMA_IRQHandler+0x1dc>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a4e      	ldr	r2, [pc, #312]	; (8007540 <HAL_DMA_IRQHandler+0x1e0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a4d      	ldr	r2, [pc, #308]	; (8007544 <HAL_DMA_IRQHandler+0x1e4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a4b      	ldr	r2, [pc, #300]	; (8007548 <HAL_DMA_IRQHandler+0x1e8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a4a      	ldr	r2, [pc, #296]	; (800754c <HAL_DMA_IRQHandler+0x1ec>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a48      	ldr	r2, [pc, #288]	; (8007550 <HAL_DMA_IRQHandler+0x1f0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <HAL_DMA_IRQHandler+0xd6>
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <HAL_DMA_IRQHandler+0xd8>
 8007436:	2300      	movs	r3, #0
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 842b 	beq.w	8007c94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	2208      	movs	r2, #8
 8007448:	409a      	lsls	r2, r3
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	4013      	ands	r3, r2
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80a2 	beq.w	8007598 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2e      	ldr	r2, [pc, #184]	; (8007514 <HAL_DMA_IRQHandler+0x1b4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d04a      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a2d      	ldr	r2, [pc, #180]	; (8007518 <HAL_DMA_IRQHandler+0x1b8>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d045      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a2b      	ldr	r2, [pc, #172]	; (800751c <HAL_DMA_IRQHandler+0x1bc>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d040      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <HAL_DMA_IRQHandler+0x1c0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d03b      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a28      	ldr	r2, [pc, #160]	; (8007524 <HAL_DMA_IRQHandler+0x1c4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d036      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a27      	ldr	r2, [pc, #156]	; (8007528 <HAL_DMA_IRQHandler+0x1c8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d031      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a25      	ldr	r2, [pc, #148]	; (800752c <HAL_DMA_IRQHandler+0x1cc>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d02c      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a24      	ldr	r2, [pc, #144]	; (8007530 <HAL_DMA_IRQHandler+0x1d0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d027      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a22      	ldr	r2, [pc, #136]	; (8007534 <HAL_DMA_IRQHandler+0x1d4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d022      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a21      	ldr	r2, [pc, #132]	; (8007538 <HAL_DMA_IRQHandler+0x1d8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d01d      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1f      	ldr	r2, [pc, #124]	; (800753c <HAL_DMA_IRQHandler+0x1dc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d018      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <HAL_DMA_IRQHandler+0x1e0>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d013      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <HAL_DMA_IRQHandler+0x1e4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00e      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_DMA_IRQHandler+0x1e8>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d009      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a19      	ldr	r2, [pc, #100]	; (800754c <HAL_DMA_IRQHandler+0x1ec>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a18      	ldr	r2, [pc, #96]	; (8007550 <HAL_DMA_IRQHandler+0x1f0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d12f      	bne.n	8007554 <HAL_DMA_IRQHandler+0x1f4>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bf14      	ite	ne
 8007502:	2301      	movne	r3, #1
 8007504:	2300      	moveq	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	e02e      	b.n	8007568 <HAL_DMA_IRQHandler+0x208>
 800750a:	bf00      	nop
 800750c:	24000090 	.word	0x24000090
 8007510:	1b4e81b5 	.word	0x1b4e81b5
 8007514:	40020010 	.word	0x40020010
 8007518:	40020028 	.word	0x40020028
 800751c:	40020040 	.word	0x40020040
 8007520:	40020058 	.word	0x40020058
 8007524:	40020070 	.word	0x40020070
 8007528:	40020088 	.word	0x40020088
 800752c:	400200a0 	.word	0x400200a0
 8007530:	400200b8 	.word	0x400200b8
 8007534:	40020410 	.word	0x40020410
 8007538:	40020428 	.word	0x40020428
 800753c:	40020440 	.word	0x40020440
 8007540:	40020458 	.word	0x40020458
 8007544:	40020470 	.word	0x40020470
 8007548:	40020488 	.word	0x40020488
 800754c:	400204a0 	.word	0x400204a0
 8007550:	400204b8 	.word	0x400204b8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf14      	ite	ne
 8007562:	2301      	movne	r3, #1
 8007564:	2300      	moveq	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d015      	beq.n	8007598 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0204 	bic.w	r2, r2, #4
 800757a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007580:	f003 031f 	and.w	r3, r3, #31
 8007584:	2208      	movs	r2, #8
 8007586:	409a      	lsls	r2, r3
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	f043 0201 	orr.w	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	fa22 f303 	lsr.w	r3, r2, r3
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d06e      	beq.n	800768c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a69      	ldr	r2, [pc, #420]	; (8007758 <HAL_DMA_IRQHandler+0x3f8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d04a      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a67      	ldr	r2, [pc, #412]	; (800775c <HAL_DMA_IRQHandler+0x3fc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d045      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a66      	ldr	r2, [pc, #408]	; (8007760 <HAL_DMA_IRQHandler+0x400>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d040      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a64      	ldr	r2, [pc, #400]	; (8007764 <HAL_DMA_IRQHandler+0x404>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d03b      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a63      	ldr	r2, [pc, #396]	; (8007768 <HAL_DMA_IRQHandler+0x408>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d036      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a61      	ldr	r2, [pc, #388]	; (800776c <HAL_DMA_IRQHandler+0x40c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d031      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a60      	ldr	r2, [pc, #384]	; (8007770 <HAL_DMA_IRQHandler+0x410>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d02c      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a5e      	ldr	r2, [pc, #376]	; (8007774 <HAL_DMA_IRQHandler+0x414>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d027      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a5d      	ldr	r2, [pc, #372]	; (8007778 <HAL_DMA_IRQHandler+0x418>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d022      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a5b      	ldr	r2, [pc, #364]	; (800777c <HAL_DMA_IRQHandler+0x41c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01d      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a5a      	ldr	r2, [pc, #360]	; (8007780 <HAL_DMA_IRQHandler+0x420>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d018      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a58      	ldr	r2, [pc, #352]	; (8007784 <HAL_DMA_IRQHandler+0x424>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a57      	ldr	r2, [pc, #348]	; (8007788 <HAL_DMA_IRQHandler+0x428>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00e      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a55      	ldr	r2, [pc, #340]	; (800778c <HAL_DMA_IRQHandler+0x42c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a54      	ldr	r2, [pc, #336]	; (8007790 <HAL_DMA_IRQHandler+0x430>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d004      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a52      	ldr	r2, [pc, #328]	; (8007794 <HAL_DMA_IRQHandler+0x434>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d10a      	bne.n	8007664 <HAL_DMA_IRQHandler+0x304>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007658:	2b00      	cmp	r3, #0
 800765a:	bf14      	ite	ne
 800765c:	2301      	movne	r3, #1
 800765e:	2300      	moveq	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	e003      	b.n	800766c <HAL_DMA_IRQHandler+0x30c>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00d      	beq.n	800768c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007684:	f043 0202 	orr.w	r2, r3, #2
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2204      	movs	r2, #4
 8007696:	409a      	lsls	r2, r3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 808f 	beq.w	80077c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2c      	ldr	r2, [pc, #176]	; (8007758 <HAL_DMA_IRQHandler+0x3f8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d04a      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2a      	ldr	r2, [pc, #168]	; (800775c <HAL_DMA_IRQHandler+0x3fc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d045      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a29      	ldr	r2, [pc, #164]	; (8007760 <HAL_DMA_IRQHandler+0x400>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d040      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a27      	ldr	r2, [pc, #156]	; (8007764 <HAL_DMA_IRQHandler+0x404>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d03b      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a26      	ldr	r2, [pc, #152]	; (8007768 <HAL_DMA_IRQHandler+0x408>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d036      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a24      	ldr	r2, [pc, #144]	; (800776c <HAL_DMA_IRQHandler+0x40c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d031      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a23      	ldr	r2, [pc, #140]	; (8007770 <HAL_DMA_IRQHandler+0x410>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d02c      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a21      	ldr	r2, [pc, #132]	; (8007774 <HAL_DMA_IRQHandler+0x414>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d027      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a20      	ldr	r2, [pc, #128]	; (8007778 <HAL_DMA_IRQHandler+0x418>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d022      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1e      	ldr	r2, [pc, #120]	; (800777c <HAL_DMA_IRQHandler+0x41c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d01d      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1d      	ldr	r2, [pc, #116]	; (8007780 <HAL_DMA_IRQHandler+0x420>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d018      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <HAL_DMA_IRQHandler+0x424>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1a      	ldr	r2, [pc, #104]	; (8007788 <HAL_DMA_IRQHandler+0x428>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00e      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a18      	ldr	r2, [pc, #96]	; (800778c <HAL_DMA_IRQHandler+0x42c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d009      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <HAL_DMA_IRQHandler+0x430>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a15      	ldr	r2, [pc, #84]	; (8007794 <HAL_DMA_IRQHandler+0x434>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d12a      	bne.n	8007798 <HAL_DMA_IRQHandler+0x438>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf14      	ite	ne
 8007750:	2301      	movne	r3, #1
 8007752:	2300      	moveq	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	e023      	b.n	80077a0 <HAL_DMA_IRQHandler+0x440>
 8007758:	40020010 	.word	0x40020010
 800775c:	40020028 	.word	0x40020028
 8007760:	40020040 	.word	0x40020040
 8007764:	40020058 	.word	0x40020058
 8007768:	40020070 	.word	0x40020070
 800776c:	40020088 	.word	0x40020088
 8007770:	400200a0 	.word	0x400200a0
 8007774:	400200b8 	.word	0x400200b8
 8007778:	40020410 	.word	0x40020410
 800777c:	40020428 	.word	0x40020428
 8007780:	40020440 	.word	0x40020440
 8007784:	40020458 	.word	0x40020458
 8007788:	40020470 	.word	0x40020470
 800778c:	40020488 	.word	0x40020488
 8007790:	400204a0 	.word	0x400204a0
 8007794:	400204b8 	.word	0x400204b8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00d      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	2204      	movs	r2, #4
 80077ae:	409a      	lsls	r2, r3
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b8:	f043 0204 	orr.w	r2, r3, #4
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	2210      	movs	r2, #16
 80077ca:	409a      	lsls	r2, r3
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80a6 	beq.w	8007922 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a85      	ldr	r2, [pc, #532]	; (80079f0 <HAL_DMA_IRQHandler+0x690>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d04a      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a83      	ldr	r2, [pc, #524]	; (80079f4 <HAL_DMA_IRQHandler+0x694>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d045      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a82      	ldr	r2, [pc, #520]	; (80079f8 <HAL_DMA_IRQHandler+0x698>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d040      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a80      	ldr	r2, [pc, #512]	; (80079fc <HAL_DMA_IRQHandler+0x69c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d03b      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a7f      	ldr	r2, [pc, #508]	; (8007a00 <HAL_DMA_IRQHandler+0x6a0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d036      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a7d      	ldr	r2, [pc, #500]	; (8007a04 <HAL_DMA_IRQHandler+0x6a4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d031      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a7c      	ldr	r2, [pc, #496]	; (8007a08 <HAL_DMA_IRQHandler+0x6a8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d02c      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a7a      	ldr	r2, [pc, #488]	; (8007a0c <HAL_DMA_IRQHandler+0x6ac>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d027      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a79      	ldr	r2, [pc, #484]	; (8007a10 <HAL_DMA_IRQHandler+0x6b0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a77      	ldr	r2, [pc, #476]	; (8007a14 <HAL_DMA_IRQHandler+0x6b4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d01d      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a76      	ldr	r2, [pc, #472]	; (8007a18 <HAL_DMA_IRQHandler+0x6b8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a74      	ldr	r2, [pc, #464]	; (8007a1c <HAL_DMA_IRQHandler+0x6bc>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a73      	ldr	r2, [pc, #460]	; (8007a20 <HAL_DMA_IRQHandler+0x6c0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a71      	ldr	r2, [pc, #452]	; (8007a24 <HAL_DMA_IRQHandler+0x6c4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a70      	ldr	r2, [pc, #448]	; (8007a28 <HAL_DMA_IRQHandler+0x6c8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a6e      	ldr	r2, [pc, #440]	; (8007a2c <HAL_DMA_IRQHandler+0x6cc>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d10a      	bne.n	800788c <HAL_DMA_IRQHandler+0x52c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e009      	b.n	80078a0 <HAL_DMA_IRQHandler+0x540>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	bf14      	ite	ne
 800789a:	2301      	movne	r3, #1
 800789c:	2300      	moveq	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d03e      	beq.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2210      	movs	r2, #16
 80078ae:	409a      	lsls	r2, r3
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d018      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d108      	bne.n	80078e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d024      	beq.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
 80078e0:	e01f      	b.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d01b      	beq.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
 80078f2:	e016      	b.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d107      	bne.n	8007912 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0208 	bic.w	r2, r2, #8
 8007910:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007926:	f003 031f 	and.w	r3, r3, #31
 800792a:	2220      	movs	r2, #32
 800792c:	409a      	lsls	r2, r3
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	4013      	ands	r3, r2
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 8110 	beq.w	8007b58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <HAL_DMA_IRQHandler+0x690>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d04a      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a2b      	ldr	r2, [pc, #172]	; (80079f4 <HAL_DMA_IRQHandler+0x694>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d045      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a29      	ldr	r2, [pc, #164]	; (80079f8 <HAL_DMA_IRQHandler+0x698>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d040      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a28      	ldr	r2, [pc, #160]	; (80079fc <HAL_DMA_IRQHandler+0x69c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d03b      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a26      	ldr	r2, [pc, #152]	; (8007a00 <HAL_DMA_IRQHandler+0x6a0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d036      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <HAL_DMA_IRQHandler+0x6a4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d031      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a23      	ldr	r2, [pc, #140]	; (8007a08 <HAL_DMA_IRQHandler+0x6a8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d02c      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a22      	ldr	r2, [pc, #136]	; (8007a0c <HAL_DMA_IRQHandler+0x6ac>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d027      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a20      	ldr	r2, [pc, #128]	; (8007a10 <HAL_DMA_IRQHandler+0x6b0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d022      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1f      	ldr	r2, [pc, #124]	; (8007a14 <HAL_DMA_IRQHandler+0x6b4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d01d      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_DMA_IRQHandler+0x6b8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d018      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <HAL_DMA_IRQHandler+0x6bc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d013      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <HAL_DMA_IRQHandler+0x6c0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00e      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a19      	ldr	r2, [pc, #100]	; (8007a24 <HAL_DMA_IRQHandler+0x6c4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d009      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <HAL_DMA_IRQHandler+0x6c8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a16      	ldr	r2, [pc, #88]	; (8007a2c <HAL_DMA_IRQHandler+0x6cc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d12b      	bne.n	8007a30 <HAL_DMA_IRQHandler+0x6d0>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf14      	ite	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	2300      	moveq	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	e02a      	b.n	8007a44 <HAL_DMA_IRQHandler+0x6e4>
 80079ee:	bf00      	nop
 80079f0:	40020010 	.word	0x40020010
 80079f4:	40020028 	.word	0x40020028
 80079f8:	40020040 	.word	0x40020040
 80079fc:	40020058 	.word	0x40020058
 8007a00:	40020070 	.word	0x40020070
 8007a04:	40020088 	.word	0x40020088
 8007a08:	400200a0 	.word	0x400200a0
 8007a0c:	400200b8 	.word	0x400200b8
 8007a10:	40020410 	.word	0x40020410
 8007a14:	40020428 	.word	0x40020428
 8007a18:	40020440 	.word	0x40020440
 8007a1c:	40020458 	.word	0x40020458
 8007a20:	40020470 	.word	0x40020470
 8007a24:	40020488 	.word	0x40020488
 8007a28:	400204a0 	.word	0x400204a0
 8007a2c:	400204b8 	.word	0x400204b8
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bf14      	ite	ne
 8007a3e:	2301      	movne	r3, #1
 8007a40:	2300      	moveq	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 8087 	beq.w	8007b58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4e:	f003 031f 	and.w	r3, r3, #31
 8007a52:	2220      	movs	r2, #32
 8007a54:	409a      	lsls	r2, r3
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d139      	bne.n	8007ada <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0216 	bic.w	r2, r2, #22
 8007a74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <HAL_DMA_IRQHandler+0x736>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0208 	bic.w	r2, r2, #8
 8007aa4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	223f      	movs	r2, #63	; 0x3f
 8007ab0:	409a      	lsls	r2, r3
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 834a 	beq.w	8008164 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
          }
          return;
 8007ad8:	e344      	b.n	8008164 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d018      	beq.n	8007b1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d108      	bne.n	8007b08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d02c      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
 8007b06:	e027      	b.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d023      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4798      	blx	r3
 8007b18:	e01e      	b.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10f      	bne.n	8007b48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0210 	bic.w	r2, r2, #16
 8007b36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8306 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8088 	beq.w	8007c80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2204      	movs	r2, #4
 8007b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7a      	ldr	r2, [pc, #488]	; (8007d68 <HAL_DMA_IRQHandler+0xa08>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d04a      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a79      	ldr	r2, [pc, #484]	; (8007d6c <HAL_DMA_IRQHandler+0xa0c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d045      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a77      	ldr	r2, [pc, #476]	; (8007d70 <HAL_DMA_IRQHandler+0xa10>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d040      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a76      	ldr	r2, [pc, #472]	; (8007d74 <HAL_DMA_IRQHandler+0xa14>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d03b      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a74      	ldr	r2, [pc, #464]	; (8007d78 <HAL_DMA_IRQHandler+0xa18>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d036      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a73      	ldr	r2, [pc, #460]	; (8007d7c <HAL_DMA_IRQHandler+0xa1c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d031      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a71      	ldr	r2, [pc, #452]	; (8007d80 <HAL_DMA_IRQHandler+0xa20>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d02c      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a70      	ldr	r2, [pc, #448]	; (8007d84 <HAL_DMA_IRQHandler+0xa24>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d027      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a6e      	ldr	r2, [pc, #440]	; (8007d88 <HAL_DMA_IRQHandler+0xa28>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d022      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a6d      	ldr	r2, [pc, #436]	; (8007d8c <HAL_DMA_IRQHandler+0xa2c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d01d      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a6b      	ldr	r2, [pc, #428]	; (8007d90 <HAL_DMA_IRQHandler+0xa30>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d018      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a6a      	ldr	r2, [pc, #424]	; (8007d94 <HAL_DMA_IRQHandler+0xa34>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d013      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a68      	ldr	r2, [pc, #416]	; (8007d98 <HAL_DMA_IRQHandler+0xa38>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00e      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a67      	ldr	r2, [pc, #412]	; (8007d9c <HAL_DMA_IRQHandler+0xa3c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d009      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a65      	ldr	r2, [pc, #404]	; (8007da0 <HAL_DMA_IRQHandler+0xa40>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a64      	ldr	r2, [pc, #400]	; (8007da4 <HAL_DMA_IRQHandler+0xa44>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d108      	bne.n	8007c2a <HAL_DMA_IRQHandler+0x8ca>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0201 	bic.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	e007      	b.n	8007c3a <HAL_DMA_IRQHandler+0x8da>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0201 	bic.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d307      	bcc.n	8007c56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1f2      	bne.n	8007c3a <HAL_DMA_IRQHandler+0x8da>
 8007c54:	e000      	b.n	8007c58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2203      	movs	r2, #3
 8007c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c6e:	e003      	b.n	8007c78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 8272 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
 8007c92:	e26c      	b.n	800816e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a43      	ldr	r2, [pc, #268]	; (8007da8 <HAL_DMA_IRQHandler+0xa48>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d022      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a42      	ldr	r2, [pc, #264]	; (8007dac <HAL_DMA_IRQHandler+0xa4c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a40      	ldr	r2, [pc, #256]	; (8007db0 <HAL_DMA_IRQHandler+0xa50>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d018      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a3f      	ldr	r2, [pc, #252]	; (8007db4 <HAL_DMA_IRQHandler+0xa54>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d013      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a3d      	ldr	r2, [pc, #244]	; (8007db8 <HAL_DMA_IRQHandler+0xa58>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3c      	ldr	r2, [pc, #240]	; (8007dbc <HAL_DMA_IRQHandler+0xa5c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a3a      	ldr	r2, [pc, #232]	; (8007dc0 <HAL_DMA_IRQHandler+0xa60>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a39      	ldr	r2, [pc, #228]	; (8007dc4 <HAL_DMA_IRQHandler+0xa64>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d101      	bne.n	8007ce8 <HAL_DMA_IRQHandler+0x988>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <HAL_DMA_IRQHandler+0x98a>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 823f 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	2204      	movs	r2, #4
 8007d02:	409a      	lsls	r2, r3
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80cd 	beq.w	8007ea8 <HAL_DMA_IRQHandler+0xb48>
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 80c7 	beq.w	8007ea8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	2204      	movs	r2, #4
 8007d24:	409a      	lsls	r2, r3
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d049      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 8210 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d50:	e20a      	b.n	8008168 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8206 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d64:	e200      	b.n	8008168 <HAL_DMA_IRQHandler+0xe08>
 8007d66:	bf00      	nop
 8007d68:	40020010 	.word	0x40020010
 8007d6c:	40020028 	.word	0x40020028
 8007d70:	40020040 	.word	0x40020040
 8007d74:	40020058 	.word	0x40020058
 8007d78:	40020070 	.word	0x40020070
 8007d7c:	40020088 	.word	0x40020088
 8007d80:	400200a0 	.word	0x400200a0
 8007d84:	400200b8 	.word	0x400200b8
 8007d88:	40020410 	.word	0x40020410
 8007d8c:	40020428 	.word	0x40020428
 8007d90:	40020440 	.word	0x40020440
 8007d94:	40020458 	.word	0x40020458
 8007d98:	40020470 	.word	0x40020470
 8007d9c:	40020488 	.word	0x40020488
 8007da0:	400204a0 	.word	0x400204a0
 8007da4:	400204b8 	.word	0x400204b8
 8007da8:	58025408 	.word	0x58025408
 8007dac:	5802541c 	.word	0x5802541c
 8007db0:	58025430 	.word	0x58025430
 8007db4:	58025444 	.word	0x58025444
 8007db8:	58025458 	.word	0x58025458
 8007dbc:	5802546c 	.word	0x5802546c
 8007dc0:	58025480 	.word	0x58025480
 8007dc4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d160      	bne.n	8007e94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a7f      	ldr	r2, [pc, #508]	; (8007fd4 <HAL_DMA_IRQHandler+0xc74>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d04a      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a7d      	ldr	r2, [pc, #500]	; (8007fd8 <HAL_DMA_IRQHandler+0xc78>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d045      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a7c      	ldr	r2, [pc, #496]	; (8007fdc <HAL_DMA_IRQHandler+0xc7c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d040      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a7a      	ldr	r2, [pc, #488]	; (8007fe0 <HAL_DMA_IRQHandler+0xc80>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d03b      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a79      	ldr	r2, [pc, #484]	; (8007fe4 <HAL_DMA_IRQHandler+0xc84>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d036      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a77      	ldr	r2, [pc, #476]	; (8007fe8 <HAL_DMA_IRQHandler+0xc88>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d031      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a76      	ldr	r2, [pc, #472]	; (8007fec <HAL_DMA_IRQHandler+0xc8c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d02c      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a74      	ldr	r2, [pc, #464]	; (8007ff0 <HAL_DMA_IRQHandler+0xc90>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d027      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a73      	ldr	r2, [pc, #460]	; (8007ff4 <HAL_DMA_IRQHandler+0xc94>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d022      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a71      	ldr	r2, [pc, #452]	; (8007ff8 <HAL_DMA_IRQHandler+0xc98>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01d      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a70      	ldr	r2, [pc, #448]	; (8007ffc <HAL_DMA_IRQHandler+0xc9c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d018      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a6e      	ldr	r2, [pc, #440]	; (8008000 <HAL_DMA_IRQHandler+0xca0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a6d      	ldr	r2, [pc, #436]	; (8008004 <HAL_DMA_IRQHandler+0xca4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00e      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a6b      	ldr	r2, [pc, #428]	; (8008008 <HAL_DMA_IRQHandler+0xca8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d009      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a6a      	ldr	r2, [pc, #424]	; (800800c <HAL_DMA_IRQHandler+0xcac>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a68      	ldr	r2, [pc, #416]	; (8008010 <HAL_DMA_IRQHandler+0xcb0>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d108      	bne.n	8007e84 <HAL_DMA_IRQHandler+0xb24>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0208 	bic.w	r2, r2, #8
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e007      	b.n	8007e94 <HAL_DMA_IRQHandler+0xb34>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0204 	bic.w	r2, r2, #4
 8007e92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 8165 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ea6:	e15f      	b.n	8008168 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80c5 	beq.w	8008048 <HAL_DMA_IRQHandler+0xce8>
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80bf 	beq.w	8008048 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d018      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 813a 	beq.w	800816c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f00:	e134      	b.n	800816c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8130 	beq.w	800816c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f14:	e12a      	b.n	800816c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f040 8089 	bne.w	8008034 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a2b      	ldr	r2, [pc, #172]	; (8007fd4 <HAL_DMA_IRQHandler+0xc74>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d04a      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a29      	ldr	r2, [pc, #164]	; (8007fd8 <HAL_DMA_IRQHandler+0xc78>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d045      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a28      	ldr	r2, [pc, #160]	; (8007fdc <HAL_DMA_IRQHandler+0xc7c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d040      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a26      	ldr	r2, [pc, #152]	; (8007fe0 <HAL_DMA_IRQHandler+0xc80>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d03b      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a25      	ldr	r2, [pc, #148]	; (8007fe4 <HAL_DMA_IRQHandler+0xc84>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d036      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a23      	ldr	r2, [pc, #140]	; (8007fe8 <HAL_DMA_IRQHandler+0xc88>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d031      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a22      	ldr	r2, [pc, #136]	; (8007fec <HAL_DMA_IRQHandler+0xc8c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d02c      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a20      	ldr	r2, [pc, #128]	; (8007ff0 <HAL_DMA_IRQHandler+0xc90>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d027      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <HAL_DMA_IRQHandler+0xc94>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d022      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1d      	ldr	r2, [pc, #116]	; (8007ff8 <HAL_DMA_IRQHandler+0xc98>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d01d      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1c      	ldr	r2, [pc, #112]	; (8007ffc <HAL_DMA_IRQHandler+0xc9c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d018      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a1a      	ldr	r2, [pc, #104]	; (8008000 <HAL_DMA_IRQHandler+0xca0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d013      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a19      	ldr	r2, [pc, #100]	; (8008004 <HAL_DMA_IRQHandler+0xca4>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00e      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a17      	ldr	r2, [pc, #92]	; (8008008 <HAL_DMA_IRQHandler+0xca8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a16      	ldr	r2, [pc, #88]	; (800800c <HAL_DMA_IRQHandler+0xcac>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_DMA_IRQHandler+0xc62>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a14      	ldr	r2, [pc, #80]	; (8008010 <HAL_DMA_IRQHandler+0xcb0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d128      	bne.n	8008014 <HAL_DMA_IRQHandler+0xcb4>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0214 	bic.w	r2, r2, #20
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	e027      	b.n	8008024 <HAL_DMA_IRQHandler+0xcc4>
 8007fd4:	40020010 	.word	0x40020010
 8007fd8:	40020028 	.word	0x40020028
 8007fdc:	40020040 	.word	0x40020040
 8007fe0:	40020058 	.word	0x40020058
 8007fe4:	40020070 	.word	0x40020070
 8007fe8:	40020088 	.word	0x40020088
 8007fec:	400200a0 	.word	0x400200a0
 8007ff0:	400200b8 	.word	0x400200b8
 8007ff4:	40020410 	.word	0x40020410
 8007ff8:	40020428 	.word	0x40020428
 8007ffc:	40020440 	.word	0x40020440
 8008000:	40020458 	.word	0x40020458
 8008004:	40020470 	.word	0x40020470
 8008008:	40020488 	.word	0x40020488
 800800c:	400204a0 	.word	0x400204a0
 8008010:	400204b8 	.word	0x400204b8
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 020a 	bic.w	r2, r2, #10
 8008022:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 8097 	beq.w	800816c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008046:	e091      	b.n	800816c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804c:	f003 031f 	and.w	r3, r3, #31
 8008050:	2208      	movs	r2, #8
 8008052:	409a      	lsls	r2, r3
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8088 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 8082 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a41      	ldr	r2, [pc, #260]	; (8008174 <HAL_DMA_IRQHandler+0xe14>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d04a      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a3f      	ldr	r2, [pc, #252]	; (8008178 <HAL_DMA_IRQHandler+0xe18>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d045      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a3e      	ldr	r2, [pc, #248]	; (800817c <HAL_DMA_IRQHandler+0xe1c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d040      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3c      	ldr	r2, [pc, #240]	; (8008180 <HAL_DMA_IRQHandler+0xe20>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d03b      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a3b      	ldr	r2, [pc, #236]	; (8008184 <HAL_DMA_IRQHandler+0xe24>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d036      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a39      	ldr	r2, [pc, #228]	; (8008188 <HAL_DMA_IRQHandler+0xe28>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d031      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a38      	ldr	r2, [pc, #224]	; (800818c <HAL_DMA_IRQHandler+0xe2c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d02c      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a36      	ldr	r2, [pc, #216]	; (8008190 <HAL_DMA_IRQHandler+0xe30>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d027      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a35      	ldr	r2, [pc, #212]	; (8008194 <HAL_DMA_IRQHandler+0xe34>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d022      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a33      	ldr	r2, [pc, #204]	; (8008198 <HAL_DMA_IRQHandler+0xe38>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d01d      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a32      	ldr	r2, [pc, #200]	; (800819c <HAL_DMA_IRQHandler+0xe3c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d018      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a30      	ldr	r2, [pc, #192]	; (80081a0 <HAL_DMA_IRQHandler+0xe40>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d013      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a2f      	ldr	r2, [pc, #188]	; (80081a4 <HAL_DMA_IRQHandler+0xe44>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00e      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a2d      	ldr	r2, [pc, #180]	; (80081a8 <HAL_DMA_IRQHandler+0xe48>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d009      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a2c      	ldr	r2, [pc, #176]	; (80081ac <HAL_DMA_IRQHandler+0xe4c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d004      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2a      	ldr	r2, [pc, #168]	; (80081b0 <HAL_DMA_IRQHandler+0xe50>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d108      	bne.n	800811c <HAL_DMA_IRQHandler+0xdbc>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 021c 	bic.w	r2, r2, #28
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	e007      	b.n	800812c <HAL_DMA_IRQHandler+0xdcc>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 020e 	bic.w	r2, r2, #14
 800812a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	2201      	movs	r2, #1
 8008136:	409a      	lsls	r2, r3
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
 8008162:	e004      	b.n	800816e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008164:	bf00      	nop
 8008166:	e002      	b.n	800816e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008168:	bf00      	nop
 800816a:	e000      	b.n	800816e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800816c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800816e:	3728      	adds	r7, #40	; 0x28
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40020010 	.word	0x40020010
 8008178:	40020028 	.word	0x40020028
 800817c:	40020040 	.word	0x40020040
 8008180:	40020058 	.word	0x40020058
 8008184:	40020070 	.word	0x40020070
 8008188:	40020088 	.word	0x40020088
 800818c:	400200a0 	.word	0x400200a0
 8008190:	400200b8 	.word	0x400200b8
 8008194:	40020410 	.word	0x40020410
 8008198:	40020428 	.word	0x40020428
 800819c:	40020440 	.word	0x40020440
 80081a0:	40020458 	.word	0x40020458
 80081a4:	40020470 	.word	0x40020470
 80081a8:	40020488 	.word	0x40020488
 80081ac:	400204a0 	.word	0x400204a0
 80081b0:	400204b8 	.word	0x400204b8

080081b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a7f      	ldr	r2, [pc, #508]	; (80083d0 <DMA_SetConfig+0x21c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d072      	beq.n	80082be <DMA_SetConfig+0x10a>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a7d      	ldr	r2, [pc, #500]	; (80083d4 <DMA_SetConfig+0x220>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d06d      	beq.n	80082be <DMA_SetConfig+0x10a>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a7c      	ldr	r2, [pc, #496]	; (80083d8 <DMA_SetConfig+0x224>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d068      	beq.n	80082be <DMA_SetConfig+0x10a>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a7a      	ldr	r2, [pc, #488]	; (80083dc <DMA_SetConfig+0x228>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d063      	beq.n	80082be <DMA_SetConfig+0x10a>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a79      	ldr	r2, [pc, #484]	; (80083e0 <DMA_SetConfig+0x22c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d05e      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a77      	ldr	r2, [pc, #476]	; (80083e4 <DMA_SetConfig+0x230>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d059      	beq.n	80082be <DMA_SetConfig+0x10a>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a76      	ldr	r2, [pc, #472]	; (80083e8 <DMA_SetConfig+0x234>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d054      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a74      	ldr	r2, [pc, #464]	; (80083ec <DMA_SetConfig+0x238>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d04f      	beq.n	80082be <DMA_SetConfig+0x10a>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a73      	ldr	r2, [pc, #460]	; (80083f0 <DMA_SetConfig+0x23c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d04a      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a71      	ldr	r2, [pc, #452]	; (80083f4 <DMA_SetConfig+0x240>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d045      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a70      	ldr	r2, [pc, #448]	; (80083f8 <DMA_SetConfig+0x244>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d040      	beq.n	80082be <DMA_SetConfig+0x10a>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a6e      	ldr	r2, [pc, #440]	; (80083fc <DMA_SetConfig+0x248>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d03b      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a6d      	ldr	r2, [pc, #436]	; (8008400 <DMA_SetConfig+0x24c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d036      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a6b      	ldr	r2, [pc, #428]	; (8008404 <DMA_SetConfig+0x250>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d031      	beq.n	80082be <DMA_SetConfig+0x10a>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a6a      	ldr	r2, [pc, #424]	; (8008408 <DMA_SetConfig+0x254>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d02c      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a68      	ldr	r2, [pc, #416]	; (800840c <DMA_SetConfig+0x258>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d027      	beq.n	80082be <DMA_SetConfig+0x10a>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a67      	ldr	r2, [pc, #412]	; (8008410 <DMA_SetConfig+0x25c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d022      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a65      	ldr	r2, [pc, #404]	; (8008414 <DMA_SetConfig+0x260>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d01d      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a64      	ldr	r2, [pc, #400]	; (8008418 <DMA_SetConfig+0x264>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d018      	beq.n	80082be <DMA_SetConfig+0x10a>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a62      	ldr	r2, [pc, #392]	; (800841c <DMA_SetConfig+0x268>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d013      	beq.n	80082be <DMA_SetConfig+0x10a>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a61      	ldr	r2, [pc, #388]	; (8008420 <DMA_SetConfig+0x26c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d00e      	beq.n	80082be <DMA_SetConfig+0x10a>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a5f      	ldr	r2, [pc, #380]	; (8008424 <DMA_SetConfig+0x270>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d009      	beq.n	80082be <DMA_SetConfig+0x10a>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a5e      	ldr	r2, [pc, #376]	; (8008428 <DMA_SetConfig+0x274>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d004      	beq.n	80082be <DMA_SetConfig+0x10a>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a5c      	ldr	r2, [pc, #368]	; (800842c <DMA_SetConfig+0x278>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d101      	bne.n	80082c2 <DMA_SetConfig+0x10e>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <DMA_SetConfig+0x110>
 80082c2:	2300      	movs	r3, #0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00d      	beq.n	80082e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80082e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a39      	ldr	r2, [pc, #228]	; (80083d0 <DMA_SetConfig+0x21c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d04a      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a38      	ldr	r2, [pc, #224]	; (80083d4 <DMA_SetConfig+0x220>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d045      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a36      	ldr	r2, [pc, #216]	; (80083d8 <DMA_SetConfig+0x224>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d040      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a35      	ldr	r2, [pc, #212]	; (80083dc <DMA_SetConfig+0x228>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d03b      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a33      	ldr	r2, [pc, #204]	; (80083e0 <DMA_SetConfig+0x22c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d036      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a32      	ldr	r2, [pc, #200]	; (80083e4 <DMA_SetConfig+0x230>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d031      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a30      	ldr	r2, [pc, #192]	; (80083e8 <DMA_SetConfig+0x234>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d02c      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a2f      	ldr	r2, [pc, #188]	; (80083ec <DMA_SetConfig+0x238>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d027      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a2d      	ldr	r2, [pc, #180]	; (80083f0 <DMA_SetConfig+0x23c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d022      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a2c      	ldr	r2, [pc, #176]	; (80083f4 <DMA_SetConfig+0x240>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d01d      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a2a      	ldr	r2, [pc, #168]	; (80083f8 <DMA_SetConfig+0x244>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d018      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a29      	ldr	r2, [pc, #164]	; (80083fc <DMA_SetConfig+0x248>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d013      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a27      	ldr	r2, [pc, #156]	; (8008400 <DMA_SetConfig+0x24c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00e      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a26      	ldr	r2, [pc, #152]	; (8008404 <DMA_SetConfig+0x250>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d009      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a24      	ldr	r2, [pc, #144]	; (8008408 <DMA_SetConfig+0x254>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d004      	beq.n	8008384 <DMA_SetConfig+0x1d0>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a23      	ldr	r2, [pc, #140]	; (800840c <DMA_SetConfig+0x258>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d101      	bne.n	8008388 <DMA_SetConfig+0x1d4>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <DMA_SetConfig+0x1d6>
 8008388:	2300      	movs	r3, #0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d059      	beq.n	8008442 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008392:	f003 031f 	and.w	r3, r3, #31
 8008396:	223f      	movs	r2, #63	; 0x3f
 8008398:	409a      	lsls	r2, r3
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	d138      	bne.n	8008430 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083ce:	e086      	b.n	80084de <DMA_SetConfig+0x32a>
 80083d0:	40020010 	.word	0x40020010
 80083d4:	40020028 	.word	0x40020028
 80083d8:	40020040 	.word	0x40020040
 80083dc:	40020058 	.word	0x40020058
 80083e0:	40020070 	.word	0x40020070
 80083e4:	40020088 	.word	0x40020088
 80083e8:	400200a0 	.word	0x400200a0
 80083ec:	400200b8 	.word	0x400200b8
 80083f0:	40020410 	.word	0x40020410
 80083f4:	40020428 	.word	0x40020428
 80083f8:	40020440 	.word	0x40020440
 80083fc:	40020458 	.word	0x40020458
 8008400:	40020470 	.word	0x40020470
 8008404:	40020488 	.word	0x40020488
 8008408:	400204a0 	.word	0x400204a0
 800840c:	400204b8 	.word	0x400204b8
 8008410:	58025408 	.word	0x58025408
 8008414:	5802541c 	.word	0x5802541c
 8008418:	58025430 	.word	0x58025430
 800841c:	58025444 	.word	0x58025444
 8008420:	58025458 	.word	0x58025458
 8008424:	5802546c 	.word	0x5802546c
 8008428:	58025480 	.word	0x58025480
 800842c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	60da      	str	r2, [r3, #12]
}
 8008440:	e04d      	b.n	80084de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a29      	ldr	r2, [pc, #164]	; (80084ec <DMA_SetConfig+0x338>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d022      	beq.n	8008492 <DMA_SetConfig+0x2de>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a27      	ldr	r2, [pc, #156]	; (80084f0 <DMA_SetConfig+0x33c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d01d      	beq.n	8008492 <DMA_SetConfig+0x2de>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a26      	ldr	r2, [pc, #152]	; (80084f4 <DMA_SetConfig+0x340>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d018      	beq.n	8008492 <DMA_SetConfig+0x2de>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a24      	ldr	r2, [pc, #144]	; (80084f8 <DMA_SetConfig+0x344>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d013      	beq.n	8008492 <DMA_SetConfig+0x2de>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a23      	ldr	r2, [pc, #140]	; (80084fc <DMA_SetConfig+0x348>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00e      	beq.n	8008492 <DMA_SetConfig+0x2de>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a21      	ldr	r2, [pc, #132]	; (8008500 <DMA_SetConfig+0x34c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d009      	beq.n	8008492 <DMA_SetConfig+0x2de>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a20      	ldr	r2, [pc, #128]	; (8008504 <DMA_SetConfig+0x350>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d004      	beq.n	8008492 <DMA_SetConfig+0x2de>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <DMA_SetConfig+0x354>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d101      	bne.n	8008496 <DMA_SetConfig+0x2e2>
 8008492:	2301      	movs	r3, #1
 8008494:	e000      	b.n	8008498 <DMA_SetConfig+0x2e4>
 8008496:	2300      	movs	r3, #0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d020      	beq.n	80084de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a0:	f003 031f 	and.w	r3, r3, #31
 80084a4:	2201      	movs	r2, #1
 80084a6:	409a      	lsls	r2, r3
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	d108      	bne.n	80084ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	60da      	str	r2, [r3, #12]
}
 80084cc:	e007      	b.n	80084de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	60da      	str	r2, [r3, #12]
}
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	58025408 	.word	0x58025408
 80084f0:	5802541c 	.word	0x5802541c
 80084f4:	58025430 	.word	0x58025430
 80084f8:	58025444 	.word	0x58025444
 80084fc:	58025458 	.word	0x58025458
 8008500:	5802546c 	.word	0x5802546c
 8008504:	58025480 	.word	0x58025480
 8008508:	58025494 	.word	0x58025494

0800850c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a42      	ldr	r2, [pc, #264]	; (8008624 <DMA_CalcBaseAndBitshift+0x118>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d04a      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a41      	ldr	r2, [pc, #260]	; (8008628 <DMA_CalcBaseAndBitshift+0x11c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d045      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a3f      	ldr	r2, [pc, #252]	; (800862c <DMA_CalcBaseAndBitshift+0x120>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d040      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a3e      	ldr	r2, [pc, #248]	; (8008630 <DMA_CalcBaseAndBitshift+0x124>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d03b      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a3c      	ldr	r2, [pc, #240]	; (8008634 <DMA_CalcBaseAndBitshift+0x128>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d036      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a3b      	ldr	r2, [pc, #236]	; (8008638 <DMA_CalcBaseAndBitshift+0x12c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d031      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a39      	ldr	r2, [pc, #228]	; (800863c <DMA_CalcBaseAndBitshift+0x130>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d02c      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a38      	ldr	r2, [pc, #224]	; (8008640 <DMA_CalcBaseAndBitshift+0x134>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d027      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a36      	ldr	r2, [pc, #216]	; (8008644 <DMA_CalcBaseAndBitshift+0x138>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d022      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a35      	ldr	r2, [pc, #212]	; (8008648 <DMA_CalcBaseAndBitshift+0x13c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d01d      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a33      	ldr	r2, [pc, #204]	; (800864c <DMA_CalcBaseAndBitshift+0x140>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d018      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a32      	ldr	r2, [pc, #200]	; (8008650 <DMA_CalcBaseAndBitshift+0x144>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d013      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a30      	ldr	r2, [pc, #192]	; (8008654 <DMA_CalcBaseAndBitshift+0x148>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00e      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a2f      	ldr	r2, [pc, #188]	; (8008658 <DMA_CalcBaseAndBitshift+0x14c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d009      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a2d      	ldr	r2, [pc, #180]	; (800865c <DMA_CalcBaseAndBitshift+0x150>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d004      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xa8>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a2c      	ldr	r2, [pc, #176]	; (8008660 <DMA_CalcBaseAndBitshift+0x154>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d101      	bne.n	80085b8 <DMA_CalcBaseAndBitshift+0xac>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <DMA_CalcBaseAndBitshift+0xae>
 80085b8:	2300      	movs	r3, #0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d024      	beq.n	8008608 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	3b10      	subs	r3, #16
 80085c6:	4a27      	ldr	r2, [pc, #156]	; (8008664 <DMA_CalcBaseAndBitshift+0x158>)
 80085c8:	fba2 2303 	umull	r2, r3, r2, r3
 80085cc:	091b      	lsrs	r3, r3, #4
 80085ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	4a24      	ldr	r2, [pc, #144]	; (8008668 <DMA_CalcBaseAndBitshift+0x15c>)
 80085d8:	5cd3      	ldrb	r3, [r2, r3]
 80085da:	461a      	mov	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d908      	bls.n	80085f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	4b1f      	ldr	r3, [pc, #124]	; (800866c <DMA_CalcBaseAndBitshift+0x160>)
 80085ee:	4013      	ands	r3, r2
 80085f0:	1d1a      	adds	r2, r3, #4
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	659a      	str	r2, [r3, #88]	; 0x58
 80085f6:	e00d      	b.n	8008614 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b1b      	ldr	r3, [pc, #108]	; (800866c <DMA_CalcBaseAndBitshift+0x160>)
 8008600:	4013      	ands	r3, r2
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6593      	str	r3, [r2, #88]	; 0x58
 8008606:	e005      	b.n	8008614 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	40020010 	.word	0x40020010
 8008628:	40020028 	.word	0x40020028
 800862c:	40020040 	.word	0x40020040
 8008630:	40020058 	.word	0x40020058
 8008634:	40020070 	.word	0x40020070
 8008638:	40020088 	.word	0x40020088
 800863c:	400200a0 	.word	0x400200a0
 8008640:	400200b8 	.word	0x400200b8
 8008644:	40020410 	.word	0x40020410
 8008648:	40020428 	.word	0x40020428
 800864c:	40020440 	.word	0x40020440
 8008650:	40020458 	.word	0x40020458
 8008654:	40020470 	.word	0x40020470
 8008658:	40020488 	.word	0x40020488
 800865c:	400204a0 	.word	0x400204a0
 8008660:	400204b8 	.word	0x400204b8
 8008664:	aaaaaaab 	.word	0xaaaaaaab
 8008668:	08017010 	.word	0x08017010
 800866c:	fffffc00 	.word	0xfffffc00

08008670 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d120      	bne.n	80086c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	2b03      	cmp	r3, #3
 800868a:	d858      	bhi.n	800873e <DMA_CheckFifoParam+0xce>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <DMA_CheckFifoParam+0x24>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086b7 	.word	0x080086b7
 800869c:	080086a5 	.word	0x080086a5
 80086a0:	0800873f 	.word	0x0800873f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d048      	beq.n	8008742 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086b4:	e045      	b.n	8008742 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086be:	d142      	bne.n	8008746 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086c4:	e03f      	b.n	8008746 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ce:	d123      	bne.n	8008718 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d838      	bhi.n	800874a <DMA_CheckFifoParam+0xda>
 80086d8:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <DMA_CheckFifoParam+0x70>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	080086f1 	.word	0x080086f1
 80086e4:	080086f7 	.word	0x080086f7
 80086e8:	080086f1 	.word	0x080086f1
 80086ec:	08008709 	.word	0x08008709
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
        break;
 80086f4:	e030      	b.n	8008758 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d025      	beq.n	800874e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008706:	e022      	b.n	800874e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008710:	d11f      	bne.n	8008752 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008716:	e01c      	b.n	8008752 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	2b02      	cmp	r3, #2
 800871e:	d902      	bls.n	8008726 <DMA_CheckFifoParam+0xb6>
 8008720:	2b03      	cmp	r3, #3
 8008722:	d003      	beq.n	800872c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008724:	e018      	b.n	8008758 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]
        break;
 800872a:	e015      	b.n	8008758 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00e      	beq.n	8008756 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e00b      	b.n	8008756 <DMA_CheckFifoParam+0xe6>
        break;
 800873e:	bf00      	nop
 8008740:	e00a      	b.n	8008758 <DMA_CheckFifoParam+0xe8>
        break;
 8008742:	bf00      	nop
 8008744:	e008      	b.n	8008758 <DMA_CheckFifoParam+0xe8>
        break;
 8008746:	bf00      	nop
 8008748:	e006      	b.n	8008758 <DMA_CheckFifoParam+0xe8>
        break;
 800874a:	bf00      	nop
 800874c:	e004      	b.n	8008758 <DMA_CheckFifoParam+0xe8>
        break;
 800874e:	bf00      	nop
 8008750:	e002      	b.n	8008758 <DMA_CheckFifoParam+0xe8>
        break;
 8008752:	bf00      	nop
 8008754:	e000      	b.n	8008758 <DMA_CheckFifoParam+0xe8>
    break;
 8008756:	bf00      	nop
    }
  }

  return status;
 8008758:	7bfb      	ldrb	r3, [r7, #15]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop

08008768 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a38      	ldr	r2, [pc, #224]	; (800885c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d022      	beq.n	80087c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a36      	ldr	r2, [pc, #216]	; (8008860 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d01d      	beq.n	80087c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a35      	ldr	r2, [pc, #212]	; (8008864 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d018      	beq.n	80087c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a33      	ldr	r2, [pc, #204]	; (8008868 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d013      	beq.n	80087c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a32      	ldr	r2, [pc, #200]	; (800886c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00e      	beq.n	80087c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a30      	ldr	r2, [pc, #192]	; (8008870 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d009      	beq.n	80087c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2f      	ldr	r2, [pc, #188]	; (8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d004      	beq.n	80087c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a2d      	ldr	r2, [pc, #180]	; (8008878 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d101      	bne.n	80087ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e000      	b.n	80087cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087ca:	2300      	movs	r3, #0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01a      	beq.n	8008806 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	3b08      	subs	r3, #8
 80087d8:	4a28      	ldr	r2, [pc, #160]	; (800887c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	091b      	lsrs	r3, r3, #4
 80087e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4b26      	ldr	r3, [pc, #152]	; (8008880 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	461a      	mov	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a24      	ldr	r2, [pc, #144]	; (8008884 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80087f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f003 031f 	and.w	r3, r3, #31
 80087fc:	2201      	movs	r2, #1
 80087fe:	409a      	lsls	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008804:	e024      	b.n	8008850 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	3b10      	subs	r3, #16
 800880e:	4a1e      	ldr	r2, [pc, #120]	; (8008888 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008810:	fba2 2303 	umull	r2, r3, r2, r3
 8008814:	091b      	lsrs	r3, r3, #4
 8008816:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4a1c      	ldr	r2, [pc, #112]	; (800888c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d806      	bhi.n	800882e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	4a1b      	ldr	r2, [pc, #108]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d902      	bls.n	800882e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3308      	adds	r3, #8
 800882c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4b18      	ldr	r3, [pc, #96]	; (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	461a      	mov	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a16      	ldr	r2, [pc, #88]	; (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008840:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f003 031f 	and.w	r3, r3, #31
 8008848:	2201      	movs	r2, #1
 800884a:	409a      	lsls	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008850:	bf00      	nop
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	58025408 	.word	0x58025408
 8008860:	5802541c 	.word	0x5802541c
 8008864:	58025430 	.word	0x58025430
 8008868:	58025444 	.word	0x58025444
 800886c:	58025458 	.word	0x58025458
 8008870:	5802546c 	.word	0x5802546c
 8008874:	58025480 	.word	0x58025480
 8008878:	58025494 	.word	0x58025494
 800887c:	cccccccd 	.word	0xcccccccd
 8008880:	16009600 	.word	0x16009600
 8008884:	58025880 	.word	0x58025880
 8008888:	aaaaaaab 	.word	0xaaaaaaab
 800888c:	400204b8 	.word	0x400204b8
 8008890:	4002040f 	.word	0x4002040f
 8008894:	10008200 	.word	0x10008200
 8008898:	40020880 	.word	0x40020880

0800889c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d04a      	beq.n	8008948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d847      	bhi.n	8008948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a25      	ldr	r2, [pc, #148]	; (8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d022      	beq.n	8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a24      	ldr	r2, [pc, #144]	; (8008958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d01d      	beq.n	8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a22      	ldr	r2, [pc, #136]	; (800895c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d018      	beq.n	8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a21      	ldr	r2, [pc, #132]	; (8008960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d013      	beq.n	8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1f      	ldr	r2, [pc, #124]	; (8008964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00e      	beq.n	8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a1e      	ldr	r2, [pc, #120]	; (8008968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d009      	beq.n	8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a1c      	ldr	r2, [pc, #112]	; (800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d004      	beq.n	8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a1b      	ldr	r2, [pc, #108]	; (8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d101      	bne.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800890c:	2300      	movs	r3, #0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	4b17      	ldr	r3, [pc, #92]	; (8008974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	461a      	mov	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a15      	ldr	r2, [pc, #84]	; (8008978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008924:	671a      	str	r2, [r3, #112]	; 0x70
 8008926:	e009      	b.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4b14      	ldr	r3, [pc, #80]	; (800897c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800892c:	4413      	add	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	461a      	mov	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a11      	ldr	r2, [pc, #68]	; (8008980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800893a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3b01      	subs	r3, #1
 8008940:	2201      	movs	r2, #1
 8008942:	409a      	lsls	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008948:	bf00      	nop
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	58025408 	.word	0x58025408
 8008958:	5802541c 	.word	0x5802541c
 800895c:	58025430 	.word	0x58025430
 8008960:	58025444 	.word	0x58025444
 8008964:	58025458 	.word	0x58025458
 8008968:	5802546c 	.word	0x5802546c
 800896c:	58025480 	.word	0x58025480
 8008970:	58025494 	.word	0x58025494
 8008974:	1600963f 	.word	0x1600963f
 8008978:	58025940 	.word	0x58025940
 800897c:	1000823f 	.word	0x1000823f
 8008980:	40020940 	.word	0x40020940

08008984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008984:	b480      	push	{r7}
 8008986:	b089      	sub	sp, #36	; 0x24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800898e:	2300      	movs	r3, #0
 8008990:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008992:	4b89      	ldr	r3, [pc, #548]	; (8008bb8 <HAL_GPIO_Init+0x234>)
 8008994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008996:	e194      	b.n	8008cc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	2101      	movs	r1, #1
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	fa01 f303 	lsl.w	r3, r1, r3
 80089a4:	4013      	ands	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8186 	beq.w	8008cbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f003 0303 	and.w	r3, r3, #3
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d005      	beq.n	80089c8 <HAL_GPIO_Init+0x44>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f003 0303 	and.w	r3, r3, #3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d130      	bne.n	8008a2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	2203      	movs	r2, #3
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	43db      	mvns	r3, r3
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	4013      	ands	r3, r2
 80089de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089fe:	2201      	movs	r2, #1
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	fa02 f303 	lsl.w	r3, r2, r3
 8008a06:	43db      	mvns	r3, r3
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	091b      	lsrs	r3, r3, #4
 8008a14:	f003 0201 	and.w	r2, r3, #1
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d017      	beq.n	8008a66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	2203      	movs	r2, #3
 8008a42:	fa02 f303 	lsl.w	r3, r2, r3
 8008a46:	43db      	mvns	r3, r3
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d123      	bne.n	8008aba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	08da      	lsrs	r2, r3, #3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3208      	adds	r2, #8
 8008a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	220f      	movs	r2, #15
 8008a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8e:	43db      	mvns	r3, r3
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	4013      	ands	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	691a      	ldr	r2, [r3, #16]
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	f003 0307 	and.w	r3, r3, #7
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	08da      	lsrs	r2, r3, #3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3208      	adds	r2, #8
 8008ab4:	69b9      	ldr	r1, [r7, #24]
 8008ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	2203      	movs	r2, #3
 8008ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aca:	43db      	mvns	r3, r3
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	4013      	ands	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f003 0203 	and.w	r2, r3, #3
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 80e0 	beq.w	8008cbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008afc:	4b2f      	ldr	r3, [pc, #188]	; (8008bbc <HAL_GPIO_Init+0x238>)
 8008afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b02:	4a2e      	ldr	r2, [pc, #184]	; (8008bbc <HAL_GPIO_Init+0x238>)
 8008b04:	f043 0302 	orr.w	r3, r3, #2
 8008b08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b0c:	4b2b      	ldr	r3, [pc, #172]	; (8008bbc <HAL_GPIO_Init+0x238>)
 8008b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b1a:	4a29      	ldr	r2, [pc, #164]	; (8008bc0 <HAL_GPIO_Init+0x23c>)
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	089b      	lsrs	r3, r3, #2
 8008b20:	3302      	adds	r3, #2
 8008b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	220f      	movs	r2, #15
 8008b32:	fa02 f303 	lsl.w	r3, r2, r3
 8008b36:	43db      	mvns	r3, r3
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a20      	ldr	r2, [pc, #128]	; (8008bc4 <HAL_GPIO_Init+0x240>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d052      	beq.n	8008bec <HAL_GPIO_Init+0x268>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a1f      	ldr	r2, [pc, #124]	; (8008bc8 <HAL_GPIO_Init+0x244>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d031      	beq.n	8008bb2 <HAL_GPIO_Init+0x22e>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a1e      	ldr	r2, [pc, #120]	; (8008bcc <HAL_GPIO_Init+0x248>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d02b      	beq.n	8008bae <HAL_GPIO_Init+0x22a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a1d      	ldr	r2, [pc, #116]	; (8008bd0 <HAL_GPIO_Init+0x24c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d025      	beq.n	8008baa <HAL_GPIO_Init+0x226>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a1c      	ldr	r2, [pc, #112]	; (8008bd4 <HAL_GPIO_Init+0x250>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d01f      	beq.n	8008ba6 <HAL_GPIO_Init+0x222>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a1b      	ldr	r2, [pc, #108]	; (8008bd8 <HAL_GPIO_Init+0x254>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d019      	beq.n	8008ba2 <HAL_GPIO_Init+0x21e>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a1a      	ldr	r2, [pc, #104]	; (8008bdc <HAL_GPIO_Init+0x258>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d013      	beq.n	8008b9e <HAL_GPIO_Init+0x21a>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a19      	ldr	r2, [pc, #100]	; (8008be0 <HAL_GPIO_Init+0x25c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00d      	beq.n	8008b9a <HAL_GPIO_Init+0x216>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a18      	ldr	r2, [pc, #96]	; (8008be4 <HAL_GPIO_Init+0x260>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d007      	beq.n	8008b96 <HAL_GPIO_Init+0x212>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a17      	ldr	r2, [pc, #92]	; (8008be8 <HAL_GPIO_Init+0x264>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d101      	bne.n	8008b92 <HAL_GPIO_Init+0x20e>
 8008b8e:	2309      	movs	r3, #9
 8008b90:	e02d      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008b92:	230a      	movs	r3, #10
 8008b94:	e02b      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008b96:	2308      	movs	r3, #8
 8008b98:	e029      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008b9a:	2307      	movs	r3, #7
 8008b9c:	e027      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008b9e:	2306      	movs	r3, #6
 8008ba0:	e025      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008ba2:	2305      	movs	r3, #5
 8008ba4:	e023      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	e021      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008baa:	2303      	movs	r3, #3
 8008bac:	e01f      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e01d      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e01b      	b.n	8008bee <HAL_GPIO_Init+0x26a>
 8008bb6:	bf00      	nop
 8008bb8:	58000080 	.word	0x58000080
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	58000400 	.word	0x58000400
 8008bc4:	58020000 	.word	0x58020000
 8008bc8:	58020400 	.word	0x58020400
 8008bcc:	58020800 	.word	0x58020800
 8008bd0:	58020c00 	.word	0x58020c00
 8008bd4:	58021000 	.word	0x58021000
 8008bd8:	58021400 	.word	0x58021400
 8008bdc:	58021800 	.word	0x58021800
 8008be0:	58021c00 	.word	0x58021c00
 8008be4:	58022000 	.word	0x58022000
 8008be8:	58022400 	.word	0x58022400
 8008bec:	2300      	movs	r3, #0
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	f002 0203 	and.w	r2, r2, #3
 8008bf4:	0092      	lsls	r2, r2, #2
 8008bf6:	4093      	lsls	r3, r2
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bfe:	4938      	ldr	r1, [pc, #224]	; (8008ce0 <HAL_GPIO_Init+0x35c>)
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	089b      	lsrs	r3, r3, #2
 8008c04:	3302      	adds	r3, #2
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	43db      	mvns	r3, r3
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	43db      	mvns	r3, r3
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	43db      	mvns	r3, r3
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	4013      	ands	r3, r2
 8008c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f47f ae63 	bne.w	8008998 <HAL_GPIO_Init+0x14>
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	3724      	adds	r7, #36	; 0x24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	58000400 	.word	0x58000400

08008ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691a      	ldr	r2, [r3, #16]
 8008cf4:	887b      	ldrh	r3, [r7, #2]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	73fb      	strb	r3, [r7, #15]
 8008d00:	e001      	b.n	8008d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	807b      	strh	r3, [r7, #2]
 8008d20:	4613      	mov	r3, r2
 8008d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d24:	787b      	ldrb	r3, [r7, #1]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d2a:	887a      	ldrh	r2, [r7, #2]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d30:	e003      	b.n	8008d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d32:	887b      	ldrh	r3, [r7, #2]
 8008d34:	041a      	lsls	r2, r3, #16
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	619a      	str	r2, [r3, #24]
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
	...

08008d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e08b      	b.n	8008e72 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d106      	bne.n	8008d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fa f8fe 	bl	8002f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2224      	movs	r2, #36	; 0x24
 8008d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0201 	bic.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008da8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d107      	bne.n	8008dc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dbe:	609a      	str	r2, [r3, #8]
 8008dc0:	e006      	b.n	8008dd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008dce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d108      	bne.n	8008dea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008de6:	605a      	str	r2, [r3, #4]
 8008de8:	e007      	b.n	8008dfa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008df8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6859      	ldr	r1, [r3, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	4b1d      	ldr	r3, [pc, #116]	; (8008e7c <HAL_I2C_Init+0x134>)
 8008e06:	430b      	orrs	r3, r1
 8008e08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69d9      	ldr	r1, [r3, #28]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a1a      	ldr	r2, [r3, #32]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0201 	orr.w	r2, r2, #1
 8008e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	02008000 	.word	0x02008000

08008e80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	607a      	str	r2, [r7, #4]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	817b      	strh	r3, [r7, #10]
 8008e90:	4613      	mov	r3, r2
 8008e92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b20      	cmp	r3, #32
 8008e9e:	f040 80fd 	bne.w	800909c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_I2C_Master_Transmit+0x30>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e0f6      	b.n	800909e <HAL_I2C_Master_Transmit+0x21e>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008eb8:	f7fa fe00 	bl	8003abc <HAL_GetTick>
 8008ebc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	2319      	movs	r3, #25
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fa0a 	bl	80092e4 <I2C_WaitOnFlagUntilTimeout>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e0e1      	b.n	800909e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2221      	movs	r2, #33	; 0x21
 8008ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2210      	movs	r2, #16
 8008ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	893a      	ldrh	r2, [r7, #8]
 8008efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	2bff      	cmp	r3, #255	; 0xff
 8008f0a:	d906      	bls.n	8008f1a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	22ff      	movs	r2, #255	; 0xff
 8008f10:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e007      	b.n	8008f2a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008f24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f28:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d024      	beq.n	8008f7c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	3301      	adds	r3, #1
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	8979      	ldrh	r1, [r7, #10]
 8008f6e:	4b4e      	ldr	r3, [pc, #312]	; (80090a8 <HAL_I2C_Master_Transmit+0x228>)
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 fc05 	bl	8009784 <I2C_TransferConfig>
 8008f7a:	e066      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	8979      	ldrh	r1, [r7, #10]
 8008f84:	4b48      	ldr	r3, [pc, #288]	; (80090a8 <HAL_I2C_Master_Transmit+0x228>)
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 fbfa 	bl	8009784 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008f90:	e05b      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	6a39      	ldr	r1, [r7, #32]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f9fd 	bl	8009396 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e07b      	b.n	800909e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	781a      	ldrb	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d034      	beq.n	800904a <HAL_I2C_Master_Transmit+0x1ca>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d130      	bne.n	800904a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2180      	movs	r1, #128	; 0x80
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 f976 	bl	80092e4 <I2C_WaitOnFlagUntilTimeout>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e04d      	b.n	800909e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009006:	b29b      	uxth	r3, r3
 8009008:	2bff      	cmp	r3, #255	; 0xff
 800900a:	d90e      	bls.n	800902a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	22ff      	movs	r2, #255	; 0xff
 8009010:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009016:	b2da      	uxtb	r2, r3
 8009018:	8979      	ldrh	r1, [r7, #10]
 800901a:	2300      	movs	r3, #0
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 fbae 	bl	8009784 <I2C_TransferConfig>
 8009028:	e00f      	b.n	800904a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800902e:	b29a      	uxth	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009038:	b2da      	uxtb	r2, r3
 800903a:	8979      	ldrh	r1, [r7, #10]
 800903c:	2300      	movs	r3, #0
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 fb9d 	bl	8009784 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800904e:	b29b      	uxth	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d19e      	bne.n	8008f92 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	6a39      	ldr	r1, [r7, #32]
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 f9e3 	bl	8009424 <I2C_WaitOnSTOPFlagUntilTimeout>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e01a      	b.n	800909e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2220      	movs	r2, #32
 800906e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6859      	ldr	r1, [r3, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <HAL_I2C_Master_Transmit+0x22c>)
 800907c:	400b      	ands	r3, r1
 800907e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	e000      	b.n	800909e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800909c:	2302      	movs	r3, #2
  }
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	80002000 	.word	0x80002000
 80090ac:	fe00e800 	.word	0xfe00e800

080090b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	461a      	mov	r2, r3
 80090bc:	460b      	mov	r3, r1
 80090be:	817b      	strh	r3, [r7, #10]
 80090c0:	4613      	mov	r3, r2
 80090c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	f040 80db 	bne.w	8009288 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_I2C_Master_Receive+0x30>
 80090dc:	2302      	movs	r3, #2
 80090de:	e0d4      	b.n	800928a <HAL_I2C_Master_Receive+0x1da>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80090e8:	f7fa fce8 	bl	8003abc <HAL_GetTick>
 80090ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	2319      	movs	r3, #25
 80090f4:	2201      	movs	r2, #1
 80090f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 f8f2 	bl	80092e4 <I2C_WaitOnFlagUntilTimeout>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e0bf      	b.n	800928a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2222      	movs	r2, #34	; 0x22
 800910e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2210      	movs	r2, #16
 8009116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	893a      	ldrh	r2, [r7, #8]
 800912a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009136:	b29b      	uxth	r3, r3
 8009138:	2bff      	cmp	r3, #255	; 0xff
 800913a:	d90e      	bls.n	800915a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	22ff      	movs	r2, #255	; 0xff
 8009140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009146:	b2da      	uxtb	r2, r3
 8009148:	8979      	ldrh	r1, [r7, #10]
 800914a:	4b52      	ldr	r3, [pc, #328]	; (8009294 <HAL_I2C_Master_Receive+0x1e4>)
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 fb16 	bl	8009784 <I2C_TransferConfig>
 8009158:	e06d      	b.n	8009236 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800915e:	b29a      	uxth	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009168:	b2da      	uxtb	r2, r3
 800916a:	8979      	ldrh	r1, [r7, #10]
 800916c:	4b49      	ldr	r3, [pc, #292]	; (8009294 <HAL_I2C_Master_Receive+0x1e4>)
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fb05 	bl	8009784 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800917a:	e05c      	b.n	8009236 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	6a39      	ldr	r1, [r7, #32]
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 f993 	bl	80094ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e07c      	b.n	800928a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d034      	beq.n	8009236 <HAL_I2C_Master_Receive+0x186>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d130      	bne.n	8009236 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	2200      	movs	r2, #0
 80091dc:	2180      	movs	r1, #128	; 0x80
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 f880 	bl	80092e4 <I2C_WaitOnFlagUntilTimeout>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e04d      	b.n	800928a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	2bff      	cmp	r3, #255	; 0xff
 80091f6:	d90e      	bls.n	8009216 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	22ff      	movs	r2, #255	; 0xff
 80091fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009202:	b2da      	uxtb	r2, r3
 8009204:	8979      	ldrh	r1, [r7, #10]
 8009206:	2300      	movs	r3, #0
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f000 fab8 	bl	8009784 <I2C_TransferConfig>
 8009214:	e00f      	b.n	8009236 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921a:	b29a      	uxth	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009224:	b2da      	uxtb	r2, r3
 8009226:	8979      	ldrh	r1, [r7, #10]
 8009228:	2300      	movs	r3, #0
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 faa7 	bl	8009784 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d19d      	bne.n	800917c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	6a39      	ldr	r1, [r7, #32]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f8ed 	bl	8009424 <I2C_WaitOnSTOPFlagUntilTimeout>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e01a      	b.n	800928a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2220      	movs	r2, #32
 800925a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6859      	ldr	r1, [r3, #4]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <HAL_I2C_Master_Receive+0x1e8>)
 8009268:	400b      	ands	r3, r1
 800926a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	e000      	b.n	800928a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009288:	2302      	movs	r3, #2
  }
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	80002400 	.word	0x80002400
 8009298:	fe00e800 	.word	0xfe00e800

0800929c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d103      	bne.n	80092ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d007      	beq.n	80092d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	699a      	ldr	r2, [r3, #24]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	619a      	str	r2, [r3, #24]
  }
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	4613      	mov	r3, r2
 80092f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092f4:	e03b      	b.n	800936e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f962 	bl	80095c4 <I2C_IsErrorOccurred>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e041      	b.n	800938e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009310:	d02d      	beq.n	800936e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009312:	f7fa fbd3 	bl	8003abc <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d302      	bcc.n	8009328 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d122      	bne.n	800936e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699a      	ldr	r2, [r3, #24]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	4013      	ands	r3, r2
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	429a      	cmp	r2, r3
 8009336:	bf0c      	ite	eq
 8009338:	2301      	moveq	r3, #1
 800933a:	2300      	movne	r3, #0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	461a      	mov	r2, r3
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	429a      	cmp	r2, r3
 8009344:	d113      	bne.n	800936e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800934a:	f043 0220 	orr.w	r2, r3, #32
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2220      	movs	r2, #32
 8009356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e00f      	b.n	800938e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	699a      	ldr	r2, [r3, #24]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4013      	ands	r3, r2
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	429a      	cmp	r2, r3
 800937c:	bf0c      	ite	eq
 800937e:	2301      	moveq	r3, #1
 8009380:	2300      	movne	r3, #0
 8009382:	b2db      	uxtb	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	429a      	cmp	r2, r3
 800938a:	d0b4      	beq.n	80092f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093a2:	e033      	b.n	800940c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f90b 	bl	80095c4 <I2C_IsErrorOccurred>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e031      	b.n	800941c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093be:	d025      	beq.n	800940c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093c0:	f7fa fb7c 	bl	8003abc <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d302      	bcc.n	80093d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d11a      	bne.n	800940c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d013      	beq.n	800940c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e8:	f043 0220 	orr.w	r2, r3, #32
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e007      	b.n	800941c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b02      	cmp	r3, #2
 8009418:	d1c4      	bne.n	80093a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009430:	e02f      	b.n	8009492 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	68b9      	ldr	r1, [r7, #8]
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 f8c4 	bl	80095c4 <I2C_IsErrorOccurred>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e02d      	b.n	80094a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009446:	f7fa fb39 	bl	8003abc <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	429a      	cmp	r2, r3
 8009454:	d302      	bcc.n	800945c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d11a      	bne.n	8009492 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b20      	cmp	r3, #32
 8009468:	d013      	beq.n	8009492 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946e:	f043 0220 	orr.w	r2, r3, #32
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e007      	b.n	80094a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b20      	cmp	r3, #32
 800949e:	d1c8      	bne.n	8009432 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80094bc:	e071      	b.n	80095a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 f87e 	bl	80095c4 <I2C_IsErrorOccurred>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d13b      	bne.n	8009558 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d138      	bne.n	8009558 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d105      	bne.n	8009500 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f003 0310 	and.w	r3, r3, #16
 800950a:	2b10      	cmp	r3, #16
 800950c:	d121      	bne.n	8009552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2210      	movs	r2, #16
 8009514:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2204      	movs	r2, #4
 800951a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2220      	movs	r2, #32
 8009522:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6859      	ldr	r1, [r3, #4]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	4b24      	ldr	r3, [pc, #144]	; (80095c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009530:	400b      	ands	r3, r1
 8009532:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2220      	movs	r2, #32
 8009538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	75fb      	strb	r3, [r7, #23]
 8009550:	e002      	b.n	8009558 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009558:	f7fa fab0 	bl	8003abc <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	429a      	cmp	r2, r3
 8009566:	d302      	bcc.n	800956e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d119      	bne.n	80095a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d116      	bne.n	80095a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b04      	cmp	r3, #4
 8009580:	d00f      	beq.n	80095a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009586:	f043 0220 	orr.w	r2, r3, #32
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2220      	movs	r2, #32
 8009592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b04      	cmp	r3, #4
 80095ae:	d002      	beq.n	80095b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d083      	beq.n	80094be <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	fe00e800 	.word	0xfe00e800

080095c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08a      	sub	sp, #40	; 0x28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	f003 0310 	and.w	r3, r3, #16
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d068      	beq.n	80096c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2210      	movs	r2, #16
 80095f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095f8:	e049      	b.n	800968e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009600:	d045      	beq.n	800968e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009602:	f7fa fa5b 	bl	8003abc <HAL_GetTick>
 8009606:	4602      	mov	r2, r0
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	429a      	cmp	r2, r3
 8009610:	d302      	bcc.n	8009618 <I2C_IsErrorOccurred+0x54>
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d13a      	bne.n	800968e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009622:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800962a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800963a:	d121      	bne.n	8009680 <I2C_IsErrorOccurred+0xbc>
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009642:	d01d      	beq.n	8009680 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009644:	7cfb      	ldrb	r3, [r7, #19]
 8009646:	2b20      	cmp	r3, #32
 8009648:	d01a      	beq.n	8009680 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009658:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800965a:	f7fa fa2f 	bl	8003abc <HAL_GetTick>
 800965e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009660:	e00e      	b.n	8009680 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009662:	f7fa fa2b 	bl	8003abc <HAL_GetTick>
 8009666:	4602      	mov	r2, r0
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	2b19      	cmp	r3, #25
 800966e:	d907      	bls.n	8009680 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	f043 0320 	orr.w	r3, r3, #32
 8009676:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800967e:	e006      	b.n	800968e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	f003 0320 	and.w	r3, r3, #32
 800968a:	2b20      	cmp	r3, #32
 800968c:	d1e9      	bne.n	8009662 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b20      	cmp	r3, #32
 800969a:	d003      	beq.n	80096a4 <I2C_IsErrorOccurred+0xe0>
 800969c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0aa      	beq.n	80095fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80096a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2220      	movs	r2, #32
 80096b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	f043 0304 	orr.w	r3, r3, #4
 80096ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00b      	beq.n	80096ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	f043 0308 	orr.w	r3, r3, #8
 80096fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009706:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	f043 0302 	orr.w	r3, r3, #2
 800971e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01c      	beq.n	8009772 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff fdaf 	bl	800929c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6859      	ldr	r1, [r3, #4]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <I2C_IsErrorOccurred+0x1bc>)
 800974a:	400b      	ands	r3, r1
 800974c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	431a      	orrs	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2220      	movs	r2, #32
 800975e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009776:	4618      	mov	r0, r3
 8009778:	3728      	adds	r7, #40	; 0x28
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	fe00e800 	.word	0xfe00e800

08009784 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	607b      	str	r3, [r7, #4]
 800978e:	460b      	mov	r3, r1
 8009790:	817b      	strh	r3, [r7, #10]
 8009792:	4613      	mov	r3, r2
 8009794:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009796:	897b      	ldrh	r3, [r7, #10]
 8009798:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800979c:	7a7b      	ldrb	r3, [r7, #9]
 800979e:	041b      	lsls	r3, r3, #16
 80097a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	0d5b      	lsrs	r3, r3, #21
 80097be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80097c2:	4b08      	ldr	r3, [pc, #32]	; (80097e4 <I2C_TransferConfig+0x60>)
 80097c4:	430b      	orrs	r3, r1
 80097c6:	43db      	mvns	r3, r3
 80097c8:	ea02 0103 	and.w	r1, r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80097d6:	bf00      	nop
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	03ff63ff 	.word	0x03ff63ff

080097e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b20      	cmp	r3, #32
 80097fc:	d138      	bne.n	8009870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009808:	2302      	movs	r3, #2
 800980a:	e032      	b.n	8009872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2224      	movs	r2, #36	; 0x24
 8009818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0201 	bic.w	r2, r2, #1
 800982a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800983a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6819      	ldr	r1, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f042 0201 	orr.w	r2, r2, #1
 800985a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2220      	movs	r2, #32
 8009860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	e000      	b.n	8009872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009870:	2302      	movs	r3, #2
  }
}
 8009872:	4618      	mov	r0, r3
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b20      	cmp	r3, #32
 8009892:	d139      	bne.n	8009908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800989e:	2302      	movs	r3, #2
 80098a0:	e033      	b.n	800990a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2224      	movs	r2, #36	; 0x24
 80098ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f022 0201 	bic.w	r2, r2, #1
 80098c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80098d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	e000      	b.n	800990a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009908:	2302      	movs	r3, #2
  }
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
	...

08009918 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009920:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009926:	4a0c      	ldr	r2, [pc, #48]	; (8009958 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009928:	f043 0302 	orr.w	r3, r3, #2
 800992c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009930:	4b09      	ldr	r3, [pc, #36]	; (8009958 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800993e:	4b07      	ldr	r3, [pc, #28]	; (800995c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	4906      	ldr	r1, [pc, #24]	; (800995c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4313      	orrs	r3, r2
 8009948:	604b      	str	r3, [r1, #4]
}
 800994a:	bf00      	nop
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	58024400 	.word	0x58024400
 800995c:	58000400 	.word	0x58000400

08009960 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a04      	ldr	r2, [pc, #16]	; (800997c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800996a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800996e:	6013      	str	r3, [r2, #0]
}
 8009970:	bf00      	nop
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	58024800 	.word	0x58024800

08009980 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009988:	4b19      	ldr	r3, [pc, #100]	; (80099f0 <HAL_PWREx_ConfigSupply+0x70>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b04      	cmp	r3, #4
 8009992:	d00a      	beq.n	80099aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009994:	4b16      	ldr	r3, [pc, #88]	; (80099f0 <HAL_PWREx_ConfigSupply+0x70>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d001      	beq.n	80099a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e01f      	b.n	80099e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e01d      	b.n	80099e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80099aa:	4b11      	ldr	r3, [pc, #68]	; (80099f0 <HAL_PWREx_ConfigSupply+0x70>)
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f023 0207 	bic.w	r2, r3, #7
 80099b2:	490f      	ldr	r1, [pc, #60]	; (80099f0 <HAL_PWREx_ConfigSupply+0x70>)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80099ba:	f7fa f87f 	bl	8003abc <HAL_GetTick>
 80099be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80099c0:	e009      	b.n	80099d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80099c2:	f7fa f87b 	bl	8003abc <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099d0:	d901      	bls.n	80099d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e007      	b.n	80099e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80099d6:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <HAL_PWREx_ConfigSupply+0x70>)
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099e2:	d1ee      	bne.n	80099c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	58024800 	.word	0x58024800

080099f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08c      	sub	sp, #48	; 0x30
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d102      	bne.n	8009a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f000 bc48 	b.w	800a298 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 8088 	beq.w	8009b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a16:	4b99      	ldr	r3, [pc, #612]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a20:	4b96      	ldr	r3, [pc, #600]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d007      	beq.n	8009a3c <HAL_RCC_OscConfig+0x48>
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	2b18      	cmp	r3, #24
 8009a30:	d111      	bne.n	8009a56 <HAL_RCC_OscConfig+0x62>
 8009a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d10c      	bne.n	8009a56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a3c:	4b8f      	ldr	r3, [pc, #572]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d06d      	beq.n	8009b24 <HAL_RCC_OscConfig+0x130>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d169      	bne.n	8009b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f000 bc21 	b.w	800a298 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a5e:	d106      	bne.n	8009a6e <HAL_RCC_OscConfig+0x7a>
 8009a60:	4b86      	ldr	r3, [pc, #536]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a85      	ldr	r2, [pc, #532]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a6a:	6013      	str	r3, [r2, #0]
 8009a6c:	e02e      	b.n	8009acc <HAL_RCC_OscConfig+0xd8>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10c      	bne.n	8009a90 <HAL_RCC_OscConfig+0x9c>
 8009a76:	4b81      	ldr	r3, [pc, #516]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a80      	ldr	r2, [pc, #512]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a80:	6013      	str	r3, [r2, #0]
 8009a82:	4b7e      	ldr	r3, [pc, #504]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a7d      	ldr	r2, [pc, #500]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	e01d      	b.n	8009acc <HAL_RCC_OscConfig+0xd8>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a98:	d10c      	bne.n	8009ab4 <HAL_RCC_OscConfig+0xc0>
 8009a9a:	4b78      	ldr	r3, [pc, #480]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a77      	ldr	r2, [pc, #476]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009aa4:	6013      	str	r3, [r2, #0]
 8009aa6:	4b75      	ldr	r3, [pc, #468]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a74      	ldr	r2, [pc, #464]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	e00b      	b.n	8009acc <HAL_RCC_OscConfig+0xd8>
 8009ab4:	4b71      	ldr	r3, [pc, #452]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a70      	ldr	r2, [pc, #448]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	4b6e      	ldr	r3, [pc, #440]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a6d      	ldr	r2, [pc, #436]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d013      	beq.n	8009afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad4:	f7f9 fff2 	bl	8003abc <HAL_GetTick>
 8009ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ada:	e008      	b.n	8009aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009adc:	f7f9 ffee 	bl	8003abc <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b64      	cmp	r3, #100	; 0x64
 8009ae8:	d901      	bls.n	8009aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e3d4      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009aee:	4b63      	ldr	r3, [pc, #396]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0f0      	beq.n	8009adc <HAL_RCC_OscConfig+0xe8>
 8009afa:	e014      	b.n	8009b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afc:	f7f9 ffde 	bl	8003abc <HAL_GetTick>
 8009b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b02:	e008      	b.n	8009b16 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b04:	f7f9 ffda 	bl	8003abc <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b64      	cmp	r3, #100	; 0x64
 8009b10:	d901      	bls.n	8009b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e3c0      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b16:	4b59      	ldr	r3, [pc, #356]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1f0      	bne.n	8009b04 <HAL_RCC_OscConfig+0x110>
 8009b22:	e000      	b.n	8009b26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 80ca 	beq.w	8009cc8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b34:	4b51      	ldr	r3, [pc, #324]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b3e:	4b4f      	ldr	r3, [pc, #316]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d007      	beq.n	8009b5a <HAL_RCC_OscConfig+0x166>
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	2b18      	cmp	r3, #24
 8009b4e:	d156      	bne.n	8009bfe <HAL_RCC_OscConfig+0x20a>
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d151      	bne.n	8009bfe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b5a:	4b48      	ldr	r3, [pc, #288]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0304 	and.w	r3, r3, #4
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d005      	beq.n	8009b72 <HAL_RCC_OscConfig+0x17e>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e392      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b72:	4b42      	ldr	r3, [pc, #264]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f023 0219 	bic.w	r2, r3, #25
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	493f      	ldr	r1, [pc, #252]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009b80:	4313      	orrs	r3, r2
 8009b82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b84:	f7f9 ff9a 	bl	8003abc <HAL_GetTick>
 8009b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b8c:	f7f9 ff96 	bl	8003abc <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e37c      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b9e:	4b37      	ldr	r3, [pc, #220]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0304 	and.w	r3, r3, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0f0      	beq.n	8009b8c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009baa:	f7f9 ff93 	bl	8003ad4 <HAL_GetREVID>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d817      	bhi.n	8009be8 <HAL_RCC_OscConfig+0x1f4>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	2b40      	cmp	r3, #64	; 0x40
 8009bbe:	d108      	bne.n	8009bd2 <HAL_RCC_OscConfig+0x1de>
 8009bc0:	4b2e      	ldr	r3, [pc, #184]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009bc8:	4a2c      	ldr	r2, [pc, #176]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bd0:	e07a      	b.n	8009cc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bd2:	4b2a      	ldr	r3, [pc, #168]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	031b      	lsls	r3, r3, #12
 8009be0:	4926      	ldr	r1, [pc, #152]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009be6:	e06f      	b.n	8009cc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be8:	4b24      	ldr	r3, [pc, #144]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	061b      	lsls	r3, r3, #24
 8009bf6:	4921      	ldr	r1, [pc, #132]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bfc:	e064      	b.n	8009cc8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d047      	beq.n	8009c96 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c06:	4b1d      	ldr	r3, [pc, #116]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f023 0219 	bic.w	r2, r3, #25
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	491a      	ldr	r1, [pc, #104]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c18:	f7f9 ff50 	bl	8003abc <HAL_GetTick>
 8009c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c1e:	e008      	b.n	8009c32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c20:	f7f9 ff4c 	bl	8003abc <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d901      	bls.n	8009c32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e332      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c32:	4b12      	ldr	r3, [pc, #72]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0304 	and.w	r3, r3, #4
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0f0      	beq.n	8009c20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c3e:	f7f9 ff49 	bl	8003ad4 <HAL_GetREVID>
 8009c42:	4603      	mov	r3, r0
 8009c44:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d819      	bhi.n	8009c80 <HAL_RCC_OscConfig+0x28c>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	2b40      	cmp	r3, #64	; 0x40
 8009c52:	d108      	bne.n	8009c66 <HAL_RCC_OscConfig+0x272>
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c5c:	4a07      	ldr	r2, [pc, #28]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c62:	6053      	str	r3, [r2, #4]
 8009c64:	e030      	b.n	8009cc8 <HAL_RCC_OscConfig+0x2d4>
 8009c66:	4b05      	ldr	r3, [pc, #20]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	031b      	lsls	r3, r3, #12
 8009c74:	4901      	ldr	r1, [pc, #4]	; (8009c7c <HAL_RCC_OscConfig+0x288>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	604b      	str	r3, [r1, #4]
 8009c7a:	e025      	b.n	8009cc8 <HAL_RCC_OscConfig+0x2d4>
 8009c7c:	58024400 	.word	0x58024400
 8009c80:	4b9a      	ldr	r3, [pc, #616]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	061b      	lsls	r3, r3, #24
 8009c8e:	4997      	ldr	r1, [pc, #604]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	604b      	str	r3, [r1, #4]
 8009c94:	e018      	b.n	8009cc8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c96:	4b95      	ldr	r3, [pc, #596]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a94      	ldr	r2, [pc, #592]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009c9c:	f023 0301 	bic.w	r3, r3, #1
 8009ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca2:	f7f9 ff0b 	bl	8003abc <HAL_GetTick>
 8009ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ca8:	e008      	b.n	8009cbc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009caa:	f7f9 ff07 	bl	8003abc <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d901      	bls.n	8009cbc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e2ed      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cbc:	4b8b      	ldr	r3, [pc, #556]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1f0      	bne.n	8009caa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0310 	and.w	r3, r3, #16
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 80a9 	beq.w	8009e28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cd6:	4b85      	ldr	r3, [pc, #532]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cde:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ce0:	4b82      	ldr	r3, [pc, #520]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d007      	beq.n	8009cfc <HAL_RCC_OscConfig+0x308>
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	2b18      	cmp	r3, #24
 8009cf0:	d13a      	bne.n	8009d68 <HAL_RCC_OscConfig+0x374>
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d135      	bne.n	8009d68 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cfc:	4b7b      	ldr	r3, [pc, #492]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <HAL_RCC_OscConfig+0x320>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	2b80      	cmp	r3, #128	; 0x80
 8009d0e:	d001      	beq.n	8009d14 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e2c1      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d14:	f7f9 fede 	bl	8003ad4 <HAL_GetREVID>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d817      	bhi.n	8009d52 <HAL_RCC_OscConfig+0x35e>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	d108      	bne.n	8009d3c <HAL_RCC_OscConfig+0x348>
 8009d2a:	4b70      	ldr	r3, [pc, #448]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d32:	4a6e      	ldr	r2, [pc, #440]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d38:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d3a:	e075      	b.n	8009e28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d3c:	4b6b      	ldr	r3, [pc, #428]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a1b      	ldr	r3, [r3, #32]
 8009d48:	069b      	lsls	r3, r3, #26
 8009d4a:	4968      	ldr	r1, [pc, #416]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d50:	e06a      	b.n	8009e28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d52:	4b66      	ldr	r3, [pc, #408]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	061b      	lsls	r3, r3, #24
 8009d60:	4962      	ldr	r1, [pc, #392]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d66:	e05f      	b.n	8009e28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d042      	beq.n	8009df6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009d70:	4b5e      	ldr	r3, [pc, #376]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a5d      	ldr	r2, [pc, #372]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7c:	f7f9 fe9e 	bl	8003abc <HAL_GetTick>
 8009d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d82:	e008      	b.n	8009d96 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d84:	f7f9 fe9a 	bl	8003abc <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d901      	bls.n	8009d96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e280      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d96:	4b55      	ldr	r3, [pc, #340]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0f0      	beq.n	8009d84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009da2:	f7f9 fe97 	bl	8003ad4 <HAL_GetREVID>
 8009da6:	4603      	mov	r3, r0
 8009da8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d817      	bhi.n	8009de0 <HAL_RCC_OscConfig+0x3ec>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a1b      	ldr	r3, [r3, #32]
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d108      	bne.n	8009dca <HAL_RCC_OscConfig+0x3d6>
 8009db8:	4b4c      	ldr	r3, [pc, #304]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009dc0:	4a4a      	ldr	r2, [pc, #296]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009dc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dc6:	6053      	str	r3, [r2, #4]
 8009dc8:	e02e      	b.n	8009e28 <HAL_RCC_OscConfig+0x434>
 8009dca:	4b48      	ldr	r3, [pc, #288]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	069b      	lsls	r3, r3, #26
 8009dd8:	4944      	ldr	r1, [pc, #272]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	604b      	str	r3, [r1, #4]
 8009dde:	e023      	b.n	8009e28 <HAL_RCC_OscConfig+0x434>
 8009de0:	4b42      	ldr	r3, [pc, #264]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	061b      	lsls	r3, r3, #24
 8009dee:	493f      	ldr	r1, [pc, #252]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60cb      	str	r3, [r1, #12]
 8009df4:	e018      	b.n	8009e28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009df6:	4b3d      	ldr	r3, [pc, #244]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a3c      	ldr	r2, [pc, #240]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e02:	f7f9 fe5b 	bl	8003abc <HAL_GetTick>
 8009e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e08:	e008      	b.n	8009e1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e0a:	f7f9 fe57 	bl	8003abc <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e23d      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e1c:	4b33      	ldr	r3, [pc, #204]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1f0      	bne.n	8009e0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0308 	and.w	r3, r3, #8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d036      	beq.n	8009ea2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d019      	beq.n	8009e70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e3c:	4b2b      	ldr	r3, [pc, #172]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e40:	4a2a      	ldr	r2, [pc, #168]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009e42:	f043 0301 	orr.w	r3, r3, #1
 8009e46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e48:	f7f9 fe38 	bl	8003abc <HAL_GetTick>
 8009e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e4e:	e008      	b.n	8009e62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e50:	f7f9 fe34 	bl	8003abc <HAL_GetTick>
 8009e54:	4602      	mov	r2, r0
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d901      	bls.n	8009e62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e21a      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e62:	4b22      	ldr	r3, [pc, #136]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d0f0      	beq.n	8009e50 <HAL_RCC_OscConfig+0x45c>
 8009e6e:	e018      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e70:	4b1e      	ldr	r3, [pc, #120]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e74:	4a1d      	ldr	r2, [pc, #116]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009e76:	f023 0301 	bic.w	r3, r3, #1
 8009e7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e7c:	f7f9 fe1e 	bl	8003abc <HAL_GetTick>
 8009e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e82:	e008      	b.n	8009e96 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e84:	f7f9 fe1a 	bl	8003abc <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d901      	bls.n	8009e96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e200      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e96:	4b15      	ldr	r3, [pc, #84]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1f0      	bne.n	8009e84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d039      	beq.n	8009f22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01c      	beq.n	8009ef0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009eb6:	4b0d      	ldr	r3, [pc, #52]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a0c      	ldr	r2, [pc, #48]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ec0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ec2:	f7f9 fdfb 	bl	8003abc <HAL_GetTick>
 8009ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ec8:	e008      	b.n	8009edc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009eca:	f7f9 fdf7 	bl	8003abc <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d901      	bls.n	8009edc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e1dd      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009edc:	4b03      	ldr	r3, [pc, #12]	; (8009eec <HAL_RCC_OscConfig+0x4f8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0f0      	beq.n	8009eca <HAL_RCC_OscConfig+0x4d6>
 8009ee8:	e01b      	b.n	8009f22 <HAL_RCC_OscConfig+0x52e>
 8009eea:	bf00      	nop
 8009eec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ef0:	4b9b      	ldr	r3, [pc, #620]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a9a      	ldr	r2, [pc, #616]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009efa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009efc:	f7f9 fdde 	bl	8003abc <HAL_GetTick>
 8009f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f02:	e008      	b.n	8009f16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f04:	f7f9 fdda 	bl	8003abc <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d901      	bls.n	8009f16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e1c0      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f16:	4b92      	ldr	r3, [pc, #584]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1f0      	bne.n	8009f04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0304 	and.w	r3, r3, #4
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 8081 	beq.w	800a032 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f30:	4b8c      	ldr	r3, [pc, #560]	; (800a164 <HAL_RCC_OscConfig+0x770>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a8b      	ldr	r2, [pc, #556]	; (800a164 <HAL_RCC_OscConfig+0x770>)
 8009f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f3c:	f7f9 fdbe 	bl	8003abc <HAL_GetTick>
 8009f40:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f42:	e008      	b.n	8009f56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f44:	f7f9 fdba 	bl	8003abc <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	2b64      	cmp	r3, #100	; 0x64
 8009f50:	d901      	bls.n	8009f56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e1a0      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f56:	4b83      	ldr	r3, [pc, #524]	; (800a164 <HAL_RCC_OscConfig+0x770>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0f0      	beq.n	8009f44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d106      	bne.n	8009f78 <HAL_RCC_OscConfig+0x584>
 8009f6a:	4b7d      	ldr	r3, [pc, #500]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	4a7c      	ldr	r2, [pc, #496]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009f70:	f043 0301 	orr.w	r3, r3, #1
 8009f74:	6713      	str	r3, [r2, #112]	; 0x70
 8009f76:	e02d      	b.n	8009fd4 <HAL_RCC_OscConfig+0x5e0>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10c      	bne.n	8009f9a <HAL_RCC_OscConfig+0x5a6>
 8009f80:	4b77      	ldr	r3, [pc, #476]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f84:	4a76      	ldr	r2, [pc, #472]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009f86:	f023 0301 	bic.w	r3, r3, #1
 8009f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8009f8c:	4b74      	ldr	r3, [pc, #464]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f90:	4a73      	ldr	r2, [pc, #460]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009f92:	f023 0304 	bic.w	r3, r3, #4
 8009f96:	6713      	str	r3, [r2, #112]	; 0x70
 8009f98:	e01c      	b.n	8009fd4 <HAL_RCC_OscConfig+0x5e0>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	2b05      	cmp	r3, #5
 8009fa0:	d10c      	bne.n	8009fbc <HAL_RCC_OscConfig+0x5c8>
 8009fa2:	4b6f      	ldr	r3, [pc, #444]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa6:	4a6e      	ldr	r2, [pc, #440]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009fa8:	f043 0304 	orr.w	r3, r3, #4
 8009fac:	6713      	str	r3, [r2, #112]	; 0x70
 8009fae:	4b6c      	ldr	r3, [pc, #432]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb2:	4a6b      	ldr	r2, [pc, #428]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009fb4:	f043 0301 	orr.w	r3, r3, #1
 8009fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8009fba:	e00b      	b.n	8009fd4 <HAL_RCC_OscConfig+0x5e0>
 8009fbc:	4b68      	ldr	r3, [pc, #416]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc0:	4a67      	ldr	r2, [pc, #412]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009fc2:	f023 0301 	bic.w	r3, r3, #1
 8009fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8009fc8:	4b65      	ldr	r3, [pc, #404]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fcc:	4a64      	ldr	r2, [pc, #400]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009fce:	f023 0304 	bic.w	r3, r3, #4
 8009fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d015      	beq.n	800a008 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fdc:	f7f9 fd6e 	bl	8003abc <HAL_GetTick>
 8009fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fe2:	e00a      	b.n	8009ffa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fe4:	f7f9 fd6a 	bl	8003abc <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d901      	bls.n	8009ffa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	e14e      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ffa:	4b59      	ldr	r3, [pc, #356]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 8009ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0ee      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x5f0>
 800a006:	e014      	b.n	800a032 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a008:	f7f9 fd58 	bl	8003abc <HAL_GetTick>
 800a00c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a00e:	e00a      	b.n	800a026 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a010:	f7f9 fd54 	bl	8003abc <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a01e:	4293      	cmp	r3, r2
 800a020:	d901      	bls.n	800a026 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e138      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a026:	4b4e      	ldr	r3, [pc, #312]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02a:	f003 0302 	and.w	r3, r3, #2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1ee      	bne.n	800a010 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 812d 	beq.w	800a296 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a03c:	4b48      	ldr	r3, [pc, #288]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a044:	2b18      	cmp	r3, #24
 800a046:	f000 80bd 	beq.w	800a1c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	2b02      	cmp	r3, #2
 800a050:	f040 809e 	bne.w	800a190 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a054:	4b42      	ldr	r3, [pc, #264]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a41      	ldr	r2, [pc, #260]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a05a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a05e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a060:	f7f9 fd2c 	bl	8003abc <HAL_GetTick>
 800a064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a066:	e008      	b.n	800a07a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a068:	f7f9 fd28 	bl	8003abc <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d901      	bls.n	800a07a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e10e      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a07a:	4b39      	ldr	r3, [pc, #228]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1f0      	bne.n	800a068 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a086:	4b36      	ldr	r3, [pc, #216]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a08a:	4b37      	ldr	r3, [pc, #220]	; (800a168 <HAL_RCC_OscConfig+0x774>)
 800a08c:	4013      	ands	r3, r2
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a096:	0112      	lsls	r2, r2, #4
 800a098:	430a      	orrs	r2, r1
 800a09a:	4931      	ldr	r1, [pc, #196]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a09c:	4313      	orrs	r3, r2
 800a09e:	628b      	str	r3, [r1, #40]	; 0x28
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	025b      	lsls	r3, r3, #9
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	041b      	lsls	r3, r3, #16
 800a0be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	061b      	lsls	r3, r3, #24
 800a0cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0d0:	4923      	ldr	r1, [pc, #140]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a0d6:	4b22      	ldr	r3, [pc, #136]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0da:	4a21      	ldr	r2, [pc, #132]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a0dc:	f023 0301 	bic.w	r3, r3, #1
 800a0e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a0e2:	4b1f      	ldr	r3, [pc, #124]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a0e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e6:	4b21      	ldr	r3, [pc, #132]	; (800a16c <HAL_RCC_OscConfig+0x778>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a0ee:	00d2      	lsls	r2, r2, #3
 800a0f0:	491b      	ldr	r1, [pc, #108]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a0f6:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	f023 020c 	bic.w	r2, r3, #12
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	4917      	ldr	r1, [pc, #92]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a104:	4313      	orrs	r3, r2
 800a106:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a108:	4b15      	ldr	r3, [pc, #84]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	f023 0202 	bic.w	r2, r3, #2
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a114:	4912      	ldr	r1, [pc, #72]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a116:	4313      	orrs	r3, r2
 800a118:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a11a:	4b11      	ldr	r3, [pc, #68]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11e:	4a10      	ldr	r2, [pc, #64]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a126:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	4a0d      	ldr	r2, [pc, #52]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a12c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a132:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	4a0a      	ldr	r2, [pc, #40]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a13c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a13e:	4b08      	ldr	r3, [pc, #32]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	4a07      	ldr	r2, [pc, #28]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a144:	f043 0301 	orr.w	r3, r3, #1
 800a148:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a14a:	4b05      	ldr	r3, [pc, #20]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a04      	ldr	r2, [pc, #16]	; (800a160 <HAL_RCC_OscConfig+0x76c>)
 800a150:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a156:	f7f9 fcb1 	bl	8003abc <HAL_GetTick>
 800a15a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a15c:	e011      	b.n	800a182 <HAL_RCC_OscConfig+0x78e>
 800a15e:	bf00      	nop
 800a160:	58024400 	.word	0x58024400
 800a164:	58024800 	.word	0x58024800
 800a168:	fffffc0c 	.word	0xfffffc0c
 800a16c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a170:	f7f9 fca4 	bl	8003abc <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d901      	bls.n	800a182 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e08a      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a182:	4b47      	ldr	r3, [pc, #284]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0f0      	beq.n	800a170 <HAL_RCC_OscConfig+0x77c>
 800a18e:	e082      	b.n	800a296 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a190:	4b43      	ldr	r3, [pc, #268]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a42      	ldr	r2, [pc, #264]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a19a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a19c:	f7f9 fc8e 	bl	8003abc <HAL_GetTick>
 800a1a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1a2:	e008      	b.n	800a1b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1a4:	f7f9 fc8a 	bl	8003abc <HAL_GetTick>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d901      	bls.n	800a1b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e070      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1b6:	4b3a      	ldr	r3, [pc, #232]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1f0      	bne.n	800a1a4 <HAL_RCC_OscConfig+0x7b0>
 800a1c2:	e068      	b.n	800a296 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a1c4:	4b36      	ldr	r3, [pc, #216]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a1ca:	4b35      	ldr	r3, [pc, #212]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d031      	beq.n	800a23c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f003 0203 	and.w	r2, r3, #3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d12a      	bne.n	800a23c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	091b      	lsrs	r3, r3, #4
 800a1ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d122      	bne.n	800a23c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a202:	429a      	cmp	r2, r3
 800a204:	d11a      	bne.n	800a23c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	0a5b      	lsrs	r3, r3, #9
 800a20a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a212:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a214:	429a      	cmp	r2, r3
 800a216:	d111      	bne.n	800a23c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	0c1b      	lsrs	r3, r3, #16
 800a21c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a224:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a226:	429a      	cmp	r2, r3
 800a228:	d108      	bne.n	800a23c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	0e1b      	lsrs	r3, r3, #24
 800a22e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a236:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a238:	429a      	cmp	r2, r3
 800a23a:	d001      	beq.n	800a240 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e02b      	b.n	800a298 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a240:	4b17      	ldr	r3, [pc, #92]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a244:	08db      	lsrs	r3, r3, #3
 800a246:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a24a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	429a      	cmp	r2, r3
 800a254:	d01f      	beq.n	800a296 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a256:	4b12      	ldr	r3, [pc, #72]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25a:	4a11      	ldr	r2, [pc, #68]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a25c:	f023 0301 	bic.w	r3, r3, #1
 800a260:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a262:	f7f9 fc2b 	bl	8003abc <HAL_GetTick>
 800a266:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a268:	bf00      	nop
 800a26a:	f7f9 fc27 	bl	8003abc <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	4293      	cmp	r3, r2
 800a274:	d0f9      	beq.n	800a26a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a276:	4b0a      	ldr	r3, [pc, #40]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a27a:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <HAL_RCC_OscConfig+0x8b0>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a282:	00d2      	lsls	r2, r2, #3
 800a284:	4906      	ldr	r1, [pc, #24]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a286:	4313      	orrs	r3, r2
 800a288:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a28a:	4b05      	ldr	r3, [pc, #20]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	4a04      	ldr	r2, [pc, #16]	; (800a2a0 <HAL_RCC_OscConfig+0x8ac>)
 800a290:	f043 0301 	orr.w	r3, r3, #1
 800a294:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3730      	adds	r7, #48	; 0x30
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	ffff0007 	.word	0xffff0007

0800a2a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e19c      	b.n	800a5f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a2bc:	4b8a      	ldr	r3, [pc, #552]	; (800a4e8 <HAL_RCC_ClockConfig+0x240>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 030f 	and.w	r3, r3, #15
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d910      	bls.n	800a2ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ca:	4b87      	ldr	r3, [pc, #540]	; (800a4e8 <HAL_RCC_ClockConfig+0x240>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f023 020f 	bic.w	r2, r3, #15
 800a2d2:	4985      	ldr	r1, [pc, #532]	; (800a4e8 <HAL_RCC_ClockConfig+0x240>)
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2da:	4b83      	ldr	r3, [pc, #524]	; (800a4e8 <HAL_RCC_ClockConfig+0x240>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 030f 	and.w	r3, r3, #15
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d001      	beq.n	800a2ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e184      	b.n	800a5f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d010      	beq.n	800a31a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	4b7b      	ldr	r3, [pc, #492]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a304:	429a      	cmp	r2, r3
 800a306:	d908      	bls.n	800a31a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a308:	4b78      	ldr	r3, [pc, #480]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	4975      	ldr	r1, [pc, #468]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a316:	4313      	orrs	r3, r2
 800a318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0308 	and.w	r3, r3, #8
 800a322:	2b00      	cmp	r3, #0
 800a324:	d010      	beq.n	800a348 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695a      	ldr	r2, [r3, #20]
 800a32a:	4b70      	ldr	r3, [pc, #448]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a32c:	69db      	ldr	r3, [r3, #28]
 800a32e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a332:	429a      	cmp	r2, r3
 800a334:	d908      	bls.n	800a348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a336:	4b6d      	ldr	r3, [pc, #436]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	695b      	ldr	r3, [r3, #20]
 800a342:	496a      	ldr	r1, [pc, #424]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a344:	4313      	orrs	r3, r2
 800a346:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0310 	and.w	r3, r3, #16
 800a350:	2b00      	cmp	r3, #0
 800a352:	d010      	beq.n	800a376 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699a      	ldr	r2, [r3, #24]
 800a358:	4b64      	ldr	r3, [pc, #400]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a360:	429a      	cmp	r2, r3
 800a362:	d908      	bls.n	800a376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a364:	4b61      	ldr	r3, [pc, #388]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a366:	69db      	ldr	r3, [r3, #28]
 800a368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	495e      	ldr	r1, [pc, #376]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a372:	4313      	orrs	r3, r2
 800a374:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0320 	and.w	r3, r3, #32
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d010      	beq.n	800a3a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	69da      	ldr	r2, [r3, #28]
 800a386:	4b59      	ldr	r3, [pc, #356]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a38e:	429a      	cmp	r2, r3
 800a390:	d908      	bls.n	800a3a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a392:	4b56      	ldr	r3, [pc, #344]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	4953      	ldr	r1, [pc, #332]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0302 	and.w	r3, r3, #2
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d010      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68da      	ldr	r2, [r3, #12]
 800a3b4:	4b4d      	ldr	r3, [pc, #308]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	f003 030f 	and.w	r3, r3, #15
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d908      	bls.n	800a3d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3c0:	4b4a      	ldr	r3, [pc, #296]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f023 020f 	bic.w	r2, r3, #15
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	4947      	ldr	r1, [pc, #284]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d055      	beq.n	800a48a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a3de:	4b43      	ldr	r3, [pc, #268]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	4940      	ldr	r1, [pc, #256]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d107      	bne.n	800a408 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3f8:	4b3c      	ldr	r3, [pc, #240]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d121      	bne.n	800a448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e0f6      	b.n	800a5f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d107      	bne.n	800a420 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a410:	4b36      	ldr	r3, [pc, #216]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d115      	bne.n	800a448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e0ea      	b.n	800a5f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d107      	bne.n	800a438 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a428:	4b30      	ldr	r3, [pc, #192]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a430:	2b00      	cmp	r3, #0
 800a432:	d109      	bne.n	800a448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e0de      	b.n	800a5f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a438:	4b2c      	ldr	r3, [pc, #176]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	e0d6      	b.n	800a5f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a448:	4b28      	ldr	r3, [pc, #160]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	f023 0207 	bic.w	r2, r3, #7
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	4925      	ldr	r1, [pc, #148]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a456:	4313      	orrs	r3, r2
 800a458:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a45a:	f7f9 fb2f 	bl	8003abc <HAL_GetTick>
 800a45e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a460:	e00a      	b.n	800a478 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a462:	f7f9 fb2b 	bl	8003abc <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a470:	4293      	cmp	r3, r2
 800a472:	d901      	bls.n	800a478 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e0be      	b.n	800a5f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a478:	4b1c      	ldr	r3, [pc, #112]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	429a      	cmp	r2, r3
 800a488:	d1eb      	bne.n	800a462 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d010      	beq.n	800a4b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d208      	bcs.n	800a4b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4a6:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	f023 020f 	bic.w	r2, r3, #15
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	490e      	ldr	r1, [pc, #56]	; (800a4ec <HAL_RCC_ClockConfig+0x244>)
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a4b8:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <HAL_RCC_ClockConfig+0x240>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 030f 	and.w	r3, r3, #15
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d214      	bcs.n	800a4f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4c6:	4b08      	ldr	r3, [pc, #32]	; (800a4e8 <HAL_RCC_ClockConfig+0x240>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f023 020f 	bic.w	r2, r3, #15
 800a4ce:	4906      	ldr	r1, [pc, #24]	; (800a4e8 <HAL_RCC_ClockConfig+0x240>)
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4d6:	4b04      	ldr	r3, [pc, #16]	; (800a4e8 <HAL_RCC_ClockConfig+0x240>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 030f 	and.w	r3, r3, #15
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d005      	beq.n	800a4f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e086      	b.n	800a5f6 <HAL_RCC_ClockConfig+0x34e>
 800a4e8:	52002000 	.word	0x52002000
 800a4ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d010      	beq.n	800a51e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	691a      	ldr	r2, [r3, #16]
 800a500:	4b3f      	ldr	r3, [pc, #252]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a508:	429a      	cmp	r2, r3
 800a50a:	d208      	bcs.n	800a51e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a50c:	4b3c      	ldr	r3, [pc, #240]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	4939      	ldr	r1, [pc, #228]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0308 	and.w	r3, r3, #8
 800a526:	2b00      	cmp	r3, #0
 800a528:	d010      	beq.n	800a54c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	695a      	ldr	r2, [r3, #20]
 800a52e:	4b34      	ldr	r3, [pc, #208]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a536:	429a      	cmp	r2, r3
 800a538:	d208      	bcs.n	800a54c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a53a:	4b31      	ldr	r3, [pc, #196]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	492e      	ldr	r1, [pc, #184]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0310 	and.w	r3, r3, #16
 800a554:	2b00      	cmp	r3, #0
 800a556:	d010      	beq.n	800a57a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699a      	ldr	r2, [r3, #24]
 800a55c:	4b28      	ldr	r3, [pc, #160]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a564:	429a      	cmp	r2, r3
 800a566:	d208      	bcs.n	800a57a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a568:	4b25      	ldr	r3, [pc, #148]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	4922      	ldr	r1, [pc, #136]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a576:	4313      	orrs	r3, r2
 800a578:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 0320 	and.w	r3, r3, #32
 800a582:	2b00      	cmp	r3, #0
 800a584:	d010      	beq.n	800a5a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	69da      	ldr	r2, [r3, #28]
 800a58a:	4b1d      	ldr	r3, [pc, #116]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a592:	429a      	cmp	r2, r3
 800a594:	d208      	bcs.n	800a5a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a596:	4b1a      	ldr	r3, [pc, #104]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	4917      	ldr	r1, [pc, #92]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5a8:	f000 f834 	bl	800a614 <HAL_RCC_GetSysClockFreq>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	4b14      	ldr	r3, [pc, #80]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	0a1b      	lsrs	r3, r3, #8
 800a5b4:	f003 030f 	and.w	r3, r3, #15
 800a5b8:	4912      	ldr	r1, [pc, #72]	; (800a604 <HAL_RCC_ClockConfig+0x35c>)
 800a5ba:	5ccb      	ldrb	r3, [r1, r3]
 800a5bc:	f003 031f 	and.w	r3, r3, #31
 800a5c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5c6:	4b0e      	ldr	r3, [pc, #56]	; (800a600 <HAL_RCC_ClockConfig+0x358>)
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	4a0d      	ldr	r2, [pc, #52]	; (800a604 <HAL_RCC_ClockConfig+0x35c>)
 800a5d0:	5cd3      	ldrb	r3, [r2, r3]
 800a5d2:	f003 031f 	and.w	r3, r3, #31
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5dc:	4a0a      	ldr	r2, [pc, #40]	; (800a608 <HAL_RCC_ClockConfig+0x360>)
 800a5de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5e0:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <HAL_RCC_ClockConfig+0x364>)
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a5e6:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <HAL_RCC_ClockConfig+0x368>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f8 ff94 	bl	8003518 <HAL_InitTick>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	58024400 	.word	0x58024400
 800a604:	08017000 	.word	0x08017000
 800a608:	24000094 	.word	0x24000094
 800a60c:	24000090 	.word	0x24000090
 800a610:	24000098 	.word	0x24000098

0800a614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a614:	b480      	push	{r7}
 800a616:	b089      	sub	sp, #36	; 0x24
 800a618:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a61a:	4bb3      	ldr	r3, [pc, #716]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a622:	2b18      	cmp	r3, #24
 800a624:	f200 8155 	bhi.w	800a8d2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a628:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62e:	bf00      	nop
 800a630:	0800a695 	.word	0x0800a695
 800a634:	0800a8d3 	.word	0x0800a8d3
 800a638:	0800a8d3 	.word	0x0800a8d3
 800a63c:	0800a8d3 	.word	0x0800a8d3
 800a640:	0800a8d3 	.word	0x0800a8d3
 800a644:	0800a8d3 	.word	0x0800a8d3
 800a648:	0800a8d3 	.word	0x0800a8d3
 800a64c:	0800a8d3 	.word	0x0800a8d3
 800a650:	0800a6bb 	.word	0x0800a6bb
 800a654:	0800a8d3 	.word	0x0800a8d3
 800a658:	0800a8d3 	.word	0x0800a8d3
 800a65c:	0800a8d3 	.word	0x0800a8d3
 800a660:	0800a8d3 	.word	0x0800a8d3
 800a664:	0800a8d3 	.word	0x0800a8d3
 800a668:	0800a8d3 	.word	0x0800a8d3
 800a66c:	0800a8d3 	.word	0x0800a8d3
 800a670:	0800a6c1 	.word	0x0800a6c1
 800a674:	0800a8d3 	.word	0x0800a8d3
 800a678:	0800a8d3 	.word	0x0800a8d3
 800a67c:	0800a8d3 	.word	0x0800a8d3
 800a680:	0800a8d3 	.word	0x0800a8d3
 800a684:	0800a8d3 	.word	0x0800a8d3
 800a688:	0800a8d3 	.word	0x0800a8d3
 800a68c:	0800a8d3 	.word	0x0800a8d3
 800a690:	0800a6c7 	.word	0x0800a6c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a694:	4b94      	ldr	r3, [pc, #592]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0320 	and.w	r3, r3, #32
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d009      	beq.n	800a6b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6a0:	4b91      	ldr	r3, [pc, #580]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	08db      	lsrs	r3, r3, #3
 800a6a6:	f003 0303 	and.w	r3, r3, #3
 800a6aa:	4a90      	ldr	r2, [pc, #576]	; (800a8ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a6b2:	e111      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a6b4:	4b8d      	ldr	r3, [pc, #564]	; (800a8ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6b6:	61bb      	str	r3, [r7, #24]
      break;
 800a6b8:	e10e      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a6ba:	4b8d      	ldr	r3, [pc, #564]	; (800a8f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6bc:	61bb      	str	r3, [r7, #24]
      break;
 800a6be:	e10b      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a6c0:	4b8c      	ldr	r3, [pc, #560]	; (800a8f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a6c2:	61bb      	str	r3, [r7, #24]
      break;
 800a6c4:	e108      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6c6:	4b88      	ldr	r3, [pc, #544]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ca:	f003 0303 	and.w	r3, r3, #3
 800a6ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a6d0:	4b85      	ldr	r3, [pc, #532]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d4:	091b      	lsrs	r3, r3, #4
 800a6d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a6dc:	4b82      	ldr	r3, [pc, #520]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6e6:	4b80      	ldr	r3, [pc, #512]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	fb02 f303 	mul.w	r3, r2, r3
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 80e1 	beq.w	800a8cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	f000 8083 	beq.w	800a818 <HAL_RCC_GetSysClockFreq+0x204>
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b02      	cmp	r3, #2
 800a716:	f200 80a1 	bhi.w	800a85c <HAL_RCC_GetSysClockFreq+0x248>
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <HAL_RCC_GetSysClockFreq+0x114>
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d056      	beq.n	800a7d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a726:	e099      	b.n	800a85c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a728:	4b6f      	ldr	r3, [pc, #444]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	2b00      	cmp	r3, #0
 800a732:	d02d      	beq.n	800a790 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a734:	4b6c      	ldr	r3, [pc, #432]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	08db      	lsrs	r3, r3, #3
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	4a6b      	ldr	r2, [pc, #428]	; (800a8ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a740:	fa22 f303 	lsr.w	r3, r2, r3
 800a744:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75e:	4b62      	ldr	r3, [pc, #392]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a772:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a8f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a77a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a78a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a78e:	e087      	b.n	800a8a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a8fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800a79e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a2:	4b51      	ldr	r3, [pc, #324]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a8f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7d2:	e065      	b.n	800a8a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7de:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a900 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7e6:	4b40      	ldr	r3, [pc, #256]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a8f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a80a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a80e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a816:	e043      	b.n	800a8a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a822:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a904 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a82a:	4b2f      	ldr	r3, [pc, #188]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a83e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a8f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a84a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a85a:	e021      	b.n	800a8a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a866:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a900 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a86e:	4b1e      	ldr	r3, [pc, #120]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a87e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a882:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a8f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a88e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a89a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a89e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a8a0:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a4:	0a5b      	lsrs	r3, r3, #9
 800a8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	ee07 3a90 	vmov	s15, r3
 800a8b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8c4:	ee17 3a90 	vmov	r3, s15
 800a8c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a8ca:	e005      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	61bb      	str	r3, [r7, #24]
      break;
 800a8d0:	e002      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a8d2:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a8d4:	61bb      	str	r3, [r7, #24]
      break;
 800a8d6:	bf00      	nop
  }

  return sysclockfreq;
 800a8d8:	69bb      	ldr	r3, [r7, #24]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3724      	adds	r7, #36	; 0x24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	58024400 	.word	0x58024400
 800a8ec:	03d09000 	.word	0x03d09000
 800a8f0:	003d0900 	.word	0x003d0900
 800a8f4:	017d7840 	.word	0x017d7840
 800a8f8:	46000000 	.word	0x46000000
 800a8fc:	4c742400 	.word	0x4c742400
 800a900:	4a742400 	.word	0x4a742400
 800a904:	4bbebc20 	.word	0x4bbebc20

0800a908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a90e:	f7ff fe81 	bl	800a614 <HAL_RCC_GetSysClockFreq>
 800a912:	4602      	mov	r2, r0
 800a914:	4b10      	ldr	r3, [pc, #64]	; (800a958 <HAL_RCC_GetHCLKFreq+0x50>)
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	0a1b      	lsrs	r3, r3, #8
 800a91a:	f003 030f 	and.w	r3, r3, #15
 800a91e:	490f      	ldr	r1, [pc, #60]	; (800a95c <HAL_RCC_GetHCLKFreq+0x54>)
 800a920:	5ccb      	ldrb	r3, [r1, r3]
 800a922:	f003 031f 	and.w	r3, r3, #31
 800a926:	fa22 f303 	lsr.w	r3, r2, r3
 800a92a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a92c:	4b0a      	ldr	r3, [pc, #40]	; (800a958 <HAL_RCC_GetHCLKFreq+0x50>)
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	4a09      	ldr	r2, [pc, #36]	; (800a95c <HAL_RCC_GetHCLKFreq+0x54>)
 800a936:	5cd3      	ldrb	r3, [r2, r3]
 800a938:	f003 031f 	and.w	r3, r3, #31
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	fa22 f303 	lsr.w	r3, r2, r3
 800a942:	4a07      	ldr	r2, [pc, #28]	; (800a960 <HAL_RCC_GetHCLKFreq+0x58>)
 800a944:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a946:	4a07      	ldr	r2, [pc, #28]	; (800a964 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a94c:	4b04      	ldr	r3, [pc, #16]	; (800a960 <HAL_RCC_GetHCLKFreq+0x58>)
 800a94e:	681b      	ldr	r3, [r3, #0]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	58024400 	.word	0x58024400
 800a95c:	08017000 	.word	0x08017000
 800a960:	24000094 	.word	0x24000094
 800a964:	24000090 	.word	0x24000090

0800a968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a96c:	f7ff ffcc 	bl	800a908 <HAL_RCC_GetHCLKFreq>
 800a970:	4602      	mov	r2, r0
 800a972:	4b06      	ldr	r3, [pc, #24]	; (800a98c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	091b      	lsrs	r3, r3, #4
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	4904      	ldr	r1, [pc, #16]	; (800a990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a97e:	5ccb      	ldrb	r3, [r1, r3]
 800a980:	f003 031f 	and.w	r3, r3, #31
 800a984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a988:	4618      	mov	r0, r3
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	58024400 	.word	0x58024400
 800a990:	08017000 	.word	0x08017000

0800a994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a998:	f7ff ffb6 	bl	800a908 <HAL_RCC_GetHCLKFreq>
 800a99c:	4602      	mov	r2, r0
 800a99e:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	0a1b      	lsrs	r3, r3, #8
 800a9a4:	f003 0307 	and.w	r3, r3, #7
 800a9a8:	4904      	ldr	r1, [pc, #16]	; (800a9bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a9aa:	5ccb      	ldrb	r3, [r1, r3]
 800a9ac:	f003 031f 	and.w	r3, r3, #31
 800a9b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	08017000 	.word	0x08017000

0800a9c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	223f      	movs	r2, #63	; 0x3f
 800a9ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a9d0:	4b1a      	ldr	r3, [pc, #104]	; (800aa3c <HAL_RCC_GetClockConfig+0x7c>)
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	f003 0207 	and.w	r2, r3, #7
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a9dc:	4b17      	ldr	r3, [pc, #92]	; (800aa3c <HAL_RCC_GetClockConfig+0x7c>)
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a9e8:	4b14      	ldr	r3, [pc, #80]	; (800aa3c <HAL_RCC_GetClockConfig+0x7c>)
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	f003 020f 	and.w	r2, r3, #15
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a9f4:	4b11      	ldr	r3, [pc, #68]	; (800aa3c <HAL_RCC_GetClockConfig+0x7c>)
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800aa00:	4b0e      	ldr	r3, [pc, #56]	; (800aa3c <HAL_RCC_GetClockConfig+0x7c>)
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800aa0c:	4b0b      	ldr	r3, [pc, #44]	; (800aa3c <HAL_RCC_GetClockConfig+0x7c>)
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800aa18:	4b08      	ldr	r3, [pc, #32]	; (800aa3c <HAL_RCC_GetClockConfig+0x7c>)
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aa24:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <HAL_RCC_GetClockConfig+0x80>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 020f 	and.w	r2, r3, #15
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	601a      	str	r2, [r3, #0]
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	58024400 	.word	0x58024400
 800aa40:	52002000 	.word	0x52002000

0800aa44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa48:	b0ca      	sub	sp, #296	; 0x128
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa50:	2300      	movs	r3, #0
 800aa52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa56:	2300      	movs	r3, #0
 800aa58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800aa68:	2500      	movs	r5, #0
 800aa6a:	ea54 0305 	orrs.w	r3, r4, r5
 800aa6e:	d049      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aa70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa7a:	d02f      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aa7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa80:	d828      	bhi.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa86:	d01a      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aa88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa8c:	d822      	bhi.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aa92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa96:	d007      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aa98:	e01c      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa9a:	4bb8      	ldr	r3, [pc, #736]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	4ab7      	ldr	r2, [pc, #732]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aaa6:	e01a      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aaa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaac:	3308      	adds	r3, #8
 800aaae:	2102      	movs	r1, #2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f002 fb61 	bl	800d178 <RCCEx_PLL2_Config>
 800aab6:	4603      	mov	r3, r0
 800aab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aabc:	e00f      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac2:	3328      	adds	r3, #40	; 0x28
 800aac4:	2102      	movs	r1, #2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f002 fc08 	bl	800d2dc <RCCEx_PLL3_Config>
 800aacc:	4603      	mov	r3, r0
 800aace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aad2:	e004      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aada:	e000      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aadc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aae6:	4ba5      	ldr	r3, [pc, #660]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaf4:	4aa1      	ldr	r2, [pc, #644]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaf6:	430b      	orrs	r3, r1
 800aaf8:	6513      	str	r3, [r2, #80]	; 0x50
 800aafa:	e003      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aafc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ab04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ab10:	f04f 0900 	mov.w	r9, #0
 800ab14:	ea58 0309 	orrs.w	r3, r8, r9
 800ab18:	d047      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ab1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d82a      	bhi.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ab24:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ab26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2a:	bf00      	nop
 800ab2c:	0800ab41 	.word	0x0800ab41
 800ab30:	0800ab4f 	.word	0x0800ab4f
 800ab34:	0800ab65 	.word	0x0800ab65
 800ab38:	0800ab83 	.word	0x0800ab83
 800ab3c:	0800ab83 	.word	0x0800ab83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab40:	4b8e      	ldr	r3, [pc, #568]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab44:	4a8d      	ldr	r2, [pc, #564]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab4c:	e01a      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab52:	3308      	adds	r3, #8
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f002 fb0e 	bl	800d178 <RCCEx_PLL2_Config>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab62:	e00f      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab68:	3328      	adds	r3, #40	; 0x28
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f002 fbb5 	bl	800d2dc <RCCEx_PLL3_Config>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab78:	e004      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab80:	e000      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ab82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10a      	bne.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab8c:	4b7b      	ldr	r3, [pc, #492]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab90:	f023 0107 	bic.w	r1, r3, #7
 800ab94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab9a:	4a78      	ldr	r2, [pc, #480]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6513      	str	r3, [r2, #80]	; 0x50
 800aba0:	e003      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800abaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800abb6:	f04f 0b00 	mov.w	fp, #0
 800abba:	ea5a 030b 	orrs.w	r3, sl, fp
 800abbe:	d04c      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800abc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abca:	d030      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800abcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abd0:	d829      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abd2:	2bc0      	cmp	r3, #192	; 0xc0
 800abd4:	d02d      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800abd6:	2bc0      	cmp	r3, #192	; 0xc0
 800abd8:	d825      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abda:	2b80      	cmp	r3, #128	; 0x80
 800abdc:	d018      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800abde:	2b80      	cmp	r3, #128	; 0x80
 800abe0:	d821      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800abe6:	2b40      	cmp	r3, #64	; 0x40
 800abe8:	d007      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800abea:	e01c      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abec:	4b63      	ldr	r3, [pc, #396]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf0:	4a62      	ldr	r2, [pc, #392]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800abf8:	e01c      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfe:	3308      	adds	r3, #8
 800ac00:	2100      	movs	r1, #0
 800ac02:	4618      	mov	r0, r3
 800ac04:	f002 fab8 	bl	800d178 <RCCEx_PLL2_Config>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac0e:	e011      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac14:	3328      	adds	r3, #40	; 0x28
 800ac16:	2100      	movs	r1, #0
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f002 fb5f 	bl	800d2dc <RCCEx_PLL3_Config>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac24:	e006      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac2c:	e002      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac2e:	bf00      	nop
 800ac30:	e000      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ac3c:	4b4f      	ldr	r3, [pc, #316]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac40:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ac44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac4a:	4a4c      	ldr	r2, [pc, #304]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	6513      	str	r3, [r2, #80]	; 0x50
 800ac50:	e003      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ac5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ac66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ac70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ac74:	460b      	mov	r3, r1
 800ac76:	4313      	orrs	r3, r2
 800ac78:	d053      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ac7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac86:	d035      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ac88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac8c:	d82e      	bhi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac92:	d031      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ac94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac98:	d828      	bhi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac9e:	d01a      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800aca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aca4:	d822      	bhi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800acaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acae:	d007      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800acb0:	e01c      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb2:	4b32      	ldr	r3, [pc, #200]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb6:	4a31      	ldr	r2, [pc, #196]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acbe:	e01c      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc4:	3308      	adds	r3, #8
 800acc6:	2100      	movs	r1, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f002 fa55 	bl	800d178 <RCCEx_PLL2_Config>
 800acce:	4603      	mov	r3, r0
 800acd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800acd4:	e011      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acda:	3328      	adds	r3, #40	; 0x28
 800acdc:	2100      	movs	r1, #0
 800acde:	4618      	mov	r0, r3
 800ace0:	f002 fafc 	bl	800d2dc <RCCEx_PLL3_Config>
 800ace4:	4603      	mov	r3, r0
 800ace6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acea:	e006      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acf2:	e002      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800acf4:	bf00      	nop
 800acf6:	e000      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800acf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10b      	bne.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ad02:	4b1e      	ldr	r3, [pc, #120]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad06:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ad0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad12:	4a1a      	ldr	r2, [pc, #104]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad14:	430b      	orrs	r3, r1
 800ad16:	6593      	str	r3, [r2, #88]	; 0x58
 800ad18:	e003      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ad22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ad2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ad32:	2300      	movs	r3, #0
 800ad34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ad38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	d056      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ad42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad4e:	d038      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ad50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad54:	d831      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad5a:	d034      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ad5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad60:	d82b      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad66:	d01d      	beq.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ad68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad6c:	d825      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d006      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ad72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad76:	d00a      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ad78:	e01f      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad7a:	bf00      	nop
 800ad7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad80:	4ba2      	ldr	r3, [pc, #648]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	4aa1      	ldr	r2, [pc, #644]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad8c:	e01c      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad92:	3308      	adds	r3, #8
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f002 f9ee 	bl	800d178 <RCCEx_PLL2_Config>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ada2:	e011      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ada4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada8:	3328      	adds	r3, #40	; 0x28
 800adaa:	2100      	movs	r1, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f002 fa95 	bl	800d2dc <RCCEx_PLL3_Config>
 800adb2:	4603      	mov	r3, r0
 800adb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adb8:	e006      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adc0:	e002      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800adc2:	bf00      	nop
 800adc4:	e000      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800adc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10b      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800add0:	4b8e      	ldr	r3, [pc, #568]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800add2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800add8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800addc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ade0:	4a8a      	ldr	r2, [pc, #552]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ade2:	430b      	orrs	r3, r1
 800ade4:	6593      	str	r3, [r2, #88]	; 0x58
 800ade6:	e003      	b.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800adf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800adfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae00:	2300      	movs	r3, #0
 800ae02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	d03a      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ae10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae16:	2b30      	cmp	r3, #48	; 0x30
 800ae18:	d01f      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ae1a:	2b30      	cmp	r3, #48	; 0x30
 800ae1c:	d819      	bhi.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	d00c      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d815      	bhi.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d019      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ae2a:	2b10      	cmp	r3, #16
 800ae2c:	d111      	bne.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae2e:	4b77      	ldr	r3, [pc, #476]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	4a76      	ldr	r2, [pc, #472]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ae3a:	e011      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae40:	3308      	adds	r3, #8
 800ae42:	2102      	movs	r1, #2
 800ae44:	4618      	mov	r0, r3
 800ae46:	f002 f997 	bl	800d178 <RCCEx_PLL2_Config>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ae50:	e006      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae58:	e002      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ae5a:	bf00      	nop
 800ae5c:	e000      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ae5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10a      	bne.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ae68:	4b68      	ldr	r3, [pc, #416]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ae70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae76:	4a65      	ldr	r2, [pc, #404]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae78:	430b      	orrs	r3, r1
 800ae7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae7c:	e003      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ae92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae96:	2300      	movs	r3, #0
 800ae98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4313      	orrs	r3, r2
 800aea4:	d051      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeb0:	d035      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800aeb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeb6:	d82e      	bhi.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aeb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aebc:	d031      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800aebe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aec2:	d828      	bhi.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aec8:	d01a      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800aeca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aece:	d822      	bhi.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800aed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aed8:	d007      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800aeda:	e01c      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aedc:	4b4b      	ldr	r3, [pc, #300]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a4a      	ldr	r2, [pc, #296]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aee8:	e01c      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aeea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeee:	3308      	adds	r3, #8
 800aef0:	2100      	movs	r1, #0
 800aef2:	4618      	mov	r0, r3
 800aef4:	f002 f940 	bl	800d178 <RCCEx_PLL2_Config>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aefe:	e011      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af04:	3328      	adds	r3, #40	; 0x28
 800af06:	2100      	movs	r1, #0
 800af08:	4618      	mov	r0, r3
 800af0a:	f002 f9e7 	bl	800d2dc <RCCEx_PLL3_Config>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af14:	e006      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af1c:	e002      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800af1e:	bf00      	nop
 800af20:	e000      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800af22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10a      	bne.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af2c:	4b37      	ldr	r3, [pc, #220]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af30:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800af34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af3a:	4a34      	ldr	r2, [pc, #208]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af3c:	430b      	orrs	r3, r1
 800af3e:	6513      	str	r3, [r2, #80]	; 0x50
 800af40:	e003      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800af56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af5a:	2300      	movs	r3, #0
 800af5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800af64:	460b      	mov	r3, r1
 800af66:	4313      	orrs	r3, r2
 800af68:	d056      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800af6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af74:	d033      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800af76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af7a:	d82c      	bhi.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af80:	d02f      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800af82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af86:	d826      	bhi.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af8c:	d02b      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800af8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af92:	d820      	bhi.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af98:	d012      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800af9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af9e:	d81a      	bhi.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d022      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800afa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa8:	d115      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afae:	3308      	adds	r3, #8
 800afb0:	2101      	movs	r1, #1
 800afb2:	4618      	mov	r0, r3
 800afb4:	f002 f8e0 	bl	800d178 <RCCEx_PLL2_Config>
 800afb8:	4603      	mov	r3, r0
 800afba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afbe:	e015      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc4:	3328      	adds	r3, #40	; 0x28
 800afc6:	2101      	movs	r1, #1
 800afc8:	4618      	mov	r0, r3
 800afca:	f002 f987 	bl	800d2dc <RCCEx_PLL3_Config>
 800afce:	4603      	mov	r3, r0
 800afd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afd4:	e00a      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afdc:	e006      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800afde:	bf00      	nop
 800afe0:	e004      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800afe2:	bf00      	nop
 800afe4:	e002      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800afe6:	bf00      	nop
 800afe8:	e000      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800afea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10d      	bne.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aff4:	4b05      	ldr	r3, [pc, #20]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800affc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b002:	4a02      	ldr	r2, [pc, #8]	; (800b00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b004:	430b      	orrs	r3, r1
 800b006:	6513      	str	r3, [r2, #80]	; 0x50
 800b008:	e006      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b00a:	bf00      	nop
 800b00c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b028:	2300      	movs	r3, #0
 800b02a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b02e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b032:	460b      	mov	r3, r1
 800b034:	4313      	orrs	r3, r2
 800b036:	d055      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b044:	d033      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b04a:	d82c      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b04c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b050:	d02f      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b056:	d826      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b058:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b05c:	d02b      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b05e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b062:	d820      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b068:	d012      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b06a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b06e:	d81a      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b070:	2b00      	cmp	r3, #0
 800b072:	d022      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b078:	d115      	bne.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07e:	3308      	adds	r3, #8
 800b080:	2101      	movs	r1, #1
 800b082:	4618      	mov	r0, r3
 800b084:	f002 f878 	bl	800d178 <RCCEx_PLL2_Config>
 800b088:	4603      	mov	r3, r0
 800b08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b08e:	e015      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b094:	3328      	adds	r3, #40	; 0x28
 800b096:	2101      	movs	r1, #1
 800b098:	4618      	mov	r0, r3
 800b09a:	f002 f91f 	bl	800d2dc <RCCEx_PLL3_Config>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0a4:	e00a      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0ac:	e006      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0ae:	bf00      	nop
 800b0b0:	e004      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0b2:	bf00      	nop
 800b0b4:	e002      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0b6:	bf00      	nop
 800b0b8:	e000      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10b      	bne.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0c4:	4ba3      	ldr	r3, [pc, #652]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0d4:	4a9f      	ldr	r2, [pc, #636]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	6593      	str	r3, [r2, #88]	; 0x58
 800b0da:	e003      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b0f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b0fe:	460b      	mov	r3, r1
 800b100:	4313      	orrs	r3, r2
 800b102:	d037      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b10a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b10e:	d00e      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b114:	d816      	bhi.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b116:	2b00      	cmp	r3, #0
 800b118:	d018      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b11a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b11e:	d111      	bne.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b120:	4b8c      	ldr	r3, [pc, #560]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	4a8b      	ldr	r2, [pc, #556]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b12a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b12c:	e00f      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b132:	3308      	adds	r3, #8
 800b134:	2101      	movs	r1, #1
 800b136:	4618      	mov	r0, r3
 800b138:	f002 f81e 	bl	800d178 <RCCEx_PLL2_Config>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b142:	e004      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b14a:	e000      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b14e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10a      	bne.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b156:	4b7f      	ldr	r3, [pc, #508]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b15a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b164:	4a7b      	ldr	r2, [pc, #492]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b166:	430b      	orrs	r3, r1
 800b168:	6513      	str	r3, [r2, #80]	; 0x50
 800b16a:	e003      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b184:	2300      	movs	r3, #0
 800b186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b18a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b18e:	460b      	mov	r3, r1
 800b190:	4313      	orrs	r3, r2
 800b192:	d039      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d81c      	bhi.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b19e:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a4:	0800b1e1 	.word	0x0800b1e1
 800b1a8:	0800b1b5 	.word	0x0800b1b5
 800b1ac:	0800b1c3 	.word	0x0800b1c3
 800b1b0:	0800b1e1 	.word	0x0800b1e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1b4:	4b67      	ldr	r3, [pc, #412]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b8:	4a66      	ldr	r2, [pc, #408]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1c0:	e00f      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c6:	3308      	adds	r3, #8
 800b1c8:	2102      	movs	r1, #2
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f001 ffd4 	bl	800d178 <RCCEx_PLL2_Config>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1d6:	e004      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1de:	e000      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b1e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10a      	bne.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b1ea:	4b5a      	ldr	r3, [pc, #360]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ee:	f023 0103 	bic.w	r1, r3, #3
 800b1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1f8:	4a56      	ldr	r2, [pc, #344]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1fa:	430b      	orrs	r3, r1
 800b1fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1fe:	e003      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b218:	2300      	movs	r3, #0
 800b21a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b21e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b222:	460b      	mov	r3, r1
 800b224:	4313      	orrs	r3, r2
 800b226:	f000 809f 	beq.w	800b368 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b22a:	4b4b      	ldr	r3, [pc, #300]	; (800b358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a4a      	ldr	r2, [pc, #296]	; (800b358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b234:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b236:	f7f8 fc41 	bl	8003abc <HAL_GetTick>
 800b23a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b23e:	e00b      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b240:	f7f8 fc3c 	bl	8003abc <HAL_GetTick>
 800b244:	4602      	mov	r2, r0
 800b246:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	2b64      	cmp	r3, #100	; 0x64
 800b24e:	d903      	bls.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b256:	e005      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b258:	4b3f      	ldr	r3, [pc, #252]	; (800b358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b260:	2b00      	cmp	r3, #0
 800b262:	d0ed      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d179      	bne.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b26c:	4b39      	ldr	r3, [pc, #228]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b26e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b274:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b278:	4053      	eors	r3, r2
 800b27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d015      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b282:	4b34      	ldr	r3, [pc, #208]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b28a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b28e:	4b31      	ldr	r3, [pc, #196]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	4a30      	ldr	r2, [pc, #192]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b298:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b29a:	4b2e      	ldr	r3, [pc, #184]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29e:	4a2d      	ldr	r2, [pc, #180]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b2a6:	4a2b      	ldr	r2, [pc, #172]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b2ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ba:	d118      	bne.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2bc:	f7f8 fbfe 	bl	8003abc <HAL_GetTick>
 800b2c0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2c4:	e00d      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2c6:	f7f8 fbf9 	bl	8003abc <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b2d0:	1ad2      	subs	r2, r2, r3
 800b2d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d903      	bls.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b2e0:	e005      	b.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2e2:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e6:	f003 0302 	and.w	r3, r3, #2
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0eb      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d129      	bne.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b306:	d10e      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b308:	4b12      	ldr	r3, [pc, #72]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b318:	091a      	lsrs	r2, r3, #4
 800b31a:	4b10      	ldr	r3, [pc, #64]	; (800b35c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b31c:	4013      	ands	r3, r2
 800b31e:	4a0d      	ldr	r2, [pc, #52]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b320:	430b      	orrs	r3, r1
 800b322:	6113      	str	r3, [r2, #16]
 800b324:	e005      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b326:	4b0b      	ldr	r3, [pc, #44]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	4a0a      	ldr	r2, [pc, #40]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b32c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b330:	6113      	str	r3, [r2, #16]
 800b332:	4b08      	ldr	r3, [pc, #32]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b334:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b33e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b342:	4a04      	ldr	r2, [pc, #16]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b344:	430b      	orrs	r3, r1
 800b346:	6713      	str	r3, [r2, #112]	; 0x70
 800b348:	e00e      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b34e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b352:	e009      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b354:	58024400 	.word	0x58024400
 800b358:	58024800 	.word	0x58024800
 800b35c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b364:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f002 0301 	and.w	r3, r2, #1
 800b374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b378:	2300      	movs	r3, #0
 800b37a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b37e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b382:	460b      	mov	r3, r1
 800b384:	4313      	orrs	r3, r2
 800b386:	f000 8089 	beq.w	800b49c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b390:	2b28      	cmp	r3, #40	; 0x28
 800b392:	d86b      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b394:	a201      	add	r2, pc, #4	; (adr r2, 800b39c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39a:	bf00      	nop
 800b39c:	0800b475 	.word	0x0800b475
 800b3a0:	0800b46d 	.word	0x0800b46d
 800b3a4:	0800b46d 	.word	0x0800b46d
 800b3a8:	0800b46d 	.word	0x0800b46d
 800b3ac:	0800b46d 	.word	0x0800b46d
 800b3b0:	0800b46d 	.word	0x0800b46d
 800b3b4:	0800b46d 	.word	0x0800b46d
 800b3b8:	0800b46d 	.word	0x0800b46d
 800b3bc:	0800b441 	.word	0x0800b441
 800b3c0:	0800b46d 	.word	0x0800b46d
 800b3c4:	0800b46d 	.word	0x0800b46d
 800b3c8:	0800b46d 	.word	0x0800b46d
 800b3cc:	0800b46d 	.word	0x0800b46d
 800b3d0:	0800b46d 	.word	0x0800b46d
 800b3d4:	0800b46d 	.word	0x0800b46d
 800b3d8:	0800b46d 	.word	0x0800b46d
 800b3dc:	0800b457 	.word	0x0800b457
 800b3e0:	0800b46d 	.word	0x0800b46d
 800b3e4:	0800b46d 	.word	0x0800b46d
 800b3e8:	0800b46d 	.word	0x0800b46d
 800b3ec:	0800b46d 	.word	0x0800b46d
 800b3f0:	0800b46d 	.word	0x0800b46d
 800b3f4:	0800b46d 	.word	0x0800b46d
 800b3f8:	0800b46d 	.word	0x0800b46d
 800b3fc:	0800b475 	.word	0x0800b475
 800b400:	0800b46d 	.word	0x0800b46d
 800b404:	0800b46d 	.word	0x0800b46d
 800b408:	0800b46d 	.word	0x0800b46d
 800b40c:	0800b46d 	.word	0x0800b46d
 800b410:	0800b46d 	.word	0x0800b46d
 800b414:	0800b46d 	.word	0x0800b46d
 800b418:	0800b46d 	.word	0x0800b46d
 800b41c:	0800b475 	.word	0x0800b475
 800b420:	0800b46d 	.word	0x0800b46d
 800b424:	0800b46d 	.word	0x0800b46d
 800b428:	0800b46d 	.word	0x0800b46d
 800b42c:	0800b46d 	.word	0x0800b46d
 800b430:	0800b46d 	.word	0x0800b46d
 800b434:	0800b46d 	.word	0x0800b46d
 800b438:	0800b46d 	.word	0x0800b46d
 800b43c:	0800b475 	.word	0x0800b475
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b444:	3308      	adds	r3, #8
 800b446:	2101      	movs	r1, #1
 800b448:	4618      	mov	r0, r3
 800b44a:	f001 fe95 	bl	800d178 <RCCEx_PLL2_Config>
 800b44e:	4603      	mov	r3, r0
 800b450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b454:	e00f      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b45a:	3328      	adds	r3, #40	; 0x28
 800b45c:	2101      	movs	r1, #1
 800b45e:	4618      	mov	r0, r3
 800b460:	f001 ff3c 	bl	800d2dc <RCCEx_PLL3_Config>
 800b464:	4603      	mov	r3, r0
 800b466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b46a:	e004      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b472:	e000      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10a      	bne.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b47e:	4bbf      	ldr	r3, [pc, #764]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b482:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48c:	4abb      	ldr	r2, [pc, #748]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b48e:	430b      	orrs	r3, r1
 800b490:	6553      	str	r3, [r2, #84]	; 0x54
 800b492:	e003      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f002 0302 	and.w	r3, r2, #2
 800b4a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	d041      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4c2:	2b05      	cmp	r3, #5
 800b4c4:	d824      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b4c6:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b519 	.word	0x0800b519
 800b4d0:	0800b4e5 	.word	0x0800b4e5
 800b4d4:	0800b4fb 	.word	0x0800b4fb
 800b4d8:	0800b519 	.word	0x0800b519
 800b4dc:	0800b519 	.word	0x0800b519
 800b4e0:	0800b519 	.word	0x0800b519
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f001 fe43 	bl	800d178 <RCCEx_PLL2_Config>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b4f8:	e00f      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fe:	3328      	adds	r3, #40	; 0x28
 800b500:	2101      	movs	r1, #1
 800b502:	4618      	mov	r0, r3
 800b504:	f001 feea 	bl	800d2dc <RCCEx_PLL3_Config>
 800b508:	4603      	mov	r3, r0
 800b50a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b50e:	e004      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b516:	e000      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b51a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b522:	4b96      	ldr	r3, [pc, #600]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b526:	f023 0107 	bic.w	r1, r3, #7
 800b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b530:	4a92      	ldr	r2, [pc, #584]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b532:	430b      	orrs	r3, r1
 800b534:	6553      	str	r3, [r2, #84]	; 0x54
 800b536:	e003      	b.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b53c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	f002 0304 	and.w	r3, r2, #4
 800b54c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b550:	2300      	movs	r3, #0
 800b552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b556:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4313      	orrs	r3, r2
 800b55e:	d044      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b568:	2b05      	cmp	r3, #5
 800b56a:	d825      	bhi.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b56c:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b572:	bf00      	nop
 800b574:	0800b5c1 	.word	0x0800b5c1
 800b578:	0800b58d 	.word	0x0800b58d
 800b57c:	0800b5a3 	.word	0x0800b5a3
 800b580:	0800b5c1 	.word	0x0800b5c1
 800b584:	0800b5c1 	.word	0x0800b5c1
 800b588:	0800b5c1 	.word	0x0800b5c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b590:	3308      	adds	r3, #8
 800b592:	2101      	movs	r1, #1
 800b594:	4618      	mov	r0, r3
 800b596:	f001 fdef 	bl	800d178 <RCCEx_PLL2_Config>
 800b59a:	4603      	mov	r3, r0
 800b59c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5a0:	e00f      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a6:	3328      	adds	r3, #40	; 0x28
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f001 fe96 	bl	800d2dc <RCCEx_PLL3_Config>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5b6:	e004      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5be:	e000      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b5c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10b      	bne.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5ca:	4b6c      	ldr	r3, [pc, #432]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ce:	f023 0107 	bic.w	r1, r3, #7
 800b5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5da:	4a68      	ldr	r2, [pc, #416]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5dc:	430b      	orrs	r3, r1
 800b5de:	6593      	str	r3, [r2, #88]	; 0x58
 800b5e0:	e003      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f002 0320 	and.w	r3, r2, #32
 800b5f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b604:	460b      	mov	r3, r1
 800b606:	4313      	orrs	r3, r2
 800b608:	d055      	beq.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b616:	d033      	beq.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b61c:	d82c      	bhi.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b61e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b622:	d02f      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b628:	d826      	bhi.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b62a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b62e:	d02b      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b630:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b634:	d820      	bhi.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b63a:	d012      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b63c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b640:	d81a      	bhi.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b642:	2b00      	cmp	r3, #0
 800b644:	d022      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b64a:	d115      	bne.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b650:	3308      	adds	r3, #8
 800b652:	2100      	movs	r1, #0
 800b654:	4618      	mov	r0, r3
 800b656:	f001 fd8f 	bl	800d178 <RCCEx_PLL2_Config>
 800b65a:	4603      	mov	r3, r0
 800b65c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b660:	e015      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b666:	3328      	adds	r3, #40	; 0x28
 800b668:	2102      	movs	r1, #2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f001 fe36 	bl	800d2dc <RCCEx_PLL3_Config>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b676:	e00a      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b67e:	e006      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b680:	bf00      	nop
 800b682:	e004      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b684:	bf00      	nop
 800b686:	e002      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b688:	bf00      	nop
 800b68a:	e000      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b68c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b68e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10b      	bne.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b696:	4b39      	ldr	r3, [pc, #228]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6a6:	4a35      	ldr	r2, [pc, #212]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6a8:	430b      	orrs	r3, r1
 800b6aa:	6553      	str	r3, [r2, #84]	; 0x54
 800b6ac:	e003      	b.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b6c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b6cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	d058      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6e2:	d033      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b6e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6e8:	d82c      	bhi.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b6ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ee:	d02f      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b6f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f4:	d826      	bhi.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b6f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6fa:	d02b      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b6fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b700:	d820      	bhi.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b706:	d012      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70c:	d81a      	bhi.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d022      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b716:	d115      	bne.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b71c:	3308      	adds	r3, #8
 800b71e:	2100      	movs	r1, #0
 800b720:	4618      	mov	r0, r3
 800b722:	f001 fd29 	bl	800d178 <RCCEx_PLL2_Config>
 800b726:	4603      	mov	r3, r0
 800b728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b72c:	e015      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b732:	3328      	adds	r3, #40	; 0x28
 800b734:	2102      	movs	r1, #2
 800b736:	4618      	mov	r0, r3
 800b738:	f001 fdd0 	bl	800d2dc <RCCEx_PLL3_Config>
 800b73c:	4603      	mov	r3, r0
 800b73e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b742:	e00a      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b74a:	e006      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b74c:	bf00      	nop
 800b74e:	e004      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b750:	bf00      	nop
 800b752:	e002      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b754:	bf00      	nop
 800b756:	e000      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b75a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10e      	bne.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b762:	4b06      	ldr	r3, [pc, #24]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b766:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b76e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b772:	4a02      	ldr	r2, [pc, #8]	; (800b77c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b774:	430b      	orrs	r3, r1
 800b776:	6593      	str	r3, [r2, #88]	; 0x58
 800b778:	e006      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b77a:	bf00      	nop
 800b77c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b780:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b784:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b798:	2300      	movs	r3, #0
 800b79a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b79e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	d055      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7b4:	d033      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b7b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7ba:	d82c      	bhi.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7c0:	d02f      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b7c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7c6:	d826      	bhi.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7cc:	d02b      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b7ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7d2:	d820      	bhi.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7d8:	d012      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b7da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7de:	d81a      	bhi.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d022      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b7e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7e8:	d115      	bne.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ee:	3308      	adds	r3, #8
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f001 fcc0 	bl	800d178 <RCCEx_PLL2_Config>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b7fe:	e015      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b804:	3328      	adds	r3, #40	; 0x28
 800b806:	2102      	movs	r1, #2
 800b808:	4618      	mov	r0, r3
 800b80a:	f001 fd67 	bl	800d2dc <RCCEx_PLL3_Config>
 800b80e:	4603      	mov	r3, r0
 800b810:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b814:	e00a      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b81c:	e006      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b81e:	bf00      	nop
 800b820:	e004      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b822:	bf00      	nop
 800b824:	e002      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b826:	bf00      	nop
 800b828:	e000      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b82a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b82c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10b      	bne.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b834:	4ba1      	ldr	r3, [pc, #644]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b838:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b844:	4a9d      	ldr	r2, [pc, #628]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b846:	430b      	orrs	r3, r1
 800b848:	6593      	str	r3, [r2, #88]	; 0x58
 800b84a:	e003      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b84c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b850:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	f002 0308 	and.w	r3, r2, #8
 800b860:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b864:	2300      	movs	r3, #0
 800b866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b86a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b86e:	460b      	mov	r3, r1
 800b870:	4313      	orrs	r3, r2
 800b872:	d01e      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b87c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b880:	d10c      	bne.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b886:	3328      	adds	r3, #40	; 0x28
 800b888:	2102      	movs	r1, #2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f001 fd26 	bl	800d2dc <RCCEx_PLL3_Config>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d002      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b89c:	4b87      	ldr	r3, [pc, #540]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8ac:	4a83      	ldr	r2, [pc, #524]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8ae:	430b      	orrs	r3, r1
 800b8b0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	f002 0310 	and.w	r3, r2, #16
 800b8be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b8c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	d01e      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8de:	d10c      	bne.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e4:	3328      	adds	r3, #40	; 0x28
 800b8e6:	2102      	movs	r1, #2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 fcf7 	bl	800d2dc <RCCEx_PLL3_Config>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8fa:	4b70      	ldr	r3, [pc, #448]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b90a:	4a6c      	ldr	r2, [pc, #432]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b90c:	430b      	orrs	r3, r1
 800b90e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b91c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b920:	2300      	movs	r3, #0
 800b922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b926:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b92a:	460b      	mov	r3, r1
 800b92c:	4313      	orrs	r3, r2
 800b92e:	d03e      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b93c:	d022      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b93e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b942:	d81b      	bhi.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b94c:	d00b      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b94e:	e015      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b954:	3308      	adds	r3, #8
 800b956:	2100      	movs	r1, #0
 800b958:	4618      	mov	r0, r3
 800b95a:	f001 fc0d 	bl	800d178 <RCCEx_PLL2_Config>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b964:	e00f      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96a:	3328      	adds	r3, #40	; 0x28
 800b96c:	2102      	movs	r1, #2
 800b96e:	4618      	mov	r0, r3
 800b970:	f001 fcb4 	bl	800d2dc <RCCEx_PLL3_Config>
 800b974:	4603      	mov	r3, r0
 800b976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b97a:	e004      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b982:	e000      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b984:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10b      	bne.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b98e:	4b4b      	ldr	r3, [pc, #300]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b992:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b99e:	4a47      	ldr	r2, [pc, #284]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b9a4:	e003      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b9ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9bc:	2300      	movs	r3, #0
 800b9be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	d03b      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9d6:	d01f      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b9d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9dc:	d818      	bhi.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b9de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9e2:	d003      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b9e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9e8:	d007      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b9ea:	e011      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ec:	4b33      	ldr	r3, [pc, #204]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f0:	4a32      	ldr	r2, [pc, #200]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b9f8:	e00f      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fe:	3328      	adds	r3, #40	; 0x28
 800ba00:	2101      	movs	r1, #1
 800ba02:	4618      	mov	r0, r3
 800ba04:	f001 fc6a 	bl	800d2dc <RCCEx_PLL3_Config>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba0e:	e004      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba16:	e000      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ba18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10b      	bne.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba22:	4b26      	ldr	r3, [pc, #152]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ba2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba32:	4a22      	ldr	r2, [pc, #136]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba34:	430b      	orrs	r3, r1
 800ba36:	6553      	str	r3, [r2, #84]	; 0x54
 800ba38:	e003      	b.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ba42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ba4e:	673b      	str	r3, [r7, #112]	; 0x70
 800ba50:	2300      	movs	r3, #0
 800ba52:	677b      	str	r3, [r7, #116]	; 0x74
 800ba54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	d034      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ba5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ba68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba6c:	d007      	beq.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ba6e:	e011      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba70:	4b12      	ldr	r3, [pc, #72]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba7c:	e00e      	b.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba82:	3308      	adds	r3, #8
 800ba84:	2102      	movs	r1, #2
 800ba86:	4618      	mov	r0, r3
 800ba88:	f001 fb76 	bl	800d178 <RCCEx_PLL2_Config>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba92:	e003      	b.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10d      	bne.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800baa4:	4b05      	ldr	r3, [pc, #20]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800baa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800baac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab2:	4a02      	ldr	r2, [pc, #8]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bab4:	430b      	orrs	r3, r1
 800bab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bab8:	e006      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800baba:	bf00      	nop
 800babc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bad4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bad6:	2300      	movs	r3, #0
 800bad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bada:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bade:	460b      	mov	r3, r1
 800bae0:	4313      	orrs	r3, r2
 800bae2:	d00c      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae8:	3328      	adds	r3, #40	; 0x28
 800baea:	2102      	movs	r1, #2
 800baec:	4618      	mov	r0, r3
 800baee:	f001 fbf5 	bl	800d2dc <RCCEx_PLL3_Config>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bb0a:	663b      	str	r3, [r7, #96]	; 0x60
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	667b      	str	r3, [r7, #100]	; 0x64
 800bb10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bb14:	460b      	mov	r3, r1
 800bb16:	4313      	orrs	r3, r2
 800bb18:	d038      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bb1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb26:	d018      	beq.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bb28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb2c:	d811      	bhi.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb32:	d014      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bb34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb38:	d80b      	bhi.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d011      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bb3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb42:	d106      	bne.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb44:	4bc3      	ldr	r3, [pc, #780]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	4ac2      	ldr	r2, [pc, #776]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bb50:	e008      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb58:	e004      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb5a:	bf00      	nop
 800bb5c:	e002      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb5e:	bf00      	nop
 800bb60:	e000      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10b      	bne.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb6c:	4bb9      	ldr	r3, [pc, #740]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb7c:	4ab5      	ldr	r2, [pc, #724]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb7e:	430b      	orrs	r3, r1
 800bb80:	6553      	str	r3, [r2, #84]	; 0x54
 800bb82:	e003      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bb98:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bba2:	460b      	mov	r3, r1
 800bba4:	4313      	orrs	r3, r2
 800bba6:	d009      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bba8:	4baa      	ldr	r3, [pc, #680]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbb6:	4aa7      	ldr	r2, [pc, #668]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bbbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bbc8:	653b      	str	r3, [r7, #80]	; 0x50
 800bbca:	2300      	movs	r3, #0
 800bbcc:	657b      	str	r3, [r7, #84]	; 0x54
 800bbce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	d00a      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bbd8:	4b9e      	ldr	r3, [pc, #632]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bbe8:	4a9a      	ldr	r2, [pc, #616]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbea:	430b      	orrs	r3, r1
 800bbec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bbfa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bc04:	460b      	mov	r3, r1
 800bc06:	4313      	orrs	r3, r2
 800bc08:	d009      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc0a:	4b92      	ldr	r3, [pc, #584]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc0e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc18:	4a8e      	ldr	r2, [pc, #568]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bc2a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bc34:	460b      	mov	r3, r1
 800bc36:	4313      	orrs	r3, r2
 800bc38:	d00e      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc3a:	4b86      	ldr	r3, [pc, #536]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	4a85      	ldr	r2, [pc, #532]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc44:	6113      	str	r3, [r2, #16]
 800bc46:	4b83      	ldr	r3, [pc, #524]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc48:	6919      	ldr	r1, [r3, #16]
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bc52:	4a80      	ldr	r2, [pc, #512]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc54:	430b      	orrs	r3, r1
 800bc56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bc64:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc66:	2300      	movs	r3, #0
 800bc68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4313      	orrs	r3, r2
 800bc72:	d009      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc74:	4b77      	ldr	r3, [pc, #476]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc78:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc82:	4a74      	ldr	r2, [pc, #464]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc84:	430b      	orrs	r3, r1
 800bc86:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bc94:	633b      	str	r3, [r7, #48]	; 0x30
 800bc96:	2300      	movs	r3, #0
 800bc98:	637b      	str	r3, [r7, #52]	; 0x34
 800bc9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4313      	orrs	r3, r2
 800bca2:	d00a      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bca4:	4b6b      	ldr	r3, [pc, #428]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcb4:	4a67      	ldr	r2, [pc, #412]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	62b9      	str	r1, [r7, #40]	; 0x28
 800bcc6:	f003 0301 	and.w	r3, r3, #1
 800bcca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bccc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	d011      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcda:	3308      	adds	r3, #8
 800bcdc:	2100      	movs	r1, #0
 800bcde:	4618      	mov	r0, r3
 800bce0:	f001 fa4a 	bl	800d178 <RCCEx_PLL2_Config>
 800bce4:	4603      	mov	r3, r0
 800bce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bcea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	2100      	movs	r1, #0
 800bd04:	6239      	str	r1, [r7, #32]
 800bd06:	f003 0302 	and.w	r3, r3, #2
 800bd0a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bd10:	460b      	mov	r3, r1
 800bd12:	4313      	orrs	r3, r2
 800bd14:	d011      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	3308      	adds	r3, #8
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f001 fa2a 	bl	800d178 <RCCEx_PLL2_Config>
 800bd24:	4603      	mov	r3, r0
 800bd26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	2100      	movs	r1, #0
 800bd44:	61b9      	str	r1, [r7, #24]
 800bd46:	f003 0304 	and.w	r3, r3, #4
 800bd4a:	61fb      	str	r3, [r7, #28]
 800bd4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd50:	460b      	mov	r3, r1
 800bd52:	4313      	orrs	r3, r2
 800bd54:	d011      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd5a:	3308      	adds	r3, #8
 800bd5c:	2102      	movs	r1, #2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f001 fa0a 	bl	800d178 <RCCEx_PLL2_Config>
 800bd64:	4603      	mov	r3, r0
 800bd66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bd7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	2100      	movs	r1, #0
 800bd84:	6139      	str	r1, [r7, #16]
 800bd86:	f003 0308 	and.w	r3, r3, #8
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bd90:	460b      	mov	r3, r1
 800bd92:	4313      	orrs	r3, r2
 800bd94:	d011      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9a:	3328      	adds	r3, #40	; 0x28
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 fa9c 	bl	800d2dc <RCCEx_PLL3_Config>
 800bda4:	4603      	mov	r3, r0
 800bda6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bdaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bdba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	f003 0310 	and.w	r3, r3, #16
 800bdca:	60fb      	str	r3, [r7, #12]
 800bdcc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	d011      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdda:	3328      	adds	r3, #40	; 0x28
 800bddc:	2101      	movs	r1, #1
 800bdde:	4618      	mov	r0, r3
 800bde0:	f001 fa7c 	bl	800d2dc <RCCEx_PLL3_Config>
 800bde4:	4603      	mov	r3, r0
 800bde6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bdea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bdfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	2100      	movs	r1, #0
 800be04:	6039      	str	r1, [r7, #0]
 800be06:	f003 0320 	and.w	r3, r3, #32
 800be0a:	607b      	str	r3, [r7, #4]
 800be0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be10:	460b      	mov	r3, r1
 800be12:	4313      	orrs	r3, r2
 800be14:	d011      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be1a:	3328      	adds	r3, #40	; 0x28
 800be1c:	2102      	movs	r1, #2
 800be1e:	4618      	mov	r0, r3
 800be20:	f001 fa5c 	bl	800d2dc <RCCEx_PLL3_Config>
 800be24:	4603      	mov	r3, r0
 800be26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800be3a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d101      	bne.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	e000      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
}
 800be48:	4618      	mov	r0, r3
 800be4a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800be4e:	46bd      	mov	sp, r7
 800be50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be54:	58024400 	.word	0x58024400

0800be58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b090      	sub	sp, #64	; 0x40
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be66:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800be6a:	430b      	orrs	r3, r1
 800be6c:	f040 8094 	bne.w	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800be70:	4b9e      	ldr	r3, [pc, #632]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be74:	f003 0307 	and.w	r3, r3, #7
 800be78:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	f200 8087 	bhi.w	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800be82:	a201      	add	r2, pc, #4	; (adr r2, 800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800be84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be88:	0800be9d 	.word	0x0800be9d
 800be8c:	0800bec5 	.word	0x0800bec5
 800be90:	0800beed 	.word	0x0800beed
 800be94:	0800bf89 	.word	0x0800bf89
 800be98:	0800bf15 	.word	0x0800bf15
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be9c:	4b93      	ldr	r3, [pc, #588]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bea8:	d108      	bne.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800beaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beae:	4618      	mov	r0, r3
 800beb0:	f001 f810 	bl	800ced4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb8:	f000 bd45 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec0:	f000 bd41 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bec4:	4b89      	ldr	r3, [pc, #548]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800becc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bed0:	d108      	bne.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bed2:	f107 0318 	add.w	r3, r7, #24
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 fd54 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bee0:	f000 bd31 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee8:	f000 bd2d 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beec:	4b7f      	ldr	r3, [pc, #508]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bef8:	d108      	bne.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800befa:	f107 030c 	add.w	r3, r7, #12
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fe94 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf08:	f000 bd1d 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf10:	f000 bd19 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf14:	4b75      	ldr	r3, [pc, #468]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf1e:	4b73      	ldr	r3, [pc, #460]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 0304 	and.w	r3, r3, #4
 800bf26:	2b04      	cmp	r3, #4
 800bf28:	d10c      	bne.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bf2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d109      	bne.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf30:	4b6e      	ldr	r3, [pc, #440]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	08db      	lsrs	r3, r3, #3
 800bf36:	f003 0303 	and.w	r3, r3, #3
 800bf3a:	4a6d      	ldr	r2, [pc, #436]	; (800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf3c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf42:	e01f      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf44:	4b69      	ldr	r3, [pc, #420]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf50:	d106      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf58:	d102      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf5a:	4b66      	ldr	r3, [pc, #408]	; (800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf5e:	e011      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf60:	4b62      	ldr	r3, [pc, #392]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf6c:	d106      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf74:	d102      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf76:	4b60      	ldr	r3, [pc, #384]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf7a:	e003      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf80:	f000 bce1 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf84:	f000 bcdf 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf88:	4b5c      	ldr	r3, [pc, #368]	; (800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf8c:	f000 bcdb 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf94:	f000 bcd7 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bf98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf9c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bfa0:	430b      	orrs	r3, r1
 800bfa2:	f040 80ad 	bne.w	800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bfa6:	4b51      	ldr	r3, [pc, #324]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfaa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bfae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfb6:	d056      	beq.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfbe:	f200 8090 	bhi.w	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc4:	2bc0      	cmp	r3, #192	; 0xc0
 800bfc6:	f000 8088 	beq.w	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	2bc0      	cmp	r3, #192	; 0xc0
 800bfce:	f200 8088 	bhi.w	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	2b80      	cmp	r3, #128	; 0x80
 800bfd6:	d032      	beq.n	800c03e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfda:	2b80      	cmp	r3, #128	; 0x80
 800bfdc:	f200 8081 	bhi.w	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	2b40      	cmp	r3, #64	; 0x40
 800bfea:	d014      	beq.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bfec:	e079      	b.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfee:	4b3f      	ldr	r3, [pc, #252]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bffa:	d108      	bne.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c000:	4618      	mov	r0, r3
 800c002:	f000 ff67 	bl	800ced4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c00a:	f000 bc9c 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c012:	f000 bc98 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c016:	4b35      	ldr	r3, [pc, #212]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c01e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c022:	d108      	bne.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c024:	f107 0318 	add.w	r3, r7, #24
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 fcab 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c032:	f000 bc88 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c03a:	f000 bc84 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c03e:	4b2b      	ldr	r3, [pc, #172]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c04a:	d108      	bne.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c04c:	f107 030c 	add.w	r3, r7, #12
 800c050:	4618      	mov	r0, r3
 800c052:	f000 fdeb 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c05a:	f000 bc74 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c062:	f000 bc70 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c066:	4b21      	ldr	r3, [pc, #132]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c06a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c06e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c070:	4b1e      	ldr	r3, [pc, #120]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b04      	cmp	r3, #4
 800c07a:	d10c      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d109      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c082:	4b1a      	ldr	r3, [pc, #104]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	08db      	lsrs	r3, r3, #3
 800c088:	f003 0303 	and.w	r3, r3, #3
 800c08c:	4a18      	ldr	r2, [pc, #96]	; (800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c08e:	fa22 f303 	lsr.w	r3, r2, r3
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c094:	e01f      	b.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c096:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0a2:	d106      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0aa:	d102      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0ac:	4b11      	ldr	r3, [pc, #68]	; (800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b0:	e011      	b.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0b2:	4b0e      	ldr	r3, [pc, #56]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0be:	d106      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c6:	d102      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0c8:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0cc:	e003      	b.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0d2:	f000 bc38 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0d6:	f000 bc36 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0da:	4b08      	ldr	r3, [pc, #32]	; (800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0de:	f000 bc32 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e6:	f000 bc2e 	b.w	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0ea:	bf00      	nop
 800c0ec:	58024400 	.word	0x58024400
 800c0f0:	03d09000 	.word	0x03d09000
 800c0f4:	003d0900 	.word	0x003d0900
 800c0f8:	017d7840 	.word	0x017d7840
 800c0fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c100:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c104:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c108:	430b      	orrs	r3, r1
 800c10a:	f040 809c 	bne.w	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c10e:	4b9e      	ldr	r3, [pc, #632]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c112:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c116:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c11e:	d054      	beq.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c126:	f200 808b 	bhi.w	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c130:	f000 8083 	beq.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c13a:	f200 8081 	bhi.w	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c144:	d02f      	beq.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c14c:	d878      	bhi.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c150:	2b00      	cmp	r3, #0
 800c152:	d004      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c15a:	d012      	beq.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c15c:	e070      	b.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c15e:	4b8a      	ldr	r3, [pc, #552]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c16a:	d107      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c16c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c170:	4618      	mov	r0, r3
 800c172:	f000 feaf 	bl	800ced4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17a:	e3e4      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c180:	e3e1      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c182:	4b81      	ldr	r3, [pc, #516]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c18a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c18e:	d107      	bne.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c190:	f107 0318 	add.w	r3, r7, #24
 800c194:	4618      	mov	r0, r3
 800c196:	f000 fbf5 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c19e:	e3d2      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a4:	e3cf      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1a6:	4b78      	ldr	r3, [pc, #480]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1b2:	d107      	bne.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1b4:	f107 030c 	add.w	r3, r7, #12
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 fd37 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1c2:	e3c0      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c8:	e3bd      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1ca:	4b6f      	ldr	r3, [pc, #444]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1d4:	4b6c      	ldr	r3, [pc, #432]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 0304 	and.w	r3, r3, #4
 800c1dc:	2b04      	cmp	r3, #4
 800c1de:	d10c      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d109      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1e6:	4b68      	ldr	r3, [pc, #416]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	08db      	lsrs	r3, r3, #3
 800c1ec:	f003 0303 	and.w	r3, r3, #3
 800c1f0:	4a66      	ldr	r2, [pc, #408]	; (800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f8:	e01e      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1fa:	4b63      	ldr	r3, [pc, #396]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c206:	d106      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c20e:	d102      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c210:	4b5f      	ldr	r3, [pc, #380]	; (800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c214:	e010      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c216:	4b5c      	ldr	r3, [pc, #368]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c21e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c222:	d106      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c22a:	d102      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c22c:	4b59      	ldr	r3, [pc, #356]	; (800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c230:	e002      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c236:	e386      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c238:	e385      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c23a:	4b57      	ldr	r3, [pc, #348]	; (800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23e:	e382      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c244:	e37f      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c24a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c24e:	430b      	orrs	r3, r1
 800c250:	f040 80a7 	bne.w	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c254:	4b4c      	ldr	r3, [pc, #304]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c258:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c25c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c264:	d055      	beq.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c26c:	f200 8096 	bhi.w	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c276:	f000 8084 	beq.w	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c280:	f200 808c 	bhi.w	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c28a:	d030      	beq.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c292:	f200 8083 	bhi.w	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d004      	beq.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2a2:	d012      	beq.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c2a4:	e07a      	b.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2a6:	4b38      	ldr	r3, [pc, #224]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2b2:	d107      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 fe0b 	bl	800ced4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2c2:	e340      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2c8:	e33d      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2ca:	4b2f      	ldr	r3, [pc, #188]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2d6:	d107      	bne.n	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2d8:	f107 0318 	add.w	r3, r7, #24
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fb51 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e6:	e32e      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ec:	e32b      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2ee:	4b26      	ldr	r3, [pc, #152]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2fa:	d107      	bne.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2fc:	f107 030c 	add.w	r3, r7, #12
 800c300:	4618      	mov	r0, r3
 800c302:	f000 fc93 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c30a:	e31c      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c30c:	2300      	movs	r3, #0
 800c30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c310:	e319      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c312:	4b1d      	ldr	r3, [pc, #116]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c316:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c31a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c31c:	4b1a      	ldr	r3, [pc, #104]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b04      	cmp	r3, #4
 800c326:	d10c      	bne.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d109      	bne.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c32e:	4b16      	ldr	r3, [pc, #88]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	08db      	lsrs	r3, r3, #3
 800c334:	f003 0303 	and.w	r3, r3, #3
 800c338:	4a14      	ldr	r2, [pc, #80]	; (800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c33a:	fa22 f303 	lsr.w	r3, r2, r3
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c340:	e01e      	b.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c342:	4b11      	ldr	r3, [pc, #68]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c34e:	d106      	bne.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c356:	d102      	bne.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c358:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c35c:	e010      	b.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c35e:	4b0a      	ldr	r3, [pc, #40]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c36a:	d106      	bne.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c36e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c372:	d102      	bne.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c374:	4b07      	ldr	r3, [pc, #28]	; (800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c378:	e002      	b.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c37e:	e2e2      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c380:	e2e1      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c386:	e2de      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c388:	58024400 	.word	0x58024400
 800c38c:	03d09000 	.word	0x03d09000
 800c390:	003d0900 	.word	0x003d0900
 800c394:	017d7840 	.word	0x017d7840
 800c398:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a0:	e2d1      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c3a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c3aa:	430b      	orrs	r3, r1
 800c3ac:	f040 809c 	bne.w	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c3b0:	4b93      	ldr	r3, [pc, #588]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c3b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3c0:	d054      	beq.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3c8:	f200 808b 	bhi.w	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3d2:	f000 8083 	beq.w	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3dc:	f200 8081 	bhi.w	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3e6:	d02f      	beq.n	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ee:	d878      	bhi.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d004      	beq.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3fc:	d012      	beq.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c3fe:	e070      	b.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c400:	4b7f      	ldr	r3, [pc, #508]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c40c:	d107      	bne.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c40e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c412:	4618      	mov	r0, r3
 800c414:	f000 fd5e 	bl	800ced4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41c:	e293      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c422:	e290      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c424:	4b76      	ldr	r3, [pc, #472]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c42c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c430:	d107      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c432:	f107 0318 	add.w	r3, r7, #24
 800c436:	4618      	mov	r0, r3
 800c438:	f000 faa4 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c440:	e281      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c446:	e27e      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c448:	4b6d      	ldr	r3, [pc, #436]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c454:	d107      	bne.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c456:	f107 030c 	add.w	r3, r7, #12
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fbe6 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c464:	e26f      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c466:	2300      	movs	r3, #0
 800c468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46a:	e26c      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c46c:	4b64      	ldr	r3, [pc, #400]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c46e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c474:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c476:	4b62      	ldr	r3, [pc, #392]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0304 	and.w	r3, r3, #4
 800c47e:	2b04      	cmp	r3, #4
 800c480:	d10c      	bne.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c488:	4b5d      	ldr	r3, [pc, #372]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	08db      	lsrs	r3, r3, #3
 800c48e:	f003 0303 	and.w	r3, r3, #3
 800c492:	4a5c      	ldr	r2, [pc, #368]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c494:	fa22 f303 	lsr.w	r3, r2, r3
 800c498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c49a:	e01e      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c49c:	4b58      	ldr	r3, [pc, #352]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4a8:	d106      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4b0:	d102      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4b2:	4b55      	ldr	r3, [pc, #340]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b6:	e010      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4b8:	4b51      	ldr	r3, [pc, #324]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4c4:	d106      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4cc:	d102      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4ce:	4b4f      	ldr	r3, [pc, #316]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d2:	e002      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4d8:	e235      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4da:	e234      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4dc:	4b4c      	ldr	r3, [pc, #304]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e0:	e231      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e6:	e22e      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ec:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c4f0:	430b      	orrs	r3, r1
 800c4f2:	f040 808f 	bne.w	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c4f6:	4b42      	ldr	r3, [pc, #264]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4fa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c4fe:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c506:	d06b      	beq.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c50e:	d874      	bhi.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c516:	d056      	beq.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c51e:	d86c      	bhi.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c526:	d03b      	beq.n	800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c52e:	d864      	bhi.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c536:	d021      	beq.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c53e:	d85c      	bhi.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	2b00      	cmp	r3, #0
 800c544:	d004      	beq.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c54c:	d004      	beq.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c54e:	e054      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c550:	f7fe fa0a 	bl	800a968 <HAL_RCC_GetPCLK1Freq>
 800c554:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c556:	e1f6      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c558:	4b29      	ldr	r3, [pc, #164]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c564:	d107      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c566:	f107 0318 	add.w	r3, r7, #24
 800c56a:	4618      	mov	r0, r3
 800c56c:	f000 fa0a 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c574:	e1e7      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c576:	2300      	movs	r3, #0
 800c578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c57a:	e1e4      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c57c:	4b20      	ldr	r3, [pc, #128]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c588:	d107      	bne.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c58a:	f107 030c 	add.w	r3, r7, #12
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 fb4c 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c598:	e1d5      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59e:	e1d2      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5a0:	4b17      	ldr	r3, [pc, #92]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0304 	and.w	r3, r3, #4
 800c5a8:	2b04      	cmp	r3, #4
 800c5aa:	d109      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ac:	4b14      	ldr	r3, [pc, #80]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	08db      	lsrs	r3, r3, #3
 800c5b2:	f003 0303 	and.w	r3, r3, #3
 800c5b6:	4a13      	ldr	r2, [pc, #76]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5be:	e1c2      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c4:	e1bf      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5c6:	4b0e      	ldr	r3, [pc, #56]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5d2:	d102      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c5d4:	4b0c      	ldr	r3, [pc, #48]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d8:	e1b5      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5de:	e1b2      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5e0:	4b07      	ldr	r3, [pc, #28]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ec:	d102      	bne.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c5ee:	4b07      	ldr	r3, [pc, #28]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f2:	e1a8      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f8:	e1a5      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fe:	e1a2      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c600:	58024400 	.word	0x58024400
 800c604:	03d09000 	.word	0x03d09000
 800c608:	003d0900 	.word	0x003d0900
 800c60c:	017d7840 	.word	0x017d7840
 800c610:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c614:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c618:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c61c:	430b      	orrs	r3, r1
 800c61e:	d173      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c620:	4b9c      	ldr	r3, [pc, #624]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c628:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c630:	d02f      	beq.n	800c692 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c638:	d863      	bhi.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c646:	d012      	beq.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c648:	e05b      	b.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c64a:	4b92      	ldr	r3, [pc, #584]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c656:	d107      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c658:	f107 0318 	add.w	r3, r7, #24
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 f991 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c666:	e16e      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c668:	2300      	movs	r3, #0
 800c66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c66c:	e16b      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c66e:	4b89      	ldr	r3, [pc, #548]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c67a:	d107      	bne.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c67c:	f107 030c 	add.w	r3, r7, #12
 800c680:	4618      	mov	r0, r3
 800c682:	f000 fad3 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c68a:	e15c      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c690:	e159      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c692:	4b80      	ldr	r3, [pc, #512]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c696:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c69a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c69c:	4b7d      	ldr	r3, [pc, #500]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d10c      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d109      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6ae:	4b79      	ldr	r3, [pc, #484]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	08db      	lsrs	r3, r3, #3
 800c6b4:	f003 0303 	and.w	r3, r3, #3
 800c6b8:	4a77      	ldr	r2, [pc, #476]	; (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c6ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6c0:	e01e      	b.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6c2:	4b74      	ldr	r3, [pc, #464]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6ce:	d106      	bne.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6d6:	d102      	bne.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6d8:	4b70      	ldr	r3, [pc, #448]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6dc:	e010      	b.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6de:	4b6d      	ldr	r3, [pc, #436]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ea:	d106      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f2:	d102      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6f4:	4b6a      	ldr	r3, [pc, #424]	; (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f8:	e002      	b.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6fe:	e122      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c700:	e121      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c706:	e11e      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c70c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c710:	430b      	orrs	r3, r1
 800c712:	d133      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c714:	4b5f      	ldr	r3, [pc, #380]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c71c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c720:	2b00      	cmp	r3, #0
 800c722:	d004      	beq.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c72a:	d012      	beq.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c72c:	e023      	b.n	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c72e:	4b59      	ldr	r3, [pc, #356]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c73a:	d107      	bne.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c73c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c740:	4618      	mov	r0, r3
 800c742:	f000 fbc7 	bl	800ced4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c74a:	e0fc      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c750:	e0f9      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c752:	4b50      	ldr	r3, [pc, #320]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c75a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c75e:	d107      	bne.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c760:	f107 0318 	add.w	r3, r7, #24
 800c764:	4618      	mov	r0, r3
 800c766:	f000 f90d 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c76e:	e0ea      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c770:	2300      	movs	r3, #0
 800c772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c774:	e0e7      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c77a:	e0e4      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c77c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c780:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c784:	430b      	orrs	r3, r1
 800c786:	f040 808d 	bne.w	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c78a:	4b42      	ldr	r3, [pc, #264]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c78e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c792:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c79a:	d06b      	beq.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7a2:	d874      	bhi.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7aa:	d056      	beq.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7b2:	d86c      	bhi.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7ba:	d03b      	beq.n	800c834 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7c2:	d864      	bhi.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ca:	d021      	beq.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7d2:	d85c      	bhi.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d004      	beq.n	800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7e0:	d004      	beq.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c7e2:	e054      	b.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c7e4:	f000 f8b8 	bl	800c958 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7e8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7ea:	e0ac      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7ec:	4b29      	ldr	r3, [pc, #164]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7f8:	d107      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7fa:	f107 0318 	add.w	r3, r7, #24
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 f8c0 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c808:	e09d      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80e:	e09a      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c810:	4b20      	ldr	r3, [pc, #128]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c81c:	d107      	bne.n	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c81e:	f107 030c 	add.w	r3, r7, #12
 800c822:	4618      	mov	r0, r3
 800c824:	f000 fa02 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c82c:	e08b      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c832:	e088      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c834:	4b17      	ldr	r3, [pc, #92]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d109      	bne.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c840:	4b14      	ldr	r3, [pc, #80]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	08db      	lsrs	r3, r3, #3
 800c846:	f003 0303 	and.w	r3, r3, #3
 800c84a:	4a13      	ldr	r2, [pc, #76]	; (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c84c:	fa22 f303 	lsr.w	r3, r2, r3
 800c850:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c852:	e078      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c858:	e075      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c85a:	4b0e      	ldr	r3, [pc, #56]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c866:	d102      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c868:	4b0c      	ldr	r3, [pc, #48]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86c:	e06b      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c872:	e068      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c874:	4b07      	ldr	r3, [pc, #28]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c87c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c880:	d102      	bne.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c882:	4b07      	ldr	r3, [pc, #28]	; (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c884:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c886:	e05e      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c88c:	e05b      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c892:	e058      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c894:	58024400 	.word	0x58024400
 800c898:	03d09000 	.word	0x03d09000
 800c89c:	003d0900 	.word	0x003d0900
 800c8a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c8ac:	430b      	orrs	r3, r1
 800c8ae:	d148      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c8b0:	4b27      	ldr	r3, [pc, #156]	; (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8c0:	d02a      	beq.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8c8:	d838      	bhi.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d004      	beq.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8d6:	d00d      	beq.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c8d8:	e030      	b.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8da:	4b1d      	ldr	r3, [pc, #116]	; (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8e6:	d102      	bne.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c8e8:	4b1a      	ldr	r3, [pc, #104]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ec:	e02b      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f2:	e028      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8f4:	4b16      	ldr	r3, [pc, #88]	; (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c900:	d107      	bne.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c906:	4618      	mov	r0, r3
 800c908:	f000 fae4 	bl	800ced4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c910:	e019      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c916:	e016      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c918:	4b0d      	ldr	r3, [pc, #52]	; (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c924:	d107      	bne.n	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c926:	f107 0318 	add.w	r3, r7, #24
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 f82a 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c934:	e007      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93a:	e004      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c940:	e001      	b.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3740      	adds	r7, #64	; 0x40
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	58024400 	.word	0x58024400
 800c954:	017d7840 	.word	0x017d7840

0800c958 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c95c:	f7fd ffd4 	bl	800a908 <HAL_RCC_GetHCLKFreq>
 800c960:	4602      	mov	r2, r0
 800c962:	4b06      	ldr	r3, [pc, #24]	; (800c97c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	091b      	lsrs	r3, r3, #4
 800c968:	f003 0307 	and.w	r3, r3, #7
 800c96c:	4904      	ldr	r1, [pc, #16]	; (800c980 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c96e:	5ccb      	ldrb	r3, [r1, r3]
 800c970:	f003 031f 	and.w	r3, r3, #31
 800c974:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c978:	4618      	mov	r0, r3
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	58024400 	.word	0x58024400
 800c980:	08017000 	.word	0x08017000

0800c984 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c984:	b480      	push	{r7}
 800c986:	b089      	sub	sp, #36	; 0x24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c98c:	4ba1      	ldr	r3, [pc, #644]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c990:	f003 0303 	and.w	r3, r3, #3
 800c994:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c996:	4b9f      	ldr	r3, [pc, #636]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99a:	0b1b      	lsrs	r3, r3, #12
 800c99c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c9a2:	4b9c      	ldr	r3, [pc, #624]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a6:	091b      	lsrs	r3, r3, #4
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9ae:	4b99      	ldr	r3, [pc, #612]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b2:	08db      	lsrs	r3, r3, #3
 800c9b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9b8:	693a      	ldr	r2, [r7, #16]
 800c9ba:	fb02 f303 	mul.w	r3, r2, r3
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 8111 	beq.w	800cbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	f000 8083 	beq.w	800cae0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	f200 80a1 	bhi.w	800cb24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d003      	beq.n	800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d056      	beq.n	800ca9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c9ee:	e099      	b.n	800cb24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9f0:	4b88      	ldr	r3, [pc, #544]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 0320 	and.w	r3, r3, #32
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d02d      	beq.n	800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9fc:	4b85      	ldr	r3, [pc, #532]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	08db      	lsrs	r3, r3, #3
 800ca02:	f003 0303 	and.w	r3, r3, #3
 800ca06:	4a84      	ldr	r2, [pc, #528]	; (800cc18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca08:	fa22 f303 	lsr.w	r3, r2, r3
 800ca0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	ee07 3a90 	vmov	s15, r3
 800ca14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca26:	4b7b      	ldr	r3, [pc, #492]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca2e:	ee07 3a90 	vmov	s15, r3
 800ca32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca56:	e087      	b.n	800cb68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	ee07 3a90 	vmov	s15, r3
 800ca5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca6a:	4b6a      	ldr	r3, [pc, #424]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca72:	ee07 3a90 	vmov	s15, r3
 800ca76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca9a:	e065      	b.n	800cb68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	ee07 3a90 	vmov	s15, r3
 800caa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800caaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caae:	4b59      	ldr	r3, [pc, #356]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab6:	ee07 3a90 	vmov	s15, r3
 800caba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cabe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cac2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cade:	e043      	b.n	800cb68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	ee07 3a90 	vmov	s15, r3
 800cae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800caee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caf2:	4b48      	ldr	r3, [pc, #288]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cafa:	ee07 3a90 	vmov	s15, r3
 800cafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb02:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb06:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb22:	e021      	b.n	800cb68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb36:	4b37      	ldr	r3, [pc, #220]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3e:	ee07 3a90 	vmov	s15, r3
 800cb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb46:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb68:	4b2a      	ldr	r3, [pc, #168]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6c:	0a5b      	lsrs	r3, r3, #9
 800cb6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb72:	ee07 3a90 	vmov	s15, r3
 800cb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb82:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb8e:	ee17 2a90 	vmov	r2, s15
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb96:	4b1f      	ldr	r3, [pc, #124]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9a:	0c1b      	lsrs	r3, r3, #16
 800cb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba0:	ee07 3a90 	vmov	s15, r3
 800cba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbbc:	ee17 2a90 	vmov	r2, s15
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbc4:	4b13      	ldr	r3, [pc, #76]	; (800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc8:	0e1b      	lsrs	r3, r3, #24
 800cbca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbce:	ee07 3a90 	vmov	s15, r3
 800cbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbde:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbea:	ee17 2a90 	vmov	r2, s15
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cbf2:	e008      	b.n	800cc06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	609a      	str	r2, [r3, #8]
}
 800cc06:	bf00      	nop
 800cc08:	3724      	adds	r7, #36	; 0x24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	58024400 	.word	0x58024400
 800cc18:	03d09000 	.word	0x03d09000
 800cc1c:	46000000 	.word	0x46000000
 800cc20:	4c742400 	.word	0x4c742400
 800cc24:	4a742400 	.word	0x4a742400
 800cc28:	4bbebc20 	.word	0x4bbebc20

0800cc2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b089      	sub	sp, #36	; 0x24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc34:	4ba1      	ldr	r3, [pc, #644]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc38:	f003 0303 	and.w	r3, r3, #3
 800cc3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc3e:	4b9f      	ldr	r3, [pc, #636]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc42:	0d1b      	lsrs	r3, r3, #20
 800cc44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc4a:	4b9c      	ldr	r3, [pc, #624]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4e:	0a1b      	lsrs	r3, r3, #8
 800cc50:	f003 0301 	and.w	r3, r3, #1
 800cc54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc56:	4b99      	ldr	r3, [pc, #612]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc5a:	08db      	lsrs	r3, r3, #3
 800cc5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	fb02 f303 	mul.w	r3, r2, r3
 800cc66:	ee07 3a90 	vmov	s15, r3
 800cc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 8111 	beq.w	800ce9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	f000 8083 	beq.w	800cd88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	f200 80a1 	bhi.w	800cdcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d003      	beq.n	800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d056      	beq.n	800cd44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc96:	e099      	b.n	800cdcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc98:	4b88      	ldr	r3, [pc, #544]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f003 0320 	and.w	r3, r3, #32
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d02d      	beq.n	800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cca4:	4b85      	ldr	r3, [pc, #532]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	08db      	lsrs	r3, r3, #3
 800ccaa:	f003 0303 	and.w	r3, r3, #3
 800ccae:	4a84      	ldr	r2, [pc, #528]	; (800cec0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ccb0:	fa22 f303 	lsr.w	r3, r2, r3
 800ccb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	ee07 3a90 	vmov	s15, r3
 800ccbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccce:	4b7b      	ldr	r3, [pc, #492]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd6:	ee07 3a90 	vmov	s15, r3
 800ccda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccde:	ed97 6a03 	vldr	s12, [r7, #12]
 800cce2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cec4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccfe:	e087      	b.n	800ce10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	ee07 3a90 	vmov	s15, r3
 800cd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cec8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd12:	4b6a      	ldr	r3, [pc, #424]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd1a:	ee07 3a90 	vmov	s15, r3
 800cd1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd22:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd26:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cec4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd42:	e065      	b.n	800ce10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	ee07 3a90 	vmov	s15, r3
 800cd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cecc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd56:	4b59      	ldr	r3, [pc, #356]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd5e:	ee07 3a90 	vmov	s15, r3
 800cd62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd66:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cec4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd86:	e043      	b.n	800ce10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd9a:	4b48      	ldr	r3, [pc, #288]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda2:	ee07 3a90 	vmov	s15, r3
 800cda6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cec4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdca:	e021      	b.n	800ce10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	ee07 3a90 	vmov	s15, r3
 800cdd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cecc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdde:	4b37      	ldr	r3, [pc, #220]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde6:	ee07 3a90 	vmov	s15, r3
 800cdea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdee:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cec4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce10:	4b2a      	ldr	r3, [pc, #168]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce14:	0a5b      	lsrs	r3, r3, #9
 800ce16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce1a:	ee07 3a90 	vmov	s15, r3
 800ce1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce36:	ee17 2a90 	vmov	r2, s15
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce3e:	4b1f      	ldr	r3, [pc, #124]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce42:	0c1b      	lsrs	r3, r3, #16
 800ce44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce48:	ee07 3a90 	vmov	s15, r3
 800ce4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce58:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce64:	ee17 2a90 	vmov	r2, s15
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce6c:	4b13      	ldr	r3, [pc, #76]	; (800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce70:	0e1b      	lsrs	r3, r3, #24
 800ce72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce76:	ee07 3a90 	vmov	s15, r3
 800ce7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce92:	ee17 2a90 	vmov	r2, s15
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce9a:	e008      	b.n	800ceae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	609a      	str	r2, [r3, #8]
}
 800ceae:	bf00      	nop
 800ceb0:	3724      	adds	r7, #36	; 0x24
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	58024400 	.word	0x58024400
 800cec0:	03d09000 	.word	0x03d09000
 800cec4:	46000000 	.word	0x46000000
 800cec8:	4c742400 	.word	0x4c742400
 800cecc:	4a742400 	.word	0x4a742400
 800ced0:	4bbebc20 	.word	0x4bbebc20

0800ced4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b089      	sub	sp, #36	; 0x24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cedc:	4ba0      	ldr	r3, [pc, #640]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee0:	f003 0303 	and.w	r3, r3, #3
 800cee4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cee6:	4b9e      	ldr	r3, [pc, #632]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceea:	091b      	lsrs	r3, r3, #4
 800ceec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cef0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cef2:	4b9b      	ldr	r3, [pc, #620]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef6:	f003 0301 	and.w	r3, r3, #1
 800cefa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cefc:	4b98      	ldr	r3, [pc, #608]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf00:	08db      	lsrs	r3, r3, #3
 800cf02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	fb02 f303 	mul.w	r3, r2, r3
 800cf0c:	ee07 3a90 	vmov	s15, r3
 800cf10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf14:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 8111 	beq.w	800d142 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	f000 8083 	beq.w	800d02e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	f200 80a1 	bhi.w	800d072 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d003      	beq.n	800cf3e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d056      	beq.n	800cfea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf3c:	e099      	b.n	800d072 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf3e:	4b88      	ldr	r3, [pc, #544]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 0320 	and.w	r3, r3, #32
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d02d      	beq.n	800cfa6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf4a:	4b85      	ldr	r3, [pc, #532]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	08db      	lsrs	r3, r3, #3
 800cf50:	f003 0303 	and.w	r3, r3, #3
 800cf54:	4a83      	ldr	r2, [pc, #524]	; (800d164 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf56:	fa22 f303 	lsr.w	r3, r2, r3
 800cf5a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	ee07 3a90 	vmov	s15, r3
 800cf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	ee07 3a90 	vmov	s15, r3
 800cf6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf74:	4b7a      	ldr	r3, [pc, #488]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf7c:	ee07 3a90 	vmov	s15, r3
 800cf80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf84:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf88:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d168 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfa0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfa4:	e087      	b.n	800d0b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	ee07 3a90 	vmov	s15, r3
 800cfac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d16c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfb8:	4b69      	ldr	r3, [pc, #420]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfc0:	ee07 3a90 	vmov	s15, r3
 800cfc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfc8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfcc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d168 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfe4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfe8:	e065      	b.n	800d0b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	ee07 3a90 	vmov	s15, r3
 800cff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cff4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d170 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cffc:	4b58      	ldr	r3, [pc, #352]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d004:	ee07 3a90 	vmov	s15, r3
 800d008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d00c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d010:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d168 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d01c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d024:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d028:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d02c:	e043      	b.n	800d0b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	ee07 3a90 	vmov	s15, r3
 800d034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d038:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d174 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d03c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d040:	4b47      	ldr	r3, [pc, #284]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d048:	ee07 3a90 	vmov	s15, r3
 800d04c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d050:	ed97 6a03 	vldr	s12, [r7, #12]
 800d054:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d168 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d05c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d06c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d070:	e021      	b.n	800d0b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	ee07 3a90 	vmov	s15, r3
 800d078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d07c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d16c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d084:	4b36      	ldr	r3, [pc, #216]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d08c:	ee07 3a90 	vmov	s15, r3
 800d090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d094:	ed97 6a03 	vldr	s12, [r7, #12]
 800d098:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d168 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d09c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d0b6:	4b2a      	ldr	r3, [pc, #168]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ba:	0a5b      	lsrs	r3, r3, #9
 800d0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c0:	ee07 3a90 	vmov	s15, r3
 800d0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0dc:	ee17 2a90 	vmov	r2, s15
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d0e4:	4b1e      	ldr	r3, [pc, #120]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e8:	0c1b      	lsrs	r3, r3, #16
 800d0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ee:	ee07 3a90 	vmov	s15, r3
 800d0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d10a:	ee17 2a90 	vmov	r2, s15
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d112:	4b13      	ldr	r3, [pc, #76]	; (800d160 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d116:	0e1b      	lsrs	r3, r3, #24
 800d118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d11c:	ee07 3a90 	vmov	s15, r3
 800d120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d12c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d138:	ee17 2a90 	vmov	r2, s15
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d140:	e008      	b.n	800d154 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	609a      	str	r2, [r3, #8]
}
 800d154:	bf00      	nop
 800d156:	3724      	adds	r7, #36	; 0x24
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr
 800d160:	58024400 	.word	0x58024400
 800d164:	03d09000 	.word	0x03d09000
 800d168:	46000000 	.word	0x46000000
 800d16c:	4c742400 	.word	0x4c742400
 800d170:	4a742400 	.word	0x4a742400
 800d174:	4bbebc20 	.word	0x4bbebc20

0800d178 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d186:	4b53      	ldr	r3, [pc, #332]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18a:	f003 0303 	and.w	r3, r3, #3
 800d18e:	2b03      	cmp	r3, #3
 800d190:	d101      	bne.n	800d196 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	e099      	b.n	800d2ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d196:	4b4f      	ldr	r3, [pc, #316]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a4e      	ldr	r2, [pc, #312]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d19c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1a2:	f7f6 fc8b 	bl	8003abc <HAL_GetTick>
 800d1a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1a8:	e008      	b.n	800d1bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1aa:	f7f6 fc87 	bl	8003abc <HAL_GetTick>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d901      	bls.n	800d1bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	e086      	b.n	800d2ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1bc:	4b45      	ldr	r3, [pc, #276]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1f0      	bne.n	800d1aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1c8:	4b42      	ldr	r3, [pc, #264]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	031b      	lsls	r3, r3, #12
 800d1d6:	493f      	ldr	r1, [pc, #252]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	628b      	str	r3, [r1, #40]	; 0x28
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	025b      	lsls	r3, r3, #9
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	431a      	orrs	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	041b      	lsls	r3, r3, #16
 800d1fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1fe:	431a      	orrs	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	3b01      	subs	r3, #1
 800d206:	061b      	lsls	r3, r3, #24
 800d208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d20c:	4931      	ldr	r1, [pc, #196]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d20e:	4313      	orrs	r3, r2
 800d210:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d212:	4b30      	ldr	r3, [pc, #192]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	695b      	ldr	r3, [r3, #20]
 800d21e:	492d      	ldr	r1, [pc, #180]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d220:	4313      	orrs	r3, r2
 800d222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d224:	4b2b      	ldr	r3, [pc, #172]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d228:	f023 0220 	bic.w	r2, r3, #32
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	699b      	ldr	r3, [r3, #24]
 800d230:	4928      	ldr	r1, [pc, #160]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d232:	4313      	orrs	r3, r2
 800d234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d236:	4b27      	ldr	r3, [pc, #156]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23a:	4a26      	ldr	r2, [pc, #152]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d23c:	f023 0310 	bic.w	r3, r3, #16
 800d240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d242:	4b24      	ldr	r3, [pc, #144]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d246:	4b24      	ldr	r3, [pc, #144]	; (800d2d8 <RCCEx_PLL2_Config+0x160>)
 800d248:	4013      	ands	r3, r2
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	69d2      	ldr	r2, [r2, #28]
 800d24e:	00d2      	lsls	r2, r2, #3
 800d250:	4920      	ldr	r1, [pc, #128]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d252:	4313      	orrs	r3, r2
 800d254:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d256:	4b1f      	ldr	r3, [pc, #124]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25a:	4a1e      	ldr	r2, [pc, #120]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d25c:	f043 0310 	orr.w	r3, r3, #16
 800d260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d106      	bne.n	800d276 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d268:	4b1a      	ldr	r3, [pc, #104]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26c:	4a19      	ldr	r2, [pc, #100]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d26e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d272:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d274:	e00f      	b.n	800d296 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d106      	bne.n	800d28a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d27c:	4b15      	ldr	r3, [pc, #84]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d280:	4a14      	ldr	r2, [pc, #80]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d286:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d288:	e005      	b.n	800d296 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d28a:	4b12      	ldr	r3, [pc, #72]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28e:	4a11      	ldr	r2, [pc, #68]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d296:	4b0f      	ldr	r3, [pc, #60]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a0e      	ldr	r2, [pc, #56]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d29c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2a2:	f7f6 fc0b 	bl	8003abc <HAL_GetTick>
 800d2a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2a8:	e008      	b.n	800d2bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2aa:	f7f6 fc07 	bl	8003abc <HAL_GetTick>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d901      	bls.n	800d2bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e006      	b.n	800d2ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2bc:	4b05      	ldr	r3, [pc, #20]	; (800d2d4 <RCCEx_PLL2_Config+0x15c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d0f0      	beq.n	800d2aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	58024400 	.word	0x58024400
 800d2d8:	ffff0007 	.word	0xffff0007

0800d2dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2ea:	4b53      	ldr	r3, [pc, #332]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ee:	f003 0303 	and.w	r3, r3, #3
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d101      	bne.n	800d2fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e099      	b.n	800d42e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d2fa:	4b4f      	ldr	r3, [pc, #316]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a4e      	ldr	r2, [pc, #312]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d306:	f7f6 fbd9 	bl	8003abc <HAL_GetTick>
 800d30a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d30c:	e008      	b.n	800d320 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d30e:	f7f6 fbd5 	bl	8003abc <HAL_GetTick>
 800d312:	4602      	mov	r2, r0
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d901      	bls.n	800d320 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e086      	b.n	800d42e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d320:	4b45      	ldr	r3, [pc, #276]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1f0      	bne.n	800d30e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d32c:	4b42      	ldr	r3, [pc, #264]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d330:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	051b      	lsls	r3, r3, #20
 800d33a:	493f      	ldr	r1, [pc, #252]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d33c:	4313      	orrs	r3, r2
 800d33e:	628b      	str	r3, [r1, #40]	; 0x28
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	3b01      	subs	r3, #1
 800d346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	3b01      	subs	r3, #1
 800d350:	025b      	lsls	r3, r3, #9
 800d352:	b29b      	uxth	r3, r3
 800d354:	431a      	orrs	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	041b      	lsls	r3, r3, #16
 800d35e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d362:	431a      	orrs	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	3b01      	subs	r3, #1
 800d36a:	061b      	lsls	r3, r3, #24
 800d36c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d370:	4931      	ldr	r1, [pc, #196]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d372:	4313      	orrs	r3, r2
 800d374:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d376:	4b30      	ldr	r3, [pc, #192]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	695b      	ldr	r3, [r3, #20]
 800d382:	492d      	ldr	r1, [pc, #180]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d384:	4313      	orrs	r3, r2
 800d386:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d388:	4b2b      	ldr	r3, [pc, #172]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	4928      	ldr	r1, [pc, #160]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d396:	4313      	orrs	r3, r2
 800d398:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d39a:	4b27      	ldr	r3, [pc, #156]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39e:	4a26      	ldr	r2, [pc, #152]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d3a6:	4b24      	ldr	r3, [pc, #144]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3aa:	4b24      	ldr	r3, [pc, #144]	; (800d43c <RCCEx_PLL3_Config+0x160>)
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	69d2      	ldr	r2, [r2, #28]
 800d3b2:	00d2      	lsls	r2, r2, #3
 800d3b4:	4920      	ldr	r1, [pc, #128]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d3ba:	4b1f      	ldr	r3, [pc, #124]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3be:	4a1e      	ldr	r2, [pc, #120]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d106      	bne.n	800d3da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3cc:	4b1a      	ldr	r3, [pc, #104]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d0:	4a19      	ldr	r2, [pc, #100]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3d8:	e00f      	b.n	800d3fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d106      	bne.n	800d3ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d3e0:	4b15      	ldr	r3, [pc, #84]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e4:	4a14      	ldr	r2, [pc, #80]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d3ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3ec:	e005      	b.n	800d3fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d3ee:	4b12      	ldr	r3, [pc, #72]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f2:	4a11      	ldr	r2, [pc, #68]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d3f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d3fa:	4b0f      	ldr	r3, [pc, #60]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a0e      	ldr	r2, [pc, #56]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d406:	f7f6 fb59 	bl	8003abc <HAL_GetTick>
 800d40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d40c:	e008      	b.n	800d420 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d40e:	f7f6 fb55 	bl	8003abc <HAL_GetTick>
 800d412:	4602      	mov	r2, r0
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d901      	bls.n	800d420 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d41c:	2303      	movs	r3, #3
 800d41e:	e006      	b.n	800d42e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d420:	4b05      	ldr	r3, [pc, #20]	; (800d438 <RCCEx_PLL3_Config+0x15c>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0f0      	beq.n	800d40e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	58024400 	.word	0x58024400
 800d43c:	ffff0007 	.word	0xffff0007

0800d440 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d071      	beq.n	800d536 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d106      	bne.n	800d46c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7f5 fdec 	bl	8003044 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2202      	movs	r2, #2
 800d470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	f003 0310 	and.w	r3, r3, #16
 800d47e:	2b10      	cmp	r3, #16
 800d480:	d050      	beq.n	800d524 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	22ca      	movs	r2, #202	; 0xca
 800d488:	625a      	str	r2, [r3, #36]	; 0x24
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2253      	movs	r2, #83	; 0x53
 800d490:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 fa4a 	bl	800d92c <RTC_EnterInitMode>
 800d498:	4603      	mov	r3, r0
 800d49a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d124      	bne.n	800d4ec <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	6899      	ldr	r1, [r3, #8]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	4b24      	ldr	r3, [pc, #144]	; (800d540 <HAL_RTC_Init+0x100>)
 800d4ae:	400b      	ands	r3, r1
 800d4b0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	6899      	ldr	r1, [r3, #8]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	431a      	orrs	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	0419      	lsls	r1, r3, #16
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68da      	ldr	r2, [r3, #12]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	430a      	orrs	r2, r1
 800d4e0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fa56 	bl	800d994 <RTC_ExitInitMode>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d4ec:	7bfb      	ldrb	r3, [r7, #15]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d113      	bne.n	800d51a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f022 0203 	bic.w	r2, r2, #3
 800d500:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	69da      	ldr	r2, [r3, #28]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	431a      	orrs	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	430a      	orrs	r2, r1
 800d518:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	22ff      	movs	r2, #255	; 0xff
 800d520:	625a      	str	r2, [r3, #36]	; 0x24
 800d522:	e001      	b.n	800d528 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d524:	2300      	movs	r3, #0
 800d526:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d528:	7bfb      	ldrb	r3, [r7, #15]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d103      	bne.n	800d536 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2201      	movs	r2, #1
 800d532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d536:	7bfb      	ldrb	r3, [r7, #15]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	ff8fffbf 	.word	0xff8fffbf

0800d544 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d544:	b590      	push	{r4, r7, lr}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d101      	bne.n	800d55e <HAL_RTC_SetTime+0x1a>
 800d55a:	2302      	movs	r3, #2
 800d55c:	e089      	b.n	800d672 <HAL_RTC_SetTime+0x12e>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2202      	movs	r2, #2
 800d56a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	22ca      	movs	r2, #202	; 0xca
 800d574:	625a      	str	r2, [r3, #36]	; 0x24
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2253      	movs	r2, #83	; 0x53
 800d57c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f000 f9d4 	bl	800d92c <RTC_EnterInitMode>
 800d584:	4603      	mov	r3, r0
 800d586:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d588:	7cfb      	ldrb	r3, [r7, #19]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d161      	bne.n	800d652 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d126      	bne.n	800d5e2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d102      	bne.n	800d5a8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f000 fa2f 	bl	800da10 <RTC_ByteToBcd2>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	785b      	ldrb	r3, [r3, #1]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 fa28 	bl	800da10 <RTC_ByteToBcd2>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5c4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	789b      	ldrb	r3, [r3, #2]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 fa20 	bl	800da10 <RTC_ByteToBcd2>
 800d5d0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d5d2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	78db      	ldrb	r3, [r3, #3]
 800d5da:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	617b      	str	r3, [r7, #20]
 800d5e0:	e018      	b.n	800d614 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d102      	bne.n	800d5f6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	785b      	ldrb	r3, [r3, #1]
 800d600:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d602:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d608:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	78db      	ldrb	r3, [r3, #3]
 800d60e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d610:	4313      	orrs	r3, r2
 800d612:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	6979      	ldr	r1, [r7, #20]
 800d61a:	4b18      	ldr	r3, [pc, #96]	; (800d67c <HAL_RTC_SetTime+0x138>)
 800d61c:	400b      	ands	r3, r1
 800d61e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	689a      	ldr	r2, [r3, #8]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d62e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6899      	ldr	r1, [r3, #8]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	431a      	orrs	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	430a      	orrs	r2, r1
 800d646:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 f9a3 	bl	800d994 <RTC_ExitInitMode>
 800d64e:	4603      	mov	r3, r0
 800d650:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	22ff      	movs	r2, #255	; 0xff
 800d658:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d65a:	7cfb      	ldrb	r3, [r7, #19]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d103      	bne.n	800d668 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d670:	7cfb      	ldrb	r3, [r7, #19]
}
 800d672:	4618      	mov	r0, r3
 800d674:	371c      	adds	r7, #28
 800d676:	46bd      	mov	sp, r7
 800d678:	bd90      	pop	{r4, r7, pc}
 800d67a:	bf00      	nop
 800d67c:	007f7f7f 	.word	0x007f7f7f

0800d680 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	4b22      	ldr	r3, [pc, #136]	; (800d734 <HAL_RTC_GetTime+0xb4>)
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	0c1b      	lsrs	r3, r3, #16
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6ba:	b2da      	uxtb	r2, r3
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	0a1b      	lsrs	r3, r3, #8
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ca:	b2da      	uxtb	r2, r3
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6d8:	b2da      	uxtb	r2, r3
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	0d9b      	lsrs	r3, r3, #22
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 0301 	and.w	r3, r3, #1
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d11a      	bne.n	800d72a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 f9a9 	bl	800da50 <RTC_Bcd2ToByte>
 800d6fe:	4603      	mov	r3, r0
 800d700:	461a      	mov	r2, r3
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	785b      	ldrb	r3, [r3, #1]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f000 f9a0 	bl	800da50 <RTC_Bcd2ToByte>
 800d710:	4603      	mov	r3, r0
 800d712:	461a      	mov	r2, r3
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	789b      	ldrb	r3, [r3, #2]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 f997 	bl	800da50 <RTC_Bcd2ToByte>
 800d722:	4603      	mov	r3, r0
 800d724:	461a      	mov	r2, r3
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3718      	adds	r7, #24
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	007f7f7f 	.word	0x007f7f7f

0800d738 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d738:	b590      	push	{r4, r7, lr}
 800d73a:	b087      	sub	sp, #28
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d101      	bne.n	800d752 <HAL_RTC_SetDate+0x1a>
 800d74e:	2302      	movs	r3, #2
 800d750:	e073      	b.n	800d83a <HAL_RTC_SetDate+0x102>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2202      	movs	r2, #2
 800d75e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d10e      	bne.n	800d786 <HAL_RTC_SetDate+0x4e>
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	785b      	ldrb	r3, [r3, #1]
 800d76c:	f003 0310 	and.w	r3, r3, #16
 800d770:	2b00      	cmp	r3, #0
 800d772:	d008      	beq.n	800d786 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	785b      	ldrb	r3, [r3, #1]
 800d778:	f023 0310 	bic.w	r3, r3, #16
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	330a      	adds	r3, #10
 800d780:	b2da      	uxtb	r2, r3
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d11c      	bne.n	800d7c6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	78db      	ldrb	r3, [r3, #3]
 800d790:	4618      	mov	r0, r3
 800d792:	f000 f93d 	bl	800da10 <RTC_ByteToBcd2>
 800d796:	4603      	mov	r3, r0
 800d798:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	785b      	ldrb	r3, [r3, #1]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f936 	bl	800da10 <RTC_ByteToBcd2>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d7a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	789b      	ldrb	r3, [r3, #2]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 f92e 	bl	800da10 <RTC_ByteToBcd2>
 800d7b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d7b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	617b      	str	r3, [r7, #20]
 800d7c4:	e00e      	b.n	800d7e4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	78db      	ldrb	r3, [r3, #3]
 800d7ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	785b      	ldrb	r3, [r3, #1]
 800d7d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7d2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d7d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	22ca      	movs	r2, #202	; 0xca
 800d7ea:	625a      	str	r2, [r3, #36]	; 0x24
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2253      	movs	r2, #83	; 0x53
 800d7f2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f000 f899 	bl	800d92c <RTC_EnterInitMode>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d7fe:	7cfb      	ldrb	r3, [r7, #19]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10a      	bne.n	800d81a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	6979      	ldr	r1, [r7, #20]
 800d80a:	4b0e      	ldr	r3, [pc, #56]	; (800d844 <HAL_RTC_SetDate+0x10c>)
 800d80c:	400b      	ands	r3, r1
 800d80e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 f8bf 	bl	800d994 <RTC_ExitInitMode>
 800d816:	4603      	mov	r3, r0
 800d818:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	22ff      	movs	r2, #255	; 0xff
 800d820:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d822:	7cfb      	ldrb	r3, [r7, #19]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d103      	bne.n	800d830 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2200      	movs	r2, #0
 800d834:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d838:	7cfb      	ldrb	r3, [r7, #19]


}
 800d83a:	4618      	mov	r0, r3
 800d83c:	371c      	adds	r7, #28
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd90      	pop	{r4, r7, pc}
 800d842:	bf00      	nop
 800d844:	00ffff3f 	.word	0x00ffff3f

0800d848 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	4b21      	ldr	r3, [pc, #132]	; (800d8e0 <HAL_RTC_GetDate+0x98>)
 800d85c:	4013      	ands	r3, r2
 800d85e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	0c1b      	lsrs	r3, r3, #16
 800d864:	b2da      	uxtb	r2, r3
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	0a1b      	lsrs	r3, r3, #8
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	f003 031f 	and.w	r3, r3, #31
 800d874:	b2da      	uxtb	r2, r3
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d882:	b2da      	uxtb	r2, r3
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	0b5b      	lsrs	r3, r3, #13
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	f003 0307 	and.w	r3, r3, #7
 800d892:	b2da      	uxtb	r2, r3
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d11a      	bne.n	800d8d4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	78db      	ldrb	r3, [r3, #3]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 f8d4 	bl	800da50 <RTC_Bcd2ToByte>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	785b      	ldrb	r3, [r3, #1]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 f8cb 	bl	800da50 <RTC_Bcd2ToByte>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	461a      	mov	r2, r3
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	789b      	ldrb	r3, [r3, #2]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 f8c2 	bl	800da50 <RTC_Bcd2ToByte>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	00ffff3f 	.word	0x00ffff3f

0800d8e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a0d      	ldr	r2, [pc, #52]	; (800d928 <HAL_RTC_WaitForSynchro+0x44>)
 800d8f2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d8f4:	f7f6 f8e2 	bl	8003abc <HAL_GetTick>
 800d8f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d8fa:	e009      	b.n	800d910 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d8fc:	f7f6 f8de 	bl	8003abc <HAL_GetTick>
 800d900:	4602      	mov	r2, r0
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	1ad3      	subs	r3, r2, r3
 800d906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d90a:	d901      	bls.n	800d910 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d90c:	2303      	movs	r3, #3
 800d90e:	e007      	b.n	800d920 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f003 0320 	and.w	r3, r3, #32
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d0ee      	beq.n	800d8fc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	0003ff5f 	.word	0x0003ff5f

0800d92c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d934:	2300      	movs	r3, #0
 800d936:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d942:	2b00      	cmp	r3, #0
 800d944:	d120      	bne.n	800d988 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d94e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d950:	f7f6 f8b4 	bl	8003abc <HAL_GetTick>
 800d954:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d956:	e00d      	b.n	800d974 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d958:	f7f6 f8b0 	bl	8003abc <HAL_GetTick>
 800d95c:	4602      	mov	r2, r0
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d966:	d905      	bls.n	800d974 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d968:	2303      	movs	r3, #3
 800d96a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2203      	movs	r2, #3
 800d970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d102      	bne.n	800d988 <RTC_EnterInitMode+0x5c>
 800d982:	7bfb      	ldrb	r3, [r7, #15]
 800d984:	2b03      	cmp	r3, #3
 800d986:	d1e7      	bne.n	800d958 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d988:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d9a0:	4b1a      	ldr	r3, [pc, #104]	; (800da0c <RTC_ExitInitMode+0x78>)
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	4a19      	ldr	r2, [pc, #100]	; (800da0c <RTC_ExitInitMode+0x78>)
 800d9a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9aa:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d9ac:	4b17      	ldr	r3, [pc, #92]	; (800da0c <RTC_ExitInitMode+0x78>)
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	f003 0320 	and.w	r3, r3, #32
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10c      	bne.n	800d9d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7ff ff93 	bl	800d8e4 <HAL_RTC_WaitForSynchro>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d01e      	beq.n	800da02 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2203      	movs	r2, #3
 800d9c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	73fb      	strb	r3, [r7, #15]
 800d9d0:	e017      	b.n	800da02 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d9d2:	4b0e      	ldr	r3, [pc, #56]	; (800da0c <RTC_ExitInitMode+0x78>)
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	4a0d      	ldr	r2, [pc, #52]	; (800da0c <RTC_ExitInitMode+0x78>)
 800d9d8:	f023 0320 	bic.w	r3, r3, #32
 800d9dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7ff ff80 	bl	800d8e4 <HAL_RTC_WaitForSynchro>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d005      	beq.n	800d9f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2203      	movs	r2, #3
 800d9ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d9f6:	4b05      	ldr	r3, [pc, #20]	; (800da0c <RTC_ExitInitMode+0x78>)
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	4a04      	ldr	r2, [pc, #16]	; (800da0c <RTC_ExitInitMode+0x78>)
 800d9fc:	f043 0320 	orr.w	r3, r3, #32
 800da00:	6093      	str	r3, [r2, #8]
  }

  return status;
 800da02:	7bfb      	ldrb	r3, [r7, #15]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3710      	adds	r7, #16
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	58004000 	.word	0x58004000

0800da10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	4603      	mov	r3, r0
 800da18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800da1a:	2300      	movs	r3, #0
 800da1c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800da1e:	79fb      	ldrb	r3, [r7, #7]
 800da20:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800da22:	e005      	b.n	800da30 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	3301      	adds	r3, #1
 800da28:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800da2a:	7afb      	ldrb	r3, [r7, #11]
 800da2c:	3b0a      	subs	r3, #10
 800da2e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800da30:	7afb      	ldrb	r3, [r7, #11]
 800da32:	2b09      	cmp	r3, #9
 800da34:	d8f6      	bhi.n	800da24 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	011b      	lsls	r3, r3, #4
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	7afb      	ldrb	r3, [r7, #11]
 800da40:	4313      	orrs	r3, r2
 800da42:	b2db      	uxtb	r3, r3
}
 800da44:	4618      	mov	r0, r3
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	091b      	lsrs	r3, r3, #4
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	461a      	mov	r2, r3
 800da62:	0092      	lsls	r2, r2, #2
 800da64:	4413      	add	r3, r2
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800da6a:	79fb      	ldrb	r3, [r7, #7]
 800da6c:	f003 030f 	and.w	r3, r3, #15
 800da70:	b2da      	uxtb	r2, r3
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	4413      	add	r3, r2
 800da76:	b2db      	uxtb	r3, r3
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3714      	adds	r7, #20
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	e10f      	b.n	800dcb6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a87      	ldr	r2, [pc, #540]	; (800dcc0 <HAL_SPI_Init+0x23c>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d00f      	beq.n	800dac6 <HAL_SPI_Init+0x42>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a86      	ldr	r2, [pc, #536]	; (800dcc4 <HAL_SPI_Init+0x240>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d00a      	beq.n	800dac6 <HAL_SPI_Init+0x42>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a84      	ldr	r2, [pc, #528]	; (800dcc8 <HAL_SPI_Init+0x244>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d005      	beq.n	800dac6 <HAL_SPI_Init+0x42>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	2b0f      	cmp	r3, #15
 800dac0:	d901      	bls.n	800dac6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	e0f7      	b.n	800dcb6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fc12 	bl	800e2f0 <SPI_GetPacketSize>
 800dacc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a7b      	ldr	r2, [pc, #492]	; (800dcc0 <HAL_SPI_Init+0x23c>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d00c      	beq.n	800daf2 <HAL_SPI_Init+0x6e>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a79      	ldr	r2, [pc, #484]	; (800dcc4 <HAL_SPI_Init+0x240>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d007      	beq.n	800daf2 <HAL_SPI_Init+0x6e>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a78      	ldr	r2, [pc, #480]	; (800dcc8 <HAL_SPI_Init+0x244>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d002      	beq.n	800daf2 <HAL_SPI_Init+0x6e>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b08      	cmp	r3, #8
 800daf0:	d811      	bhi.n	800db16 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800daf6:	4a72      	ldr	r2, [pc, #456]	; (800dcc0 <HAL_SPI_Init+0x23c>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d009      	beq.n	800db10 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a70      	ldr	r2, [pc, #448]	; (800dcc4 <HAL_SPI_Init+0x240>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d004      	beq.n	800db10 <HAL_SPI_Init+0x8c>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a6f      	ldr	r2, [pc, #444]	; (800dcc8 <HAL_SPI_Init+0x244>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d104      	bne.n	800db1a <HAL_SPI_Init+0x96>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2b10      	cmp	r3, #16
 800db14:	d901      	bls.n	800db1a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800db16:	2301      	movs	r3, #1
 800db18:	e0cd      	b.n	800dcb6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d106      	bne.n	800db34 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7f5 faba 	bl	80030a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2202      	movs	r2, #2
 800db38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f022 0201 	bic.w	r2, r2, #1
 800db4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800db56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	699b      	ldr	r3, [r3, #24]
 800db5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db60:	d119      	bne.n	800db96 <HAL_SPI_Init+0x112>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db6a:	d103      	bne.n	800db74 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db70:	2b00      	cmp	r3, #0
 800db72:	d008      	beq.n	800db86 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10c      	bne.n	800db96 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db84:	d107      	bne.n	800db96 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00f      	beq.n	800dbc2 <HAL_SPI_Init+0x13e>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	2b06      	cmp	r3, #6
 800dba8:	d90b      	bls.n	800dbc2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	430a      	orrs	r2, r1
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	e007      	b.n	800dbd2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dbd0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	69da      	ldr	r2, [r3, #28]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	431a      	orrs	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbe4:	ea42 0103 	orr.w	r1, r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68da      	ldr	r2, [r3, #12]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfc:	431a      	orrs	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc02:	431a      	orrs	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	699b      	ldr	r3, [r3, #24]
 800dc08:	431a      	orrs	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	691b      	ldr	r3, [r3, #16]
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	695b      	ldr	r3, [r3, #20]
 800dc14:	431a      	orrs	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a1b      	ldr	r3, [r3, #32]
 800dc1a:	431a      	orrs	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	431a      	orrs	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc26:	431a      	orrs	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	431a      	orrs	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc32:	ea42 0103 	orr.w	r1, r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	430a      	orrs	r2, r1
 800dc40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d113      	bne.n	800dc72 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f022 0201 	bic.w	r2, r2, #1
 800dc80:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00a      	beq.n	800dca4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	430a      	orrs	r2, r1
 800dca2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	40013000 	.word	0x40013000
 800dcc4:	40003800 	.word	0x40003800
 800dcc8:	40003c00 	.word	0x40003c00

0800dccc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	603b      	str	r3, [r7, #0]
 800dcd8:	4613      	mov	r3, r2
 800dcda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dce0:	095b      	lsrs	r3, r3, #5
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	3301      	adds	r3, #1
 800dce6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	3330      	adds	r3, #48	; 0x30
 800dcee:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dcf0:	f7f5 fee4 	bl	8003abc <HAL_GetTick>
 800dcf4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d001      	beq.n	800dd06 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dd02:	2302      	movs	r3, #2
 800dd04:	e250      	b.n	800e1a8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <HAL_SPI_Receive+0x46>
 800dd0c:	88fb      	ldrh	r3, [r7, #6]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d101      	bne.n	800dd16 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e248      	b.n	800e1a8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d101      	bne.n	800dd24 <HAL_SPI_Receive+0x58>
 800dd20:	2302      	movs	r3, #2
 800dd22:	e241      	b.n	800e1a8 <HAL_SPI_Receive+0x4dc>
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2204      	movs	r2, #4
 800dd30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	88fa      	ldrh	r2, [r7, #6]
 800dd46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	88fa      	ldrh	r2, [r7, #6]
 800dd4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2200      	movs	r2, #0
 800dd72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dd7c:	d108      	bne.n	800dd90 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd8c:	601a      	str	r2, [r3, #0]
 800dd8e:	e009      	b.n	800dda4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dda2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	4b95      	ldr	r3, [pc, #596]	; (800e000 <HAL_SPI_Receive+0x334>)
 800ddac:	4013      	ands	r3, r2
 800ddae:	88f9      	ldrh	r1, [r7, #6]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	6812      	ldr	r2, [r2, #0]
 800ddb4:	430b      	orrs	r3, r1
 800ddb6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f042 0201 	orr.w	r2, r2, #1
 800ddc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddd0:	d107      	bne.n	800dde2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dde0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	2b0f      	cmp	r3, #15
 800dde8:	d96c      	bls.n	800dec4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ddea:	e064      	b.n	800deb6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	695b      	ldr	r3, [r3, #20]
 800ddf2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	f003 0301 	and.w	r3, r3, #1
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d114      	bne.n	800de2c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800de0c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de12:	1d1a      	adds	r2, r3, #4
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de1e:	b29b      	uxth	r3, r3
 800de20:	3b01      	subs	r3, #1
 800de22:	b29a      	uxth	r2, r3
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de2a:	e044      	b.n	800deb6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de32:	b29b      	uxth	r3, r3
 800de34:	8bfa      	ldrh	r2, [r7, #30]
 800de36:	429a      	cmp	r2, r3
 800de38:	d919      	bls.n	800de6e <HAL_SPI_Receive+0x1a2>
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d014      	beq.n	800de6e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800de4e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de54:	1d1a      	adds	r2, r3, #4
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de60:	b29b      	uxth	r3, r3
 800de62:	3b01      	subs	r3, #1
 800de64:	b29a      	uxth	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de6c:	e023      	b.n	800deb6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de6e:	f7f5 fe25 	bl	8003abc <HAL_GetTick>
 800de72:	4602      	mov	r2, r0
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	683a      	ldr	r2, [r7, #0]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d803      	bhi.n	800de86 <HAL_SPI_Receive+0x1ba>
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de84:	d102      	bne.n	800de8c <HAL_SPI_Receive+0x1c0>
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d114      	bne.n	800deb6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f000 f98f 	bl	800e1b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2201      	movs	r2, #1
 800dea6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800deb2:	2303      	movs	r3, #3
 800deb4:	e178      	b.n	800e1a8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800debc:	b29b      	uxth	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d194      	bne.n	800ddec <HAL_SPI_Receive+0x120>
 800dec2:	e15e      	b.n	800e182 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	2b07      	cmp	r3, #7
 800deca:	f240 8153 	bls.w	800e174 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dece:	e08f      	b.n	800dff0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	f003 0301 	and.w	r3, r3, #1
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d114      	bne.n	800df10 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deea:	69ba      	ldr	r2, [r7, #24]
 800deec:	8812      	ldrh	r2, [r2, #0]
 800deee:	b292      	uxth	r2, r2
 800def0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def6:	1c9a      	adds	r2, r3, #2
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df02:	b29b      	uxth	r3, r3
 800df04:	3b01      	subs	r3, #1
 800df06:	b29a      	uxth	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df0e:	e06f      	b.n	800dff0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df16:	b29b      	uxth	r3, r3
 800df18:	8bfa      	ldrh	r2, [r7, #30]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d924      	bls.n	800df68 <HAL_SPI_Receive+0x29c>
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d01f      	beq.n	800df68 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df2c:	69ba      	ldr	r2, [r7, #24]
 800df2e:	8812      	ldrh	r2, [r2, #0]
 800df30:	b292      	uxth	r2, r2
 800df32:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df38:	1c9a      	adds	r2, r3, #2
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df42:	69ba      	ldr	r2, [r7, #24]
 800df44:	8812      	ldrh	r2, [r2, #0]
 800df46:	b292      	uxth	r2, r2
 800df48:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df4e:	1c9a      	adds	r2, r3, #2
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	3b02      	subs	r3, #2
 800df5e:	b29a      	uxth	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df66:	e043      	b.n	800dff0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df6e:	b29b      	uxth	r3, r3
 800df70:	2b01      	cmp	r3, #1
 800df72:	d119      	bne.n	800dfa8 <HAL_SPI_Receive+0x2dc>
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d014      	beq.n	800dfa8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df82:	69ba      	ldr	r2, [r7, #24]
 800df84:	8812      	ldrh	r2, [r2, #0]
 800df86:	b292      	uxth	r2, r2
 800df88:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df8e:	1c9a      	adds	r2, r3, #2
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	3b01      	subs	r3, #1
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfa6:	e023      	b.n	800dff0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfa8:	f7f5 fd88 	bl	8003abc <HAL_GetTick>
 800dfac:	4602      	mov	r2, r0
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d803      	bhi.n	800dfc0 <HAL_SPI_Receive+0x2f4>
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfbe:	d102      	bne.n	800dfc6 <HAL_SPI_Receive+0x2fa>
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d114      	bne.n	800dff0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f000 f8f2 	bl	800e1b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dfec:	2303      	movs	r3, #3
 800dfee:	e0db      	b.n	800e1a8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f47f af69 	bne.w	800ded0 <HAL_SPI_Receive+0x204>
 800dffe:	e0c0      	b.n	800e182 <HAL_SPI_Receive+0x4b6>
 800e000:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	695b      	ldr	r3, [r3, #20]
 800e00a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	2b01      	cmp	r3, #1
 800e018:	d117      	bne.n	800e04a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e026:	7812      	ldrb	r2, [r2, #0]
 800e028:	b2d2      	uxtb	r2, r2
 800e02a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e030:	1c5a      	adds	r2, r3, #1
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	3b01      	subs	r3, #1
 800e040:	b29a      	uxth	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e048:	e094      	b.n	800e174 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e050:	b29b      	uxth	r3, r3
 800e052:	8bfa      	ldrh	r2, [r7, #30]
 800e054:	429a      	cmp	r2, r3
 800e056:	d946      	bls.n	800e0e6 <HAL_SPI_Receive+0x41a>
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d041      	beq.n	800e0e6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e06e:	7812      	ldrb	r2, [r2, #0]
 800e070:	b2d2      	uxtb	r2, r2
 800e072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e08a:	7812      	ldrb	r2, [r2, #0]
 800e08c:	b2d2      	uxtb	r2, r2
 800e08e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e094:	1c5a      	adds	r2, r3, #1
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0a6:	7812      	ldrb	r2, [r2, #0]
 800e0a8:	b2d2      	uxtb	r2, r2
 800e0aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0b0:	1c5a      	adds	r2, r3, #1
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c2:	7812      	ldrb	r2, [r2, #0]
 800e0c4:	b2d2      	uxtb	r2, r2
 800e0c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	3b04      	subs	r3, #4
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0e4:	e046      	b.n	800e174 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	2b03      	cmp	r3, #3
 800e0f0:	d81c      	bhi.n	800e12c <HAL_SPI_Receive+0x460>
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d017      	beq.n	800e12c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e108:	7812      	ldrb	r2, [r2, #0]
 800e10a:	b2d2      	uxtb	r2, r2
 800e10c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e11e:	b29b      	uxth	r3, r3
 800e120:	3b01      	subs	r3, #1
 800e122:	b29a      	uxth	r2, r3
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e12a:	e023      	b.n	800e174 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e12c:	f7f5 fcc6 	bl	8003abc <HAL_GetTick>
 800e130:	4602      	mov	r2, r0
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d803      	bhi.n	800e144 <HAL_SPI_Receive+0x478>
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e142:	d102      	bne.n	800e14a <HAL_SPI_Receive+0x47e>
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d114      	bne.n	800e174 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f000 f830 	bl	800e1b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2201      	movs	r2, #1
 800e164:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e170:	2303      	movs	r3, #3
 800e172:	e019      	b.n	800e1a8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f47f af41 	bne.w	800e004 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f000 f814 	bl	800e1b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e000      	b.n	800e1a8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e1a6:	2300      	movs	r3, #0
  }
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3720      	adds	r7, #32
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	695b      	ldr	r3, [r3, #20]
 800e1be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	699a      	ldr	r2, [r3, #24]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f042 0208 	orr.w	r2, r2, #8
 800e1ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	699a      	ldr	r2, [r3, #24]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f042 0210 	orr.w	r2, r2, #16
 800e1de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f022 0201 	bic.w	r2, r2, #1
 800e1ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6919      	ldr	r1, [r3, #16]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	4b3c      	ldr	r3, [pc, #240]	; (800e2ec <SPI_CloseTransfer+0x13c>)
 800e1fc:	400b      	ands	r3, r1
 800e1fe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	689a      	ldr	r2, [r3, #8]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e20e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e216:	b2db      	uxtb	r3, r3
 800e218:	2b04      	cmp	r3, #4
 800e21a:	d014      	beq.n	800e246 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f003 0320 	and.w	r3, r3, #32
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00f      	beq.n	800e246 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e22c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	699a      	ldr	r2, [r3, #24]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f042 0220 	orr.w	r2, r2, #32
 800e244:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b03      	cmp	r3, #3
 800e250:	d014      	beq.n	800e27c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00f      	beq.n	800e27c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e262:	f043 0204 	orr.w	r2, r3, #4
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	699a      	ldr	r2, [r3, #24]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e27a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00f      	beq.n	800e2a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e28c:	f043 0201 	orr.w	r2, r3, #1
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	699a      	ldr	r2, [r3, #24]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00f      	beq.n	800e2d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2b6:	f043 0208 	orr.w	r2, r3, #8
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	699a      	ldr	r2, [r3, #24]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e2e0:	bf00      	nop
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	fffffc90 	.word	0xfffffc90

0800e2f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2fc:	095b      	lsrs	r3, r3, #5
 800e2fe:	3301      	adds	r3, #1
 800e300:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	3301      	adds	r3, #1
 800e308:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	3307      	adds	r3, #7
 800e30e:	08db      	lsrs	r3, r3, #3
 800e310:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	fb02 f303 	mul.w	r3, r2, r3
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3714      	adds	r7, #20
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr

0800e326 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b082      	sub	sp, #8
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d101      	bne.n	800e338 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	e049      	b.n	800e3cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	2b00      	cmp	r3, #0
 800e342:	d106      	bne.n	800e352 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7f4 ff61 	bl	8003214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2202      	movs	r2, #2
 800e356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3304      	adds	r3, #4
 800e362:	4619      	mov	r1, r3
 800e364:	4610      	mov	r0, r2
 800e366:	f000 feed 	bl	800f144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2201      	movs	r2, #1
 800e376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2201      	movs	r2, #1
 800e37e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2201      	movs	r2, #1
 800e386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2201      	movs	r2, #1
 800e38e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2201      	movs	r2, #1
 800e396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d001      	beq.n	800e3ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e04c      	b.n	800e486 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2202      	movs	r2, #2
 800e3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a26      	ldr	r2, [pc, #152]	; (800e494 <HAL_TIM_Base_Start+0xc0>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d022      	beq.n	800e444 <HAL_TIM_Base_Start+0x70>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e406:	d01d      	beq.n	800e444 <HAL_TIM_Base_Start+0x70>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4a22      	ldr	r2, [pc, #136]	; (800e498 <HAL_TIM_Base_Start+0xc4>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d018      	beq.n	800e444 <HAL_TIM_Base_Start+0x70>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	4a21      	ldr	r2, [pc, #132]	; (800e49c <HAL_TIM_Base_Start+0xc8>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d013      	beq.n	800e444 <HAL_TIM_Base_Start+0x70>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a1f      	ldr	r2, [pc, #124]	; (800e4a0 <HAL_TIM_Base_Start+0xcc>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d00e      	beq.n	800e444 <HAL_TIM_Base_Start+0x70>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a1e      	ldr	r2, [pc, #120]	; (800e4a4 <HAL_TIM_Base_Start+0xd0>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d009      	beq.n	800e444 <HAL_TIM_Base_Start+0x70>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a1c      	ldr	r2, [pc, #112]	; (800e4a8 <HAL_TIM_Base_Start+0xd4>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d004      	beq.n	800e444 <HAL_TIM_Base_Start+0x70>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4a1b      	ldr	r2, [pc, #108]	; (800e4ac <HAL_TIM_Base_Start+0xd8>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d115      	bne.n	800e470 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	689a      	ldr	r2, [r3, #8]
 800e44a:	4b19      	ldr	r3, [pc, #100]	; (800e4b0 <HAL_TIM_Base_Start+0xdc>)
 800e44c:	4013      	ands	r3, r2
 800e44e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2b06      	cmp	r3, #6
 800e454:	d015      	beq.n	800e482 <HAL_TIM_Base_Start+0xae>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e45c:	d011      	beq.n	800e482 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f042 0201 	orr.w	r2, r2, #1
 800e46c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e46e:	e008      	b.n	800e482 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f042 0201 	orr.w	r2, r2, #1
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	e000      	b.n	800e484 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3714      	adds	r7, #20
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop
 800e494:	40010000 	.word	0x40010000
 800e498:	40000400 	.word	0x40000400
 800e49c:	40000800 	.word	0x40000800
 800e4a0:	40000c00 	.word	0x40000c00
 800e4a4:	40010400 	.word	0x40010400
 800e4a8:	40001800 	.word	0x40001800
 800e4ac:	40014000 	.word	0x40014000
 800e4b0:	00010007 	.word	0x00010007

0800e4b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d001      	beq.n	800e4cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e054      	b.n	800e576 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2202      	movs	r2, #2
 800e4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68da      	ldr	r2, [r3, #12]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f042 0201 	orr.w	r2, r2, #1
 800e4e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a26      	ldr	r2, [pc, #152]	; (800e584 <HAL_TIM_Base_Start_IT+0xd0>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d022      	beq.n	800e534 <HAL_TIM_Base_Start_IT+0x80>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4f6:	d01d      	beq.n	800e534 <HAL_TIM_Base_Start_IT+0x80>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a22      	ldr	r2, [pc, #136]	; (800e588 <HAL_TIM_Base_Start_IT+0xd4>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d018      	beq.n	800e534 <HAL_TIM_Base_Start_IT+0x80>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a21      	ldr	r2, [pc, #132]	; (800e58c <HAL_TIM_Base_Start_IT+0xd8>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d013      	beq.n	800e534 <HAL_TIM_Base_Start_IT+0x80>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a1f      	ldr	r2, [pc, #124]	; (800e590 <HAL_TIM_Base_Start_IT+0xdc>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d00e      	beq.n	800e534 <HAL_TIM_Base_Start_IT+0x80>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a1e      	ldr	r2, [pc, #120]	; (800e594 <HAL_TIM_Base_Start_IT+0xe0>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d009      	beq.n	800e534 <HAL_TIM_Base_Start_IT+0x80>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a1c      	ldr	r2, [pc, #112]	; (800e598 <HAL_TIM_Base_Start_IT+0xe4>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d004      	beq.n	800e534 <HAL_TIM_Base_Start_IT+0x80>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a1b      	ldr	r2, [pc, #108]	; (800e59c <HAL_TIM_Base_Start_IT+0xe8>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d115      	bne.n	800e560 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	689a      	ldr	r2, [r3, #8]
 800e53a:	4b19      	ldr	r3, [pc, #100]	; (800e5a0 <HAL_TIM_Base_Start_IT+0xec>)
 800e53c:	4013      	ands	r3, r2
 800e53e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2b06      	cmp	r3, #6
 800e544:	d015      	beq.n	800e572 <HAL_TIM_Base_Start_IT+0xbe>
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e54c:	d011      	beq.n	800e572 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f042 0201 	orr.w	r2, r2, #1
 800e55c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e55e:	e008      	b.n	800e572 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f042 0201 	orr.w	r2, r2, #1
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	e000      	b.n	800e574 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3714      	adds	r7, #20
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	40010000 	.word	0x40010000
 800e588:	40000400 	.word	0x40000400
 800e58c:	40000800 	.word	0x40000800
 800e590:	40000c00 	.word	0x40000c00
 800e594:	40010400 	.word	0x40010400
 800e598:	40001800 	.word	0x40001800
 800e59c:	40014000 	.word	0x40014000
 800e5a0:	00010007 	.word	0x00010007

0800e5a4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d109      	bne.n	800e5cc <HAL_TIM_OC_Start_IT+0x28>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	bf14      	ite	ne
 800e5c4:	2301      	movne	r3, #1
 800e5c6:	2300      	moveq	r3, #0
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	e03c      	b.n	800e646 <HAL_TIM_OC_Start_IT+0xa2>
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2b04      	cmp	r3, #4
 800e5d0:	d109      	bne.n	800e5e6 <HAL_TIM_OC_Start_IT+0x42>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	bf14      	ite	ne
 800e5de:	2301      	movne	r3, #1
 800e5e0:	2300      	moveq	r3, #0
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	e02f      	b.n	800e646 <HAL_TIM_OC_Start_IT+0xa2>
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	2b08      	cmp	r3, #8
 800e5ea:	d109      	bne.n	800e600 <HAL_TIM_OC_Start_IT+0x5c>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	bf14      	ite	ne
 800e5f8:	2301      	movne	r3, #1
 800e5fa:	2300      	moveq	r3, #0
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	e022      	b.n	800e646 <HAL_TIM_OC_Start_IT+0xa2>
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	2b0c      	cmp	r3, #12
 800e604:	d109      	bne.n	800e61a <HAL_TIM_OC_Start_IT+0x76>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	2b01      	cmp	r3, #1
 800e610:	bf14      	ite	ne
 800e612:	2301      	movne	r3, #1
 800e614:	2300      	moveq	r3, #0
 800e616:	b2db      	uxtb	r3, r3
 800e618:	e015      	b.n	800e646 <HAL_TIM_OC_Start_IT+0xa2>
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	2b10      	cmp	r3, #16
 800e61e:	d109      	bne.n	800e634 <HAL_TIM_OC_Start_IT+0x90>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b01      	cmp	r3, #1
 800e62a:	bf14      	ite	ne
 800e62c:	2301      	movne	r3, #1
 800e62e:	2300      	moveq	r3, #0
 800e630:	b2db      	uxtb	r3, r3
 800e632:	e008      	b.n	800e646 <HAL_TIM_OC_Start_IT+0xa2>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	bf14      	ite	ne
 800e640:	2301      	movne	r3, #1
 800e642:	2300      	moveq	r3, #0
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d001      	beq.n	800e64e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	e0ec      	b.n	800e828 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d104      	bne.n	800e65e <HAL_TIM_OC_Start_IT+0xba>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2202      	movs	r2, #2
 800e658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e65c:	e023      	b.n	800e6a6 <HAL_TIM_OC_Start_IT+0x102>
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b04      	cmp	r3, #4
 800e662:	d104      	bne.n	800e66e <HAL_TIM_OC_Start_IT+0xca>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2202      	movs	r2, #2
 800e668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e66c:	e01b      	b.n	800e6a6 <HAL_TIM_OC_Start_IT+0x102>
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	2b08      	cmp	r3, #8
 800e672:	d104      	bne.n	800e67e <HAL_TIM_OC_Start_IT+0xda>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2202      	movs	r2, #2
 800e678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e67c:	e013      	b.n	800e6a6 <HAL_TIM_OC_Start_IT+0x102>
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	2b0c      	cmp	r3, #12
 800e682:	d104      	bne.n	800e68e <HAL_TIM_OC_Start_IT+0xea>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2202      	movs	r2, #2
 800e688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e68c:	e00b      	b.n	800e6a6 <HAL_TIM_OC_Start_IT+0x102>
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	2b10      	cmp	r3, #16
 800e692:	d104      	bne.n	800e69e <HAL_TIM_OC_Start_IT+0xfa>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2202      	movs	r2, #2
 800e698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e69c:	e003      	b.n	800e6a6 <HAL_TIM_OC_Start_IT+0x102>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2202      	movs	r2, #2
 800e6a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	2b0c      	cmp	r3, #12
 800e6aa:	d841      	bhi.n	800e730 <HAL_TIM_OC_Start_IT+0x18c>
 800e6ac:	a201      	add	r2, pc, #4	; (adr r2, 800e6b4 <HAL_TIM_OC_Start_IT+0x110>)
 800e6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b2:	bf00      	nop
 800e6b4:	0800e6e9 	.word	0x0800e6e9
 800e6b8:	0800e731 	.word	0x0800e731
 800e6bc:	0800e731 	.word	0x0800e731
 800e6c0:	0800e731 	.word	0x0800e731
 800e6c4:	0800e6fb 	.word	0x0800e6fb
 800e6c8:	0800e731 	.word	0x0800e731
 800e6cc:	0800e731 	.word	0x0800e731
 800e6d0:	0800e731 	.word	0x0800e731
 800e6d4:	0800e70d 	.word	0x0800e70d
 800e6d8:	0800e731 	.word	0x0800e731
 800e6dc:	0800e731 	.word	0x0800e731
 800e6e0:	0800e731 	.word	0x0800e731
 800e6e4:	0800e71f 	.word	0x0800e71f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	68da      	ldr	r2, [r3, #12]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f042 0202 	orr.w	r2, r2, #2
 800e6f6:	60da      	str	r2, [r3, #12]
      break;
 800e6f8:	e01d      	b.n	800e736 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	68da      	ldr	r2, [r3, #12]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f042 0204 	orr.w	r2, r2, #4
 800e708:	60da      	str	r2, [r3, #12]
      break;
 800e70a:	e014      	b.n	800e736 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	68da      	ldr	r2, [r3, #12]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f042 0208 	orr.w	r2, r2, #8
 800e71a:	60da      	str	r2, [r3, #12]
      break;
 800e71c:	e00b      	b.n	800e736 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	68da      	ldr	r2, [r3, #12]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f042 0210 	orr.w	r2, r2, #16
 800e72c:	60da      	str	r2, [r3, #12]
      break;
 800e72e:	e002      	b.n	800e736 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e730:	2301      	movs	r3, #1
 800e732:	73fb      	strb	r3, [r7, #15]
      break;
 800e734:	bf00      	nop
  }

  if (status == HAL_OK)
 800e736:	7bfb      	ldrb	r3, [r7, #15]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d174      	bne.n	800e826 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2201      	movs	r2, #1
 800e742:	6839      	ldr	r1, [r7, #0]
 800e744:	4618      	mov	r0, r3
 800e746:	f001 f917 	bl	800f978 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4a38      	ldr	r2, [pc, #224]	; (800e830 <HAL_TIM_OC_Start_IT+0x28c>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d013      	beq.n	800e77c <HAL_TIM_OC_Start_IT+0x1d8>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a36      	ldr	r2, [pc, #216]	; (800e834 <HAL_TIM_OC_Start_IT+0x290>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d00e      	beq.n	800e77c <HAL_TIM_OC_Start_IT+0x1d8>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a35      	ldr	r2, [pc, #212]	; (800e838 <HAL_TIM_OC_Start_IT+0x294>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d009      	beq.n	800e77c <HAL_TIM_OC_Start_IT+0x1d8>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a33      	ldr	r2, [pc, #204]	; (800e83c <HAL_TIM_OC_Start_IT+0x298>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d004      	beq.n	800e77c <HAL_TIM_OC_Start_IT+0x1d8>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a32      	ldr	r2, [pc, #200]	; (800e840 <HAL_TIM_OC_Start_IT+0x29c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d101      	bne.n	800e780 <HAL_TIM_OC_Start_IT+0x1dc>
 800e77c:	2301      	movs	r3, #1
 800e77e:	e000      	b.n	800e782 <HAL_TIM_OC_Start_IT+0x1de>
 800e780:	2300      	movs	r3, #0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d007      	beq.n	800e796 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e794:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a25      	ldr	r2, [pc, #148]	; (800e830 <HAL_TIM_OC_Start_IT+0x28c>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d022      	beq.n	800e7e6 <HAL_TIM_OC_Start_IT+0x242>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7a8:	d01d      	beq.n	800e7e6 <HAL_TIM_OC_Start_IT+0x242>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a25      	ldr	r2, [pc, #148]	; (800e844 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d018      	beq.n	800e7e6 <HAL_TIM_OC_Start_IT+0x242>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a23      	ldr	r2, [pc, #140]	; (800e848 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d013      	beq.n	800e7e6 <HAL_TIM_OC_Start_IT+0x242>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4a22      	ldr	r2, [pc, #136]	; (800e84c <HAL_TIM_OC_Start_IT+0x2a8>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d00e      	beq.n	800e7e6 <HAL_TIM_OC_Start_IT+0x242>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a19      	ldr	r2, [pc, #100]	; (800e834 <HAL_TIM_OC_Start_IT+0x290>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d009      	beq.n	800e7e6 <HAL_TIM_OC_Start_IT+0x242>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a1e      	ldr	r2, [pc, #120]	; (800e850 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d004      	beq.n	800e7e6 <HAL_TIM_OC_Start_IT+0x242>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a15      	ldr	r2, [pc, #84]	; (800e838 <HAL_TIM_OC_Start_IT+0x294>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d115      	bne.n	800e812 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689a      	ldr	r2, [r3, #8]
 800e7ec:	4b19      	ldr	r3, [pc, #100]	; (800e854 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e7ee:	4013      	ands	r3, r2
 800e7f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	2b06      	cmp	r3, #6
 800e7f6:	d015      	beq.n	800e824 <HAL_TIM_OC_Start_IT+0x280>
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7fe:	d011      	beq.n	800e824 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f042 0201 	orr.w	r2, r2, #1
 800e80e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e810:	e008      	b.n	800e824 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f042 0201 	orr.w	r2, r2, #1
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	e000      	b.n	800e826 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e824:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e826:	7bfb      	ldrb	r3, [r7, #15]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	40010000 	.word	0x40010000
 800e834:	40010400 	.word	0x40010400
 800e838:	40014000 	.word	0x40014000
 800e83c:	40014400 	.word	0x40014400
 800e840:	40014800 	.word	0x40014800
 800e844:	40000400 	.word	0x40000400
 800e848:	40000800 	.word	0x40000800
 800e84c:	40000c00 	.word	0x40000c00
 800e850:	40001800 	.word	0x40001800
 800e854:	00010007 	.word	0x00010007

0800e858 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	2b0c      	cmp	r3, #12
 800e86a:	d841      	bhi.n	800e8f0 <HAL_TIM_OC_Stop_IT+0x98>
 800e86c:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e872:	bf00      	nop
 800e874:	0800e8a9 	.word	0x0800e8a9
 800e878:	0800e8f1 	.word	0x0800e8f1
 800e87c:	0800e8f1 	.word	0x0800e8f1
 800e880:	0800e8f1 	.word	0x0800e8f1
 800e884:	0800e8bb 	.word	0x0800e8bb
 800e888:	0800e8f1 	.word	0x0800e8f1
 800e88c:	0800e8f1 	.word	0x0800e8f1
 800e890:	0800e8f1 	.word	0x0800e8f1
 800e894:	0800e8cd 	.word	0x0800e8cd
 800e898:	0800e8f1 	.word	0x0800e8f1
 800e89c:	0800e8f1 	.word	0x0800e8f1
 800e8a0:	0800e8f1 	.word	0x0800e8f1
 800e8a4:	0800e8df 	.word	0x0800e8df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	68da      	ldr	r2, [r3, #12]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f022 0202 	bic.w	r2, r2, #2
 800e8b6:	60da      	str	r2, [r3, #12]
      break;
 800e8b8:	e01d      	b.n	800e8f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68da      	ldr	r2, [r3, #12]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f022 0204 	bic.w	r2, r2, #4
 800e8c8:	60da      	str	r2, [r3, #12]
      break;
 800e8ca:	e014      	b.n	800e8f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68da      	ldr	r2, [r3, #12]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f022 0208 	bic.w	r2, r2, #8
 800e8da:	60da      	str	r2, [r3, #12]
      break;
 800e8dc:	e00b      	b.n	800e8f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	68da      	ldr	r2, [r3, #12]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f022 0210 	bic.w	r2, r2, #16
 800e8ec:	60da      	str	r2, [r3, #12]
      break;
 800e8ee:	e002      	b.n	800e8f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e8f4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e8f6:	7bfb      	ldrb	r3, [r7, #15]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f040 8081 	bne.w	800ea00 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2200      	movs	r2, #0
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	4618      	mov	r0, r3
 800e908:	f001 f836 	bl	800f978 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a3e      	ldr	r2, [pc, #248]	; (800ea0c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d013      	beq.n	800e93e <HAL_TIM_OC_Stop_IT+0xe6>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a3d      	ldr	r2, [pc, #244]	; (800ea10 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d00e      	beq.n	800e93e <HAL_TIM_OC_Stop_IT+0xe6>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a3b      	ldr	r2, [pc, #236]	; (800ea14 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d009      	beq.n	800e93e <HAL_TIM_OC_Stop_IT+0xe6>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a3a      	ldr	r2, [pc, #232]	; (800ea18 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d004      	beq.n	800e93e <HAL_TIM_OC_Stop_IT+0xe6>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a38      	ldr	r2, [pc, #224]	; (800ea1c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d101      	bne.n	800e942 <HAL_TIM_OC_Stop_IT+0xea>
 800e93e:	2301      	movs	r3, #1
 800e940:	e000      	b.n	800e944 <HAL_TIM_OC_Stop_IT+0xec>
 800e942:	2300      	movs	r3, #0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d017      	beq.n	800e978 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	6a1a      	ldr	r2, [r3, #32]
 800e94e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e952:	4013      	ands	r3, r2
 800e954:	2b00      	cmp	r3, #0
 800e956:	d10f      	bne.n	800e978 <HAL_TIM_OC_Stop_IT+0x120>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6a1a      	ldr	r2, [r3, #32]
 800e95e:	f240 4344 	movw	r3, #1092	; 0x444
 800e962:	4013      	ands	r3, r2
 800e964:	2b00      	cmp	r3, #0
 800e966:	d107      	bne.n	800e978 <HAL_TIM_OC_Stop_IT+0x120>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e976:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6a1a      	ldr	r2, [r3, #32]
 800e97e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e982:	4013      	ands	r3, r2
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10f      	bne.n	800e9a8 <HAL_TIM_OC_Stop_IT+0x150>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	6a1a      	ldr	r2, [r3, #32]
 800e98e:	f240 4344 	movw	r3, #1092	; 0x444
 800e992:	4013      	ands	r3, r2
 800e994:	2b00      	cmp	r3, #0
 800e996:	d107      	bne.n	800e9a8 <HAL_TIM_OC_Stop_IT+0x150>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f022 0201 	bic.w	r2, r2, #1
 800e9a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d104      	bne.n	800e9b8 <HAL_TIM_OC_Stop_IT+0x160>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9b6:	e023      	b.n	800ea00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	2b04      	cmp	r3, #4
 800e9bc:	d104      	bne.n	800e9c8 <HAL_TIM_OC_Stop_IT+0x170>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9c6:	e01b      	b.n	800ea00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	2b08      	cmp	r3, #8
 800e9cc:	d104      	bne.n	800e9d8 <HAL_TIM_OC_Stop_IT+0x180>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9d6:	e013      	b.n	800ea00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	2b0c      	cmp	r3, #12
 800e9dc:	d104      	bne.n	800e9e8 <HAL_TIM_OC_Stop_IT+0x190>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9e6:	e00b      	b.n	800ea00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	2b10      	cmp	r3, #16
 800e9ec:	d104      	bne.n	800e9f8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9f6:	e003      	b.n	800ea00 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ea00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	40010000 	.word	0x40010000
 800ea10:	40010400 	.word	0x40010400
 800ea14:	40014000 	.word	0x40014000
 800ea18:	40014400 	.word	0x40014400
 800ea1c:	40014800 	.word	0x40014800

0800ea20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d101      	bne.n	800ea32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e049      	b.n	800eac6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d106      	bne.n	800ea4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 f841 	bl	800eace <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2202      	movs	r2, #2
 800ea50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4610      	mov	r0, r2
 800ea60:	f000 fb70 	bl	800f144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2201      	movs	r2, #1
 800ea68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2201      	movs	r2, #1
 800ea98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2201      	movs	r2, #1
 800eab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2201      	movs	r2, #1
 800eab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2201      	movs	r2, #1
 800eac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800eace:	b480      	push	{r7}
 800ead0:	b083      	sub	sp, #12
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ead6:	bf00      	nop
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b084      	sub	sp, #16
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	f003 0302 	and.w	r3, r3, #2
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d020      	beq.n	800eb46 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f003 0302 	and.w	r3, r3, #2
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d01b      	beq.n	800eb46 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f06f 0202 	mvn.w	r2, #2
 800eb16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	699b      	ldr	r3, [r3, #24]
 800eb24:	f003 0303 	and.w	r3, r3, #3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d003      	beq.n	800eb34 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 faeb 	bl	800f108 <HAL_TIM_IC_CaptureCallback>
 800eb32:	e005      	b.n	800eb40 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7f1 fd63 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 faee 	bl	800f11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	f003 0304 	and.w	r3, r3, #4
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d020      	beq.n	800eb92 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f003 0304 	and.w	r3, r3, #4
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d01b      	beq.n	800eb92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f06f 0204 	mvn.w	r2, #4
 800eb62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2202      	movs	r2, #2
 800eb68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d003      	beq.n	800eb80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 fac5 	bl	800f108 <HAL_TIM_IC_CaptureCallback>
 800eb7e:	e005      	b.n	800eb8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7f1 fd3d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 fac8 	bl	800f11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	f003 0308 	and.w	r3, r3, #8
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d020      	beq.n	800ebde <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f003 0308 	and.w	r3, r3, #8
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d01b      	beq.n	800ebde <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f06f 0208 	mvn.w	r2, #8
 800ebae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2204      	movs	r2, #4
 800ebb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	69db      	ldr	r3, [r3, #28]
 800ebbc:	f003 0303 	and.w	r3, r3, #3
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d003      	beq.n	800ebcc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 fa9f 	bl	800f108 <HAL_TIM_IC_CaptureCallback>
 800ebca:	e005      	b.n	800ebd8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7f1 fd17 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 faa2 	bl	800f11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f003 0310 	and.w	r3, r3, #16
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d020      	beq.n	800ec2a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f003 0310 	and.w	r3, r3, #16
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d01b      	beq.n	800ec2a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f06f 0210 	mvn.w	r2, #16
 800ebfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2208      	movs	r2, #8
 800ec00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	69db      	ldr	r3, [r3, #28]
 800ec08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d003      	beq.n	800ec18 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 fa79 	bl	800f108 <HAL_TIM_IC_CaptureCallback>
 800ec16:	e005      	b.n	800ec24 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7f1 fcf1 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 fa7c 	bl	800f11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2200      	movs	r2, #0
 800ec28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00c      	beq.n	800ec4e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f003 0301 	and.w	r3, r3, #1
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d007      	beq.n	800ec4e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f06f 0201 	mvn.w	r2, #1
 800ec46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7f3 ffbf 	bl	8002bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d104      	bne.n	800ec62 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00c      	beq.n	800ec7c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d007      	beq.n	800ec7c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ec74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 ffba 	bl	800fbf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d00c      	beq.n	800eca0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d007      	beq.n	800eca0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 ffb2 	bl	800fc04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d00c      	beq.n	800ecc4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d007      	beq.n	800ecc4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ecbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 fa36 	bl	800f130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	f003 0320 	and.w	r3, r3, #32
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00c      	beq.n	800ece8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f003 0320 	and.w	r3, r3, #32
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d007      	beq.n	800ece8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f06f 0220 	mvn.w	r2, #32
 800ece0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 ff7a 	bl	800fbdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ece8:	bf00      	nop
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d101      	bne.n	800ed0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	e0ff      	b.n	800ef0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2201      	movs	r2, #1
 800ed12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b14      	cmp	r3, #20
 800ed1a:	f200 80f0 	bhi.w	800eefe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ed1e:	a201      	add	r2, pc, #4	; (adr r2, 800ed24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ed20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed24:	0800ed79 	.word	0x0800ed79
 800ed28:	0800eeff 	.word	0x0800eeff
 800ed2c:	0800eeff 	.word	0x0800eeff
 800ed30:	0800eeff 	.word	0x0800eeff
 800ed34:	0800edb9 	.word	0x0800edb9
 800ed38:	0800eeff 	.word	0x0800eeff
 800ed3c:	0800eeff 	.word	0x0800eeff
 800ed40:	0800eeff 	.word	0x0800eeff
 800ed44:	0800edfb 	.word	0x0800edfb
 800ed48:	0800eeff 	.word	0x0800eeff
 800ed4c:	0800eeff 	.word	0x0800eeff
 800ed50:	0800eeff 	.word	0x0800eeff
 800ed54:	0800ee3b 	.word	0x0800ee3b
 800ed58:	0800eeff 	.word	0x0800eeff
 800ed5c:	0800eeff 	.word	0x0800eeff
 800ed60:	0800eeff 	.word	0x0800eeff
 800ed64:	0800ee7d 	.word	0x0800ee7d
 800ed68:	0800eeff 	.word	0x0800eeff
 800ed6c:	0800eeff 	.word	0x0800eeff
 800ed70:	0800eeff 	.word	0x0800eeff
 800ed74:	0800eebd 	.word	0x0800eebd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f000 fa86 	bl	800f290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	699a      	ldr	r2, [r3, #24]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f042 0208 	orr.w	r2, r2, #8
 800ed92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	699a      	ldr	r2, [r3, #24]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f022 0204 	bic.w	r2, r2, #4
 800eda2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6999      	ldr	r1, [r3, #24]
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	691a      	ldr	r2, [r3, #16]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	430a      	orrs	r2, r1
 800edb4:	619a      	str	r2, [r3, #24]
      break;
 800edb6:	e0a5      	b.n	800ef04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68b9      	ldr	r1, [r7, #8]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 faf6 	bl	800f3b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	699a      	ldr	r2, [r3, #24]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800edd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	699a      	ldr	r2, [r3, #24]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ede2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	6999      	ldr	r1, [r3, #24]
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	021a      	lsls	r2, r3, #8
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	430a      	orrs	r2, r1
 800edf6:	619a      	str	r2, [r3, #24]
      break;
 800edf8:	e084      	b.n	800ef04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	68b9      	ldr	r1, [r7, #8]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f000 fb5f 	bl	800f4c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	69da      	ldr	r2, [r3, #28]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f042 0208 	orr.w	r2, r2, #8
 800ee14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	69da      	ldr	r2, [r3, #28]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f022 0204 	bic.w	r2, r2, #4
 800ee24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	69d9      	ldr	r1, [r3, #28]
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	691a      	ldr	r2, [r3, #16]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	61da      	str	r2, [r3, #28]
      break;
 800ee38:	e064      	b.n	800ef04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	68b9      	ldr	r1, [r7, #8]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f000 fbc7 	bl	800f5d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	69da      	ldr	r2, [r3, #28]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	69da      	ldr	r2, [r3, #28]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	69d9      	ldr	r1, [r3, #28]
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	021a      	lsls	r2, r3, #8
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	430a      	orrs	r2, r1
 800ee78:	61da      	str	r2, [r3, #28]
      break;
 800ee7a:	e043      	b.n	800ef04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68b9      	ldr	r1, [r7, #8]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f000 fc10 	bl	800f6a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f042 0208 	orr.w	r2, r2, #8
 800ee96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f022 0204 	bic.w	r2, r2, #4
 800eea6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	691a      	ldr	r2, [r3, #16]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	430a      	orrs	r2, r1
 800eeb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eeba:	e023      	b.n	800ef04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68b9      	ldr	r1, [r7, #8]
 800eec2:	4618      	mov	r0, r3
 800eec4:	f000 fc54 	bl	800f770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eed6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eee6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	691b      	ldr	r3, [r3, #16]
 800eef2:	021a      	lsls	r2, r3, #8
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	430a      	orrs	r2, r1
 800eefa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eefc:	e002      	b.n	800ef04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	75fb      	strb	r3, [r7, #23]
      break;
 800ef02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop

0800ef18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d101      	bne.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c>
 800ef30:	2302      	movs	r3, #2
 800ef32:	e0dc      	b.n	800f0ee <HAL_TIM_ConfigClockSource+0x1d6>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2202      	movs	r2, #2
 800ef40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	4b6a      	ldr	r3, [pc, #424]	; (800f0f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ef50:	4013      	ands	r3, r2
 800ef52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ef5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	68ba      	ldr	r2, [r7, #8]
 800ef62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a64      	ldr	r2, [pc, #400]	; (800f0fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	f000 80a9 	beq.w	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef70:	4a62      	ldr	r2, [pc, #392]	; (800f0fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	f200 80ae 	bhi.w	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef78:	4a61      	ldr	r2, [pc, #388]	; (800f100 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	f000 80a1 	beq.w	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef80:	4a5f      	ldr	r2, [pc, #380]	; (800f100 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	f200 80a6 	bhi.w	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef88:	4a5e      	ldr	r2, [pc, #376]	; (800f104 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	f000 8099 	beq.w	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef90:	4a5c      	ldr	r2, [pc, #368]	; (800f104 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	f200 809e 	bhi.w	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ef9c:	f000 8091 	beq.w	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800efa0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800efa4:	f200 8096 	bhi.w	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800efa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efac:	f000 8089 	beq.w	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800efb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efb4:	f200 808e 	bhi.w	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800efb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efbc:	d03e      	beq.n	800f03c <HAL_TIM_ConfigClockSource+0x124>
 800efbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efc2:	f200 8087 	bhi.w	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800efc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efca:	f000 8086 	beq.w	800f0da <HAL_TIM_ConfigClockSource+0x1c2>
 800efce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efd2:	d87f      	bhi.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800efd4:	2b70      	cmp	r3, #112	; 0x70
 800efd6:	d01a      	beq.n	800f00e <HAL_TIM_ConfigClockSource+0xf6>
 800efd8:	2b70      	cmp	r3, #112	; 0x70
 800efda:	d87b      	bhi.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800efdc:	2b60      	cmp	r3, #96	; 0x60
 800efde:	d050      	beq.n	800f082 <HAL_TIM_ConfigClockSource+0x16a>
 800efe0:	2b60      	cmp	r3, #96	; 0x60
 800efe2:	d877      	bhi.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800efe4:	2b50      	cmp	r3, #80	; 0x50
 800efe6:	d03c      	beq.n	800f062 <HAL_TIM_ConfigClockSource+0x14a>
 800efe8:	2b50      	cmp	r3, #80	; 0x50
 800efea:	d873      	bhi.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800efec:	2b40      	cmp	r3, #64	; 0x40
 800efee:	d058      	beq.n	800f0a2 <HAL_TIM_ConfigClockSource+0x18a>
 800eff0:	2b40      	cmp	r3, #64	; 0x40
 800eff2:	d86f      	bhi.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800eff4:	2b30      	cmp	r3, #48	; 0x30
 800eff6:	d064      	beq.n	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800eff8:	2b30      	cmp	r3, #48	; 0x30
 800effa:	d86b      	bhi.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800effc:	2b20      	cmp	r3, #32
 800effe:	d060      	beq.n	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f000:	2b20      	cmp	r3, #32
 800f002:	d867      	bhi.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f004:	2b00      	cmp	r3, #0
 800f006:	d05c      	beq.n	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f008:	2b10      	cmp	r3, #16
 800f00a:	d05a      	beq.n	800f0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f00c:	e062      	b.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6818      	ldr	r0, [r3, #0]
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	6899      	ldr	r1, [r3, #8]
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	685a      	ldr	r2, [r3, #4]
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	f000 fc8b 	bl	800f938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	689b      	ldr	r3, [r3, #8]
 800f028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	609a      	str	r2, [r3, #8]
      break;
 800f03a:	e04f      	b.n	800f0dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6818      	ldr	r0, [r3, #0]
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	6899      	ldr	r1, [r3, #8]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f000 fc74 	bl	800f938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	689a      	ldr	r2, [r3, #8]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f05e:	609a      	str	r2, [r3, #8]
      break;
 800f060:	e03c      	b.n	800f0dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6818      	ldr	r0, [r3, #0]
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	6859      	ldr	r1, [r3, #4]
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	461a      	mov	r2, r3
 800f070:	f000 fbe4 	bl	800f83c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2150      	movs	r1, #80	; 0x50
 800f07a:	4618      	mov	r0, r3
 800f07c:	f000 fc3e 	bl	800f8fc <TIM_ITRx_SetConfig>
      break;
 800f080:	e02c      	b.n	800f0dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6818      	ldr	r0, [r3, #0]
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	6859      	ldr	r1, [r3, #4]
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	461a      	mov	r2, r3
 800f090:	f000 fc03 	bl	800f89a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2160      	movs	r1, #96	; 0x60
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 fc2e 	bl	800f8fc <TIM_ITRx_SetConfig>
      break;
 800f0a0:	e01c      	b.n	800f0dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6818      	ldr	r0, [r3, #0]
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	6859      	ldr	r1, [r3, #4]
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	f000 fbc4 	bl	800f83c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2140      	movs	r1, #64	; 0x40
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f000 fc1e 	bl	800f8fc <TIM_ITRx_SetConfig>
      break;
 800f0c0:	e00c      	b.n	800f0dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	f000 fc15 	bl	800f8fc <TIM_ITRx_SetConfig>
      break;
 800f0d2:	e003      	b.n	800f0dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f0d8:	e000      	b.n	800f0dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f0da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	ffceff88 	.word	0xffceff88
 800f0fc:	00100040 	.word	0x00100040
 800f100:	00100030 	.word	0x00100030
 800f104:	00100020 	.word	0x00100020

0800f108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f124:	bf00      	nop
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a46      	ldr	r2, [pc, #280]	; (800f270 <TIM_Base_SetConfig+0x12c>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d013      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f162:	d00f      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	4a43      	ldr	r2, [pc, #268]	; (800f274 <TIM_Base_SetConfig+0x130>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d00b      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a42      	ldr	r2, [pc, #264]	; (800f278 <TIM_Base_SetConfig+0x134>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d007      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a41      	ldr	r2, [pc, #260]	; (800f27c <TIM_Base_SetConfig+0x138>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d003      	beq.n	800f184 <TIM_Base_SetConfig+0x40>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	4a40      	ldr	r2, [pc, #256]	; (800f280 <TIM_Base_SetConfig+0x13c>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d108      	bne.n	800f196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	4313      	orrs	r3, r2
 800f194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a35      	ldr	r2, [pc, #212]	; (800f270 <TIM_Base_SetConfig+0x12c>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d01f      	beq.n	800f1de <TIM_Base_SetConfig+0x9a>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1a4:	d01b      	beq.n	800f1de <TIM_Base_SetConfig+0x9a>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a32      	ldr	r2, [pc, #200]	; (800f274 <TIM_Base_SetConfig+0x130>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d017      	beq.n	800f1de <TIM_Base_SetConfig+0x9a>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a31      	ldr	r2, [pc, #196]	; (800f278 <TIM_Base_SetConfig+0x134>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d013      	beq.n	800f1de <TIM_Base_SetConfig+0x9a>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a30      	ldr	r2, [pc, #192]	; (800f27c <TIM_Base_SetConfig+0x138>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d00f      	beq.n	800f1de <TIM_Base_SetConfig+0x9a>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a2f      	ldr	r2, [pc, #188]	; (800f280 <TIM_Base_SetConfig+0x13c>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d00b      	beq.n	800f1de <TIM_Base_SetConfig+0x9a>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a2e      	ldr	r2, [pc, #184]	; (800f284 <TIM_Base_SetConfig+0x140>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d007      	beq.n	800f1de <TIM_Base_SetConfig+0x9a>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a2d      	ldr	r2, [pc, #180]	; (800f288 <TIM_Base_SetConfig+0x144>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d003      	beq.n	800f1de <TIM_Base_SetConfig+0x9a>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a2c      	ldr	r2, [pc, #176]	; (800f28c <TIM_Base_SetConfig+0x148>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d108      	bne.n	800f1f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	68fa      	ldr	r2, [r7, #12]
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	695b      	ldr	r3, [r3, #20]
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	689a      	ldr	r2, [r3, #8]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a16      	ldr	r2, [pc, #88]	; (800f270 <TIM_Base_SetConfig+0x12c>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d00f      	beq.n	800f23c <TIM_Base_SetConfig+0xf8>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a18      	ldr	r2, [pc, #96]	; (800f280 <TIM_Base_SetConfig+0x13c>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d00b      	beq.n	800f23c <TIM_Base_SetConfig+0xf8>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a17      	ldr	r2, [pc, #92]	; (800f284 <TIM_Base_SetConfig+0x140>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d007      	beq.n	800f23c <TIM_Base_SetConfig+0xf8>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a16      	ldr	r2, [pc, #88]	; (800f288 <TIM_Base_SetConfig+0x144>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d003      	beq.n	800f23c <TIM_Base_SetConfig+0xf8>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a15      	ldr	r2, [pc, #84]	; (800f28c <TIM_Base_SetConfig+0x148>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d103      	bne.n	800f244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	691a      	ldr	r2, [r3, #16]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2201      	movs	r2, #1
 800f248:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	f003 0301 	and.w	r3, r3, #1
 800f252:	2b01      	cmp	r3, #1
 800f254:	d105      	bne.n	800f262 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	f023 0201 	bic.w	r2, r3, #1
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	611a      	str	r2, [r3, #16]
  }
}
 800f262:	bf00      	nop
 800f264:	3714      	adds	r7, #20
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	40010000 	.word	0x40010000
 800f274:	40000400 	.word	0x40000400
 800f278:	40000800 	.word	0x40000800
 800f27c:	40000c00 	.word	0x40000c00
 800f280:	40010400 	.word	0x40010400
 800f284:	40014000 	.word	0x40014000
 800f288:	40014400 	.word	0x40014400
 800f28c:	40014800 	.word	0x40014800

0800f290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f290:	b480      	push	{r7}
 800f292:	b087      	sub	sp, #28
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a1b      	ldr	r3, [r3, #32]
 800f29e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6a1b      	ldr	r3, [r3, #32]
 800f2a4:	f023 0201 	bic.w	r2, r3, #1
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	699b      	ldr	r3, [r3, #24]
 800f2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	4b37      	ldr	r3, [pc, #220]	; (800f398 <TIM_OC1_SetConfig+0x108>)
 800f2bc:	4013      	ands	r3, r2
 800f2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f023 0303 	bic.w	r3, r3, #3
 800f2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	f023 0302 	bic.w	r3, r3, #2
 800f2d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	689b      	ldr	r3, [r3, #8]
 800f2de:	697a      	ldr	r2, [r7, #20]
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4a2d      	ldr	r2, [pc, #180]	; (800f39c <TIM_OC1_SetConfig+0x10c>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d00f      	beq.n	800f30c <TIM_OC1_SetConfig+0x7c>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4a2c      	ldr	r2, [pc, #176]	; (800f3a0 <TIM_OC1_SetConfig+0x110>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d00b      	beq.n	800f30c <TIM_OC1_SetConfig+0x7c>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	4a2b      	ldr	r2, [pc, #172]	; (800f3a4 <TIM_OC1_SetConfig+0x114>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d007      	beq.n	800f30c <TIM_OC1_SetConfig+0x7c>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4a2a      	ldr	r2, [pc, #168]	; (800f3a8 <TIM_OC1_SetConfig+0x118>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d003      	beq.n	800f30c <TIM_OC1_SetConfig+0x7c>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a29      	ldr	r2, [pc, #164]	; (800f3ac <TIM_OC1_SetConfig+0x11c>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d10c      	bne.n	800f326 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	f023 0308 	bic.w	r3, r3, #8
 800f312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	697a      	ldr	r2, [r7, #20]
 800f31a:	4313      	orrs	r3, r2
 800f31c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	f023 0304 	bic.w	r3, r3, #4
 800f324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a1c      	ldr	r2, [pc, #112]	; (800f39c <TIM_OC1_SetConfig+0x10c>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d00f      	beq.n	800f34e <TIM_OC1_SetConfig+0xbe>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a1b      	ldr	r2, [pc, #108]	; (800f3a0 <TIM_OC1_SetConfig+0x110>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d00b      	beq.n	800f34e <TIM_OC1_SetConfig+0xbe>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a1a      	ldr	r2, [pc, #104]	; (800f3a4 <TIM_OC1_SetConfig+0x114>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d007      	beq.n	800f34e <TIM_OC1_SetConfig+0xbe>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4a19      	ldr	r2, [pc, #100]	; (800f3a8 <TIM_OC1_SetConfig+0x118>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d003      	beq.n	800f34e <TIM_OC1_SetConfig+0xbe>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4a18      	ldr	r2, [pc, #96]	; (800f3ac <TIM_OC1_SetConfig+0x11c>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d111      	bne.n	800f372 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f35c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	695b      	ldr	r3, [r3, #20]
 800f362:	693a      	ldr	r2, [r7, #16]
 800f364:	4313      	orrs	r3, r2
 800f366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	693a      	ldr	r2, [r7, #16]
 800f36e:	4313      	orrs	r3, r2
 800f370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	693a      	ldr	r2, [r7, #16]
 800f376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	68fa      	ldr	r2, [r7, #12]
 800f37c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	685a      	ldr	r2, [r3, #4]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	697a      	ldr	r2, [r7, #20]
 800f38a:	621a      	str	r2, [r3, #32]
}
 800f38c:	bf00      	nop
 800f38e:	371c      	adds	r7, #28
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr
 800f398:	fffeff8f 	.word	0xfffeff8f
 800f39c:	40010000 	.word	0x40010000
 800f3a0:	40010400 	.word	0x40010400
 800f3a4:	40014000 	.word	0x40014000
 800f3a8:	40014400 	.word	0x40014400
 800f3ac:	40014800 	.word	0x40014800

0800f3b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b087      	sub	sp, #28
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6a1b      	ldr	r3, [r3, #32]
 800f3be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a1b      	ldr	r3, [r3, #32]
 800f3c4:	f023 0210 	bic.w	r2, r3, #16
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	699b      	ldr	r3, [r3, #24]
 800f3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	4b34      	ldr	r3, [pc, #208]	; (800f4ac <TIM_OC2_SetConfig+0xfc>)
 800f3dc:	4013      	ands	r3, r2
 800f3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	021b      	lsls	r3, r3, #8
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	f023 0320 	bic.w	r3, r3, #32
 800f3fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	011b      	lsls	r3, r3, #4
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	4313      	orrs	r3, r2
 800f406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a29      	ldr	r2, [pc, #164]	; (800f4b0 <TIM_OC2_SetConfig+0x100>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d003      	beq.n	800f418 <TIM_OC2_SetConfig+0x68>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4a28      	ldr	r2, [pc, #160]	; (800f4b4 <TIM_OC2_SetConfig+0x104>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d10d      	bne.n	800f434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f41e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	011b      	lsls	r3, r3, #4
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	4313      	orrs	r3, r2
 800f42a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a1e      	ldr	r2, [pc, #120]	; (800f4b0 <TIM_OC2_SetConfig+0x100>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d00f      	beq.n	800f45c <TIM_OC2_SetConfig+0xac>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a1d      	ldr	r2, [pc, #116]	; (800f4b4 <TIM_OC2_SetConfig+0x104>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d00b      	beq.n	800f45c <TIM_OC2_SetConfig+0xac>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a1c      	ldr	r2, [pc, #112]	; (800f4b8 <TIM_OC2_SetConfig+0x108>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d007      	beq.n	800f45c <TIM_OC2_SetConfig+0xac>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4a1b      	ldr	r2, [pc, #108]	; (800f4bc <TIM_OC2_SetConfig+0x10c>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d003      	beq.n	800f45c <TIM_OC2_SetConfig+0xac>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4a1a      	ldr	r2, [pc, #104]	; (800f4c0 <TIM_OC2_SetConfig+0x110>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d113      	bne.n	800f484 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f46a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	695b      	ldr	r3, [r3, #20]
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	4313      	orrs	r3, r2
 800f476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	699b      	ldr	r3, [r3, #24]
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	693a      	ldr	r2, [r7, #16]
 800f480:	4313      	orrs	r3, r2
 800f482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	693a      	ldr	r2, [r7, #16]
 800f488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	685a      	ldr	r2, [r3, #4]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	621a      	str	r2, [r3, #32]
}
 800f49e:	bf00      	nop
 800f4a0:	371c      	adds	r7, #28
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	feff8fff 	.word	0xfeff8fff
 800f4b0:	40010000 	.word	0x40010000
 800f4b4:	40010400 	.word	0x40010400
 800f4b8:	40014000 	.word	0x40014000
 800f4bc:	40014400 	.word	0x40014400
 800f4c0:	40014800 	.word	0x40014800

0800f4c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b087      	sub	sp, #28
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a1b      	ldr	r3, [r3, #32]
 800f4d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a1b      	ldr	r3, [r3, #32]
 800f4d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	69db      	ldr	r3, [r3, #28]
 800f4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	4b33      	ldr	r3, [pc, #204]	; (800f5bc <TIM_OC3_SetConfig+0xf8>)
 800f4f0:	4013      	ands	r3, r2
 800f4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f023 0303 	bic.w	r3, r3, #3
 800f4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	4313      	orrs	r3, r2
 800f504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	021b      	lsls	r3, r3, #8
 800f514:	697a      	ldr	r2, [r7, #20]
 800f516:	4313      	orrs	r3, r2
 800f518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a28      	ldr	r2, [pc, #160]	; (800f5c0 <TIM_OC3_SetConfig+0xfc>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d003      	beq.n	800f52a <TIM_OC3_SetConfig+0x66>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a27      	ldr	r2, [pc, #156]	; (800f5c4 <TIM_OC3_SetConfig+0x100>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d10d      	bne.n	800f546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	021b      	lsls	r3, r3, #8
 800f538:	697a      	ldr	r2, [r7, #20]
 800f53a:	4313      	orrs	r3, r2
 800f53c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a1d      	ldr	r2, [pc, #116]	; (800f5c0 <TIM_OC3_SetConfig+0xfc>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d00f      	beq.n	800f56e <TIM_OC3_SetConfig+0xaa>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a1c      	ldr	r2, [pc, #112]	; (800f5c4 <TIM_OC3_SetConfig+0x100>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d00b      	beq.n	800f56e <TIM_OC3_SetConfig+0xaa>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a1b      	ldr	r2, [pc, #108]	; (800f5c8 <TIM_OC3_SetConfig+0x104>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d007      	beq.n	800f56e <TIM_OC3_SetConfig+0xaa>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a1a      	ldr	r2, [pc, #104]	; (800f5cc <TIM_OC3_SetConfig+0x108>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d003      	beq.n	800f56e <TIM_OC3_SetConfig+0xaa>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a19      	ldr	r2, [pc, #100]	; (800f5d0 <TIM_OC3_SetConfig+0x10c>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d113      	bne.n	800f596 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	695b      	ldr	r3, [r3, #20]
 800f582:	011b      	lsls	r3, r3, #4
 800f584:	693a      	ldr	r2, [r7, #16]
 800f586:	4313      	orrs	r3, r2
 800f588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	699b      	ldr	r3, [r3, #24]
 800f58e:	011b      	lsls	r3, r3, #4
 800f590:	693a      	ldr	r2, [r7, #16]
 800f592:	4313      	orrs	r3, r2
 800f594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	693a      	ldr	r2, [r7, #16]
 800f59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	68fa      	ldr	r2, [r7, #12]
 800f5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	697a      	ldr	r2, [r7, #20]
 800f5ae:	621a      	str	r2, [r3, #32]
}
 800f5b0:	bf00      	nop
 800f5b2:	371c      	adds	r7, #28
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr
 800f5bc:	fffeff8f 	.word	0xfffeff8f
 800f5c0:	40010000 	.word	0x40010000
 800f5c4:	40010400 	.word	0x40010400
 800f5c8:	40014000 	.word	0x40014000
 800f5cc:	40014400 	.word	0x40014400
 800f5d0:	40014800 	.word	0x40014800

0800f5d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b087      	sub	sp, #28
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6a1b      	ldr	r3, [r3, #32]
 800f5e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6a1b      	ldr	r3, [r3, #32]
 800f5e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	69db      	ldr	r3, [r3, #28]
 800f5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	4b24      	ldr	r3, [pc, #144]	; (800f690 <TIM_OC4_SetConfig+0xbc>)
 800f600:	4013      	ands	r3, r2
 800f602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	021b      	lsls	r3, r3, #8
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	4313      	orrs	r3, r2
 800f616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f61e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	031b      	lsls	r3, r3, #12
 800f626:	693a      	ldr	r2, [r7, #16]
 800f628:	4313      	orrs	r3, r2
 800f62a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4a19      	ldr	r2, [pc, #100]	; (800f694 <TIM_OC4_SetConfig+0xc0>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d00f      	beq.n	800f654 <TIM_OC4_SetConfig+0x80>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	4a18      	ldr	r2, [pc, #96]	; (800f698 <TIM_OC4_SetConfig+0xc4>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d00b      	beq.n	800f654 <TIM_OC4_SetConfig+0x80>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4a17      	ldr	r2, [pc, #92]	; (800f69c <TIM_OC4_SetConfig+0xc8>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d007      	beq.n	800f654 <TIM_OC4_SetConfig+0x80>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4a16      	ldr	r2, [pc, #88]	; (800f6a0 <TIM_OC4_SetConfig+0xcc>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d003      	beq.n	800f654 <TIM_OC4_SetConfig+0x80>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4a15      	ldr	r2, [pc, #84]	; (800f6a4 <TIM_OC4_SetConfig+0xd0>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d109      	bne.n	800f668 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f65a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	695b      	ldr	r3, [r3, #20]
 800f660:	019b      	lsls	r3, r3, #6
 800f662:	697a      	ldr	r2, [r7, #20]
 800f664:	4313      	orrs	r3, r2
 800f666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	697a      	ldr	r2, [r7, #20]
 800f66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685a      	ldr	r2, [r3, #4]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	693a      	ldr	r2, [r7, #16]
 800f680:	621a      	str	r2, [r3, #32]
}
 800f682:	bf00      	nop
 800f684:	371c      	adds	r7, #28
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	feff8fff 	.word	0xfeff8fff
 800f694:	40010000 	.word	0x40010000
 800f698:	40010400 	.word	0x40010400
 800f69c:	40014000 	.word	0x40014000
 800f6a0:	40014400 	.word	0x40014400
 800f6a4:	40014800 	.word	0x40014800

0800f6a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b087      	sub	sp, #28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a1b      	ldr	r3, [r3, #32]
 800f6b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6a1b      	ldr	r3, [r3, #32]
 800f6bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	4b21      	ldr	r3, [pc, #132]	; (800f758 <TIM_OC5_SetConfig+0xb0>)
 800f6d4:	4013      	ands	r3, r2
 800f6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68fa      	ldr	r2, [r7, #12]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f6e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	041b      	lsls	r3, r3, #16
 800f6f0:	693a      	ldr	r2, [r7, #16]
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a18      	ldr	r2, [pc, #96]	; (800f75c <TIM_OC5_SetConfig+0xb4>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d00f      	beq.n	800f71e <TIM_OC5_SetConfig+0x76>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a17      	ldr	r2, [pc, #92]	; (800f760 <TIM_OC5_SetConfig+0xb8>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d00b      	beq.n	800f71e <TIM_OC5_SetConfig+0x76>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a16      	ldr	r2, [pc, #88]	; (800f764 <TIM_OC5_SetConfig+0xbc>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d007      	beq.n	800f71e <TIM_OC5_SetConfig+0x76>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4a15      	ldr	r2, [pc, #84]	; (800f768 <TIM_OC5_SetConfig+0xc0>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d003      	beq.n	800f71e <TIM_OC5_SetConfig+0x76>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4a14      	ldr	r2, [pc, #80]	; (800f76c <TIM_OC5_SetConfig+0xc4>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d109      	bne.n	800f732 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	021b      	lsls	r3, r3, #8
 800f72c:	697a      	ldr	r2, [r7, #20]
 800f72e:	4313      	orrs	r3, r2
 800f730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	68fa      	ldr	r2, [r7, #12]
 800f73c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	685a      	ldr	r2, [r3, #4]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	693a      	ldr	r2, [r7, #16]
 800f74a:	621a      	str	r2, [r3, #32]
}
 800f74c:	bf00      	nop
 800f74e:	371c      	adds	r7, #28
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr
 800f758:	fffeff8f 	.word	0xfffeff8f
 800f75c:	40010000 	.word	0x40010000
 800f760:	40010400 	.word	0x40010400
 800f764:	40014000 	.word	0x40014000
 800f768:	40014400 	.word	0x40014400
 800f76c:	40014800 	.word	0x40014800

0800f770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f770:	b480      	push	{r7}
 800f772:	b087      	sub	sp, #28
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a1b      	ldr	r3, [r3, #32]
 800f77e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a1b      	ldr	r3, [r3, #32]
 800f784:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	4b22      	ldr	r3, [pc, #136]	; (800f824 <TIM_OC6_SetConfig+0xb4>)
 800f79c:	4013      	ands	r3, r2
 800f79e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	021b      	lsls	r3, r3, #8
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f7b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	051b      	lsls	r3, r3, #20
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4a19      	ldr	r2, [pc, #100]	; (800f828 <TIM_OC6_SetConfig+0xb8>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d00f      	beq.n	800f7e8 <TIM_OC6_SetConfig+0x78>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4a18      	ldr	r2, [pc, #96]	; (800f82c <TIM_OC6_SetConfig+0xbc>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d00b      	beq.n	800f7e8 <TIM_OC6_SetConfig+0x78>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	4a17      	ldr	r2, [pc, #92]	; (800f830 <TIM_OC6_SetConfig+0xc0>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d007      	beq.n	800f7e8 <TIM_OC6_SetConfig+0x78>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4a16      	ldr	r2, [pc, #88]	; (800f834 <TIM_OC6_SetConfig+0xc4>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d003      	beq.n	800f7e8 <TIM_OC6_SetConfig+0x78>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a15      	ldr	r2, [pc, #84]	; (800f838 <TIM_OC6_SetConfig+0xc8>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d109      	bne.n	800f7fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	695b      	ldr	r3, [r3, #20]
 800f7f4:	029b      	lsls	r3, r3, #10
 800f7f6:	697a      	ldr	r2, [r7, #20]
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	685a      	ldr	r2, [r3, #4]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	693a      	ldr	r2, [r7, #16]
 800f814:	621a      	str	r2, [r3, #32]
}
 800f816:	bf00      	nop
 800f818:	371c      	adds	r7, #28
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	feff8fff 	.word	0xfeff8fff
 800f828:	40010000 	.word	0x40010000
 800f82c:	40010400 	.word	0x40010400
 800f830:	40014000 	.word	0x40014000
 800f834:	40014400 	.word	0x40014400
 800f838:	40014800 	.word	0x40014800

0800f83c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b087      	sub	sp, #28
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6a1b      	ldr	r3, [r3, #32]
 800f84c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6a1b      	ldr	r3, [r3, #32]
 800f852:	f023 0201 	bic.w	r2, r3, #1
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	699b      	ldr	r3, [r3, #24]
 800f85e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	011b      	lsls	r3, r3, #4
 800f86c:	693a      	ldr	r2, [r7, #16]
 800f86e:	4313      	orrs	r3, r2
 800f870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	f023 030a 	bic.w	r3, r3, #10
 800f878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f87a:	697a      	ldr	r2, [r7, #20]
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	4313      	orrs	r3, r2
 800f880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	693a      	ldr	r2, [r7, #16]
 800f886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	697a      	ldr	r2, [r7, #20]
 800f88c:	621a      	str	r2, [r3, #32]
}
 800f88e:	bf00      	nop
 800f890:	371c      	adds	r7, #28
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f89a:	b480      	push	{r7}
 800f89c:	b087      	sub	sp, #28
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	60f8      	str	r0, [r7, #12]
 800f8a2:	60b9      	str	r1, [r7, #8]
 800f8a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6a1b      	ldr	r3, [r3, #32]
 800f8b0:	f023 0210 	bic.w	r2, r3, #16
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f8c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	031b      	lsls	r3, r3, #12
 800f8ca:	693a      	ldr	r2, [r7, #16]
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f8d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	011b      	lsls	r3, r3, #4
 800f8dc:	697a      	ldr	r2, [r7, #20]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	697a      	ldr	r2, [r7, #20]
 800f8ec:	621a      	str	r2, [r3, #32]
}
 800f8ee:	bf00      	nop
 800f8f0:	371c      	adds	r7, #28
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr
	...

0800f8fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b085      	sub	sp, #20
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	689b      	ldr	r3, [r3, #8]
 800f90a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f90c:	68fa      	ldr	r2, [r7, #12]
 800f90e:	4b09      	ldr	r3, [pc, #36]	; (800f934 <TIM_ITRx_SetConfig+0x38>)
 800f910:	4013      	ands	r3, r2
 800f912:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f914:	683a      	ldr	r2, [r7, #0]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	4313      	orrs	r3, r2
 800f91a:	f043 0307 	orr.w	r3, r3, #7
 800f91e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	609a      	str	r2, [r3, #8]
}
 800f926:	bf00      	nop
 800f928:	3714      	adds	r7, #20
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	ffcfff8f 	.word	0xffcfff8f

0800f938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f938:	b480      	push	{r7}
 800f93a:	b087      	sub	sp, #28
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	607a      	str	r2, [r7, #4]
 800f944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	689b      	ldr	r3, [r3, #8]
 800f94a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	021a      	lsls	r2, r3, #8
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	431a      	orrs	r2, r3
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	4313      	orrs	r3, r2
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	4313      	orrs	r3, r2
 800f964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	609a      	str	r2, [r3, #8]
}
 800f96c:	bf00      	nop
 800f96e:	371c      	adds	r7, #28
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f978:	b480      	push	{r7}
 800f97a:	b087      	sub	sp, #28
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	f003 031f 	and.w	r3, r3, #31
 800f98a:	2201      	movs	r2, #1
 800f98c:	fa02 f303 	lsl.w	r3, r2, r3
 800f990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6a1a      	ldr	r2, [r3, #32]
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	43db      	mvns	r3, r3
 800f99a:	401a      	ands	r2, r3
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	6a1a      	ldr	r2, [r3, #32]
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	f003 031f 	and.w	r3, r3, #31
 800f9aa:	6879      	ldr	r1, [r7, #4]
 800f9ac:	fa01 f303 	lsl.w	r3, r1, r3
 800f9b0:	431a      	orrs	r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	621a      	str	r2, [r3, #32]
}
 800f9b6:	bf00      	nop
 800f9b8:	371c      	adds	r7, #28
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
	...

0800f9c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d101      	bne.n	800f9dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f9d8:	2302      	movs	r3, #2
 800f9da:	e06d      	b.n	800fab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2202      	movs	r2, #2
 800f9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a30      	ldr	r2, [pc, #192]	; (800fac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d004      	beq.n	800fa10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4a2f      	ldr	r2, [pc, #188]	; (800fac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d108      	bne.n	800fa22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fa16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	4313      	orrs	r3, r2
 800fa32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a20      	ldr	r2, [pc, #128]	; (800fac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d022      	beq.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa4e:	d01d      	beq.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4a1d      	ldr	r2, [pc, #116]	; (800facc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d018      	beq.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4a1c      	ldr	r2, [pc, #112]	; (800fad0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d013      	beq.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a1a      	ldr	r2, [pc, #104]	; (800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d00e      	beq.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4a15      	ldr	r2, [pc, #84]	; (800fac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d009      	beq.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4a16      	ldr	r2, [pc, #88]	; (800fad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d004      	beq.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a15      	ldr	r2, [pc, #84]	; (800fadc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d10c      	bne.n	800faa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fab6:	2300      	movs	r3, #0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3714      	adds	r7, #20
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	40010000 	.word	0x40010000
 800fac8:	40010400 	.word	0x40010400
 800facc:	40000400 	.word	0x40000400
 800fad0:	40000800 	.word	0x40000800
 800fad4:	40000c00 	.word	0x40000c00
 800fad8:	40001800 	.word	0x40001800
 800fadc:	40014000 	.word	0x40014000

0800fae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b085      	sub	sp, #20
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800faea:	2300      	movs	r3, #0
 800faec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d101      	bne.n	800fafc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800faf8:	2302      	movs	r3, #2
 800fafa:	e065      	b.n	800fbc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	4313      	orrs	r3, r2
 800fb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	4313      	orrs	r3, r2
 800fb56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb62:	4313      	orrs	r3, r2
 800fb64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	041b      	lsls	r3, r3, #16
 800fb72:	4313      	orrs	r3, r2
 800fb74:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4a16      	ldr	r2, [pc, #88]	; (800fbd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d004      	beq.n	800fb8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a14      	ldr	r2, [pc, #80]	; (800fbd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d115      	bne.n	800fbb6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb94:	051b      	lsls	r3, r3, #20
 800fb96:	4313      	orrs	r3, r2
 800fb98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	69db      	ldr	r3, [r3, #28]
 800fba4:	4313      	orrs	r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	6a1b      	ldr	r3, [r3, #32]
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	68fa      	ldr	r2, [r7, #12]
 800fbbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3714      	adds	r7, #20
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr
 800fbd4:	40010000 	.word	0x40010000
 800fbd8:	40010400 	.word	0x40010400

0800fbdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fbe4:	bf00      	nop
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fbf8:	bf00      	nop
 800fbfa:	370c      	adds	r7, #12
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fc0c:	bf00      	nop
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d101      	bne.n	800fc2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc26:	2301      	movs	r3, #1
 800fc28:	e042      	b.n	800fcb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d106      	bne.n	800fc42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7f3 fbc9 	bl	80033d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2224      	movs	r2, #36	; 0x24
 800fc46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f022 0201 	bic.w	r2, r2, #1
 800fc58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d002      	beq.n	800fc68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f001 fb8c 	bl	8011380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 fe21 	bl	80108b0 <UART_SetConfig>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d101      	bne.n	800fc78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fc74:	2301      	movs	r3, #1
 800fc76:	e01b      	b.n	800fcb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	685a      	ldr	r2, [r3, #4]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fc86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	689a      	ldr	r2, [r3, #8]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fc96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f042 0201 	orr.w	r2, r2, #1
 800fca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f001 fc0b 	bl	80114c4 <UART_CheckIdleState>
 800fcae:	4603      	mov	r3, r0
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b08a      	sub	sp, #40	; 0x28
 800fcbc:	af02      	add	r7, sp, #8
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	603b      	str	r3, [r7, #0]
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcce:	2b20      	cmp	r3, #32
 800fcd0:	d17b      	bne.n	800fdca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d002      	beq.n	800fcde <HAL_UART_Transmit+0x26>
 800fcd8:	88fb      	ldrh	r3, [r7, #6]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d101      	bne.n	800fce2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fcde:	2301      	movs	r3, #1
 800fce0:	e074      	b.n	800fdcc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2200      	movs	r2, #0
 800fce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2221      	movs	r2, #33	; 0x21
 800fcee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fcf2:	f7f3 fee3 	bl	8003abc <HAL_GetTick>
 800fcf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	88fa      	ldrh	r2, [r7, #6]
 800fcfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	88fa      	ldrh	r2, [r7, #6]
 800fd04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	689b      	ldr	r3, [r3, #8]
 800fd0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd10:	d108      	bne.n	800fd24 <HAL_UART_Transmit+0x6c>
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d104      	bne.n	800fd24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	61bb      	str	r3, [r7, #24]
 800fd22:	e003      	b.n	800fd2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fd2c:	e030      	b.n	800fd90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	9300      	str	r3, [sp, #0]
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	2200      	movs	r2, #0
 800fd36:	2180      	movs	r1, #128	; 0x80
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f001 fc6d 	bl	8011618 <UART_WaitOnFlagUntilTimeout>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d005      	beq.n	800fd50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2220      	movs	r2, #32
 800fd48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fd4c:	2303      	movs	r3, #3
 800fd4e:	e03d      	b.n	800fdcc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d10b      	bne.n	800fd6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	881b      	ldrh	r3, [r3, #0]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fd64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	3302      	adds	r3, #2
 800fd6a:	61bb      	str	r3, [r7, #24]
 800fd6c:	e007      	b.n	800fd7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	781a      	ldrb	r2, [r3, #0]
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	3b01      	subs	r3, #1
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d1c8      	bne.n	800fd2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	9300      	str	r3, [sp, #0]
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	2200      	movs	r2, #0
 800fda4:	2140      	movs	r1, #64	; 0x40
 800fda6:	68f8      	ldr	r0, [r7, #12]
 800fda8:	f001 fc36 	bl	8011618 <UART_WaitOnFlagUntilTimeout>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d005      	beq.n	800fdbe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2220      	movs	r2, #32
 800fdb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fdba:	2303      	movs	r3, #3
 800fdbc:	e006      	b.n	800fdcc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2220      	movs	r2, #32
 800fdc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	e000      	b.n	800fdcc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fdca:	2302      	movs	r3, #2
  }
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3720      	adds	r7, #32
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b08a      	sub	sp, #40	; 0x28
 800fdd8:	af02      	add	r7, sp, #8
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	603b      	str	r3, [r7, #0]
 800fde0:	4613      	mov	r3, r2
 800fde2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdea:	2b20      	cmp	r3, #32
 800fdec:	f040 80b5 	bne.w	800ff5a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <HAL_UART_Receive+0x28>
 800fdf6:	88fb      	ldrh	r3, [r7, #6]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d101      	bne.n	800fe00 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	e0ad      	b.n	800ff5c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2200      	movs	r2, #0
 800fe04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2222      	movs	r2, #34	; 0x22
 800fe0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2200      	movs	r2, #0
 800fe14:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe16:	f7f3 fe51 	bl	8003abc <HAL_GetTick>
 800fe1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	88fa      	ldrh	r2, [r7, #6]
 800fe20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	88fa      	ldrh	r2, [r7, #6]
 800fe28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe34:	d10e      	bne.n	800fe54 <HAL_UART_Receive+0x80>
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	691b      	ldr	r3, [r3, #16]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d105      	bne.n	800fe4a <HAL_UART_Receive+0x76>
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fe44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe48:	e02d      	b.n	800fea6 <HAL_UART_Receive+0xd2>
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	22ff      	movs	r2, #255	; 0xff
 800fe4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe52:	e028      	b.n	800fea6 <HAL_UART_Receive+0xd2>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10d      	bne.n	800fe78 <HAL_UART_Receive+0xa4>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	691b      	ldr	r3, [r3, #16]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d104      	bne.n	800fe6e <HAL_UART_Receive+0x9a>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	22ff      	movs	r2, #255	; 0xff
 800fe68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe6c:	e01b      	b.n	800fea6 <HAL_UART_Receive+0xd2>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	227f      	movs	r2, #127	; 0x7f
 800fe72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe76:	e016      	b.n	800fea6 <HAL_UART_Receive+0xd2>
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe80:	d10d      	bne.n	800fe9e <HAL_UART_Receive+0xca>
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d104      	bne.n	800fe94 <HAL_UART_Receive+0xc0>
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	227f      	movs	r2, #127	; 0x7f
 800fe8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe92:	e008      	b.n	800fea6 <HAL_UART_Receive+0xd2>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	223f      	movs	r2, #63	; 0x3f
 800fe98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe9c:	e003      	b.n	800fea6 <HAL_UART_Receive+0xd2>
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2200      	movs	r2, #0
 800fea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800feac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feb6:	d108      	bne.n	800feca <HAL_UART_Receive+0xf6>
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d104      	bne.n	800feca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fec0:	2300      	movs	r3, #0
 800fec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	61bb      	str	r3, [r7, #24]
 800fec8:	e003      	b.n	800fed2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fece:	2300      	movs	r3, #0
 800fed0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fed2:	e036      	b.n	800ff42 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	9300      	str	r3, [sp, #0]
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	2200      	movs	r2, #0
 800fedc:	2120      	movs	r1, #32
 800fede:	68f8      	ldr	r0, [r7, #12]
 800fee0:	f001 fb9a 	bl	8011618 <UART_WaitOnFlagUntilTimeout>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d005      	beq.n	800fef6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2220      	movs	r2, #32
 800feee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fef2:	2303      	movs	r3, #3
 800fef4:	e032      	b.n	800ff5c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d10c      	bne.n	800ff16 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	8a7b      	ldrh	r3, [r7, #18]
 800ff06:	4013      	ands	r3, r2
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	3302      	adds	r3, #2
 800ff12:	61bb      	str	r3, [r7, #24]
 800ff14:	e00c      	b.n	800ff30 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1c:	b2da      	uxtb	r2, r3
 800ff1e:	8a7b      	ldrh	r3, [r7, #18]
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	4013      	ands	r3, r2
 800ff24:	b2da      	uxtb	r2, r3
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff48:	b29b      	uxth	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d1c2      	bne.n	800fed4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2220      	movs	r2, #32
 800ff52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	e000      	b.n	800ff5c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800ff5a:	2302      	movs	r3, #2
  }
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3720      	adds	r7, #32
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b08a      	sub	sp, #40	; 0x28
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	4613      	mov	r3, r2
 800ff70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff78:	2b20      	cmp	r3, #32
 800ff7a:	d137      	bne.n	800ffec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <HAL_UART_Receive_IT+0x24>
 800ff82:	88fb      	ldrh	r3, [r7, #6]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d101      	bne.n	800ff8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e030      	b.n	800ffee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4a18      	ldr	r2, [pc, #96]	; (800fff8 <HAL_UART_Receive_IT+0x94>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d01f      	beq.n	800ffdc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d018      	beq.n	800ffdc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	e853 3f00 	ldrex	r3, [r3]
 800ffb6:	613b      	str	r3, [r7, #16]
   return(result);
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ffbe:	627b      	str	r3, [r7, #36]	; 0x24
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	623b      	str	r3, [r7, #32]
 800ffca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffcc:	69f9      	ldr	r1, [r7, #28]
 800ffce:	6a3a      	ldr	r2, [r7, #32]
 800ffd0:	e841 2300 	strex	r3, r2, [r1]
 800ffd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1e6      	bne.n	800ffaa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ffdc:	88fb      	ldrh	r3, [r7, #6]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	68b9      	ldr	r1, [r7, #8]
 800ffe2:	68f8      	ldr	r0, [r7, #12]
 800ffe4:	f001 fb86 	bl	80116f4 <UART_Start_Receive_IT>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	e000      	b.n	800ffee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ffec:	2302      	movs	r3, #2
  }
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3728      	adds	r7, #40	; 0x28
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	58000c00 	.word	0x58000c00

0800fffc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b08a      	sub	sp, #40	; 0x28
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	4613      	mov	r3, r2
 8010008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010010:	2b20      	cmp	r3, #32
 8010012:	d167      	bne.n	80100e4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d002      	beq.n	8010020 <HAL_UART_Transmit_DMA+0x24>
 801001a:	88fb      	ldrh	r3, [r7, #6]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d101      	bne.n	8010024 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010020:	2301      	movs	r3, #1
 8010022:	e060      	b.n	80100e6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	88fa      	ldrh	r2, [r7, #6]
 801002e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	88fa      	ldrh	r2, [r7, #6]
 8010036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2200      	movs	r2, #0
 801003e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2221      	movs	r2, #33	; 0x21
 8010046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801004e:	2b00      	cmp	r3, #0
 8010050:	d028      	beq.n	80100a4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010056:	4a26      	ldr	r2, [pc, #152]	; (80100f0 <HAL_UART_Transmit_DMA+0xf4>)
 8010058:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801005e:	4a25      	ldr	r2, [pc, #148]	; (80100f4 <HAL_UART_Transmit_DMA+0xf8>)
 8010060:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010066:	4a24      	ldr	r2, [pc, #144]	; (80100f8 <HAL_UART_Transmit_DMA+0xfc>)
 8010068:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801006e:	2200      	movs	r2, #0
 8010070:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801007a:	4619      	mov	r1, r3
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	3328      	adds	r3, #40	; 0x28
 8010082:	461a      	mov	r2, r3
 8010084:	88fb      	ldrh	r3, [r7, #6]
 8010086:	f7f6 f99d 	bl	80063c4 <HAL_DMA_Start_IT>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d009      	beq.n	80100a4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2210      	movs	r2, #16
 8010094:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2220      	movs	r2, #32
 801009c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80100a0:	2301      	movs	r3, #1
 80100a2:	e020      	b.n	80100e6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2240      	movs	r2, #64	; 0x40
 80100aa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	3308      	adds	r3, #8
 80100b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	e853 3f00 	ldrex	r3, [r3]
 80100ba:	613b      	str	r3, [r7, #16]
   return(result);
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100c2:	627b      	str	r3, [r7, #36]	; 0x24
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	3308      	adds	r3, #8
 80100ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100cc:	623a      	str	r2, [r7, #32]
 80100ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100d0:	69f9      	ldr	r1, [r7, #28]
 80100d2:	6a3a      	ldr	r2, [r7, #32]
 80100d4:	e841 2300 	strex	r3, r2, [r1]
 80100d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d1e5      	bne.n	80100ac <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80100e0:	2300      	movs	r3, #0
 80100e2:	e000      	b.n	80100e6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80100e4:	2302      	movs	r3, #2
  }
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3728      	adds	r7, #40	; 0x28
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	08011a89 	.word	0x08011a89
 80100f4:	08011b1f 	.word	0x08011b1f
 80100f8:	08011b3b 	.word	0x08011b3b

080100fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b0ba      	sub	sp, #232	; 0xe8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	69db      	ldr	r3, [r3, #28]
 801010a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010122:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010126:	f640 030f 	movw	r3, #2063	; 0x80f
 801012a:	4013      	ands	r3, r2
 801012c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010134:	2b00      	cmp	r3, #0
 8010136:	d11b      	bne.n	8010170 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801013c:	f003 0320 	and.w	r3, r3, #32
 8010140:	2b00      	cmp	r3, #0
 8010142:	d015      	beq.n	8010170 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010148:	f003 0320 	and.w	r3, r3, #32
 801014c:	2b00      	cmp	r3, #0
 801014e:	d105      	bne.n	801015c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010158:	2b00      	cmp	r3, #0
 801015a:	d009      	beq.n	8010170 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010160:	2b00      	cmp	r3, #0
 8010162:	f000 8377 	beq.w	8010854 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	4798      	blx	r3
      }
      return;
 801016e:	e371      	b.n	8010854 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010174:	2b00      	cmp	r3, #0
 8010176:	f000 8123 	beq.w	80103c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801017a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801017e:	4b8d      	ldr	r3, [pc, #564]	; (80103b4 <HAL_UART_IRQHandler+0x2b8>)
 8010180:	4013      	ands	r3, r2
 8010182:	2b00      	cmp	r3, #0
 8010184:	d106      	bne.n	8010194 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010186:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801018a:	4b8b      	ldr	r3, [pc, #556]	; (80103b8 <HAL_UART_IRQHandler+0x2bc>)
 801018c:	4013      	ands	r3, r2
 801018e:	2b00      	cmp	r3, #0
 8010190:	f000 8116 	beq.w	80103c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	d011      	beq.n	80101c4 <HAL_UART_IRQHandler+0xc8>
 80101a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d00b      	beq.n	80101c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2201      	movs	r2, #1
 80101b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101ba:	f043 0201 	orr.w	r2, r3, #1
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101c8:	f003 0302 	and.w	r3, r3, #2
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d011      	beq.n	80101f4 <HAL_UART_IRQHandler+0xf8>
 80101d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80101d4:	f003 0301 	and.w	r3, r3, #1
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00b      	beq.n	80101f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2202      	movs	r2, #2
 80101e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101ea:	f043 0204 	orr.w	r2, r3, #4
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101f8:	f003 0304 	and.w	r3, r3, #4
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d011      	beq.n	8010224 <HAL_UART_IRQHandler+0x128>
 8010200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010204:	f003 0301 	and.w	r3, r3, #1
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00b      	beq.n	8010224 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2204      	movs	r2, #4
 8010212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801021a:	f043 0202 	orr.w	r2, r3, #2
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010228:	f003 0308 	and.w	r3, r3, #8
 801022c:	2b00      	cmp	r3, #0
 801022e:	d017      	beq.n	8010260 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010234:	f003 0320 	and.w	r3, r3, #32
 8010238:	2b00      	cmp	r3, #0
 801023a:	d105      	bne.n	8010248 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801023c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010240:	4b5c      	ldr	r3, [pc, #368]	; (80103b4 <HAL_UART_IRQHandler+0x2b8>)
 8010242:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00b      	beq.n	8010260 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2208      	movs	r2, #8
 801024e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010256:	f043 0208 	orr.w	r2, r3, #8
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010268:	2b00      	cmp	r3, #0
 801026a:	d012      	beq.n	8010292 <HAL_UART_IRQHandler+0x196>
 801026c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00c      	beq.n	8010292 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010288:	f043 0220 	orr.w	r2, r3, #32
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010298:	2b00      	cmp	r3, #0
 801029a:	f000 82dd 	beq.w	8010858 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801029e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102a2:	f003 0320 	and.w	r3, r3, #32
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d013      	beq.n	80102d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80102aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102ae:	f003 0320 	and.w	r3, r3, #32
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d105      	bne.n	80102c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80102b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d007      	beq.n	80102d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d003      	beq.n	80102d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102e6:	2b40      	cmp	r3, #64	; 0x40
 80102e8:	d005      	beq.n	80102f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80102ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80102ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d054      	beq.n	80103a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f001 fb60 	bl	80119bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	689b      	ldr	r3, [r3, #8]
 8010302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010306:	2b40      	cmp	r3, #64	; 0x40
 8010308:	d146      	bne.n	8010398 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	3308      	adds	r3, #8
 8010310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010318:	e853 3f00 	ldrex	r3, [r3]
 801031c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	3308      	adds	r3, #8
 8010332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010336:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801033a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801033e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010346:	e841 2300 	strex	r3, r2, [r1]
 801034a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801034e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1d9      	bne.n	801030a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801035c:	2b00      	cmp	r3, #0
 801035e:	d017      	beq.n	8010390 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010366:	4a15      	ldr	r2, [pc, #84]	; (80103bc <HAL_UART_IRQHandler+0x2c0>)
 8010368:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010370:	4618      	mov	r0, r3
 8010372:	f7f6 fdaf 	bl	8006ed4 <HAL_DMA_Abort_IT>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d019      	beq.n	80103b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801038a:	4610      	mov	r0, r2
 801038c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801038e:	e00f      	b.n	80103b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 fa77 	bl	8010884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010396:	e00b      	b.n	80103b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 fa73 	bl	8010884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801039e:	e007      	b.n	80103b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 fa6f 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80103ae:	e253      	b.n	8010858 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103b0:	bf00      	nop
    return;
 80103b2:	e251      	b.n	8010858 <HAL_UART_IRQHandler+0x75c>
 80103b4:	10000001 	.word	0x10000001
 80103b8:	04000120 	.word	0x04000120
 80103bc:	08011bbb 	.word	0x08011bbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	f040 81e7 	bne.w	8010798 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80103ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103ce:	f003 0310 	and.w	r3, r3, #16
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f000 81e0 	beq.w	8010798 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80103d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103dc:	f003 0310 	and.w	r3, r3, #16
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f000 81d9 	beq.w	8010798 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2210      	movs	r2, #16
 80103ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103f8:	2b40      	cmp	r3, #64	; 0x40
 80103fa:	f040 8151 	bne.w	80106a0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4a96      	ldr	r2, [pc, #600]	; (8010660 <HAL_UART_IRQHandler+0x564>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d068      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4a93      	ldr	r2, [pc, #588]	; (8010664 <HAL_UART_IRQHandler+0x568>)
 8010416:	4293      	cmp	r3, r2
 8010418:	d061      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4a91      	ldr	r2, [pc, #580]	; (8010668 <HAL_UART_IRQHandler+0x56c>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d05a      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a8e      	ldr	r2, [pc, #568]	; (801066c <HAL_UART_IRQHandler+0x570>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d053      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a8c      	ldr	r2, [pc, #560]	; (8010670 <HAL_UART_IRQHandler+0x574>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d04c      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a89      	ldr	r2, [pc, #548]	; (8010674 <HAL_UART_IRQHandler+0x578>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d045      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4a87      	ldr	r2, [pc, #540]	; (8010678 <HAL_UART_IRQHandler+0x57c>)
 801045c:	4293      	cmp	r3, r2
 801045e:	d03e      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4a84      	ldr	r2, [pc, #528]	; (801067c <HAL_UART_IRQHandler+0x580>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d037      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	4a82      	ldr	r2, [pc, #520]	; (8010680 <HAL_UART_IRQHandler+0x584>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d030      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a7f      	ldr	r2, [pc, #508]	; (8010684 <HAL_UART_IRQHandler+0x588>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d029      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4a7d      	ldr	r2, [pc, #500]	; (8010688 <HAL_UART_IRQHandler+0x58c>)
 8010494:	4293      	cmp	r3, r2
 8010496:	d022      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	4a7a      	ldr	r2, [pc, #488]	; (801068c <HAL_UART_IRQHandler+0x590>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d01b      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4a78      	ldr	r2, [pc, #480]	; (8010690 <HAL_UART_IRQHandler+0x594>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d014      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a75      	ldr	r2, [pc, #468]	; (8010694 <HAL_UART_IRQHandler+0x598>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d00d      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4a73      	ldr	r2, [pc, #460]	; (8010698 <HAL_UART_IRQHandler+0x59c>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d006      	beq.n	80104de <HAL_UART_IRQHandler+0x3e2>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a70      	ldr	r2, [pc, #448]	; (801069c <HAL_UART_IRQHandler+0x5a0>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d106      	bne.n	80104ec <HAL_UART_IRQHandler+0x3f0>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	e005      	b.n	80104f8 <HAL_UART_IRQHandler+0x3fc>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80104fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010500:	2b00      	cmp	r3, #0
 8010502:	f000 81ab 	beq.w	801085c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801050c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010510:	429a      	cmp	r2, r3
 8010512:	f080 81a3 	bcs.w	801085c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801051c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010526:	69db      	ldr	r3, [r3, #28]
 8010528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801052c:	f000 8087 	beq.w	801063e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801053c:	e853 3f00 	ldrex	r3, [r3]
 8010540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801054c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	461a      	mov	r2, r3
 8010556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801055a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801055e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010562:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010566:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801056a:	e841 2300 	strex	r3, r2, [r1]
 801056e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1da      	bne.n	8010530 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	3308      	adds	r3, #8
 8010580:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010584:	e853 3f00 	ldrex	r3, [r3]
 8010588:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801058a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801058c:	f023 0301 	bic.w	r3, r3, #1
 8010590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	3308      	adds	r3, #8
 801059a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801059e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80105a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80105a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105aa:	e841 2300 	strex	r3, r2, [r1]
 80105ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80105b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1e1      	bne.n	801057a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	3308      	adds	r3, #8
 80105bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105c0:	e853 3f00 	ldrex	r3, [r3]
 80105c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80105c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	3308      	adds	r3, #8
 80105d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80105da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80105dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80105e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80105e2:	e841 2300 	strex	r3, r2, [r1]
 80105e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80105e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1e3      	bne.n	80105b6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2220      	movs	r2, #32
 80105f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2200      	movs	r2, #0
 80105fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010604:	e853 3f00 	ldrex	r3, [r3]
 8010608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801060a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801060c:	f023 0310 	bic.w	r3, r3, #16
 8010610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	461a      	mov	r2, r3
 801061a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801061e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010620:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010622:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010626:	e841 2300 	strex	r3, r2, [r1]
 801062a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801062c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1e4      	bne.n	80105fc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010638:	4618      	mov	r0, r3
 801063a:	f7f6 f92d 	bl	8006898 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2202      	movs	r2, #2
 8010642:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010650:	b29b      	uxth	r3, r3
 8010652:	1ad3      	subs	r3, r2, r3
 8010654:	b29b      	uxth	r3, r3
 8010656:	4619      	mov	r1, r3
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 f91d 	bl	8010898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801065e:	e0fd      	b.n	801085c <HAL_UART_IRQHandler+0x760>
 8010660:	40020010 	.word	0x40020010
 8010664:	40020028 	.word	0x40020028
 8010668:	40020040 	.word	0x40020040
 801066c:	40020058 	.word	0x40020058
 8010670:	40020070 	.word	0x40020070
 8010674:	40020088 	.word	0x40020088
 8010678:	400200a0 	.word	0x400200a0
 801067c:	400200b8 	.word	0x400200b8
 8010680:	40020410 	.word	0x40020410
 8010684:	40020428 	.word	0x40020428
 8010688:	40020440 	.word	0x40020440
 801068c:	40020458 	.word	0x40020458
 8010690:	40020470 	.word	0x40020470
 8010694:	40020488 	.word	0x40020488
 8010698:	400204a0 	.word	0x400204a0
 801069c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 80cf 	beq.w	8010860 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80106c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f000 80ca 	beq.w	8010860 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d4:	e853 3f00 	ldrex	r3, [r3]
 80106d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	461a      	mov	r2, r3
 80106ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80106ee:	647b      	str	r3, [r7, #68]	; 0x44
 80106f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106f6:	e841 2300 	strex	r3, r2, [r1]
 80106fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1e4      	bne.n	80106cc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3308      	adds	r3, #8
 8010708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070c:	e853 3f00 	ldrex	r3, [r3]
 8010710:	623b      	str	r3, [r7, #32]
   return(result);
 8010712:	6a3a      	ldr	r2, [r7, #32]
 8010714:	4b55      	ldr	r3, [pc, #340]	; (801086c <HAL_UART_IRQHandler+0x770>)
 8010716:	4013      	ands	r3, r2
 8010718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	3308      	adds	r3, #8
 8010722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010726:	633a      	str	r2, [r7, #48]	; 0x30
 8010728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801072a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801072c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801072e:	e841 2300 	strex	r3, r2, [r1]
 8010732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1e3      	bne.n	8010702 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2220      	movs	r2, #32
 801073e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2200      	movs	r2, #0
 801074c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	e853 3f00 	ldrex	r3, [r3]
 801075a:	60fb      	str	r3, [r7, #12]
   return(result);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f023 0310 	bic.w	r3, r3, #16
 8010762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	461a      	mov	r2, r3
 801076c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010770:	61fb      	str	r3, [r7, #28]
 8010772:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010774:	69b9      	ldr	r1, [r7, #24]
 8010776:	69fa      	ldr	r2, [r7, #28]
 8010778:	e841 2300 	strex	r3, r2, [r1]
 801077c:	617b      	str	r3, [r7, #20]
   return(result);
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d1e4      	bne.n	801074e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2202      	movs	r2, #2
 8010788:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801078a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801078e:	4619      	mov	r1, r3
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f000 f881 	bl	8010898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010796:	e063      	b.n	8010860 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801079c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d00e      	beq.n	80107c2 <HAL_UART_IRQHandler+0x6c6>
 80107a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d008      	beq.n	80107c2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80107b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f001 ff5a 	bl	8012674 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80107c0:	e051      	b.n	8010866 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80107c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d014      	beq.n	80107f8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80107ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d105      	bne.n	80107e6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80107da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d008      	beq.n	80107f8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d03a      	beq.n	8010864 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	4798      	blx	r3
    }
    return;
 80107f6:	e035      	b.n	8010864 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80107f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010800:	2b00      	cmp	r3, #0
 8010802:	d009      	beq.n	8010818 <HAL_UART_IRQHandler+0x71c>
 8010804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801080c:	2b00      	cmp	r3, #0
 801080e:	d003      	beq.n	8010818 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f001 f9e8 	bl	8011be6 <UART_EndTransmit_IT>
    return;
 8010816:	e026      	b.n	8010866 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801081c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010820:	2b00      	cmp	r3, #0
 8010822:	d009      	beq.n	8010838 <HAL_UART_IRQHandler+0x73c>
 8010824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010828:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801082c:	2b00      	cmp	r3, #0
 801082e:	d003      	beq.n	8010838 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f001 ff33 	bl	801269c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010836:	e016      	b.n	8010866 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801083c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010840:	2b00      	cmp	r3, #0
 8010842:	d010      	beq.n	8010866 <HAL_UART_IRQHandler+0x76a>
 8010844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010848:	2b00      	cmp	r3, #0
 801084a:	da0c      	bge.n	8010866 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f001 ff1b 	bl	8012688 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010852:	e008      	b.n	8010866 <HAL_UART_IRQHandler+0x76a>
      return;
 8010854:	bf00      	nop
 8010856:	e006      	b.n	8010866 <HAL_UART_IRQHandler+0x76a>
    return;
 8010858:	bf00      	nop
 801085a:	e004      	b.n	8010866 <HAL_UART_IRQHandler+0x76a>
      return;
 801085c:	bf00      	nop
 801085e:	e002      	b.n	8010866 <HAL_UART_IRQHandler+0x76a>
      return;
 8010860:	bf00      	nop
 8010862:	e000      	b.n	8010866 <HAL_UART_IRQHandler+0x76a>
    return;
 8010864:	bf00      	nop
  }
}
 8010866:	37e8      	adds	r7, #232	; 0xe8
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	effffffe 	.word	0xeffffffe

08010870 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801088c:	bf00      	nop
 801088e:	370c      	adds	r7, #12
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr

08010898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	460b      	mov	r3, r1
 80108a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80108a4:	bf00      	nop
 80108a6:	370c      	adds	r7, #12
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr

080108b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80108b4:	b092      	sub	sp, #72	; 0x48
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108ba:	2300      	movs	r3, #0
 80108bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	689a      	ldr	r2, [r3, #8]
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	691b      	ldr	r3, [r3, #16]
 80108c8:	431a      	orrs	r2, r3
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	695b      	ldr	r3, [r3, #20]
 80108ce:	431a      	orrs	r2, r3
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	69db      	ldr	r3, [r3, #28]
 80108d4:	4313      	orrs	r3, r2
 80108d6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	4bbe      	ldr	r3, [pc, #760]	; (8010bd8 <UART_SetConfig+0x328>)
 80108e0:	4013      	ands	r3, r2
 80108e2:	697a      	ldr	r2, [r7, #20]
 80108e4:	6812      	ldr	r2, [r2, #0]
 80108e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108e8:	430b      	orrs	r3, r1
 80108ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	68da      	ldr	r2, [r3, #12]
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	430a      	orrs	r2, r1
 8010900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	699b      	ldr	r3, [r3, #24]
 8010906:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4ab3      	ldr	r2, [pc, #716]	; (8010bdc <UART_SetConfig+0x32c>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d004      	beq.n	801091c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	6a1b      	ldr	r3, [r3, #32]
 8010916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010918:	4313      	orrs	r3, r2
 801091a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	689a      	ldr	r2, [r3, #8]
 8010922:	4baf      	ldr	r3, [pc, #700]	; (8010be0 <UART_SetConfig+0x330>)
 8010924:	4013      	ands	r3, r2
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	6812      	ldr	r2, [r2, #0]
 801092a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801092c:	430b      	orrs	r3, r1
 801092e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010936:	f023 010f 	bic.w	r1, r3, #15
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	430a      	orrs	r2, r1
 8010944:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4aa6      	ldr	r2, [pc, #664]	; (8010be4 <UART_SetConfig+0x334>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d177      	bne.n	8010a40 <UART_SetConfig+0x190>
 8010950:	4ba5      	ldr	r3, [pc, #660]	; (8010be8 <UART_SetConfig+0x338>)
 8010952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010958:	2b28      	cmp	r3, #40	; 0x28
 801095a:	d86d      	bhi.n	8010a38 <UART_SetConfig+0x188>
 801095c:	a201      	add	r2, pc, #4	; (adr r2, 8010964 <UART_SetConfig+0xb4>)
 801095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010962:	bf00      	nop
 8010964:	08010a09 	.word	0x08010a09
 8010968:	08010a39 	.word	0x08010a39
 801096c:	08010a39 	.word	0x08010a39
 8010970:	08010a39 	.word	0x08010a39
 8010974:	08010a39 	.word	0x08010a39
 8010978:	08010a39 	.word	0x08010a39
 801097c:	08010a39 	.word	0x08010a39
 8010980:	08010a39 	.word	0x08010a39
 8010984:	08010a11 	.word	0x08010a11
 8010988:	08010a39 	.word	0x08010a39
 801098c:	08010a39 	.word	0x08010a39
 8010990:	08010a39 	.word	0x08010a39
 8010994:	08010a39 	.word	0x08010a39
 8010998:	08010a39 	.word	0x08010a39
 801099c:	08010a39 	.word	0x08010a39
 80109a0:	08010a39 	.word	0x08010a39
 80109a4:	08010a19 	.word	0x08010a19
 80109a8:	08010a39 	.word	0x08010a39
 80109ac:	08010a39 	.word	0x08010a39
 80109b0:	08010a39 	.word	0x08010a39
 80109b4:	08010a39 	.word	0x08010a39
 80109b8:	08010a39 	.word	0x08010a39
 80109bc:	08010a39 	.word	0x08010a39
 80109c0:	08010a39 	.word	0x08010a39
 80109c4:	08010a21 	.word	0x08010a21
 80109c8:	08010a39 	.word	0x08010a39
 80109cc:	08010a39 	.word	0x08010a39
 80109d0:	08010a39 	.word	0x08010a39
 80109d4:	08010a39 	.word	0x08010a39
 80109d8:	08010a39 	.word	0x08010a39
 80109dc:	08010a39 	.word	0x08010a39
 80109e0:	08010a39 	.word	0x08010a39
 80109e4:	08010a29 	.word	0x08010a29
 80109e8:	08010a39 	.word	0x08010a39
 80109ec:	08010a39 	.word	0x08010a39
 80109f0:	08010a39 	.word	0x08010a39
 80109f4:	08010a39 	.word	0x08010a39
 80109f8:	08010a39 	.word	0x08010a39
 80109fc:	08010a39 	.word	0x08010a39
 8010a00:	08010a39 	.word	0x08010a39
 8010a04:	08010a31 	.word	0x08010a31
 8010a08:	2301      	movs	r3, #1
 8010a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0e:	e222      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a10:	2304      	movs	r3, #4
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a16:	e21e      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a18:	2308      	movs	r3, #8
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1e:	e21a      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a20:	2310      	movs	r3, #16
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a26:	e216      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a28:	2320      	movs	r3, #32
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e212      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a30:	2340      	movs	r3, #64	; 0x40
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a36:	e20e      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a38:	2380      	movs	r3, #128	; 0x80
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3e:	e20a      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4a69      	ldr	r2, [pc, #420]	; (8010bec <UART_SetConfig+0x33c>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d130      	bne.n	8010aac <UART_SetConfig+0x1fc>
 8010a4a:	4b67      	ldr	r3, [pc, #412]	; (8010be8 <UART_SetConfig+0x338>)
 8010a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a4e:	f003 0307 	and.w	r3, r3, #7
 8010a52:	2b05      	cmp	r3, #5
 8010a54:	d826      	bhi.n	8010aa4 <UART_SetConfig+0x1f4>
 8010a56:	a201      	add	r2, pc, #4	; (adr r2, 8010a5c <UART_SetConfig+0x1ac>)
 8010a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5c:	08010a75 	.word	0x08010a75
 8010a60:	08010a7d 	.word	0x08010a7d
 8010a64:	08010a85 	.word	0x08010a85
 8010a68:	08010a8d 	.word	0x08010a8d
 8010a6c:	08010a95 	.word	0x08010a95
 8010a70:	08010a9d 	.word	0x08010a9d
 8010a74:	2300      	movs	r3, #0
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7a:	e1ec      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a7c:	2304      	movs	r3, #4
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a82:	e1e8      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a84:	2308      	movs	r3, #8
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8a:	e1e4      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a8c:	2310      	movs	r3, #16
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a92:	e1e0      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a94:	2320      	movs	r3, #32
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9a:	e1dc      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010a9c:	2340      	movs	r3, #64	; 0x40
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aa2:	e1d8      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010aa4:	2380      	movs	r3, #128	; 0x80
 8010aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aaa:	e1d4      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a4f      	ldr	r2, [pc, #316]	; (8010bf0 <UART_SetConfig+0x340>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d130      	bne.n	8010b18 <UART_SetConfig+0x268>
 8010ab6:	4b4c      	ldr	r3, [pc, #304]	; (8010be8 <UART_SetConfig+0x338>)
 8010ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aba:	f003 0307 	and.w	r3, r3, #7
 8010abe:	2b05      	cmp	r3, #5
 8010ac0:	d826      	bhi.n	8010b10 <UART_SetConfig+0x260>
 8010ac2:	a201      	add	r2, pc, #4	; (adr r2, 8010ac8 <UART_SetConfig+0x218>)
 8010ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac8:	08010ae1 	.word	0x08010ae1
 8010acc:	08010ae9 	.word	0x08010ae9
 8010ad0:	08010af1 	.word	0x08010af1
 8010ad4:	08010af9 	.word	0x08010af9
 8010ad8:	08010b01 	.word	0x08010b01
 8010adc:	08010b09 	.word	0x08010b09
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ae6:	e1b6      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010ae8:	2304      	movs	r3, #4
 8010aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aee:	e1b2      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010af0:	2308      	movs	r3, #8
 8010af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010af6:	e1ae      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010af8:	2310      	movs	r3, #16
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010afe:	e1aa      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b00:	2320      	movs	r3, #32
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b06:	e1a6      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b08:	2340      	movs	r3, #64	; 0x40
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0e:	e1a2      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b10:	2380      	movs	r3, #128	; 0x80
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b16:	e19e      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4a35      	ldr	r2, [pc, #212]	; (8010bf4 <UART_SetConfig+0x344>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d130      	bne.n	8010b84 <UART_SetConfig+0x2d4>
 8010b22:	4b31      	ldr	r3, [pc, #196]	; (8010be8 <UART_SetConfig+0x338>)
 8010b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b26:	f003 0307 	and.w	r3, r3, #7
 8010b2a:	2b05      	cmp	r3, #5
 8010b2c:	d826      	bhi.n	8010b7c <UART_SetConfig+0x2cc>
 8010b2e:	a201      	add	r2, pc, #4	; (adr r2, 8010b34 <UART_SetConfig+0x284>)
 8010b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b34:	08010b4d 	.word	0x08010b4d
 8010b38:	08010b55 	.word	0x08010b55
 8010b3c:	08010b5d 	.word	0x08010b5d
 8010b40:	08010b65 	.word	0x08010b65
 8010b44:	08010b6d 	.word	0x08010b6d
 8010b48:	08010b75 	.word	0x08010b75
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b52:	e180      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b54:	2304      	movs	r3, #4
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e17c      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b5c:	2308      	movs	r3, #8
 8010b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b62:	e178      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b64:	2310      	movs	r3, #16
 8010b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6a:	e174      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b6c:	2320      	movs	r3, #32
 8010b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b72:	e170      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b74:	2340      	movs	r3, #64	; 0x40
 8010b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7a:	e16c      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b7c:	2380      	movs	r3, #128	; 0x80
 8010b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b82:	e168      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a1b      	ldr	r2, [pc, #108]	; (8010bf8 <UART_SetConfig+0x348>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d142      	bne.n	8010c14 <UART_SetConfig+0x364>
 8010b8e:	4b16      	ldr	r3, [pc, #88]	; (8010be8 <UART_SetConfig+0x338>)
 8010b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b92:	f003 0307 	and.w	r3, r3, #7
 8010b96:	2b05      	cmp	r3, #5
 8010b98:	d838      	bhi.n	8010c0c <UART_SetConfig+0x35c>
 8010b9a:	a201      	add	r2, pc, #4	; (adr r2, 8010ba0 <UART_SetConfig+0x2f0>)
 8010b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ba0:	08010bb9 	.word	0x08010bb9
 8010ba4:	08010bc1 	.word	0x08010bc1
 8010ba8:	08010bc9 	.word	0x08010bc9
 8010bac:	08010bd1 	.word	0x08010bd1
 8010bb0:	08010bfd 	.word	0x08010bfd
 8010bb4:	08010c05 	.word	0x08010c05
 8010bb8:	2300      	movs	r3, #0
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bbe:	e14a      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010bc0:	2304      	movs	r3, #4
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e146      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010bc8:	2308      	movs	r3, #8
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bce:	e142      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010bd0:	2310      	movs	r3, #16
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd6:	e13e      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010bd8:	cfff69f3 	.word	0xcfff69f3
 8010bdc:	58000c00 	.word	0x58000c00
 8010be0:	11fff4ff 	.word	0x11fff4ff
 8010be4:	40011000 	.word	0x40011000
 8010be8:	58024400 	.word	0x58024400
 8010bec:	40004400 	.word	0x40004400
 8010bf0:	40004800 	.word	0x40004800
 8010bf4:	40004c00 	.word	0x40004c00
 8010bf8:	40005000 	.word	0x40005000
 8010bfc:	2320      	movs	r3, #32
 8010bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c02:	e128      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010c04:	2340      	movs	r3, #64	; 0x40
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0a:	e124      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010c0c:	2380      	movs	r3, #128	; 0x80
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c12:	e120      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	4acb      	ldr	r2, [pc, #812]	; (8010f48 <UART_SetConfig+0x698>)
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d176      	bne.n	8010d0c <UART_SetConfig+0x45c>
 8010c1e:	4bcb      	ldr	r3, [pc, #812]	; (8010f4c <UART_SetConfig+0x69c>)
 8010c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c26:	2b28      	cmp	r3, #40	; 0x28
 8010c28:	d86c      	bhi.n	8010d04 <UART_SetConfig+0x454>
 8010c2a:	a201      	add	r2, pc, #4	; (adr r2, 8010c30 <UART_SetConfig+0x380>)
 8010c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c30:	08010cd5 	.word	0x08010cd5
 8010c34:	08010d05 	.word	0x08010d05
 8010c38:	08010d05 	.word	0x08010d05
 8010c3c:	08010d05 	.word	0x08010d05
 8010c40:	08010d05 	.word	0x08010d05
 8010c44:	08010d05 	.word	0x08010d05
 8010c48:	08010d05 	.word	0x08010d05
 8010c4c:	08010d05 	.word	0x08010d05
 8010c50:	08010cdd 	.word	0x08010cdd
 8010c54:	08010d05 	.word	0x08010d05
 8010c58:	08010d05 	.word	0x08010d05
 8010c5c:	08010d05 	.word	0x08010d05
 8010c60:	08010d05 	.word	0x08010d05
 8010c64:	08010d05 	.word	0x08010d05
 8010c68:	08010d05 	.word	0x08010d05
 8010c6c:	08010d05 	.word	0x08010d05
 8010c70:	08010ce5 	.word	0x08010ce5
 8010c74:	08010d05 	.word	0x08010d05
 8010c78:	08010d05 	.word	0x08010d05
 8010c7c:	08010d05 	.word	0x08010d05
 8010c80:	08010d05 	.word	0x08010d05
 8010c84:	08010d05 	.word	0x08010d05
 8010c88:	08010d05 	.word	0x08010d05
 8010c8c:	08010d05 	.word	0x08010d05
 8010c90:	08010ced 	.word	0x08010ced
 8010c94:	08010d05 	.word	0x08010d05
 8010c98:	08010d05 	.word	0x08010d05
 8010c9c:	08010d05 	.word	0x08010d05
 8010ca0:	08010d05 	.word	0x08010d05
 8010ca4:	08010d05 	.word	0x08010d05
 8010ca8:	08010d05 	.word	0x08010d05
 8010cac:	08010d05 	.word	0x08010d05
 8010cb0:	08010cf5 	.word	0x08010cf5
 8010cb4:	08010d05 	.word	0x08010d05
 8010cb8:	08010d05 	.word	0x08010d05
 8010cbc:	08010d05 	.word	0x08010d05
 8010cc0:	08010d05 	.word	0x08010d05
 8010cc4:	08010d05 	.word	0x08010d05
 8010cc8:	08010d05 	.word	0x08010d05
 8010ccc:	08010d05 	.word	0x08010d05
 8010cd0:	08010cfd 	.word	0x08010cfd
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cda:	e0bc      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010cdc:	2304      	movs	r3, #4
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce2:	e0b8      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010ce4:	2308      	movs	r3, #8
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cea:	e0b4      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010cec:	2310      	movs	r3, #16
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf2:	e0b0      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010cf4:	2320      	movs	r3, #32
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfa:	e0ac      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010cfc:	2340      	movs	r3, #64	; 0x40
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d02:	e0a8      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d04:	2380      	movs	r3, #128	; 0x80
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e0a4      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4a8f      	ldr	r2, [pc, #572]	; (8010f50 <UART_SetConfig+0x6a0>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d130      	bne.n	8010d78 <UART_SetConfig+0x4c8>
 8010d16:	4b8d      	ldr	r3, [pc, #564]	; (8010f4c <UART_SetConfig+0x69c>)
 8010d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d1a:	f003 0307 	and.w	r3, r3, #7
 8010d1e:	2b05      	cmp	r3, #5
 8010d20:	d826      	bhi.n	8010d70 <UART_SetConfig+0x4c0>
 8010d22:	a201      	add	r2, pc, #4	; (adr r2, 8010d28 <UART_SetConfig+0x478>)
 8010d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d28:	08010d41 	.word	0x08010d41
 8010d2c:	08010d49 	.word	0x08010d49
 8010d30:	08010d51 	.word	0x08010d51
 8010d34:	08010d59 	.word	0x08010d59
 8010d38:	08010d61 	.word	0x08010d61
 8010d3c:	08010d69 	.word	0x08010d69
 8010d40:	2300      	movs	r3, #0
 8010d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d46:	e086      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d48:	2304      	movs	r3, #4
 8010d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4e:	e082      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d50:	2308      	movs	r3, #8
 8010d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d56:	e07e      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d58:	2310      	movs	r3, #16
 8010d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5e:	e07a      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d60:	2320      	movs	r3, #32
 8010d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d66:	e076      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d68:	2340      	movs	r3, #64	; 0x40
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6e:	e072      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d70:	2380      	movs	r3, #128	; 0x80
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e06e      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a75      	ldr	r2, [pc, #468]	; (8010f54 <UART_SetConfig+0x6a4>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d130      	bne.n	8010de4 <UART_SetConfig+0x534>
 8010d82:	4b72      	ldr	r3, [pc, #456]	; (8010f4c <UART_SetConfig+0x69c>)
 8010d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d86:	f003 0307 	and.w	r3, r3, #7
 8010d8a:	2b05      	cmp	r3, #5
 8010d8c:	d826      	bhi.n	8010ddc <UART_SetConfig+0x52c>
 8010d8e:	a201      	add	r2, pc, #4	; (adr r2, 8010d94 <UART_SetConfig+0x4e4>)
 8010d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d94:	08010dad 	.word	0x08010dad
 8010d98:	08010db5 	.word	0x08010db5
 8010d9c:	08010dbd 	.word	0x08010dbd
 8010da0:	08010dc5 	.word	0x08010dc5
 8010da4:	08010dcd 	.word	0x08010dcd
 8010da8:	08010dd5 	.word	0x08010dd5
 8010dac:	2300      	movs	r3, #0
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e050      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010db4:	2304      	movs	r3, #4
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e04c      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010dbc:	2308      	movs	r3, #8
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e048      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010dc4:	2310      	movs	r3, #16
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dca:	e044      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010dcc:	2320      	movs	r3, #32
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd2:	e040      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010dd4:	2340      	movs	r3, #64	; 0x40
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e03c      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010ddc:	2380      	movs	r3, #128	; 0x80
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e038      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a5b      	ldr	r2, [pc, #364]	; (8010f58 <UART_SetConfig+0x6a8>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d130      	bne.n	8010e50 <UART_SetConfig+0x5a0>
 8010dee:	4b57      	ldr	r3, [pc, #348]	; (8010f4c <UART_SetConfig+0x69c>)
 8010df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010df2:	f003 0307 	and.w	r3, r3, #7
 8010df6:	2b05      	cmp	r3, #5
 8010df8:	d826      	bhi.n	8010e48 <UART_SetConfig+0x598>
 8010dfa:	a201      	add	r2, pc, #4	; (adr r2, 8010e00 <UART_SetConfig+0x550>)
 8010dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e00:	08010e19 	.word	0x08010e19
 8010e04:	08010e21 	.word	0x08010e21
 8010e08:	08010e29 	.word	0x08010e29
 8010e0c:	08010e31 	.word	0x08010e31
 8010e10:	08010e39 	.word	0x08010e39
 8010e14:	08010e41 	.word	0x08010e41
 8010e18:	2302      	movs	r3, #2
 8010e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1e:	e01a      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010e20:	2304      	movs	r3, #4
 8010e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e26:	e016      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010e28:	2308      	movs	r3, #8
 8010e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2e:	e012      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010e30:	2310      	movs	r3, #16
 8010e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e36:	e00e      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010e38:	2320      	movs	r3, #32
 8010e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3e:	e00a      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010e40:	2340      	movs	r3, #64	; 0x40
 8010e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e46:	e006      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010e48:	2380      	movs	r3, #128	; 0x80
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e002      	b.n	8010e56 <UART_SetConfig+0x5a6>
 8010e50:	2380      	movs	r3, #128	; 0x80
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a3f      	ldr	r2, [pc, #252]	; (8010f58 <UART_SetConfig+0x6a8>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	f040 80f8 	bne.w	8011052 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010e62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e66:	2b20      	cmp	r3, #32
 8010e68:	dc46      	bgt.n	8010ef8 <UART_SetConfig+0x648>
 8010e6a:	2b02      	cmp	r3, #2
 8010e6c:	f2c0 8082 	blt.w	8010f74 <UART_SetConfig+0x6c4>
 8010e70:	3b02      	subs	r3, #2
 8010e72:	2b1e      	cmp	r3, #30
 8010e74:	d87e      	bhi.n	8010f74 <UART_SetConfig+0x6c4>
 8010e76:	a201      	add	r2, pc, #4	; (adr r2, 8010e7c <UART_SetConfig+0x5cc>)
 8010e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e7c:	08010eff 	.word	0x08010eff
 8010e80:	08010f75 	.word	0x08010f75
 8010e84:	08010f07 	.word	0x08010f07
 8010e88:	08010f75 	.word	0x08010f75
 8010e8c:	08010f75 	.word	0x08010f75
 8010e90:	08010f75 	.word	0x08010f75
 8010e94:	08010f17 	.word	0x08010f17
 8010e98:	08010f75 	.word	0x08010f75
 8010e9c:	08010f75 	.word	0x08010f75
 8010ea0:	08010f75 	.word	0x08010f75
 8010ea4:	08010f75 	.word	0x08010f75
 8010ea8:	08010f75 	.word	0x08010f75
 8010eac:	08010f75 	.word	0x08010f75
 8010eb0:	08010f75 	.word	0x08010f75
 8010eb4:	08010f27 	.word	0x08010f27
 8010eb8:	08010f75 	.word	0x08010f75
 8010ebc:	08010f75 	.word	0x08010f75
 8010ec0:	08010f75 	.word	0x08010f75
 8010ec4:	08010f75 	.word	0x08010f75
 8010ec8:	08010f75 	.word	0x08010f75
 8010ecc:	08010f75 	.word	0x08010f75
 8010ed0:	08010f75 	.word	0x08010f75
 8010ed4:	08010f75 	.word	0x08010f75
 8010ed8:	08010f75 	.word	0x08010f75
 8010edc:	08010f75 	.word	0x08010f75
 8010ee0:	08010f75 	.word	0x08010f75
 8010ee4:	08010f75 	.word	0x08010f75
 8010ee8:	08010f75 	.word	0x08010f75
 8010eec:	08010f75 	.word	0x08010f75
 8010ef0:	08010f75 	.word	0x08010f75
 8010ef4:	08010f67 	.word	0x08010f67
 8010ef8:	2b40      	cmp	r3, #64	; 0x40
 8010efa:	d037      	beq.n	8010f6c <UART_SetConfig+0x6bc>
 8010efc:	e03a      	b.n	8010f74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010efe:	f7fb fd2b 	bl	800c958 <HAL_RCCEx_GetD3PCLK1Freq>
 8010f02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f04:	e03c      	b.n	8010f80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fb fd3a 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f14:	e034      	b.n	8010f80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f16:	f107 0318 	add.w	r3, r7, #24
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fb fe86 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f24:	e02c      	b.n	8010f80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f26:	4b09      	ldr	r3, [pc, #36]	; (8010f4c <UART_SetConfig+0x69c>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f003 0320 	and.w	r3, r3, #32
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d016      	beq.n	8010f60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f32:	4b06      	ldr	r3, [pc, #24]	; (8010f4c <UART_SetConfig+0x69c>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	08db      	lsrs	r3, r3, #3
 8010f38:	f003 0303 	and.w	r3, r3, #3
 8010f3c:	4a07      	ldr	r2, [pc, #28]	; (8010f5c <UART_SetConfig+0x6ac>)
 8010f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8010f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f44:	e01c      	b.n	8010f80 <UART_SetConfig+0x6d0>
 8010f46:	bf00      	nop
 8010f48:	40011400 	.word	0x40011400
 8010f4c:	58024400 	.word	0x58024400
 8010f50:	40007800 	.word	0x40007800
 8010f54:	40007c00 	.word	0x40007c00
 8010f58:	58000c00 	.word	0x58000c00
 8010f5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010f60:	4b9d      	ldr	r3, [pc, #628]	; (80111d8 <UART_SetConfig+0x928>)
 8010f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f64:	e00c      	b.n	8010f80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f66:	4b9d      	ldr	r3, [pc, #628]	; (80111dc <UART_SetConfig+0x92c>)
 8010f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f6a:	e009      	b.n	8010f80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f72:	e005      	b.n	8010f80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010f74:	2300      	movs	r3, #0
 8010f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f000 81de 	beq.w	8011344 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f8c:	4a94      	ldr	r2, [pc, #592]	; (80111e0 <UART_SetConfig+0x930>)
 8010f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f92:	461a      	mov	r2, r3
 8010f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f9a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	685a      	ldr	r2, [r3, #4]
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	005b      	lsls	r3, r3, #1
 8010fa4:	4413      	add	r3, r2
 8010fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d305      	bcc.n	8010fb8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d903      	bls.n	8010fc0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010fbe:	e1c1      	b.n	8011344 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	60bb      	str	r3, [r7, #8]
 8010fc6:	60fa      	str	r2, [r7, #12]
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fcc:	4a84      	ldr	r2, [pc, #528]	; (80111e0 <UART_SetConfig+0x930>)
 8010fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	603b      	str	r3, [r7, #0]
 8010fd8:	607a      	str	r2, [r7, #4]
 8010fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010fe2:	f7ef f97d 	bl	80002e0 <__aeabi_uldivmod>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4610      	mov	r0, r2
 8010fec:	4619      	mov	r1, r3
 8010fee:	f04f 0200 	mov.w	r2, #0
 8010ff2:	f04f 0300 	mov.w	r3, #0
 8010ff6:	020b      	lsls	r3, r1, #8
 8010ff8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010ffc:	0202      	lsls	r2, r0, #8
 8010ffe:	6979      	ldr	r1, [r7, #20]
 8011000:	6849      	ldr	r1, [r1, #4]
 8011002:	0849      	lsrs	r1, r1, #1
 8011004:	2000      	movs	r0, #0
 8011006:	460c      	mov	r4, r1
 8011008:	4605      	mov	r5, r0
 801100a:	eb12 0804 	adds.w	r8, r2, r4
 801100e:	eb43 0905 	adc.w	r9, r3, r5
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	469a      	mov	sl, r3
 801101a:	4693      	mov	fp, r2
 801101c:	4652      	mov	r2, sl
 801101e:	465b      	mov	r3, fp
 8011020:	4640      	mov	r0, r8
 8011022:	4649      	mov	r1, r9
 8011024:	f7ef f95c 	bl	80002e0 <__aeabi_uldivmod>
 8011028:	4602      	mov	r2, r0
 801102a:	460b      	mov	r3, r1
 801102c:	4613      	mov	r3, r2
 801102e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011036:	d308      	bcc.n	801104a <UART_SetConfig+0x79a>
 8011038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801103e:	d204      	bcs.n	801104a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011046:	60da      	str	r2, [r3, #12]
 8011048:	e17c      	b.n	8011344 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801104a:	2301      	movs	r3, #1
 801104c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011050:	e178      	b.n	8011344 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	69db      	ldr	r3, [r3, #28]
 8011056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801105a:	f040 80c5 	bne.w	80111e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801105e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011062:	2b20      	cmp	r3, #32
 8011064:	dc48      	bgt.n	80110f8 <UART_SetConfig+0x848>
 8011066:	2b00      	cmp	r3, #0
 8011068:	db7b      	blt.n	8011162 <UART_SetConfig+0x8b2>
 801106a:	2b20      	cmp	r3, #32
 801106c:	d879      	bhi.n	8011162 <UART_SetConfig+0x8b2>
 801106e:	a201      	add	r2, pc, #4	; (adr r2, 8011074 <UART_SetConfig+0x7c4>)
 8011070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011074:	080110ff 	.word	0x080110ff
 8011078:	08011107 	.word	0x08011107
 801107c:	08011163 	.word	0x08011163
 8011080:	08011163 	.word	0x08011163
 8011084:	0801110f 	.word	0x0801110f
 8011088:	08011163 	.word	0x08011163
 801108c:	08011163 	.word	0x08011163
 8011090:	08011163 	.word	0x08011163
 8011094:	0801111f 	.word	0x0801111f
 8011098:	08011163 	.word	0x08011163
 801109c:	08011163 	.word	0x08011163
 80110a0:	08011163 	.word	0x08011163
 80110a4:	08011163 	.word	0x08011163
 80110a8:	08011163 	.word	0x08011163
 80110ac:	08011163 	.word	0x08011163
 80110b0:	08011163 	.word	0x08011163
 80110b4:	0801112f 	.word	0x0801112f
 80110b8:	08011163 	.word	0x08011163
 80110bc:	08011163 	.word	0x08011163
 80110c0:	08011163 	.word	0x08011163
 80110c4:	08011163 	.word	0x08011163
 80110c8:	08011163 	.word	0x08011163
 80110cc:	08011163 	.word	0x08011163
 80110d0:	08011163 	.word	0x08011163
 80110d4:	08011163 	.word	0x08011163
 80110d8:	08011163 	.word	0x08011163
 80110dc:	08011163 	.word	0x08011163
 80110e0:	08011163 	.word	0x08011163
 80110e4:	08011163 	.word	0x08011163
 80110e8:	08011163 	.word	0x08011163
 80110ec:	08011163 	.word	0x08011163
 80110f0:	08011163 	.word	0x08011163
 80110f4:	08011155 	.word	0x08011155
 80110f8:	2b40      	cmp	r3, #64	; 0x40
 80110fa:	d02e      	beq.n	801115a <UART_SetConfig+0x8aa>
 80110fc:	e031      	b.n	8011162 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110fe:	f7f9 fc33 	bl	800a968 <HAL_RCC_GetPCLK1Freq>
 8011102:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011104:	e033      	b.n	801116e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011106:	f7f9 fc45 	bl	800a994 <HAL_RCC_GetPCLK2Freq>
 801110a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801110c:	e02f      	b.n	801116e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011112:	4618      	mov	r0, r3
 8011114:	f7fb fc36 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801111c:	e027      	b.n	801116e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801111e:	f107 0318 	add.w	r3, r7, #24
 8011122:	4618      	mov	r0, r3
 8011124:	f7fb fd82 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011128:	69fb      	ldr	r3, [r7, #28]
 801112a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801112c:	e01f      	b.n	801116e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801112e:	4b2d      	ldr	r3, [pc, #180]	; (80111e4 <UART_SetConfig+0x934>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f003 0320 	and.w	r3, r3, #32
 8011136:	2b00      	cmp	r3, #0
 8011138:	d009      	beq.n	801114e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801113a:	4b2a      	ldr	r3, [pc, #168]	; (80111e4 <UART_SetConfig+0x934>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	08db      	lsrs	r3, r3, #3
 8011140:	f003 0303 	and.w	r3, r3, #3
 8011144:	4a24      	ldr	r2, [pc, #144]	; (80111d8 <UART_SetConfig+0x928>)
 8011146:	fa22 f303 	lsr.w	r3, r2, r3
 801114a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801114c:	e00f      	b.n	801116e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801114e:	4b22      	ldr	r3, [pc, #136]	; (80111d8 <UART_SetConfig+0x928>)
 8011150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011152:	e00c      	b.n	801116e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011154:	4b21      	ldr	r3, [pc, #132]	; (80111dc <UART_SetConfig+0x92c>)
 8011156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011158:	e009      	b.n	801116e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801115a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801115e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011160:	e005      	b.n	801116e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011162:	2300      	movs	r3, #0
 8011164:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011166:	2301      	movs	r3, #1
 8011168:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801116c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801116e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011170:	2b00      	cmp	r3, #0
 8011172:	f000 80e7 	beq.w	8011344 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117a:	4a19      	ldr	r2, [pc, #100]	; (80111e0 <UART_SetConfig+0x930>)
 801117c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011180:	461a      	mov	r2, r3
 8011182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011184:	fbb3 f3f2 	udiv	r3, r3, r2
 8011188:	005a      	lsls	r2, r3, #1
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	085b      	lsrs	r3, r3, #1
 8011190:	441a      	add	r2, r3
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	fbb2 f3f3 	udiv	r3, r2, r3
 801119a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801119c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801119e:	2b0f      	cmp	r3, #15
 80111a0:	d916      	bls.n	80111d0 <UART_SetConfig+0x920>
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111a8:	d212      	bcs.n	80111d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	f023 030f 	bic.w	r3, r3, #15
 80111b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80111b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b6:	085b      	lsrs	r3, r3, #1
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	f003 0307 	and.w	r3, r3, #7
 80111be:	b29a      	uxth	r2, r3
 80111c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80111c2:	4313      	orrs	r3, r2
 80111c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80111cc:	60da      	str	r2, [r3, #12]
 80111ce:	e0b9      	b.n	8011344 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80111d0:	2301      	movs	r3, #1
 80111d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80111d6:	e0b5      	b.n	8011344 <UART_SetConfig+0xa94>
 80111d8:	03d09000 	.word	0x03d09000
 80111dc:	003d0900 	.word	0x003d0900
 80111e0:	08017018 	.word	0x08017018
 80111e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80111e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80111ec:	2b20      	cmp	r3, #32
 80111ee:	dc49      	bgt.n	8011284 <UART_SetConfig+0x9d4>
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	db7c      	blt.n	80112ee <UART_SetConfig+0xa3e>
 80111f4:	2b20      	cmp	r3, #32
 80111f6:	d87a      	bhi.n	80112ee <UART_SetConfig+0xa3e>
 80111f8:	a201      	add	r2, pc, #4	; (adr r2, 8011200 <UART_SetConfig+0x950>)
 80111fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111fe:	bf00      	nop
 8011200:	0801128b 	.word	0x0801128b
 8011204:	08011293 	.word	0x08011293
 8011208:	080112ef 	.word	0x080112ef
 801120c:	080112ef 	.word	0x080112ef
 8011210:	0801129b 	.word	0x0801129b
 8011214:	080112ef 	.word	0x080112ef
 8011218:	080112ef 	.word	0x080112ef
 801121c:	080112ef 	.word	0x080112ef
 8011220:	080112ab 	.word	0x080112ab
 8011224:	080112ef 	.word	0x080112ef
 8011228:	080112ef 	.word	0x080112ef
 801122c:	080112ef 	.word	0x080112ef
 8011230:	080112ef 	.word	0x080112ef
 8011234:	080112ef 	.word	0x080112ef
 8011238:	080112ef 	.word	0x080112ef
 801123c:	080112ef 	.word	0x080112ef
 8011240:	080112bb 	.word	0x080112bb
 8011244:	080112ef 	.word	0x080112ef
 8011248:	080112ef 	.word	0x080112ef
 801124c:	080112ef 	.word	0x080112ef
 8011250:	080112ef 	.word	0x080112ef
 8011254:	080112ef 	.word	0x080112ef
 8011258:	080112ef 	.word	0x080112ef
 801125c:	080112ef 	.word	0x080112ef
 8011260:	080112ef 	.word	0x080112ef
 8011264:	080112ef 	.word	0x080112ef
 8011268:	080112ef 	.word	0x080112ef
 801126c:	080112ef 	.word	0x080112ef
 8011270:	080112ef 	.word	0x080112ef
 8011274:	080112ef 	.word	0x080112ef
 8011278:	080112ef 	.word	0x080112ef
 801127c:	080112ef 	.word	0x080112ef
 8011280:	080112e1 	.word	0x080112e1
 8011284:	2b40      	cmp	r3, #64	; 0x40
 8011286:	d02e      	beq.n	80112e6 <UART_SetConfig+0xa36>
 8011288:	e031      	b.n	80112ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801128a:	f7f9 fb6d 	bl	800a968 <HAL_RCC_GetPCLK1Freq>
 801128e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011290:	e033      	b.n	80112fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011292:	f7f9 fb7f 	bl	800a994 <HAL_RCC_GetPCLK2Freq>
 8011296:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011298:	e02f      	b.n	80112fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fb fb70 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112a8:	e027      	b.n	80112fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112aa:	f107 0318 	add.w	r3, r7, #24
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fb fcbc 	bl	800cc2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112b8:	e01f      	b.n	80112fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112ba:	4b2d      	ldr	r3, [pc, #180]	; (8011370 <UART_SetConfig+0xac0>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f003 0320 	and.w	r3, r3, #32
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d009      	beq.n	80112da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112c6:	4b2a      	ldr	r3, [pc, #168]	; (8011370 <UART_SetConfig+0xac0>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	08db      	lsrs	r3, r3, #3
 80112cc:	f003 0303 	and.w	r3, r3, #3
 80112d0:	4a28      	ldr	r2, [pc, #160]	; (8011374 <UART_SetConfig+0xac4>)
 80112d2:	fa22 f303 	lsr.w	r3, r2, r3
 80112d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112d8:	e00f      	b.n	80112fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80112da:	4b26      	ldr	r3, [pc, #152]	; (8011374 <UART_SetConfig+0xac4>)
 80112dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112de:	e00c      	b.n	80112fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112e0:	4b25      	ldr	r3, [pc, #148]	; (8011378 <UART_SetConfig+0xac8>)
 80112e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112e4:	e009      	b.n	80112fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112ec:	e005      	b.n	80112fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80112ee:	2300      	movs	r3, #0
 80112f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80112f8:	bf00      	nop
    }

    if (pclk != 0U)
 80112fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d021      	beq.n	8011344 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011304:	4a1d      	ldr	r2, [pc, #116]	; (801137c <UART_SetConfig+0xacc>)
 8011306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801130a:	461a      	mov	r2, r3
 801130c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801130e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	085b      	lsrs	r3, r3, #1
 8011318:	441a      	add	r2, r3
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011322:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011326:	2b0f      	cmp	r3, #15
 8011328:	d909      	bls.n	801133e <UART_SetConfig+0xa8e>
 801132a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011330:	d205      	bcs.n	801133e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011334:	b29a      	uxth	r2, r3
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	60da      	str	r2, [r3, #12]
 801133c:	e002      	b.n	8011344 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801133e:	2301      	movs	r3, #1
 8011340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	2201      	movs	r2, #1
 8011348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	2201      	movs	r2, #1
 8011350:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	2200      	movs	r2, #0
 8011358:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	2200      	movs	r2, #0
 801135e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011360:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011364:	4618      	mov	r0, r3
 8011366:	3748      	adds	r7, #72	; 0x48
 8011368:	46bd      	mov	sp, r7
 801136a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801136e:	bf00      	nop
 8011370:	58024400 	.word	0x58024400
 8011374:	03d09000 	.word	0x03d09000
 8011378:	003d0900 	.word	0x003d0900
 801137c:	08017018 	.word	0x08017018

08011380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011380:	b480      	push	{r7}
 8011382:	b083      	sub	sp, #12
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801138c:	f003 0308 	and.w	r3, r3, #8
 8011390:	2b00      	cmp	r3, #0
 8011392:	d00a      	beq.n	80113aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	430a      	orrs	r2, r1
 80113a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ae:	f003 0301 	and.w	r3, r3, #1
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d00a      	beq.n	80113cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	430a      	orrs	r2, r1
 80113ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113d0:	f003 0302 	and.w	r3, r3, #2
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d00a      	beq.n	80113ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	430a      	orrs	r2, r1
 80113ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113f2:	f003 0304 	and.w	r3, r3, #4
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d00a      	beq.n	8011410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	685b      	ldr	r3, [r3, #4]
 8011400:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	430a      	orrs	r2, r1
 801140e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011414:	f003 0310 	and.w	r3, r3, #16
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00a      	beq.n	8011432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	689b      	ldr	r3, [r3, #8]
 8011422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	430a      	orrs	r2, r1
 8011430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011436:	f003 0320 	and.w	r3, r3, #32
 801143a:	2b00      	cmp	r3, #0
 801143c:	d00a      	beq.n	8011454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	689b      	ldr	r3, [r3, #8]
 8011444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	430a      	orrs	r2, r1
 8011452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801145c:	2b00      	cmp	r3, #0
 801145e:	d01a      	beq.n	8011496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	430a      	orrs	r2, r1
 8011474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801147a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801147e:	d10a      	bne.n	8011496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	430a      	orrs	r2, r1
 8011494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00a      	beq.n	80114b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	430a      	orrs	r2, r1
 80114b6:	605a      	str	r2, [r3, #4]
  }
}
 80114b8:	bf00      	nop
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b098      	sub	sp, #96	; 0x60
 80114c8:	af02      	add	r7, sp, #8
 80114ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80114d4:	f7f2 faf2 	bl	8003abc <HAL_GetTick>
 80114d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f003 0308 	and.w	r3, r3, #8
 80114e4:	2b08      	cmp	r3, #8
 80114e6:	d12f      	bne.n	8011548 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80114ec:	9300      	str	r3, [sp, #0]
 80114ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114f0:	2200      	movs	r2, #0
 80114f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f000 f88e 	bl	8011618 <UART_WaitOnFlagUntilTimeout>
 80114fc:	4603      	mov	r3, r0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d022      	beq.n	8011548 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150a:	e853 3f00 	ldrex	r3, [r3]
 801150e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011516:	653b      	str	r3, [r7, #80]	; 0x50
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	461a      	mov	r2, r3
 801151e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011520:	647b      	str	r3, [r7, #68]	; 0x44
 8011522:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011524:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011528:	e841 2300 	strex	r3, r2, [r1]
 801152c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801152e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011530:	2b00      	cmp	r3, #0
 8011532:	d1e6      	bne.n	8011502 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2220      	movs	r2, #32
 8011538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2200      	movs	r2, #0
 8011540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011544:	2303      	movs	r3, #3
 8011546:	e063      	b.n	8011610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f003 0304 	and.w	r3, r3, #4
 8011552:	2b04      	cmp	r3, #4
 8011554:	d149      	bne.n	80115ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011556:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801155a:	9300      	str	r3, [sp, #0]
 801155c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801155e:	2200      	movs	r2, #0
 8011560:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 f857 	bl	8011618 <UART_WaitOnFlagUntilTimeout>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d03c      	beq.n	80115ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011578:	e853 3f00 	ldrex	r3, [r3]
 801157c:	623b      	str	r3, [r7, #32]
   return(result);
 801157e:	6a3b      	ldr	r3, [r7, #32]
 8011580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	461a      	mov	r2, r3
 801158c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801158e:	633b      	str	r3, [r7, #48]	; 0x30
 8011590:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011596:	e841 2300 	strex	r3, r2, [r1]
 801159a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d1e6      	bne.n	8011570 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	3308      	adds	r3, #8
 80115a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	e853 3f00 	ldrex	r3, [r3]
 80115b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f023 0301 	bic.w	r3, r3, #1
 80115b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	3308      	adds	r3, #8
 80115c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115c2:	61fa      	str	r2, [r7, #28]
 80115c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c6:	69b9      	ldr	r1, [r7, #24]
 80115c8:	69fa      	ldr	r2, [r7, #28]
 80115ca:	e841 2300 	strex	r3, r2, [r1]
 80115ce:	617b      	str	r3, [r7, #20]
   return(result);
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1e5      	bne.n	80115a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2220      	movs	r2, #32
 80115da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115e6:	2303      	movs	r3, #3
 80115e8:	e012      	b.n	8011610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2220      	movs	r2, #32
 80115ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2220      	movs	r2, #32
 80115f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2200      	movs	r2, #0
 80115fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2200      	movs	r2, #0
 8011604:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2200      	movs	r2, #0
 801160a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801160e:	2300      	movs	r3, #0
}
 8011610:	4618      	mov	r0, r3
 8011612:	3758      	adds	r7, #88	; 0x58
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	60b9      	str	r1, [r7, #8]
 8011622:	603b      	str	r3, [r7, #0]
 8011624:	4613      	mov	r3, r2
 8011626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011628:	e04f      	b.n	80116ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011630:	d04b      	beq.n	80116ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011632:	f7f2 fa43 	bl	8003abc <HAL_GetTick>
 8011636:	4602      	mov	r2, r0
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	1ad3      	subs	r3, r2, r3
 801163c:	69ba      	ldr	r2, [r7, #24]
 801163e:	429a      	cmp	r2, r3
 8011640:	d302      	bcc.n	8011648 <UART_WaitOnFlagUntilTimeout+0x30>
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d101      	bne.n	801164c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011648:	2303      	movs	r3, #3
 801164a:	e04e      	b.n	80116ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f003 0304 	and.w	r3, r3, #4
 8011656:	2b00      	cmp	r3, #0
 8011658:	d037      	beq.n	80116ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	2b80      	cmp	r3, #128	; 0x80
 801165e:	d034      	beq.n	80116ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	2b40      	cmp	r3, #64	; 0x40
 8011664:	d031      	beq.n	80116ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	69db      	ldr	r3, [r3, #28]
 801166c:	f003 0308 	and.w	r3, r3, #8
 8011670:	2b08      	cmp	r3, #8
 8011672:	d110      	bne.n	8011696 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2208      	movs	r2, #8
 801167a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801167c:	68f8      	ldr	r0, [r7, #12]
 801167e:	f000 f99d 	bl	80119bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2208      	movs	r2, #8
 8011686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2200      	movs	r2, #0
 801168e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011692:	2301      	movs	r3, #1
 8011694:	e029      	b.n	80116ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	69db      	ldr	r3, [r3, #28]
 801169c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80116a4:	d111      	bne.n	80116ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80116b0:	68f8      	ldr	r0, [r7, #12]
 80116b2:	f000 f983 	bl	80119bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2220      	movs	r2, #32
 80116ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2200      	movs	r2, #0
 80116c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80116c6:	2303      	movs	r3, #3
 80116c8:	e00f      	b.n	80116ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	69da      	ldr	r2, [r3, #28]
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	4013      	ands	r3, r2
 80116d4:	68ba      	ldr	r2, [r7, #8]
 80116d6:	429a      	cmp	r2, r3
 80116d8:	bf0c      	ite	eq
 80116da:	2301      	moveq	r3, #1
 80116dc:	2300      	movne	r3, #0
 80116de:	b2db      	uxtb	r3, r3
 80116e0:	461a      	mov	r2, r3
 80116e2:	79fb      	ldrb	r3, [r7, #7]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d0a0      	beq.n	801162a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
	...

080116f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b0a3      	sub	sp, #140	; 0x8c
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	60f8      	str	r0, [r7, #12]
 80116fc:	60b9      	str	r1, [r7, #8]
 80116fe:	4613      	mov	r3, r2
 8011700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	88fa      	ldrh	r2, [r7, #6]
 801170c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	88fa      	ldrh	r2, [r7, #6]
 8011714:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2200      	movs	r2, #0
 801171c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011726:	d10e      	bne.n	8011746 <UART_Start_Receive_IT+0x52>
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	691b      	ldr	r3, [r3, #16]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d105      	bne.n	801173c <UART_Start_Receive_IT+0x48>
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011736:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801173a:	e02d      	b.n	8011798 <UART_Start_Receive_IT+0xa4>
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	22ff      	movs	r2, #255	; 0xff
 8011740:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011744:	e028      	b.n	8011798 <UART_Start_Receive_IT+0xa4>
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d10d      	bne.n	801176a <UART_Start_Receive_IT+0x76>
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	691b      	ldr	r3, [r3, #16]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d104      	bne.n	8011760 <UART_Start_Receive_IT+0x6c>
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	22ff      	movs	r2, #255	; 0xff
 801175a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801175e:	e01b      	b.n	8011798 <UART_Start_Receive_IT+0xa4>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	227f      	movs	r2, #127	; 0x7f
 8011764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011768:	e016      	b.n	8011798 <UART_Start_Receive_IT+0xa4>
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011772:	d10d      	bne.n	8011790 <UART_Start_Receive_IT+0x9c>
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	691b      	ldr	r3, [r3, #16]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d104      	bne.n	8011786 <UART_Start_Receive_IT+0x92>
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	227f      	movs	r2, #127	; 0x7f
 8011780:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011784:	e008      	b.n	8011798 <UART_Start_Receive_IT+0xa4>
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	223f      	movs	r2, #63	; 0x3f
 801178a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801178e:	e003      	b.n	8011798 <UART_Start_Receive_IT+0xa4>
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2200      	movs	r2, #0
 8011794:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2200      	movs	r2, #0
 801179c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2222      	movs	r2, #34	; 0x22
 80117a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	3308      	adds	r3, #8
 80117ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117b2:	e853 3f00 	ldrex	r3, [r3]
 80117b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80117b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117ba:	f043 0301 	orr.w	r3, r3, #1
 80117be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	3308      	adds	r3, #8
 80117c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80117cc:	673a      	str	r2, [r7, #112]	; 0x70
 80117ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80117d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80117d4:	e841 2300 	strex	r3, r2, [r1]
 80117d8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80117da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1e3      	bne.n	80117a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80117e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80117e8:	d14f      	bne.n	801188a <UART_Start_Receive_IT+0x196>
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80117f0:	88fa      	ldrh	r2, [r7, #6]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d349      	bcc.n	801188a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	689b      	ldr	r3, [r3, #8]
 80117fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117fe:	d107      	bne.n	8011810 <UART_Start_Receive_IT+0x11c>
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	691b      	ldr	r3, [r3, #16]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d103      	bne.n	8011810 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	4a47      	ldr	r2, [pc, #284]	; (8011928 <UART_Start_Receive_IT+0x234>)
 801180c:	675a      	str	r2, [r3, #116]	; 0x74
 801180e:	e002      	b.n	8011816 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	4a46      	ldr	r2, [pc, #280]	; (801192c <UART_Start_Receive_IT+0x238>)
 8011814:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d01a      	beq.n	8011854 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011826:	e853 3f00 	ldrex	r3, [r3]
 801182a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801182c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	461a      	mov	r2, r3
 801183c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011842:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011844:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011846:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011848:	e841 2300 	strex	r3, r2, [r1]
 801184c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801184e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011850:	2b00      	cmp	r3, #0
 8011852:	d1e4      	bne.n	801181e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	3308      	adds	r3, #8
 801185a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801185c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801185e:	e853 3f00 	ldrex	r3, [r3]
 8011862:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801186a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	3308      	adds	r3, #8
 8011872:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011874:	64ba      	str	r2, [r7, #72]	; 0x48
 8011876:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011878:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801187a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801187c:	e841 2300 	strex	r3, r2, [r1]
 8011880:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011884:	2b00      	cmp	r3, #0
 8011886:	d1e5      	bne.n	8011854 <UART_Start_Receive_IT+0x160>
 8011888:	e046      	b.n	8011918 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	689b      	ldr	r3, [r3, #8]
 801188e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011892:	d107      	bne.n	80118a4 <UART_Start_Receive_IT+0x1b0>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	691b      	ldr	r3, [r3, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d103      	bne.n	80118a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	4a24      	ldr	r2, [pc, #144]	; (8011930 <UART_Start_Receive_IT+0x23c>)
 80118a0:	675a      	str	r2, [r3, #116]	; 0x74
 80118a2:	e002      	b.n	80118aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	4a23      	ldr	r2, [pc, #140]	; (8011934 <UART_Start_Receive_IT+0x240>)
 80118a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	691b      	ldr	r3, [r3, #16]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d019      	beq.n	80118e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ba:	e853 3f00 	ldrex	r3, [r3]
 80118be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80118c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80118c6:	677b      	str	r3, [r7, #116]	; 0x74
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	461a      	mov	r2, r3
 80118ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118d0:	637b      	str	r3, [r7, #52]	; 0x34
 80118d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80118d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80118d8:	e841 2300 	strex	r3, r2, [r1]
 80118dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80118de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1e6      	bne.n	80118b2 <UART_Start_Receive_IT+0x1be>
 80118e4:	e018      	b.n	8011918 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	e853 3f00 	ldrex	r3, [r3]
 80118f2:	613b      	str	r3, [r7, #16]
   return(result);
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	f043 0320 	orr.w	r3, r3, #32
 80118fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	461a      	mov	r2, r3
 8011902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011904:	623b      	str	r3, [r7, #32]
 8011906:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011908:	69f9      	ldr	r1, [r7, #28]
 801190a:	6a3a      	ldr	r2, [r7, #32]
 801190c:	e841 2300 	strex	r3, r2, [r1]
 8011910:	61bb      	str	r3, [r7, #24]
   return(result);
 8011912:	69bb      	ldr	r3, [r7, #24]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1e6      	bne.n	80118e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011918:	2300      	movs	r3, #0
}
 801191a:	4618      	mov	r0, r3
 801191c:	378c      	adds	r7, #140	; 0x8c
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr
 8011926:	bf00      	nop
 8011928:	0801230d 	.word	0x0801230d
 801192c:	08011fad 	.word	0x08011fad
 8011930:	08011df5 	.word	0x08011df5
 8011934:	08011c3d 	.word	0x08011c3d

08011938 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011938:	b480      	push	{r7}
 801193a:	b08f      	sub	sp, #60	; 0x3c
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011946:	6a3b      	ldr	r3, [r7, #32]
 8011948:	e853 3f00 	ldrex	r3, [r3]
 801194c:	61fb      	str	r3, [r7, #28]
   return(result);
 801194e:	69fb      	ldr	r3, [r7, #28]
 8011950:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011954:	637b      	str	r3, [r7, #52]	; 0x34
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011960:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011966:	e841 2300 	strex	r3, r2, [r1]
 801196a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196e:	2b00      	cmp	r3, #0
 8011970:	d1e6      	bne.n	8011940 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	3308      	adds	r3, #8
 8011978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	e853 3f00 	ldrex	r3, [r3]
 8011980:	60bb      	str	r3, [r7, #8]
   return(result);
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011988:	633b      	str	r3, [r7, #48]	; 0x30
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	3308      	adds	r3, #8
 8011990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011992:	61ba      	str	r2, [r7, #24]
 8011994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011996:	6979      	ldr	r1, [r7, #20]
 8011998:	69ba      	ldr	r2, [r7, #24]
 801199a:	e841 2300 	strex	r3, r2, [r1]
 801199e:	613b      	str	r3, [r7, #16]
   return(result);
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d1e5      	bne.n	8011972 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2220      	movs	r2, #32
 80119aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80119ae:	bf00      	nop
 80119b0:	373c      	adds	r7, #60	; 0x3c
 80119b2:	46bd      	mov	sp, r7
 80119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b8:	4770      	bx	lr
	...

080119bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80119bc:	b480      	push	{r7}
 80119be:	b095      	sub	sp, #84	; 0x54
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119cc:	e853 3f00 	ldrex	r3, [r3]
 80119d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80119d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	461a      	mov	r2, r3
 80119e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119e2:	643b      	str	r3, [r7, #64]	; 0x40
 80119e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80119e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119ea:	e841 2300 	strex	r3, r2, [r1]
 80119ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80119f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1e6      	bne.n	80119c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	3308      	adds	r3, #8
 80119fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119fe:	6a3b      	ldr	r3, [r7, #32]
 8011a00:	e853 3f00 	ldrex	r3, [r3]
 8011a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a06:	69fa      	ldr	r2, [r7, #28]
 8011a08:	4b1e      	ldr	r3, [pc, #120]	; (8011a84 <UART_EndRxTransfer+0xc8>)
 8011a0a:	4013      	ands	r3, r2
 8011a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	3308      	adds	r3, #8
 8011a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011a18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a1e:	e841 2300 	strex	r3, r2, [r1]
 8011a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1e5      	bne.n	80119f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	d118      	bne.n	8011a64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	e853 3f00 	ldrex	r3, [r3]
 8011a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	f023 0310 	bic.w	r3, r3, #16
 8011a46:	647b      	str	r3, [r7, #68]	; 0x44
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a50:	61bb      	str	r3, [r7, #24]
 8011a52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a54:	6979      	ldr	r1, [r7, #20]
 8011a56:	69ba      	ldr	r2, [r7, #24]
 8011a58:	e841 2300 	strex	r3, r2, [r1]
 8011a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1e6      	bne.n	8011a32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2220      	movs	r2, #32
 8011a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2200      	movs	r2, #0
 8011a76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011a78:	bf00      	nop
 8011a7a:	3754      	adds	r7, #84	; 0x54
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	effffffe 	.word	0xeffffffe

08011a88 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b090      	sub	sp, #64	; 0x40
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a94:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	69db      	ldr	r3, [r3, #28]
 8011a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a9e:	d037      	beq.n	8011b10 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	3308      	adds	r3, #8
 8011aae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab2:	e853 3f00 	ldrex	r3, [r3]
 8011ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8011ab8:	6a3b      	ldr	r3, [r7, #32]
 8011aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	3308      	adds	r3, #8
 8011ac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ac8:	633a      	str	r2, [r7, #48]	; 0x30
 8011aca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ad0:	e841 2300 	strex	r3, r2, [r1]
 8011ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d1e5      	bne.n	8011aa8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	e853 3f00 	ldrex	r3, [r3]
 8011ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011af0:	637b      	str	r3, [r7, #52]	; 0x34
 8011af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	461a      	mov	r2, r3
 8011af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011afa:	61fb      	str	r3, [r7, #28]
 8011afc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afe:	69b9      	ldr	r1, [r7, #24]
 8011b00:	69fa      	ldr	r2, [r7, #28]
 8011b02:	e841 2300 	strex	r3, r2, [r1]
 8011b06:	617b      	str	r3, [r7, #20]
   return(result);
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1e6      	bne.n	8011adc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011b0e:	e002      	b.n	8011b16 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011b10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b12:	f7f0 fa19 	bl	8001f48 <HAL_UART_TxCpltCallback>
}
 8011b16:	bf00      	nop
 8011b18:	3740      	adds	r7, #64	; 0x40
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b084      	sub	sp, #16
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011b2c:	68f8      	ldr	r0, [r7, #12]
 8011b2e:	f7fe fe9f 	bl	8010870 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b32:	bf00      	nop
 8011b34:	3710      	adds	r7, #16
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b086      	sub	sp, #24
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	689b      	ldr	r3, [r3, #8]
 8011b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b62:	2b80      	cmp	r3, #128	; 0x80
 8011b64:	d109      	bne.n	8011b7a <UART_DMAError+0x40>
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	2b21      	cmp	r3, #33	; 0x21
 8011b6a:	d106      	bne.n	8011b7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011b74:	6978      	ldr	r0, [r7, #20]
 8011b76:	f7ff fedf 	bl	8011938 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	689b      	ldr	r3, [r3, #8]
 8011b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b84:	2b40      	cmp	r3, #64	; 0x40
 8011b86:	d109      	bne.n	8011b9c <UART_DMAError+0x62>
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2b22      	cmp	r3, #34	; 0x22
 8011b8c:	d106      	bne.n	8011b9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	2200      	movs	r2, #0
 8011b92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011b96:	6978      	ldr	r0, [r7, #20]
 8011b98:	f7ff ff10 	bl	80119bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ba2:	f043 0210 	orr.w	r2, r3, #16
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011bac:	6978      	ldr	r0, [r7, #20]
 8011bae:	f7fe fe69 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011bb2:	bf00      	nop
 8011bb4:	3718      	adds	r7, #24
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}

08011bba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011bba:	b580      	push	{r7, lr}
 8011bbc:	b084      	sub	sp, #16
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f7fe fe53 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011bde:	bf00      	nop
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}

08011be6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011be6:	b580      	push	{r7, lr}
 8011be8:	b088      	sub	sp, #32
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	e853 3f00 	ldrex	r3, [r3]
 8011bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c02:	61fb      	str	r3, [r7, #28]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	461a      	mov	r2, r3
 8011c0a:	69fb      	ldr	r3, [r7, #28]
 8011c0c:	61bb      	str	r3, [r7, #24]
 8011c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c10:	6979      	ldr	r1, [r7, #20]
 8011c12:	69ba      	ldr	r2, [r7, #24]
 8011c14:	e841 2300 	strex	r3, r2, [r1]
 8011c18:	613b      	str	r3, [r7, #16]
   return(result);
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1e6      	bne.n	8011bee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2220      	movs	r2, #32
 8011c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f7f0 f98a 	bl	8001f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c34:	bf00      	nop
 8011c36:	3720      	adds	r7, #32
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b09c      	sub	sp, #112	; 0x70
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c54:	2b22      	cmp	r3, #34	; 0x22
 8011c56:	f040 80be 	bne.w	8011dd6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011c64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011c68:	b2d9      	uxtb	r1, r3
 8011c6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011c6e:	b2da      	uxtb	r2, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c74:	400a      	ands	r2, r1
 8011c76:	b2d2      	uxtb	r2, r2
 8011c78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c7e:	1c5a      	adds	r2, r3, #1
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	3b01      	subs	r3, #1
 8011c8e:	b29a      	uxth	r2, r3
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f040 80a1 	bne.w	8011de6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cac:	e853 3f00 	ldrex	r3, [r3]
 8011cb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8011cc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011cc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011cca:	e841 2300 	strex	r3, r2, [r1]
 8011cce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1e6      	bne.n	8011ca4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	3308      	adds	r3, #8
 8011cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce0:	e853 3f00 	ldrex	r3, [r3]
 8011ce4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ce8:	f023 0301 	bic.w	r3, r3, #1
 8011cec:	667b      	str	r3, [r7, #100]	; 0x64
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	3308      	adds	r3, #8
 8011cf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011cf6:	647a      	str	r2, [r7, #68]	; 0x44
 8011cf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cfe:	e841 2300 	strex	r3, r2, [r1]
 8011d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d1e5      	bne.n	8011cd6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2220      	movs	r2, #32
 8011d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	4a33      	ldr	r2, [pc, #204]	; (8011df0 <UART_RxISR_8BIT+0x1b4>)
 8011d24:	4293      	cmp	r3, r2
 8011d26:	d01f      	beq.n	8011d68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d018      	beq.n	8011d68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	e853 3f00 	ldrex	r3, [r3]
 8011d42:	623b      	str	r3, [r7, #32]
   return(result);
 8011d44:	6a3b      	ldr	r3, [r7, #32]
 8011d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011d4a:	663b      	str	r3, [r7, #96]	; 0x60
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	461a      	mov	r2, r3
 8011d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d54:	633b      	str	r3, [r7, #48]	; 0x30
 8011d56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d5c:	e841 2300 	strex	r3, r2, [r1]
 8011d60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1e6      	bne.n	8011d36 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d12e      	bne.n	8011dce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	e853 3f00 	ldrex	r3, [r3]
 8011d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f023 0310 	bic.w	r3, r3, #16
 8011d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	461a      	mov	r2, r3
 8011d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d94:	61fb      	str	r3, [r7, #28]
 8011d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d98:	69b9      	ldr	r1, [r7, #24]
 8011d9a:	69fa      	ldr	r2, [r7, #28]
 8011d9c:	e841 2300 	strex	r3, r2, [r1]
 8011da0:	617b      	str	r3, [r7, #20]
   return(result);
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d1e6      	bne.n	8011d76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	69db      	ldr	r3, [r3, #28]
 8011dae:	f003 0310 	and.w	r3, r3, #16
 8011db2:	2b10      	cmp	r3, #16
 8011db4:	d103      	bne.n	8011dbe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	2210      	movs	r2, #16
 8011dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f7fe fd66 	bl	8010898 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011dcc:	e00b      	b.n	8011de6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7ee fc4c 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8011dd4:	e007      	b.n	8011de6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	699a      	ldr	r2, [r3, #24]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f042 0208 	orr.w	r2, r2, #8
 8011de4:	619a      	str	r2, [r3, #24]
}
 8011de6:	bf00      	nop
 8011de8:	3770      	adds	r7, #112	; 0x70
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	58000c00 	.word	0x58000c00

08011df4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b09c      	sub	sp, #112	; 0x70
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e0c:	2b22      	cmp	r3, #34	; 0x22
 8011e0e:	f040 80be 	bne.w	8011f8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e20:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011e22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011e26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011e2a:	4013      	ands	r3, r2
 8011e2c:	b29a      	uxth	r2, r3
 8011e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e36:	1c9a      	adds	r2, r3, #2
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	3b01      	subs	r3, #1
 8011e46:	b29a      	uxth	r2, r3
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f040 80a1 	bne.w	8011f9e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e64:	e853 3f00 	ldrex	r3, [r3]
 8011e68:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e70:	667b      	str	r3, [r7, #100]	; 0x64
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	461a      	mov	r2, r3
 8011e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8011e7c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e82:	e841 2300 	strex	r3, r2, [r1]
 8011e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d1e6      	bne.n	8011e5c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	3308      	adds	r3, #8
 8011e94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e98:	e853 3f00 	ldrex	r3, [r3]
 8011e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea0:	f023 0301 	bic.w	r3, r3, #1
 8011ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	3308      	adds	r3, #8
 8011eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011eae:	643a      	str	r2, [r7, #64]	; 0x40
 8011eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011eb6:	e841 2300 	strex	r3, r2, [r1]
 8011eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d1e5      	bne.n	8011e8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2220      	movs	r2, #32
 8011ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4a33      	ldr	r2, [pc, #204]	; (8011fa8 <UART_RxISR_16BIT+0x1b4>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d01f      	beq.n	8011f20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d018      	beq.n	8011f20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef4:	6a3b      	ldr	r3, [r7, #32]
 8011ef6:	e853 3f00 	ldrex	r3, [r3]
 8011efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	461a      	mov	r2, r3
 8011f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f0e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f14:	e841 2300 	strex	r3, r2, [r1]
 8011f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d1e6      	bne.n	8011eee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d12e      	bne.n	8011f86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	e853 3f00 	ldrex	r3, [r3]
 8011f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	f023 0310 	bic.w	r3, r3, #16
 8011f42:	65bb      	str	r3, [r7, #88]	; 0x58
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	461a      	mov	r2, r3
 8011f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f4c:	61bb      	str	r3, [r7, #24]
 8011f4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f50:	6979      	ldr	r1, [r7, #20]
 8011f52:	69ba      	ldr	r2, [r7, #24]
 8011f54:	e841 2300 	strex	r3, r2, [r1]
 8011f58:	613b      	str	r3, [r7, #16]
   return(result);
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1e6      	bne.n	8011f2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	69db      	ldr	r3, [r3, #28]
 8011f66:	f003 0310 	and.w	r3, r3, #16
 8011f6a:	2b10      	cmp	r3, #16
 8011f6c:	d103      	bne.n	8011f76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2210      	movs	r2, #16
 8011f74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7fe fc8a 	bl	8010898 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011f84:	e00b      	b.n	8011f9e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ee fb70 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8011f8c:	e007      	b.n	8011f9e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	699a      	ldr	r2, [r3, #24]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f042 0208 	orr.w	r2, r2, #8
 8011f9c:	619a      	str	r2, [r3, #24]
}
 8011f9e:	bf00      	nop
 8011fa0:	3770      	adds	r7, #112	; 0x70
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	58000c00 	.word	0x58000c00

08011fac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b0ac      	sub	sp, #176	; 0xb0
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	69db      	ldr	r3, [r3, #28]
 8011fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	689b      	ldr	r3, [r3, #8]
 8011fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fe2:	2b22      	cmp	r3, #34	; 0x22
 8011fe4:	f040 8180 	bne.w	80122e8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011ff2:	e123      	b.n	801223c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ffa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011ffe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012002:	b2d9      	uxtb	r1, r3
 8012004:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012008:	b2da      	uxtb	r2, r3
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801200e:	400a      	ands	r2, r1
 8012010:	b2d2      	uxtb	r2, r2
 8012012:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012018:	1c5a      	adds	r2, r3, #1
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012024:	b29b      	uxth	r3, r3
 8012026:	3b01      	subs	r3, #1
 8012028:	b29a      	uxth	r2, r3
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	69db      	ldr	r3, [r3, #28]
 8012036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801203a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801203e:	f003 0307 	and.w	r3, r3, #7
 8012042:	2b00      	cmp	r3, #0
 8012044:	d053      	beq.n	80120ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801204a:	f003 0301 	and.w	r3, r3, #1
 801204e:	2b00      	cmp	r3, #0
 8012050:	d011      	beq.n	8012076 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801205a:	2b00      	cmp	r3, #0
 801205c:	d00b      	beq.n	8012076 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2201      	movs	r2, #1
 8012064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801206c:	f043 0201 	orr.w	r2, r3, #1
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801207a:	f003 0302 	and.w	r3, r3, #2
 801207e:	2b00      	cmp	r3, #0
 8012080:	d011      	beq.n	80120a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012086:	f003 0301 	and.w	r3, r3, #1
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00b      	beq.n	80120a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2202      	movs	r2, #2
 8012094:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801209c:	f043 0204 	orr.w	r2, r3, #4
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80120a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120aa:	f003 0304 	and.w	r3, r3, #4
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d011      	beq.n	80120d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80120b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80120b6:	f003 0301 	and.w	r3, r3, #1
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d00b      	beq.n	80120d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	2204      	movs	r2, #4
 80120c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120cc:	f043 0202 	orr.w	r2, r3, #2
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d006      	beq.n	80120ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7fe fbcf 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f040 80a0 	bne.w	801223c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012104:	e853 3f00 	ldrex	r3, [r3]
 8012108:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801210a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801210c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	461a      	mov	r2, r3
 801211a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801211e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012120:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012122:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012124:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012126:	e841 2300 	strex	r3, r2, [r1]
 801212a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801212c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1e4      	bne.n	80120fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	3308      	adds	r3, #8
 8012138:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801213a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801213c:	e853 3f00 	ldrex	r3, [r3]
 8012140:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012144:	4b6e      	ldr	r3, [pc, #440]	; (8012300 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012146:	4013      	ands	r3, r2
 8012148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	3308      	adds	r3, #8
 8012152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012156:	66ba      	str	r2, [r7, #104]	; 0x68
 8012158:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801215a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801215c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801215e:	e841 2300 	strex	r3, r2, [r1]
 8012162:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012166:	2b00      	cmp	r3, #0
 8012168:	d1e3      	bne.n	8012132 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2220      	movs	r2, #32
 801216e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	4a60      	ldr	r2, [pc, #384]	; (8012304 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d021      	beq.n	80121cc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012192:	2b00      	cmp	r3, #0
 8012194:	d01a      	beq.n	80121cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801219c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801219e:	e853 3f00 	ldrex	r3, [r3]
 80121a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80121a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80121aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	461a      	mov	r2, r3
 80121b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80121b8:	657b      	str	r3, [r7, #84]	; 0x54
 80121ba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80121be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80121c0:	e841 2300 	strex	r3, r2, [r1]
 80121c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80121c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d1e4      	bne.n	8012196 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d130      	bne.n	8012236 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2200      	movs	r2, #0
 80121d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e2:	e853 3f00 	ldrex	r3, [r3]
 80121e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80121e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ea:	f023 0310 	bic.w	r3, r3, #16
 80121ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	461a      	mov	r2, r3
 80121f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80121fc:	643b      	str	r3, [r7, #64]	; 0x40
 80121fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012200:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012204:	e841 2300 	strex	r3, r2, [r1]
 8012208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1e4      	bne.n	80121da <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	69db      	ldr	r3, [r3, #28]
 8012216:	f003 0310 	and.w	r3, r3, #16
 801221a:	2b10      	cmp	r3, #16
 801221c:	d103      	bne.n	8012226 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	2210      	movs	r2, #16
 8012224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801222c:	4619      	mov	r1, r3
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7fe fb32 	bl	8010898 <HAL_UARTEx_RxEventCallback>
 8012234:	e002      	b.n	801223c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f7ee fa18 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801223c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012240:	2b00      	cmp	r3, #0
 8012242:	d006      	beq.n	8012252 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012248:	f003 0320 	and.w	r3, r3, #32
 801224c:	2b00      	cmp	r3, #0
 801224e:	f47f aed1 	bne.w	8011ff4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012258:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801225c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012260:	2b00      	cmp	r3, #0
 8012262:	d049      	beq.n	80122f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801226a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801226e:	429a      	cmp	r2, r3
 8012270:	d242      	bcs.n	80122f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	3308      	adds	r3, #8
 8012278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801227a:	6a3b      	ldr	r3, [r7, #32]
 801227c:	e853 3f00 	ldrex	r3, [r3]
 8012280:	61fb      	str	r3, [r7, #28]
   return(result);
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	3308      	adds	r3, #8
 8012292:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801229a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801229c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801229e:	e841 2300 	strex	r3, r2, [r1]
 80122a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80122a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d1e3      	bne.n	8012272 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	4a16      	ldr	r2, [pc, #88]	; (8012308 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80122ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	e853 3f00 	ldrex	r3, [r3]
 80122bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	f043 0320 	orr.w	r3, r3, #32
 80122c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	461a      	mov	r2, r3
 80122ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80122d2:	61bb      	str	r3, [r7, #24]
 80122d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122d6:	6979      	ldr	r1, [r7, #20]
 80122d8:	69ba      	ldr	r2, [r7, #24]
 80122da:	e841 2300 	strex	r3, r2, [r1]
 80122de:	613b      	str	r3, [r7, #16]
   return(result);
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1e4      	bne.n	80122b0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80122e6:	e007      	b.n	80122f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	699a      	ldr	r2, [r3, #24]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f042 0208 	orr.w	r2, r2, #8
 80122f6:	619a      	str	r2, [r3, #24]
}
 80122f8:	bf00      	nop
 80122fa:	37b0      	adds	r7, #176	; 0xb0
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	effffffe 	.word	0xeffffffe
 8012304:	58000c00 	.word	0x58000c00
 8012308:	08011c3d 	.word	0x08011c3d

0801230c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b0ae      	sub	sp, #184	; 0xb8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801231a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	69db      	ldr	r3, [r3, #28]
 8012324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	689b      	ldr	r3, [r3, #8]
 8012338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012342:	2b22      	cmp	r3, #34	; 0x22
 8012344:	f040 8184 	bne.w	8012650 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801234e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012352:	e127      	b.n	80125a4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012366:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801236a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801236e:	4013      	ands	r3, r2
 8012370:	b29a      	uxth	r2, r3
 8012372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012376:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801237c:	1c9a      	adds	r2, r3, #2
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012388:	b29b      	uxth	r3, r3
 801238a:	3b01      	subs	r3, #1
 801238c:	b29a      	uxth	r2, r3
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	69db      	ldr	r3, [r3, #28]
 801239a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801239e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80123a2:	f003 0307 	and.w	r3, r3, #7
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d053      	beq.n	8012452 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80123aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80123ae:	f003 0301 	and.w	r3, r3, #1
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d011      	beq.n	80123da <UART_RxISR_16BIT_FIFOEN+0xce>
 80123b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80123ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d00b      	beq.n	80123da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	2201      	movs	r2, #1
 80123c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123d0:	f043 0201 	orr.w	r2, r3, #1
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80123da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80123de:	f003 0302 	and.w	r3, r3, #2
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d011      	beq.n	801240a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80123e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80123ea:	f003 0301 	and.w	r3, r3, #1
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d00b      	beq.n	801240a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	2202      	movs	r2, #2
 80123f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012400:	f043 0204 	orr.w	r2, r3, #4
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801240a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801240e:	f003 0304 	and.w	r3, r3, #4
 8012412:	2b00      	cmp	r3, #0
 8012414:	d011      	beq.n	801243a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801241a:	f003 0301 	and.w	r3, r3, #1
 801241e:	2b00      	cmp	r3, #0
 8012420:	d00b      	beq.n	801243a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	2204      	movs	r2, #4
 8012428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012430:	f043 0202 	orr.w	r2, r3, #2
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012440:	2b00      	cmp	r3, #0
 8012442:	d006      	beq.n	8012452 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7fe fa1d 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012458:	b29b      	uxth	r3, r3
 801245a:	2b00      	cmp	r3, #0
 801245c:	f040 80a2 	bne.w	80125a4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012468:	e853 3f00 	ldrex	r3, [r3]
 801246c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801246e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	461a      	mov	r2, r3
 801247e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012486:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801248a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801248e:	e841 2300 	strex	r3, r2, [r1]
 8012492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012496:	2b00      	cmp	r3, #0
 8012498:	d1e2      	bne.n	8012460 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	3308      	adds	r3, #8
 80124a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124a4:	e853 3f00 	ldrex	r3, [r3]
 80124a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80124aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80124ac:	4b6e      	ldr	r3, [pc, #440]	; (8012668 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80124ae:	4013      	ands	r3, r2
 80124b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	3308      	adds	r3, #8
 80124ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80124be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80124c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80124c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80124c6:	e841 2300 	strex	r3, r2, [r1]
 80124ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80124cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1e3      	bne.n	801249a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2220      	movs	r2, #32
 80124d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2200      	movs	r2, #0
 80124de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4a60      	ldr	r2, [pc, #384]	; (801266c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d021      	beq.n	8012534 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	685b      	ldr	r3, [r3, #4]
 80124f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d01a      	beq.n	8012534 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012506:	e853 3f00 	ldrex	r3, [r3]
 801250a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801250c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801250e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	461a      	mov	r2, r3
 801251c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012520:	65bb      	str	r3, [r7, #88]	; 0x58
 8012522:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012524:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012528:	e841 2300 	strex	r3, r2, [r1]
 801252c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801252e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012530:	2b00      	cmp	r3, #0
 8012532:	d1e4      	bne.n	80124fe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012538:	2b01      	cmp	r3, #1
 801253a:	d130      	bne.n	801259e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2200      	movs	r2, #0
 8012540:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254a:	e853 3f00 	ldrex	r3, [r3]
 801254e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012552:	f023 0310 	bic.w	r3, r3, #16
 8012556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	461a      	mov	r2, r3
 8012560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012564:	647b      	str	r3, [r7, #68]	; 0x44
 8012566:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012568:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801256a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801256c:	e841 2300 	strex	r3, r2, [r1]
 8012570:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1e4      	bne.n	8012542 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	69db      	ldr	r3, [r3, #28]
 801257e:	f003 0310 	and.w	r3, r3, #16
 8012582:	2b10      	cmp	r3, #16
 8012584:	d103      	bne.n	801258e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2210      	movs	r2, #16
 801258c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012594:	4619      	mov	r1, r3
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7fe f97e 	bl	8010898 <HAL_UARTEx_RxEventCallback>
 801259c:	e002      	b.n	80125a4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7ee f864 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80125a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d006      	beq.n	80125ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80125ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80125b0:	f003 0320 	and.w	r3, r3, #32
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	f47f aecd 	bne.w	8012354 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80125c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d049      	beq.n	8012660 <UART_RxISR_16BIT_FIFOEN+0x354>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80125d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d242      	bcs.n	8012660 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	3308      	adds	r3, #8
 80125e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e4:	e853 3f00 	ldrex	r3, [r3]
 80125e8:	623b      	str	r3, [r7, #32]
   return(result);
 80125ea:	6a3b      	ldr	r3, [r7, #32]
 80125ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80125f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	3308      	adds	r3, #8
 80125fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80125fe:	633a      	str	r2, [r7, #48]	; 0x30
 8012600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012606:	e841 2300 	strex	r3, r2, [r1]
 801260a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1e3      	bne.n	80125da <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4a16      	ldr	r2, [pc, #88]	; (8012670 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012616:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	e853 3f00 	ldrex	r3, [r3]
 8012624:	60fb      	str	r3, [r7, #12]
   return(result);
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f043 0320 	orr.w	r3, r3, #32
 801262c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	461a      	mov	r2, r3
 8012636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801263a:	61fb      	str	r3, [r7, #28]
 801263c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801263e:	69b9      	ldr	r1, [r7, #24]
 8012640:	69fa      	ldr	r2, [r7, #28]
 8012642:	e841 2300 	strex	r3, r2, [r1]
 8012646:	617b      	str	r3, [r7, #20]
   return(result);
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d1e4      	bne.n	8012618 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801264e:	e007      	b.n	8012660 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	699a      	ldr	r2, [r3, #24]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f042 0208 	orr.w	r2, r2, #8
 801265e:	619a      	str	r2, [r3, #24]
}
 8012660:	bf00      	nop
 8012662:	37b8      	adds	r7, #184	; 0xb8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	effffffe 	.word	0xeffffffe
 801266c:	58000c00 	.word	0x58000c00
 8012670:	08011df5 	.word	0x08011df5

08012674 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801267c:	bf00      	nop
 801267e:	370c      	adds	r7, #12
 8012680:	46bd      	mov	sp, r7
 8012682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012686:	4770      	bx	lr

08012688 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012690:	bf00      	nop
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr

0801269c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801269c:	b480      	push	{r7}
 801269e:	b083      	sub	sp, #12
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80126a4:	bf00      	nop
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80126b0:	b480      	push	{r7}
 80126b2:	b085      	sub	sp, #20
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d101      	bne.n	80126c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80126c2:	2302      	movs	r3, #2
 80126c4:	e027      	b.n	8012716 <HAL_UARTEx_DisableFifoMode+0x66>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2201      	movs	r2, #1
 80126ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2224      	movs	r2, #36	; 0x24
 80126d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f022 0201 	bic.w	r2, r2, #1
 80126ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80126f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2200      	movs	r2, #0
 80126fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	68fa      	ldr	r2, [r7, #12]
 8012702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2220      	movs	r2, #32
 8012708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2200      	movs	r2, #0
 8012710:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012714:	2300      	movs	r3, #0
}
 8012716:	4618      	mov	r0, r3
 8012718:	3714      	adds	r7, #20
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr

08012722 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012722:	b580      	push	{r7, lr}
 8012724:	b084      	sub	sp, #16
 8012726:	af00      	add	r7, sp, #0
 8012728:	6078      	str	r0, [r7, #4]
 801272a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012732:	2b01      	cmp	r3, #1
 8012734:	d101      	bne.n	801273a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012736:	2302      	movs	r3, #2
 8012738:	e02d      	b.n	8012796 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2201      	movs	r2, #1
 801273e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2224      	movs	r2, #36	; 0x24
 8012746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	681a      	ldr	r2, [r3, #0]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f022 0201 	bic.w	r2, r2, #1
 8012760:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	689b      	ldr	r3, [r3, #8]
 8012768:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	683a      	ldr	r2, [r7, #0]
 8012772:	430a      	orrs	r2, r1
 8012774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 f850 	bl	801281c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	68fa      	ldr	r2, [r7, #12]
 8012782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2220      	movs	r2, #32
 8012788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2200      	movs	r2, #0
 8012790:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012794:	2300      	movs	r3, #0
}
 8012796:	4618      	mov	r0, r3
 8012798:	3710      	adds	r7, #16
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}

0801279e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801279e:	b580      	push	{r7, lr}
 80127a0:	b084      	sub	sp, #16
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	6078      	str	r0, [r7, #4]
 80127a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d101      	bne.n	80127b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80127b2:	2302      	movs	r3, #2
 80127b4:	e02d      	b.n	8012812 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2201      	movs	r2, #1
 80127ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2224      	movs	r2, #36	; 0x24
 80127c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	681a      	ldr	r2, [r3, #0]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f022 0201 	bic.w	r2, r2, #1
 80127dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	689b      	ldr	r3, [r3, #8]
 80127e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	683a      	ldr	r2, [r7, #0]
 80127ee:	430a      	orrs	r2, r1
 80127f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f000 f812 	bl	801281c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2220      	movs	r2, #32
 8012804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012810:	2300      	movs	r3, #0
}
 8012812:	4618      	mov	r0, r3
 8012814:	3710      	adds	r7, #16
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
	...

0801281c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801281c:	b480      	push	{r7}
 801281e:	b085      	sub	sp, #20
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012828:	2b00      	cmp	r3, #0
 801282a:	d108      	bne.n	801283e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2201      	movs	r2, #1
 8012830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2201      	movs	r2, #1
 8012838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801283c:	e031      	b.n	80128a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801283e:	2310      	movs	r3, #16
 8012840:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012842:	2310      	movs	r3, #16
 8012844:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	689b      	ldr	r3, [r3, #8]
 801284c:	0e5b      	lsrs	r3, r3, #25
 801284e:	b2db      	uxtb	r3, r3
 8012850:	f003 0307 	and.w	r3, r3, #7
 8012854:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	689b      	ldr	r3, [r3, #8]
 801285c:	0f5b      	lsrs	r3, r3, #29
 801285e:	b2db      	uxtb	r3, r3
 8012860:	f003 0307 	and.w	r3, r3, #7
 8012864:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012866:	7bbb      	ldrb	r3, [r7, #14]
 8012868:	7b3a      	ldrb	r2, [r7, #12]
 801286a:	4911      	ldr	r1, [pc, #68]	; (80128b0 <UARTEx_SetNbDataToProcess+0x94>)
 801286c:	5c8a      	ldrb	r2, [r1, r2]
 801286e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012872:	7b3a      	ldrb	r2, [r7, #12]
 8012874:	490f      	ldr	r1, [pc, #60]	; (80128b4 <UARTEx_SetNbDataToProcess+0x98>)
 8012876:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012878:	fb93 f3f2 	sdiv	r3, r3, r2
 801287c:	b29a      	uxth	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012884:	7bfb      	ldrb	r3, [r7, #15]
 8012886:	7b7a      	ldrb	r2, [r7, #13]
 8012888:	4909      	ldr	r1, [pc, #36]	; (80128b0 <UARTEx_SetNbDataToProcess+0x94>)
 801288a:	5c8a      	ldrb	r2, [r1, r2]
 801288c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012890:	7b7a      	ldrb	r2, [r7, #13]
 8012892:	4908      	ldr	r1, [pc, #32]	; (80128b4 <UARTEx_SetNbDataToProcess+0x98>)
 8012894:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012896:	fb93 f3f2 	sdiv	r3, r3, r2
 801289a:	b29a      	uxth	r2, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80128a2:	bf00      	nop
 80128a4:	3714      	adds	r7, #20
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	08017030 	.word	0x08017030
 80128b4:	08017038 	.word	0x08017038

080128b8 <__NVIC_SetPriority>:
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	4603      	mov	r3, r0
 80128c0:	6039      	str	r1, [r7, #0]
 80128c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80128c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	db0a      	blt.n	80128e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	b2da      	uxtb	r2, r3
 80128d0:	490c      	ldr	r1, [pc, #48]	; (8012904 <__NVIC_SetPriority+0x4c>)
 80128d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128d6:	0112      	lsls	r2, r2, #4
 80128d8:	b2d2      	uxtb	r2, r2
 80128da:	440b      	add	r3, r1
 80128dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80128e0:	e00a      	b.n	80128f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	b2da      	uxtb	r2, r3
 80128e6:	4908      	ldr	r1, [pc, #32]	; (8012908 <__NVIC_SetPriority+0x50>)
 80128e8:	88fb      	ldrh	r3, [r7, #6]
 80128ea:	f003 030f 	and.w	r3, r3, #15
 80128ee:	3b04      	subs	r3, #4
 80128f0:	0112      	lsls	r2, r2, #4
 80128f2:	b2d2      	uxtb	r2, r2
 80128f4:	440b      	add	r3, r1
 80128f6:	761a      	strb	r2, [r3, #24]
}
 80128f8:	bf00      	nop
 80128fa:	370c      	adds	r7, #12
 80128fc:	46bd      	mov	sp, r7
 80128fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012902:	4770      	bx	lr
 8012904:	e000e100 	.word	0xe000e100
 8012908:	e000ed00 	.word	0xe000ed00

0801290c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801290c:	b580      	push	{r7, lr}
 801290e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012910:	4b05      	ldr	r3, [pc, #20]	; (8012928 <SysTick_Handler+0x1c>)
 8012912:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012914:	f002 fbc2 	bl	801509c <xTaskGetSchedulerState>
 8012918:	4603      	mov	r3, r0
 801291a:	2b01      	cmp	r3, #1
 801291c:	d001      	beq.n	8012922 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801291e:	f003 f9e3 	bl	8015ce8 <xPortSysTickHandler>
  }
}
 8012922:	bf00      	nop
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	e000e010 	.word	0xe000e010

0801292c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801292c:	b580      	push	{r7, lr}
 801292e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012930:	2100      	movs	r1, #0
 8012932:	f06f 0004 	mvn.w	r0, #4
 8012936:	f7ff ffbf 	bl	80128b8 <__NVIC_SetPriority>
#endif
}
 801293a:	bf00      	nop
 801293c:	bd80      	pop	{r7, pc}
	...

08012940 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012940:	b480      	push	{r7}
 8012942:	b083      	sub	sp, #12
 8012944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012946:	f3ef 8305 	mrs	r3, IPSR
 801294a:	603b      	str	r3, [r7, #0]
  return(result);
 801294c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801294e:	2b00      	cmp	r3, #0
 8012950:	d003      	beq.n	801295a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012952:	f06f 0305 	mvn.w	r3, #5
 8012956:	607b      	str	r3, [r7, #4]
 8012958:	e00c      	b.n	8012974 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801295a:	4b0a      	ldr	r3, [pc, #40]	; (8012984 <osKernelInitialize+0x44>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d105      	bne.n	801296e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012962:	4b08      	ldr	r3, [pc, #32]	; (8012984 <osKernelInitialize+0x44>)
 8012964:	2201      	movs	r2, #1
 8012966:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012968:	2300      	movs	r3, #0
 801296a:	607b      	str	r3, [r7, #4]
 801296c:	e002      	b.n	8012974 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801296e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012972:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012974:	687b      	ldr	r3, [r7, #4]
}
 8012976:	4618      	mov	r0, r3
 8012978:	370c      	adds	r7, #12
 801297a:	46bd      	mov	sp, r7
 801297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012980:	4770      	bx	lr
 8012982:	bf00      	nop
 8012984:	240010cc 	.word	0x240010cc

08012988 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801298e:	f3ef 8305 	mrs	r3, IPSR
 8012992:	603b      	str	r3, [r7, #0]
  return(result);
 8012994:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012996:	2b00      	cmp	r3, #0
 8012998:	d003      	beq.n	80129a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 801299a:	f06f 0305 	mvn.w	r3, #5
 801299e:	607b      	str	r3, [r7, #4]
 80129a0:	e010      	b.n	80129c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80129a2:	4b0b      	ldr	r3, [pc, #44]	; (80129d0 <osKernelStart+0x48>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b01      	cmp	r3, #1
 80129a8:	d109      	bne.n	80129be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80129aa:	f7ff ffbf 	bl	801292c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80129ae:	4b08      	ldr	r3, [pc, #32]	; (80129d0 <osKernelStart+0x48>)
 80129b0:	2202      	movs	r2, #2
 80129b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80129b4:	f001 fe84 	bl	80146c0 <vTaskStartScheduler>
      stat = osOK;
 80129b8:	2300      	movs	r3, #0
 80129ba:	607b      	str	r3, [r7, #4]
 80129bc:	e002      	b.n	80129c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80129be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80129c4:	687b      	ldr	r3, [r7, #4]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3708      	adds	r7, #8
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	240010cc 	.word	0x240010cc

080129d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b08e      	sub	sp, #56	; 0x38
 80129d8:	af04      	add	r7, sp, #16
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80129e0:	2300      	movs	r3, #0
 80129e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129e4:	f3ef 8305 	mrs	r3, IPSR
 80129e8:	617b      	str	r3, [r7, #20]
  return(result);
 80129ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d17e      	bne.n	8012aee <osThreadNew+0x11a>
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d07b      	beq.n	8012aee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80129f6:	2380      	movs	r3, #128	; 0x80
 80129f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80129fa:	2318      	movs	r3, #24
 80129fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80129fe:	2300      	movs	r3, #0
 8012a00:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d045      	beq.n	8012a9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d002      	beq.n	8012a1c <osThreadNew+0x48>
        name = attr->name;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	699b      	ldr	r3, [r3, #24]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d002      	beq.n	8012a2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	699b      	ldr	r3, [r3, #24]
 8012a28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d008      	beq.n	8012a42 <osThreadNew+0x6e>
 8012a30:	69fb      	ldr	r3, [r7, #28]
 8012a32:	2b38      	cmp	r3, #56	; 0x38
 8012a34:	d805      	bhi.n	8012a42 <osThreadNew+0x6e>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	f003 0301 	and.w	r3, r3, #1
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d001      	beq.n	8012a46 <osThreadNew+0x72>
        return (NULL);
 8012a42:	2300      	movs	r3, #0
 8012a44:	e054      	b.n	8012af0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	695b      	ldr	r3, [r3, #20]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d003      	beq.n	8012a56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	695b      	ldr	r3, [r3, #20]
 8012a52:	089b      	lsrs	r3, r3, #2
 8012a54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	689b      	ldr	r3, [r3, #8]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d00e      	beq.n	8012a7c <osThreadNew+0xa8>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	68db      	ldr	r3, [r3, #12]
 8012a62:	2b5b      	cmp	r3, #91	; 0x5b
 8012a64:	d90a      	bls.n	8012a7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d006      	beq.n	8012a7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	695b      	ldr	r3, [r3, #20]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d002      	beq.n	8012a7c <osThreadNew+0xa8>
        mem = 1;
 8012a76:	2301      	movs	r3, #1
 8012a78:	61bb      	str	r3, [r7, #24]
 8012a7a:	e010      	b.n	8012a9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	689b      	ldr	r3, [r3, #8]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d10c      	bne.n	8012a9e <osThreadNew+0xca>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d108      	bne.n	8012a9e <osThreadNew+0xca>
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	691b      	ldr	r3, [r3, #16]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d104      	bne.n	8012a9e <osThreadNew+0xca>
          mem = 0;
 8012a94:	2300      	movs	r3, #0
 8012a96:	61bb      	str	r3, [r7, #24]
 8012a98:	e001      	b.n	8012a9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012a9e:	69bb      	ldr	r3, [r7, #24]
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	d110      	bne.n	8012ac6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012aac:	9202      	str	r2, [sp, #8]
 8012aae:	9301      	str	r3, [sp, #4]
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	9300      	str	r3, [sp, #0]
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	6a3a      	ldr	r2, [r7, #32]
 8012ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012aba:	68f8      	ldr	r0, [r7, #12]
 8012abc:	f001 fb10 	bl	80140e0 <xTaskCreateStatic>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	613b      	str	r3, [r7, #16]
 8012ac4:	e013      	b.n	8012aee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012ac6:	69bb      	ldr	r3, [r7, #24]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d110      	bne.n	8012aee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012acc:	6a3b      	ldr	r3, [r7, #32]
 8012ace:	b29a      	uxth	r2, r3
 8012ad0:	f107 0310 	add.w	r3, r7, #16
 8012ad4:	9301      	str	r3, [sp, #4]
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	9300      	str	r3, [sp, #0]
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ade:	68f8      	ldr	r0, [r7, #12]
 8012ae0:	f001 fb5b 	bl	801419a <xTaskCreate>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	d001      	beq.n	8012aee <osThreadNew+0x11a>
            hTask = NULL;
 8012aea:	2300      	movs	r3, #0
 8012aec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012aee:	693b      	ldr	r3, [r7, #16]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3728      	adds	r7, #40	; 0x28
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012afe:	f3ef 8305 	mrs	r3, IPSR
 8012b02:	603b      	str	r3, [r7, #0]
  return(result);
 8012b04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d003      	beq.n	8012b12 <osThreadYield+0x1a>
    stat = osErrorISR;
 8012b0a:	f06f 0305 	mvn.w	r3, #5
 8012b0e:	607b      	str	r3, [r7, #4]
 8012b10:	e009      	b.n	8012b26 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012b12:	2300      	movs	r3, #0
 8012b14:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012b16:	4b07      	ldr	r3, [pc, #28]	; (8012b34 <osThreadYield+0x3c>)
 8012b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b1c:	601a      	str	r2, [r3, #0]
 8012b1e:	f3bf 8f4f 	dsb	sy
 8012b22:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012b26:	687b      	ldr	r3, [r7, #4]
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr
 8012b34:	e000ed04 	.word	0xe000ed04

08012b38 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b086      	sub	sp, #24
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b44:	f3ef 8305 	mrs	r3, IPSR
 8012b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b4a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d003      	beq.n	8012b58 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012b50:	f06f 0305 	mvn.w	r3, #5
 8012b54:	617b      	str	r3, [r7, #20]
 8012b56:	e00b      	b.n	8012b70 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d103      	bne.n	8012b66 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012b5e:	f06f 0303 	mvn.w	r3, #3
 8012b62:	617b      	str	r3, [r7, #20]
 8012b64:	e004      	b.n	8012b70 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012b66:	2300      	movs	r3, #0
 8012b68:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012b6a:	6938      	ldr	r0, [r7, #16]
 8012b6c:	f001 fc8e 	bl	801448c <vTaskSuspend>
  }

  return (stat);
 8012b70:	697b      	ldr	r3, [r7, #20]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3718      	adds	r7, #24
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}

08012b7a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012b7a:	b580      	push	{r7, lr}
 8012b7c:	b084      	sub	sp, #16
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b82:	f3ef 8305 	mrs	r3, IPSR
 8012b86:	60bb      	str	r3, [r7, #8]
  return(result);
 8012b88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d003      	beq.n	8012b96 <osDelay+0x1c>
    stat = osErrorISR;
 8012b8e:	f06f 0305 	mvn.w	r3, #5
 8012b92:	60fb      	str	r3, [r7, #12]
 8012b94:	e007      	b.n	8012ba6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012b96:	2300      	movs	r3, #0
 8012b98:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d002      	beq.n	8012ba6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f001 fc3f 	bl	8014424 <vTaskDelay>
    }
  }

  return (stat);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3710      	adds	r7, #16
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b086      	sub	sp, #24
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bbc:	f3ef 8305 	mrs	r3, IPSR
 8012bc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bc2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d12d      	bne.n	8012c24 <osEventFlagsNew+0x74>
    mem = -1;
 8012bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bcc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d015      	beq.n	8012c00 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	689b      	ldr	r3, [r3, #8]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d006      	beq.n	8012bea <osEventFlagsNew+0x3a>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	68db      	ldr	r3, [r3, #12]
 8012be0:	2b1f      	cmp	r3, #31
 8012be2:	d902      	bls.n	8012bea <osEventFlagsNew+0x3a>
        mem = 1;
 8012be4:	2301      	movs	r3, #1
 8012be6:	613b      	str	r3, [r7, #16]
 8012be8:	e00c      	b.n	8012c04 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	689b      	ldr	r3, [r3, #8]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d108      	bne.n	8012c04 <osEventFlagsNew+0x54>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	68db      	ldr	r3, [r3, #12]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d104      	bne.n	8012c04 <osEventFlagsNew+0x54>
          mem = 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	613b      	str	r3, [r7, #16]
 8012bfe:	e001      	b.n	8012c04 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012c00:	2300      	movs	r3, #0
 8012c02:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	2b01      	cmp	r3, #1
 8012c08:	d106      	bne.n	8012c18 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	689b      	ldr	r3, [r3, #8]
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f000 fa1e 	bl	8013050 <xEventGroupCreateStatic>
 8012c14:	6178      	str	r0, [r7, #20]
 8012c16:	e005      	b.n	8012c24 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d102      	bne.n	8012c24 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012c1e:	f000 fa4e 	bl	80130be <xEventGroupCreate>
 8012c22:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012c24:	697b      	ldr	r3, [r7, #20]
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3718      	adds	r7, #24
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
	...

08012c30 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b086      	sub	sp, #24
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d004      	beq.n	8012c4e <osEventFlagsSet+0x1e>
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d003      	beq.n	8012c56 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012c4e:	f06f 0303 	mvn.w	r3, #3
 8012c52:	617b      	str	r3, [r7, #20]
 8012c54:	e028      	b.n	8012ca8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c56:	f3ef 8305 	mrs	r3, IPSR
 8012c5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d01d      	beq.n	8012c9e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012c62:	2300      	movs	r3, #0
 8012c64:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012c66:	f107 0308 	add.w	r3, r7, #8
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	6839      	ldr	r1, [r7, #0]
 8012c6e:	6938      	ldr	r0, [r7, #16]
 8012c70:	f000 fbc8 	bl	8013404 <xEventGroupSetBitsFromISR>
 8012c74:	4603      	mov	r3, r0
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d103      	bne.n	8012c82 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012c7a:	f06f 0302 	mvn.w	r3, #2
 8012c7e:	617b      	str	r3, [r7, #20]
 8012c80:	e012      	b.n	8012ca8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00d      	beq.n	8012ca8 <osEventFlagsSet+0x78>
 8012c8c:	4b09      	ldr	r3, [pc, #36]	; (8012cb4 <osEventFlagsSet+0x84>)
 8012c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c92:	601a      	str	r2, [r3, #0]
 8012c94:	f3bf 8f4f 	dsb	sy
 8012c98:	f3bf 8f6f 	isb	sy
 8012c9c:	e004      	b.n	8012ca8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012c9e:	6839      	ldr	r1, [r7, #0]
 8012ca0:	6938      	ldr	r0, [r7, #16]
 8012ca2:	f000 faf5 	bl	8013290 <xEventGroupSetBits>
 8012ca6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012ca8:	697b      	ldr	r3, [r7, #20]
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3718      	adds	r7, #24
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	e000ed04 	.word	0xe000ed04

08012cb8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b08c      	sub	sp, #48	; 0x30
 8012cbc:	af02      	add	r7, sp, #8
 8012cbe:	60f8      	str	r0, [r7, #12]
 8012cc0:	60b9      	str	r1, [r7, #8]
 8012cc2:	607a      	str	r2, [r7, #4]
 8012cc4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d004      	beq.n	8012cda <osEventFlagsWait+0x22>
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d003      	beq.n	8012ce2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012cda:	f06f 0303 	mvn.w	r3, #3
 8012cde:	61fb      	str	r3, [r7, #28]
 8012ce0:	e04b      	b.n	8012d7a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ce2:	f3ef 8305 	mrs	r3, IPSR
 8012ce6:	617b      	str	r3, [r7, #20]
  return(result);
 8012ce8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d003      	beq.n	8012cf6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012cee:	f06f 0305 	mvn.w	r3, #5
 8012cf2:	61fb      	str	r3, [r7, #28]
 8012cf4:	e041      	b.n	8012d7a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f003 0301 	and.w	r3, r3, #1
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d002      	beq.n	8012d06 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012d00:	2301      	movs	r3, #1
 8012d02:	627b      	str	r3, [r7, #36]	; 0x24
 8012d04:	e001      	b.n	8012d0a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012d06:	2300      	movs	r3, #0
 8012d08:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f003 0302 	and.w	r3, r3, #2
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d002      	beq.n	8012d1a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012d14:	2300      	movs	r3, #0
 8012d16:	623b      	str	r3, [r7, #32]
 8012d18:	e001      	b.n	8012d1e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	9300      	str	r3, [sp, #0]
 8012d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d24:	6a3a      	ldr	r2, [r7, #32]
 8012d26:	68b9      	ldr	r1, [r7, #8]
 8012d28:	69b8      	ldr	r0, [r7, #24]
 8012d2a:	f000 f9e3 	bl	80130f4 <xEventGroupWaitBits>
 8012d2e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f003 0301 	and.w	r3, r3, #1
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d010      	beq.n	8012d5c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012d3a:	68ba      	ldr	r2, [r7, #8]
 8012d3c:	69fb      	ldr	r3, [r7, #28]
 8012d3e:	4013      	ands	r3, r2
 8012d40:	68ba      	ldr	r2, [r7, #8]
 8012d42:	429a      	cmp	r2, r3
 8012d44:	d019      	beq.n	8012d7a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d003      	beq.n	8012d54 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012d4c:	f06f 0301 	mvn.w	r3, #1
 8012d50:	61fb      	str	r3, [r7, #28]
 8012d52:	e012      	b.n	8012d7a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012d54:	f06f 0302 	mvn.w	r3, #2
 8012d58:	61fb      	str	r3, [r7, #28]
 8012d5a:	e00e      	b.n	8012d7a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012d5c:	68ba      	ldr	r2, [r7, #8]
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	4013      	ands	r3, r2
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d109      	bne.n	8012d7a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d003      	beq.n	8012d74 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012d6c:	f06f 0301 	mvn.w	r3, #1
 8012d70:	61fb      	str	r3, [r7, #28]
 8012d72:	e002      	b.n	8012d7a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012d74:	f06f 0302 	mvn.w	r3, #2
 8012d78:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012d7a:	69fb      	ldr	r3, [r7, #28]
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3728      	adds	r7, #40	; 0x28
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b08a      	sub	sp, #40	; 0x28
 8012d88:	af02      	add	r7, sp, #8
 8012d8a:	60f8      	str	r0, [r7, #12]
 8012d8c:	60b9      	str	r1, [r7, #8]
 8012d8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012d90:	2300      	movs	r3, #0
 8012d92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d94:	f3ef 8305 	mrs	r3, IPSR
 8012d98:	613b      	str	r3, [r7, #16]
  return(result);
 8012d9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d15f      	bne.n	8012e60 <osMessageQueueNew+0xdc>
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d05c      	beq.n	8012e60 <osMessageQueueNew+0xdc>
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d059      	beq.n	8012e60 <osMessageQueueNew+0xdc>
    mem = -1;
 8012dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012db0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d029      	beq.n	8012e0c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	689b      	ldr	r3, [r3, #8]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d012      	beq.n	8012de6 <osMessageQueueNew+0x62>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	2b4f      	cmp	r3, #79	; 0x4f
 8012dc6:	d90e      	bls.n	8012de6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d00a      	beq.n	8012de6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	695a      	ldr	r2, [r3, #20]
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	68b9      	ldr	r1, [r7, #8]
 8012dd8:	fb01 f303 	mul.w	r3, r1, r3
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d302      	bcc.n	8012de6 <osMessageQueueNew+0x62>
        mem = 1;
 8012de0:	2301      	movs	r3, #1
 8012de2:	61bb      	str	r3, [r7, #24]
 8012de4:	e014      	b.n	8012e10 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	689b      	ldr	r3, [r3, #8]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d110      	bne.n	8012e10 <osMessageQueueNew+0x8c>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	68db      	ldr	r3, [r3, #12]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d10c      	bne.n	8012e10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d108      	bne.n	8012e10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	695b      	ldr	r3, [r3, #20]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d104      	bne.n	8012e10 <osMessageQueueNew+0x8c>
          mem = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	61bb      	str	r3, [r7, #24]
 8012e0a:	e001      	b.n	8012e10 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012e10:	69bb      	ldr	r3, [r7, #24]
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d10b      	bne.n	8012e2e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	691a      	ldr	r2, [r3, #16]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	689b      	ldr	r3, [r3, #8]
 8012e1e:	2100      	movs	r1, #0
 8012e20:	9100      	str	r1, [sp, #0]
 8012e22:	68b9      	ldr	r1, [r7, #8]
 8012e24:	68f8      	ldr	r0, [r7, #12]
 8012e26:	f000 fc1d 	bl	8013664 <xQueueGenericCreateStatic>
 8012e2a:	61f8      	str	r0, [r7, #28]
 8012e2c:	e008      	b.n	8012e40 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012e2e:	69bb      	ldr	r3, [r7, #24]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d105      	bne.n	8012e40 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012e34:	2200      	movs	r2, #0
 8012e36:	68b9      	ldr	r1, [r7, #8]
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f000 fc8b 	bl	8013754 <xQueueGenericCreate>
 8012e3e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012e40:	69fb      	ldr	r3, [r7, #28]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d00c      	beq.n	8012e60 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d003      	beq.n	8012e54 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	617b      	str	r3, [r7, #20]
 8012e52:	e001      	b.n	8012e58 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012e54:	2300      	movs	r3, #0
 8012e56:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012e58:	6979      	ldr	r1, [r7, #20]
 8012e5a:	69f8      	ldr	r0, [r7, #28]
 8012e5c:	f001 f8e2 	bl	8014024 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012e60:	69fb      	ldr	r3, [r7, #28]
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3720      	adds	r7, #32
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
	...

08012e6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b088      	sub	sp, #32
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	603b      	str	r3, [r7, #0]
 8012e78:	4613      	mov	r3, r2
 8012e7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012e80:	2300      	movs	r3, #0
 8012e82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e84:	f3ef 8305 	mrs	r3, IPSR
 8012e88:	617b      	str	r3, [r7, #20]
  return(result);
 8012e8a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d028      	beq.n	8012ee2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e90:	69bb      	ldr	r3, [r7, #24]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d005      	beq.n	8012ea2 <osMessageQueuePut+0x36>
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d002      	beq.n	8012ea2 <osMessageQueuePut+0x36>
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d003      	beq.n	8012eaa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012ea2:	f06f 0303 	mvn.w	r3, #3
 8012ea6:	61fb      	str	r3, [r7, #28]
 8012ea8:	e038      	b.n	8012f1c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012eae:	f107 0210 	add.w	r2, r7, #16
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	68b9      	ldr	r1, [r7, #8]
 8012eb6:	69b8      	ldr	r0, [r7, #24]
 8012eb8:	f000 fda8 	bl	8013a0c <xQueueGenericSendFromISR>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b01      	cmp	r3, #1
 8012ec0:	d003      	beq.n	8012eca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012ec2:	f06f 0302 	mvn.w	r3, #2
 8012ec6:	61fb      	str	r3, [r7, #28]
 8012ec8:	e028      	b.n	8012f1c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d025      	beq.n	8012f1c <osMessageQueuePut+0xb0>
 8012ed0:	4b15      	ldr	r3, [pc, #84]	; (8012f28 <osMessageQueuePut+0xbc>)
 8012ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ed6:	601a      	str	r2, [r3, #0]
 8012ed8:	f3bf 8f4f 	dsb	sy
 8012edc:	f3bf 8f6f 	isb	sy
 8012ee0:	e01c      	b.n	8012f1c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d002      	beq.n	8012eee <osMessageQueuePut+0x82>
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d103      	bne.n	8012ef6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012eee:	f06f 0303 	mvn.w	r3, #3
 8012ef2:	61fb      	str	r3, [r7, #28]
 8012ef4:	e012      	b.n	8012f1c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	683a      	ldr	r2, [r7, #0]
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	69b8      	ldr	r0, [r7, #24]
 8012efe:	f000 fc87 	bl	8013810 <xQueueGenericSend>
 8012f02:	4603      	mov	r3, r0
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d009      	beq.n	8012f1c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d003      	beq.n	8012f16 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012f0e:	f06f 0301 	mvn.w	r3, #1
 8012f12:	61fb      	str	r3, [r7, #28]
 8012f14:	e002      	b.n	8012f1c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012f16:	f06f 0302 	mvn.w	r3, #2
 8012f1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012f1c:	69fb      	ldr	r3, [r7, #28]
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3720      	adds	r7, #32
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	e000ed04 	.word	0xe000ed04

08012f2c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b088      	sub	sp, #32
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	607a      	str	r2, [r7, #4]
 8012f38:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f42:	f3ef 8305 	mrs	r3, IPSR
 8012f46:	617b      	str	r3, [r7, #20]
  return(result);
 8012f48:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d028      	beq.n	8012fa0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d005      	beq.n	8012f60 <osMessageQueueGet+0x34>
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d002      	beq.n	8012f60 <osMessageQueueGet+0x34>
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d003      	beq.n	8012f68 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012f60:	f06f 0303 	mvn.w	r3, #3
 8012f64:	61fb      	str	r3, [r7, #28]
 8012f66:	e037      	b.n	8012fd8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012f6c:	f107 0310 	add.w	r3, r7, #16
 8012f70:	461a      	mov	r2, r3
 8012f72:	68b9      	ldr	r1, [r7, #8]
 8012f74:	69b8      	ldr	r0, [r7, #24]
 8012f76:	f000 fec5 	bl	8013d04 <xQueueReceiveFromISR>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d003      	beq.n	8012f88 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012f80:	f06f 0302 	mvn.w	r3, #2
 8012f84:	61fb      	str	r3, [r7, #28]
 8012f86:	e027      	b.n	8012fd8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d024      	beq.n	8012fd8 <osMessageQueueGet+0xac>
 8012f8e:	4b15      	ldr	r3, [pc, #84]	; (8012fe4 <osMessageQueueGet+0xb8>)
 8012f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f94:	601a      	str	r2, [r3, #0]
 8012f96:	f3bf 8f4f 	dsb	sy
 8012f9a:	f3bf 8f6f 	isb	sy
 8012f9e:	e01b      	b.n	8012fd8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012fa0:	69bb      	ldr	r3, [r7, #24]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d002      	beq.n	8012fac <osMessageQueueGet+0x80>
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d103      	bne.n	8012fb4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012fac:	f06f 0303 	mvn.w	r3, #3
 8012fb0:	61fb      	str	r3, [r7, #28]
 8012fb2:	e011      	b.n	8012fd8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	68b9      	ldr	r1, [r7, #8]
 8012fb8:	69b8      	ldr	r0, [r7, #24]
 8012fba:	f000 fdc3 	bl	8013b44 <xQueueReceive>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d009      	beq.n	8012fd8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d003      	beq.n	8012fd2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012fca:	f06f 0301 	mvn.w	r3, #1
 8012fce:	61fb      	str	r3, [r7, #28]
 8012fd0:	e002      	b.n	8012fd8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012fd2:	f06f 0302 	mvn.w	r3, #2
 8012fd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012fd8:	69fb      	ldr	r3, [r7, #28]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3720      	adds	r7, #32
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	e000ed04 	.word	0xe000ed04

08012fe8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	60b9      	str	r1, [r7, #8]
 8012ff2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	4a07      	ldr	r2, [pc, #28]	; (8013014 <vApplicationGetIdleTaskMemory+0x2c>)
 8012ff8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	4a06      	ldr	r2, [pc, #24]	; (8013018 <vApplicationGetIdleTaskMemory+0x30>)
 8012ffe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2280      	movs	r2, #128	; 0x80
 8013004:	601a      	str	r2, [r3, #0]
}
 8013006:	bf00      	nop
 8013008:	3714      	adds	r7, #20
 801300a:	46bd      	mov	sp, r7
 801300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013010:	4770      	bx	lr
 8013012:	bf00      	nop
 8013014:	240010d0 	.word	0x240010d0
 8013018:	2400112c 	.word	0x2400112c

0801301c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801301c:	b480      	push	{r7}
 801301e:	b085      	sub	sp, #20
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	4a07      	ldr	r2, [pc, #28]	; (8013048 <vApplicationGetTimerTaskMemory+0x2c>)
 801302c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	4a06      	ldr	r2, [pc, #24]	; (801304c <vApplicationGetTimerTaskMemory+0x30>)
 8013032:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f44f 7280 	mov.w	r2, #256	; 0x100
 801303a:	601a      	str	r2, [r3, #0]
}
 801303c:	bf00      	nop
 801303e:	3714      	adds	r7, #20
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr
 8013048:	2400132c 	.word	0x2400132c
 801304c:	24001388 	.word	0x24001388

08013050 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d10a      	bne.n	8013074 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013062:	f383 8811 	msr	BASEPRI, r3
 8013066:	f3bf 8f6f 	isb	sy
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013070:	bf00      	nop
 8013072:	e7fe      	b.n	8013072 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013074:	2320      	movs	r3, #32
 8013076:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	2b20      	cmp	r3, #32
 801307c:	d00a      	beq.n	8013094 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013082:	f383 8811 	msr	BASEPRI, r3
 8013086:	f3bf 8f6f 	isb	sy
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	60fb      	str	r3, [r7, #12]
}
 8013090:	bf00      	nop
 8013092:	e7fe      	b.n	8013092 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d00a      	beq.n	80130b4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	2200      	movs	r2, #0
 80130a2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	3304      	adds	r3, #4
 80130a8:	4618      	mov	r0, r3
 80130aa:	f000 f9bf 	bl	801342c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	2201      	movs	r2, #1
 80130b2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80130b4:	697b      	ldr	r3, [r7, #20]
	}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3718      	adds	r7, #24
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b082      	sub	sp, #8
 80130c2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80130c4:	2020      	movs	r0, #32
 80130c6:	f002 fe9f 	bl	8015e08 <pvPortMalloc>
 80130ca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d00a      	beq.n	80130e8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2200      	movs	r2, #0
 80130d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	3304      	adds	r3, #4
 80130dc:	4618      	mov	r0, r3
 80130de:	f000 f9a5 	bl	801342c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2200      	movs	r2, #0
 80130e6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80130e8:	687b      	ldr	r3, [r7, #4]
	}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3708      	adds	r7, #8
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
	...

080130f4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b090      	sub	sp, #64	; 0x40
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	607a      	str	r2, [r7, #4]
 8013100:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013106:	2300      	movs	r3, #0
 8013108:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801310a:	2300      	movs	r3, #0
 801310c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d10a      	bne.n	801312a <xEventGroupWaitBits+0x36>
	__asm volatile
 8013114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013118:	f383 8811 	msr	BASEPRI, r3
 801311c:	f3bf 8f6f 	isb	sy
 8013120:	f3bf 8f4f 	dsb	sy
 8013124:	623b      	str	r3, [r7, #32]
}
 8013126:	bf00      	nop
 8013128:	e7fe      	b.n	8013128 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013130:	2b00      	cmp	r3, #0
 8013132:	d00a      	beq.n	801314a <xEventGroupWaitBits+0x56>
	__asm volatile
 8013134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013138:	f383 8811 	msr	BASEPRI, r3
 801313c:	f3bf 8f6f 	isb	sy
 8013140:	f3bf 8f4f 	dsb	sy
 8013144:	61fb      	str	r3, [r7, #28]
}
 8013146:	bf00      	nop
 8013148:	e7fe      	b.n	8013148 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d10a      	bne.n	8013166 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013154:	f383 8811 	msr	BASEPRI, r3
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	f3bf 8f4f 	dsb	sy
 8013160:	61bb      	str	r3, [r7, #24]
}
 8013162:	bf00      	nop
 8013164:	e7fe      	b.n	8013164 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013166:	f001 ff99 	bl	801509c <xTaskGetSchedulerState>
 801316a:	4603      	mov	r3, r0
 801316c:	2b00      	cmp	r3, #0
 801316e:	d102      	bne.n	8013176 <xEventGroupWaitBits+0x82>
 8013170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013172:	2b00      	cmp	r3, #0
 8013174:	d101      	bne.n	801317a <xEventGroupWaitBits+0x86>
 8013176:	2301      	movs	r3, #1
 8013178:	e000      	b.n	801317c <xEventGroupWaitBits+0x88>
 801317a:	2300      	movs	r3, #0
 801317c:	2b00      	cmp	r3, #0
 801317e:	d10a      	bne.n	8013196 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	617b      	str	r3, [r7, #20]
}
 8013192:	bf00      	nop
 8013194:	e7fe      	b.n	8013194 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013196:	f001 faf9 	bl	801478c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80131a0:	683a      	ldr	r2, [r7, #0]
 80131a2:	68b9      	ldr	r1, [r7, #8]
 80131a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80131a6:	f000 f90b 	bl	80133c0 <prvTestWaitCondition>
 80131aa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80131ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00e      	beq.n	80131d0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80131b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80131b6:	2300      	movs	r3, #0
 80131b8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d028      	beq.n	8013212 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80131c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131c2:	681a      	ldr	r2, [r3, #0]
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	43db      	mvns	r3, r3
 80131c8:	401a      	ands	r2, r3
 80131ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131cc:	601a      	str	r2, [r3, #0]
 80131ce:	e020      	b.n	8013212 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80131d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d104      	bne.n	80131e0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80131d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80131da:	2301      	movs	r3, #1
 80131dc:	633b      	str	r3, [r7, #48]	; 0x30
 80131de:	e018      	b.n	8013212 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d003      	beq.n	80131ee <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80131e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80131ec:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d003      	beq.n	80131fc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80131f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80131fa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80131fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fe:	1d18      	adds	r0, r3, #4
 8013200:	68ba      	ldr	r2, [r7, #8]
 8013202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013204:	4313      	orrs	r3, r2
 8013206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013208:	4619      	mov	r1, r3
 801320a:	f001 fcbf 	bl	8014b8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801320e:	2300      	movs	r3, #0
 8013210:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013212:	f001 fac9 	bl	80147a8 <xTaskResumeAll>
 8013216:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801321a:	2b00      	cmp	r3, #0
 801321c:	d031      	beq.n	8013282 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013220:	2b00      	cmp	r3, #0
 8013222:	d107      	bne.n	8013234 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013224:	4b19      	ldr	r3, [pc, #100]	; (801328c <xEventGroupWaitBits+0x198>)
 8013226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801322a:	601a      	str	r2, [r3, #0]
 801322c:	f3bf 8f4f 	dsb	sy
 8013230:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013234:	f001 ffbe 	bl	80151b4 <uxTaskResetEventItemValue>
 8013238:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801323a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801323c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013240:	2b00      	cmp	r3, #0
 8013242:	d11a      	bne.n	801327a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013244:	f002 fcbe 	bl	8015bc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801324e:	683a      	ldr	r2, [r7, #0]
 8013250:	68b9      	ldr	r1, [r7, #8]
 8013252:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013254:	f000 f8b4 	bl	80133c0 <prvTestWaitCondition>
 8013258:	4603      	mov	r3, r0
 801325a:	2b00      	cmp	r3, #0
 801325c:	d009      	beq.n	8013272 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d006      	beq.n	8013272 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013266:	681a      	ldr	r2, [r3, #0]
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	43db      	mvns	r3, r3
 801326c:	401a      	ands	r2, r3
 801326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013270:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013272:	2301      	movs	r3, #1
 8013274:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013276:	f002 fcd5 	bl	8015c24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801327a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801327c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013280:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013284:	4618      	mov	r0, r3
 8013286:	3740      	adds	r7, #64	; 0x40
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}
 801328c:	e000ed04 	.word	0xe000ed04

08013290 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b08e      	sub	sp, #56	; 0x38
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801329a:	2300      	movs	r3, #0
 801329c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80132a2:	2300      	movs	r3, #0
 80132a4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d10a      	bne.n	80132c2 <xEventGroupSetBits+0x32>
	__asm volatile
 80132ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b0:	f383 8811 	msr	BASEPRI, r3
 80132b4:	f3bf 8f6f 	isb	sy
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	613b      	str	r3, [r7, #16]
}
 80132be:	bf00      	nop
 80132c0:	e7fe      	b.n	80132c0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00a      	beq.n	80132e2 <xEventGroupSetBits+0x52>
	__asm volatile
 80132cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d0:	f383 8811 	msr	BASEPRI, r3
 80132d4:	f3bf 8f6f 	isb	sy
 80132d8:	f3bf 8f4f 	dsb	sy
 80132dc:	60fb      	str	r3, [r7, #12]
}
 80132de:	bf00      	nop
 80132e0:	e7fe      	b.n	80132e0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80132e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e4:	3304      	adds	r3, #4
 80132e6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ea:	3308      	adds	r3, #8
 80132ec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80132ee:	f001 fa4d 	bl	801478c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80132f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f4:	68db      	ldr	r3, [r3, #12]
 80132f6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80132f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	431a      	orrs	r2, r3
 8013300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013302:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013304:	e03c      	b.n	8013380 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013312:	2300      	movs	r3, #0
 8013314:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801331c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013324:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801332c:	2b00      	cmp	r3, #0
 801332e:	d108      	bne.n	8013342 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	69bb      	ldr	r3, [r7, #24]
 8013336:	4013      	ands	r3, r2
 8013338:	2b00      	cmp	r3, #0
 801333a:	d00b      	beq.n	8013354 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801333c:	2301      	movs	r3, #1
 801333e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013340:	e008      	b.n	8013354 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013344:	681a      	ldr	r2, [r3, #0]
 8013346:	69bb      	ldr	r3, [r7, #24]
 8013348:	4013      	ands	r3, r2
 801334a:	69ba      	ldr	r2, [r7, #24]
 801334c:	429a      	cmp	r2, r3
 801334e:	d101      	bne.n	8013354 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013350:	2301      	movs	r3, #1
 8013352:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013356:	2b00      	cmp	r3, #0
 8013358:	d010      	beq.n	801337c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013360:	2b00      	cmp	r3, #0
 8013362:	d003      	beq.n	801336c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013366:	69bb      	ldr	r3, [r7, #24]
 8013368:	4313      	orrs	r3, r2
 801336a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013374:	4619      	mov	r1, r3
 8013376:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013378:	f001 fcd4 	bl	8014d24 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801337c:	69fb      	ldr	r3, [r7, #28]
 801337e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013382:	6a3b      	ldr	r3, [r7, #32]
 8013384:	429a      	cmp	r2, r3
 8013386:	d1be      	bne.n	8013306 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338e:	43db      	mvns	r3, r3
 8013390:	401a      	ands	r2, r3
 8013392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013394:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013396:	f001 fa07 	bl	80147a8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339c:	681b      	ldr	r3, [r3, #0]
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3738      	adds	r7, #56	; 0x38
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b082      	sub	sp, #8
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	6078      	str	r0, [r7, #4]
 80133ae:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f7ff ff6c 	bl	8013290 <xEventGroupSetBits>
}
 80133b8:	bf00      	nop
 80133ba:	3708      	adds	r7, #8
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80133c0:	b480      	push	{r7}
 80133c2:	b087      	sub	sp, #28
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80133cc:	2300      	movs	r3, #0
 80133ce:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d107      	bne.n	80133e6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80133d6:	68fa      	ldr	r2, [r7, #12]
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	4013      	ands	r3, r2
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00a      	beq.n	80133f6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80133e0:	2301      	movs	r3, #1
 80133e2:	617b      	str	r3, [r7, #20]
 80133e4:	e007      	b.n	80133f6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80133e6:	68fa      	ldr	r2, [r7, #12]
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	4013      	ands	r3, r2
 80133ec:	68ba      	ldr	r2, [r7, #8]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d101      	bne.n	80133f6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80133f2:	2301      	movs	r3, #1
 80133f4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80133f6:	697b      	ldr	r3, [r7, #20]
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	371c      	adds	r7, #28
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr

08013404 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013404:	b580      	push	{r7, lr}
 8013406:	b086      	sub	sp, #24
 8013408:	af00      	add	r7, sp, #0
 801340a:	60f8      	str	r0, [r7, #12]
 801340c:	60b9      	str	r1, [r7, #8]
 801340e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	68ba      	ldr	r2, [r7, #8]
 8013414:	68f9      	ldr	r1, [r7, #12]
 8013416:	4804      	ldr	r0, [pc, #16]	; (8013428 <xEventGroupSetBitsFromISR+0x24>)
 8013418:	f002 fa86 	bl	8015928 <xTimerPendFunctionCallFromISR>
 801341c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801341e:	697b      	ldr	r3, [r7, #20]
	}
 8013420:	4618      	mov	r0, r3
 8013422:	3718      	adds	r7, #24
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}
 8013428:	080133a7 	.word	0x080133a7

0801342c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801342c:	b480      	push	{r7}
 801342e:	b083      	sub	sp, #12
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f103 0208 	add.w	r2, r3, #8
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013444:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f103 0208 	add.w	r2, r3, #8
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f103 0208 	add.w	r2, r3, #8
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2200      	movs	r2, #0
 801345e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013460:	bf00      	nop
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2200      	movs	r2, #0
 8013478:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801347a:	bf00      	nop
 801347c:	370c      	adds	r7, #12
 801347e:	46bd      	mov	sp, r7
 8013480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013484:	4770      	bx	lr

08013486 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013486:	b480      	push	{r7}
 8013488:	b085      	sub	sp, #20
 801348a:	af00      	add	r7, sp, #0
 801348c:	6078      	str	r0, [r7, #4]
 801348e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	689a      	ldr	r2, [r3, #8]
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	689b      	ldr	r3, [r3, #8]
 80134a8:	683a      	ldr	r2, [r7, #0]
 80134aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	683a      	ldr	r2, [r7, #0]
 80134b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	687a      	ldr	r2, [r7, #4]
 80134b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	1c5a      	adds	r2, r3, #1
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	601a      	str	r2, [r3, #0]
}
 80134c2:	bf00      	nop
 80134c4:	3714      	adds	r7, #20
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr

080134ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80134ce:	b480      	push	{r7}
 80134d0:	b085      	sub	sp, #20
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	6078      	str	r0, [r7, #4]
 80134d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134e4:	d103      	bne.n	80134ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	691b      	ldr	r3, [r3, #16]
 80134ea:	60fb      	str	r3, [r7, #12]
 80134ec:	e00c      	b.n	8013508 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	3308      	adds	r3, #8
 80134f2:	60fb      	str	r3, [r7, #12]
 80134f4:	e002      	b.n	80134fc <vListInsert+0x2e>
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	60fb      	str	r3, [r7, #12]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	68ba      	ldr	r2, [r7, #8]
 8013504:	429a      	cmp	r2, r3
 8013506:	d2f6      	bcs.n	80134f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	685a      	ldr	r2, [r3, #4]
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	683a      	ldr	r2, [r7, #0]
 8013516:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	683a      	ldr	r2, [r7, #0]
 8013522:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	1c5a      	adds	r2, r3, #1
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	601a      	str	r2, [r3, #0]
}
 8013534:	bf00      	nop
 8013536:	3714      	adds	r7, #20
 8013538:	46bd      	mov	sp, r7
 801353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353e:	4770      	bx	lr

08013540 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013540:	b480      	push	{r7}
 8013542:	b085      	sub	sp, #20
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	691b      	ldr	r3, [r3, #16]
 801354c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	6892      	ldr	r2, [r2, #8]
 8013556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	689b      	ldr	r3, [r3, #8]
 801355c:	687a      	ldr	r2, [r7, #4]
 801355e:	6852      	ldr	r2, [r2, #4]
 8013560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	429a      	cmp	r2, r3
 801356a:	d103      	bne.n	8013574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	689a      	ldr	r2, [r3, #8]
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2200      	movs	r2, #0
 8013578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	1e5a      	subs	r2, r3, #1
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
}
 8013588:	4618      	mov	r0, r3
 801358a:	3714      	adds	r7, #20
 801358c:	46bd      	mov	sp, r7
 801358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013592:	4770      	bx	lr

08013594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d10a      	bne.n	80135be <xQueueGenericReset+0x2a>
	__asm volatile
 80135a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ac:	f383 8811 	msr	BASEPRI, r3
 80135b0:	f3bf 8f6f 	isb	sy
 80135b4:	f3bf 8f4f 	dsb	sy
 80135b8:	60bb      	str	r3, [r7, #8]
}
 80135ba:	bf00      	nop
 80135bc:	e7fe      	b.n	80135bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80135be:	f002 fb01 	bl	8015bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135ca:	68f9      	ldr	r1, [r7, #12]
 80135cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80135ce:	fb01 f303 	mul.w	r3, r1, r3
 80135d2:	441a      	add	r2, r3
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2200      	movs	r2, #0
 80135dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135ee:	3b01      	subs	r3, #1
 80135f0:	68f9      	ldr	r1, [r7, #12]
 80135f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80135f4:	fb01 f303 	mul.w	r3, r1, r3
 80135f8:	441a      	add	r2, r3
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	22ff      	movs	r2, #255	; 0xff
 8013602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	22ff      	movs	r2, #255	; 0xff
 801360a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d114      	bne.n	801363e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	691b      	ldr	r3, [r3, #16]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d01a      	beq.n	8013652 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	3310      	adds	r3, #16
 8013620:	4618      	mov	r0, r3
 8013622:	f001 fb1b 	bl	8014c5c <xTaskRemoveFromEventList>
 8013626:	4603      	mov	r3, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d012      	beq.n	8013652 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801362c:	4b0c      	ldr	r3, [pc, #48]	; (8013660 <xQueueGenericReset+0xcc>)
 801362e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013632:	601a      	str	r2, [r3, #0]
 8013634:	f3bf 8f4f 	dsb	sy
 8013638:	f3bf 8f6f 	isb	sy
 801363c:	e009      	b.n	8013652 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	3310      	adds	r3, #16
 8013642:	4618      	mov	r0, r3
 8013644:	f7ff fef2 	bl	801342c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	3324      	adds	r3, #36	; 0x24
 801364c:	4618      	mov	r0, r3
 801364e:	f7ff feed 	bl	801342c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013652:	f002 fae7 	bl	8015c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013656:	2301      	movs	r3, #1
}
 8013658:	4618      	mov	r0, r3
 801365a:	3710      	adds	r7, #16
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}
 8013660:	e000ed04 	.word	0xe000ed04

08013664 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013664:	b580      	push	{r7, lr}
 8013666:	b08e      	sub	sp, #56	; 0x38
 8013668:	af02      	add	r7, sp, #8
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
 8013670:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d10a      	bne.n	801368e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367c:	f383 8811 	msr	BASEPRI, r3
 8013680:	f3bf 8f6f 	isb	sy
 8013684:	f3bf 8f4f 	dsb	sy
 8013688:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801368a:	bf00      	nop
 801368c:	e7fe      	b.n	801368c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d10a      	bne.n	80136aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013698:	f383 8811 	msr	BASEPRI, r3
 801369c:	f3bf 8f6f 	isb	sy
 80136a0:	f3bf 8f4f 	dsb	sy
 80136a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80136a6:	bf00      	nop
 80136a8:	e7fe      	b.n	80136a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d002      	beq.n	80136b6 <xQueueGenericCreateStatic+0x52>
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d001      	beq.n	80136ba <xQueueGenericCreateStatic+0x56>
 80136b6:	2301      	movs	r3, #1
 80136b8:	e000      	b.n	80136bc <xQueueGenericCreateStatic+0x58>
 80136ba:	2300      	movs	r3, #0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d10a      	bne.n	80136d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80136c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c4:	f383 8811 	msr	BASEPRI, r3
 80136c8:	f3bf 8f6f 	isb	sy
 80136cc:	f3bf 8f4f 	dsb	sy
 80136d0:	623b      	str	r3, [r7, #32]
}
 80136d2:	bf00      	nop
 80136d4:	e7fe      	b.n	80136d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d102      	bne.n	80136e2 <xQueueGenericCreateStatic+0x7e>
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d101      	bne.n	80136e6 <xQueueGenericCreateStatic+0x82>
 80136e2:	2301      	movs	r3, #1
 80136e4:	e000      	b.n	80136e8 <xQueueGenericCreateStatic+0x84>
 80136e6:	2300      	movs	r3, #0
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d10a      	bne.n	8013702 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80136ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f0:	f383 8811 	msr	BASEPRI, r3
 80136f4:	f3bf 8f6f 	isb	sy
 80136f8:	f3bf 8f4f 	dsb	sy
 80136fc:	61fb      	str	r3, [r7, #28]
}
 80136fe:	bf00      	nop
 8013700:	e7fe      	b.n	8013700 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013702:	2350      	movs	r3, #80	; 0x50
 8013704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	2b50      	cmp	r3, #80	; 0x50
 801370a:	d00a      	beq.n	8013722 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013710:	f383 8811 	msr	BASEPRI, r3
 8013714:	f3bf 8f6f 	isb	sy
 8013718:	f3bf 8f4f 	dsb	sy
 801371c:	61bb      	str	r3, [r7, #24]
}
 801371e:	bf00      	nop
 8013720:	e7fe      	b.n	8013720 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013722:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801372a:	2b00      	cmp	r3, #0
 801372c:	d00d      	beq.n	801374a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013730:	2201      	movs	r2, #1
 8013732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013736:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373c:	9300      	str	r3, [sp, #0]
 801373e:	4613      	mov	r3, r2
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	68b9      	ldr	r1, [r7, #8]
 8013744:	68f8      	ldr	r0, [r7, #12]
 8013746:	f000 f83f 	bl	80137c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801374c:	4618      	mov	r0, r3
 801374e:	3730      	adds	r7, #48	; 0x30
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013754:	b580      	push	{r7, lr}
 8013756:	b08a      	sub	sp, #40	; 0x28
 8013758:	af02      	add	r7, sp, #8
 801375a:	60f8      	str	r0, [r7, #12]
 801375c:	60b9      	str	r1, [r7, #8]
 801375e:	4613      	mov	r3, r2
 8013760:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d10a      	bne.n	801377e <xQueueGenericCreate+0x2a>
	__asm volatile
 8013768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801376c:	f383 8811 	msr	BASEPRI, r3
 8013770:	f3bf 8f6f 	isb	sy
 8013774:	f3bf 8f4f 	dsb	sy
 8013778:	613b      	str	r3, [r7, #16]
}
 801377a:	bf00      	nop
 801377c:	e7fe      	b.n	801377c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	68ba      	ldr	r2, [r7, #8]
 8013782:	fb02 f303 	mul.w	r3, r2, r3
 8013786:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	3350      	adds	r3, #80	; 0x50
 801378c:	4618      	mov	r0, r3
 801378e:	f002 fb3b 	bl	8015e08 <pvPortMalloc>
 8013792:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d011      	beq.n	80137be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	3350      	adds	r3, #80	; 0x50
 80137a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80137a4:	69bb      	ldr	r3, [r7, #24]
 80137a6:	2200      	movs	r2, #0
 80137a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80137ac:	79fa      	ldrb	r2, [r7, #7]
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	9300      	str	r3, [sp, #0]
 80137b2:	4613      	mov	r3, r2
 80137b4:	697a      	ldr	r2, [r7, #20]
 80137b6:	68b9      	ldr	r1, [r7, #8]
 80137b8:	68f8      	ldr	r0, [r7, #12]
 80137ba:	f000 f805 	bl	80137c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80137be:	69bb      	ldr	r3, [r7, #24]
	}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3720      	adds	r7, #32
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	60b9      	str	r1, [r7, #8]
 80137d2:	607a      	str	r2, [r7, #4]
 80137d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d103      	bne.n	80137e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80137dc:	69bb      	ldr	r3, [r7, #24]
 80137de:	69ba      	ldr	r2, [r7, #24]
 80137e0:	601a      	str	r2, [r3, #0]
 80137e2:	e002      	b.n	80137ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	68fa      	ldr	r2, [r7, #12]
 80137ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	68ba      	ldr	r2, [r7, #8]
 80137f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80137f6:	2101      	movs	r1, #1
 80137f8:	69b8      	ldr	r0, [r7, #24]
 80137fa:	f7ff fecb 	bl	8013594 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	78fa      	ldrb	r2, [r7, #3]
 8013802:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013806:	bf00      	nop
 8013808:	3710      	adds	r7, #16
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
	...

08013810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b08e      	sub	sp, #56	; 0x38
 8013814:	af00      	add	r7, sp, #0
 8013816:	60f8      	str	r0, [r7, #12]
 8013818:	60b9      	str	r1, [r7, #8]
 801381a:	607a      	str	r2, [r7, #4]
 801381c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801381e:	2300      	movs	r3, #0
 8013820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	2b00      	cmp	r3, #0
 801382a:	d10a      	bne.n	8013842 <xQueueGenericSend+0x32>
	__asm volatile
 801382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013830:	f383 8811 	msr	BASEPRI, r3
 8013834:	f3bf 8f6f 	isb	sy
 8013838:	f3bf 8f4f 	dsb	sy
 801383c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801383e:	bf00      	nop
 8013840:	e7fe      	b.n	8013840 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d103      	bne.n	8013850 <xQueueGenericSend+0x40>
 8013848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801384c:	2b00      	cmp	r3, #0
 801384e:	d101      	bne.n	8013854 <xQueueGenericSend+0x44>
 8013850:	2301      	movs	r3, #1
 8013852:	e000      	b.n	8013856 <xQueueGenericSend+0x46>
 8013854:	2300      	movs	r3, #0
 8013856:	2b00      	cmp	r3, #0
 8013858:	d10a      	bne.n	8013870 <xQueueGenericSend+0x60>
	__asm volatile
 801385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801385e:	f383 8811 	msr	BASEPRI, r3
 8013862:	f3bf 8f6f 	isb	sy
 8013866:	f3bf 8f4f 	dsb	sy
 801386a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801386c:	bf00      	nop
 801386e:	e7fe      	b.n	801386e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	2b02      	cmp	r3, #2
 8013874:	d103      	bne.n	801387e <xQueueGenericSend+0x6e>
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801387a:	2b01      	cmp	r3, #1
 801387c:	d101      	bne.n	8013882 <xQueueGenericSend+0x72>
 801387e:	2301      	movs	r3, #1
 8013880:	e000      	b.n	8013884 <xQueueGenericSend+0x74>
 8013882:	2300      	movs	r3, #0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d10a      	bne.n	801389e <xQueueGenericSend+0x8e>
	__asm volatile
 8013888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801388c:	f383 8811 	msr	BASEPRI, r3
 8013890:	f3bf 8f6f 	isb	sy
 8013894:	f3bf 8f4f 	dsb	sy
 8013898:	623b      	str	r3, [r7, #32]
}
 801389a:	bf00      	nop
 801389c:	e7fe      	b.n	801389c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801389e:	f001 fbfd 	bl	801509c <xTaskGetSchedulerState>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d102      	bne.n	80138ae <xQueueGenericSend+0x9e>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d101      	bne.n	80138b2 <xQueueGenericSend+0xa2>
 80138ae:	2301      	movs	r3, #1
 80138b0:	e000      	b.n	80138b4 <xQueueGenericSend+0xa4>
 80138b2:	2300      	movs	r3, #0
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d10a      	bne.n	80138ce <xQueueGenericSend+0xbe>
	__asm volatile
 80138b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138bc:	f383 8811 	msr	BASEPRI, r3
 80138c0:	f3bf 8f6f 	isb	sy
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	61fb      	str	r3, [r7, #28]
}
 80138ca:	bf00      	nop
 80138cc:	e7fe      	b.n	80138cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80138ce:	f002 f979 	bl	8015bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80138d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138da:	429a      	cmp	r2, r3
 80138dc:	d302      	bcc.n	80138e4 <xQueueGenericSend+0xd4>
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	2b02      	cmp	r3, #2
 80138e2:	d129      	bne.n	8013938 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138e4:	683a      	ldr	r2, [r7, #0]
 80138e6:	68b9      	ldr	r1, [r7, #8]
 80138e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138ea:	f000 fa8b 	bl	8013e04 <prvCopyDataToQueue>
 80138ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d010      	beq.n	801391a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fa:	3324      	adds	r3, #36	; 0x24
 80138fc:	4618      	mov	r0, r3
 80138fe:	f001 f9ad 	bl	8014c5c <xTaskRemoveFromEventList>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d013      	beq.n	8013930 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013908:	4b3f      	ldr	r3, [pc, #252]	; (8013a08 <xQueueGenericSend+0x1f8>)
 801390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801390e:	601a      	str	r2, [r3, #0]
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	f3bf 8f6f 	isb	sy
 8013918:	e00a      	b.n	8013930 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391c:	2b00      	cmp	r3, #0
 801391e:	d007      	beq.n	8013930 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013920:	4b39      	ldr	r3, [pc, #228]	; (8013a08 <xQueueGenericSend+0x1f8>)
 8013922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013926:	601a      	str	r2, [r3, #0]
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013930:	f002 f978 	bl	8015c24 <vPortExitCritical>
				return pdPASS;
 8013934:	2301      	movs	r3, #1
 8013936:	e063      	b.n	8013a00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d103      	bne.n	8013946 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801393e:	f002 f971 	bl	8015c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013942:	2300      	movs	r3, #0
 8013944:	e05c      	b.n	8013a00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013948:	2b00      	cmp	r3, #0
 801394a:	d106      	bne.n	801395a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801394c:	f107 0314 	add.w	r3, r7, #20
 8013950:	4618      	mov	r0, r3
 8013952:	f001 fa49 	bl	8014de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013956:	2301      	movs	r3, #1
 8013958:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801395a:	f002 f963 	bl	8015c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801395e:	f000 ff15 	bl	801478c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013962:	f002 f92f 	bl	8015bc4 <vPortEnterCritical>
 8013966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801396c:	b25b      	sxtb	r3, r3
 801396e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013972:	d103      	bne.n	801397c <xQueueGenericSend+0x16c>
 8013974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013976:	2200      	movs	r2, #0
 8013978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013982:	b25b      	sxtb	r3, r3
 8013984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013988:	d103      	bne.n	8013992 <xQueueGenericSend+0x182>
 801398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801398c:	2200      	movs	r2, #0
 801398e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013992:	f002 f947 	bl	8015c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013996:	1d3a      	adds	r2, r7, #4
 8013998:	f107 0314 	add.w	r3, r7, #20
 801399c:	4611      	mov	r1, r2
 801399e:	4618      	mov	r0, r3
 80139a0:	f001 fa38 	bl	8014e14 <xTaskCheckForTimeOut>
 80139a4:	4603      	mov	r3, r0
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d124      	bne.n	80139f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80139aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ac:	f000 fb22 	bl	8013ff4 <prvIsQueueFull>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d018      	beq.n	80139e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	3310      	adds	r3, #16
 80139ba:	687a      	ldr	r2, [r7, #4]
 80139bc:	4611      	mov	r1, r2
 80139be:	4618      	mov	r0, r3
 80139c0:	f001 f8c0 	bl	8014b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80139c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139c6:	f000 faad 	bl	8013f24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80139ca:	f000 feed 	bl	80147a8 <xTaskResumeAll>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	f47f af7c 	bne.w	80138ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80139d6:	4b0c      	ldr	r3, [pc, #48]	; (8013a08 <xQueueGenericSend+0x1f8>)
 80139d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139dc:	601a      	str	r2, [r3, #0]
 80139de:	f3bf 8f4f 	dsb	sy
 80139e2:	f3bf 8f6f 	isb	sy
 80139e6:	e772      	b.n	80138ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80139e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ea:	f000 fa9b 	bl	8013f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139ee:	f000 fedb 	bl	80147a8 <xTaskResumeAll>
 80139f2:	e76c      	b.n	80138ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80139f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139f6:	f000 fa95 	bl	8013f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139fa:	f000 fed5 	bl	80147a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80139fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3738      	adds	r7, #56	; 0x38
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	e000ed04 	.word	0xe000ed04

08013a0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b090      	sub	sp, #64	; 0x40
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	60f8      	str	r0, [r7, #12]
 8013a14:	60b9      	str	r1, [r7, #8]
 8013a16:	607a      	str	r2, [r7, #4]
 8013a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d10a      	bne.n	8013a3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a28:	f383 8811 	msr	BASEPRI, r3
 8013a2c:	f3bf 8f6f 	isb	sy
 8013a30:	f3bf 8f4f 	dsb	sy
 8013a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013a36:	bf00      	nop
 8013a38:	e7fe      	b.n	8013a38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d103      	bne.n	8013a48 <xQueueGenericSendFromISR+0x3c>
 8013a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d101      	bne.n	8013a4c <xQueueGenericSendFromISR+0x40>
 8013a48:	2301      	movs	r3, #1
 8013a4a:	e000      	b.n	8013a4e <xQueueGenericSendFromISR+0x42>
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10a      	bne.n	8013a68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a56:	f383 8811 	msr	BASEPRI, r3
 8013a5a:	f3bf 8f6f 	isb	sy
 8013a5e:	f3bf 8f4f 	dsb	sy
 8013a62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a64:	bf00      	nop
 8013a66:	e7fe      	b.n	8013a66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d103      	bne.n	8013a76 <xQueueGenericSendFromISR+0x6a>
 8013a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	d101      	bne.n	8013a7a <xQueueGenericSendFromISR+0x6e>
 8013a76:	2301      	movs	r3, #1
 8013a78:	e000      	b.n	8013a7c <xQueueGenericSendFromISR+0x70>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d10a      	bne.n	8013a96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a84:	f383 8811 	msr	BASEPRI, r3
 8013a88:	f3bf 8f6f 	isb	sy
 8013a8c:	f3bf 8f4f 	dsb	sy
 8013a90:	623b      	str	r3, [r7, #32]
}
 8013a92:	bf00      	nop
 8013a94:	e7fe      	b.n	8013a94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a96:	f002 f977 	bl	8015d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8013a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa2:	f383 8811 	msr	BASEPRI, r3
 8013aa6:	f3bf 8f6f 	isb	sy
 8013aaa:	f3bf 8f4f 	dsb	sy
 8013aae:	61fa      	str	r2, [r7, #28]
 8013ab0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013ab2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013ab4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d302      	bcc.n	8013ac8 <xQueueGenericSendFromISR+0xbc>
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	2b02      	cmp	r3, #2
 8013ac6:	d12f      	bne.n	8013b28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ad8:	683a      	ldr	r2, [r7, #0]
 8013ada:	68b9      	ldr	r1, [r7, #8]
 8013adc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ade:	f000 f991 	bl	8013e04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013ae2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013aea:	d112      	bne.n	8013b12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d016      	beq.n	8013b22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af6:	3324      	adds	r3, #36	; 0x24
 8013af8:	4618      	mov	r0, r3
 8013afa:	f001 f8af 	bl	8014c5c <xTaskRemoveFromEventList>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d00e      	beq.n	8013b22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00b      	beq.n	8013b22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	601a      	str	r2, [r3, #0]
 8013b10:	e007      	b.n	8013b22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013b16:	3301      	adds	r3, #1
 8013b18:	b2db      	uxtb	r3, r3
 8013b1a:	b25a      	sxtb	r2, r3
 8013b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013b22:	2301      	movs	r3, #1
 8013b24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013b26:	e001      	b.n	8013b2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013b36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3740      	adds	r7, #64	; 0x40
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
	...

08013b44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b08c      	sub	sp, #48	; 0x30
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	60f8      	str	r0, [r7, #12]
 8013b4c:	60b9      	str	r1, [r7, #8]
 8013b4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013b50:	2300      	movs	r3, #0
 8013b52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d10a      	bne.n	8013b74 <xQueueReceive+0x30>
	__asm volatile
 8013b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	623b      	str	r3, [r7, #32]
}
 8013b70:	bf00      	nop
 8013b72:	e7fe      	b.n	8013b72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d103      	bne.n	8013b82 <xQueueReceive+0x3e>
 8013b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d101      	bne.n	8013b86 <xQueueReceive+0x42>
 8013b82:	2301      	movs	r3, #1
 8013b84:	e000      	b.n	8013b88 <xQueueReceive+0x44>
 8013b86:	2300      	movs	r3, #0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d10a      	bne.n	8013ba2 <xQueueReceive+0x5e>
	__asm volatile
 8013b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b90:	f383 8811 	msr	BASEPRI, r3
 8013b94:	f3bf 8f6f 	isb	sy
 8013b98:	f3bf 8f4f 	dsb	sy
 8013b9c:	61fb      	str	r3, [r7, #28]
}
 8013b9e:	bf00      	nop
 8013ba0:	e7fe      	b.n	8013ba0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ba2:	f001 fa7b 	bl	801509c <xTaskGetSchedulerState>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d102      	bne.n	8013bb2 <xQueueReceive+0x6e>
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d101      	bne.n	8013bb6 <xQueueReceive+0x72>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e000      	b.n	8013bb8 <xQueueReceive+0x74>
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d10a      	bne.n	8013bd2 <xQueueReceive+0x8e>
	__asm volatile
 8013bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc0:	f383 8811 	msr	BASEPRI, r3
 8013bc4:	f3bf 8f6f 	isb	sy
 8013bc8:	f3bf 8f4f 	dsb	sy
 8013bcc:	61bb      	str	r3, [r7, #24]
}
 8013bce:	bf00      	nop
 8013bd0:	e7fe      	b.n	8013bd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013bd2:	f001 fff7 	bl	8015bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d01f      	beq.n	8013c22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013be2:	68b9      	ldr	r1, [r7, #8]
 8013be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013be6:	f000 f977 	bl	8013ed8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bec:	1e5a      	subs	r2, r3, #1
 8013bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf4:	691b      	ldr	r3, [r3, #16]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d00f      	beq.n	8013c1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfc:	3310      	adds	r3, #16
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f001 f82c 	bl	8014c5c <xTaskRemoveFromEventList>
 8013c04:	4603      	mov	r3, r0
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d007      	beq.n	8013c1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013c0a:	4b3d      	ldr	r3, [pc, #244]	; (8013d00 <xQueueReceive+0x1bc>)
 8013c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c10:	601a      	str	r2, [r3, #0]
 8013c12:	f3bf 8f4f 	dsb	sy
 8013c16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013c1a:	f002 f803 	bl	8015c24 <vPortExitCritical>
				return pdPASS;
 8013c1e:	2301      	movs	r3, #1
 8013c20:	e069      	b.n	8013cf6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d103      	bne.n	8013c30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013c28:	f001 fffc 	bl	8015c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	e062      	b.n	8013cf6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d106      	bne.n	8013c44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013c36:	f107 0310 	add.w	r3, r7, #16
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f001 f8d4 	bl	8014de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c40:	2301      	movs	r3, #1
 8013c42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013c44:	f001 ffee 	bl	8015c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013c48:	f000 fda0 	bl	801478c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013c4c:	f001 ffba 	bl	8015bc4 <vPortEnterCritical>
 8013c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c56:	b25b      	sxtb	r3, r3
 8013c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c5c:	d103      	bne.n	8013c66 <xQueueReceive+0x122>
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	2200      	movs	r2, #0
 8013c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c6c:	b25b      	sxtb	r3, r3
 8013c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c72:	d103      	bne.n	8013c7c <xQueueReceive+0x138>
 8013c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c76:	2200      	movs	r2, #0
 8013c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c7c:	f001 ffd2 	bl	8015c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c80:	1d3a      	adds	r2, r7, #4
 8013c82:	f107 0310 	add.w	r3, r7, #16
 8013c86:	4611      	mov	r1, r2
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f001 f8c3 	bl	8014e14 <xTaskCheckForTimeOut>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d123      	bne.n	8013cdc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c96:	f000 f997 	bl	8013fc8 <prvIsQueueEmpty>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d017      	beq.n	8013cd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca2:	3324      	adds	r3, #36	; 0x24
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	4611      	mov	r1, r2
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f000 ff4b 	bl	8014b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cb0:	f000 f938 	bl	8013f24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013cb4:	f000 fd78 	bl	80147a8 <xTaskResumeAll>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d189      	bne.n	8013bd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013cbe:	4b10      	ldr	r3, [pc, #64]	; (8013d00 <xQueueReceive+0x1bc>)
 8013cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cc4:	601a      	str	r2, [r3, #0]
 8013cc6:	f3bf 8f4f 	dsb	sy
 8013cca:	f3bf 8f6f 	isb	sy
 8013cce:	e780      	b.n	8013bd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cd2:	f000 f927 	bl	8013f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013cd6:	f000 fd67 	bl	80147a8 <xTaskResumeAll>
 8013cda:	e77a      	b.n	8013bd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cde:	f000 f921 	bl	8013f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ce2:	f000 fd61 	bl	80147a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ce8:	f000 f96e 	bl	8013fc8 <prvIsQueueEmpty>
 8013cec:	4603      	mov	r3, r0
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	f43f af6f 	beq.w	8013bd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013cf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3730      	adds	r7, #48	; 0x30
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	e000ed04 	.word	0xe000ed04

08013d04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b08e      	sub	sp, #56	; 0x38
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d10a      	bne.n	8013d30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d1e:	f383 8811 	msr	BASEPRI, r3
 8013d22:	f3bf 8f6f 	isb	sy
 8013d26:	f3bf 8f4f 	dsb	sy
 8013d2a:	623b      	str	r3, [r7, #32]
}
 8013d2c:	bf00      	nop
 8013d2e:	e7fe      	b.n	8013d2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d103      	bne.n	8013d3e <xQueueReceiveFromISR+0x3a>
 8013d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d101      	bne.n	8013d42 <xQueueReceiveFromISR+0x3e>
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e000      	b.n	8013d44 <xQueueReceiveFromISR+0x40>
 8013d42:	2300      	movs	r3, #0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d10a      	bne.n	8013d5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4c:	f383 8811 	msr	BASEPRI, r3
 8013d50:	f3bf 8f6f 	isb	sy
 8013d54:	f3bf 8f4f 	dsb	sy
 8013d58:	61fb      	str	r3, [r7, #28]
}
 8013d5a:	bf00      	nop
 8013d5c:	e7fe      	b.n	8013d5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d5e:	f002 f813 	bl	8015d88 <vPortValidateInterruptPriority>
	__asm volatile
 8013d62:	f3ef 8211 	mrs	r2, BASEPRI
 8013d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d6a:	f383 8811 	msr	BASEPRI, r3
 8013d6e:	f3bf 8f6f 	isb	sy
 8013d72:	f3bf 8f4f 	dsb	sy
 8013d76:	61ba      	str	r2, [r7, #24]
 8013d78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013d7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d02f      	beq.n	8013dea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013d94:	68b9      	ldr	r1, [r7, #8]
 8013d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d98:	f000 f89e 	bl	8013ed8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d9e:	1e5a      	subs	r2, r3, #1
 8013da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dac:	d112      	bne.n	8013dd4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db0:	691b      	ldr	r3, [r3, #16]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d016      	beq.n	8013de4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db8:	3310      	adds	r3, #16
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f000 ff4e 	bl	8014c5c <xTaskRemoveFromEventList>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00e      	beq.n	8013de4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d00b      	beq.n	8013de4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2201      	movs	r2, #1
 8013dd0:	601a      	str	r2, [r3, #0]
 8013dd2:	e007      	b.n	8013de4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dd8:	3301      	adds	r3, #1
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	b25a      	sxtb	r2, r3
 8013dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013de4:	2301      	movs	r3, #1
 8013de6:	637b      	str	r3, [r7, #52]	; 0x34
 8013de8:	e001      	b.n	8013dee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013dea:	2300      	movs	r3, #0
 8013dec:	637b      	str	r3, [r7, #52]	; 0x34
 8013dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	f383 8811 	msr	BASEPRI, r3
}
 8013df8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3738      	adds	r7, #56	; 0x38
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}

08013e04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b086      	sub	sp, #24
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013e10:	2300      	movs	r3, #0
 8013e12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d10d      	bne.n	8013e3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d14d      	bne.n	8013ec6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	689b      	ldr	r3, [r3, #8]
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f001 f952 	bl	80150d8 <xTaskPriorityDisinherit>
 8013e34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	2200      	movs	r2, #0
 8013e3a:	609a      	str	r2, [r3, #8]
 8013e3c:	e043      	b.n	8013ec6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d119      	bne.n	8013e78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	6858      	ldr	r0, [r3, #4]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	68b9      	ldr	r1, [r7, #8]
 8013e50:	f002 f9fe 	bl	8016250 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	685a      	ldr	r2, [r3, #4]
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e5c:	441a      	add	r2, r3
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	685a      	ldr	r2, [r3, #4]
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	689b      	ldr	r3, [r3, #8]
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d32b      	bcc.n	8013ec6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681a      	ldr	r2, [r3, #0]
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	605a      	str	r2, [r3, #4]
 8013e76:	e026      	b.n	8013ec6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	68d8      	ldr	r0, [r3, #12]
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e80:	461a      	mov	r2, r3
 8013e82:	68b9      	ldr	r1, [r7, #8]
 8013e84:	f002 f9e4 	bl	8016250 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	68da      	ldr	r2, [r3, #12]
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e90:	425b      	negs	r3, r3
 8013e92:	441a      	add	r2, r3
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	68da      	ldr	r2, [r3, #12]
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d207      	bcs.n	8013eb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	689a      	ldr	r2, [r3, #8]
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eac:	425b      	negs	r3, r3
 8013eae:	441a      	add	r2, r3
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2b02      	cmp	r3, #2
 8013eb8:	d105      	bne.n	8013ec6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d002      	beq.n	8013ec6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	3b01      	subs	r3, #1
 8013ec4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	1c5a      	adds	r2, r3, #1
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013ece:	697b      	ldr	r3, [r7, #20]
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3718      	adds	r7, #24
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d018      	beq.n	8013f1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	68da      	ldr	r2, [r3, #12]
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ef2:	441a      	add	r2, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	68da      	ldr	r2, [r3, #12]
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	689b      	ldr	r3, [r3, #8]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d303      	bcc.n	8013f0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	68d9      	ldr	r1, [r3, #12]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f14:	461a      	mov	r2, r3
 8013f16:	6838      	ldr	r0, [r7, #0]
 8013f18:	f002 f99a 	bl	8016250 <memcpy>
	}
}
 8013f1c:	bf00      	nop
 8013f1e:	3708      	adds	r7, #8
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}

08013f24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b084      	sub	sp, #16
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013f2c:	f001 fe4a 	bl	8015bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f38:	e011      	b.n	8013f5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d012      	beq.n	8013f68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	3324      	adds	r3, #36	; 0x24
 8013f46:	4618      	mov	r0, r3
 8013f48:	f000 fe88 	bl	8014c5c <xTaskRemoveFromEventList>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d001      	beq.n	8013f56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013f52:	f000 ffc1 	bl	8014ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013f56:	7bfb      	ldrb	r3, [r7, #15]
 8013f58:	3b01      	subs	r3, #1
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	dce9      	bgt.n	8013f3a <prvUnlockQueue+0x16>
 8013f66:	e000      	b.n	8013f6a <prvUnlockQueue+0x46>
					break;
 8013f68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	22ff      	movs	r2, #255	; 0xff
 8013f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013f72:	f001 fe57 	bl	8015c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013f76:	f001 fe25 	bl	8015bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f82:	e011      	b.n	8013fa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	691b      	ldr	r3, [r3, #16]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d012      	beq.n	8013fb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	3310      	adds	r3, #16
 8013f90:	4618      	mov	r0, r3
 8013f92:	f000 fe63 	bl	8014c5c <xTaskRemoveFromEventList>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013f9c:	f000 ff9c 	bl	8014ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013fa0:	7bbb      	ldrb	r3, [r7, #14]
 8013fa2:	3b01      	subs	r3, #1
 8013fa4:	b2db      	uxtb	r3, r3
 8013fa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	dce9      	bgt.n	8013f84 <prvUnlockQueue+0x60>
 8013fb0:	e000      	b.n	8013fb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013fb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	22ff      	movs	r2, #255	; 0xff
 8013fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013fbc:	f001 fe32 	bl	8015c24 <vPortExitCritical>
}
 8013fc0:	bf00      	nop
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013fd0:	f001 fdf8 	bl	8015bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d102      	bne.n	8013fe2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013fdc:	2301      	movs	r3, #1
 8013fde:	60fb      	str	r3, [r7, #12]
 8013fe0:	e001      	b.n	8013fe6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013fe6:	f001 fe1d 	bl	8015c24 <vPortExitCritical>

	return xReturn;
 8013fea:	68fb      	ldr	r3, [r7, #12]
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3710      	adds	r7, #16
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}

08013ff4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ffc:	f001 fde2 	bl	8015bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014008:	429a      	cmp	r2, r3
 801400a:	d102      	bne.n	8014012 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801400c:	2301      	movs	r3, #1
 801400e:	60fb      	str	r3, [r7, #12]
 8014010:	e001      	b.n	8014016 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014012:	2300      	movs	r3, #0
 8014014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014016:	f001 fe05 	bl	8015c24 <vPortExitCritical>

	return xReturn;
 801401a:	68fb      	ldr	r3, [r7, #12]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3710      	adds	r7, #16
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014024:	b480      	push	{r7}
 8014026:	b085      	sub	sp, #20
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801402e:	2300      	movs	r3, #0
 8014030:	60fb      	str	r3, [r7, #12]
 8014032:	e014      	b.n	801405e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014034:	4a0f      	ldr	r2, [pc, #60]	; (8014074 <vQueueAddToRegistry+0x50>)
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d10b      	bne.n	8014058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014040:	490c      	ldr	r1, [pc, #48]	; (8014074 <vQueueAddToRegistry+0x50>)
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	683a      	ldr	r2, [r7, #0]
 8014046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801404a:	4a0a      	ldr	r2, [pc, #40]	; (8014074 <vQueueAddToRegistry+0x50>)
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	00db      	lsls	r3, r3, #3
 8014050:	4413      	add	r3, r2
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014056:	e006      	b.n	8014066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	3301      	adds	r3, #1
 801405c:	60fb      	str	r3, [r7, #12]
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2b07      	cmp	r3, #7
 8014062:	d9e7      	bls.n	8014034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014064:	bf00      	nop
 8014066:	bf00      	nop
 8014068:	3714      	adds	r7, #20
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr
 8014072:	bf00      	nop
 8014074:	24001788 	.word	0x24001788

08014078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014078:	b580      	push	{r7, lr}
 801407a:	b086      	sub	sp, #24
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014088:	f001 fd9c 	bl	8015bc4 <vPortEnterCritical>
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014092:	b25b      	sxtb	r3, r3
 8014094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014098:	d103      	bne.n	80140a2 <vQueueWaitForMessageRestricted+0x2a>
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	2200      	movs	r2, #0
 801409e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140a8:	b25b      	sxtb	r3, r3
 80140aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140ae:	d103      	bne.n	80140b8 <vQueueWaitForMessageRestricted+0x40>
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	2200      	movs	r2, #0
 80140b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80140b8:	f001 fdb4 	bl	8015c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d106      	bne.n	80140d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	3324      	adds	r3, #36	; 0x24
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	68b9      	ldr	r1, [r7, #8]
 80140cc:	4618      	mov	r0, r3
 80140ce:	f000 fd99 	bl	8014c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80140d2:	6978      	ldr	r0, [r7, #20]
 80140d4:	f7ff ff26 	bl	8013f24 <prvUnlockQueue>
	}
 80140d8:	bf00      	nop
 80140da:	3718      	adds	r7, #24
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b08e      	sub	sp, #56	; 0x38
 80140e4:	af04      	add	r7, sp, #16
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	607a      	str	r2, [r7, #4]
 80140ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80140ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d10a      	bne.n	801410a <xTaskCreateStatic+0x2a>
	__asm volatile
 80140f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f8:	f383 8811 	msr	BASEPRI, r3
 80140fc:	f3bf 8f6f 	isb	sy
 8014100:	f3bf 8f4f 	dsb	sy
 8014104:	623b      	str	r3, [r7, #32]
}
 8014106:	bf00      	nop
 8014108:	e7fe      	b.n	8014108 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410c:	2b00      	cmp	r3, #0
 801410e:	d10a      	bne.n	8014126 <xTaskCreateStatic+0x46>
	__asm volatile
 8014110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014114:	f383 8811 	msr	BASEPRI, r3
 8014118:	f3bf 8f6f 	isb	sy
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	61fb      	str	r3, [r7, #28]
}
 8014122:	bf00      	nop
 8014124:	e7fe      	b.n	8014124 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014126:	235c      	movs	r3, #92	; 0x5c
 8014128:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	2b5c      	cmp	r3, #92	; 0x5c
 801412e:	d00a      	beq.n	8014146 <xTaskCreateStatic+0x66>
	__asm volatile
 8014130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014134:	f383 8811 	msr	BASEPRI, r3
 8014138:	f3bf 8f6f 	isb	sy
 801413c:	f3bf 8f4f 	dsb	sy
 8014140:	61bb      	str	r3, [r7, #24]
}
 8014142:	bf00      	nop
 8014144:	e7fe      	b.n	8014144 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014146:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414a:	2b00      	cmp	r3, #0
 801414c:	d01e      	beq.n	801418c <xTaskCreateStatic+0xac>
 801414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014150:	2b00      	cmp	r3, #0
 8014152:	d01b      	beq.n	801418c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014156:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801415c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014160:	2202      	movs	r2, #2
 8014162:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014166:	2300      	movs	r3, #0
 8014168:	9303      	str	r3, [sp, #12]
 801416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416c:	9302      	str	r3, [sp, #8]
 801416e:	f107 0314 	add.w	r3, r7, #20
 8014172:	9301      	str	r3, [sp, #4]
 8014174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014176:	9300      	str	r3, [sp, #0]
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	68b9      	ldr	r1, [r7, #8]
 801417e:	68f8      	ldr	r0, [r7, #12]
 8014180:	f000 f850 	bl	8014224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014186:	f000 f8dd 	bl	8014344 <prvAddNewTaskToReadyList>
 801418a:	e001      	b.n	8014190 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801418c:	2300      	movs	r3, #0
 801418e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014190:	697b      	ldr	r3, [r7, #20]
	}
 8014192:	4618      	mov	r0, r3
 8014194:	3728      	adds	r7, #40	; 0x28
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}

0801419a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801419a:	b580      	push	{r7, lr}
 801419c:	b08c      	sub	sp, #48	; 0x30
 801419e:	af04      	add	r7, sp, #16
 80141a0:	60f8      	str	r0, [r7, #12]
 80141a2:	60b9      	str	r1, [r7, #8]
 80141a4:	603b      	str	r3, [r7, #0]
 80141a6:	4613      	mov	r3, r2
 80141a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80141aa:	88fb      	ldrh	r3, [r7, #6]
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	4618      	mov	r0, r3
 80141b0:	f001 fe2a 	bl	8015e08 <pvPortMalloc>
 80141b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d00e      	beq.n	80141da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80141bc:	205c      	movs	r0, #92	; 0x5c
 80141be:	f001 fe23 	bl	8015e08 <pvPortMalloc>
 80141c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80141c4:	69fb      	ldr	r3, [r7, #28]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d003      	beq.n	80141d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80141ca:	69fb      	ldr	r3, [r7, #28]
 80141cc:	697a      	ldr	r2, [r7, #20]
 80141ce:	631a      	str	r2, [r3, #48]	; 0x30
 80141d0:	e005      	b.n	80141de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80141d2:	6978      	ldr	r0, [r7, #20]
 80141d4:	f001 fee4 	bl	8015fa0 <vPortFree>
 80141d8:	e001      	b.n	80141de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80141da:	2300      	movs	r3, #0
 80141dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80141de:	69fb      	ldr	r3, [r7, #28]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d017      	beq.n	8014214 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80141e4:	69fb      	ldr	r3, [r7, #28]
 80141e6:	2200      	movs	r2, #0
 80141e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80141ec:	88fa      	ldrh	r2, [r7, #6]
 80141ee:	2300      	movs	r3, #0
 80141f0:	9303      	str	r3, [sp, #12]
 80141f2:	69fb      	ldr	r3, [r7, #28]
 80141f4:	9302      	str	r3, [sp, #8]
 80141f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f8:	9301      	str	r3, [sp, #4]
 80141fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	68b9      	ldr	r1, [r7, #8]
 8014202:	68f8      	ldr	r0, [r7, #12]
 8014204:	f000 f80e 	bl	8014224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014208:	69f8      	ldr	r0, [r7, #28]
 801420a:	f000 f89b 	bl	8014344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801420e:	2301      	movs	r3, #1
 8014210:	61bb      	str	r3, [r7, #24]
 8014212:	e002      	b.n	801421a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801421a:	69bb      	ldr	r3, [r7, #24]
	}
 801421c:	4618      	mov	r0, r3
 801421e:	3720      	adds	r7, #32
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b088      	sub	sp, #32
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
 8014230:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014234:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	009b      	lsls	r3, r3, #2
 801423a:	461a      	mov	r2, r3
 801423c:	21a5      	movs	r1, #165	; 0xa5
 801423e:	f002 f815 	bl	801626c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014246:	6879      	ldr	r1, [r7, #4]
 8014248:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801424c:	440b      	add	r3, r1
 801424e:	009b      	lsls	r3, r3, #2
 8014250:	4413      	add	r3, r2
 8014252:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014254:	69bb      	ldr	r3, [r7, #24]
 8014256:	f023 0307 	bic.w	r3, r3, #7
 801425a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801425c:	69bb      	ldr	r3, [r7, #24]
 801425e:	f003 0307 	and.w	r3, r3, #7
 8014262:	2b00      	cmp	r3, #0
 8014264:	d00a      	beq.n	801427c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801426a:	f383 8811 	msr	BASEPRI, r3
 801426e:	f3bf 8f6f 	isb	sy
 8014272:	f3bf 8f4f 	dsb	sy
 8014276:	617b      	str	r3, [r7, #20]
}
 8014278:	bf00      	nop
 801427a:	e7fe      	b.n	801427a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d01f      	beq.n	80142c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014282:	2300      	movs	r3, #0
 8014284:	61fb      	str	r3, [r7, #28]
 8014286:	e012      	b.n	80142ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014288:	68ba      	ldr	r2, [r7, #8]
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	4413      	add	r3, r2
 801428e:	7819      	ldrb	r1, [r3, #0]
 8014290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	4413      	add	r3, r2
 8014296:	3334      	adds	r3, #52	; 0x34
 8014298:	460a      	mov	r2, r1
 801429a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801429c:	68ba      	ldr	r2, [r7, #8]
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	4413      	add	r3, r2
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d006      	beq.n	80142b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80142a8:	69fb      	ldr	r3, [r7, #28]
 80142aa:	3301      	adds	r3, #1
 80142ac:	61fb      	str	r3, [r7, #28]
 80142ae:	69fb      	ldr	r3, [r7, #28]
 80142b0:	2b0f      	cmp	r3, #15
 80142b2:	d9e9      	bls.n	8014288 <prvInitialiseNewTask+0x64>
 80142b4:	e000      	b.n	80142b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80142b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80142b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ba:	2200      	movs	r2, #0
 80142bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80142c0:	e003      	b.n	80142ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80142c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c4:	2200      	movs	r2, #0
 80142c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80142ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142cc:	2b37      	cmp	r3, #55	; 0x37
 80142ce:	d901      	bls.n	80142d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80142d0:	2337      	movs	r3, #55	; 0x37
 80142d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80142d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80142da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80142e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e2:	2200      	movs	r2, #0
 80142e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80142e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e8:	3304      	adds	r3, #4
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7ff f8be 	bl	801346c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80142f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f2:	3318      	adds	r3, #24
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7ff f8b9 	bl	801346c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80142fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014302:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014308:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801430c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801430e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014312:	2200      	movs	r2, #0
 8014314:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014318:	2200      	movs	r2, #0
 801431a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801431e:	683a      	ldr	r2, [r7, #0]
 8014320:	68f9      	ldr	r1, [r7, #12]
 8014322:	69b8      	ldr	r0, [r7, #24]
 8014324:	f001 fb20 	bl	8015968 <pxPortInitialiseStack>
 8014328:	4602      	mov	r2, r0
 801432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801432c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014330:	2b00      	cmp	r3, #0
 8014332:	d002      	beq.n	801433a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801433a:	bf00      	nop
 801433c:	3720      	adds	r7, #32
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
	...

08014344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b082      	sub	sp, #8
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801434c:	f001 fc3a 	bl	8015bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014350:	4b2d      	ldr	r3, [pc, #180]	; (8014408 <prvAddNewTaskToReadyList+0xc4>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	3301      	adds	r3, #1
 8014356:	4a2c      	ldr	r2, [pc, #176]	; (8014408 <prvAddNewTaskToReadyList+0xc4>)
 8014358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801435a:	4b2c      	ldr	r3, [pc, #176]	; (801440c <prvAddNewTaskToReadyList+0xc8>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d109      	bne.n	8014376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014362:	4a2a      	ldr	r2, [pc, #168]	; (801440c <prvAddNewTaskToReadyList+0xc8>)
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014368:	4b27      	ldr	r3, [pc, #156]	; (8014408 <prvAddNewTaskToReadyList+0xc4>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2b01      	cmp	r3, #1
 801436e:	d110      	bne.n	8014392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014370:	f000 fdd6 	bl	8014f20 <prvInitialiseTaskLists>
 8014374:	e00d      	b.n	8014392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014376:	4b26      	ldr	r3, [pc, #152]	; (8014410 <prvAddNewTaskToReadyList+0xcc>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d109      	bne.n	8014392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801437e:	4b23      	ldr	r3, [pc, #140]	; (801440c <prvAddNewTaskToReadyList+0xc8>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014388:	429a      	cmp	r2, r3
 801438a:	d802      	bhi.n	8014392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801438c:	4a1f      	ldr	r2, [pc, #124]	; (801440c <prvAddNewTaskToReadyList+0xc8>)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014392:	4b20      	ldr	r3, [pc, #128]	; (8014414 <prvAddNewTaskToReadyList+0xd0>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	3301      	adds	r3, #1
 8014398:	4a1e      	ldr	r2, [pc, #120]	; (8014414 <prvAddNewTaskToReadyList+0xd0>)
 801439a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801439c:	4b1d      	ldr	r3, [pc, #116]	; (8014414 <prvAddNewTaskToReadyList+0xd0>)
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143a8:	4b1b      	ldr	r3, [pc, #108]	; (8014418 <prvAddNewTaskToReadyList+0xd4>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d903      	bls.n	80143b8 <prvAddNewTaskToReadyList+0x74>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b4:	4a18      	ldr	r2, [pc, #96]	; (8014418 <prvAddNewTaskToReadyList+0xd4>)
 80143b6:	6013      	str	r3, [r2, #0]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143bc:	4613      	mov	r3, r2
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	4413      	add	r3, r2
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	4a15      	ldr	r2, [pc, #84]	; (801441c <prvAddNewTaskToReadyList+0xd8>)
 80143c6:	441a      	add	r2, r3
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	3304      	adds	r3, #4
 80143cc:	4619      	mov	r1, r3
 80143ce:	4610      	mov	r0, r2
 80143d0:	f7ff f859 	bl	8013486 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80143d4:	f001 fc26 	bl	8015c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80143d8:	4b0d      	ldr	r3, [pc, #52]	; (8014410 <prvAddNewTaskToReadyList+0xcc>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d00e      	beq.n	80143fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80143e0:	4b0a      	ldr	r3, [pc, #40]	; (801440c <prvAddNewTaskToReadyList+0xc8>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d207      	bcs.n	80143fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80143ee:	4b0c      	ldr	r3, [pc, #48]	; (8014420 <prvAddNewTaskToReadyList+0xdc>)
 80143f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143f4:	601a      	str	r2, [r3, #0]
 80143f6:	f3bf 8f4f 	dsb	sy
 80143fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80143fe:	bf00      	nop
 8014400:	3708      	adds	r7, #8
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop
 8014408:	24001c9c 	.word	0x24001c9c
 801440c:	240017c8 	.word	0x240017c8
 8014410:	24001ca8 	.word	0x24001ca8
 8014414:	24001cb8 	.word	0x24001cb8
 8014418:	24001ca4 	.word	0x24001ca4
 801441c:	240017cc 	.word	0x240017cc
 8014420:	e000ed04 	.word	0xe000ed04

08014424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801442c:	2300      	movs	r3, #0
 801442e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d017      	beq.n	8014466 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014436:	4b13      	ldr	r3, [pc, #76]	; (8014484 <vTaskDelay+0x60>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d00a      	beq.n	8014454 <vTaskDelay+0x30>
	__asm volatile
 801443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014442:	f383 8811 	msr	BASEPRI, r3
 8014446:	f3bf 8f6f 	isb	sy
 801444a:	f3bf 8f4f 	dsb	sy
 801444e:	60bb      	str	r3, [r7, #8]
}
 8014450:	bf00      	nop
 8014452:	e7fe      	b.n	8014452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014454:	f000 f99a 	bl	801478c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014458:	2100      	movs	r1, #0
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f000 fec2 	bl	80151e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014460:	f000 f9a2 	bl	80147a8 <xTaskResumeAll>
 8014464:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d107      	bne.n	801447c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801446c:	4b06      	ldr	r3, [pc, #24]	; (8014488 <vTaskDelay+0x64>)
 801446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014472:	601a      	str	r2, [r3, #0]
 8014474:	f3bf 8f4f 	dsb	sy
 8014478:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801447c:	bf00      	nop
 801447e:	3710      	adds	r7, #16
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}
 8014484:	24001cc4 	.word	0x24001cc4
 8014488:	e000ed04 	.word	0xe000ed04

0801448c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014494:	f001 fb96 	bl	8015bc4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d102      	bne.n	80144a4 <vTaskSuspend+0x18>
 801449e:	4b30      	ldr	r3, [pc, #192]	; (8014560 <vTaskSuspend+0xd4>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	e000      	b.n	80144a6 <vTaskSuspend+0x1a>
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	3304      	adds	r3, #4
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7ff f847 	bl	8013540 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d004      	beq.n	80144c4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	3318      	adds	r3, #24
 80144be:	4618      	mov	r0, r3
 80144c0:	f7ff f83e 	bl	8013540 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	3304      	adds	r3, #4
 80144c8:	4619      	mov	r1, r3
 80144ca:	4826      	ldr	r0, [pc, #152]	; (8014564 <vTaskSuspend+0xd8>)
 80144cc:	f7fe ffdb 	bl	8013486 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	2b01      	cmp	r3, #1
 80144da:	d103      	bne.n	80144e4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	2200      	movs	r2, #0
 80144e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80144e4:	f001 fb9e 	bl	8015c24 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80144e8:	4b1f      	ldr	r3, [pc, #124]	; (8014568 <vTaskSuspend+0xdc>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d005      	beq.n	80144fc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80144f0:	f001 fb68 	bl	8015bc4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80144f4:	f000 fdb2 	bl	801505c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80144f8:	f001 fb94 	bl	8015c24 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80144fc:	4b18      	ldr	r3, [pc, #96]	; (8014560 <vTaskSuspend+0xd4>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	68fa      	ldr	r2, [r7, #12]
 8014502:	429a      	cmp	r2, r3
 8014504:	d127      	bne.n	8014556 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014506:	4b18      	ldr	r3, [pc, #96]	; (8014568 <vTaskSuspend+0xdc>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d017      	beq.n	801453e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801450e:	4b17      	ldr	r3, [pc, #92]	; (801456c <vTaskSuspend+0xe0>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d00a      	beq.n	801452c <vTaskSuspend+0xa0>
	__asm volatile
 8014516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801451a:	f383 8811 	msr	BASEPRI, r3
 801451e:	f3bf 8f6f 	isb	sy
 8014522:	f3bf 8f4f 	dsb	sy
 8014526:	60bb      	str	r3, [r7, #8]
}
 8014528:	bf00      	nop
 801452a:	e7fe      	b.n	801452a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 801452c:	4b10      	ldr	r3, [pc, #64]	; (8014570 <vTaskSuspend+0xe4>)
 801452e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014532:	601a      	str	r2, [r3, #0]
 8014534:	f3bf 8f4f 	dsb	sy
 8014538:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801453c:	e00b      	b.n	8014556 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801453e:	4b09      	ldr	r3, [pc, #36]	; (8014564 <vTaskSuspend+0xd8>)
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	4b0c      	ldr	r3, [pc, #48]	; (8014574 <vTaskSuspend+0xe8>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	429a      	cmp	r2, r3
 8014548:	d103      	bne.n	8014552 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801454a:	4b05      	ldr	r3, [pc, #20]	; (8014560 <vTaskSuspend+0xd4>)
 801454c:	2200      	movs	r2, #0
 801454e:	601a      	str	r2, [r3, #0]
	}
 8014550:	e001      	b.n	8014556 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014552:	f000 fa99 	bl	8014a88 <vTaskSwitchContext>
	}
 8014556:	bf00      	nop
 8014558:	3710      	adds	r7, #16
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	240017c8 	.word	0x240017c8
 8014564:	24001c88 	.word	0x24001c88
 8014568:	24001ca8 	.word	0x24001ca8
 801456c:	24001cc4 	.word	0x24001cc4
 8014570:	e000ed04 	.word	0xe000ed04
 8014574:	24001c9c 	.word	0x24001c9c

08014578 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014578:	b480      	push	{r7}
 801457a:	b087      	sub	sp, #28
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014580:	2300      	movs	r3, #0
 8014582:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d10a      	bne.n	80145a4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014592:	f383 8811 	msr	BASEPRI, r3
 8014596:	f3bf 8f6f 	isb	sy
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	60fb      	str	r3, [r7, #12]
}
 80145a0:	bf00      	nop
 80145a2:	e7fe      	b.n	80145a2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	695b      	ldr	r3, [r3, #20]
 80145a8:	4a0a      	ldr	r2, [pc, #40]	; (80145d4 <prvTaskIsTaskSuspended+0x5c>)
 80145aa:	4293      	cmp	r3, r2
 80145ac:	d10a      	bne.n	80145c4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145b2:	4a09      	ldr	r2, [pc, #36]	; (80145d8 <prvTaskIsTaskSuspended+0x60>)
 80145b4:	4293      	cmp	r3, r2
 80145b6:	d005      	beq.n	80145c4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80145b8:	693b      	ldr	r3, [r7, #16]
 80145ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d101      	bne.n	80145c4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80145c0:	2301      	movs	r3, #1
 80145c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80145c4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80145c6:	4618      	mov	r0, r3
 80145c8:	371c      	adds	r7, #28
 80145ca:	46bd      	mov	sp, r7
 80145cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d0:	4770      	bx	lr
 80145d2:	bf00      	nop
 80145d4:	24001c88 	.word	0x24001c88
 80145d8:	24001c5c 	.word	0x24001c5c

080145dc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b08a      	sub	sp, #40	; 0x28
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80145e4:	2300      	movs	r3, #0
 80145e6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d10a      	bne.n	8014608 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80145f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f6:	f383 8811 	msr	BASEPRI, r3
 80145fa:	f3bf 8f6f 	isb	sy
 80145fe:	f3bf 8f4f 	dsb	sy
 8014602:	61bb      	str	r3, [r7, #24]
}
 8014604:	bf00      	nop
 8014606:	e7fe      	b.n	8014606 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014608:	f001 fbbe 	bl	8015d88 <vPortValidateInterruptPriority>
	__asm volatile
 801460c:	f3ef 8211 	mrs	r2, BASEPRI
 8014610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014614:	f383 8811 	msr	BASEPRI, r3
 8014618:	f3bf 8f6f 	isb	sy
 801461c:	f3bf 8f4f 	dsb	sy
 8014620:	617a      	str	r2, [r7, #20]
 8014622:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014624:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014626:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014628:	6a38      	ldr	r0, [r7, #32]
 801462a:	f7ff ffa5 	bl	8014578 <prvTaskIsTaskSuspended>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d030      	beq.n	8014696 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014634:	4b1d      	ldr	r3, [pc, #116]	; (80146ac <xTaskResumeFromISR+0xd0>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d126      	bne.n	801468a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801463c:	6a3b      	ldr	r3, [r7, #32]
 801463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014640:	4b1b      	ldr	r3, [pc, #108]	; (80146b0 <xTaskResumeFromISR+0xd4>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014646:	429a      	cmp	r2, r3
 8014648:	d301      	bcc.n	801464e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801464a:	2301      	movs	r3, #1
 801464c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801464e:	6a3b      	ldr	r3, [r7, #32]
 8014650:	3304      	adds	r3, #4
 8014652:	4618      	mov	r0, r3
 8014654:	f7fe ff74 	bl	8013540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014658:	6a3b      	ldr	r3, [r7, #32]
 801465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801465c:	4b15      	ldr	r3, [pc, #84]	; (80146b4 <xTaskResumeFromISR+0xd8>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	429a      	cmp	r2, r3
 8014662:	d903      	bls.n	801466c <xTaskResumeFromISR+0x90>
 8014664:	6a3b      	ldr	r3, [r7, #32]
 8014666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014668:	4a12      	ldr	r2, [pc, #72]	; (80146b4 <xTaskResumeFromISR+0xd8>)
 801466a:	6013      	str	r3, [r2, #0]
 801466c:	6a3b      	ldr	r3, [r7, #32]
 801466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014670:	4613      	mov	r3, r2
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	4a0f      	ldr	r2, [pc, #60]	; (80146b8 <xTaskResumeFromISR+0xdc>)
 801467a:	441a      	add	r2, r3
 801467c:	6a3b      	ldr	r3, [r7, #32]
 801467e:	3304      	adds	r3, #4
 8014680:	4619      	mov	r1, r3
 8014682:	4610      	mov	r0, r2
 8014684:	f7fe feff 	bl	8013486 <vListInsertEnd>
 8014688:	e005      	b.n	8014696 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801468a:	6a3b      	ldr	r3, [r7, #32]
 801468c:	3318      	adds	r3, #24
 801468e:	4619      	mov	r1, r3
 8014690:	480a      	ldr	r0, [pc, #40]	; (80146bc <xTaskResumeFromISR+0xe0>)
 8014692:	f7fe fef8 	bl	8013486 <vListInsertEnd>
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	f383 8811 	msr	BASEPRI, r3
}
 80146a0:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80146a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3728      	adds	r7, #40	; 0x28
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	24001cc4 	.word	0x24001cc4
 80146b0:	240017c8 	.word	0x240017c8
 80146b4:	24001ca4 	.word	0x24001ca4
 80146b8:	240017cc 	.word	0x240017cc
 80146bc:	24001c5c 	.word	0x24001c5c

080146c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b08a      	sub	sp, #40	; 0x28
 80146c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80146c6:	2300      	movs	r3, #0
 80146c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80146ca:	2300      	movs	r3, #0
 80146cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80146ce:	463a      	mov	r2, r7
 80146d0:	1d39      	adds	r1, r7, #4
 80146d2:	f107 0308 	add.w	r3, r7, #8
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fe fc86 	bl	8012fe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80146dc:	6839      	ldr	r1, [r7, #0]
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	68ba      	ldr	r2, [r7, #8]
 80146e2:	9202      	str	r2, [sp, #8]
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	2300      	movs	r3, #0
 80146e8:	9300      	str	r3, [sp, #0]
 80146ea:	2300      	movs	r3, #0
 80146ec:	460a      	mov	r2, r1
 80146ee:	4921      	ldr	r1, [pc, #132]	; (8014774 <vTaskStartScheduler+0xb4>)
 80146f0:	4821      	ldr	r0, [pc, #132]	; (8014778 <vTaskStartScheduler+0xb8>)
 80146f2:	f7ff fcf5 	bl	80140e0 <xTaskCreateStatic>
 80146f6:	4603      	mov	r3, r0
 80146f8:	4a20      	ldr	r2, [pc, #128]	; (801477c <vTaskStartScheduler+0xbc>)
 80146fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80146fc:	4b1f      	ldr	r3, [pc, #124]	; (801477c <vTaskStartScheduler+0xbc>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d002      	beq.n	801470a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014704:	2301      	movs	r3, #1
 8014706:	617b      	str	r3, [r7, #20]
 8014708:	e001      	b.n	801470e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801470a:	2300      	movs	r3, #0
 801470c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	2b01      	cmp	r3, #1
 8014712:	d102      	bne.n	801471a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014714:	f000 fdba 	bl	801528c <xTimerCreateTimerTask>
 8014718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	2b01      	cmp	r3, #1
 801471e:	d116      	bne.n	801474e <vTaskStartScheduler+0x8e>
	__asm volatile
 8014720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014724:	f383 8811 	msr	BASEPRI, r3
 8014728:	f3bf 8f6f 	isb	sy
 801472c:	f3bf 8f4f 	dsb	sy
 8014730:	613b      	str	r3, [r7, #16]
}
 8014732:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014734:	4b12      	ldr	r3, [pc, #72]	; (8014780 <vTaskStartScheduler+0xc0>)
 8014736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801473a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801473c:	4b11      	ldr	r3, [pc, #68]	; (8014784 <vTaskStartScheduler+0xc4>)
 801473e:	2201      	movs	r2, #1
 8014740:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014742:	4b11      	ldr	r3, [pc, #68]	; (8014788 <vTaskStartScheduler+0xc8>)
 8014744:	2200      	movs	r2, #0
 8014746:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014748:	f001 f99a 	bl	8015a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801474c:	e00e      	b.n	801476c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014754:	d10a      	bne.n	801476c <vTaskStartScheduler+0xac>
	__asm volatile
 8014756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475a:	f383 8811 	msr	BASEPRI, r3
 801475e:	f3bf 8f6f 	isb	sy
 8014762:	f3bf 8f4f 	dsb	sy
 8014766:	60fb      	str	r3, [r7, #12]
}
 8014768:	bf00      	nop
 801476a:	e7fe      	b.n	801476a <vTaskStartScheduler+0xaa>
}
 801476c:	bf00      	nop
 801476e:	3718      	adds	r7, #24
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	08016eec 	.word	0x08016eec
 8014778:	08014ef1 	.word	0x08014ef1
 801477c:	24001cc0 	.word	0x24001cc0
 8014780:	24001cbc 	.word	0x24001cbc
 8014784:	24001ca8 	.word	0x24001ca8
 8014788:	24001ca0 	.word	0x24001ca0

0801478c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801478c:	b480      	push	{r7}
 801478e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014790:	4b04      	ldr	r3, [pc, #16]	; (80147a4 <vTaskSuspendAll+0x18>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	3301      	adds	r3, #1
 8014796:	4a03      	ldr	r2, [pc, #12]	; (80147a4 <vTaskSuspendAll+0x18>)
 8014798:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801479a:	bf00      	nop
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr
 80147a4:	24001cc4 	.word	0x24001cc4

080147a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80147ae:	2300      	movs	r3, #0
 80147b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80147b2:	2300      	movs	r3, #0
 80147b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80147b6:	4b42      	ldr	r3, [pc, #264]	; (80148c0 <xTaskResumeAll+0x118>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d10a      	bne.n	80147d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80147be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c2:	f383 8811 	msr	BASEPRI, r3
 80147c6:	f3bf 8f6f 	isb	sy
 80147ca:	f3bf 8f4f 	dsb	sy
 80147ce:	603b      	str	r3, [r7, #0]
}
 80147d0:	bf00      	nop
 80147d2:	e7fe      	b.n	80147d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80147d4:	f001 f9f6 	bl	8015bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80147d8:	4b39      	ldr	r3, [pc, #228]	; (80148c0 <xTaskResumeAll+0x118>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	3b01      	subs	r3, #1
 80147de:	4a38      	ldr	r2, [pc, #224]	; (80148c0 <xTaskResumeAll+0x118>)
 80147e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147e2:	4b37      	ldr	r3, [pc, #220]	; (80148c0 <xTaskResumeAll+0x118>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d162      	bne.n	80148b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80147ea:	4b36      	ldr	r3, [pc, #216]	; (80148c4 <xTaskResumeAll+0x11c>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d05e      	beq.n	80148b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80147f2:	e02f      	b.n	8014854 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147f4:	4b34      	ldr	r3, [pc, #208]	; (80148c8 <xTaskResumeAll+0x120>)
 80147f6:	68db      	ldr	r3, [r3, #12]
 80147f8:	68db      	ldr	r3, [r3, #12]
 80147fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	3318      	adds	r3, #24
 8014800:	4618      	mov	r0, r3
 8014802:	f7fe fe9d 	bl	8013540 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	3304      	adds	r3, #4
 801480a:	4618      	mov	r0, r3
 801480c:	f7fe fe98 	bl	8013540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014814:	4b2d      	ldr	r3, [pc, #180]	; (80148cc <xTaskResumeAll+0x124>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	429a      	cmp	r2, r3
 801481a:	d903      	bls.n	8014824 <xTaskResumeAll+0x7c>
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014820:	4a2a      	ldr	r2, [pc, #168]	; (80148cc <xTaskResumeAll+0x124>)
 8014822:	6013      	str	r3, [r2, #0]
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014828:	4613      	mov	r3, r2
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	4413      	add	r3, r2
 801482e:	009b      	lsls	r3, r3, #2
 8014830:	4a27      	ldr	r2, [pc, #156]	; (80148d0 <xTaskResumeAll+0x128>)
 8014832:	441a      	add	r2, r3
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	3304      	adds	r3, #4
 8014838:	4619      	mov	r1, r3
 801483a:	4610      	mov	r0, r2
 801483c:	f7fe fe23 	bl	8013486 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014844:	4b23      	ldr	r3, [pc, #140]	; (80148d4 <xTaskResumeAll+0x12c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801484a:	429a      	cmp	r2, r3
 801484c:	d302      	bcc.n	8014854 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801484e:	4b22      	ldr	r3, [pc, #136]	; (80148d8 <xTaskResumeAll+0x130>)
 8014850:	2201      	movs	r2, #1
 8014852:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014854:	4b1c      	ldr	r3, [pc, #112]	; (80148c8 <xTaskResumeAll+0x120>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d1cb      	bne.n	80147f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d001      	beq.n	8014866 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014862:	f000 fbfb 	bl	801505c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014866:	4b1d      	ldr	r3, [pc, #116]	; (80148dc <xTaskResumeAll+0x134>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d010      	beq.n	8014894 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014872:	f000 f847 	bl	8014904 <xTaskIncrementTick>
 8014876:	4603      	mov	r3, r0
 8014878:	2b00      	cmp	r3, #0
 801487a:	d002      	beq.n	8014882 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801487c:	4b16      	ldr	r3, [pc, #88]	; (80148d8 <xTaskResumeAll+0x130>)
 801487e:	2201      	movs	r2, #1
 8014880:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	3b01      	subs	r3, #1
 8014886:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d1f1      	bne.n	8014872 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801488e:	4b13      	ldr	r3, [pc, #76]	; (80148dc <xTaskResumeAll+0x134>)
 8014890:	2200      	movs	r2, #0
 8014892:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014894:	4b10      	ldr	r3, [pc, #64]	; (80148d8 <xTaskResumeAll+0x130>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d009      	beq.n	80148b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801489c:	2301      	movs	r3, #1
 801489e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80148a0:	4b0f      	ldr	r3, [pc, #60]	; (80148e0 <xTaskResumeAll+0x138>)
 80148a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148a6:	601a      	str	r2, [r3, #0]
 80148a8:	f3bf 8f4f 	dsb	sy
 80148ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80148b0:	f001 f9b8 	bl	8015c24 <vPortExitCritical>

	return xAlreadyYielded;
 80148b4:	68bb      	ldr	r3, [r7, #8]
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	24001cc4 	.word	0x24001cc4
 80148c4:	24001c9c 	.word	0x24001c9c
 80148c8:	24001c5c 	.word	0x24001c5c
 80148cc:	24001ca4 	.word	0x24001ca4
 80148d0:	240017cc 	.word	0x240017cc
 80148d4:	240017c8 	.word	0x240017c8
 80148d8:	24001cb0 	.word	0x24001cb0
 80148dc:	24001cac 	.word	0x24001cac
 80148e0:	e000ed04 	.word	0xe000ed04

080148e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80148ea:	4b05      	ldr	r3, [pc, #20]	; (8014900 <xTaskGetTickCount+0x1c>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80148f0:	687b      	ldr	r3, [r7, #4]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	370c      	adds	r7, #12
 80148f6:	46bd      	mov	sp, r7
 80148f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fc:	4770      	bx	lr
 80148fe:	bf00      	nop
 8014900:	24001ca0 	.word	0x24001ca0

08014904 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b086      	sub	sp, #24
 8014908:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801490a:	2300      	movs	r3, #0
 801490c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801490e:	4b53      	ldr	r3, [pc, #332]	; (8014a5c <xTaskIncrementTick+0x158>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	f040 8095 	bne.w	8014a42 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014918:	4b51      	ldr	r3, [pc, #324]	; (8014a60 <xTaskIncrementTick+0x15c>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	3301      	adds	r3, #1
 801491e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014920:	4a4f      	ldr	r2, [pc, #316]	; (8014a60 <xTaskIncrementTick+0x15c>)
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014926:	693b      	ldr	r3, [r7, #16]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d120      	bne.n	801496e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801492c:	4b4d      	ldr	r3, [pc, #308]	; (8014a64 <xTaskIncrementTick+0x160>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00a      	beq.n	801494c <xTaskIncrementTick+0x48>
	__asm volatile
 8014936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801493a:	f383 8811 	msr	BASEPRI, r3
 801493e:	f3bf 8f6f 	isb	sy
 8014942:	f3bf 8f4f 	dsb	sy
 8014946:	603b      	str	r3, [r7, #0]
}
 8014948:	bf00      	nop
 801494a:	e7fe      	b.n	801494a <xTaskIncrementTick+0x46>
 801494c:	4b45      	ldr	r3, [pc, #276]	; (8014a64 <xTaskIncrementTick+0x160>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	60fb      	str	r3, [r7, #12]
 8014952:	4b45      	ldr	r3, [pc, #276]	; (8014a68 <xTaskIncrementTick+0x164>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	4a43      	ldr	r2, [pc, #268]	; (8014a64 <xTaskIncrementTick+0x160>)
 8014958:	6013      	str	r3, [r2, #0]
 801495a:	4a43      	ldr	r2, [pc, #268]	; (8014a68 <xTaskIncrementTick+0x164>)
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	6013      	str	r3, [r2, #0]
 8014960:	4b42      	ldr	r3, [pc, #264]	; (8014a6c <xTaskIncrementTick+0x168>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	3301      	adds	r3, #1
 8014966:	4a41      	ldr	r2, [pc, #260]	; (8014a6c <xTaskIncrementTick+0x168>)
 8014968:	6013      	str	r3, [r2, #0]
 801496a:	f000 fb77 	bl	801505c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801496e:	4b40      	ldr	r3, [pc, #256]	; (8014a70 <xTaskIncrementTick+0x16c>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	693a      	ldr	r2, [r7, #16]
 8014974:	429a      	cmp	r2, r3
 8014976:	d349      	bcc.n	8014a0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014978:	4b3a      	ldr	r3, [pc, #232]	; (8014a64 <xTaskIncrementTick+0x160>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d104      	bne.n	801498c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014982:	4b3b      	ldr	r3, [pc, #236]	; (8014a70 <xTaskIncrementTick+0x16c>)
 8014984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014988:	601a      	str	r2, [r3, #0]
					break;
 801498a:	e03f      	b.n	8014a0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801498c:	4b35      	ldr	r3, [pc, #212]	; (8014a64 <xTaskIncrementTick+0x160>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	68db      	ldr	r3, [r3, #12]
 8014992:	68db      	ldr	r3, [r3, #12]
 8014994:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801499c:	693a      	ldr	r2, [r7, #16]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d203      	bcs.n	80149ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80149a4:	4a32      	ldr	r2, [pc, #200]	; (8014a70 <xTaskIncrementTick+0x16c>)
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149aa:	e02f      	b.n	8014a0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	3304      	adds	r3, #4
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7fe fdc5 	bl	8013540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d004      	beq.n	80149c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	3318      	adds	r3, #24
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7fe fdbc 	bl	8013540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149cc:	4b29      	ldr	r3, [pc, #164]	; (8014a74 <xTaskIncrementTick+0x170>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	429a      	cmp	r2, r3
 80149d2:	d903      	bls.n	80149dc <xTaskIncrementTick+0xd8>
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149d8:	4a26      	ldr	r2, [pc, #152]	; (8014a74 <xTaskIncrementTick+0x170>)
 80149da:	6013      	str	r3, [r2, #0]
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e0:	4613      	mov	r3, r2
 80149e2:	009b      	lsls	r3, r3, #2
 80149e4:	4413      	add	r3, r2
 80149e6:	009b      	lsls	r3, r3, #2
 80149e8:	4a23      	ldr	r2, [pc, #140]	; (8014a78 <xTaskIncrementTick+0x174>)
 80149ea:	441a      	add	r2, r3
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	3304      	adds	r3, #4
 80149f0:	4619      	mov	r1, r3
 80149f2:	4610      	mov	r0, r2
 80149f4:	f7fe fd47 	bl	8013486 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149fc:	4b1f      	ldr	r3, [pc, #124]	; (8014a7c <xTaskIncrementTick+0x178>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d3b8      	bcc.n	8014978 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014a06:	2301      	movs	r3, #1
 8014a08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a0a:	e7b5      	b.n	8014978 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a0c:	4b1b      	ldr	r3, [pc, #108]	; (8014a7c <xTaskIncrementTick+0x178>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a12:	4919      	ldr	r1, [pc, #100]	; (8014a78 <xTaskIncrementTick+0x174>)
 8014a14:	4613      	mov	r3, r2
 8014a16:	009b      	lsls	r3, r3, #2
 8014a18:	4413      	add	r3, r2
 8014a1a:	009b      	lsls	r3, r3, #2
 8014a1c:	440b      	add	r3, r1
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d901      	bls.n	8014a28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014a24:	2301      	movs	r3, #1
 8014a26:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014a28:	4b15      	ldr	r3, [pc, #84]	; (8014a80 <xTaskIncrementTick+0x17c>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d101      	bne.n	8014a34 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014a30:	f7eb fdd8 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014a34:	4b13      	ldr	r3, [pc, #76]	; (8014a84 <xTaskIncrementTick+0x180>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d009      	beq.n	8014a50 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	617b      	str	r3, [r7, #20]
 8014a40:	e006      	b.n	8014a50 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014a42:	4b0f      	ldr	r3, [pc, #60]	; (8014a80 <xTaskIncrementTick+0x17c>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	3301      	adds	r3, #1
 8014a48:	4a0d      	ldr	r2, [pc, #52]	; (8014a80 <xTaskIncrementTick+0x17c>)
 8014a4a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014a4c:	f7eb fdca 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014a50:	697b      	ldr	r3, [r7, #20]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3718      	adds	r7, #24
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	24001cc4 	.word	0x24001cc4
 8014a60:	24001ca0 	.word	0x24001ca0
 8014a64:	24001c54 	.word	0x24001c54
 8014a68:	24001c58 	.word	0x24001c58
 8014a6c:	24001cb4 	.word	0x24001cb4
 8014a70:	24001cbc 	.word	0x24001cbc
 8014a74:	24001ca4 	.word	0x24001ca4
 8014a78:	240017cc 	.word	0x240017cc
 8014a7c:	240017c8 	.word	0x240017c8
 8014a80:	24001cac 	.word	0x24001cac
 8014a84:	24001cb0 	.word	0x24001cb0

08014a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014a88:	b480      	push	{r7}
 8014a8a:	b085      	sub	sp, #20
 8014a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014a8e:	4b28      	ldr	r3, [pc, #160]	; (8014b30 <vTaskSwitchContext+0xa8>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d003      	beq.n	8014a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014a96:	4b27      	ldr	r3, [pc, #156]	; (8014b34 <vTaskSwitchContext+0xac>)
 8014a98:	2201      	movs	r2, #1
 8014a9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014a9c:	e041      	b.n	8014b22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014a9e:	4b25      	ldr	r3, [pc, #148]	; (8014b34 <vTaskSwitchContext+0xac>)
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014aa4:	4b24      	ldr	r3, [pc, #144]	; (8014b38 <vTaskSwitchContext+0xb0>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	60fb      	str	r3, [r7, #12]
 8014aaa:	e010      	b.n	8014ace <vTaskSwitchContext+0x46>
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d10a      	bne.n	8014ac8 <vTaskSwitchContext+0x40>
	__asm volatile
 8014ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab6:	f383 8811 	msr	BASEPRI, r3
 8014aba:	f3bf 8f6f 	isb	sy
 8014abe:	f3bf 8f4f 	dsb	sy
 8014ac2:	607b      	str	r3, [r7, #4]
}
 8014ac4:	bf00      	nop
 8014ac6:	e7fe      	b.n	8014ac6 <vTaskSwitchContext+0x3e>
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	3b01      	subs	r3, #1
 8014acc:	60fb      	str	r3, [r7, #12]
 8014ace:	491b      	ldr	r1, [pc, #108]	; (8014b3c <vTaskSwitchContext+0xb4>)
 8014ad0:	68fa      	ldr	r2, [r7, #12]
 8014ad2:	4613      	mov	r3, r2
 8014ad4:	009b      	lsls	r3, r3, #2
 8014ad6:	4413      	add	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	440b      	add	r3, r1
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d0e4      	beq.n	8014aac <vTaskSwitchContext+0x24>
 8014ae2:	68fa      	ldr	r2, [r7, #12]
 8014ae4:	4613      	mov	r3, r2
 8014ae6:	009b      	lsls	r3, r3, #2
 8014ae8:	4413      	add	r3, r2
 8014aea:	009b      	lsls	r3, r3, #2
 8014aec:	4a13      	ldr	r2, [pc, #76]	; (8014b3c <vTaskSwitchContext+0xb4>)
 8014aee:	4413      	add	r3, r2
 8014af0:	60bb      	str	r3, [r7, #8]
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	685a      	ldr	r2, [r3, #4]
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	605a      	str	r2, [r3, #4]
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	685a      	ldr	r2, [r3, #4]
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	3308      	adds	r3, #8
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d104      	bne.n	8014b12 <vTaskSwitchContext+0x8a>
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	685a      	ldr	r2, [r3, #4]
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	605a      	str	r2, [r3, #4]
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	68db      	ldr	r3, [r3, #12]
 8014b18:	4a09      	ldr	r2, [pc, #36]	; (8014b40 <vTaskSwitchContext+0xb8>)
 8014b1a:	6013      	str	r3, [r2, #0]
 8014b1c:	4a06      	ldr	r2, [pc, #24]	; (8014b38 <vTaskSwitchContext+0xb0>)
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	6013      	str	r3, [r2, #0]
}
 8014b22:	bf00      	nop
 8014b24:	3714      	adds	r7, #20
 8014b26:	46bd      	mov	sp, r7
 8014b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2c:	4770      	bx	lr
 8014b2e:	bf00      	nop
 8014b30:	24001cc4 	.word	0x24001cc4
 8014b34:	24001cb0 	.word	0x24001cb0
 8014b38:	24001ca4 	.word	0x24001ca4
 8014b3c:	240017cc 	.word	0x240017cc
 8014b40:	240017c8 	.word	0x240017c8

08014b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b084      	sub	sp, #16
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d10a      	bne.n	8014b6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b58:	f383 8811 	msr	BASEPRI, r3
 8014b5c:	f3bf 8f6f 	isb	sy
 8014b60:	f3bf 8f4f 	dsb	sy
 8014b64:	60fb      	str	r3, [r7, #12]
}
 8014b66:	bf00      	nop
 8014b68:	e7fe      	b.n	8014b68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014b6a:	4b07      	ldr	r3, [pc, #28]	; (8014b88 <vTaskPlaceOnEventList+0x44>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	3318      	adds	r3, #24
 8014b70:	4619      	mov	r1, r3
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f7fe fcab 	bl	80134ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014b78:	2101      	movs	r1, #1
 8014b7a:	6838      	ldr	r0, [r7, #0]
 8014b7c:	f000 fb32 	bl	80151e4 <prvAddCurrentTaskToDelayedList>
}
 8014b80:	bf00      	nop
 8014b82:	3710      	adds	r7, #16
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	240017c8 	.word	0x240017c8

08014b8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b086      	sub	sp, #24
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	60f8      	str	r0, [r7, #12]
 8014b94:	60b9      	str	r1, [r7, #8]
 8014b96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d10a      	bne.n	8014bb4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba2:	f383 8811 	msr	BASEPRI, r3
 8014ba6:	f3bf 8f6f 	isb	sy
 8014baa:	f3bf 8f4f 	dsb	sy
 8014bae:	617b      	str	r3, [r7, #20]
}
 8014bb0:	bf00      	nop
 8014bb2:	e7fe      	b.n	8014bb2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014bb4:	4b11      	ldr	r3, [pc, #68]	; (8014bfc <vTaskPlaceOnUnorderedEventList+0x70>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d10a      	bne.n	8014bd2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc0:	f383 8811 	msr	BASEPRI, r3
 8014bc4:	f3bf 8f6f 	isb	sy
 8014bc8:	f3bf 8f4f 	dsb	sy
 8014bcc:	613b      	str	r3, [r7, #16]
}
 8014bce:	bf00      	nop
 8014bd0:	e7fe      	b.n	8014bd0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014bd2:	4b0b      	ldr	r3, [pc, #44]	; (8014c00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	68ba      	ldr	r2, [r7, #8]
 8014bd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014bdc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bde:	4b08      	ldr	r3, [pc, #32]	; (8014c00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	3318      	adds	r3, #24
 8014be4:	4619      	mov	r1, r3
 8014be6:	68f8      	ldr	r0, [r7, #12]
 8014be8:	f7fe fc4d 	bl	8013486 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014bec:	2101      	movs	r1, #1
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f000 faf8 	bl	80151e4 <prvAddCurrentTaskToDelayedList>
}
 8014bf4:	bf00      	nop
 8014bf6:	3718      	adds	r7, #24
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	24001cc4 	.word	0x24001cc4
 8014c00:	240017c8 	.word	0x240017c8

08014c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b086      	sub	sp, #24
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	60f8      	str	r0, [r7, #12]
 8014c0c:	60b9      	str	r1, [r7, #8]
 8014c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d10a      	bne.n	8014c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c1a:	f383 8811 	msr	BASEPRI, r3
 8014c1e:	f3bf 8f6f 	isb	sy
 8014c22:	f3bf 8f4f 	dsb	sy
 8014c26:	617b      	str	r3, [r7, #20]
}
 8014c28:	bf00      	nop
 8014c2a:	e7fe      	b.n	8014c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c2c:	4b0a      	ldr	r3, [pc, #40]	; (8014c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	3318      	adds	r3, #24
 8014c32:	4619      	mov	r1, r3
 8014c34:	68f8      	ldr	r0, [r7, #12]
 8014c36:	f7fe fc26 	bl	8013486 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d002      	beq.n	8014c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014c46:	6879      	ldr	r1, [r7, #4]
 8014c48:	68b8      	ldr	r0, [r7, #8]
 8014c4a:	f000 facb 	bl	80151e4 <prvAddCurrentTaskToDelayedList>
	}
 8014c4e:	bf00      	nop
 8014c50:	3718      	adds	r7, #24
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	240017c8 	.word	0x240017c8

08014c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b086      	sub	sp, #24
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d10a      	bne.n	8014c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c76:	f383 8811 	msr	BASEPRI, r3
 8014c7a:	f3bf 8f6f 	isb	sy
 8014c7e:	f3bf 8f4f 	dsb	sy
 8014c82:	60fb      	str	r3, [r7, #12]
}
 8014c84:	bf00      	nop
 8014c86:	e7fe      	b.n	8014c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	3318      	adds	r3, #24
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7fe fc57 	bl	8013540 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c92:	4b1e      	ldr	r3, [pc, #120]	; (8014d0c <xTaskRemoveFromEventList+0xb0>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d11d      	bne.n	8014cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	3304      	adds	r3, #4
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f7fe fc4e 	bl	8013540 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ca8:	4b19      	ldr	r3, [pc, #100]	; (8014d10 <xTaskRemoveFromEventList+0xb4>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d903      	bls.n	8014cb8 <xTaskRemoveFromEventList+0x5c>
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cb4:	4a16      	ldr	r2, [pc, #88]	; (8014d10 <xTaskRemoveFromEventList+0xb4>)
 8014cb6:	6013      	str	r3, [r2, #0]
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cbc:	4613      	mov	r3, r2
 8014cbe:	009b      	lsls	r3, r3, #2
 8014cc0:	4413      	add	r3, r2
 8014cc2:	009b      	lsls	r3, r3, #2
 8014cc4:	4a13      	ldr	r2, [pc, #76]	; (8014d14 <xTaskRemoveFromEventList+0xb8>)
 8014cc6:	441a      	add	r2, r3
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	3304      	adds	r3, #4
 8014ccc:	4619      	mov	r1, r3
 8014cce:	4610      	mov	r0, r2
 8014cd0:	f7fe fbd9 	bl	8013486 <vListInsertEnd>
 8014cd4:	e005      	b.n	8014ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	3318      	adds	r3, #24
 8014cda:	4619      	mov	r1, r3
 8014cdc:	480e      	ldr	r0, [pc, #56]	; (8014d18 <xTaskRemoveFromEventList+0xbc>)
 8014cde:	f7fe fbd2 	bl	8013486 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ce6:	4b0d      	ldr	r3, [pc, #52]	; (8014d1c <xTaskRemoveFromEventList+0xc0>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d905      	bls.n	8014cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014cf4:	4b0a      	ldr	r3, [pc, #40]	; (8014d20 <xTaskRemoveFromEventList+0xc4>)
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	601a      	str	r2, [r3, #0]
 8014cfa:	e001      	b.n	8014d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d00:	697b      	ldr	r3, [r7, #20]
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3718      	adds	r7, #24
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	24001cc4 	.word	0x24001cc4
 8014d10:	24001ca4 	.word	0x24001ca4
 8014d14:	240017cc 	.word	0x240017cc
 8014d18:	24001c5c 	.word	0x24001c5c
 8014d1c:	240017c8 	.word	0x240017c8
 8014d20:	24001cb0 	.word	0x24001cb0

08014d24 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014d2e:	4b29      	ldr	r3, [pc, #164]	; (8014dd4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d10a      	bne.n	8014d4c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d3a:	f383 8811 	msr	BASEPRI, r3
 8014d3e:	f3bf 8f6f 	isb	sy
 8014d42:	f3bf 8f4f 	dsb	sy
 8014d46:	613b      	str	r3, [r7, #16]
}
 8014d48:	bf00      	nop
 8014d4a:	e7fe      	b.n	8014d4a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	68db      	ldr	r3, [r3, #12]
 8014d5a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d10a      	bne.n	8014d78 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d66:	f383 8811 	msr	BASEPRI, r3
 8014d6a:	f3bf 8f6f 	isb	sy
 8014d6e:	f3bf 8f4f 	dsb	sy
 8014d72:	60fb      	str	r3, [r7, #12]
}
 8014d74:	bf00      	nop
 8014d76:	e7fe      	b.n	8014d76 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f7fe fbe1 	bl	8013540 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	3304      	adds	r3, #4
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7fe fbdc 	bl	8013540 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d8c:	4b12      	ldr	r3, [pc, #72]	; (8014dd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d903      	bls.n	8014d9c <vTaskRemoveFromUnorderedEventList+0x78>
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d98:	4a0f      	ldr	r2, [pc, #60]	; (8014dd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014d9a:	6013      	str	r3, [r2, #0]
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014da0:	4613      	mov	r3, r2
 8014da2:	009b      	lsls	r3, r3, #2
 8014da4:	4413      	add	r3, r2
 8014da6:	009b      	lsls	r3, r3, #2
 8014da8:	4a0c      	ldr	r2, [pc, #48]	; (8014ddc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014daa:	441a      	add	r2, r3
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	3304      	adds	r3, #4
 8014db0:	4619      	mov	r1, r3
 8014db2:	4610      	mov	r0, r2
 8014db4:	f7fe fb67 	bl	8013486 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dbc:	4b08      	ldr	r3, [pc, #32]	; (8014de0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d902      	bls.n	8014dcc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014dc6:	4b07      	ldr	r3, [pc, #28]	; (8014de4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014dc8:	2201      	movs	r2, #1
 8014dca:	601a      	str	r2, [r3, #0]
	}
}
 8014dcc:	bf00      	nop
 8014dce:	3718      	adds	r7, #24
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	24001cc4 	.word	0x24001cc4
 8014dd8:	24001ca4 	.word	0x24001ca4
 8014ddc:	240017cc 	.word	0x240017cc
 8014de0:	240017c8 	.word	0x240017c8
 8014de4:	24001cb0 	.word	0x24001cb0

08014de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014de8:	b480      	push	{r7}
 8014dea:	b083      	sub	sp, #12
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014df0:	4b06      	ldr	r3, [pc, #24]	; (8014e0c <vTaskInternalSetTimeOutState+0x24>)
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014df8:	4b05      	ldr	r3, [pc, #20]	; (8014e10 <vTaskInternalSetTimeOutState+0x28>)
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	605a      	str	r2, [r3, #4]
}
 8014e00:	bf00      	nop
 8014e02:	370c      	adds	r7, #12
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr
 8014e0c:	24001cb4 	.word	0x24001cb4
 8014e10:	24001ca0 	.word	0x24001ca0

08014e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b088      	sub	sp, #32
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d10a      	bne.n	8014e3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e28:	f383 8811 	msr	BASEPRI, r3
 8014e2c:	f3bf 8f6f 	isb	sy
 8014e30:	f3bf 8f4f 	dsb	sy
 8014e34:	613b      	str	r3, [r7, #16]
}
 8014e36:	bf00      	nop
 8014e38:	e7fe      	b.n	8014e38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d10a      	bne.n	8014e56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e44:	f383 8811 	msr	BASEPRI, r3
 8014e48:	f3bf 8f6f 	isb	sy
 8014e4c:	f3bf 8f4f 	dsb	sy
 8014e50:	60fb      	str	r3, [r7, #12]
}
 8014e52:	bf00      	nop
 8014e54:	e7fe      	b.n	8014e54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014e56:	f000 feb5 	bl	8015bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014e5a:	4b1d      	ldr	r3, [pc, #116]	; (8014ed0 <xTaskCheckForTimeOut+0xbc>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	69ba      	ldr	r2, [r7, #24]
 8014e66:	1ad3      	subs	r3, r2, r3
 8014e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e72:	d102      	bne.n	8014e7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e74:	2300      	movs	r3, #0
 8014e76:	61fb      	str	r3, [r7, #28]
 8014e78:	e023      	b.n	8014ec2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681a      	ldr	r2, [r3, #0]
 8014e7e:	4b15      	ldr	r3, [pc, #84]	; (8014ed4 <xTaskCheckForTimeOut+0xc0>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d007      	beq.n	8014e96 <xTaskCheckForTimeOut+0x82>
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	69ba      	ldr	r2, [r7, #24]
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d302      	bcc.n	8014e96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e90:	2301      	movs	r3, #1
 8014e92:	61fb      	str	r3, [r7, #28]
 8014e94:	e015      	b.n	8014ec2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	697a      	ldr	r2, [r7, #20]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d20b      	bcs.n	8014eb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	1ad2      	subs	r2, r2, r3
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	f7ff ff9b 	bl	8014de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	61fb      	str	r3, [r7, #28]
 8014eb6:	e004      	b.n	8014ec2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014ec2:	f000 feaf 	bl	8015c24 <vPortExitCritical>

	return xReturn;
 8014ec6:	69fb      	ldr	r3, [r7, #28]
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3720      	adds	r7, #32
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	24001ca0 	.word	0x24001ca0
 8014ed4:	24001cb4 	.word	0x24001cb4

08014ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014ed8:	b480      	push	{r7}
 8014eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014edc:	4b03      	ldr	r3, [pc, #12]	; (8014eec <vTaskMissedYield+0x14>)
 8014ede:	2201      	movs	r2, #1
 8014ee0:	601a      	str	r2, [r3, #0]
}
 8014ee2:	bf00      	nop
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eea:	4770      	bx	lr
 8014eec:	24001cb0 	.word	0x24001cb0

08014ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ef8:	f000 f852 	bl	8014fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014efc:	4b06      	ldr	r3, [pc, #24]	; (8014f18 <prvIdleTask+0x28>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d9f9      	bls.n	8014ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014f04:	4b05      	ldr	r3, [pc, #20]	; (8014f1c <prvIdleTask+0x2c>)
 8014f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f0a:	601a      	str	r2, [r3, #0]
 8014f0c:	f3bf 8f4f 	dsb	sy
 8014f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014f14:	e7f0      	b.n	8014ef8 <prvIdleTask+0x8>
 8014f16:	bf00      	nop
 8014f18:	240017cc 	.word	0x240017cc
 8014f1c:	e000ed04 	.word	0xe000ed04

08014f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f26:	2300      	movs	r3, #0
 8014f28:	607b      	str	r3, [r7, #4]
 8014f2a:	e00c      	b.n	8014f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	4613      	mov	r3, r2
 8014f30:	009b      	lsls	r3, r3, #2
 8014f32:	4413      	add	r3, r2
 8014f34:	009b      	lsls	r3, r3, #2
 8014f36:	4a12      	ldr	r2, [pc, #72]	; (8014f80 <prvInitialiseTaskLists+0x60>)
 8014f38:	4413      	add	r3, r2
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7fe fa76 	bl	801342c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	3301      	adds	r3, #1
 8014f44:	607b      	str	r3, [r7, #4]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2b37      	cmp	r3, #55	; 0x37
 8014f4a:	d9ef      	bls.n	8014f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014f4c:	480d      	ldr	r0, [pc, #52]	; (8014f84 <prvInitialiseTaskLists+0x64>)
 8014f4e:	f7fe fa6d 	bl	801342c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014f52:	480d      	ldr	r0, [pc, #52]	; (8014f88 <prvInitialiseTaskLists+0x68>)
 8014f54:	f7fe fa6a 	bl	801342c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014f58:	480c      	ldr	r0, [pc, #48]	; (8014f8c <prvInitialiseTaskLists+0x6c>)
 8014f5a:	f7fe fa67 	bl	801342c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014f5e:	480c      	ldr	r0, [pc, #48]	; (8014f90 <prvInitialiseTaskLists+0x70>)
 8014f60:	f7fe fa64 	bl	801342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014f64:	480b      	ldr	r0, [pc, #44]	; (8014f94 <prvInitialiseTaskLists+0x74>)
 8014f66:	f7fe fa61 	bl	801342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014f6a:	4b0b      	ldr	r3, [pc, #44]	; (8014f98 <prvInitialiseTaskLists+0x78>)
 8014f6c:	4a05      	ldr	r2, [pc, #20]	; (8014f84 <prvInitialiseTaskLists+0x64>)
 8014f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f70:	4b0a      	ldr	r3, [pc, #40]	; (8014f9c <prvInitialiseTaskLists+0x7c>)
 8014f72:	4a05      	ldr	r2, [pc, #20]	; (8014f88 <prvInitialiseTaskLists+0x68>)
 8014f74:	601a      	str	r2, [r3, #0]
}
 8014f76:	bf00      	nop
 8014f78:	3708      	adds	r7, #8
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	240017cc 	.word	0x240017cc
 8014f84:	24001c2c 	.word	0x24001c2c
 8014f88:	24001c40 	.word	0x24001c40
 8014f8c:	24001c5c 	.word	0x24001c5c
 8014f90:	24001c70 	.word	0x24001c70
 8014f94:	24001c88 	.word	0x24001c88
 8014f98:	24001c54 	.word	0x24001c54
 8014f9c:	24001c58 	.word	0x24001c58

08014fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014fa6:	e019      	b.n	8014fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014fa8:	f000 fe0c 	bl	8015bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fac:	4b10      	ldr	r3, [pc, #64]	; (8014ff0 <prvCheckTasksWaitingTermination+0x50>)
 8014fae:	68db      	ldr	r3, [r3, #12]
 8014fb0:	68db      	ldr	r3, [r3, #12]
 8014fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	3304      	adds	r3, #4
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7fe fac1 	bl	8013540 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014fbe:	4b0d      	ldr	r3, [pc, #52]	; (8014ff4 <prvCheckTasksWaitingTermination+0x54>)
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	3b01      	subs	r3, #1
 8014fc4:	4a0b      	ldr	r2, [pc, #44]	; (8014ff4 <prvCheckTasksWaitingTermination+0x54>)
 8014fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014fc8:	4b0b      	ldr	r3, [pc, #44]	; (8014ff8 <prvCheckTasksWaitingTermination+0x58>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	3b01      	subs	r3, #1
 8014fce:	4a0a      	ldr	r2, [pc, #40]	; (8014ff8 <prvCheckTasksWaitingTermination+0x58>)
 8014fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014fd2:	f000 fe27 	bl	8015c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f000 f810 	bl	8014ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014fdc:	4b06      	ldr	r3, [pc, #24]	; (8014ff8 <prvCheckTasksWaitingTermination+0x58>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d1e1      	bne.n	8014fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014fe4:	bf00      	nop
 8014fe6:	bf00      	nop
 8014fe8:	3708      	adds	r7, #8
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop
 8014ff0:	24001c70 	.word	0x24001c70
 8014ff4:	24001c9c 	.word	0x24001c9c
 8014ff8:	24001c84 	.word	0x24001c84

08014ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b084      	sub	sp, #16
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801500a:	2b00      	cmp	r3, #0
 801500c:	d108      	bne.n	8015020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015012:	4618      	mov	r0, r3
 8015014:	f000 ffc4 	bl	8015fa0 <vPortFree>
				vPortFree( pxTCB );
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f000 ffc1 	bl	8015fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801501e:	e018      	b.n	8015052 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015026:	2b01      	cmp	r3, #1
 8015028:	d103      	bne.n	8015032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f000 ffb8 	bl	8015fa0 <vPortFree>
	}
 8015030:	e00f      	b.n	8015052 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015038:	2b02      	cmp	r3, #2
 801503a:	d00a      	beq.n	8015052 <prvDeleteTCB+0x56>
	__asm volatile
 801503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015040:	f383 8811 	msr	BASEPRI, r3
 8015044:	f3bf 8f6f 	isb	sy
 8015048:	f3bf 8f4f 	dsb	sy
 801504c:	60fb      	str	r3, [r7, #12]
}
 801504e:	bf00      	nop
 8015050:	e7fe      	b.n	8015050 <prvDeleteTCB+0x54>
	}
 8015052:	bf00      	nop
 8015054:	3710      	adds	r7, #16
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
	...

0801505c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801505c:	b480      	push	{r7}
 801505e:	b083      	sub	sp, #12
 8015060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015062:	4b0c      	ldr	r3, [pc, #48]	; (8015094 <prvResetNextTaskUnblockTime+0x38>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d104      	bne.n	8015076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801506c:	4b0a      	ldr	r3, [pc, #40]	; (8015098 <prvResetNextTaskUnblockTime+0x3c>)
 801506e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015074:	e008      	b.n	8015088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015076:	4b07      	ldr	r3, [pc, #28]	; (8015094 <prvResetNextTaskUnblockTime+0x38>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	68db      	ldr	r3, [r3, #12]
 801507e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	4a04      	ldr	r2, [pc, #16]	; (8015098 <prvResetNextTaskUnblockTime+0x3c>)
 8015086:	6013      	str	r3, [r2, #0]
}
 8015088:	bf00      	nop
 801508a:	370c      	adds	r7, #12
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr
 8015094:	24001c54 	.word	0x24001c54
 8015098:	24001cbc 	.word	0x24001cbc

0801509c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80150a2:	4b0b      	ldr	r3, [pc, #44]	; (80150d0 <xTaskGetSchedulerState+0x34>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d102      	bne.n	80150b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80150aa:	2301      	movs	r3, #1
 80150ac:	607b      	str	r3, [r7, #4]
 80150ae:	e008      	b.n	80150c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150b0:	4b08      	ldr	r3, [pc, #32]	; (80150d4 <xTaskGetSchedulerState+0x38>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d102      	bne.n	80150be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80150b8:	2302      	movs	r3, #2
 80150ba:	607b      	str	r3, [r7, #4]
 80150bc:	e001      	b.n	80150c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80150be:	2300      	movs	r3, #0
 80150c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80150c2:	687b      	ldr	r3, [r7, #4]
	}
 80150c4:	4618      	mov	r0, r3
 80150c6:	370c      	adds	r7, #12
 80150c8:	46bd      	mov	sp, r7
 80150ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ce:	4770      	bx	lr
 80150d0:	24001ca8 	.word	0x24001ca8
 80150d4:	24001cc4 	.word	0x24001cc4

080150d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b086      	sub	sp, #24
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80150e4:	2300      	movs	r3, #0
 80150e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d056      	beq.n	801519c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80150ee:	4b2e      	ldr	r3, [pc, #184]	; (80151a8 <xTaskPriorityDisinherit+0xd0>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	693a      	ldr	r2, [r7, #16]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d00a      	beq.n	801510e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80150f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150fc:	f383 8811 	msr	BASEPRI, r3
 8015100:	f3bf 8f6f 	isb	sy
 8015104:	f3bf 8f4f 	dsb	sy
 8015108:	60fb      	str	r3, [r7, #12]
}
 801510a:	bf00      	nop
 801510c:	e7fe      	b.n	801510c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015112:	2b00      	cmp	r3, #0
 8015114:	d10a      	bne.n	801512c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801511a:	f383 8811 	msr	BASEPRI, r3
 801511e:	f3bf 8f6f 	isb	sy
 8015122:	f3bf 8f4f 	dsb	sy
 8015126:	60bb      	str	r3, [r7, #8]
}
 8015128:	bf00      	nop
 801512a:	e7fe      	b.n	801512a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015130:	1e5a      	subs	r2, r3, #1
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801513e:	429a      	cmp	r2, r3
 8015140:	d02c      	beq.n	801519c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015146:	2b00      	cmp	r3, #0
 8015148:	d128      	bne.n	801519c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	3304      	adds	r3, #4
 801514e:	4618      	mov	r0, r3
 8015150:	f7fe f9f6 	bl	8013540 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015168:	693b      	ldr	r3, [r7, #16]
 801516a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801516c:	4b0f      	ldr	r3, [pc, #60]	; (80151ac <xTaskPriorityDisinherit+0xd4>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	429a      	cmp	r2, r3
 8015172:	d903      	bls.n	801517c <xTaskPriorityDisinherit+0xa4>
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015178:	4a0c      	ldr	r2, [pc, #48]	; (80151ac <xTaskPriorityDisinherit+0xd4>)
 801517a:	6013      	str	r3, [r2, #0]
 801517c:	693b      	ldr	r3, [r7, #16]
 801517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015180:	4613      	mov	r3, r2
 8015182:	009b      	lsls	r3, r3, #2
 8015184:	4413      	add	r3, r2
 8015186:	009b      	lsls	r3, r3, #2
 8015188:	4a09      	ldr	r2, [pc, #36]	; (80151b0 <xTaskPriorityDisinherit+0xd8>)
 801518a:	441a      	add	r2, r3
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	3304      	adds	r3, #4
 8015190:	4619      	mov	r1, r3
 8015192:	4610      	mov	r0, r2
 8015194:	f7fe f977 	bl	8013486 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015198:	2301      	movs	r3, #1
 801519a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801519c:	697b      	ldr	r3, [r7, #20]
	}
 801519e:	4618      	mov	r0, r3
 80151a0:	3718      	adds	r7, #24
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	240017c8 	.word	0x240017c8
 80151ac:	24001ca4 	.word	0x24001ca4
 80151b0:	240017cc 	.word	0x240017cc

080151b4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80151b4:	b480      	push	{r7}
 80151b6:	b083      	sub	sp, #12
 80151b8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80151ba:	4b09      	ldr	r3, [pc, #36]	; (80151e0 <uxTaskResetEventItemValue+0x2c>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	699b      	ldr	r3, [r3, #24]
 80151c0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151c2:	4b07      	ldr	r3, [pc, #28]	; (80151e0 <uxTaskResetEventItemValue+0x2c>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151c8:	4b05      	ldr	r3, [pc, #20]	; (80151e0 <uxTaskResetEventItemValue+0x2c>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80151d0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80151d2:	687b      	ldr	r3, [r7, #4]
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	370c      	adds	r7, #12
 80151d8:	46bd      	mov	sp, r7
 80151da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151de:	4770      	bx	lr
 80151e0:	240017c8 	.word	0x240017c8

080151e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80151ee:	4b21      	ldr	r3, [pc, #132]	; (8015274 <prvAddCurrentTaskToDelayedList+0x90>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151f4:	4b20      	ldr	r3, [pc, #128]	; (8015278 <prvAddCurrentTaskToDelayedList+0x94>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	3304      	adds	r3, #4
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7fe f9a0 	bl	8013540 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015206:	d10a      	bne.n	801521e <prvAddCurrentTaskToDelayedList+0x3a>
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d007      	beq.n	801521e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801520e:	4b1a      	ldr	r3, [pc, #104]	; (8015278 <prvAddCurrentTaskToDelayedList+0x94>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	3304      	adds	r3, #4
 8015214:	4619      	mov	r1, r3
 8015216:	4819      	ldr	r0, [pc, #100]	; (801527c <prvAddCurrentTaskToDelayedList+0x98>)
 8015218:	f7fe f935 	bl	8013486 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801521c:	e026      	b.n	801526c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801521e:	68fa      	ldr	r2, [r7, #12]
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	4413      	add	r3, r2
 8015224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015226:	4b14      	ldr	r3, [pc, #80]	; (8015278 <prvAddCurrentTaskToDelayedList+0x94>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	68ba      	ldr	r2, [r7, #8]
 801522c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801522e:	68ba      	ldr	r2, [r7, #8]
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	429a      	cmp	r2, r3
 8015234:	d209      	bcs.n	801524a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015236:	4b12      	ldr	r3, [pc, #72]	; (8015280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	4b0f      	ldr	r3, [pc, #60]	; (8015278 <prvAddCurrentTaskToDelayedList+0x94>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	3304      	adds	r3, #4
 8015240:	4619      	mov	r1, r3
 8015242:	4610      	mov	r0, r2
 8015244:	f7fe f943 	bl	80134ce <vListInsert>
}
 8015248:	e010      	b.n	801526c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801524a:	4b0e      	ldr	r3, [pc, #56]	; (8015284 <prvAddCurrentTaskToDelayedList+0xa0>)
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	4b0a      	ldr	r3, [pc, #40]	; (8015278 <prvAddCurrentTaskToDelayedList+0x94>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	3304      	adds	r3, #4
 8015254:	4619      	mov	r1, r3
 8015256:	4610      	mov	r0, r2
 8015258:	f7fe f939 	bl	80134ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801525c:	4b0a      	ldr	r3, [pc, #40]	; (8015288 <prvAddCurrentTaskToDelayedList+0xa4>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	68ba      	ldr	r2, [r7, #8]
 8015262:	429a      	cmp	r2, r3
 8015264:	d202      	bcs.n	801526c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015266:	4a08      	ldr	r2, [pc, #32]	; (8015288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	6013      	str	r3, [r2, #0]
}
 801526c:	bf00      	nop
 801526e:	3710      	adds	r7, #16
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	24001ca0 	.word	0x24001ca0
 8015278:	240017c8 	.word	0x240017c8
 801527c:	24001c88 	.word	0x24001c88
 8015280:	24001c58 	.word	0x24001c58
 8015284:	24001c54 	.word	0x24001c54
 8015288:	24001cbc 	.word	0x24001cbc

0801528c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b08a      	sub	sp, #40	; 0x28
 8015290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015292:	2300      	movs	r3, #0
 8015294:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015296:	f000 fb07 	bl	80158a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801529a:	4b1c      	ldr	r3, [pc, #112]	; (801530c <xTimerCreateTimerTask+0x80>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d021      	beq.n	80152e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80152a2:	2300      	movs	r3, #0
 80152a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80152a6:	2300      	movs	r3, #0
 80152a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80152aa:	1d3a      	adds	r2, r7, #4
 80152ac:	f107 0108 	add.w	r1, r7, #8
 80152b0:	f107 030c 	add.w	r3, r7, #12
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7fd feb1 	bl	801301c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80152ba:	6879      	ldr	r1, [r7, #4]
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	9202      	str	r2, [sp, #8]
 80152c2:	9301      	str	r3, [sp, #4]
 80152c4:	2302      	movs	r3, #2
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	2300      	movs	r3, #0
 80152ca:	460a      	mov	r2, r1
 80152cc:	4910      	ldr	r1, [pc, #64]	; (8015310 <xTimerCreateTimerTask+0x84>)
 80152ce:	4811      	ldr	r0, [pc, #68]	; (8015314 <xTimerCreateTimerTask+0x88>)
 80152d0:	f7fe ff06 	bl	80140e0 <xTaskCreateStatic>
 80152d4:	4603      	mov	r3, r0
 80152d6:	4a10      	ldr	r2, [pc, #64]	; (8015318 <xTimerCreateTimerTask+0x8c>)
 80152d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80152da:	4b0f      	ldr	r3, [pc, #60]	; (8015318 <xTimerCreateTimerTask+0x8c>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d001      	beq.n	80152e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80152e2:	2301      	movs	r3, #1
 80152e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80152e6:	697b      	ldr	r3, [r7, #20]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d10a      	bne.n	8015302 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80152ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f0:	f383 8811 	msr	BASEPRI, r3
 80152f4:	f3bf 8f6f 	isb	sy
 80152f8:	f3bf 8f4f 	dsb	sy
 80152fc:	613b      	str	r3, [r7, #16]
}
 80152fe:	bf00      	nop
 8015300:	e7fe      	b.n	8015300 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015302:	697b      	ldr	r3, [r7, #20]
}
 8015304:	4618      	mov	r0, r3
 8015306:	3718      	adds	r7, #24
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	24001cf8 	.word	0x24001cf8
 8015310:	08016ef4 	.word	0x08016ef4
 8015314:	08015451 	.word	0x08015451
 8015318:	24001cfc 	.word	0x24001cfc

0801531c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b08a      	sub	sp, #40	; 0x28
 8015320:	af00      	add	r7, sp, #0
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	60b9      	str	r1, [r7, #8]
 8015326:	607a      	str	r2, [r7, #4]
 8015328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801532a:	2300      	movs	r3, #0
 801532c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d10a      	bne.n	801534a <xTimerGenericCommand+0x2e>
	__asm volatile
 8015334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015338:	f383 8811 	msr	BASEPRI, r3
 801533c:	f3bf 8f6f 	isb	sy
 8015340:	f3bf 8f4f 	dsb	sy
 8015344:	623b      	str	r3, [r7, #32]
}
 8015346:	bf00      	nop
 8015348:	e7fe      	b.n	8015348 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801534a:	4b1a      	ldr	r3, [pc, #104]	; (80153b4 <xTimerGenericCommand+0x98>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d02a      	beq.n	80153a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	2b05      	cmp	r3, #5
 8015362:	dc18      	bgt.n	8015396 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015364:	f7ff fe9a 	bl	801509c <xTaskGetSchedulerState>
 8015368:	4603      	mov	r3, r0
 801536a:	2b02      	cmp	r3, #2
 801536c:	d109      	bne.n	8015382 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801536e:	4b11      	ldr	r3, [pc, #68]	; (80153b4 <xTimerGenericCommand+0x98>)
 8015370:	6818      	ldr	r0, [r3, #0]
 8015372:	f107 0110 	add.w	r1, r7, #16
 8015376:	2300      	movs	r3, #0
 8015378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801537a:	f7fe fa49 	bl	8013810 <xQueueGenericSend>
 801537e:	6278      	str	r0, [r7, #36]	; 0x24
 8015380:	e012      	b.n	80153a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015382:	4b0c      	ldr	r3, [pc, #48]	; (80153b4 <xTimerGenericCommand+0x98>)
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	f107 0110 	add.w	r1, r7, #16
 801538a:	2300      	movs	r3, #0
 801538c:	2200      	movs	r2, #0
 801538e:	f7fe fa3f 	bl	8013810 <xQueueGenericSend>
 8015392:	6278      	str	r0, [r7, #36]	; 0x24
 8015394:	e008      	b.n	80153a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015396:	4b07      	ldr	r3, [pc, #28]	; (80153b4 <xTimerGenericCommand+0x98>)
 8015398:	6818      	ldr	r0, [r3, #0]
 801539a:	f107 0110 	add.w	r1, r7, #16
 801539e:	2300      	movs	r3, #0
 80153a0:	683a      	ldr	r2, [r7, #0]
 80153a2:	f7fe fb33 	bl	8013a0c <xQueueGenericSendFromISR>
 80153a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80153a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3728      	adds	r7, #40	; 0x28
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	24001cf8 	.word	0x24001cf8

080153b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b088      	sub	sp, #32
 80153bc:	af02      	add	r7, sp, #8
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153c2:	4b22      	ldr	r3, [pc, #136]	; (801544c <prvProcessExpiredTimer+0x94>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	3304      	adds	r3, #4
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7fe f8b5 	bl	8013540 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80153dc:	f003 0304 	and.w	r3, r3, #4
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d022      	beq.n	801542a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	699a      	ldr	r2, [r3, #24]
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	18d1      	adds	r1, r2, r3
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	683a      	ldr	r2, [r7, #0]
 80153f0:	6978      	ldr	r0, [r7, #20]
 80153f2:	f000 f8d1 	bl	8015598 <prvInsertTimerInActiveList>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d01f      	beq.n	801543c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80153fc:	2300      	movs	r3, #0
 80153fe:	9300      	str	r3, [sp, #0]
 8015400:	2300      	movs	r3, #0
 8015402:	687a      	ldr	r2, [r7, #4]
 8015404:	2100      	movs	r1, #0
 8015406:	6978      	ldr	r0, [r7, #20]
 8015408:	f7ff ff88 	bl	801531c <xTimerGenericCommand>
 801540c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d113      	bne.n	801543c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015418:	f383 8811 	msr	BASEPRI, r3
 801541c:	f3bf 8f6f 	isb	sy
 8015420:	f3bf 8f4f 	dsb	sy
 8015424:	60fb      	str	r3, [r7, #12]
}
 8015426:	bf00      	nop
 8015428:	e7fe      	b.n	8015428 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015430:	f023 0301 	bic.w	r3, r3, #1
 8015434:	b2da      	uxtb	r2, r3
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	6a1b      	ldr	r3, [r3, #32]
 8015440:	6978      	ldr	r0, [r7, #20]
 8015442:	4798      	blx	r3
}
 8015444:	bf00      	nop
 8015446:	3718      	adds	r7, #24
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	24001cf0 	.word	0x24001cf0

08015450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b084      	sub	sp, #16
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015458:	f107 0308 	add.w	r3, r7, #8
 801545c:	4618      	mov	r0, r3
 801545e:	f000 f857 	bl	8015510 <prvGetNextExpireTime>
 8015462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	4619      	mov	r1, r3
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f000 f803 	bl	8015474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801546e:	f000 f8d5 	bl	801561c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015472:	e7f1      	b.n	8015458 <prvTimerTask+0x8>

08015474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
 801547c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801547e:	f7ff f985 	bl	801478c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015482:	f107 0308 	add.w	r3, r7, #8
 8015486:	4618      	mov	r0, r3
 8015488:	f000 f866 	bl	8015558 <prvSampleTimeNow>
 801548c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d130      	bne.n	80154f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d10a      	bne.n	80154b0 <prvProcessTimerOrBlockTask+0x3c>
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	429a      	cmp	r2, r3
 80154a0:	d806      	bhi.n	80154b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80154a2:	f7ff f981 	bl	80147a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80154a6:	68f9      	ldr	r1, [r7, #12]
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f7ff ff85 	bl	80153b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80154ae:	e024      	b.n	80154fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d008      	beq.n	80154c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80154b6:	4b13      	ldr	r3, [pc, #76]	; (8015504 <prvProcessTimerOrBlockTask+0x90>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d101      	bne.n	80154c4 <prvProcessTimerOrBlockTask+0x50>
 80154c0:	2301      	movs	r3, #1
 80154c2:	e000      	b.n	80154c6 <prvProcessTimerOrBlockTask+0x52>
 80154c4:	2300      	movs	r3, #0
 80154c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80154c8:	4b0f      	ldr	r3, [pc, #60]	; (8015508 <prvProcessTimerOrBlockTask+0x94>)
 80154ca:	6818      	ldr	r0, [r3, #0]
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	1ad3      	subs	r3, r2, r3
 80154d2:	683a      	ldr	r2, [r7, #0]
 80154d4:	4619      	mov	r1, r3
 80154d6:	f7fe fdcf 	bl	8014078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80154da:	f7ff f965 	bl	80147a8 <xTaskResumeAll>
 80154de:	4603      	mov	r3, r0
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d10a      	bne.n	80154fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80154e4:	4b09      	ldr	r3, [pc, #36]	; (801550c <prvProcessTimerOrBlockTask+0x98>)
 80154e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154ea:	601a      	str	r2, [r3, #0]
 80154ec:	f3bf 8f4f 	dsb	sy
 80154f0:	f3bf 8f6f 	isb	sy
}
 80154f4:	e001      	b.n	80154fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80154f6:	f7ff f957 	bl	80147a8 <xTaskResumeAll>
}
 80154fa:	bf00      	nop
 80154fc:	3710      	adds	r7, #16
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}
 8015502:	bf00      	nop
 8015504:	24001cf4 	.word	0x24001cf4
 8015508:	24001cf8 	.word	0x24001cf8
 801550c:	e000ed04 	.word	0xe000ed04

08015510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015510:	b480      	push	{r7}
 8015512:	b085      	sub	sp, #20
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015518:	4b0e      	ldr	r3, [pc, #56]	; (8015554 <prvGetNextExpireTime+0x44>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d101      	bne.n	8015526 <prvGetNextExpireTime+0x16>
 8015522:	2201      	movs	r2, #1
 8015524:	e000      	b.n	8015528 <prvGetNextExpireTime+0x18>
 8015526:	2200      	movs	r2, #0
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d105      	bne.n	8015540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015534:	4b07      	ldr	r3, [pc, #28]	; (8015554 <prvGetNextExpireTime+0x44>)
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	60fb      	str	r3, [r7, #12]
 801553e:	e001      	b.n	8015544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015540:	2300      	movs	r3, #0
 8015542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015544:	68fb      	ldr	r3, [r7, #12]
}
 8015546:	4618      	mov	r0, r3
 8015548:	3714      	adds	r7, #20
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr
 8015552:	bf00      	nop
 8015554:	24001cf0 	.word	0x24001cf0

08015558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015560:	f7ff f9c0 	bl	80148e4 <xTaskGetTickCount>
 8015564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015566:	4b0b      	ldr	r3, [pc, #44]	; (8015594 <prvSampleTimeNow+0x3c>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	68fa      	ldr	r2, [r7, #12]
 801556c:	429a      	cmp	r2, r3
 801556e:	d205      	bcs.n	801557c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015570:	f000 f936 	bl	80157e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2201      	movs	r2, #1
 8015578:	601a      	str	r2, [r3, #0]
 801557a:	e002      	b.n	8015582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2200      	movs	r2, #0
 8015580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015582:	4a04      	ldr	r2, [pc, #16]	; (8015594 <prvSampleTimeNow+0x3c>)
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015588:	68fb      	ldr	r3, [r7, #12]
}
 801558a:	4618      	mov	r0, r3
 801558c:	3710      	adds	r7, #16
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}
 8015592:	bf00      	nop
 8015594:	24001d00 	.word	0x24001d00

08015598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b086      	sub	sp, #24
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80155a6:	2300      	movs	r3, #0
 80155a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	68ba      	ldr	r2, [r7, #8]
 80155ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	68fa      	ldr	r2, [r7, #12]
 80155b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80155b6:	68ba      	ldr	r2, [r7, #8]
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	d812      	bhi.n	80155e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155be:	687a      	ldr	r2, [r7, #4]
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	1ad2      	subs	r2, r2, r3
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	699b      	ldr	r3, [r3, #24]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d302      	bcc.n	80155d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80155cc:	2301      	movs	r3, #1
 80155ce:	617b      	str	r3, [r7, #20]
 80155d0:	e01b      	b.n	801560a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80155d2:	4b10      	ldr	r3, [pc, #64]	; (8015614 <prvInsertTimerInActiveList+0x7c>)
 80155d4:	681a      	ldr	r2, [r3, #0]
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	3304      	adds	r3, #4
 80155da:	4619      	mov	r1, r3
 80155dc:	4610      	mov	r0, r2
 80155de:	f7fd ff76 	bl	80134ce <vListInsert>
 80155e2:	e012      	b.n	801560a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d206      	bcs.n	80155fa <prvInsertTimerInActiveList+0x62>
 80155ec:	68ba      	ldr	r2, [r7, #8]
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d302      	bcc.n	80155fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80155f4:	2301      	movs	r3, #1
 80155f6:	617b      	str	r3, [r7, #20]
 80155f8:	e007      	b.n	801560a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80155fa:	4b07      	ldr	r3, [pc, #28]	; (8015618 <prvInsertTimerInActiveList+0x80>)
 80155fc:	681a      	ldr	r2, [r3, #0]
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	3304      	adds	r3, #4
 8015602:	4619      	mov	r1, r3
 8015604:	4610      	mov	r0, r2
 8015606:	f7fd ff62 	bl	80134ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 801560a:	697b      	ldr	r3, [r7, #20]
}
 801560c:	4618      	mov	r0, r3
 801560e:	3718      	adds	r7, #24
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}
 8015614:	24001cf4 	.word	0x24001cf4
 8015618:	24001cf0 	.word	0x24001cf0

0801561c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b08e      	sub	sp, #56	; 0x38
 8015620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015622:	e0ca      	b.n	80157ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2b00      	cmp	r3, #0
 8015628:	da18      	bge.n	801565c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801562a:	1d3b      	adds	r3, r7, #4
 801562c:	3304      	adds	r3, #4
 801562e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015632:	2b00      	cmp	r3, #0
 8015634:	d10a      	bne.n	801564c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801563a:	f383 8811 	msr	BASEPRI, r3
 801563e:	f3bf 8f6f 	isb	sy
 8015642:	f3bf 8f4f 	dsb	sy
 8015646:	61fb      	str	r3, [r7, #28]
}
 8015648:	bf00      	nop
 801564a:	e7fe      	b.n	801564a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015652:	6850      	ldr	r0, [r2, #4]
 8015654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015656:	6892      	ldr	r2, [r2, #8]
 8015658:	4611      	mov	r1, r2
 801565a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	f2c0 80aa 	blt.w	80157b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801566a:	695b      	ldr	r3, [r3, #20]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d004      	beq.n	801567a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015672:	3304      	adds	r3, #4
 8015674:	4618      	mov	r0, r3
 8015676:	f7fd ff63 	bl	8013540 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801567a:	463b      	mov	r3, r7
 801567c:	4618      	mov	r0, r3
 801567e:	f7ff ff6b 	bl	8015558 <prvSampleTimeNow>
 8015682:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2b09      	cmp	r3, #9
 8015688:	f200 8097 	bhi.w	80157ba <prvProcessReceivedCommands+0x19e>
 801568c:	a201      	add	r2, pc, #4	; (adr r2, 8015694 <prvProcessReceivedCommands+0x78>)
 801568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015692:	bf00      	nop
 8015694:	080156bd 	.word	0x080156bd
 8015698:	080156bd 	.word	0x080156bd
 801569c:	080156bd 	.word	0x080156bd
 80156a0:	08015731 	.word	0x08015731
 80156a4:	08015745 	.word	0x08015745
 80156a8:	0801578f 	.word	0x0801578f
 80156ac:	080156bd 	.word	0x080156bd
 80156b0:	080156bd 	.word	0x080156bd
 80156b4:	08015731 	.word	0x08015731
 80156b8:	08015745 	.word	0x08015745
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80156bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156c2:	f043 0301 	orr.w	r3, r3, #1
 80156c6:	b2da      	uxtb	r2, r3
 80156c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80156ce:	68ba      	ldr	r2, [r7, #8]
 80156d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d2:	699b      	ldr	r3, [r3, #24]
 80156d4:	18d1      	adds	r1, r2, r3
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156dc:	f7ff ff5c 	bl	8015598 <prvInsertTimerInActiveList>
 80156e0:	4603      	mov	r3, r0
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d069      	beq.n	80157ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80156e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e8:	6a1b      	ldr	r3, [r3, #32]
 80156ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80156ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156f4:	f003 0304 	and.w	r3, r3, #4
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d05e      	beq.n	80157ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80156fc:	68ba      	ldr	r2, [r7, #8]
 80156fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015700:	699b      	ldr	r3, [r3, #24]
 8015702:	441a      	add	r2, r3
 8015704:	2300      	movs	r3, #0
 8015706:	9300      	str	r3, [sp, #0]
 8015708:	2300      	movs	r3, #0
 801570a:	2100      	movs	r1, #0
 801570c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801570e:	f7ff fe05 	bl	801531c <xTimerGenericCommand>
 8015712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015714:	6a3b      	ldr	r3, [r7, #32]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d14f      	bne.n	80157ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801571e:	f383 8811 	msr	BASEPRI, r3
 8015722:	f3bf 8f6f 	isb	sy
 8015726:	f3bf 8f4f 	dsb	sy
 801572a:	61bb      	str	r3, [r7, #24]
}
 801572c:	bf00      	nop
 801572e:	e7fe      	b.n	801572e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015736:	f023 0301 	bic.w	r3, r3, #1
 801573a:	b2da      	uxtb	r2, r3
 801573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015742:	e03a      	b.n	80157ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801574a:	f043 0301 	orr.w	r3, r3, #1
 801574e:	b2da      	uxtb	r2, r3
 8015750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015756:	68ba      	ldr	r2, [r7, #8]
 8015758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801575a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801575e:	699b      	ldr	r3, [r3, #24]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d10a      	bne.n	801577a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015768:	f383 8811 	msr	BASEPRI, r3
 801576c:	f3bf 8f6f 	isb	sy
 8015770:	f3bf 8f4f 	dsb	sy
 8015774:	617b      	str	r3, [r7, #20]
}
 8015776:	bf00      	nop
 8015778:	e7fe      	b.n	8015778 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577c:	699a      	ldr	r2, [r3, #24]
 801577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015780:	18d1      	adds	r1, r2, r3
 8015782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015788:	f7ff ff06 	bl	8015598 <prvInsertTimerInActiveList>
					break;
 801578c:	e015      	b.n	80157ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015794:	f003 0302 	and.w	r3, r3, #2
 8015798:	2b00      	cmp	r3, #0
 801579a:	d103      	bne.n	80157a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801579c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801579e:	f000 fbff 	bl	8015fa0 <vPortFree>
 80157a2:	e00a      	b.n	80157ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157aa:	f023 0301 	bic.w	r3, r3, #1
 80157ae:	b2da      	uxtb	r2, r3
 80157b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80157b6:	e000      	b.n	80157ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80157b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80157ba:	4b08      	ldr	r3, [pc, #32]	; (80157dc <prvProcessReceivedCommands+0x1c0>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	1d39      	adds	r1, r7, #4
 80157c0:	2200      	movs	r2, #0
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7fe f9be 	bl	8013b44 <xQueueReceive>
 80157c8:	4603      	mov	r3, r0
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	f47f af2a 	bne.w	8015624 <prvProcessReceivedCommands+0x8>
	}
}
 80157d0:	bf00      	nop
 80157d2:	bf00      	nop
 80157d4:	3730      	adds	r7, #48	; 0x30
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	24001cf8 	.word	0x24001cf8

080157e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b088      	sub	sp, #32
 80157e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80157e6:	e048      	b.n	801587a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80157e8:	4b2d      	ldr	r3, [pc, #180]	; (80158a0 <prvSwitchTimerLists+0xc0>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	68db      	ldr	r3, [r3, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157f2:	4b2b      	ldr	r3, [pc, #172]	; (80158a0 <prvSwitchTimerLists+0xc0>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	68db      	ldr	r3, [r3, #12]
 80157f8:	68db      	ldr	r3, [r3, #12]
 80157fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	3304      	adds	r3, #4
 8015800:	4618      	mov	r0, r3
 8015802:	f7fd fe9d 	bl	8013540 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	6a1b      	ldr	r3, [r3, #32]
 801580a:	68f8      	ldr	r0, [r7, #12]
 801580c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015814:	f003 0304 	and.w	r3, r3, #4
 8015818:	2b00      	cmp	r3, #0
 801581a:	d02e      	beq.n	801587a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	699b      	ldr	r3, [r3, #24]
 8015820:	693a      	ldr	r2, [r7, #16]
 8015822:	4413      	add	r3, r2
 8015824:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015826:	68ba      	ldr	r2, [r7, #8]
 8015828:	693b      	ldr	r3, [r7, #16]
 801582a:	429a      	cmp	r2, r3
 801582c:	d90e      	bls.n	801584c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	68ba      	ldr	r2, [r7, #8]
 8015832:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	68fa      	ldr	r2, [r7, #12]
 8015838:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801583a:	4b19      	ldr	r3, [pc, #100]	; (80158a0 <prvSwitchTimerLists+0xc0>)
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	3304      	adds	r3, #4
 8015842:	4619      	mov	r1, r3
 8015844:	4610      	mov	r0, r2
 8015846:	f7fd fe42 	bl	80134ce <vListInsert>
 801584a:	e016      	b.n	801587a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801584c:	2300      	movs	r3, #0
 801584e:	9300      	str	r3, [sp, #0]
 8015850:	2300      	movs	r3, #0
 8015852:	693a      	ldr	r2, [r7, #16]
 8015854:	2100      	movs	r1, #0
 8015856:	68f8      	ldr	r0, [r7, #12]
 8015858:	f7ff fd60 	bl	801531c <xTimerGenericCommand>
 801585c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d10a      	bne.n	801587a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015868:	f383 8811 	msr	BASEPRI, r3
 801586c:	f3bf 8f6f 	isb	sy
 8015870:	f3bf 8f4f 	dsb	sy
 8015874:	603b      	str	r3, [r7, #0]
}
 8015876:	bf00      	nop
 8015878:	e7fe      	b.n	8015878 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801587a:	4b09      	ldr	r3, [pc, #36]	; (80158a0 <prvSwitchTimerLists+0xc0>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d1b1      	bne.n	80157e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015884:	4b06      	ldr	r3, [pc, #24]	; (80158a0 <prvSwitchTimerLists+0xc0>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801588a:	4b06      	ldr	r3, [pc, #24]	; (80158a4 <prvSwitchTimerLists+0xc4>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	4a04      	ldr	r2, [pc, #16]	; (80158a0 <prvSwitchTimerLists+0xc0>)
 8015890:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015892:	4a04      	ldr	r2, [pc, #16]	; (80158a4 <prvSwitchTimerLists+0xc4>)
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	6013      	str	r3, [r2, #0]
}
 8015898:	bf00      	nop
 801589a:	3718      	adds	r7, #24
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	24001cf0 	.word	0x24001cf0
 80158a4:	24001cf4 	.word	0x24001cf4

080158a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80158ae:	f000 f989 	bl	8015bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80158b2:	4b15      	ldr	r3, [pc, #84]	; (8015908 <prvCheckForValidListAndQueue+0x60>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d120      	bne.n	80158fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80158ba:	4814      	ldr	r0, [pc, #80]	; (801590c <prvCheckForValidListAndQueue+0x64>)
 80158bc:	f7fd fdb6 	bl	801342c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80158c0:	4813      	ldr	r0, [pc, #76]	; (8015910 <prvCheckForValidListAndQueue+0x68>)
 80158c2:	f7fd fdb3 	bl	801342c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80158c6:	4b13      	ldr	r3, [pc, #76]	; (8015914 <prvCheckForValidListAndQueue+0x6c>)
 80158c8:	4a10      	ldr	r2, [pc, #64]	; (801590c <prvCheckForValidListAndQueue+0x64>)
 80158ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80158cc:	4b12      	ldr	r3, [pc, #72]	; (8015918 <prvCheckForValidListAndQueue+0x70>)
 80158ce:	4a10      	ldr	r2, [pc, #64]	; (8015910 <prvCheckForValidListAndQueue+0x68>)
 80158d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80158d2:	2300      	movs	r3, #0
 80158d4:	9300      	str	r3, [sp, #0]
 80158d6:	4b11      	ldr	r3, [pc, #68]	; (801591c <prvCheckForValidListAndQueue+0x74>)
 80158d8:	4a11      	ldr	r2, [pc, #68]	; (8015920 <prvCheckForValidListAndQueue+0x78>)
 80158da:	2110      	movs	r1, #16
 80158dc:	200a      	movs	r0, #10
 80158de:	f7fd fec1 	bl	8013664 <xQueueGenericCreateStatic>
 80158e2:	4603      	mov	r3, r0
 80158e4:	4a08      	ldr	r2, [pc, #32]	; (8015908 <prvCheckForValidListAndQueue+0x60>)
 80158e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80158e8:	4b07      	ldr	r3, [pc, #28]	; (8015908 <prvCheckForValidListAndQueue+0x60>)
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d005      	beq.n	80158fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80158f0:	4b05      	ldr	r3, [pc, #20]	; (8015908 <prvCheckForValidListAndQueue+0x60>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	490b      	ldr	r1, [pc, #44]	; (8015924 <prvCheckForValidListAndQueue+0x7c>)
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fe fb94 	bl	8014024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80158fc:	f000 f992 	bl	8015c24 <vPortExitCritical>
}
 8015900:	bf00      	nop
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	24001cf8 	.word	0x24001cf8
 801590c:	24001cc8 	.word	0x24001cc8
 8015910:	24001cdc 	.word	0x24001cdc
 8015914:	24001cf0 	.word	0x24001cf0
 8015918:	24001cf4 	.word	0x24001cf4
 801591c:	24001da4 	.word	0x24001da4
 8015920:	24001d04 	.word	0x24001d04
 8015924:	08016efc 	.word	0x08016efc

08015928 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015928:	b580      	push	{r7, lr}
 801592a:	b08a      	sub	sp, #40	; 0x28
 801592c:	af00      	add	r7, sp, #0
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	60b9      	str	r1, [r7, #8]
 8015932:	607a      	str	r2, [r7, #4]
 8015934:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015936:	f06f 0301 	mvn.w	r3, #1
 801593a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015948:	4b06      	ldr	r3, [pc, #24]	; (8015964 <xTimerPendFunctionCallFromISR+0x3c>)
 801594a:	6818      	ldr	r0, [r3, #0]
 801594c:	f107 0114 	add.w	r1, r7, #20
 8015950:	2300      	movs	r3, #0
 8015952:	683a      	ldr	r2, [r7, #0]
 8015954:	f7fe f85a 	bl	8013a0c <xQueueGenericSendFromISR>
 8015958:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801595c:	4618      	mov	r0, r3
 801595e:	3728      	adds	r7, #40	; 0x28
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}
 8015964:	24001cf8 	.word	0x24001cf8

08015968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015968:	b480      	push	{r7}
 801596a:	b085      	sub	sp, #20
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	3b04      	subs	r3, #4
 8015978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	3b04      	subs	r3, #4
 8015986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	f023 0201 	bic.w	r2, r3, #1
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	3b04      	subs	r3, #4
 8015996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015998:	4a0c      	ldr	r2, [pc, #48]	; (80159cc <pxPortInitialiseStack+0x64>)
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	3b14      	subs	r3, #20
 80159a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80159a4:	687a      	ldr	r2, [r7, #4]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	3b04      	subs	r3, #4
 80159ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	f06f 0202 	mvn.w	r2, #2
 80159b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	3b20      	subs	r3, #32
 80159bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80159be:	68fb      	ldr	r3, [r7, #12]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3714      	adds	r7, #20
 80159c4:	46bd      	mov	sp, r7
 80159c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ca:	4770      	bx	lr
 80159cc:	080159d1 	.word	0x080159d1

080159d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80159d0:	b480      	push	{r7}
 80159d2:	b085      	sub	sp, #20
 80159d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80159d6:	2300      	movs	r3, #0
 80159d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80159da:	4b12      	ldr	r3, [pc, #72]	; (8015a24 <prvTaskExitError+0x54>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80159e2:	d00a      	beq.n	80159fa <prvTaskExitError+0x2a>
	__asm volatile
 80159e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159e8:	f383 8811 	msr	BASEPRI, r3
 80159ec:	f3bf 8f6f 	isb	sy
 80159f0:	f3bf 8f4f 	dsb	sy
 80159f4:	60fb      	str	r3, [r7, #12]
}
 80159f6:	bf00      	nop
 80159f8:	e7fe      	b.n	80159f8 <prvTaskExitError+0x28>
	__asm volatile
 80159fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159fe:	f383 8811 	msr	BASEPRI, r3
 8015a02:	f3bf 8f6f 	isb	sy
 8015a06:	f3bf 8f4f 	dsb	sy
 8015a0a:	60bb      	str	r3, [r7, #8]
}
 8015a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015a0e:	bf00      	nop
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d0fc      	beq.n	8015a10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015a16:	bf00      	nop
 8015a18:	bf00      	nop
 8015a1a:	3714      	adds	r7, #20
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr
 8015a24:	240000a0 	.word	0x240000a0
	...

08015a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015a30:	4b07      	ldr	r3, [pc, #28]	; (8015a50 <pxCurrentTCBConst2>)
 8015a32:	6819      	ldr	r1, [r3, #0]
 8015a34:	6808      	ldr	r0, [r1, #0]
 8015a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a3a:	f380 8809 	msr	PSP, r0
 8015a3e:	f3bf 8f6f 	isb	sy
 8015a42:	f04f 0000 	mov.w	r0, #0
 8015a46:	f380 8811 	msr	BASEPRI, r0
 8015a4a:	4770      	bx	lr
 8015a4c:	f3af 8000 	nop.w

08015a50 <pxCurrentTCBConst2>:
 8015a50:	240017c8 	.word	0x240017c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015a54:	bf00      	nop
 8015a56:	bf00      	nop

08015a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015a58:	4808      	ldr	r0, [pc, #32]	; (8015a7c <prvPortStartFirstTask+0x24>)
 8015a5a:	6800      	ldr	r0, [r0, #0]
 8015a5c:	6800      	ldr	r0, [r0, #0]
 8015a5e:	f380 8808 	msr	MSP, r0
 8015a62:	f04f 0000 	mov.w	r0, #0
 8015a66:	f380 8814 	msr	CONTROL, r0
 8015a6a:	b662      	cpsie	i
 8015a6c:	b661      	cpsie	f
 8015a6e:	f3bf 8f4f 	dsb	sy
 8015a72:	f3bf 8f6f 	isb	sy
 8015a76:	df00      	svc	0
 8015a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015a7a:	bf00      	nop
 8015a7c:	e000ed08 	.word	0xe000ed08

08015a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b086      	sub	sp, #24
 8015a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015a86:	4b46      	ldr	r3, [pc, #280]	; (8015ba0 <xPortStartScheduler+0x120>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	4a46      	ldr	r2, [pc, #280]	; (8015ba4 <xPortStartScheduler+0x124>)
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	d10a      	bne.n	8015aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8015a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a94:	f383 8811 	msr	BASEPRI, r3
 8015a98:	f3bf 8f6f 	isb	sy
 8015a9c:	f3bf 8f4f 	dsb	sy
 8015aa0:	613b      	str	r3, [r7, #16]
}
 8015aa2:	bf00      	nop
 8015aa4:	e7fe      	b.n	8015aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015aa6:	4b3e      	ldr	r3, [pc, #248]	; (8015ba0 <xPortStartScheduler+0x120>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	4a3f      	ldr	r2, [pc, #252]	; (8015ba8 <xPortStartScheduler+0x128>)
 8015aac:	4293      	cmp	r3, r2
 8015aae:	d10a      	bne.n	8015ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8015ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab4:	f383 8811 	msr	BASEPRI, r3
 8015ab8:	f3bf 8f6f 	isb	sy
 8015abc:	f3bf 8f4f 	dsb	sy
 8015ac0:	60fb      	str	r3, [r7, #12]
}
 8015ac2:	bf00      	nop
 8015ac4:	e7fe      	b.n	8015ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015ac6:	4b39      	ldr	r3, [pc, #228]	; (8015bac <xPortStartScheduler+0x12c>)
 8015ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	b2db      	uxtb	r3, r3
 8015ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	22ff      	movs	r2, #255	; 0xff
 8015ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015ae0:	78fb      	ldrb	r3, [r7, #3]
 8015ae2:	b2db      	uxtb	r3, r3
 8015ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015ae8:	b2da      	uxtb	r2, r3
 8015aea:	4b31      	ldr	r3, [pc, #196]	; (8015bb0 <xPortStartScheduler+0x130>)
 8015aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015aee:	4b31      	ldr	r3, [pc, #196]	; (8015bb4 <xPortStartScheduler+0x134>)
 8015af0:	2207      	movs	r2, #7
 8015af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015af4:	e009      	b.n	8015b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015af6:	4b2f      	ldr	r3, [pc, #188]	; (8015bb4 <xPortStartScheduler+0x134>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	3b01      	subs	r3, #1
 8015afc:	4a2d      	ldr	r2, [pc, #180]	; (8015bb4 <xPortStartScheduler+0x134>)
 8015afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015b00:	78fb      	ldrb	r3, [r7, #3]
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	005b      	lsls	r3, r3, #1
 8015b06:	b2db      	uxtb	r3, r3
 8015b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b0a:	78fb      	ldrb	r3, [r7, #3]
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b12:	2b80      	cmp	r3, #128	; 0x80
 8015b14:	d0ef      	beq.n	8015af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015b16:	4b27      	ldr	r3, [pc, #156]	; (8015bb4 <xPortStartScheduler+0x134>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f1c3 0307 	rsb	r3, r3, #7
 8015b1e:	2b04      	cmp	r3, #4
 8015b20:	d00a      	beq.n	8015b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8015b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b26:	f383 8811 	msr	BASEPRI, r3
 8015b2a:	f3bf 8f6f 	isb	sy
 8015b2e:	f3bf 8f4f 	dsb	sy
 8015b32:	60bb      	str	r3, [r7, #8]
}
 8015b34:	bf00      	nop
 8015b36:	e7fe      	b.n	8015b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015b38:	4b1e      	ldr	r3, [pc, #120]	; (8015bb4 <xPortStartScheduler+0x134>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	021b      	lsls	r3, r3, #8
 8015b3e:	4a1d      	ldr	r2, [pc, #116]	; (8015bb4 <xPortStartScheduler+0x134>)
 8015b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015b42:	4b1c      	ldr	r3, [pc, #112]	; (8015bb4 <xPortStartScheduler+0x134>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015b4a:	4a1a      	ldr	r2, [pc, #104]	; (8015bb4 <xPortStartScheduler+0x134>)
 8015b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	b2da      	uxtb	r2, r3
 8015b52:	697b      	ldr	r3, [r7, #20]
 8015b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015b56:	4b18      	ldr	r3, [pc, #96]	; (8015bb8 <xPortStartScheduler+0x138>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	4a17      	ldr	r2, [pc, #92]	; (8015bb8 <xPortStartScheduler+0x138>)
 8015b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015b62:	4b15      	ldr	r3, [pc, #84]	; (8015bb8 <xPortStartScheduler+0x138>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	4a14      	ldr	r2, [pc, #80]	; (8015bb8 <xPortStartScheduler+0x138>)
 8015b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015b6e:	f000 f8dd 	bl	8015d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015b72:	4b12      	ldr	r3, [pc, #72]	; (8015bbc <xPortStartScheduler+0x13c>)
 8015b74:	2200      	movs	r2, #0
 8015b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015b78:	f000 f8fc 	bl	8015d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015b7c:	4b10      	ldr	r3, [pc, #64]	; (8015bc0 <xPortStartScheduler+0x140>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	4a0f      	ldr	r2, [pc, #60]	; (8015bc0 <xPortStartScheduler+0x140>)
 8015b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015b88:	f7ff ff66 	bl	8015a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015b8c:	f7fe ff7c 	bl	8014a88 <vTaskSwitchContext>
	prvTaskExitError();
 8015b90:	f7ff ff1e 	bl	80159d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015b94:	2300      	movs	r3, #0
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3718      	adds	r7, #24
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	e000ed00 	.word	0xe000ed00
 8015ba4:	410fc271 	.word	0x410fc271
 8015ba8:	410fc270 	.word	0x410fc270
 8015bac:	e000e400 	.word	0xe000e400
 8015bb0:	24001df4 	.word	0x24001df4
 8015bb4:	24001df8 	.word	0x24001df8
 8015bb8:	e000ed20 	.word	0xe000ed20
 8015bbc:	240000a0 	.word	0x240000a0
 8015bc0:	e000ef34 	.word	0xe000ef34

08015bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b083      	sub	sp, #12
 8015bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8015bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bce:	f383 8811 	msr	BASEPRI, r3
 8015bd2:	f3bf 8f6f 	isb	sy
 8015bd6:	f3bf 8f4f 	dsb	sy
 8015bda:	607b      	str	r3, [r7, #4]
}
 8015bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015bde:	4b0f      	ldr	r3, [pc, #60]	; (8015c1c <vPortEnterCritical+0x58>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	3301      	adds	r3, #1
 8015be4:	4a0d      	ldr	r2, [pc, #52]	; (8015c1c <vPortEnterCritical+0x58>)
 8015be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015be8:	4b0c      	ldr	r3, [pc, #48]	; (8015c1c <vPortEnterCritical+0x58>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	2b01      	cmp	r3, #1
 8015bee:	d10f      	bne.n	8015c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015bf0:	4b0b      	ldr	r3, [pc, #44]	; (8015c20 <vPortEnterCritical+0x5c>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d00a      	beq.n	8015c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8015bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bfe:	f383 8811 	msr	BASEPRI, r3
 8015c02:	f3bf 8f6f 	isb	sy
 8015c06:	f3bf 8f4f 	dsb	sy
 8015c0a:	603b      	str	r3, [r7, #0]
}
 8015c0c:	bf00      	nop
 8015c0e:	e7fe      	b.n	8015c0e <vPortEnterCritical+0x4a>
	}
}
 8015c10:	bf00      	nop
 8015c12:	370c      	adds	r7, #12
 8015c14:	46bd      	mov	sp, r7
 8015c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1a:	4770      	bx	lr
 8015c1c:	240000a0 	.word	0x240000a0
 8015c20:	e000ed04 	.word	0xe000ed04

08015c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015c24:	b480      	push	{r7}
 8015c26:	b083      	sub	sp, #12
 8015c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015c2a:	4b12      	ldr	r3, [pc, #72]	; (8015c74 <vPortExitCritical+0x50>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d10a      	bne.n	8015c48 <vPortExitCritical+0x24>
	__asm volatile
 8015c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c36:	f383 8811 	msr	BASEPRI, r3
 8015c3a:	f3bf 8f6f 	isb	sy
 8015c3e:	f3bf 8f4f 	dsb	sy
 8015c42:	607b      	str	r3, [r7, #4]
}
 8015c44:	bf00      	nop
 8015c46:	e7fe      	b.n	8015c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015c48:	4b0a      	ldr	r3, [pc, #40]	; (8015c74 <vPortExitCritical+0x50>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	3b01      	subs	r3, #1
 8015c4e:	4a09      	ldr	r2, [pc, #36]	; (8015c74 <vPortExitCritical+0x50>)
 8015c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015c52:	4b08      	ldr	r3, [pc, #32]	; (8015c74 <vPortExitCritical+0x50>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d105      	bne.n	8015c66 <vPortExitCritical+0x42>
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	f383 8811 	msr	BASEPRI, r3
}
 8015c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015c66:	bf00      	nop
 8015c68:	370c      	adds	r7, #12
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c70:	4770      	bx	lr
 8015c72:	bf00      	nop
 8015c74:	240000a0 	.word	0x240000a0
	...

08015c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015c80:	f3ef 8009 	mrs	r0, PSP
 8015c84:	f3bf 8f6f 	isb	sy
 8015c88:	4b15      	ldr	r3, [pc, #84]	; (8015ce0 <pxCurrentTCBConst>)
 8015c8a:	681a      	ldr	r2, [r3, #0]
 8015c8c:	f01e 0f10 	tst.w	lr, #16
 8015c90:	bf08      	it	eq
 8015c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c9a:	6010      	str	r0, [r2, #0]
 8015c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015ca4:	f380 8811 	msr	BASEPRI, r0
 8015ca8:	f3bf 8f4f 	dsb	sy
 8015cac:	f3bf 8f6f 	isb	sy
 8015cb0:	f7fe feea 	bl	8014a88 <vTaskSwitchContext>
 8015cb4:	f04f 0000 	mov.w	r0, #0
 8015cb8:	f380 8811 	msr	BASEPRI, r0
 8015cbc:	bc09      	pop	{r0, r3}
 8015cbe:	6819      	ldr	r1, [r3, #0]
 8015cc0:	6808      	ldr	r0, [r1, #0]
 8015cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc6:	f01e 0f10 	tst.w	lr, #16
 8015cca:	bf08      	it	eq
 8015ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015cd0:	f380 8809 	msr	PSP, r0
 8015cd4:	f3bf 8f6f 	isb	sy
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop
 8015cdc:	f3af 8000 	nop.w

08015ce0 <pxCurrentTCBConst>:
 8015ce0:	240017c8 	.word	0x240017c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015ce4:	bf00      	nop
 8015ce6:	bf00      	nop

08015ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
	__asm volatile
 8015cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cf2:	f383 8811 	msr	BASEPRI, r3
 8015cf6:	f3bf 8f6f 	isb	sy
 8015cfa:	f3bf 8f4f 	dsb	sy
 8015cfe:	607b      	str	r3, [r7, #4]
}
 8015d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015d02:	f7fe fdff 	bl	8014904 <xTaskIncrementTick>
 8015d06:	4603      	mov	r3, r0
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d003      	beq.n	8015d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015d0c:	4b06      	ldr	r3, [pc, #24]	; (8015d28 <xPortSysTickHandler+0x40>)
 8015d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d12:	601a      	str	r2, [r3, #0]
 8015d14:	2300      	movs	r3, #0
 8015d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	f383 8811 	msr	BASEPRI, r3
}
 8015d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015d20:	bf00      	nop
 8015d22:	3708      	adds	r7, #8
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}
 8015d28:	e000ed04 	.word	0xe000ed04

08015d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015d2c:	b480      	push	{r7}
 8015d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015d30:	4b0b      	ldr	r3, [pc, #44]	; (8015d60 <vPortSetupTimerInterrupt+0x34>)
 8015d32:	2200      	movs	r2, #0
 8015d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015d36:	4b0b      	ldr	r3, [pc, #44]	; (8015d64 <vPortSetupTimerInterrupt+0x38>)
 8015d38:	2200      	movs	r2, #0
 8015d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015d3c:	4b0a      	ldr	r3, [pc, #40]	; (8015d68 <vPortSetupTimerInterrupt+0x3c>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	4a0a      	ldr	r2, [pc, #40]	; (8015d6c <vPortSetupTimerInterrupt+0x40>)
 8015d42:	fba2 2303 	umull	r2, r3, r2, r3
 8015d46:	099b      	lsrs	r3, r3, #6
 8015d48:	4a09      	ldr	r2, [pc, #36]	; (8015d70 <vPortSetupTimerInterrupt+0x44>)
 8015d4a:	3b01      	subs	r3, #1
 8015d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015d4e:	4b04      	ldr	r3, [pc, #16]	; (8015d60 <vPortSetupTimerInterrupt+0x34>)
 8015d50:	2207      	movs	r2, #7
 8015d52:	601a      	str	r2, [r3, #0]
}
 8015d54:	bf00      	nop
 8015d56:	46bd      	mov	sp, r7
 8015d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5c:	4770      	bx	lr
 8015d5e:	bf00      	nop
 8015d60:	e000e010 	.word	0xe000e010
 8015d64:	e000e018 	.word	0xe000e018
 8015d68:	24000090 	.word	0x24000090
 8015d6c:	10624dd3 	.word	0x10624dd3
 8015d70:	e000e014 	.word	0xe000e014

08015d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015d84 <vPortEnableVFP+0x10>
 8015d78:	6801      	ldr	r1, [r0, #0]
 8015d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015d7e:	6001      	str	r1, [r0, #0]
 8015d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015d82:	bf00      	nop
 8015d84:	e000ed88 	.word	0xe000ed88

08015d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015d88:	b480      	push	{r7}
 8015d8a:	b085      	sub	sp, #20
 8015d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015d8e:	f3ef 8305 	mrs	r3, IPSR
 8015d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	2b0f      	cmp	r3, #15
 8015d98:	d914      	bls.n	8015dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015d9a:	4a17      	ldr	r2, [pc, #92]	; (8015df8 <vPortValidateInterruptPriority+0x70>)
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	4413      	add	r3, r2
 8015da0:	781b      	ldrb	r3, [r3, #0]
 8015da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015da4:	4b15      	ldr	r3, [pc, #84]	; (8015dfc <vPortValidateInterruptPriority+0x74>)
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	7afa      	ldrb	r2, [r7, #11]
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d20a      	bcs.n	8015dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015db2:	f383 8811 	msr	BASEPRI, r3
 8015db6:	f3bf 8f6f 	isb	sy
 8015dba:	f3bf 8f4f 	dsb	sy
 8015dbe:	607b      	str	r3, [r7, #4]
}
 8015dc0:	bf00      	nop
 8015dc2:	e7fe      	b.n	8015dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015dc4:	4b0e      	ldr	r3, [pc, #56]	; (8015e00 <vPortValidateInterruptPriority+0x78>)
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015dcc:	4b0d      	ldr	r3, [pc, #52]	; (8015e04 <vPortValidateInterruptPriority+0x7c>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d90a      	bls.n	8015dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd8:	f383 8811 	msr	BASEPRI, r3
 8015ddc:	f3bf 8f6f 	isb	sy
 8015de0:	f3bf 8f4f 	dsb	sy
 8015de4:	603b      	str	r3, [r7, #0]
}
 8015de6:	bf00      	nop
 8015de8:	e7fe      	b.n	8015de8 <vPortValidateInterruptPriority+0x60>
	}
 8015dea:	bf00      	nop
 8015dec:	3714      	adds	r7, #20
 8015dee:	46bd      	mov	sp, r7
 8015df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df4:	4770      	bx	lr
 8015df6:	bf00      	nop
 8015df8:	e000e3f0 	.word	0xe000e3f0
 8015dfc:	24001df4 	.word	0x24001df4
 8015e00:	e000ed0c 	.word	0xe000ed0c
 8015e04:	24001df8 	.word	0x24001df8

08015e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b08a      	sub	sp, #40	; 0x28
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e10:	2300      	movs	r3, #0
 8015e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e14:	f7fe fcba 	bl	801478c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e18:	4b5b      	ldr	r3, [pc, #364]	; (8015f88 <pvPortMalloc+0x180>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d101      	bne.n	8015e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015e20:	f000 f920 	bl	8016064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015e24:	4b59      	ldr	r3, [pc, #356]	; (8015f8c <pvPortMalloc+0x184>)
 8015e26:	681a      	ldr	r2, [r3, #0]
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	4013      	ands	r3, r2
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	f040 8093 	bne.w	8015f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d01d      	beq.n	8015e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015e38:	2208      	movs	r2, #8
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	4413      	add	r3, r2
 8015e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f003 0307 	and.w	r3, r3, #7
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d014      	beq.n	8015e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f023 0307 	bic.w	r3, r3, #7
 8015e50:	3308      	adds	r3, #8
 8015e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f003 0307 	and.w	r3, r3, #7
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d00a      	beq.n	8015e74 <pvPortMalloc+0x6c>
	__asm volatile
 8015e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e62:	f383 8811 	msr	BASEPRI, r3
 8015e66:	f3bf 8f6f 	isb	sy
 8015e6a:	f3bf 8f4f 	dsb	sy
 8015e6e:	617b      	str	r3, [r7, #20]
}
 8015e70:	bf00      	nop
 8015e72:	e7fe      	b.n	8015e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d06e      	beq.n	8015f58 <pvPortMalloc+0x150>
 8015e7a:	4b45      	ldr	r3, [pc, #276]	; (8015f90 <pvPortMalloc+0x188>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	429a      	cmp	r2, r3
 8015e82:	d869      	bhi.n	8015f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015e84:	4b43      	ldr	r3, [pc, #268]	; (8015f94 <pvPortMalloc+0x18c>)
 8015e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015e88:	4b42      	ldr	r3, [pc, #264]	; (8015f94 <pvPortMalloc+0x18c>)
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e8e:	e004      	b.n	8015e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9c:	685b      	ldr	r3, [r3, #4]
 8015e9e:	687a      	ldr	r2, [r7, #4]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d903      	bls.n	8015eac <pvPortMalloc+0xa4>
 8015ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d1f1      	bne.n	8015e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015eac:	4b36      	ldr	r3, [pc, #216]	; (8015f88 <pvPortMalloc+0x180>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d050      	beq.n	8015f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015eb6:	6a3b      	ldr	r3, [r7, #32]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	2208      	movs	r2, #8
 8015ebc:	4413      	add	r3, r2
 8015ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec2:	681a      	ldr	r2, [r3, #0]
 8015ec4:	6a3b      	ldr	r3, [r7, #32]
 8015ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eca:	685a      	ldr	r2, [r3, #4]
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	1ad2      	subs	r2, r2, r3
 8015ed0:	2308      	movs	r3, #8
 8015ed2:	005b      	lsls	r3, r3, #1
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d91f      	bls.n	8015f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	4413      	add	r3, r2
 8015ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ee0:	69bb      	ldr	r3, [r7, #24]
 8015ee2:	f003 0307 	and.w	r3, r3, #7
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d00a      	beq.n	8015f00 <pvPortMalloc+0xf8>
	__asm volatile
 8015eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eee:	f383 8811 	msr	BASEPRI, r3
 8015ef2:	f3bf 8f6f 	isb	sy
 8015ef6:	f3bf 8f4f 	dsb	sy
 8015efa:	613b      	str	r3, [r7, #16]
}
 8015efc:	bf00      	nop
 8015efe:	e7fe      	b.n	8015efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f02:	685a      	ldr	r2, [r3, #4]
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	1ad2      	subs	r2, r2, r3
 8015f08:	69bb      	ldr	r3, [r7, #24]
 8015f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f12:	69b8      	ldr	r0, [r7, #24]
 8015f14:	f000 f908 	bl	8016128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f18:	4b1d      	ldr	r3, [pc, #116]	; (8015f90 <pvPortMalloc+0x188>)
 8015f1a:	681a      	ldr	r2, [r3, #0]
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	1ad3      	subs	r3, r2, r3
 8015f22:	4a1b      	ldr	r2, [pc, #108]	; (8015f90 <pvPortMalloc+0x188>)
 8015f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015f26:	4b1a      	ldr	r3, [pc, #104]	; (8015f90 <pvPortMalloc+0x188>)
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	4b1b      	ldr	r3, [pc, #108]	; (8015f98 <pvPortMalloc+0x190>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d203      	bcs.n	8015f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015f32:	4b17      	ldr	r3, [pc, #92]	; (8015f90 <pvPortMalloc+0x188>)
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	4a18      	ldr	r2, [pc, #96]	; (8015f98 <pvPortMalloc+0x190>)
 8015f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3c:	685a      	ldr	r2, [r3, #4]
 8015f3e:	4b13      	ldr	r3, [pc, #76]	; (8015f8c <pvPortMalloc+0x184>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	431a      	orrs	r2, r3
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015f4e:	4b13      	ldr	r3, [pc, #76]	; (8015f9c <pvPortMalloc+0x194>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	3301      	adds	r3, #1
 8015f54:	4a11      	ldr	r2, [pc, #68]	; (8015f9c <pvPortMalloc+0x194>)
 8015f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015f58:	f7fe fc26 	bl	80147a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f5c:	69fb      	ldr	r3, [r7, #28]
 8015f5e:	f003 0307 	and.w	r3, r3, #7
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d00a      	beq.n	8015f7c <pvPortMalloc+0x174>
	__asm volatile
 8015f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f6a:	f383 8811 	msr	BASEPRI, r3
 8015f6e:	f3bf 8f6f 	isb	sy
 8015f72:	f3bf 8f4f 	dsb	sy
 8015f76:	60fb      	str	r3, [r7, #12]
}
 8015f78:	bf00      	nop
 8015f7a:	e7fe      	b.n	8015f7a <pvPortMalloc+0x172>
	return pvReturn;
 8015f7c:	69fb      	ldr	r3, [r7, #28]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3728      	adds	r7, #40	; 0x28
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}
 8015f86:	bf00      	nop
 8015f88:	24005a04 	.word	0x24005a04
 8015f8c:	24005a18 	.word	0x24005a18
 8015f90:	24005a08 	.word	0x24005a08
 8015f94:	240059fc 	.word	0x240059fc
 8015f98:	24005a0c 	.word	0x24005a0c
 8015f9c:	24005a10 	.word	0x24005a10

08015fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b086      	sub	sp, #24
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d04d      	beq.n	801604e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015fb2:	2308      	movs	r3, #8
 8015fb4:	425b      	negs	r3, r3
 8015fb6:	697a      	ldr	r2, [r7, #20]
 8015fb8:	4413      	add	r3, r2
 8015fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015fc0:	693b      	ldr	r3, [r7, #16]
 8015fc2:	685a      	ldr	r2, [r3, #4]
 8015fc4:	4b24      	ldr	r3, [pc, #144]	; (8016058 <vPortFree+0xb8>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	4013      	ands	r3, r2
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d10a      	bne.n	8015fe4 <vPortFree+0x44>
	__asm volatile
 8015fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd2:	f383 8811 	msr	BASEPRI, r3
 8015fd6:	f3bf 8f6f 	isb	sy
 8015fda:	f3bf 8f4f 	dsb	sy
 8015fde:	60fb      	str	r3, [r7, #12]
}
 8015fe0:	bf00      	nop
 8015fe2:	e7fe      	b.n	8015fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d00a      	beq.n	8016002 <vPortFree+0x62>
	__asm volatile
 8015fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff0:	f383 8811 	msr	BASEPRI, r3
 8015ff4:	f3bf 8f6f 	isb	sy
 8015ff8:	f3bf 8f4f 	dsb	sy
 8015ffc:	60bb      	str	r3, [r7, #8]
}
 8015ffe:	bf00      	nop
 8016000:	e7fe      	b.n	8016000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	685a      	ldr	r2, [r3, #4]
 8016006:	4b14      	ldr	r3, [pc, #80]	; (8016058 <vPortFree+0xb8>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	4013      	ands	r3, r2
 801600c:	2b00      	cmp	r3, #0
 801600e:	d01e      	beq.n	801604e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d11a      	bne.n	801604e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	685a      	ldr	r2, [r3, #4]
 801601c:	4b0e      	ldr	r3, [pc, #56]	; (8016058 <vPortFree+0xb8>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	43db      	mvns	r3, r3
 8016022:	401a      	ands	r2, r3
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016028:	f7fe fbb0 	bl	801478c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	685a      	ldr	r2, [r3, #4]
 8016030:	4b0a      	ldr	r3, [pc, #40]	; (801605c <vPortFree+0xbc>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	4413      	add	r3, r2
 8016036:	4a09      	ldr	r2, [pc, #36]	; (801605c <vPortFree+0xbc>)
 8016038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801603a:	6938      	ldr	r0, [r7, #16]
 801603c:	f000 f874 	bl	8016128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016040:	4b07      	ldr	r3, [pc, #28]	; (8016060 <vPortFree+0xc0>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	3301      	adds	r3, #1
 8016046:	4a06      	ldr	r2, [pc, #24]	; (8016060 <vPortFree+0xc0>)
 8016048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801604a:	f7fe fbad 	bl	80147a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801604e:	bf00      	nop
 8016050:	3718      	adds	r7, #24
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}
 8016056:	bf00      	nop
 8016058:	24005a18 	.word	0x24005a18
 801605c:	24005a08 	.word	0x24005a08
 8016060:	24005a14 	.word	0x24005a14

08016064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016064:	b480      	push	{r7}
 8016066:	b085      	sub	sp, #20
 8016068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801606a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801606e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016070:	4b27      	ldr	r3, [pc, #156]	; (8016110 <prvHeapInit+0xac>)
 8016072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f003 0307 	and.w	r3, r3, #7
 801607a:	2b00      	cmp	r3, #0
 801607c:	d00c      	beq.n	8016098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	3307      	adds	r3, #7
 8016082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	f023 0307 	bic.w	r3, r3, #7
 801608a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801608c:	68ba      	ldr	r2, [r7, #8]
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	1ad3      	subs	r3, r2, r3
 8016092:	4a1f      	ldr	r2, [pc, #124]	; (8016110 <prvHeapInit+0xac>)
 8016094:	4413      	add	r3, r2
 8016096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801609c:	4a1d      	ldr	r2, [pc, #116]	; (8016114 <prvHeapInit+0xb0>)
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80160a2:	4b1c      	ldr	r3, [pc, #112]	; (8016114 <prvHeapInit+0xb0>)
 80160a4:	2200      	movs	r2, #0
 80160a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	68ba      	ldr	r2, [r7, #8]
 80160ac:	4413      	add	r3, r2
 80160ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80160b0:	2208      	movs	r2, #8
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	1a9b      	subs	r3, r3, r2
 80160b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	f023 0307 	bic.w	r3, r3, #7
 80160be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	4a15      	ldr	r2, [pc, #84]	; (8016118 <prvHeapInit+0xb4>)
 80160c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80160c6:	4b14      	ldr	r3, [pc, #80]	; (8016118 <prvHeapInit+0xb4>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	2200      	movs	r2, #0
 80160cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80160ce:	4b12      	ldr	r3, [pc, #72]	; (8016118 <prvHeapInit+0xb4>)
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	2200      	movs	r2, #0
 80160d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	68fa      	ldr	r2, [r7, #12]
 80160de:	1ad2      	subs	r2, r2, r3
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80160e4:	4b0c      	ldr	r3, [pc, #48]	; (8016118 <prvHeapInit+0xb4>)
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	4a0a      	ldr	r2, [pc, #40]	; (801611c <prvHeapInit+0xb8>)
 80160f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80160f4:	683b      	ldr	r3, [r7, #0]
 80160f6:	685b      	ldr	r3, [r3, #4]
 80160f8:	4a09      	ldr	r2, [pc, #36]	; (8016120 <prvHeapInit+0xbc>)
 80160fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80160fc:	4b09      	ldr	r3, [pc, #36]	; (8016124 <prvHeapInit+0xc0>)
 80160fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016102:	601a      	str	r2, [r3, #0]
}
 8016104:	bf00      	nop
 8016106:	3714      	adds	r7, #20
 8016108:	46bd      	mov	sp, r7
 801610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610e:	4770      	bx	lr
 8016110:	24001dfc 	.word	0x24001dfc
 8016114:	240059fc 	.word	0x240059fc
 8016118:	24005a04 	.word	0x24005a04
 801611c:	24005a0c 	.word	0x24005a0c
 8016120:	24005a08 	.word	0x24005a08
 8016124:	24005a18 	.word	0x24005a18

08016128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016128:	b480      	push	{r7}
 801612a:	b085      	sub	sp, #20
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016130:	4b28      	ldr	r3, [pc, #160]	; (80161d4 <prvInsertBlockIntoFreeList+0xac>)
 8016132:	60fb      	str	r3, [r7, #12]
 8016134:	e002      	b.n	801613c <prvInsertBlockIntoFreeList+0x14>
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	60fb      	str	r3, [r7, #12]
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	687a      	ldr	r2, [r7, #4]
 8016142:	429a      	cmp	r2, r3
 8016144:	d8f7      	bhi.n	8016136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	685b      	ldr	r3, [r3, #4]
 801614e:	68ba      	ldr	r2, [r7, #8]
 8016150:	4413      	add	r3, r2
 8016152:	687a      	ldr	r2, [r7, #4]
 8016154:	429a      	cmp	r2, r3
 8016156:	d108      	bne.n	801616a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	685a      	ldr	r2, [r3, #4]
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	441a      	add	r2, r3
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	685b      	ldr	r3, [r3, #4]
 8016172:	68ba      	ldr	r2, [r7, #8]
 8016174:	441a      	add	r2, r3
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	429a      	cmp	r2, r3
 801617c:	d118      	bne.n	80161b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681a      	ldr	r2, [r3, #0]
 8016182:	4b15      	ldr	r3, [pc, #84]	; (80161d8 <prvInsertBlockIntoFreeList+0xb0>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	429a      	cmp	r2, r3
 8016188:	d00d      	beq.n	80161a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	685a      	ldr	r2, [r3, #4]
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	441a      	add	r2, r3
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	681a      	ldr	r2, [r3, #0]
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	601a      	str	r2, [r3, #0]
 80161a4:	e008      	b.n	80161b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80161a6:	4b0c      	ldr	r3, [pc, #48]	; (80161d8 <prvInsertBlockIntoFreeList+0xb0>)
 80161a8:	681a      	ldr	r2, [r3, #0]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	601a      	str	r2, [r3, #0]
 80161ae:	e003      	b.n	80161b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	681a      	ldr	r2, [r3, #0]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80161b8:	68fa      	ldr	r2, [r7, #12]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	429a      	cmp	r2, r3
 80161be:	d002      	beq.n	80161c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	687a      	ldr	r2, [r7, #4]
 80161c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161c6:	bf00      	nop
 80161c8:	3714      	adds	r7, #20
 80161ca:	46bd      	mov	sp, r7
 80161cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d0:	4770      	bx	lr
 80161d2:	bf00      	nop
 80161d4:	240059fc 	.word	0x240059fc
 80161d8:	24005a04 	.word	0x24005a04

080161dc <__errno>:
 80161dc:	4b01      	ldr	r3, [pc, #4]	; (80161e4 <__errno+0x8>)
 80161de:	6818      	ldr	r0, [r3, #0]
 80161e0:	4770      	bx	lr
 80161e2:	bf00      	nop
 80161e4:	240000a4 	.word	0x240000a4

080161e8 <__libc_init_array>:
 80161e8:	b570      	push	{r4, r5, r6, lr}
 80161ea:	4d0d      	ldr	r5, [pc, #52]	; (8016220 <__libc_init_array+0x38>)
 80161ec:	4c0d      	ldr	r4, [pc, #52]	; (8016224 <__libc_init_array+0x3c>)
 80161ee:	1b64      	subs	r4, r4, r5
 80161f0:	10a4      	asrs	r4, r4, #2
 80161f2:	2600      	movs	r6, #0
 80161f4:	42a6      	cmp	r6, r4
 80161f6:	d109      	bne.n	801620c <__libc_init_array+0x24>
 80161f8:	4d0b      	ldr	r5, [pc, #44]	; (8016228 <__libc_init_array+0x40>)
 80161fa:	4c0c      	ldr	r4, [pc, #48]	; (801622c <__libc_init_array+0x44>)
 80161fc:	f000 fd3c 	bl	8016c78 <_init>
 8016200:	1b64      	subs	r4, r4, r5
 8016202:	10a4      	asrs	r4, r4, #2
 8016204:	2600      	movs	r6, #0
 8016206:	42a6      	cmp	r6, r4
 8016208:	d105      	bne.n	8016216 <__libc_init_array+0x2e>
 801620a:	bd70      	pop	{r4, r5, r6, pc}
 801620c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016210:	4798      	blx	r3
 8016212:	3601      	adds	r6, #1
 8016214:	e7ee      	b.n	80161f4 <__libc_init_array+0xc>
 8016216:	f855 3b04 	ldr.w	r3, [r5], #4
 801621a:	4798      	blx	r3
 801621c:	3601      	adds	r6, #1
 801621e:	e7f2      	b.n	8016206 <__libc_init_array+0x1e>
 8016220:	080170ac 	.word	0x080170ac
 8016224:	080170ac 	.word	0x080170ac
 8016228:	080170ac 	.word	0x080170ac
 801622c:	080170b0 	.word	0x080170b0

08016230 <malloc>:
 8016230:	4b02      	ldr	r3, [pc, #8]	; (801623c <malloc+0xc>)
 8016232:	4601      	mov	r1, r0
 8016234:	6818      	ldr	r0, [r3, #0]
 8016236:	f000 b88d 	b.w	8016354 <_malloc_r>
 801623a:	bf00      	nop
 801623c:	240000a4 	.word	0x240000a4

08016240 <free>:
 8016240:	4b02      	ldr	r3, [pc, #8]	; (801624c <free+0xc>)
 8016242:	4601      	mov	r1, r0
 8016244:	6818      	ldr	r0, [r3, #0]
 8016246:	f000 b819 	b.w	801627c <_free_r>
 801624a:	bf00      	nop
 801624c:	240000a4 	.word	0x240000a4

08016250 <memcpy>:
 8016250:	440a      	add	r2, r1
 8016252:	4291      	cmp	r1, r2
 8016254:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016258:	d100      	bne.n	801625c <memcpy+0xc>
 801625a:	4770      	bx	lr
 801625c:	b510      	push	{r4, lr}
 801625e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016266:	4291      	cmp	r1, r2
 8016268:	d1f9      	bne.n	801625e <memcpy+0xe>
 801626a:	bd10      	pop	{r4, pc}

0801626c <memset>:
 801626c:	4402      	add	r2, r0
 801626e:	4603      	mov	r3, r0
 8016270:	4293      	cmp	r3, r2
 8016272:	d100      	bne.n	8016276 <memset+0xa>
 8016274:	4770      	bx	lr
 8016276:	f803 1b01 	strb.w	r1, [r3], #1
 801627a:	e7f9      	b.n	8016270 <memset+0x4>

0801627c <_free_r>:
 801627c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801627e:	2900      	cmp	r1, #0
 8016280:	d044      	beq.n	801630c <_free_r+0x90>
 8016282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016286:	9001      	str	r0, [sp, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	f1a1 0404 	sub.w	r4, r1, #4
 801628e:	bfb8      	it	lt
 8016290:	18e4      	addlt	r4, r4, r3
 8016292:	f000 fc39 	bl	8016b08 <__malloc_lock>
 8016296:	4a1e      	ldr	r2, [pc, #120]	; (8016310 <_free_r+0x94>)
 8016298:	9801      	ldr	r0, [sp, #4]
 801629a:	6813      	ldr	r3, [r2, #0]
 801629c:	b933      	cbnz	r3, 80162ac <_free_r+0x30>
 801629e:	6063      	str	r3, [r4, #4]
 80162a0:	6014      	str	r4, [r2, #0]
 80162a2:	b003      	add	sp, #12
 80162a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162a8:	f000 bc34 	b.w	8016b14 <__malloc_unlock>
 80162ac:	42a3      	cmp	r3, r4
 80162ae:	d908      	bls.n	80162c2 <_free_r+0x46>
 80162b0:	6825      	ldr	r5, [r4, #0]
 80162b2:	1961      	adds	r1, r4, r5
 80162b4:	428b      	cmp	r3, r1
 80162b6:	bf01      	itttt	eq
 80162b8:	6819      	ldreq	r1, [r3, #0]
 80162ba:	685b      	ldreq	r3, [r3, #4]
 80162bc:	1949      	addeq	r1, r1, r5
 80162be:	6021      	streq	r1, [r4, #0]
 80162c0:	e7ed      	b.n	801629e <_free_r+0x22>
 80162c2:	461a      	mov	r2, r3
 80162c4:	685b      	ldr	r3, [r3, #4]
 80162c6:	b10b      	cbz	r3, 80162cc <_free_r+0x50>
 80162c8:	42a3      	cmp	r3, r4
 80162ca:	d9fa      	bls.n	80162c2 <_free_r+0x46>
 80162cc:	6811      	ldr	r1, [r2, #0]
 80162ce:	1855      	adds	r5, r2, r1
 80162d0:	42a5      	cmp	r5, r4
 80162d2:	d10b      	bne.n	80162ec <_free_r+0x70>
 80162d4:	6824      	ldr	r4, [r4, #0]
 80162d6:	4421      	add	r1, r4
 80162d8:	1854      	adds	r4, r2, r1
 80162da:	42a3      	cmp	r3, r4
 80162dc:	6011      	str	r1, [r2, #0]
 80162de:	d1e0      	bne.n	80162a2 <_free_r+0x26>
 80162e0:	681c      	ldr	r4, [r3, #0]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	6053      	str	r3, [r2, #4]
 80162e6:	4421      	add	r1, r4
 80162e8:	6011      	str	r1, [r2, #0]
 80162ea:	e7da      	b.n	80162a2 <_free_r+0x26>
 80162ec:	d902      	bls.n	80162f4 <_free_r+0x78>
 80162ee:	230c      	movs	r3, #12
 80162f0:	6003      	str	r3, [r0, #0]
 80162f2:	e7d6      	b.n	80162a2 <_free_r+0x26>
 80162f4:	6825      	ldr	r5, [r4, #0]
 80162f6:	1961      	adds	r1, r4, r5
 80162f8:	428b      	cmp	r3, r1
 80162fa:	bf04      	itt	eq
 80162fc:	6819      	ldreq	r1, [r3, #0]
 80162fe:	685b      	ldreq	r3, [r3, #4]
 8016300:	6063      	str	r3, [r4, #4]
 8016302:	bf04      	itt	eq
 8016304:	1949      	addeq	r1, r1, r5
 8016306:	6021      	streq	r1, [r4, #0]
 8016308:	6054      	str	r4, [r2, #4]
 801630a:	e7ca      	b.n	80162a2 <_free_r+0x26>
 801630c:	b003      	add	sp, #12
 801630e:	bd30      	pop	{r4, r5, pc}
 8016310:	24005a1c 	.word	0x24005a1c

08016314 <sbrk_aligned>:
 8016314:	b570      	push	{r4, r5, r6, lr}
 8016316:	4e0e      	ldr	r6, [pc, #56]	; (8016350 <sbrk_aligned+0x3c>)
 8016318:	460c      	mov	r4, r1
 801631a:	6831      	ldr	r1, [r6, #0]
 801631c:	4605      	mov	r5, r0
 801631e:	b911      	cbnz	r1, 8016326 <sbrk_aligned+0x12>
 8016320:	f000 f902 	bl	8016528 <_sbrk_r>
 8016324:	6030      	str	r0, [r6, #0]
 8016326:	4621      	mov	r1, r4
 8016328:	4628      	mov	r0, r5
 801632a:	f000 f8fd 	bl	8016528 <_sbrk_r>
 801632e:	1c43      	adds	r3, r0, #1
 8016330:	d00a      	beq.n	8016348 <sbrk_aligned+0x34>
 8016332:	1cc4      	adds	r4, r0, #3
 8016334:	f024 0403 	bic.w	r4, r4, #3
 8016338:	42a0      	cmp	r0, r4
 801633a:	d007      	beq.n	801634c <sbrk_aligned+0x38>
 801633c:	1a21      	subs	r1, r4, r0
 801633e:	4628      	mov	r0, r5
 8016340:	f000 f8f2 	bl	8016528 <_sbrk_r>
 8016344:	3001      	adds	r0, #1
 8016346:	d101      	bne.n	801634c <sbrk_aligned+0x38>
 8016348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801634c:	4620      	mov	r0, r4
 801634e:	bd70      	pop	{r4, r5, r6, pc}
 8016350:	24005a20 	.word	0x24005a20

08016354 <_malloc_r>:
 8016354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016358:	1ccd      	adds	r5, r1, #3
 801635a:	f025 0503 	bic.w	r5, r5, #3
 801635e:	3508      	adds	r5, #8
 8016360:	2d0c      	cmp	r5, #12
 8016362:	bf38      	it	cc
 8016364:	250c      	movcc	r5, #12
 8016366:	2d00      	cmp	r5, #0
 8016368:	4607      	mov	r7, r0
 801636a:	db01      	blt.n	8016370 <_malloc_r+0x1c>
 801636c:	42a9      	cmp	r1, r5
 801636e:	d905      	bls.n	801637c <_malloc_r+0x28>
 8016370:	230c      	movs	r3, #12
 8016372:	603b      	str	r3, [r7, #0]
 8016374:	2600      	movs	r6, #0
 8016376:	4630      	mov	r0, r6
 8016378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801637c:	4e2e      	ldr	r6, [pc, #184]	; (8016438 <_malloc_r+0xe4>)
 801637e:	f000 fbc3 	bl	8016b08 <__malloc_lock>
 8016382:	6833      	ldr	r3, [r6, #0]
 8016384:	461c      	mov	r4, r3
 8016386:	bb34      	cbnz	r4, 80163d6 <_malloc_r+0x82>
 8016388:	4629      	mov	r1, r5
 801638a:	4638      	mov	r0, r7
 801638c:	f7ff ffc2 	bl	8016314 <sbrk_aligned>
 8016390:	1c43      	adds	r3, r0, #1
 8016392:	4604      	mov	r4, r0
 8016394:	d14d      	bne.n	8016432 <_malloc_r+0xde>
 8016396:	6834      	ldr	r4, [r6, #0]
 8016398:	4626      	mov	r6, r4
 801639a:	2e00      	cmp	r6, #0
 801639c:	d140      	bne.n	8016420 <_malloc_r+0xcc>
 801639e:	6823      	ldr	r3, [r4, #0]
 80163a0:	4631      	mov	r1, r6
 80163a2:	4638      	mov	r0, r7
 80163a4:	eb04 0803 	add.w	r8, r4, r3
 80163a8:	f000 f8be 	bl	8016528 <_sbrk_r>
 80163ac:	4580      	cmp	r8, r0
 80163ae:	d13a      	bne.n	8016426 <_malloc_r+0xd2>
 80163b0:	6821      	ldr	r1, [r4, #0]
 80163b2:	3503      	adds	r5, #3
 80163b4:	1a6d      	subs	r5, r5, r1
 80163b6:	f025 0503 	bic.w	r5, r5, #3
 80163ba:	3508      	adds	r5, #8
 80163bc:	2d0c      	cmp	r5, #12
 80163be:	bf38      	it	cc
 80163c0:	250c      	movcc	r5, #12
 80163c2:	4629      	mov	r1, r5
 80163c4:	4638      	mov	r0, r7
 80163c6:	f7ff ffa5 	bl	8016314 <sbrk_aligned>
 80163ca:	3001      	adds	r0, #1
 80163cc:	d02b      	beq.n	8016426 <_malloc_r+0xd2>
 80163ce:	6823      	ldr	r3, [r4, #0]
 80163d0:	442b      	add	r3, r5
 80163d2:	6023      	str	r3, [r4, #0]
 80163d4:	e00e      	b.n	80163f4 <_malloc_r+0xa0>
 80163d6:	6822      	ldr	r2, [r4, #0]
 80163d8:	1b52      	subs	r2, r2, r5
 80163da:	d41e      	bmi.n	801641a <_malloc_r+0xc6>
 80163dc:	2a0b      	cmp	r2, #11
 80163de:	d916      	bls.n	801640e <_malloc_r+0xba>
 80163e0:	1961      	adds	r1, r4, r5
 80163e2:	42a3      	cmp	r3, r4
 80163e4:	6025      	str	r5, [r4, #0]
 80163e6:	bf18      	it	ne
 80163e8:	6059      	strne	r1, [r3, #4]
 80163ea:	6863      	ldr	r3, [r4, #4]
 80163ec:	bf08      	it	eq
 80163ee:	6031      	streq	r1, [r6, #0]
 80163f0:	5162      	str	r2, [r4, r5]
 80163f2:	604b      	str	r3, [r1, #4]
 80163f4:	4638      	mov	r0, r7
 80163f6:	f104 060b 	add.w	r6, r4, #11
 80163fa:	f000 fb8b 	bl	8016b14 <__malloc_unlock>
 80163fe:	f026 0607 	bic.w	r6, r6, #7
 8016402:	1d23      	adds	r3, r4, #4
 8016404:	1af2      	subs	r2, r6, r3
 8016406:	d0b6      	beq.n	8016376 <_malloc_r+0x22>
 8016408:	1b9b      	subs	r3, r3, r6
 801640a:	50a3      	str	r3, [r4, r2]
 801640c:	e7b3      	b.n	8016376 <_malloc_r+0x22>
 801640e:	6862      	ldr	r2, [r4, #4]
 8016410:	42a3      	cmp	r3, r4
 8016412:	bf0c      	ite	eq
 8016414:	6032      	streq	r2, [r6, #0]
 8016416:	605a      	strne	r2, [r3, #4]
 8016418:	e7ec      	b.n	80163f4 <_malloc_r+0xa0>
 801641a:	4623      	mov	r3, r4
 801641c:	6864      	ldr	r4, [r4, #4]
 801641e:	e7b2      	b.n	8016386 <_malloc_r+0x32>
 8016420:	4634      	mov	r4, r6
 8016422:	6876      	ldr	r6, [r6, #4]
 8016424:	e7b9      	b.n	801639a <_malloc_r+0x46>
 8016426:	230c      	movs	r3, #12
 8016428:	603b      	str	r3, [r7, #0]
 801642a:	4638      	mov	r0, r7
 801642c:	f000 fb72 	bl	8016b14 <__malloc_unlock>
 8016430:	e7a1      	b.n	8016376 <_malloc_r+0x22>
 8016432:	6025      	str	r5, [r4, #0]
 8016434:	e7de      	b.n	80163f4 <_malloc_r+0xa0>
 8016436:	bf00      	nop
 8016438:	24005a1c 	.word	0x24005a1c

0801643c <_puts_r>:
 801643c:	b570      	push	{r4, r5, r6, lr}
 801643e:	460e      	mov	r6, r1
 8016440:	4605      	mov	r5, r0
 8016442:	b118      	cbz	r0, 801644c <_puts_r+0x10>
 8016444:	6983      	ldr	r3, [r0, #24]
 8016446:	b90b      	cbnz	r3, 801644c <_puts_r+0x10>
 8016448:	f000 fa58 	bl	80168fc <__sinit>
 801644c:	69ab      	ldr	r3, [r5, #24]
 801644e:	68ac      	ldr	r4, [r5, #8]
 8016450:	b913      	cbnz	r3, 8016458 <_puts_r+0x1c>
 8016452:	4628      	mov	r0, r5
 8016454:	f000 fa52 	bl	80168fc <__sinit>
 8016458:	4b2c      	ldr	r3, [pc, #176]	; (801650c <_puts_r+0xd0>)
 801645a:	429c      	cmp	r4, r3
 801645c:	d120      	bne.n	80164a0 <_puts_r+0x64>
 801645e:	686c      	ldr	r4, [r5, #4]
 8016460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016462:	07db      	lsls	r3, r3, #31
 8016464:	d405      	bmi.n	8016472 <_puts_r+0x36>
 8016466:	89a3      	ldrh	r3, [r4, #12]
 8016468:	0598      	lsls	r0, r3, #22
 801646a:	d402      	bmi.n	8016472 <_puts_r+0x36>
 801646c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801646e:	f000 fae3 	bl	8016a38 <__retarget_lock_acquire_recursive>
 8016472:	89a3      	ldrh	r3, [r4, #12]
 8016474:	0719      	lsls	r1, r3, #28
 8016476:	d51d      	bpl.n	80164b4 <_puts_r+0x78>
 8016478:	6923      	ldr	r3, [r4, #16]
 801647a:	b1db      	cbz	r3, 80164b4 <_puts_r+0x78>
 801647c:	3e01      	subs	r6, #1
 801647e:	68a3      	ldr	r3, [r4, #8]
 8016480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016484:	3b01      	subs	r3, #1
 8016486:	60a3      	str	r3, [r4, #8]
 8016488:	bb39      	cbnz	r1, 80164da <_puts_r+0x9e>
 801648a:	2b00      	cmp	r3, #0
 801648c:	da38      	bge.n	8016500 <_puts_r+0xc4>
 801648e:	4622      	mov	r2, r4
 8016490:	210a      	movs	r1, #10
 8016492:	4628      	mov	r0, r5
 8016494:	f000 f858 	bl	8016548 <__swbuf_r>
 8016498:	3001      	adds	r0, #1
 801649a:	d011      	beq.n	80164c0 <_puts_r+0x84>
 801649c:	250a      	movs	r5, #10
 801649e:	e011      	b.n	80164c4 <_puts_r+0x88>
 80164a0:	4b1b      	ldr	r3, [pc, #108]	; (8016510 <_puts_r+0xd4>)
 80164a2:	429c      	cmp	r4, r3
 80164a4:	d101      	bne.n	80164aa <_puts_r+0x6e>
 80164a6:	68ac      	ldr	r4, [r5, #8]
 80164a8:	e7da      	b.n	8016460 <_puts_r+0x24>
 80164aa:	4b1a      	ldr	r3, [pc, #104]	; (8016514 <_puts_r+0xd8>)
 80164ac:	429c      	cmp	r4, r3
 80164ae:	bf08      	it	eq
 80164b0:	68ec      	ldreq	r4, [r5, #12]
 80164b2:	e7d5      	b.n	8016460 <_puts_r+0x24>
 80164b4:	4621      	mov	r1, r4
 80164b6:	4628      	mov	r0, r5
 80164b8:	f000 f898 	bl	80165ec <__swsetup_r>
 80164bc:	2800      	cmp	r0, #0
 80164be:	d0dd      	beq.n	801647c <_puts_r+0x40>
 80164c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80164c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80164c6:	07da      	lsls	r2, r3, #31
 80164c8:	d405      	bmi.n	80164d6 <_puts_r+0x9a>
 80164ca:	89a3      	ldrh	r3, [r4, #12]
 80164cc:	059b      	lsls	r3, r3, #22
 80164ce:	d402      	bmi.n	80164d6 <_puts_r+0x9a>
 80164d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80164d2:	f000 fab2 	bl	8016a3a <__retarget_lock_release_recursive>
 80164d6:	4628      	mov	r0, r5
 80164d8:	bd70      	pop	{r4, r5, r6, pc}
 80164da:	2b00      	cmp	r3, #0
 80164dc:	da04      	bge.n	80164e8 <_puts_r+0xac>
 80164de:	69a2      	ldr	r2, [r4, #24]
 80164e0:	429a      	cmp	r2, r3
 80164e2:	dc06      	bgt.n	80164f2 <_puts_r+0xb6>
 80164e4:	290a      	cmp	r1, #10
 80164e6:	d004      	beq.n	80164f2 <_puts_r+0xb6>
 80164e8:	6823      	ldr	r3, [r4, #0]
 80164ea:	1c5a      	adds	r2, r3, #1
 80164ec:	6022      	str	r2, [r4, #0]
 80164ee:	7019      	strb	r1, [r3, #0]
 80164f0:	e7c5      	b.n	801647e <_puts_r+0x42>
 80164f2:	4622      	mov	r2, r4
 80164f4:	4628      	mov	r0, r5
 80164f6:	f000 f827 	bl	8016548 <__swbuf_r>
 80164fa:	3001      	adds	r0, #1
 80164fc:	d1bf      	bne.n	801647e <_puts_r+0x42>
 80164fe:	e7df      	b.n	80164c0 <_puts_r+0x84>
 8016500:	6823      	ldr	r3, [r4, #0]
 8016502:	250a      	movs	r5, #10
 8016504:	1c5a      	adds	r2, r3, #1
 8016506:	6022      	str	r2, [r4, #0]
 8016508:	701d      	strb	r5, [r3, #0]
 801650a:	e7db      	b.n	80164c4 <_puts_r+0x88>
 801650c:	08017064 	.word	0x08017064
 8016510:	08017084 	.word	0x08017084
 8016514:	08017044 	.word	0x08017044

08016518 <puts>:
 8016518:	4b02      	ldr	r3, [pc, #8]	; (8016524 <puts+0xc>)
 801651a:	4601      	mov	r1, r0
 801651c:	6818      	ldr	r0, [r3, #0]
 801651e:	f7ff bf8d 	b.w	801643c <_puts_r>
 8016522:	bf00      	nop
 8016524:	240000a4 	.word	0x240000a4

08016528 <_sbrk_r>:
 8016528:	b538      	push	{r3, r4, r5, lr}
 801652a:	4d06      	ldr	r5, [pc, #24]	; (8016544 <_sbrk_r+0x1c>)
 801652c:	2300      	movs	r3, #0
 801652e:	4604      	mov	r4, r0
 8016530:	4608      	mov	r0, r1
 8016532:	602b      	str	r3, [r5, #0]
 8016534:	f7ed f98a 	bl	800384c <_sbrk>
 8016538:	1c43      	adds	r3, r0, #1
 801653a:	d102      	bne.n	8016542 <_sbrk_r+0x1a>
 801653c:	682b      	ldr	r3, [r5, #0]
 801653e:	b103      	cbz	r3, 8016542 <_sbrk_r+0x1a>
 8016540:	6023      	str	r3, [r4, #0]
 8016542:	bd38      	pop	{r3, r4, r5, pc}
 8016544:	24005a28 	.word	0x24005a28

08016548 <__swbuf_r>:
 8016548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801654a:	460e      	mov	r6, r1
 801654c:	4614      	mov	r4, r2
 801654e:	4605      	mov	r5, r0
 8016550:	b118      	cbz	r0, 801655a <__swbuf_r+0x12>
 8016552:	6983      	ldr	r3, [r0, #24]
 8016554:	b90b      	cbnz	r3, 801655a <__swbuf_r+0x12>
 8016556:	f000 f9d1 	bl	80168fc <__sinit>
 801655a:	4b21      	ldr	r3, [pc, #132]	; (80165e0 <__swbuf_r+0x98>)
 801655c:	429c      	cmp	r4, r3
 801655e:	d12b      	bne.n	80165b8 <__swbuf_r+0x70>
 8016560:	686c      	ldr	r4, [r5, #4]
 8016562:	69a3      	ldr	r3, [r4, #24]
 8016564:	60a3      	str	r3, [r4, #8]
 8016566:	89a3      	ldrh	r3, [r4, #12]
 8016568:	071a      	lsls	r2, r3, #28
 801656a:	d52f      	bpl.n	80165cc <__swbuf_r+0x84>
 801656c:	6923      	ldr	r3, [r4, #16]
 801656e:	b36b      	cbz	r3, 80165cc <__swbuf_r+0x84>
 8016570:	6923      	ldr	r3, [r4, #16]
 8016572:	6820      	ldr	r0, [r4, #0]
 8016574:	1ac0      	subs	r0, r0, r3
 8016576:	6963      	ldr	r3, [r4, #20]
 8016578:	b2f6      	uxtb	r6, r6
 801657a:	4283      	cmp	r3, r0
 801657c:	4637      	mov	r7, r6
 801657e:	dc04      	bgt.n	801658a <__swbuf_r+0x42>
 8016580:	4621      	mov	r1, r4
 8016582:	4628      	mov	r0, r5
 8016584:	f000 f926 	bl	80167d4 <_fflush_r>
 8016588:	bb30      	cbnz	r0, 80165d8 <__swbuf_r+0x90>
 801658a:	68a3      	ldr	r3, [r4, #8]
 801658c:	3b01      	subs	r3, #1
 801658e:	60a3      	str	r3, [r4, #8]
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	1c5a      	adds	r2, r3, #1
 8016594:	6022      	str	r2, [r4, #0]
 8016596:	701e      	strb	r6, [r3, #0]
 8016598:	6963      	ldr	r3, [r4, #20]
 801659a:	3001      	adds	r0, #1
 801659c:	4283      	cmp	r3, r0
 801659e:	d004      	beq.n	80165aa <__swbuf_r+0x62>
 80165a0:	89a3      	ldrh	r3, [r4, #12]
 80165a2:	07db      	lsls	r3, r3, #31
 80165a4:	d506      	bpl.n	80165b4 <__swbuf_r+0x6c>
 80165a6:	2e0a      	cmp	r6, #10
 80165a8:	d104      	bne.n	80165b4 <__swbuf_r+0x6c>
 80165aa:	4621      	mov	r1, r4
 80165ac:	4628      	mov	r0, r5
 80165ae:	f000 f911 	bl	80167d4 <_fflush_r>
 80165b2:	b988      	cbnz	r0, 80165d8 <__swbuf_r+0x90>
 80165b4:	4638      	mov	r0, r7
 80165b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165b8:	4b0a      	ldr	r3, [pc, #40]	; (80165e4 <__swbuf_r+0x9c>)
 80165ba:	429c      	cmp	r4, r3
 80165bc:	d101      	bne.n	80165c2 <__swbuf_r+0x7a>
 80165be:	68ac      	ldr	r4, [r5, #8]
 80165c0:	e7cf      	b.n	8016562 <__swbuf_r+0x1a>
 80165c2:	4b09      	ldr	r3, [pc, #36]	; (80165e8 <__swbuf_r+0xa0>)
 80165c4:	429c      	cmp	r4, r3
 80165c6:	bf08      	it	eq
 80165c8:	68ec      	ldreq	r4, [r5, #12]
 80165ca:	e7ca      	b.n	8016562 <__swbuf_r+0x1a>
 80165cc:	4621      	mov	r1, r4
 80165ce:	4628      	mov	r0, r5
 80165d0:	f000 f80c 	bl	80165ec <__swsetup_r>
 80165d4:	2800      	cmp	r0, #0
 80165d6:	d0cb      	beq.n	8016570 <__swbuf_r+0x28>
 80165d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80165dc:	e7ea      	b.n	80165b4 <__swbuf_r+0x6c>
 80165de:	bf00      	nop
 80165e0:	08017064 	.word	0x08017064
 80165e4:	08017084 	.word	0x08017084
 80165e8:	08017044 	.word	0x08017044

080165ec <__swsetup_r>:
 80165ec:	4b32      	ldr	r3, [pc, #200]	; (80166b8 <__swsetup_r+0xcc>)
 80165ee:	b570      	push	{r4, r5, r6, lr}
 80165f0:	681d      	ldr	r5, [r3, #0]
 80165f2:	4606      	mov	r6, r0
 80165f4:	460c      	mov	r4, r1
 80165f6:	b125      	cbz	r5, 8016602 <__swsetup_r+0x16>
 80165f8:	69ab      	ldr	r3, [r5, #24]
 80165fa:	b913      	cbnz	r3, 8016602 <__swsetup_r+0x16>
 80165fc:	4628      	mov	r0, r5
 80165fe:	f000 f97d 	bl	80168fc <__sinit>
 8016602:	4b2e      	ldr	r3, [pc, #184]	; (80166bc <__swsetup_r+0xd0>)
 8016604:	429c      	cmp	r4, r3
 8016606:	d10f      	bne.n	8016628 <__swsetup_r+0x3c>
 8016608:	686c      	ldr	r4, [r5, #4]
 801660a:	89a3      	ldrh	r3, [r4, #12]
 801660c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016610:	0719      	lsls	r1, r3, #28
 8016612:	d42c      	bmi.n	801666e <__swsetup_r+0x82>
 8016614:	06dd      	lsls	r5, r3, #27
 8016616:	d411      	bmi.n	801663c <__swsetup_r+0x50>
 8016618:	2309      	movs	r3, #9
 801661a:	6033      	str	r3, [r6, #0]
 801661c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016620:	81a3      	strh	r3, [r4, #12]
 8016622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016626:	e03e      	b.n	80166a6 <__swsetup_r+0xba>
 8016628:	4b25      	ldr	r3, [pc, #148]	; (80166c0 <__swsetup_r+0xd4>)
 801662a:	429c      	cmp	r4, r3
 801662c:	d101      	bne.n	8016632 <__swsetup_r+0x46>
 801662e:	68ac      	ldr	r4, [r5, #8]
 8016630:	e7eb      	b.n	801660a <__swsetup_r+0x1e>
 8016632:	4b24      	ldr	r3, [pc, #144]	; (80166c4 <__swsetup_r+0xd8>)
 8016634:	429c      	cmp	r4, r3
 8016636:	bf08      	it	eq
 8016638:	68ec      	ldreq	r4, [r5, #12]
 801663a:	e7e6      	b.n	801660a <__swsetup_r+0x1e>
 801663c:	0758      	lsls	r0, r3, #29
 801663e:	d512      	bpl.n	8016666 <__swsetup_r+0x7a>
 8016640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016642:	b141      	cbz	r1, 8016656 <__swsetup_r+0x6a>
 8016644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016648:	4299      	cmp	r1, r3
 801664a:	d002      	beq.n	8016652 <__swsetup_r+0x66>
 801664c:	4630      	mov	r0, r6
 801664e:	f7ff fe15 	bl	801627c <_free_r>
 8016652:	2300      	movs	r3, #0
 8016654:	6363      	str	r3, [r4, #52]	; 0x34
 8016656:	89a3      	ldrh	r3, [r4, #12]
 8016658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801665c:	81a3      	strh	r3, [r4, #12]
 801665e:	2300      	movs	r3, #0
 8016660:	6063      	str	r3, [r4, #4]
 8016662:	6923      	ldr	r3, [r4, #16]
 8016664:	6023      	str	r3, [r4, #0]
 8016666:	89a3      	ldrh	r3, [r4, #12]
 8016668:	f043 0308 	orr.w	r3, r3, #8
 801666c:	81a3      	strh	r3, [r4, #12]
 801666e:	6923      	ldr	r3, [r4, #16]
 8016670:	b94b      	cbnz	r3, 8016686 <__swsetup_r+0x9a>
 8016672:	89a3      	ldrh	r3, [r4, #12]
 8016674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801667c:	d003      	beq.n	8016686 <__swsetup_r+0x9a>
 801667e:	4621      	mov	r1, r4
 8016680:	4630      	mov	r0, r6
 8016682:	f000 fa01 	bl	8016a88 <__smakebuf_r>
 8016686:	89a0      	ldrh	r0, [r4, #12]
 8016688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801668c:	f010 0301 	ands.w	r3, r0, #1
 8016690:	d00a      	beq.n	80166a8 <__swsetup_r+0xbc>
 8016692:	2300      	movs	r3, #0
 8016694:	60a3      	str	r3, [r4, #8]
 8016696:	6963      	ldr	r3, [r4, #20]
 8016698:	425b      	negs	r3, r3
 801669a:	61a3      	str	r3, [r4, #24]
 801669c:	6923      	ldr	r3, [r4, #16]
 801669e:	b943      	cbnz	r3, 80166b2 <__swsetup_r+0xc6>
 80166a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80166a4:	d1ba      	bne.n	801661c <__swsetup_r+0x30>
 80166a6:	bd70      	pop	{r4, r5, r6, pc}
 80166a8:	0781      	lsls	r1, r0, #30
 80166aa:	bf58      	it	pl
 80166ac:	6963      	ldrpl	r3, [r4, #20]
 80166ae:	60a3      	str	r3, [r4, #8]
 80166b0:	e7f4      	b.n	801669c <__swsetup_r+0xb0>
 80166b2:	2000      	movs	r0, #0
 80166b4:	e7f7      	b.n	80166a6 <__swsetup_r+0xba>
 80166b6:	bf00      	nop
 80166b8:	240000a4 	.word	0x240000a4
 80166bc:	08017064 	.word	0x08017064
 80166c0:	08017084 	.word	0x08017084
 80166c4:	08017044 	.word	0x08017044

080166c8 <__sflush_r>:
 80166c8:	898a      	ldrh	r2, [r1, #12]
 80166ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ce:	4605      	mov	r5, r0
 80166d0:	0710      	lsls	r0, r2, #28
 80166d2:	460c      	mov	r4, r1
 80166d4:	d458      	bmi.n	8016788 <__sflush_r+0xc0>
 80166d6:	684b      	ldr	r3, [r1, #4]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	dc05      	bgt.n	80166e8 <__sflush_r+0x20>
 80166dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80166de:	2b00      	cmp	r3, #0
 80166e0:	dc02      	bgt.n	80166e8 <__sflush_r+0x20>
 80166e2:	2000      	movs	r0, #0
 80166e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166ea:	2e00      	cmp	r6, #0
 80166ec:	d0f9      	beq.n	80166e2 <__sflush_r+0x1a>
 80166ee:	2300      	movs	r3, #0
 80166f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80166f4:	682f      	ldr	r7, [r5, #0]
 80166f6:	602b      	str	r3, [r5, #0]
 80166f8:	d032      	beq.n	8016760 <__sflush_r+0x98>
 80166fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80166fc:	89a3      	ldrh	r3, [r4, #12]
 80166fe:	075a      	lsls	r2, r3, #29
 8016700:	d505      	bpl.n	801670e <__sflush_r+0x46>
 8016702:	6863      	ldr	r3, [r4, #4]
 8016704:	1ac0      	subs	r0, r0, r3
 8016706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016708:	b10b      	cbz	r3, 801670e <__sflush_r+0x46>
 801670a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801670c:	1ac0      	subs	r0, r0, r3
 801670e:	2300      	movs	r3, #0
 8016710:	4602      	mov	r2, r0
 8016712:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016714:	6a21      	ldr	r1, [r4, #32]
 8016716:	4628      	mov	r0, r5
 8016718:	47b0      	blx	r6
 801671a:	1c43      	adds	r3, r0, #1
 801671c:	89a3      	ldrh	r3, [r4, #12]
 801671e:	d106      	bne.n	801672e <__sflush_r+0x66>
 8016720:	6829      	ldr	r1, [r5, #0]
 8016722:	291d      	cmp	r1, #29
 8016724:	d82c      	bhi.n	8016780 <__sflush_r+0xb8>
 8016726:	4a2a      	ldr	r2, [pc, #168]	; (80167d0 <__sflush_r+0x108>)
 8016728:	40ca      	lsrs	r2, r1
 801672a:	07d6      	lsls	r6, r2, #31
 801672c:	d528      	bpl.n	8016780 <__sflush_r+0xb8>
 801672e:	2200      	movs	r2, #0
 8016730:	6062      	str	r2, [r4, #4]
 8016732:	04d9      	lsls	r1, r3, #19
 8016734:	6922      	ldr	r2, [r4, #16]
 8016736:	6022      	str	r2, [r4, #0]
 8016738:	d504      	bpl.n	8016744 <__sflush_r+0x7c>
 801673a:	1c42      	adds	r2, r0, #1
 801673c:	d101      	bne.n	8016742 <__sflush_r+0x7a>
 801673e:	682b      	ldr	r3, [r5, #0]
 8016740:	b903      	cbnz	r3, 8016744 <__sflush_r+0x7c>
 8016742:	6560      	str	r0, [r4, #84]	; 0x54
 8016744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016746:	602f      	str	r7, [r5, #0]
 8016748:	2900      	cmp	r1, #0
 801674a:	d0ca      	beq.n	80166e2 <__sflush_r+0x1a>
 801674c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016750:	4299      	cmp	r1, r3
 8016752:	d002      	beq.n	801675a <__sflush_r+0x92>
 8016754:	4628      	mov	r0, r5
 8016756:	f7ff fd91 	bl	801627c <_free_r>
 801675a:	2000      	movs	r0, #0
 801675c:	6360      	str	r0, [r4, #52]	; 0x34
 801675e:	e7c1      	b.n	80166e4 <__sflush_r+0x1c>
 8016760:	6a21      	ldr	r1, [r4, #32]
 8016762:	2301      	movs	r3, #1
 8016764:	4628      	mov	r0, r5
 8016766:	47b0      	blx	r6
 8016768:	1c41      	adds	r1, r0, #1
 801676a:	d1c7      	bne.n	80166fc <__sflush_r+0x34>
 801676c:	682b      	ldr	r3, [r5, #0]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d0c4      	beq.n	80166fc <__sflush_r+0x34>
 8016772:	2b1d      	cmp	r3, #29
 8016774:	d001      	beq.n	801677a <__sflush_r+0xb2>
 8016776:	2b16      	cmp	r3, #22
 8016778:	d101      	bne.n	801677e <__sflush_r+0xb6>
 801677a:	602f      	str	r7, [r5, #0]
 801677c:	e7b1      	b.n	80166e2 <__sflush_r+0x1a>
 801677e:	89a3      	ldrh	r3, [r4, #12]
 8016780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016784:	81a3      	strh	r3, [r4, #12]
 8016786:	e7ad      	b.n	80166e4 <__sflush_r+0x1c>
 8016788:	690f      	ldr	r7, [r1, #16]
 801678a:	2f00      	cmp	r7, #0
 801678c:	d0a9      	beq.n	80166e2 <__sflush_r+0x1a>
 801678e:	0793      	lsls	r3, r2, #30
 8016790:	680e      	ldr	r6, [r1, #0]
 8016792:	bf08      	it	eq
 8016794:	694b      	ldreq	r3, [r1, #20]
 8016796:	600f      	str	r7, [r1, #0]
 8016798:	bf18      	it	ne
 801679a:	2300      	movne	r3, #0
 801679c:	eba6 0807 	sub.w	r8, r6, r7
 80167a0:	608b      	str	r3, [r1, #8]
 80167a2:	f1b8 0f00 	cmp.w	r8, #0
 80167a6:	dd9c      	ble.n	80166e2 <__sflush_r+0x1a>
 80167a8:	6a21      	ldr	r1, [r4, #32]
 80167aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80167ac:	4643      	mov	r3, r8
 80167ae:	463a      	mov	r2, r7
 80167b0:	4628      	mov	r0, r5
 80167b2:	47b0      	blx	r6
 80167b4:	2800      	cmp	r0, #0
 80167b6:	dc06      	bgt.n	80167c6 <__sflush_r+0xfe>
 80167b8:	89a3      	ldrh	r3, [r4, #12]
 80167ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167be:	81a3      	strh	r3, [r4, #12]
 80167c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167c4:	e78e      	b.n	80166e4 <__sflush_r+0x1c>
 80167c6:	4407      	add	r7, r0
 80167c8:	eba8 0800 	sub.w	r8, r8, r0
 80167cc:	e7e9      	b.n	80167a2 <__sflush_r+0xda>
 80167ce:	bf00      	nop
 80167d0:	20400001 	.word	0x20400001

080167d4 <_fflush_r>:
 80167d4:	b538      	push	{r3, r4, r5, lr}
 80167d6:	690b      	ldr	r3, [r1, #16]
 80167d8:	4605      	mov	r5, r0
 80167da:	460c      	mov	r4, r1
 80167dc:	b913      	cbnz	r3, 80167e4 <_fflush_r+0x10>
 80167de:	2500      	movs	r5, #0
 80167e0:	4628      	mov	r0, r5
 80167e2:	bd38      	pop	{r3, r4, r5, pc}
 80167e4:	b118      	cbz	r0, 80167ee <_fflush_r+0x1a>
 80167e6:	6983      	ldr	r3, [r0, #24]
 80167e8:	b90b      	cbnz	r3, 80167ee <_fflush_r+0x1a>
 80167ea:	f000 f887 	bl	80168fc <__sinit>
 80167ee:	4b14      	ldr	r3, [pc, #80]	; (8016840 <_fflush_r+0x6c>)
 80167f0:	429c      	cmp	r4, r3
 80167f2:	d11b      	bne.n	801682c <_fflush_r+0x58>
 80167f4:	686c      	ldr	r4, [r5, #4]
 80167f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d0ef      	beq.n	80167de <_fflush_r+0xa>
 80167fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016800:	07d0      	lsls	r0, r2, #31
 8016802:	d404      	bmi.n	801680e <_fflush_r+0x3a>
 8016804:	0599      	lsls	r1, r3, #22
 8016806:	d402      	bmi.n	801680e <_fflush_r+0x3a>
 8016808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801680a:	f000 f915 	bl	8016a38 <__retarget_lock_acquire_recursive>
 801680e:	4628      	mov	r0, r5
 8016810:	4621      	mov	r1, r4
 8016812:	f7ff ff59 	bl	80166c8 <__sflush_r>
 8016816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016818:	07da      	lsls	r2, r3, #31
 801681a:	4605      	mov	r5, r0
 801681c:	d4e0      	bmi.n	80167e0 <_fflush_r+0xc>
 801681e:	89a3      	ldrh	r3, [r4, #12]
 8016820:	059b      	lsls	r3, r3, #22
 8016822:	d4dd      	bmi.n	80167e0 <_fflush_r+0xc>
 8016824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016826:	f000 f908 	bl	8016a3a <__retarget_lock_release_recursive>
 801682a:	e7d9      	b.n	80167e0 <_fflush_r+0xc>
 801682c:	4b05      	ldr	r3, [pc, #20]	; (8016844 <_fflush_r+0x70>)
 801682e:	429c      	cmp	r4, r3
 8016830:	d101      	bne.n	8016836 <_fflush_r+0x62>
 8016832:	68ac      	ldr	r4, [r5, #8]
 8016834:	e7df      	b.n	80167f6 <_fflush_r+0x22>
 8016836:	4b04      	ldr	r3, [pc, #16]	; (8016848 <_fflush_r+0x74>)
 8016838:	429c      	cmp	r4, r3
 801683a:	bf08      	it	eq
 801683c:	68ec      	ldreq	r4, [r5, #12]
 801683e:	e7da      	b.n	80167f6 <_fflush_r+0x22>
 8016840:	08017064 	.word	0x08017064
 8016844:	08017084 	.word	0x08017084
 8016848:	08017044 	.word	0x08017044

0801684c <std>:
 801684c:	2300      	movs	r3, #0
 801684e:	b510      	push	{r4, lr}
 8016850:	4604      	mov	r4, r0
 8016852:	e9c0 3300 	strd	r3, r3, [r0]
 8016856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801685a:	6083      	str	r3, [r0, #8]
 801685c:	8181      	strh	r1, [r0, #12]
 801685e:	6643      	str	r3, [r0, #100]	; 0x64
 8016860:	81c2      	strh	r2, [r0, #14]
 8016862:	6183      	str	r3, [r0, #24]
 8016864:	4619      	mov	r1, r3
 8016866:	2208      	movs	r2, #8
 8016868:	305c      	adds	r0, #92	; 0x5c
 801686a:	f7ff fcff 	bl	801626c <memset>
 801686e:	4b05      	ldr	r3, [pc, #20]	; (8016884 <std+0x38>)
 8016870:	6263      	str	r3, [r4, #36]	; 0x24
 8016872:	4b05      	ldr	r3, [pc, #20]	; (8016888 <std+0x3c>)
 8016874:	62a3      	str	r3, [r4, #40]	; 0x28
 8016876:	4b05      	ldr	r3, [pc, #20]	; (801688c <std+0x40>)
 8016878:	62e3      	str	r3, [r4, #44]	; 0x2c
 801687a:	4b05      	ldr	r3, [pc, #20]	; (8016890 <std+0x44>)
 801687c:	6224      	str	r4, [r4, #32]
 801687e:	6323      	str	r3, [r4, #48]	; 0x30
 8016880:	bd10      	pop	{r4, pc}
 8016882:	bf00      	nop
 8016884:	08016b21 	.word	0x08016b21
 8016888:	08016b43 	.word	0x08016b43
 801688c:	08016b7b 	.word	0x08016b7b
 8016890:	08016b9f 	.word	0x08016b9f

08016894 <_cleanup_r>:
 8016894:	4901      	ldr	r1, [pc, #4]	; (801689c <_cleanup_r+0x8>)
 8016896:	f000 b8af 	b.w	80169f8 <_fwalk_reent>
 801689a:	bf00      	nop
 801689c:	080167d5 	.word	0x080167d5

080168a0 <__sfmoreglue>:
 80168a0:	b570      	push	{r4, r5, r6, lr}
 80168a2:	2268      	movs	r2, #104	; 0x68
 80168a4:	1e4d      	subs	r5, r1, #1
 80168a6:	4355      	muls	r5, r2
 80168a8:	460e      	mov	r6, r1
 80168aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80168ae:	f7ff fd51 	bl	8016354 <_malloc_r>
 80168b2:	4604      	mov	r4, r0
 80168b4:	b140      	cbz	r0, 80168c8 <__sfmoreglue+0x28>
 80168b6:	2100      	movs	r1, #0
 80168b8:	e9c0 1600 	strd	r1, r6, [r0]
 80168bc:	300c      	adds	r0, #12
 80168be:	60a0      	str	r0, [r4, #8]
 80168c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80168c4:	f7ff fcd2 	bl	801626c <memset>
 80168c8:	4620      	mov	r0, r4
 80168ca:	bd70      	pop	{r4, r5, r6, pc}

080168cc <__sfp_lock_acquire>:
 80168cc:	4801      	ldr	r0, [pc, #4]	; (80168d4 <__sfp_lock_acquire+0x8>)
 80168ce:	f000 b8b3 	b.w	8016a38 <__retarget_lock_acquire_recursive>
 80168d2:	bf00      	nop
 80168d4:	24005a25 	.word	0x24005a25

080168d8 <__sfp_lock_release>:
 80168d8:	4801      	ldr	r0, [pc, #4]	; (80168e0 <__sfp_lock_release+0x8>)
 80168da:	f000 b8ae 	b.w	8016a3a <__retarget_lock_release_recursive>
 80168de:	bf00      	nop
 80168e0:	24005a25 	.word	0x24005a25

080168e4 <__sinit_lock_acquire>:
 80168e4:	4801      	ldr	r0, [pc, #4]	; (80168ec <__sinit_lock_acquire+0x8>)
 80168e6:	f000 b8a7 	b.w	8016a38 <__retarget_lock_acquire_recursive>
 80168ea:	bf00      	nop
 80168ec:	24005a26 	.word	0x24005a26

080168f0 <__sinit_lock_release>:
 80168f0:	4801      	ldr	r0, [pc, #4]	; (80168f8 <__sinit_lock_release+0x8>)
 80168f2:	f000 b8a2 	b.w	8016a3a <__retarget_lock_release_recursive>
 80168f6:	bf00      	nop
 80168f8:	24005a26 	.word	0x24005a26

080168fc <__sinit>:
 80168fc:	b510      	push	{r4, lr}
 80168fe:	4604      	mov	r4, r0
 8016900:	f7ff fff0 	bl	80168e4 <__sinit_lock_acquire>
 8016904:	69a3      	ldr	r3, [r4, #24]
 8016906:	b11b      	cbz	r3, 8016910 <__sinit+0x14>
 8016908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801690c:	f7ff bff0 	b.w	80168f0 <__sinit_lock_release>
 8016910:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016914:	6523      	str	r3, [r4, #80]	; 0x50
 8016916:	4b13      	ldr	r3, [pc, #76]	; (8016964 <__sinit+0x68>)
 8016918:	4a13      	ldr	r2, [pc, #76]	; (8016968 <__sinit+0x6c>)
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	62a2      	str	r2, [r4, #40]	; 0x28
 801691e:	42a3      	cmp	r3, r4
 8016920:	bf04      	itt	eq
 8016922:	2301      	moveq	r3, #1
 8016924:	61a3      	streq	r3, [r4, #24]
 8016926:	4620      	mov	r0, r4
 8016928:	f000 f820 	bl	801696c <__sfp>
 801692c:	6060      	str	r0, [r4, #4]
 801692e:	4620      	mov	r0, r4
 8016930:	f000 f81c 	bl	801696c <__sfp>
 8016934:	60a0      	str	r0, [r4, #8]
 8016936:	4620      	mov	r0, r4
 8016938:	f000 f818 	bl	801696c <__sfp>
 801693c:	2200      	movs	r2, #0
 801693e:	60e0      	str	r0, [r4, #12]
 8016940:	2104      	movs	r1, #4
 8016942:	6860      	ldr	r0, [r4, #4]
 8016944:	f7ff ff82 	bl	801684c <std>
 8016948:	68a0      	ldr	r0, [r4, #8]
 801694a:	2201      	movs	r2, #1
 801694c:	2109      	movs	r1, #9
 801694e:	f7ff ff7d 	bl	801684c <std>
 8016952:	68e0      	ldr	r0, [r4, #12]
 8016954:	2202      	movs	r2, #2
 8016956:	2112      	movs	r1, #18
 8016958:	f7ff ff78 	bl	801684c <std>
 801695c:	2301      	movs	r3, #1
 801695e:	61a3      	str	r3, [r4, #24]
 8016960:	e7d2      	b.n	8016908 <__sinit+0xc>
 8016962:	bf00      	nop
 8016964:	08017040 	.word	0x08017040
 8016968:	08016895 	.word	0x08016895

0801696c <__sfp>:
 801696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801696e:	4607      	mov	r7, r0
 8016970:	f7ff ffac 	bl	80168cc <__sfp_lock_acquire>
 8016974:	4b1e      	ldr	r3, [pc, #120]	; (80169f0 <__sfp+0x84>)
 8016976:	681e      	ldr	r6, [r3, #0]
 8016978:	69b3      	ldr	r3, [r6, #24]
 801697a:	b913      	cbnz	r3, 8016982 <__sfp+0x16>
 801697c:	4630      	mov	r0, r6
 801697e:	f7ff ffbd 	bl	80168fc <__sinit>
 8016982:	3648      	adds	r6, #72	; 0x48
 8016984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016988:	3b01      	subs	r3, #1
 801698a:	d503      	bpl.n	8016994 <__sfp+0x28>
 801698c:	6833      	ldr	r3, [r6, #0]
 801698e:	b30b      	cbz	r3, 80169d4 <__sfp+0x68>
 8016990:	6836      	ldr	r6, [r6, #0]
 8016992:	e7f7      	b.n	8016984 <__sfp+0x18>
 8016994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016998:	b9d5      	cbnz	r5, 80169d0 <__sfp+0x64>
 801699a:	4b16      	ldr	r3, [pc, #88]	; (80169f4 <__sfp+0x88>)
 801699c:	60e3      	str	r3, [r4, #12]
 801699e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80169a2:	6665      	str	r5, [r4, #100]	; 0x64
 80169a4:	f000 f847 	bl	8016a36 <__retarget_lock_init_recursive>
 80169a8:	f7ff ff96 	bl	80168d8 <__sfp_lock_release>
 80169ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80169b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80169b4:	6025      	str	r5, [r4, #0]
 80169b6:	61a5      	str	r5, [r4, #24]
 80169b8:	2208      	movs	r2, #8
 80169ba:	4629      	mov	r1, r5
 80169bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80169c0:	f7ff fc54 	bl	801626c <memset>
 80169c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80169c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80169cc:	4620      	mov	r0, r4
 80169ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169d0:	3468      	adds	r4, #104	; 0x68
 80169d2:	e7d9      	b.n	8016988 <__sfp+0x1c>
 80169d4:	2104      	movs	r1, #4
 80169d6:	4638      	mov	r0, r7
 80169d8:	f7ff ff62 	bl	80168a0 <__sfmoreglue>
 80169dc:	4604      	mov	r4, r0
 80169de:	6030      	str	r0, [r6, #0]
 80169e0:	2800      	cmp	r0, #0
 80169e2:	d1d5      	bne.n	8016990 <__sfp+0x24>
 80169e4:	f7ff ff78 	bl	80168d8 <__sfp_lock_release>
 80169e8:	230c      	movs	r3, #12
 80169ea:	603b      	str	r3, [r7, #0]
 80169ec:	e7ee      	b.n	80169cc <__sfp+0x60>
 80169ee:	bf00      	nop
 80169f0:	08017040 	.word	0x08017040
 80169f4:	ffff0001 	.word	0xffff0001

080169f8 <_fwalk_reent>:
 80169f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169fc:	4606      	mov	r6, r0
 80169fe:	4688      	mov	r8, r1
 8016a00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a04:	2700      	movs	r7, #0
 8016a06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a0a:	f1b9 0901 	subs.w	r9, r9, #1
 8016a0e:	d505      	bpl.n	8016a1c <_fwalk_reent+0x24>
 8016a10:	6824      	ldr	r4, [r4, #0]
 8016a12:	2c00      	cmp	r4, #0
 8016a14:	d1f7      	bne.n	8016a06 <_fwalk_reent+0xe>
 8016a16:	4638      	mov	r0, r7
 8016a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a1c:	89ab      	ldrh	r3, [r5, #12]
 8016a1e:	2b01      	cmp	r3, #1
 8016a20:	d907      	bls.n	8016a32 <_fwalk_reent+0x3a>
 8016a22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a26:	3301      	adds	r3, #1
 8016a28:	d003      	beq.n	8016a32 <_fwalk_reent+0x3a>
 8016a2a:	4629      	mov	r1, r5
 8016a2c:	4630      	mov	r0, r6
 8016a2e:	47c0      	blx	r8
 8016a30:	4307      	orrs	r7, r0
 8016a32:	3568      	adds	r5, #104	; 0x68
 8016a34:	e7e9      	b.n	8016a0a <_fwalk_reent+0x12>

08016a36 <__retarget_lock_init_recursive>:
 8016a36:	4770      	bx	lr

08016a38 <__retarget_lock_acquire_recursive>:
 8016a38:	4770      	bx	lr

08016a3a <__retarget_lock_release_recursive>:
 8016a3a:	4770      	bx	lr

08016a3c <__swhatbuf_r>:
 8016a3c:	b570      	push	{r4, r5, r6, lr}
 8016a3e:	460e      	mov	r6, r1
 8016a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a44:	2900      	cmp	r1, #0
 8016a46:	b096      	sub	sp, #88	; 0x58
 8016a48:	4614      	mov	r4, r2
 8016a4a:	461d      	mov	r5, r3
 8016a4c:	da08      	bge.n	8016a60 <__swhatbuf_r+0x24>
 8016a4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016a52:	2200      	movs	r2, #0
 8016a54:	602a      	str	r2, [r5, #0]
 8016a56:	061a      	lsls	r2, r3, #24
 8016a58:	d410      	bmi.n	8016a7c <__swhatbuf_r+0x40>
 8016a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a5e:	e00e      	b.n	8016a7e <__swhatbuf_r+0x42>
 8016a60:	466a      	mov	r2, sp
 8016a62:	f000 f8c3 	bl	8016bec <_fstat_r>
 8016a66:	2800      	cmp	r0, #0
 8016a68:	dbf1      	blt.n	8016a4e <__swhatbuf_r+0x12>
 8016a6a:	9a01      	ldr	r2, [sp, #4]
 8016a6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a74:	425a      	negs	r2, r3
 8016a76:	415a      	adcs	r2, r3
 8016a78:	602a      	str	r2, [r5, #0]
 8016a7a:	e7ee      	b.n	8016a5a <__swhatbuf_r+0x1e>
 8016a7c:	2340      	movs	r3, #64	; 0x40
 8016a7e:	2000      	movs	r0, #0
 8016a80:	6023      	str	r3, [r4, #0]
 8016a82:	b016      	add	sp, #88	; 0x58
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
	...

08016a88 <__smakebuf_r>:
 8016a88:	898b      	ldrh	r3, [r1, #12]
 8016a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a8c:	079d      	lsls	r5, r3, #30
 8016a8e:	4606      	mov	r6, r0
 8016a90:	460c      	mov	r4, r1
 8016a92:	d507      	bpl.n	8016aa4 <__smakebuf_r+0x1c>
 8016a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a98:	6023      	str	r3, [r4, #0]
 8016a9a:	6123      	str	r3, [r4, #16]
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	6163      	str	r3, [r4, #20]
 8016aa0:	b002      	add	sp, #8
 8016aa2:	bd70      	pop	{r4, r5, r6, pc}
 8016aa4:	ab01      	add	r3, sp, #4
 8016aa6:	466a      	mov	r2, sp
 8016aa8:	f7ff ffc8 	bl	8016a3c <__swhatbuf_r>
 8016aac:	9900      	ldr	r1, [sp, #0]
 8016aae:	4605      	mov	r5, r0
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	f7ff fc4f 	bl	8016354 <_malloc_r>
 8016ab6:	b948      	cbnz	r0, 8016acc <__smakebuf_r+0x44>
 8016ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016abc:	059a      	lsls	r2, r3, #22
 8016abe:	d4ef      	bmi.n	8016aa0 <__smakebuf_r+0x18>
 8016ac0:	f023 0303 	bic.w	r3, r3, #3
 8016ac4:	f043 0302 	orr.w	r3, r3, #2
 8016ac8:	81a3      	strh	r3, [r4, #12]
 8016aca:	e7e3      	b.n	8016a94 <__smakebuf_r+0xc>
 8016acc:	4b0d      	ldr	r3, [pc, #52]	; (8016b04 <__smakebuf_r+0x7c>)
 8016ace:	62b3      	str	r3, [r6, #40]	; 0x28
 8016ad0:	89a3      	ldrh	r3, [r4, #12]
 8016ad2:	6020      	str	r0, [r4, #0]
 8016ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ad8:	81a3      	strh	r3, [r4, #12]
 8016ada:	9b00      	ldr	r3, [sp, #0]
 8016adc:	6163      	str	r3, [r4, #20]
 8016ade:	9b01      	ldr	r3, [sp, #4]
 8016ae0:	6120      	str	r0, [r4, #16]
 8016ae2:	b15b      	cbz	r3, 8016afc <__smakebuf_r+0x74>
 8016ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ae8:	4630      	mov	r0, r6
 8016aea:	f000 f891 	bl	8016c10 <_isatty_r>
 8016aee:	b128      	cbz	r0, 8016afc <__smakebuf_r+0x74>
 8016af0:	89a3      	ldrh	r3, [r4, #12]
 8016af2:	f023 0303 	bic.w	r3, r3, #3
 8016af6:	f043 0301 	orr.w	r3, r3, #1
 8016afa:	81a3      	strh	r3, [r4, #12]
 8016afc:	89a0      	ldrh	r0, [r4, #12]
 8016afe:	4305      	orrs	r5, r0
 8016b00:	81a5      	strh	r5, [r4, #12]
 8016b02:	e7cd      	b.n	8016aa0 <__smakebuf_r+0x18>
 8016b04:	08016895 	.word	0x08016895

08016b08 <__malloc_lock>:
 8016b08:	4801      	ldr	r0, [pc, #4]	; (8016b10 <__malloc_lock+0x8>)
 8016b0a:	f7ff bf95 	b.w	8016a38 <__retarget_lock_acquire_recursive>
 8016b0e:	bf00      	nop
 8016b10:	24005a24 	.word	0x24005a24

08016b14 <__malloc_unlock>:
 8016b14:	4801      	ldr	r0, [pc, #4]	; (8016b1c <__malloc_unlock+0x8>)
 8016b16:	f7ff bf90 	b.w	8016a3a <__retarget_lock_release_recursive>
 8016b1a:	bf00      	nop
 8016b1c:	24005a24 	.word	0x24005a24

08016b20 <__sread>:
 8016b20:	b510      	push	{r4, lr}
 8016b22:	460c      	mov	r4, r1
 8016b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b28:	f000 f894 	bl	8016c54 <_read_r>
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	bfab      	itete	ge
 8016b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b32:	89a3      	ldrhlt	r3, [r4, #12]
 8016b34:	181b      	addge	r3, r3, r0
 8016b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b3a:	bfac      	ite	ge
 8016b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b3e:	81a3      	strhlt	r3, [r4, #12]
 8016b40:	bd10      	pop	{r4, pc}

08016b42 <__swrite>:
 8016b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b46:	461f      	mov	r7, r3
 8016b48:	898b      	ldrh	r3, [r1, #12]
 8016b4a:	05db      	lsls	r3, r3, #23
 8016b4c:	4605      	mov	r5, r0
 8016b4e:	460c      	mov	r4, r1
 8016b50:	4616      	mov	r6, r2
 8016b52:	d505      	bpl.n	8016b60 <__swrite+0x1e>
 8016b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b58:	2302      	movs	r3, #2
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	f000 f868 	bl	8016c30 <_lseek_r>
 8016b60:	89a3      	ldrh	r3, [r4, #12]
 8016b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b6a:	81a3      	strh	r3, [r4, #12]
 8016b6c:	4632      	mov	r2, r6
 8016b6e:	463b      	mov	r3, r7
 8016b70:	4628      	mov	r0, r5
 8016b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b76:	f000 b817 	b.w	8016ba8 <_write_r>

08016b7a <__sseek>:
 8016b7a:	b510      	push	{r4, lr}
 8016b7c:	460c      	mov	r4, r1
 8016b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b82:	f000 f855 	bl	8016c30 <_lseek_r>
 8016b86:	1c43      	adds	r3, r0, #1
 8016b88:	89a3      	ldrh	r3, [r4, #12]
 8016b8a:	bf15      	itete	ne
 8016b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016b96:	81a3      	strheq	r3, [r4, #12]
 8016b98:	bf18      	it	ne
 8016b9a:	81a3      	strhne	r3, [r4, #12]
 8016b9c:	bd10      	pop	{r4, pc}

08016b9e <__sclose>:
 8016b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ba2:	f000 b813 	b.w	8016bcc <_close_r>
	...

08016ba8 <_write_r>:
 8016ba8:	b538      	push	{r3, r4, r5, lr}
 8016baa:	4d07      	ldr	r5, [pc, #28]	; (8016bc8 <_write_r+0x20>)
 8016bac:	4604      	mov	r4, r0
 8016bae:	4608      	mov	r0, r1
 8016bb0:	4611      	mov	r1, r2
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	602a      	str	r2, [r5, #0]
 8016bb6:	461a      	mov	r2, r3
 8016bb8:	f7ec fdf7 	bl	80037aa <_write>
 8016bbc:	1c43      	adds	r3, r0, #1
 8016bbe:	d102      	bne.n	8016bc6 <_write_r+0x1e>
 8016bc0:	682b      	ldr	r3, [r5, #0]
 8016bc2:	b103      	cbz	r3, 8016bc6 <_write_r+0x1e>
 8016bc4:	6023      	str	r3, [r4, #0]
 8016bc6:	bd38      	pop	{r3, r4, r5, pc}
 8016bc8:	24005a28 	.word	0x24005a28

08016bcc <_close_r>:
 8016bcc:	b538      	push	{r3, r4, r5, lr}
 8016bce:	4d06      	ldr	r5, [pc, #24]	; (8016be8 <_close_r+0x1c>)
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	4608      	mov	r0, r1
 8016bd6:	602b      	str	r3, [r5, #0]
 8016bd8:	f7ec fe03 	bl	80037e2 <_close>
 8016bdc:	1c43      	adds	r3, r0, #1
 8016bde:	d102      	bne.n	8016be6 <_close_r+0x1a>
 8016be0:	682b      	ldr	r3, [r5, #0]
 8016be2:	b103      	cbz	r3, 8016be6 <_close_r+0x1a>
 8016be4:	6023      	str	r3, [r4, #0]
 8016be6:	bd38      	pop	{r3, r4, r5, pc}
 8016be8:	24005a28 	.word	0x24005a28

08016bec <_fstat_r>:
 8016bec:	b538      	push	{r3, r4, r5, lr}
 8016bee:	4d07      	ldr	r5, [pc, #28]	; (8016c0c <_fstat_r+0x20>)
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	4604      	mov	r4, r0
 8016bf4:	4608      	mov	r0, r1
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	602b      	str	r3, [r5, #0]
 8016bfa:	f7ec fdfe 	bl	80037fa <_fstat>
 8016bfe:	1c43      	adds	r3, r0, #1
 8016c00:	d102      	bne.n	8016c08 <_fstat_r+0x1c>
 8016c02:	682b      	ldr	r3, [r5, #0]
 8016c04:	b103      	cbz	r3, 8016c08 <_fstat_r+0x1c>
 8016c06:	6023      	str	r3, [r4, #0]
 8016c08:	bd38      	pop	{r3, r4, r5, pc}
 8016c0a:	bf00      	nop
 8016c0c:	24005a28 	.word	0x24005a28

08016c10 <_isatty_r>:
 8016c10:	b538      	push	{r3, r4, r5, lr}
 8016c12:	4d06      	ldr	r5, [pc, #24]	; (8016c2c <_isatty_r+0x1c>)
 8016c14:	2300      	movs	r3, #0
 8016c16:	4604      	mov	r4, r0
 8016c18:	4608      	mov	r0, r1
 8016c1a:	602b      	str	r3, [r5, #0]
 8016c1c:	f7ec fdfd 	bl	800381a <_isatty>
 8016c20:	1c43      	adds	r3, r0, #1
 8016c22:	d102      	bne.n	8016c2a <_isatty_r+0x1a>
 8016c24:	682b      	ldr	r3, [r5, #0]
 8016c26:	b103      	cbz	r3, 8016c2a <_isatty_r+0x1a>
 8016c28:	6023      	str	r3, [r4, #0]
 8016c2a:	bd38      	pop	{r3, r4, r5, pc}
 8016c2c:	24005a28 	.word	0x24005a28

08016c30 <_lseek_r>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4d07      	ldr	r5, [pc, #28]	; (8016c50 <_lseek_r+0x20>)
 8016c34:	4604      	mov	r4, r0
 8016c36:	4608      	mov	r0, r1
 8016c38:	4611      	mov	r1, r2
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	602a      	str	r2, [r5, #0]
 8016c3e:	461a      	mov	r2, r3
 8016c40:	f7ec fdf6 	bl	8003830 <_lseek>
 8016c44:	1c43      	adds	r3, r0, #1
 8016c46:	d102      	bne.n	8016c4e <_lseek_r+0x1e>
 8016c48:	682b      	ldr	r3, [r5, #0]
 8016c4a:	b103      	cbz	r3, 8016c4e <_lseek_r+0x1e>
 8016c4c:	6023      	str	r3, [r4, #0]
 8016c4e:	bd38      	pop	{r3, r4, r5, pc}
 8016c50:	24005a28 	.word	0x24005a28

08016c54 <_read_r>:
 8016c54:	b538      	push	{r3, r4, r5, lr}
 8016c56:	4d07      	ldr	r5, [pc, #28]	; (8016c74 <_read_r+0x20>)
 8016c58:	4604      	mov	r4, r0
 8016c5a:	4608      	mov	r0, r1
 8016c5c:	4611      	mov	r1, r2
 8016c5e:	2200      	movs	r2, #0
 8016c60:	602a      	str	r2, [r5, #0]
 8016c62:	461a      	mov	r2, r3
 8016c64:	f7ec fd84 	bl	8003770 <_read>
 8016c68:	1c43      	adds	r3, r0, #1
 8016c6a:	d102      	bne.n	8016c72 <_read_r+0x1e>
 8016c6c:	682b      	ldr	r3, [r5, #0]
 8016c6e:	b103      	cbz	r3, 8016c72 <_read_r+0x1e>
 8016c70:	6023      	str	r3, [r4, #0]
 8016c72:	bd38      	pop	{r3, r4, r5, pc}
 8016c74:	24005a28 	.word	0x24005a28

08016c78 <_init>:
 8016c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c7a:	bf00      	nop
 8016c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c7e:	bc08      	pop	{r3}
 8016c80:	469e      	mov	lr, r3
 8016c82:	4770      	bx	lr

08016c84 <_fini>:
 8016c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c86:	bf00      	nop
 8016c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c8a:	bc08      	pop	{r3}
 8016c8c:	469e      	mov	lr, r3
 8016c8e:	4770      	bx	lr
