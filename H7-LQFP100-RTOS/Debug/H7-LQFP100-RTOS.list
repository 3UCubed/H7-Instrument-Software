
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08017490  08017490  00027490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080178c4  080178c4  000278c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080178cc  080178cc  000278cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080178d0  080178d0  000278d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  080178d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005970  24000120  080179dc  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a90  080179dc  00035a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ad3  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f2  00000000  00000000  00063c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  00069300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000323ad  00000000  00000000  000ae0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194c15  00000000  00000000  000e048b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002750a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0c8  00000000  00000000  002750f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017478 	.word	0x08017478

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017478 	.word	0x08017478

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c44 	.word	0x24000c44

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fe3c 	bl	8013294 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fe31 	bl	8013294 <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fe26 	bl	8013294 <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fe1b 	bl	8013294 <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fb59 	bl	8016d18 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c64 	.word	0x24000c64
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	080174fc 	.word	0x080174fc

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fe73 	bl	8010380 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 844b 	bhi.w	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cf1 	.word	0x08000cf1
 80006dc:	08000d23 	.word	0x08000d23
 80006e0:	08000d61 	.word	0x08000d61
 80006e4:	08000e71 	.word	0x08000e71
 80006e8:	08000ed3 	.word	0x08000ed3
 80006ec:	08000efb 	.word	0x08000efb
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d07 	.word	0x08000d07
 8000720:	08000d39 	.word	0x08000d39
 8000724:	08000e35 	.word	0x08000e35
 8000728:	08000eab 	.word	0x08000eab
 800072c:	08000f3f 	.word	0x08000f3f
 8000730:	08000f3f 	.word	0x08000f3f
 8000734:	08000f3f 	.word	0x08000f3f
 8000738:	08000f3f 	.word	0x08000f3f
 800073c:	08000f3f 	.word	0x08000f3f
 8000740:	08000f3f 	.word	0x08000f3f
 8000744:	08000f3f 	.word	0x08000f3f
 8000748:	08000f3f 	.word	0x08000f3f
 800074c:	08000f3f 	.word	0x08000f3f
 8000750:	08000f3f 	.word	0x08000f3f
 8000754:	08000f3f 	.word	0x08000f3f
 8000758:	08000f3f 	.word	0x08000f3f
 800075c:	08000f3f 	.word	0x08000f3f
 8000760:	08000f3f 	.word	0x08000f3f
 8000764:	08000f3f 	.word	0x08000f3f
 8000768:	08000f3f 	.word	0x08000f3f
 800076c:	08000f3f 	.word	0x08000f3f
 8000770:	08000f3f 	.word	0x08000f3f
 8000774:	08000f3f 	.word	0x08000f3f
 8000778:	08000f3f 	.word	0x08000f3f
 800077c:	08000f3f 	.word	0x08000f3f
 8000780:	08000f3f 	.word	0x08000f3f
 8000784:	08000f3f 	.word	0x08000f3f
 8000788:	08000f3f 	.word	0x08000f3f
 800078c:	08000f3f 	.word	0x08000f3f
 8000790:	08000f3f 	.word	0x08000f3f
 8000794:	08000f3f 	.word	0x08000f3f
 8000798:	08000f3f 	.word	0x08000f3f
 800079c:	08000f3f 	.word	0x08000f3f
 80007a0:	08000f3f 	.word	0x08000f3f
 80007a4:	08000f3f 	.word	0x08000f3f
 80007a8:	08000f3f 	.word	0x08000f3f
 80007ac:	08000f3f 	.word	0x08000f3f
 80007b0:	08000f3f 	.word	0x08000f3f
 80007b4:	08000f3f 	.word	0x08000f3f
 80007b8:	08000f3f 	.word	0x08000f3f
 80007bc:	08000f3f 	.word	0x08000f3f
 80007c0:	08000f3f 	.word	0x08000f3f
 80007c4:	08000f3f 	.word	0x08000f3f
 80007c8:	08000f3f 	.word	0x08000f3f
 80007cc:	08000f3f 	.word	0x08000f3f
 80007d0:	08000f3f 	.word	0x08000f3f
 80007d4:	08000f3f 	.word	0x08000f3f
 80007d8:	08000f3f 	.word	0x08000f3f
 80007dc:	08000f3f 	.word	0x08000f3f
 80007e0:	08000f3f 	.word	0x08000f3f
 80007e4:	08000f3f 	.word	0x08000f3f
 80007e8:	08000f3f 	.word	0x08000f3f
 80007ec:	08000f3f 	.word	0x08000f3f
 80007f0:	08000f3f 	.word	0x08000f3f
 80007f4:	08000f3f 	.word	0x08000f3f
 80007f8:	08000f3f 	.word	0x08000f3f
 80007fc:	08000f3f 	.word	0x08000f3f
 8000800:	08000f3f 	.word	0x08000f3f
 8000804:	08000f3f 	.word	0x08000f3f
 8000808:	08000f3f 	.word	0x08000f3f
 800080c:	08000f3f 	.word	0x08000f3f
 8000810:	08000f3f 	.word	0x08000f3f
 8000814:	08000f3f 	.word	0x08000f3f
 8000818:	08000f3f 	.word	0x08000f3f
 800081c:	08000f3f 	.word	0x08000f3f
 8000820:	08000f3f 	.word	0x08000f3f
 8000824:	08000f3f 	.word	0x08000f3f
 8000828:	08000f3f 	.word	0x08000f3f
 800082c:	08000f3f 	.word	0x08000f3f
 8000830:	08000f3f 	.word	0x08000f3f
 8000834:	08000f3f 	.word	0x08000f3f
 8000838:	08000f3f 	.word	0x08000f3f
 800083c:	08000f3f 	.word	0x08000f3f
 8000840:	08000f3f 	.word	0x08000f3f
 8000844:	08000f3f 	.word	0x08000f3f
 8000848:	08000f3f 	.word	0x08000f3f
 800084c:	08000f3f 	.word	0x08000f3f
 8000850:	08000f3f 	.word	0x08000f3f
 8000854:	08000f3f 	.word	0x08000f3f
 8000858:	08000f3f 	.word	0x08000f3f
 800085c:	08000f3f 	.word	0x08000f3f
 8000860:	08000f3f 	.word	0x08000f3f
 8000864:	08000f3f 	.word	0x08000f3f
 8000868:	08000f3f 	.word	0x08000f3f
 800086c:	08000f3f 	.word	0x08000f3f
 8000870:	08000f3f 	.word	0x08000f3f
 8000874:	08000f3f 	.word	0x08000f3f
 8000878:	08000f3f 	.word	0x08000f3f
 800087c:	08000f3f 	.word	0x08000f3f
 8000880:	08000f3f 	.word	0x08000f3f
 8000884:	08000f3f 	.word	0x08000f3f
 8000888:	08000f3f 	.word	0x08000f3f
 800088c:	08000f3f 	.word	0x08000f3f
 8000890:	08000f3f 	.word	0x08000f3f
 8000894:	08000f3f 	.word	0x08000f3f
 8000898:	08000f3f 	.word	0x08000f3f
 800089c:	08000f3f 	.word	0x08000f3f
 80008a0:	08000f3f 	.word	0x08000f3f
 80008a4:	08000f3f 	.word	0x08000f3f
 80008a8:	08000f3f 	.word	0x08000f3f
 80008ac:	08000f3f 	.word	0x08000f3f
 80008b0:	08000f3f 	.word	0x08000f3f
 80008b4:	08000f3f 	.word	0x08000f3f
 80008b8:	08000f3f 	.word	0x08000f3f
 80008bc:	08000f3f 	.word	0x08000f3f
 80008c0:	08000f3f 	.word	0x08000f3f
 80008c4:	08000f3f 	.word	0x08000f3f
 80008c8:	08000f3f 	.word	0x08000f3f
 80008cc:	08000f3f 	.word	0x08000f3f
 80008d0:	08000f3f 	.word	0x08000f3f
 80008d4:	08000f3f 	.word	0x08000f3f
 80008d8:	08000f3f 	.word	0x08000f3f
 80008dc:	08000f3f 	.word	0x08000f3f
 80008e0:	08000f3f 	.word	0x08000f3f
 80008e4:	08000f3f 	.word	0x08000f3f
 80008e8:	08000f3f 	.word	0x08000f3f
 80008ec:	08000f3f 	.word	0x08000f3f
 80008f0:	08000f3f 	.word	0x08000f3f
 80008f4:	08000f3f 	.word	0x08000f3f
 80008f8:	08000f3f 	.word	0x08000f3f
 80008fc:	08000f3f 	.word	0x08000f3f
 8000900:	08000f3f 	.word	0x08000f3f
 8000904:	08000f3f 	.word	0x08000f3f
 8000908:	08000f3f 	.word	0x08000f3f
 800090c:	08000f3f 	.word	0x08000f3f
 8000910:	08000f3f 	.word	0x08000f3f
 8000914:	08000f3f 	.word	0x08000f3f
 8000918:	08000f3f 	.word	0x08000f3f
 800091c:	08000f3f 	.word	0x08000f3f
 8000920:	08000f3f 	.word	0x08000f3f
 8000924:	08000f3f 	.word	0x08000f3f
 8000928:	08000f3f 	.word	0x08000f3f
 800092c:	08000f3f 	.word	0x08000f3f
 8000930:	08000f3f 	.word	0x08000f3f
 8000934:	08000f3f 	.word	0x08000f3f
 8000938:	08000f3f 	.word	0x08000f3f
 800093c:	08000f3f 	.word	0x08000f3f
 8000940:	08000f3f 	.word	0x08000f3f
 8000944:	08000f3f 	.word	0x08000f3f
 8000948:	08000f3f 	.word	0x08000f3f
 800094c:	08000f3f 	.word	0x08000f3f
 8000950:	08000f3f 	.word	0x08000f3f
 8000954:	08000f3f 	.word	0x08000f3f
 8000958:	08000f3f 	.word	0x08000f3f
 800095c:	08000f3f 	.word	0x08000f3f
 8000960:	08000f3f 	.word	0x08000f3f
 8000964:	08000f3f 	.word	0x08000f3f
 8000968:	08000f3f 	.word	0x08000f3f
 800096c:	08000f33 	.word	0x08000f33
 8000970:	08000f3f 	.word	0x08000f3f
 8000974:	08000f3f 	.word	0x08000f3f
 8000978:	08000f3f 	.word	0x08000f3f
 800097c:	08000f3f 	.word	0x08000f3f
 8000980:	08000f3f 	.word	0x08000f3f
 8000984:	08000f3f 	.word	0x08000f3f
 8000988:	08000f3f 	.word	0x08000f3f
 800098c:	08000f3f 	.word	0x08000f3f
 8000990:	08000f3f 	.word	0x08000f3f
 8000994:	08000f3f 	.word	0x08000f3f
 8000998:	08000f3f 	.word	0x08000f3f
 800099c:	08000f3f 	.word	0x08000f3f
 80009a0:	08000f3f 	.word	0x08000f3f
 80009a4:	08000f3f 	.word	0x08000f3f
 80009a8:	08000f3f 	.word	0x08000f3f
 80009ac:	08000f39 	.word	0x08000f39
 80009b0:	08000f3f 	.word	0x08000f3f
 80009b4:	08000f3f 	.word	0x08000f3f
 80009b8:	08000f3f 	.word	0x08000f3f
 80009bc:	08000f3f 	.word	0x08000f3f
 80009c0:	08000f3f 	.word	0x08000f3f
 80009c4:	08000f3f 	.word	0x08000f3f
 80009c8:	08000f3f 	.word	0x08000f3f
 80009cc:	08000f3f 	.word	0x08000f3f
 80009d0:	08000f3f 	.word	0x08000f3f
 80009d4:	08000f3f 	.word	0x08000f3f
 80009d8:	08000f3f 	.word	0x08000f3f
 80009dc:	08000f3f 	.word	0x08000f3f
 80009e0:	08000f3f 	.word	0x08000f3f
 80009e4:	08000f3f 	.word	0x08000f3f
 80009e8:	08000f3f 	.word	0x08000f3f
 80009ec:	08000f3f 	.word	0x08000f3f
 80009f0:	08000f21 	.word	0x08000f21
 80009f4:	08000f3f 	.word	0x08000f3f
 80009f8:	08000f3f 	.word	0x08000f3f
 80009fc:	08000f3f 	.word	0x08000f3f
 8000a00:	08000f3f 	.word	0x08000f3f
 8000a04:	08000f3f 	.word	0x08000f3f
 8000a08:	08000f3f 	.word	0x08000f3f
 8000a0c:	08000f3f 	.word	0x08000f3f
 8000a10:	08000f3f 	.word	0x08000f3f
 8000a14:	08000f3f 	.word	0x08000f3f
 8000a18:	08000f3f 	.word	0x08000f3f
 8000a1c:	08000f3f 	.word	0x08000f3f
 8000a20:	08000f3f 	.word	0x08000f3f
 8000a24:	08000f3f 	.word	0x08000f3f
 8000a28:	08000f3f 	.word	0x08000f3f
 8000a2c:	08000f3f 	.word	0x08000f3f
 8000a30:	08000f0f 	.word	0x08000f0f
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f96f 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fbb9 	bl	80091b8 <HAL_GPIO_WritePin>
		break;
 8000a46:	e285      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f965 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fbaf 	bl	80091b8 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e27b      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
 8000a5c:	24000c68 	.word	0x24000c68
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017514 	.word	0x08017514
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	0801751c 	.word	0x0801751c
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48c1      	ldr	r0, [pc, #772]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a72:	f016 f951 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bc1      	ldr	r3, [pc, #772]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fb9b 	bl	80091b8 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbf      	ldr	r3, [pc, #764]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e264      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48be      	ldr	r0, [pc, #760]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000a8c:	f016 f944 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bba      	ldr	r3, [pc, #744]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fb8e 	bl	80091b8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb7      	ldr	r3, [pc, #732]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fb88 	bl	80091b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb7      	ldr	r3, [pc, #732]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fb81 	bl	80091b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb4      	ldr	r3, [pc, #720]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fb7a 	bl	80091b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bb0      	ldr	r3, [pc, #704]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 fb73 	bl	80091b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4bad      	ldr	r3, [pc, #692]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fb6d 	bl	80091b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4baa      	ldr	r3, [pc, #680]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fb67 	bl	80091b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba7      	ldr	r3, [pc, #668]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fb60 	bl	80091b8 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4ba1      	ldr	r3, [pc, #644]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba3      	ldr	r3, [pc, #652]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4ba2      	ldr	r3, [pc, #648]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4ba2      	ldr	r3, [pc, #648]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4ba0      	ldr	r3, [pc, #640]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9f      	ldr	r3, [pc, #636]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e211      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489e      	ldr	r0, [pc, #632]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b32:	f016 f8f1 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b94      	ldr	r3, [pc, #592]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fb3a 	bl	80091b8 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b91      	ldr	r3, [pc, #580]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e203      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4898      	ldr	r0, [pc, #608]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b4e:	f016 f8e3 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8d      	ldr	r3, [pc, #564]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fb2c 	bl	80091b8 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1f5      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	4892      	ldr	r0, [pc, #584]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000b6a:	f016 f8d5 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fb1f 	bl	80091b8 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b85      	ldr	r3, [pc, #532]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1e8      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488d      	ldr	r0, [pc, #564]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000b84:	f016 f8c8 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fb12 	bl	80091b8 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1db      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4887      	ldr	r0, [pc, #540]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000b9e:	f016 f8bb 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b79      	ldr	r3, [pc, #484]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fb05 	bl	80091b8 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1ce      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	4882      	ldr	r0, [pc, #520]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000bb8:	f016 f8ae 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 faf8 	bl	80091b8 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b72      	ldr	r3, [pc, #456]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1c1      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	487c      	ldr	r0, [pc, #496]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000bd2:	f016 f8a1 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 faea 	bl	80091b8 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1b3      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4876      	ldr	r0, [pc, #472]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000bee:	f016 f893 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fadc 	bl	80091b8 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e1a5      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c0a:	f016 f885 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 face 	bl	80091b8 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e197      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	486a      	ldr	r0, [pc, #424]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c26:	f016 f877 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fac0 	bl	80091b8 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e189      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4864      	ldr	r0, [pc, #400]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c42:	f016 f869 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fab2 	bl	80091b8 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e17b      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485e      	ldr	r0, [pc, #376]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000c5e:	f016 f85b 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 faa4 	bl	80091b8 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e16d      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4858      	ldr	r0, [pc, #352]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000c7a:	f016 f84d 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fa97 	bl	80091b8 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e160      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4853      	ldr	r0, [pc, #332]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000c94:	f016 f840 	bl	8016d18 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 fa8a 	bl	80091b8 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e153      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484d      	ldr	r0, [pc, #308]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cae:	f016 f833 	bl	8016d18 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a4b      	ldr	r2, [pc, #300]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	484b      	ldr	r0, [pc, #300]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cbe:	f004 fedf 	bl	8005a80 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e147      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	484a      	ldr	r0, [pc, #296]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000cc6:	f016 f827 	bl	8016d18 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4847      	ldr	r0, [pc, #284]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cce:	f004 ff97 	bl	8005c00 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e13f      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cd6:	f016 f81f 	bl	8016d18 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4846      	ldr	r0, [pc, #280]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cde:	f00d fe6f 	bl	800e9c0 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000ce8:	4b45      	ldr	r3, [pc, #276]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
		break;
 8000cee:	e131      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cf0:	4844      	ldr	r0, [pc, #272]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000cf2:	f016 f811 	bl	8016d18 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	483f      	ldr	r0, [pc, #252]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cfa:	f00d ffbb 	bl	800ec74 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
		break;
 8000d04:	e126      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d06:	4840      	ldr	r0, [pc, #256]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000d08:	f016 f806 	bl	8016d18 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	483f      	ldr	r0, [pc, #252]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d10:	f00d fe56 	bl	800e9c0 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000d14:	4b3e      	ldr	r3, [pc, #248]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d1a:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
		break;
 8000d20:	e118      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d22:	483d      	ldr	r0, [pc, #244]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d24:	f015 fff8 	bl	8016d18 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4838      	ldr	r0, [pc, #224]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d2c:	f00d ffa2 	bl	800ec74 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d30:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		break;
 8000d36:	e10d      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d38:	4838      	ldr	r0, [pc, #224]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d3a:	f015 ffed 	bl	8016d18 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4837      	ldr	r0, [pc, #220]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d42:	f00d fe3d 	bl	800e9c0 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <HAL_UART_RxCpltCallback+0x79c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f012 faa1 	bl	8013294 <osEventFlagsSet>
		HK_ON = 1;
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <HAL_UART_RxCpltCallback+0x7a0>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d58:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <HAL_UART_RxCpltCallback+0x7a4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
		break;
 8000d5e:	e0f9      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d60:	4833      	ldr	r0, [pc, #204]	; (8000e30 <HAL_UART_RxCpltCallback+0x7a8>)
 8000d62:	f015 ffd9 	bl	8016d18 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000d66:	2100      	movs	r1, #0
 8000d68:	482d      	ldr	r0, [pc, #180]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d6a:	f00d ff83 	bl	800ec74 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <HAL_UART_RxCpltCallback+0x7a0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		break;
 8000d74:	e0ee      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
 8000d76:	bf00      	nop
 8000d78:	08017528 	.word	0x08017528
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	24000c1c 	.word	0x24000c1c
 8000d84:	08017534 	.word	0x08017534
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	24000c1d 	.word	0x24000c1d
 8000d90:	24000c1e 	.word	0x24000c1e
 8000d94:	24000c1f 	.word	0x24000c1f
 8000d98:	24000c20 	.word	0x24000c20
 8000d9c:	24000c21 	.word	0x24000c21
 8000da0:	24000c22 	.word	0x24000c22
 8000da4:	24000c23 	.word	0x24000c23
 8000da8:	24000c24 	.word	0x24000c24
 8000dac:	08017540 	.word	0x08017540
 8000db0:	0801754c 	.word	0x0801754c
 8000db4:	0801755c 	.word	0x0801755c
 8000db8:	08017568 	.word	0x08017568
 8000dbc:	08017574 	.word	0x08017574
 8000dc0:	08017580 	.word	0x08017580
 8000dc4:	08017590 	.word	0x08017590
 8000dc8:	0801759c 	.word	0x0801759c
 8000dcc:	080175a8 	.word	0x080175a8
 8000dd0:	080175b4 	.word	0x080175b4
 8000dd4:	080175c0 	.word	0x080175c0
 8000dd8:	080175d0 	.word	0x080175d0
 8000ddc:	080175e0 	.word	0x080175e0
 8000de0:	080175ec 	.word	0x080175ec
 8000de4:	080175fc 	.word	0x080175fc
 8000de8:	24000010 	.word	0x24000010
 8000dec:	240002f4 	.word	0x240002f4
 8000df0:	0801760c 	.word	0x0801760c
 8000df4:	0801761c 	.word	0x0801761c
 8000df8:	24000554 	.word	0x24000554
 8000dfc:	24000c5f 	.word	0x24000c5f
 8000e00:	24000c58 	.word	0x24000c58
 8000e04:	08017624 	.word	0x08017624
 8000e08:	08017630 	.word	0x08017630
 8000e0c:	24000508 	.word	0x24000508
 8000e10:	24000c5e 	.word	0x24000c5e
 8000e14:	24000c54 	.word	0x24000c54
 8000e18:	08017638 	.word	0x08017638
 8000e1c:	08017640 	.word	0x08017640
 8000e20:	240005a0 	.word	0x240005a0
 8000e24:	24000c64 	.word	0x24000c64
 8000e28:	24000c60 	.word	0x24000c60
 8000e2c:	24000c5c 	.word	0x24000c5c
 8000e30:	08017648 	.word	0x08017648
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e34:	4849      	ldr	r0, [pc, #292]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e36:	f015 ff6f 	bl	8016d18 <puts>
		if (step < 17) {
 8000e3a:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	f200 8081 	bhi.w	8000f46 <HAL_UART_RxCpltCallback+0x8be>
			step += 2;
 8000e44:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3302      	adds	r3, #2
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e4e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e50:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4841      	ldr	r0, [pc, #260]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000e62:	f004 ff70 	bl	8005d46 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e66:	2100      	movs	r1, #0
 8000e68:	483f      	ldr	r0, [pc, #252]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000e6a:	f004 fdb1 	bl	80059d0 <HAL_DAC_Start>
		}
		break;
 8000e6e:	e06a      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e70:	483e      	ldr	r0, [pc, #248]	; (8000f6c <HAL_UART_RxCpltCallback+0x8e4>)
 8000e72:	f015 ff51 	bl	8016d18 <puts>
		if (step > 3) {
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d965      	bls.n	8000f4a <HAL_UART_RxCpltCallback+0x8c2>
			step -= 2;
 8000e7e:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3b02      	subs	r3, #2
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e88:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e8a:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4833      	ldr	r0, [pc, #204]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000e9c:	f004 ff53 	bl	8005d46 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4831      	ldr	r0, [pc, #196]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000ea4:	f004 fd94 	bl	80059d0 <HAL_DAC_Start>
		}
		break;
 8000ea8:	e04f      	b.n	8000f4a <HAL_UART_RxCpltCallback+0x8c2>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000eaa:	4831      	ldr	r0, [pc, #196]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000eac:	f015 ff34 	bl	8016d18 <puts>
		if (cadence <= 50000) {
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d848      	bhi.n	8000f4e <HAL_UART_RxCpltCallback+0x8c6>
			cadence *= 2;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000ec4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ed0:	e03d      	b.n	8000f4e <HAL_UART_RxCpltCallback+0x8c6>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ed2:	4829      	ldr	r0, [pc, #164]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000ed4:	f015 ff20 	bl	8016d18 <puts>
		if (cadence >= 6250) {
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d936      	bls.n	8000f52 <HAL_UART_RxCpltCallback+0x8ca>
			cadence /= 2;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	085b      	lsrs	r3, r3, #1
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000eec:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000eee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ef8:	e02b      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x8ca>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000efa:	4820      	ldr	r0, [pc, #128]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000efc:	f015 ff0c 	bl	8016d18 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2116      	movs	r1, #22
 8000f06:	4618      	mov	r0, r3
 8000f08:	f012 f9c4 	bl	8013294 <osEventFlagsSet>
		break;
 8000f0c:	e022      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000f0e:	481d      	ldr	r0, [pc, #116]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000f10:	f015 ff02 	bl	8016d18 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f013 ff61 	bl	8014de0 <xTaskResumeFromISR>
		break;
 8000f1e:	e019      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f20:	481a      	ldr	r0, [pc, #104]	; (8000f8c <HAL_UART_RxCpltCallback+0x904>)
 8000f22:	f015 fef9 	bl	8016d18 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f013 ff58 	bl	8014de0 <xTaskResumeFromISR>
		break;
 8000f30:	e010      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0xAF: {
		sync();
 8000f32:	f001 fa17 	bl	8002364 <sync>
		break;
 8000f36:	e00d      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0xBF: {
		enter_flight_mode();
 8000f38:	f001 f8e8 	bl	800210c <enter_flight_mode>
		break;
 8000f3c:	e00a      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
	}
	default: {
		printf("Unknown Command\n");
 8000f3e:	4815      	ldr	r0, [pc, #84]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000f40:	f015 feea 	bl	8016d18 <puts>
		break;
 8000f44:	e006      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
		break;
 8000f46:	bf00      	nop
 8000f48:	e004      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
		break;
 8000f4a:	bf00      	nop
 8000f4c:	e002      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
		break;
 8000f4e:	bf00      	nop
 8000f50:	e000      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8cc>
		break;
 8000f52:	bf00      	nop
	}
	}
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08017650 	.word	0x08017650
 8000f60:	2400000c 	.word	0x2400000c
 8000f64:	24000010 	.word	0x24000010
 8000f68:	240002f4 	.word	0x240002f4
 8000f6c:	08017658 	.word	0x08017658
 8000f70:	08017664 	.word	0x08017664
 8000f74:	24000008 	.word	0x24000008
 8000f78:	08017670 	.word	0x08017670
 8000f7c:	0801767c 	.word	0x0801767c
 8000f80:	24000c64 	.word	0x24000c64
 8000f84:	0801768c 	.word	0x0801768c
 8000f88:	24000750 	.word	0x24000750
 8000f8c:	08017698 	.word	0x08017698
 8000f90:	240009b0 	.word	0x240009b0
 8000f94:	080176a4 	.word	0x080176a4

08000f98 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f9c:	f002 ff84 	bl	8003ea8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fa0:	f000 f8ac 	bl	80010fc <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000fa4:	f000 f92a 	bl	80011fc <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fa8:	f000 feee 	bl	8001d88 <MX_GPIO_Init>
	MX_DMA_Init();
 8000fac:	f000 feb4 	bl	8001d18 <MX_DMA_Init>
	MX_TIM3_Init();
 8000fb0:	f000 fdac 	bl	8001b0c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000fb4:	f000 fe48 	bl	8001c48 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000fb8:	f000 fb36 	bl	8001628 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000fbc:	f000 fc2c 	bl	8001818 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000fc0:	f000 fd2e 	bl	8001a20 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000fc4:	f000 fc80 	bl	80018c8 <MX_TIM1_Init>
	MX_ADC3_Init();
 8000fc8:	f000 fa6a 	bl	80014a0 <MX_ADC3_Init>
	MX_ADC1_Init();
 8000fcc:	f000 f946 	bl	800125c <MX_ADC1_Init>
	MX_DAC1_Init();
 8000fd0:	f000 faf8 	bl	80015c4 <MX_DAC1_Init>
	MX_SPI1_Init();
 8000fd4:	f000 fbc8 	bl	8001768 <MX_SPI1_Init>
	MX_RTC_Init();
 8000fd8:	f000 fb68 	bl	80016ac <MX_RTC_Init>
	MX_TIM4_Init();
 8000fdc:	f000 fde6 	bl	8001bac <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000fe0:	f011 ffe0 	bl	8012fa4 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	2080      	movs	r0, #128	; 0x80
 8000fea:	f012 fa50 	bl	801348e <osMessageQueueNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <main+0xf8>)
 8000ff2:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PMT_task */
	PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000ff4:	4a27      	ldr	r2, [pc, #156]	; (8001094 <main+0xfc>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4827      	ldr	r0, [pc, #156]	; (8001098 <main+0x100>)
 8000ffa:	f012 f81d 	bl	8013038 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <main+0x104>)
 8001002:	6013      	str	r3, [r2, #0]

	/* creation of ERPA_task */
	ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8001004:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <main+0x108>)
 8001006:	2100      	movs	r1, #0
 8001008:	4826      	ldr	r0, [pc, #152]	; (80010a4 <main+0x10c>)
 800100a:	f012 f815 	bl	8013038 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <main+0x110>)
 8001012:	6013      	str	r3, [r2, #0]

	/* creation of HK_task */
	HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <main+0x114>)
 8001016:	2100      	movs	r1, #0
 8001018:	4825      	ldr	r0, [pc, #148]	; (80010b0 <main+0x118>)
 800101a:	f012 f80d 	bl	8013038 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <main+0x11c>)
 8001022:	6013      	str	r3, [r2, #0]

	/* creation of GPIO_on_task */
	GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL,
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <main+0x120>)
 8001026:	2100      	movs	r1, #0
 8001028:	4824      	ldr	r0, [pc, #144]	; (80010bc <main+0x124>)
 800102a:	f012 f805 	bl	8013038 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <main+0x128>)
 8001032:	6013      	str	r3, [r2, #0]
			&GPIO_on_task_attributes);

	/* creation of GPIO_off_task */
	GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL,
 8001034:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <main+0x12c>)
 8001036:	2100      	movs	r1, #0
 8001038:	4823      	ldr	r0, [pc, #140]	; (80010c8 <main+0x130>)
 800103a:	f011 fffd 	bl	8013038 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a22      	ldr	r2, [pc, #136]	; (80010cc <main+0x134>)
 8001042:	6013      	str	r3, [r2, #0]
			&GPIO_off_task_attributes);

	/* creation of UART_TX_task */
	UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL,
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <main+0x138>)
 8001046:	2100      	movs	r1, #0
 8001048:	4822      	ldr	r0, [pc, #136]	; (80010d4 <main+0x13c>)
 800104a:	f011 fff5 	bl	8013038 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <main+0x140>)
 8001052:	6013      	str	r3, [r2, #0]
			&UART_TX_task_attributes);

	/* creation of Voltage_Monitor */
	Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL,
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <main+0x144>)
 8001056:	2100      	movs	r1, #0
 8001058:	4821      	ldr	r0, [pc, #132]	; (80010e0 <main+0x148>)
 800105a:	f011 ffed 	bl	8013038 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a20      	ldr	r2, [pc, #128]	; (80010e4 <main+0x14c>)
 8001062:	6013      	str	r3, [r2, #0]
			&Voltage_Monitor_attributes);

	/* creation of FLAG_task */
	FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <main+0x150>)
 8001066:	2100      	movs	r1, #0
 8001068:	4820      	ldr	r0, [pc, #128]	; (80010ec <main+0x154>)
 800106a:	f011 ffe5 	bl	8013038 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <main+0x158>)
 8001072:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001074:	2000      	movs	r0, #0
 8001076:	f012 f8cd 	bl	8013214 <osEventFlagsNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <main+0x15c>)
 800107e:	6013      	str	r3, [r2, #0]
	system_setup();
 8001080:	f001 f9da 	bl	8002438 <system_setup>
	printf("Starting kernal...\n");
 8001084:	481c      	ldr	r0, [pc, #112]	; (80010f8 <main+0x160>)
 8001086:	f015 fe47 	bl	8016d18 <puts>

	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800108a:	f011 ffaf 	bl	8012fec <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800108e:	e7fe      	b.n	800108e <main+0xf6>
 8001090:	24000c48 	.word	0x24000c48
 8001094:	08017700 	.word	0x08017700
 8001098:	08002bfd 	.word	0x08002bfd
 800109c:	24000744 	.word	0x24000744
 80010a0:	08017724 	.word	0x08017724
 80010a4:	08002c41 	.word	0x08002c41
 80010a8:	24000748 	.word	0x24000748
 80010ac:	08017748 	.word	0x08017748
 80010b0:	08002c81 	.word	0x08002c81
 80010b4:	2400074c 	.word	0x2400074c
 80010b8:	0801776c 	.word	0x0801776c
 80010bc:	08002cc5 	.word	0x08002cc5
 80010c0:	24000750 	.word	0x24000750
 80010c4:	08017790 	.word	0x08017790
 80010c8:	08002d6d 	.word	0x08002d6d
 80010cc:	240009b0 	.word	0x240009b0
 80010d0:	080177b4 	.word	0x080177b4
 80010d4:	08002e15 	.word	0x08002e15
 80010d8:	24000c10 	.word	0x24000c10
 80010dc:	080177d8 	.word	0x080177d8
 80010e0:	08002ecd 	.word	0x08002ecd
 80010e4:	24000c14 	.word	0x24000c14
 80010e8:	080177fc 	.word	0x080177fc
 80010ec:	08002fc5 	.word	0x08002fc5
 80010f0:	24000c18 	.word	0x24000c18
 80010f4:	24000c64 	.word	0x24000c64
 80010f8:	080176b4 	.word	0x080176b4

080010fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09c      	sub	sp, #112	; 0x70
 8001100:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	224c      	movs	r2, #76	; 0x4c
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f015 fcae 	bl	8016a6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2220      	movs	r2, #32
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f015 fca8 	bl	8016a6c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800111c:	2002      	movs	r0, #2
 800111e:	f008 fead 	bl	8009e7c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <SystemClock_Config+0xf8>)
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <SystemClock_Config+0xf8>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <SystemClock_Config+0xf8>)
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <SystemClock_Config+0xfc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001144:	4a2c      	ldr	r2, [pc, #176]	; (80011f8 <SystemClock_Config+0xfc>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <SystemClock_Config+0xfc>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001158:	bf00      	nop
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SystemClock_Config+0xfc>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001166:	d1f8      	bne.n	800115a <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001168:	2303      	movs	r3, #3
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001172:	2309      	movs	r3, #9
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2340      	movs	r3, #64	; 0x40
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	2302      	movs	r3, #2
 8001180:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001182:	2304      	movs	r3, #4
 8001184:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 32;
 8001186:	2320      	movs	r3, #32
 8001188:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 4;
 800118a:	2304      	movs	r3, #4
 800118c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800118e:	2304      	movs	r3, #4
 8001190:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001196:	2308      	movs	r3, #8
 8001198:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800119a:	2300      	movs	r3, #0
 800119c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4618      	mov	r0, r3
 80011a8:	f008 fea2 	bl	8009ef0 <HAL_RCC_OscConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0xba>
		Error_Handler();
 80011b2:	f001 ff37 	bl	8003024 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011b6:	233f      	movs	r3, #63	; 0x3f
 80011b8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ba:	2303      	movs	r3, #3
 80011bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2101      	movs	r1, #1
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 fae2 	bl	800a7a4 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xee>
		Error_Handler();
 80011e6:	f001 ff1d 	bl	8003024 <Error_Handler>
	}
}
 80011ea:	bf00      	nop
 80011ec:	3770      	adds	r7, #112	; 0x70
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	58000400 	.word	0x58000400
 80011f8:	58024800 	.word	0x58024800

080011fc <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0b0      	sub	sp, #192	; 0xc0
 8001200:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001202:	463b      	mov	r3, r7
 8001204:	22c0      	movs	r2, #192	; 0xc0
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f015 fc2f 	bl	8016a6c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800120e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800121a:	2304      	movs	r3, #4
 800121c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 32;
 800121e:	2320      	movs	r3, #32
 8001220:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001222:	2308      	movs	r3, #8
 8001224:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001226:	2304      	movs	r3, #4
 8001228:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001240:	463b      	mov	r3, r7
 8001242:	4618      	mov	r0, r3
 8001244:	f009 fe7c 	bl	800af40 <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <PeriphCommonClock_Config+0x56>
		Error_Handler();
 800124e:	f001 fee9 	bl	8003024 <Error_Handler>
	}
}
 8001252:	bf00      	nop
 8001254:	37c0      	adds	r7, #192	; 0xc0
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001280:	4b7a      	ldr	r3, [pc, #488]	; (800146c <MX_ADC1_Init+0x210>)
 8001282:	4a7b      	ldr	r2, [pc, #492]	; (8001470 <MX_ADC1_Init+0x214>)
 8001284:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001286:	4b79      	ldr	r3, [pc, #484]	; (800146c <MX_ADC1_Init+0x210>)
 8001288:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800128c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128e:	4b77      	ldr	r3, [pc, #476]	; (800146c <MX_ADC1_Init+0x210>)
 8001290:	2208      	movs	r2, #8
 8001292:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001294:	4b75      	ldr	r3, [pc, #468]	; (800146c <MX_ADC1_Init+0x210>)
 8001296:	2201      	movs	r2, #1
 8001298:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129a:	4b74      	ldr	r3, [pc, #464]	; (800146c <MX_ADC1_Init+0x210>)
 800129c:	2204      	movs	r2, #4
 800129e:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80012a0:	4b72      	ldr	r3, [pc, #456]	; (800146c <MX_ADC1_Init+0x210>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80012a6:	4b71      	ldr	r3, [pc, #452]	; (800146c <MX_ADC1_Init+0x210>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 11;
 80012ac:	4b6f      	ldr	r3, [pc, #444]	; (800146c <MX_ADC1_Init+0x210>)
 80012ae:	220b      	movs	r2, #11
 80012b0:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b2:	4b6e      	ldr	r3, [pc, #440]	; (800146c <MX_ADC1_Init+0x210>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b8:	4b6c      	ldr	r3, [pc, #432]	; (800146c <MX_ADC1_Init+0x210>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012be:	4b6b      	ldr	r3, [pc, #428]	; (800146c <MX_ADC1_Init+0x210>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012c4:	4b69      	ldr	r3, [pc, #420]	; (800146c <MX_ADC1_Init+0x210>)
 80012c6:	2203      	movs	r2, #3
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ca:	4b68      	ldr	r3, [pc, #416]	; (800146c <MX_ADC1_Init+0x210>)
 80012cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <MX_ADC1_Init+0x210>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <MX_ADC1_Init+0x210>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80012e0:	4862      	ldr	r0, [pc, #392]	; (800146c <MX_ADC1_Init+0x210>)
 80012e2:	f003 f86d 	bl	80043c0 <HAL_ADC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x94>
		Error_Handler();
 80012ec:	f001 fe9a 	bl	8003024 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	485c      	ldr	r0, [pc, #368]	; (800146c <MX_ADC1_Init+0x210>)
 80012fc:	f004 f988 	bl	8005610 <HAL_ADCEx_MultiModeConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC1_Init+0xae>
		Error_Handler();
 8001306:	f001 fe8d 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800130a:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <MX_ADC1_Init+0x218>)
 800130c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800130e:	2306      	movs	r3, #6
 8001310:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001312:	2307      	movs	r3, #7
 8001314:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001316:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800131a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131c:	2304      	movs	r3, #4
 800131e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	484f      	ldr	r0, [pc, #316]	; (800146c <MX_ADC1_Init+0x210>)
 800132e:	f003 facb 	bl	80048c8 <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0xe0>
		Error_Handler();
 8001338:	f001 fe74 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <MX_ADC1_Init+0x21c>)
 800133e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001340:	230c      	movs	r3, #12
 8001342:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4848      	ldr	r0, [pc, #288]	; (800146c <MX_ADC1_Init+0x210>)
 800134a:	f003 fabd 	bl	80048c8 <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0xfc>
		Error_Handler();
 8001354:	f001 fe66 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001358:	4b48      	ldr	r3, [pc, #288]	; (800147c <MX_ADC1_Init+0x220>)
 800135a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800135c:	2312      	movs	r3, #18
 800135e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	4841      	ldr	r0, [pc, #260]	; (800146c <MX_ADC1_Init+0x210>)
 8001366:	f003 faaf 	bl	80048c8 <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x118>
		Error_Handler();
 8001370:	f001 fe58 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <MX_ADC1_Init+0x224>)
 8001376:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001378:	2318      	movs	r3, #24
 800137a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	483a      	ldr	r0, [pc, #232]	; (800146c <MX_ADC1_Init+0x210>)
 8001382:	f003 faa1 	bl	80048c8 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x134>
		Error_Handler();
 800138c:	f001 fe4a 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <MX_ADC1_Init+0x228>)
 8001392:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8001394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001398:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4833      	ldr	r0, [pc, #204]	; (800146c <MX_ADC1_Init+0x210>)
 80013a0:	f003 fa92 	bl	80048c8 <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0x152>
		Error_Handler();
 80013aa:	f001 fe3b 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_ADC1_Init+0x22c>)
 80013b0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 80013b2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013b6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	482b      	ldr	r0, [pc, #172]	; (800146c <MX_ADC1_Init+0x210>)
 80013be:	f003 fa83 	bl	80048c8 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x170>
		Error_Handler();
 80013c8:	f001 fe2c 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <MX_ADC1_Init+0x230>)
 80013ce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 80013d0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013d4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4824      	ldr	r0, [pc, #144]	; (800146c <MX_ADC1_Init+0x210>)
 80013dc:	f003 fa74 	bl	80048c8 <HAL_ADC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_ADC1_Init+0x18e>
		Error_Handler();
 80013e6:	f001 fe1d 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 80013ea:	4b29      	ldr	r3, [pc, #164]	; (8001490 <MX_ADC1_Init+0x234>)
 80013ec:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_8;
 80013ee:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013f2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	481c      	ldr	r0, [pc, #112]	; (800146c <MX_ADC1_Init+0x210>)
 80013fa:	f003 fa65 	bl	80048c8 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0x1ac>
		Error_Handler();
 8001404:	f001 fe0e 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_ADC1_Init+0x238>)
 800140a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_9;
 800140c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001410:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4815      	ldr	r0, [pc, #84]	; (800146c <MX_ADC1_Init+0x210>)
 8001418:	f003 fa56 	bl	80048c8 <HAL_ADC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_ADC1_Init+0x1ca>
		Error_Handler();
 8001422:	f001 fdff 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_ADC1_Init+0x23c>)
 8001428:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_10;
 800142a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800142e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_ADC1_Init+0x210>)
 8001436:	f003 fa47 	bl	80048c8 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0x1e8>
		Error_Handler();
 8001440:	f001 fdf0 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_ADC1_Init+0x240>)
 8001446:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_11;
 8001448:	f240 2306 	movw	r3, #518	; 0x206
 800144c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_ADC1_Init+0x210>)
 8001454:	f003 fa38 	bl	80048c8 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0x206>
		Error_Handler();
 800145e:	f001 fde1 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2400013c 	.word	0x2400013c
 8001470:	40022000 	.word	0x40022000
 8001474:	0c900008 	.word	0x0c900008
 8001478:	10c00010 	.word	0x10c00010
 800147c:	14f00020 	.word	0x14f00020
 8001480:	1d500080 	.word	0x1d500080
 8001484:	21800100 	.word	0x21800100
 8001488:	25b00200 	.word	0x25b00200
 800148c:	2a000400 	.word	0x2a000400
 8001490:	2e300800 	.word	0x2e300800
 8001494:	3ac04000 	.word	0x3ac04000
 8001498:	3ef08000 	.word	0x3ef08000
 800149c:	47520000 	.word	0x47520000

080014a0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014ba:	4a3e      	ldr	r2, [pc, #248]	; (80015b4 <MX_ADC3_Init+0x114>)
 80014bc:	601a      	str	r2, [r3, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014c0:	2208      	movs	r2, #8
 80014c2:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	60da      	str	r2, [r3, #12]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ca:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014cc:	2204      	movs	r2, #4
 80014ce:	611a      	str	r2, [r3, #16]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	751a      	strb	r2, [r3, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014d8:	2201      	movs	r2, #1
 80014da:	755a      	strb	r2, [r3, #21]
	hadc3.Init.NbrOfConversion = 4;
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014de:	2204      	movs	r2, #4
 80014e0:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <MX_ADC3_Init+0x110>)
 80014fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <MX_ADC3_Init+0x110>)
 8001504:	2200      	movs	r2, #0
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <MX_ADC3_Init+0x110>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001510:	4827      	ldr	r0, [pc, #156]	; (80015b0 <MX_ADC3_Init+0x110>)
 8001512:	f002 ff55 	bl	80043c0 <HAL_ADC_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_ADC3_Init+0x80>
		Error_Handler();
 800151c:	f001 fd82 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <MX_ADC3_Init+0x118>)
 8001522:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001524:	2306      	movs	r3, #6
 8001526:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001528:	2307      	movs	r3, #7
 800152a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800152c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001530:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001532:	2304      	movs	r3, #4
 8001534:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4619      	mov	r1, r3
 8001542:	481b      	ldr	r0, [pc, #108]	; (80015b0 <MX_ADC3_Init+0x110>)
 8001544:	f003 f9c0 	bl	80048c8 <HAL_ADC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC3_Init+0xb2>
		Error_Handler();
 800154e:	f001 fd69 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_ADC3_Init+0x11c>)
 8001554:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001556:	230c      	movs	r3, #12
 8001558:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4814      	ldr	r0, [pc, #80]	; (80015b0 <MX_ADC3_Init+0x110>)
 8001560:	f003 f9b2 	bl	80048c8 <HAL_ADC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC3_Init+0xce>
		Error_Handler();
 800156a:	f001 fd5b 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800156e:	2301      	movs	r3, #1
 8001570:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001572:	2312      	movs	r3, #18
 8001574:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <MX_ADC3_Init+0x110>)
 800157c:	f003 f9a4 	bl	80048c8 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC3_Init+0xea>
		Error_Handler();
 8001586:	f001 fd4d 	bl	8003024 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <MX_ADC3_Init+0x120>)
 800158c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800158e:	2318      	movs	r3, #24
 8001590:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_ADC3_Init+0x110>)
 8001598:	f003 f996 	bl	80048c8 <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC3_Init+0x106>
		Error_Handler();
 80015a2:	f001 fd3f 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	240001a0 	.word	0x240001a0
 80015b4:	58026000 	.word	0x58026000
 80015b8:	cb840000 	.word	0xcb840000
 80015bc:	cfb80000 	.word	0xcfb80000
 80015c0:	04300002 	.word	0x04300002

080015c4 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2224      	movs	r2, #36	; 0x24
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f015 fa4b 	bl	8016a6c <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_DAC1_Init+0x5c>)
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_DAC1_Init+0x60>)
 80015da:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80015dc:	4810      	ldr	r0, [pc, #64]	; (8001620 <MX_DAC1_Init+0x5c>)
 80015de:	f004 f9d5 	bl	800598c <HAL_DAC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_DAC1_Init+0x28>
		Error_Handler();
 80015e8:	f001 fd1c 	bl	8003024 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015f0:	230a      	movs	r3, #10
 80015f2:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_DAC1_Init+0x5c>)
 8001608:	f004 fbf0 	bl	8005dec <HAL_DAC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_DAC1_Init+0x52>
		Error_Handler();
 8001612:	f001 fd07 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	240002f4 	.word	0x240002f4
 8001624:	40007400 	.word	0x40007400

08001628 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_I2C1_Init+0x78>)
 800162e:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <MX_I2C1_Init+0x7c>)
 8001630:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0020081F;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <MX_I2C1_Init+0x80>)
 8001636:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_I2C1_Init+0x78>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001640:	2201      	movs	r2, #1
 8001642:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_I2C1_Init+0x78>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_I2C1_Init+0x78>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001664:	f007 fdc2 	bl	80091ec <HAL_I2C_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800166e:	f001 fcd9 	bl	8003024 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001672:	2100      	movs	r1, #0
 8001674:	480a      	ldr	r0, [pc, #40]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001676:	f008 fb09 	bl	8009c8c <HAL_I2CEx_ConfigAnalogFilter>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001680:	f001 fcd0 	bl	8003024 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001684:	2100      	movs	r1, #0
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_I2C1_Init+0x78>)
 8001688:	f008 fb4b 	bl	8009d22 <HAL_I2CEx_ConfigDigitalFilter>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001692:	f001 fcc7 	bl	8003024 <Error_Handler>
	}

	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001696:	2001      	movs	r0, #1
 8001698:	f008 fb90 	bl	8009dbc <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	24000380 	.word	0x24000380
 80016a4:	40005400 	.word	0x40005400
 80016a8:	0020081f 	.word	0x0020081f

080016ac <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80016c0:	2300      	movs	r3, #0
 80016c2:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <MX_RTC_Init+0xb4>)
 80016c6:	4a27      	ldr	r2, [pc, #156]	; (8001764 <MX_RTC_Init+0xb8>)
 80016c8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <MX_RTC_Init+0xb4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 100 - 1;
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <MX_RTC_Init+0xb4>)
 80016d2:	2263      	movs	r2, #99	; 0x63
 80016d4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 10000 - 1;
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_RTC_Init+0xb4>)
 80016d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016dc:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <MX_RTC_Init+0xb4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_RTC_Init+0xb4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_RTC_Init+0xb4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_RTC_Init+0xb4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80016f6:	481a      	ldr	r0, [pc, #104]	; (8001760 <MX_RTC_Init+0xb4>)
 80016f8:	f00c f920 	bl	800d93c <HAL_RTC_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_RTC_Init+0x5a>
		Error_Handler();
 8001702:	f001 fc8f 	bl	8003024 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001706:	2300      	movs	r3, #0
 8001708:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800170a:	2300      	movs	r3, #0
 800170c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800170e:	2300      	movs	r3, #0
 8001710:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2201      	movs	r2, #1
 800171e:	4619      	mov	r1, r3
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <MX_RTC_Init+0xb4>)
 8001722:	f00c f98d 	bl	800da40 <HAL_RTC_SetTime>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_RTC_Init+0x84>
		Error_Handler();
 800172c:	f001 fc7a 	bl	8003024 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001730:	2301      	movs	r3, #1
 8001732:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001734:	2301      	movs	r3, #1
 8001736:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001738:	2301      	movs	r3, #1
 800173a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 800173c:	2300      	movs	r3, #0
 800173e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001740:	463b      	mov	r3, r7
 8001742:	2201      	movs	r2, #1
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_RTC_Init+0xb4>)
 8001748:	f00c fa74 	bl	800dc34 <HAL_RTC_SetDate>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_RTC_Init+0xaa>
		Error_Handler();
 8001752:	f001 fc67 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	240003d4 	.word	0x240003d4
 8001764:	58004000 	.word	0x58004000

08001768 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <MX_SPI1_Init+0xa8>)
 800176e:	4a29      	ldr	r2, [pc, #164]	; (8001814 <MX_SPI1_Init+0xac>)
 8001770:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <MX_SPI1_Init+0xa8>)
 8001774:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001778:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <MX_SPI1_Init+0xa8>)
 800177c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001780:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <MX_SPI1_Init+0xa8>)
 8001784:	220f      	movs	r2, #15
 8001786:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_SPI1_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <MX_SPI1_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <MX_SPI1_Init+0xa8>)
 8001796:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800179a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_SPI1_Init+0xa8>)
 800179e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017a2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_SPI1_Init+0xa8>)
 80017fc:	f00c fbc0 	bl	800df80 <HAL_SPI_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_SPI1_Init+0xa2>
		Error_Handler();
 8001806:	f001 fc0d 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	240003f8 	.word	0x240003f8
 8001814:	40013000 	.word	0x40013000

08001818 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800181e:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <MX_SPI2_Init+0xac>)
 8001820:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001824:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001828:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800182c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001830:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001834:	220f      	movs	r2, #15
 8001836:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001846:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800184a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800184e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001852:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800185c:	2200      	movs	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001868:	2200      	movs	r2, #0
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800186e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800187c:	2200      	movs	r2, #0
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001882:	2200      	movs	r2, #0
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001888:	2200      	movs	r2, #0
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800188e:	2200      	movs	r2, #0
 8001890:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_SPI2_Init+0xa8>)
 8001894:	2200      	movs	r2, #0
 8001896:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_SPI2_Init+0xa8>)
 800189a:	2200      	movs	r2, #0
 800189c:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_SPI2_Init+0xa8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_SPI2_Init+0xa8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_SPI2_Init+0xa8>)
 80018ac:	f00c fb68 	bl	800df80 <HAL_SPI_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_SPI2_Init+0xa2>
		Error_Handler();
 80018b6:	f001 fbb5 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	24000480 	.word	0x24000480
 80018c4:	40003800 	.word	0x40003800

080018c8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b09a      	sub	sp, #104	; 0x68
 80018cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80018e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	222c      	movs	r2, #44	; 0x2c
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f015 f8b2 	bl	8016a6c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001908:	4b43      	ldr	r3, [pc, #268]	; (8001a18 <MX_TIM1_Init+0x150>)
 800190a:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <MX_TIM1_Init+0x154>)
 800190c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 50 - 1;
 800190e:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001910:	2231      	movs	r2, #49	; 0x31
 8001912:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62500 - 1;
 800191a:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <MX_TIM1_Init+0x150>)
 800191c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001920:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001928:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <MX_TIM1_Init+0x150>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001934:	4838      	ldr	r0, [pc, #224]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001936:	f00c ff74 	bl	800e822 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001940:	f001 fb70 	bl	8003024 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800194a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800194e:	4619      	mov	r1, r3
 8001950:	4831      	ldr	r0, [pc, #196]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001952:	f00d fcef 	bl	800f334 <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x98>
		Error_Handler();
 800195c:	f001 fb62 	bl	8003024 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001960:	482d      	ldr	r0, [pc, #180]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001962:	f00d fa6b 	bl	800ee3c <HAL_TIM_PWM_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0xa8>
		Error_Handler();
 800196c:	f001 fb5a 	bl	8003024 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800197c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001980:	4619      	mov	r1, r3
 8001982:	4825      	ldr	r0, [pc, #148]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001984:	f00e fa2c 	bl	800fde0 <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 800198e:	f001 fb49 	bl	8003024 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	; 0x60
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80019ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4818      	ldr	r0, [pc, #96]	; (8001a18 <MX_TIM1_Init+0x150>)
 80019b8:	f00d fba8 	bl	800f10c <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 80019c2:	f001 fb2f 	bl	8003024 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019de:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM1_Init+0x150>)
 80019fc:	f00e fa7e 	bl	800fefc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8001a06:	f001 fb0d 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001a0c:	f001 feba 	bl	8003784 <HAL_TIM_MspPostInit>

}
 8001a10:	bf00      	nop
 8001a12:	3768      	adds	r7, #104	; 0x68
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	24000508 	.word	0x24000508
 8001a1c:	40010000 	.word	0x40010000

08001a20 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]
 8001a4e:	615a      	str	r2, [r3, #20]
 8001a50:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a58:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 50 - 1;
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001a5c:	2231      	movs	r2, #49	; 0x31
 8001a5e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3125 - 1;
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001a68:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a6c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001a7a:	4823      	ldr	r0, [pc, #140]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001a7c:	f00c fed1 	bl	800e822 <HAL_TIM_Base_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001a86:	f001 facd 	bl	8003024 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a94:	4619      	mov	r1, r3
 8001a96:	481c      	ldr	r0, [pc, #112]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001a98:	f00d fc4c 	bl	800f334 <HAL_TIM_ConfigClockSource>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001aa2:	f001 fabf 	bl	8003024 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001aa6:	4818      	ldr	r0, [pc, #96]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001aa8:	f00d f9c8 	bl	800ee3c <HAL_TIM_PWM_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001ab2:	f001 fab7 	bl	8003024 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001ac6:	f00e f98b 	bl	800fde0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001ad0:	f001 faa8 	bl	8003024 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad4:	2360      	movs	r3, #96	; 0x60
 8001ad6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001aec:	f00d fb0e 	bl	800f10c <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8001af6:	f001 fa95 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001afa:	4803      	ldr	r0, [pc, #12]	; (8001b08 <MX_TIM2_Init+0xe8>)
 8001afc:	f001 fe42 	bl	8003784 <HAL_TIM_MspPostInit>

}
 8001b00:	bf00      	nop
 8001b02:	3738      	adds	r7, #56	; 0x38
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	24000554 	.word	0x24000554

08001b0c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <MX_TIM3_Init+0x9c>)
 8001b2e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10000 - 1;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b32:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b36:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50000 - 1;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b40:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b44:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b52:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b54:	f00c fe65 	bl	800e822 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM3_Init+0x56>
		Error_Handler();
 8001b5e:	f001 fa61 	bl	8003024 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b66:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b70:	f00d fbe0 	bl	800f334 <HAL_TIM_ConfigClockSource>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0x72>
		Error_Handler();
 8001b7a:	f001 fa53 	bl	8003024 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_TIM3_Init+0x98>)
 8001b8c:	f00e f928 	bl	800fde0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001b96:	f001 fa45 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	240005a0 	.word	0x240005a0
 8001ba8:	40000400 	.word	0x40000400

08001bac <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <MX_TIM4_Init+0x98>)
 8001bce:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 100 - 1;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001bd2:	2263      	movs	r2, #99	; 0x63
 8001bd4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 50000 - 1;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001bde:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001be2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001bf0:	4813      	ldr	r0, [pc, #76]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001bf2:	f00c fe16 	bl	800e822 <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x54>
		Error_Handler();
 8001bfc:	f001 fa12 	bl	8003024 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c04:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001c0e:	f00d fb91 	bl	800f334 <HAL_TIM_ConfigClockSource>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM4_Init+0x70>
		Error_Handler();
 8001c18:	f001 fa04 	bl	8003024 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_TIM4_Init+0x94>)
 8001c2a:	f00e f8d9 	bl	800fde0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM4_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001c34:	f001 f9f6 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	240005ec 	.word	0x240005ec
 8001c44:	40000800 	.word	0x40000800

08001c48 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c4e:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <MX_USART1_UART_Init+0xcc>)
 8001c50:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 8001c52:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c54:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c58:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c90:	481f      	ldr	r0, [pc, #124]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001c92:	f00e f9cf 	bl	8010034 <HAL_UART_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001c9c:	f001 f9c2 	bl	8003024 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	481b      	ldr	r0, [pc, #108]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001ca4:	f011 f86f 	bl	8012d86 <HAL_UARTEx_SetTxFifoThreshold>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001cae:	f001 f9b9 	bl	8003024 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4816      	ldr	r0, [pc, #88]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001cb6:	f011 f8a4 	bl	8012e02 <HAL_UARTEx_SetRxFifoThreshold>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001cc0:	f001 f9b0 	bl	8003024 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001cc4:	4812      	ldr	r0, [pc, #72]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001cc6:	f011 f825 	bl	8012d14 <HAL_UARTEx_DisableFifoMode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001cd0:	f001 f9a8 	bl	8003024 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001cd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001cda:	f011 f892 	bl	8012e02 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001ce0:	f010 ffdd 	bl	8012c9e <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001ce4:	480a      	ldr	r0, [pc, #40]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001ce6:	f010 ffa7 	bl	8012c38 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cf8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <MX_USART1_UART_Init+0xc8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d08:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
	/* USER CODE END USART1_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	24000638 	.word	0x24000638
 8001d14:	40011000 	.word	0x40011000

08001d18 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <MX_DMA_Init+0x6c>)
 8001d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d24:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <MX_DMA_Init+0x6c>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_DMA_Init+0x6c>)
 8001d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2105      	movs	r1, #5
 8001d40:	200b      	movs	r0, #11
 8001d42:	f003 fdfb 	bl	800593c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d46:	200b      	movs	r0, #11
 8001d48:	f003 fe12 	bl	8005970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2105      	movs	r1, #5
 8001d50:	200c      	movs	r0, #12
 8001d52:	f003 fdf3 	bl	800593c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d56:	200c      	movs	r0, #12
 8001d58:	f003 fe0a 	bl	8005970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2105      	movs	r1, #5
 8001d60:	200d      	movs	r0, #13
 8001d62:	f003 fdeb 	bl	800593c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d66:	200d      	movs	r0, #13
 8001d68:	f003 fe02 	bl	8005970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2105      	movs	r1, #5
 8001d70:	2010      	movs	r0, #16
 8001d72:	f003 fde3 	bl	800593c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d76:	2010      	movs	r0, #16
 8001d78:	f003 fdfa 	bl	8005970 <HAL_NVIC_EnableIRQ>

}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58024400 	.word	0x58024400

08001d88 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	4a32      	ldr	r2, [pc, #200]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_GPIO_Init+0xe8>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e1c:	4815      	ldr	r0, [pc, #84]	; (8001e74 <MX_GPIO_Init+0xec>)
 8001e1e:	f007 f9cb 	bl	80091b8 <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6,
 8001e22:	2200      	movs	r2, #0
 8001e24:	2164      	movs	r1, #100	; 0x64
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <MX_GPIO_Init+0xf0>)
 8001e28:	f007 f9c6 	bl	80091b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC6 PC7 PC8
	 PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8001e2c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e30:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <MX_GPIO_Init+0xec>)
 8001e46:	f006 ffef 	bl	8008e28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6;
 8001e4a:	2364      	movs	r3, #100	; 0x64
 8001e4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_GPIO_Init+0xf0>)
 8001e62:	f006 ffe1 	bl	8008e28 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58020800 	.word	0x58020800
 8001e78:	58020400 	.word	0x58020400

08001e7c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e86:	2300      	movs	r3, #0
 8001e88:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	b299      	uxth	r1, r3
 8001e8e:	f107 0208 	add.w	r2, r7, #8
 8001e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4817      	ldr	r0, [pc, #92]	; (8001ef8 <poll_i2c_sensor+0x7c>)
 8001e9c:	f007 fa42 	bl	8009324 <HAL_I2C_Master_Transmit>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001ea4:	7b7b      	ldrb	r3, [r7, #13]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <poll_i2c_sensor+0x80>)
 8001eac:	f014 ff34 	bl	8016d18 <puts>
 8001eb0:	e01c      	b.n	8001eec <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	b299      	uxth	r1, r3
 8001eb6:	f107 0208 	add.w	r2, r7, #8
 8001eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <poll_i2c_sensor+0x7c>)
 8001ec4:	f007 fb46 	bl	8009554 <HAL_I2C_Master_Receive>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ed2:	480b      	ldr	r0, [pc, #44]	; (8001f00 <poll_i2c_sensor+0x84>)
 8001ed4:	f014 ff20 	bl	8016d18 <puts>
 8001ed8:	e008      	b.n	8001eec <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001eda:	7a3b      	ldrb	r3, [r7, #8]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001ee0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ee4:	7a7a      	ldrb	r2, [r7, #9]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	10db      	asrs	r3, r3, #3
 8001eea:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001eec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	24000380 	.word	0x24000380
 8001efc:	080176c8 	.word	0x080176c8
 8001f00:	080176d8 	.word	0x080176d8

08001f04 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001f0c:	f107 010c 	add.w	r1, r7, #12
 8001f10:	2301      	movs	r3, #1
 8001f12:	2201      	movs	r2, #1
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <receive_pmt_spi+0x44>)
 8001f16:	f00c f957 	bl	800e1c8 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f1e:	7b7b      	ldrb	r3, [r7, #13]
 8001f20:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <receive_pmt_spi+0x44>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <receive_pmt_spi+0x44>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f30:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7bba      	ldrb	r2, [r7, #14]
 8001f36:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	701a      	strb	r2, [r3, #0]
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	240003f8 	.word	0x240003f8

08001f4c <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f54:	f107 010c 	add.w	r1, r7, #12
 8001f58:	2364      	movs	r3, #100	; 0x64
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <receive_erpa_spi+0x44>)
 8001f5e:	f00c f933 	bl	800e1c8 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f66:	7b7b      	ldrb	r3, [r7, #13]
 8001f68:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <receive_erpa_spi+0x44>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <receive_erpa_spi+0x44>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f78:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7bba      	ldrb	r2, [r7, #14]
 8001f7e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	701a      	strb	r2, [r3, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	24000480 	.word	0x24000480

08001f94 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <receive_erpa_adc+0x20>)
 8001f9e:	885b      	ldrh	r3, [r3, #2]
 8001fa0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	89fa      	ldrh	r2, [r7, #14]
 8001fa6:	801a      	strh	r2, [r3, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	24000cc0 	.word	0x24000cc0

08001fb8 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fc0:	2390      	movs	r3, #144	; 0x90
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff5a 	bl	8001e7c <poll_i2c_sensor>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fcc:	2394      	movs	r3, #148	; 0x94
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff54 	bl	8001e7c <poll_i2c_sensor>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001fd8:	2392      	movs	r3, #146	; 0x92
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff4e 	bl	8001e7c <poll_i2c_sensor>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001fe4:	2396      	movs	r3, #150	; 0x96
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff48 	bl	8001e7c <poll_i2c_sensor>
 8001fec:	4603      	mov	r3, r0
 8001fee:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	89fa      	ldrh	r2, [r7, #14]
 8001ff4:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	89ba      	ldrh	r2, [r7, #12]
 8001ffc:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	897a      	ldrh	r2, [r7, #10]
 8002004:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3306      	adds	r3, #6
 800200a:	893a      	ldrh	r2, [r7, #8]
 800200c:	801a      	strh	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <receive_hk_adc1+0xa0>)
 8002022:	8a9b      	ldrh	r3, [r3, #20]
 8002024:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <receive_hk_adc1+0xa0>)
 8002028:	8a1b      	ldrh	r3, [r3, #16]
 800202a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <receive_hk_adc1+0xa0>)
 800202e:	899b      	ldrh	r3, [r3, #12]
 8002030:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <receive_hk_adc1+0xa0>)
 8002034:	8a5b      	ldrh	r3, [r3, #18]
 8002036:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <receive_hk_adc1+0xa0>)
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <receive_hk_adc1+0xa0>)
 8002040:	88db      	ldrh	r3, [r3, #6]
 8002042:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <receive_hk_adc1+0xa0>)
 8002046:	89db      	ldrh	r3, [r3, #14]
 8002048:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <receive_hk_adc1+0xa0>)
 800204c:	891b      	ldrh	r3, [r3, #8]
 800204e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <receive_hk_adc1+0xa0>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <receive_hk_adc1+0xa0>)
 8002058:	895b      	ldrh	r3, [r3, #10]
 800205a:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8bfa      	ldrh	r2, [r7, #30]
 8002060:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3302      	adds	r3, #2
 8002066:	8bba      	ldrh	r2, [r7, #28]
 8002068:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	8b7a      	ldrh	r2, [r7, #26]
 8002070:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3306      	adds	r3, #6
 8002076:	8b3a      	ldrh	r2, [r7, #24]
 8002078:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3308      	adds	r3, #8
 800207e:	8afa      	ldrh	r2, [r7, #22]
 8002080:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	330a      	adds	r3, #10
 8002086:	8aba      	ldrh	r2, [r7, #20]
 8002088:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	330c      	adds	r3, #12
 800208e:	8a7a      	ldrh	r2, [r7, #18]
 8002090:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	330e      	adds	r3, #14
 8002096:	8a3a      	ldrh	r2, [r7, #16]
 8002098:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3310      	adds	r3, #16
 800209e:	89fa      	ldrh	r2, [r7, #14]
 80020a0:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3312      	adds	r3, #18
 80020a6:	89ba      	ldrh	r2, [r7, #12]
 80020a8:	801a      	strh	r2, [r3, #0]
}
 80020aa:	bf00      	nop
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	24000cc0 	.word	0x24000cc0

080020bc <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <receive_hk_adc3+0x4c>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <receive_hk_adc3+0x4c>)
 80020cc:	885b      	ldrh	r3, [r3, #2]
 80020ce:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020d0:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <receive_hk_adc3+0x4c>)
 80020d2:	889b      	ldrh	r3, [r3, #4]
 80020d4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <receive_hk_adc3+0x4c>)
 80020d8:	88db      	ldrh	r3, [r3, #6]
 80020da:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	89fa      	ldrh	r2, [r7, #14]
 80020e0:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3302      	adds	r3, #2
 80020e6:	89ba      	ldrh	r2, [r7, #12]
 80020e8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3304      	adds	r3, #4
 80020ee:	897a      	ldrh	r2, [r7, #10]
 80020f0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3306      	adds	r3, #6
 80020f6:	893a      	ldrh	r2, [r7, #8]
 80020f8:	801a      	strh	r2, [r3, #0]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	24000ce0 	.word	0x24000ce0

0800210c <enter_flight_mode>:
 *
 * This function resumes the GPIO task, enables voltage rails, starts the DAC
 * in DMA mode, and starts various timers for packet transmission. It also sets
 * the relevant status flags.
 */
void enter_flight_mode() {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af02      	add	r7, sp, #8
	xTaskResumeFromISR(GPIO_on_taskHandle);										// Auto Init
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <enter_flight_mode+0x78>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f012 fe62 	bl	8014de0 <xTaskResumeFromISR>
	HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);				// Enable n200v
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <enter_flight_mode+0x7c>)
 800211e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002122:	2201      	movs	r2, #1
 8002124:	4618      	mov	r0, r3
 8002126:	f007 f847 	bl	80091b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);				// Enable n800v
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <enter_flight_mode+0x80>)
 800212c:	2140      	movs	r1, #64	; 0x40
 800212e:	2201      	movs	r2, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f007 f841 	bl	80091b8 <HAL_GPIO_WritePin>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);		// Enable auto sweep (doesn't start until ERPA timer is started)
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2320      	movs	r3, #32
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <enter_flight_mode+0x84>)
 800213e:	2100      	movs	r1, #0
 8002140:	4814      	ldr	r0, [pc, #80]	; (8002194 <enter_flight_mode+0x88>)
 8002142:	f003 fc9d 	bl	8005a80 <HAL_DAC_Start_DMA>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);									// ERPA packet on
 8002146:	210c      	movs	r1, #12
 8002148:	4813      	ldr	r0, [pc, #76]	; (8002198 <enter_flight_mode+0x8c>)
 800214a:	f00c fc39 	bl	800e9c0 <HAL_TIM_OC_Start_IT>
	ERPA_ON = 1;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <enter_flight_mode+0x90>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);									// PMT packet on
 8002154:	2100      	movs	r1, #0
 8002156:	4812      	ldr	r0, [pc, #72]	; (80021a0 <enter_flight_mode+0x94>)
 8002158:	f00c fc32 	bl	800e9c0 <HAL_TIM_OC_Start_IT>
	PMT_ON = 1;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <enter_flight_mode+0x98>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);									// HK packet on
 8002162:	2100      	movs	r1, #0
 8002164:	4810      	ldr	r0, [pc, #64]	; (80021a8 <enter_flight_mode+0x9c>)
 8002166:	f00c fc2b 	bl	800e9c0 <HAL_TIM_OC_Start_IT>
	HK_ON = 1;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <enter_flight_mode+0xa0>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, HK_FLAG_ID);
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <enter_flight_mode+0xa4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2104      	movs	r1, #4
 8002176:	4618      	mov	r0, r3
 8002178:	f011 f88c 	bl	8013294 <osEventFlagsSet>

}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	24000750 	.word	0x24000750
 8002188:	58020800 	.word	0x58020800
 800218c:	58020400 	.word	0x58020400
 8002190:	24000010 	.word	0x24000010
 8002194:	240002f4 	.word	0x240002f4
 8002198:	24000554 	.word	0x24000554
 800219c:	24000c5f 	.word	0x24000c5f
 80021a0:	24000508 	.word	0x24000508
 80021a4:	24000c5e 	.word	0x24000c5e
 80021a8:	240005a0 	.word	0x240005a0
 80021ac:	24000c60 	.word	0x24000c60
 80021b0:	24000c64 	.word	0x24000c64

080021b4 <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <get_current_step+0xc0>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d04a      	beq.n	8002260 <get_current_step+0xac>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d0:	da48      	bge.n	8002264 <get_current_step+0xb0>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021d8:	4293      	cmp	r3, r2
 80021da:	d03f      	beq.n	800225c <get_current_step+0xa8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021e2:	4293      	cmp	r3, r2
 80021e4:	dc3e      	bgt.n	8002264 <get_current_step+0xb0>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d033      	beq.n	8002258 <get_current_step+0xa4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021f6:	da35      	bge.n	8002264 <get_current_step+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021fe:	4293      	cmp	r3, r2
 8002200:	d028      	beq.n	8002254 <get_current_step+0xa0>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002208:	4293      	cmp	r3, r2
 800220a:	dc2b      	bgt.n	8002264 <get_current_step+0xb0>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f240 7245 	movw	r2, #1861	; 0x745
 8002212:	4293      	cmp	r3, r2
 8002214:	d01c      	beq.n	8002250 <get_current_step+0x9c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f240 7245 	movw	r2, #1861	; 0x745
 800221c:	4293      	cmp	r3, r2
 800221e:	dc21      	bgt.n	8002264 <get_current_step+0xb0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002226:	4293      	cmp	r3, r2
 8002228:	d010      	beq.n	800224c <get_current_step+0x98>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002230:	4293      	cmp	r3, r2
 8002232:	dc17      	bgt.n	8002264 <get_current_step+0xb0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <get_current_step+0x90>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002240:	d002      	beq.n	8002248 <get_current_step+0x94>
 8002242:	e00f      	b.n	8002264 <get_current_step+0xb0>
	case 0:
		return 0;
 8002244:	2300      	movs	r3, #0
 8002246:	e00e      	b.n	8002266 <get_current_step+0xb2>
	case 620:
		return 1;
 8002248:	2301      	movs	r3, #1
 800224a:	e00c      	b.n	8002266 <get_current_step+0xb2>
	case 1241:
		return 2;
 800224c:	2302      	movs	r3, #2
 800224e:	e00a      	b.n	8002266 <get_current_step+0xb2>
	case 1861:
		return 3;
 8002250:	2303      	movs	r3, #3
 8002252:	e008      	b.n	8002266 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002254:	2304      	movs	r3, #4
 8002256:	e006      	b.n	8002266 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002258:	2305      	movs	r3, #5
 800225a:	e004      	b.n	8002266 <get_current_step+0xb2>
	case 3723:
		return 6;
 800225c:	2306      	movs	r3, #6
 800225e:	e002      	b.n	8002266 <get_current_step+0xb2>
	case 4095:
		return 7;
 8002260:	2307      	movs	r3, #7
 8002262:	e000      	b.n	8002266 <get_current_step+0xb2>
	default:
		return -1;
 8002264:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40007400 	.word	0x40007400

08002278 <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 800227c:	f000 f898 	bl	80023b0 <send_ACK>

	vTaskSuspendAll();
 8002280:	f012 fe86 	bl	8014f90 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002284:	2101      	movs	r1, #1
 8002286:	2001      	movs	r0, #1
 8002288:	f007 fdbc 	bl	8009e04 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 800228c:	f012 fe8e 	bl	8014fac <xTaskResumeAll>
	SystemClock_Config();
 8002290:	f7fe ff34 	bl	80010fc <SystemClock_Config>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	785b      	ldrb	r3, [r3, #1]
 80022a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	789b      	ldrb	r3, [r3, #2]
 80022ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	78db      	ldrb	r3, [r3, #3]
 80022b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	791b      	ldrb	r3, [r3, #4]
 80022bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	795b      	ldrb	r3, [r3, #5]
 80022c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	799b      	ldrb	r3, [r3, #6]
 80022cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3307      	adds	r3, #7
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	b21a      	sxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3308      	adds	r3, #8
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80022e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80022f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80022f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8002300:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002304:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8002306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800230a:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 800230c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002310:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8002312:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002314:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	2200      	movs	r2, #0
 800231c:	4619      	mov	r1, r3
 800231e:	4810      	ldr	r0, [pc, #64]	; (8002360 <calibrateRTC+0xc8>)
 8002320:	f00b fc88 	bl	800dc34 <HAL_RTC_SetDate>
 8002324:	4603      	mov	r3, r0
 8002326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 800232a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <calibrateRTC+0x9e>
		Error_Handler();
 8002332:	f000 fe77 	bl	8003024 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2200      	movs	r2, #0
 800233c:	4619      	mov	r1, r3
 800233e:	4808      	ldr	r0, [pc, #32]	; (8002360 <calibrateRTC+0xc8>)
 8002340:	f00b fb7e 	bl	800da40 <HAL_RTC_SetTime>
 8002344:	4603      	mov	r3, r0
 8002346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 800234a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <calibrateRTC+0xbe>
		Error_Handler();
 8002352:	f000 fe67 	bl	8003024 <Error_Handler>
	}
}
 8002356:	bf00      	nop
 8002358:	3730      	adds	r7, #48	; 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	240003d4 	.word	0x240003d4

08002364 <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
	send_ACK();
 800236a:	f000 f821 	bl	80023b0 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800236e:	480e      	ldr	r0, [pc, #56]	; (80023a8 <sync+0x44>)
 8002370:	f00e f8d2 	bl	8010518 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	2209      	movs	r2, #9
 8002378:	490c      	ldr	r1, [pc, #48]	; (80023ac <sync+0x48>)
 800237a:	480b      	ldr	r0, [pc, #44]	; (80023a8 <sync+0x44>)
 800237c:	f00d ff38 	bl	80101f0 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <sync+0x48>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2bff      	cmp	r3, #255	; 0xff
 800238a:	d1f3      	bne.n	8002374 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 800238c:	4807      	ldr	r0, [pc, #28]	; (80023ac <sync+0x48>)
 800238e:	f7ff ff83 	bl	8002298 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002392:	2201      	movs	r2, #1
 8002394:	4905      	ldr	r1, [pc, #20]	; (80023ac <sync+0x48>)
 8002396:	4804      	ldr	r0, [pc, #16]	; (80023a8 <sync+0x44>)
 8002398:	f00d fff2 	bl	8010380 <HAL_UART_Receive_IT>

	send_ACK();
 800239c:	f000 f808 	bl	80023b0 <send_ACK>
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	24000638 	.word	0x24000638
 80023ac:	24000c68 	.word	0x24000c68

080023b0 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <send_ACK+0x1c>)
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80023ba:	2364      	movs	r3, #100	; 0x64
 80023bc:	2201      	movs	r2, #1
 80023be:	4903      	ldr	r1, [pc, #12]	; (80023cc <send_ACK+0x1c>)
 80023c0:	4803      	ldr	r0, [pc, #12]	; (80023d0 <send_ACK+0x20>)
 80023c2:	f00d fe87 	bl	80100d4 <HAL_UART_Transmit>
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	24000ce8 	.word	0x24000ce8
 80023d0:	24000638 	.word	0x24000638

080023d4 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_UART_TxCpltCallback+0x1c>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	24000000 	.word	0x24000000

080023f4 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	4618      	mov	r0, r3
 8002406:	f014 fb13 	bl	8016a30 <malloc>
 800240a:	4603      	mov	r3, r0
 800240c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	4618      	mov	r0, r3
 8002416:	f014 fb1b 	bl	8016a50 <memcpy>
	packet.size = size;
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	461a      	mov	r2, r3
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800242a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800243c:	2100      	movs	r1, #0
 800243e:	481d      	ldr	r0, [pc, #116]	; (80024b4 <system_setup+0x7c>)
 8002440:	f00c fabe 	bl	800e9c0 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002448:	f44f 729c 	mov.w	r2, #312	; 0x138
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800244e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <system_setup+0x80>)
 8002458:	f003 f876 	bl	8005548 <HAL_ADCEx_Calibration_Start>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002462:	f000 fddf 	bl	8003024 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002466:	220b      	movs	r2, #11
 8002468:	4914      	ldr	r1, [pc, #80]	; (80024bc <system_setup+0x84>)
 800246a:	4813      	ldr	r0, [pc, #76]	; (80024b8 <system_setup+0x80>)
 800246c:	f002 f94a 	bl	8004704 <HAL_ADC_Start_DMA>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002476:	f000 fdd5 	bl	8003024 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800247a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800247e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002482:	480f      	ldr	r0, [pc, #60]	; (80024c0 <system_setup+0x88>)
 8002484:	f003 f860 	bl	8005548 <HAL_ADCEx_Calibration_Start>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800248e:	f000 fdc9 	bl	8003024 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002492:	2204      	movs	r2, #4
 8002494:	490b      	ldr	r1, [pc, #44]	; (80024c4 <system_setup+0x8c>)
 8002496:	480a      	ldr	r0, [pc, #40]	; (80024c0 <system_setup+0x88>)
 8002498:	f002 f934 	bl	8004704 <HAL_ADC_Start_DMA>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80024a2:	f000 fdbf 	bl	8003024 <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80024a6:	2201      	movs	r2, #1
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <system_setup+0x90>)
 80024aa:	4808      	ldr	r0, [pc, #32]	; (80024cc <system_setup+0x94>)
 80024ac:	f00d ff68 	bl	8010380 <HAL_UART_Receive_IT>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	240005ec 	.word	0x240005ec
 80024b8:	2400013c 	.word	0x2400013c
 80024bc:	24000cc0 	.word	0x24000cc0
 80024c0:	240001a0 	.word	0x240001a0
 80024c4:	24000ce0 	.word	0x24000ce0
 80024c8:	24000c68 	.word	0x24000c68
 80024cc:	24000638 	.word	0x24000638

080024d0 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <get_uptime+0x88>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <get_uptime+0x8c>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <get_uptime+0x88>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d005      	beq.n	80024fe <get_uptime+0x2e>
		ms = uptime_millis;
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <get_uptime+0x88>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <get_uptime+0x8c>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002504:	fb03 f202 	mul.w	r2, r3, r2
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <get_uptime+0x8c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	3301      	adds	r3, #1
 800250e:	4914      	ldr	r1, [pc, #80]	; (8002560 <get_uptime+0x90>)
 8002510:	fba1 1303 	umull	r1, r3, r1, r3
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	6939      	ldr	r1, [r7, #16]
 8002518:	fbb1 f3f3 	udiv	r3, r1, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0e1b      	lsrs	r3, r3, #24
 8002524:	b2da      	uxtb	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	0c1a      	lsrs	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3301      	adds	r3, #1
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0a1a      	lsrs	r2, r3, #8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3302      	adds	r3, #2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3303      	adds	r3, #3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	24000c44 	.word	0x24000c44
 800255c:	e000e010 	.word	0xe000e010
 8002560:	10624dd3 	.word	0x10624dd3

08002564 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	2200      	movs	r2, #0
 8002572:	4619      	mov	r1, r3
 8002574:	4821      	ldr	r0, [pc, #132]	; (80025fc <getTimestamp+0x98>)
 8002576:	f00b fb01 	bl	800db7c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	2200      	movs	r2, #0
 8002580:	4619      	mov	r1, r3
 8002582:	481e      	ldr	r0, [pc, #120]	; (80025fc <getTimestamp+0x98>)
 8002584:	f00b fbde 	bl	800dd44 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2264      	movs	r2, #100	; 0x64
 800258c:	fb03 f202 	mul.w	r2, r3, r2
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <getTimestamp+0x9c>)
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3301      	adds	r3, #1
 80025a0:	7b7a      	ldrb	r2, [r7, #13]
 80025a2:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3302      	adds	r3, #2
 80025a8:	7bba      	ldrb	r2, [r7, #14]
 80025aa:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3303      	adds	r3, #3
 80025b0:	7c3a      	ldrb	r2, [r7, #16]
 80025b2:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	7c7a      	ldrb	r2, [r7, #17]
 80025ba:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3305      	adds	r3, #5
 80025c0:	7cba      	ldrb	r2, [r7, #18]
 80025c2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	0e1a      	lsrs	r2, r3, #24
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3306      	adds	r3, #6
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	0c1a      	lsrs	r2, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3307      	adds	r3, #7
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	0a1a      	lsrs	r2, r3, #8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3308      	adds	r3, #8
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3309      	adds	r3, #9
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	3728      	adds	r7, #40	; 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	240003d4 	.word	0x240003d4
 8002600:	000f4240 	.word	0x000f4240

08002604 <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800260a:	bf00      	nop
 800260c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002610:	4833      	ldr	r0, [pc, #204]	; (80026e0 <sample_pmt+0xdc>)
 8002612:	f006 fdb9 	bl	8009188 <HAL_GPIO_ReadPin>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f7      	bne.n	800260c <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800261c:	200a      	movs	r0, #10
 800261e:	f014 fa07 	bl	8016a30 <malloc>
 8002622:	4603      	mov	r3, r0
 8002624:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002626:	2002      	movs	r0, #2
 8002628:	f014 fa02 	bl	8016a30 <malloc>
 800262c:	4603      	mov	r3, r0
 800262e:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002630:	2004      	movs	r0, #4
 8002632:	f014 f9fd 	bl	8016a30 <malloc>
 8002636:	4603      	mov	r3, r0
 8002638:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff ff48 	bl	80024d0 <get_uptime>

	receive_pmt_spi(pmt_spi);
 8002640:	6938      	ldr	r0, [r7, #16]
 8002642:	f7ff fc5f 	bl	8001f04 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	22bb      	movs	r2, #187	; 0xbb
 800264a:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3301      	adds	r3, #1
 8002650:	22bb      	movs	r2, #187	; 0xbb
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002654:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <sample_pmt+0xe0>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b29a      	uxth	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3302      	adds	r3, #2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002664:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <sample_pmt+0xe0>)
 8002666:	881a      	ldrh	r2, [r3, #0]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3303      	adds	r3, #3
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3304      	adds	r3, #4
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	7812      	ldrb	r2, [r2, #0]
 8002678:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3305      	adds	r3, #5
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	7852      	ldrb	r2, [r2, #1]
 8002682:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3306      	adds	r3, #6
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3307      	adds	r3, #7
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	7852      	ldrb	r2, [r2, #1]
 8002696:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3308      	adds	r3, #8
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	7892      	ldrb	r2, [r2, #2]
 80026a0:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3309      	adds	r3, #9
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	78d2      	ldrb	r2, [r2, #3]
 80026aa:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	220a      	movs	r2, #10
 80026b0:	6979      	ldr	r1, [r7, #20]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fe9e 	bl	80023f4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <sample_pmt+0xe4>)
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	1d39      	adds	r1, r7, #4
 80026be:	2300      	movs	r3, #0
 80026c0:	2200      	movs	r2, #0
 80026c2:	f010 ff57 	bl	8013574 <osMessageQueuePut>
	free(buffer);
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f014 f9ba 	bl	8016a40 <free>
	free(pmt_spi);
 80026cc:	6938      	ldr	r0, [r7, #16]
 80026ce:	f014 f9b7 	bl	8016a40 <free>
	free(uptime);
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f014 f9b4 	bl	8016a40 <free>
}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	58020000 	.word	0x58020000
 80026e4:	24000c54 	.word	0x24000c54
 80026e8:	24000c48 	.word	0x24000c48

080026ec <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80026f2:	bf00      	nop
 80026f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026f8:	4848      	ldr	r0, [pc, #288]	; (800281c <sample_erpa+0x130>)
 80026fa:	f006 fd45 	bl	8009188 <HAL_GPIO_ReadPin>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f7      	bne.n	80026f4 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002704:	200e      	movs	r0, #14
 8002706:	f014 f993 	bl	8016a30 <malloc>
 800270a:	4603      	mov	r3, r0
 800270c:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800270e:	2002      	movs	r0, #2
 8002710:	f014 f98e 	bl	8016a30 <malloc>
 8002714:	4603      	mov	r3, r0
 8002716:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002718:	2002      	movs	r0, #2
 800271a:	f014 f989 	bl	8016a30 <malloc>
 800271e:	4603      	mov	r3, r0
 8002720:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002722:	2004      	movs	r0, #4
 8002724:	f014 f984 	bl	8016a30 <malloc>
 8002728:	4603      	mov	r3, r0
 800272a:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 800272c:	23ff      	movs	r3, #255	; 0xff
 800272e:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002730:	6938      	ldr	r0, [r7, #16]
 8002732:	f7ff fecd 	bl	80024d0 <get_uptime>
	sweep_step = get_current_step();
 8002736:	f7ff fd3d 	bl	80021b4 <get_current_step>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 800273e:	69b8      	ldr	r0, [r7, #24]
 8002740:	f7ff fc04 	bl	8001f4c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	f7ff fc25 	bl	8001f94 <receive_erpa_adc>


	buffer[0] = ERPA_SYNC;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	22aa      	movs	r2, #170	; 0xaa
 800274e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	22aa      	movs	r2, #170	; 0xaa
 8002756:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <sample_erpa+0x134>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0c1a      	lsrs	r2, r3, #16
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3302      	adds	r3, #2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <sample_erpa+0x134>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0a1a      	lsrs	r2, r3, #8
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3303      	adds	r3, #3
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <sample_erpa+0x134>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3304      	adds	r3, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	3305      	adds	r3, #5
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	b29a      	uxth	r2, r3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	3306      	adds	r3, #6
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	881a      	ldrh	r2, [r3, #0]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3307      	adds	r3, #7
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3308      	adds	r3, #8
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3309      	adds	r3, #9
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	7852      	ldrb	r2, [r2, #1]
 80027b6:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	330a      	adds	r3, #10
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	330b      	adds	r3, #11
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	7852      	ldrb	r2, [r2, #1]
 80027ca:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	330c      	adds	r3, #12
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	7892      	ldrb	r2, [r2, #2]
 80027d4:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	330d      	adds	r3, #13
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	78d2      	ldrb	r2, [r2, #3]
 80027de:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	220e      	movs	r2, #14
 80027e4:	69f9      	ldr	r1, [r7, #28]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fe04 	bl	80023f4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <sample_erpa+0x138>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	1d39      	adds	r1, r7, #4
 80027f2:	2300      	movs	r3, #0
 80027f4:	2200      	movs	r2, #0
 80027f6:	f010 febd 	bl	8013574 <osMessageQueuePut>
	free(buffer);
 80027fa:	69f8      	ldr	r0, [r7, #28]
 80027fc:	f014 f920 	bl	8016a40 <free>
	free(erpa_spi);
 8002800:	69b8      	ldr	r0, [r7, #24]
 8002802:	f014 f91d 	bl	8016a40 <free>
	free(erpa_adc);
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f014 f91a 	bl	8016a40 <free>
	free(uptime);
 800280c:	6938      	ldr	r0, [r7, #16]
 800280e:	f014 f917 	bl	8016a40 <free>
}
 8002812:	bf00      	nop
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	58020400 	.word	0x58020400
 8002820:	24000c58 	.word	0x24000c58
 8002824:	24000c48 	.word	0x24000c48

08002828 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 800282e:	2032      	movs	r0, #50	; 0x32
 8002830:	f014 f8fe 	bl	8016a30 <malloc>
 8002834:	4603      	mov	r3, r0
 8002836:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002838:	2008      	movs	r0, #8
 800283a:	f014 f8f9 	bl	8016a30 <malloc>
 800283e:	4603      	mov	r3, r0
 8002840:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8002842:	200a      	movs	r0, #10
 8002844:	f014 f8f4 	bl	8016a30 <malloc>
 8002848:	4603      	mov	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff fe89 	bl	8002564 <getTimestamp>


	if (TEMPERATURE_COUNTER > 999) {
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <sample_hk+0x78>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800285a:	db25      	blt.n	80028a8 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 800285c:	6938      	ldr	r0, [r7, #16]
 800285e:	f7ff fbab 	bl	8001fb8 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002868:	b29a      	uxth	r2, r3
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <sample_hk+0x7c>)
 800286c:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	3302      	adds	r3, #2
 8002872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <sample_hk+0x7c>)
 800287a:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	3304      	adds	r3, #4
 8002880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <sample_hk+0x7c>)
 8002888:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	3306      	adds	r3, #6
 800288e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002892:	b29a      	uxth	r2, r3
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <sample_hk+0x7c>)
 8002896:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002898:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <sample_hk+0x78>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e01f      	b.n	80028e0 <sample_hk+0xb8>
 80028a0:	24000004 	.word	0x24000004
 80028a4:	24000cec 	.word	0x24000cec
	} else {
		TEMPERATURE_COUNTER++;
 80028a8:	4b9f      	ldr	r3, [pc, #636]	; (8002b28 <sample_hk+0x300>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	4a9e      	ldr	r2, [pc, #632]	; (8002b28 <sample_hk+0x300>)
 80028b0:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80028b2:	4b9e      	ldr	r3, [pc, #632]	; (8002b2c <sample_hk+0x304>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b21a      	sxth	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80028bc:	4b9b      	ldr	r3, [pc, #620]	; (8002b2c <sample_hk+0x304>)
 80028be:	885a      	ldrh	r2, [r3, #2]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3302      	adds	r3, #2
 80028c4:	b212      	sxth	r2, r2
 80028c6:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80028c8:	4b98      	ldr	r3, [pc, #608]	; (8002b2c <sample_hk+0x304>)
 80028ca:	889a      	ldrh	r2, [r3, #4]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3304      	adds	r3, #4
 80028d0:	b212      	sxth	r2, r2
 80028d2:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80028d4:	4b95      	ldr	r3, [pc, #596]	; (8002b2c <sample_hk+0x304>)
 80028d6:	88da      	ldrh	r2, [r3, #6]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	3306      	adds	r3, #6
 80028dc:	b212      	sxth	r2, r2
 80028de:	801a      	strh	r2, [r3, #0]
	}

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	22cc      	movs	r2, #204	; 0xcc
 80028e4:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3301      	adds	r3, #1
 80028ea:	22cc      	movs	r2, #204	; 0xcc
 80028ec:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80028ee:	4b90      	ldr	r3, [pc, #576]	; (8002b30 <sample_hk+0x308>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3302      	adds	r3, #2
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80028fe:	4b8c      	ldr	r3, [pc, #560]	; (8002b30 <sample_hk+0x308>)
 8002900:	881a      	ldrh	r2, [r3, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3303      	adds	r3, #3
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 800290a:	4b8a      	ldr	r3, [pc, #552]	; (8002b34 <sample_hk+0x30c>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29a      	uxth	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3304      	adds	r3, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 800291a:	4b86      	ldr	r3, [pc, #536]	; (8002b34 <sample_hk+0x30c>)
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3305      	adds	r3, #5
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 8002926:	4b84      	ldr	r3, [pc, #528]	; (8002b38 <sample_hk+0x310>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29a      	uxth	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3306      	adds	r3, #6
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 8002936:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <sample_hk+0x310>)
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3307      	adds	r3, #7
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002948:	121a      	asrs	r2, r3, #8
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3308      	adds	r3, #8
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3309      	adds	r3, #9
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	3302      	adds	r3, #2
 8002964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002968:	121a      	asrs	r2, r3, #8
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	330a      	adds	r3, #10
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	3302      	adds	r3, #2
 8002976:	f9b3 2000 	ldrsh.w	r2, [r3]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	330b      	adds	r3, #11
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3304      	adds	r3, #4
 8002986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298a:	121a      	asrs	r2, r3, #8
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	330c      	adds	r3, #12
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	3304      	adds	r3, #4
 8002998:	f9b3 2000 	ldrsh.w	r2, [r3]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	330d      	adds	r3, #13
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	3306      	adds	r3, #6
 80029a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ac:	121a      	asrs	r2, r3, #8
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	330e      	adds	r3, #14
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	3306      	adds	r3, #6
 80029ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	330f      	adds	r3, #15
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80029c6:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <sample_hk+0x314>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3310      	adds	r3, #16
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80029d6:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <sample_hk+0x314>)
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3311      	adds	r3, #17
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 80029e2:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <sample_hk+0x318>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3312      	adds	r3, #18
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 80029f2:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <sample_hk+0x318>)
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3313      	adds	r3, #19
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 80029fe:	4b51      	ldr	r3, [pc, #324]	; (8002b44 <sample_hk+0x31c>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3314      	adds	r3, #20
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002a0e:	4b4d      	ldr	r3, [pc, #308]	; (8002b44 <sample_hk+0x31c>)
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3315      	adds	r3, #21
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002a1a:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <sample_hk+0x320>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3316      	adds	r3, #22
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <sample_hk+0x320>)
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3317      	adds	r3, #23
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002a36:	4b45      	ldr	r3, [pc, #276]	; (8002b4c <sample_hk+0x324>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3318      	adds	r3, #24
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <sample_hk+0x324>)
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3319      	adds	r3, #25
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <sample_hk+0x328>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	331a      	adds	r3, #26
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <sample_hk+0x328>)
 8002a64:	881a      	ldrh	r2, [r3, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	331b      	adds	r3, #27
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <sample_hk+0x32c>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	331c      	adds	r3, #28
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002a7e:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <sample_hk+0x32c>)
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	331d      	adds	r3, #29
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002a8a:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <sample_hk+0x330>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	331e      	adds	r3, #30
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002a9a:	4b2f      	ldr	r3, [pc, #188]	; (8002b58 <sample_hk+0x330>)
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	331f      	adds	r3, #31
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <sample_hk+0x334>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3320      	adds	r3, #32
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <sample_hk+0x334>)
 8002ab8:	881a      	ldrh	r2, [r3, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3321      	adds	r3, #33	; 0x21
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 8002ac2:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <sample_hk+0x338>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3322      	adds	r3, #34	; 0x22
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <sample_hk+0x338>)
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3323      	adds	r3, #35	; 0x23
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <sample_hk+0x33c>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3324      	adds	r3, #36	; 0x24
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <sample_hk+0x33c>)
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3325      	adds	r3, #37	; 0x25
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <sample_hk+0x340>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3326      	adds	r3, #38	; 0x26
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <sample_hk+0x340>)
 8002b0c:	881a      	ldrh	r2, [r3, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3327      	adds	r3, #39	; 0x27
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

	buffer[40] = timestamp[0];
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3328      	adds	r3, #40	; 0x28
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	7812      	ldrb	r2, [r2, #0]
 8002b1e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3329      	adds	r3, #41	; 0x29
 8002b24:	e022      	b.n	8002b6c <sample_hk+0x344>
 8002b26:	bf00      	nop
 8002b28:	24000004 	.word	0x24000004
 8002b2c:	24000cec 	.word	0x24000cec
 8002b30:	24000c5c 	.word	0x24000c5c
 8002b34:	24000c26 	.word	0x24000c26
 8002b38:	24000c28 	.word	0x24000c28
 8002b3c:	24000c2a 	.word	0x24000c2a
 8002b40:	24000c2c 	.word	0x24000c2c
 8002b44:	24000c2e 	.word	0x24000c2e
 8002b48:	24000c30 	.word	0x24000c30
 8002b4c:	24000c32 	.word	0x24000c32
 8002b50:	24000c34 	.word	0x24000c34
 8002b54:	24000c36 	.word	0x24000c36
 8002b58:	24000c38 	.word	0x24000c38
 8002b5c:	24000c3a 	.word	0x24000c3a
 8002b60:	24000c3c 	.word	0x24000c3c
 8002b64:	24000c3e 	.word	0x24000c3e
 8002b68:	24000c40 	.word	0x24000c40
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	7852      	ldrb	r2, [r2, #1]
 8002b70:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	332a      	adds	r3, #42	; 0x2a
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	7892      	ldrb	r2, [r2, #2]
 8002b7a:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	332b      	adds	r3, #43	; 0x2b
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	78d2      	ldrb	r2, [r2, #3]
 8002b84:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	332c      	adds	r3, #44	; 0x2c
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	7912      	ldrb	r2, [r2, #4]
 8002b8e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	332d      	adds	r3, #45	; 0x2d
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	7952      	ldrb	r2, [r2, #5]
 8002b98:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	332e      	adds	r3, #46	; 0x2e
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	7992      	ldrb	r2, [r2, #6]
 8002ba2:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	332f      	adds	r3, #47	; 0x2f
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	79d2      	ldrb	r2, [r2, #7]
 8002bac:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3330      	adds	r3, #48	; 0x30
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	7a12      	ldrb	r2, [r2, #8]
 8002bb6:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3331      	adds	r3, #49	; 0x31
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	7a52      	ldrb	r2, [r2, #9]
 8002bc0:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2232      	movs	r2, #50	; 0x32
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fc13 	bl	80023f4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <sample_hk+0x3d0>)
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	1d39      	adds	r1, r7, #4
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f010 fccc 	bl	8013574 <osMessageQueuePut>

	free(buffer);
 8002bdc:	6978      	ldr	r0, [r7, #20]
 8002bde:	f013 ff2f 	bl	8016a40 <free>
	free(hk_i2c);
 8002be2:	6938      	ldr	r0, [r7, #16]
 8002be4:	f013 ff2c 	bl	8016a40 <free>
	free(timestamp);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f013 ff29 	bl	8016a40 <free>
}
 8002bee:	bf00      	nop
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	24000c48 	.word	0x24000c48

08002bfc <PMT_init>:
 * @brief  Function implementing the PMT_task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <PMT_init+0x38>)
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f010 fbd7 	bl	80133c2 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <PMT_init+0x3c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <PMT_init+0x30>
			sample_pmt();
 8002c1c:	f7ff fcf2 	bl	8002604 <sample_pmt>
			pmt_seq++;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <PMT_init+0x40>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <PMT_init+0x40>)
 8002c2a:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002c2c:	f010 fa96 	bl	801315c <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002c30:	e7e8      	b.n	8002c04 <PMT_init+0x8>
 8002c32:	bf00      	nop
 8002c34:	24000c64 	.word	0x24000c64
 8002c38:	24000c5e 	.word	0x24000c5e
 8002c3c:	24000c54 	.word	0x24000c54

08002c40 <ERPA_init>:
 * @brief Function implementing the ERPA_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <ERPA_init+0x34>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c50:	2200      	movs	r2, #0
 8002c52:	2102      	movs	r1, #2
 8002c54:	f010 fbb5 	bl	80133c2 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <ERPA_init+0x38>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <ERPA_init+0x2e>
			sample_erpa();
 8002c60:	f7ff fd44 	bl	80026ec <sample_erpa>
			erpa_seq++;
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <ERPA_init+0x3c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <ERPA_init+0x3c>)
 8002c6c:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002c6e:	f010 fa75 	bl	801315c <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002c72:	e7e9      	b.n	8002c48 <ERPA_init+0x8>
 8002c74:	24000c64 	.word	0x24000c64
 8002c78:	24000c5f 	.word	0x24000c5f
 8002c7c:	24000c58 	.word	0x24000c58

08002c80 <HK_init>:
 * @brief Function implementing the HK_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HK_init+0x38>)
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c90:	2200      	movs	r2, #0
 8002c92:	2104      	movs	r1, #4
 8002c94:	f010 fb95 	bl	80133c2 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HK_init+0x3c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HK_init+0x30>
			sample_hk();
 8002ca0:	f7ff fdc2 	bl	8002828 <sample_hk>
			hk_seq++;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HK_init+0x40>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HK_init+0x40>)
 8002cae:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002cb0:	f010 fa54 	bl	801315c <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002cb4:	e7e8      	b.n	8002c88 <HK_init+0x8>
 8002cb6:	bf00      	nop
 8002cb8:	24000c64 	.word	0x24000c64
 8002cbc:	24000c60 	.word	0x24000c60
 8002cc0:	24000c5c 	.word	0x24000c5c

08002cc4 <GPIO_on_init>:
 * @brief Function implementing the GPIO_on_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <GPIO_on_init+0x9c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f010 fa63 	bl	801319c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <GPIO_on_init+0xa0>)
 8002cd8:	2104      	movs	r1, #4
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f006 fa6b 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ce2:	2064      	movs	r0, #100	; 0x64
 8002ce4:	f010 fa7b 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <GPIO_on_init+0xa0>)
 8002cea:	2120      	movs	r1, #32
 8002cec:	2201      	movs	r2, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f006 fa62 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cf4:	2064      	movs	r0, #100	; 0x64
 8002cf6:	f010 fa72 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <GPIO_on_init+0xa4>)
 8002cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d00:	2201      	movs	r2, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f006 fa58 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d08:	2064      	movs	r0, #100	; 0x64
 8002d0a:	f010 fa68 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <GPIO_on_init+0xa4>)
 8002d10:	2180      	movs	r1, #128	; 0x80
 8002d12:	2201      	movs	r2, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f006 fa4f 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d1a:	2064      	movs	r0, #100	; 0x64
 8002d1c:	f010 fa5f 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <GPIO_on_init+0xa4>)
 8002d22:	2140      	movs	r1, #64	; 0x40
 8002d24:	2201      	movs	r2, #1
 8002d26:	4618      	mov	r0, r3
 8002d28:	f006 fa46 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d2c:	2064      	movs	r0, #100	; 0x64
 8002d2e:	f010 fa56 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <GPIO_on_init+0xa4>)
 8002d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f006 fa3c 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d40:	2064      	movs	r0, #100	; 0x64
 8002d42:	f010 fa4c 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <GPIO_on_init+0xa4>)
 8002d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f006 fa32 	bl	80091b8 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <GPIO_on_init+0x9c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f010 fa1f 	bl	801319c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002d5e:	e7ba      	b.n	8002cd6 <GPIO_on_init+0x12>
 8002d60:	24000750 	.word	0x24000750
 8002d64:	58020400 	.word	0x58020400
 8002d68:	58020800 	.word	0x58020800

08002d6c <GPIO_off_init>:
 * @brief Function implementing the GPIO_off_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <GPIO_off_init+0x9c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f010 fa0f 	bl	801319c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <GPIO_off_init+0xa0>)
 8002d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d84:	2200      	movs	r2, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f006 fa16 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d8c:	2064      	movs	r0, #100	; 0x64
 8002d8e:	f010 fa26 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <GPIO_off_init+0xa0>)
 8002d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f006 fa0c 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002da0:	2064      	movs	r0, #100	; 0x64
 8002da2:	f010 fa1c 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <GPIO_off_init+0xa0>)
 8002da8:	2140      	movs	r1, #64	; 0x40
 8002daa:	2200      	movs	r2, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f006 fa03 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002db2:	2064      	movs	r0, #100	; 0x64
 8002db4:	f010 fa13 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <GPIO_off_init+0xa0>)
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f006 f9fa 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dc4:	2064      	movs	r0, #100	; 0x64
 8002dc6:	f010 fa0a 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <GPIO_off_init+0xa0>)
 8002dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f006 f9f0 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dd8:	2064      	movs	r0, #100	; 0x64
 8002dda:	f010 fa00 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <GPIO_off_init+0xa4>)
 8002de0:	2120      	movs	r1, #32
 8002de2:	2200      	movs	r2, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f006 f9e7 	bl	80091b8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dea:	2064      	movs	r0, #100	; 0x64
 8002dec:	f010 f9f7 	bl	80131de <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <GPIO_off_init+0xa4>)
 8002df2:	2104      	movs	r1, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f006 f9de 	bl	80091b8 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <GPIO_off_init+0x9c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f010 f9cb 	bl	801319c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002e06:	e7ba      	b.n	8002d7e <GPIO_off_init+0x12>
 8002e08:	240009b0 	.word	0x240009b0
 8002e0c:	58020800 	.word	0x58020800
 8002e10:	58020400 	.word	0x58020400

08002e14 <UART_TX_init>:
 * and transmitting data as long as the task is running.
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <UART_TX_init+0xa4>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4923      	ldr	r1, [pc, #140]	; (8002ebc <UART_TX_init+0xa8>)
 8002e30:	f010 fc00 	bl	8013634 <osMessageQueueGet>
 8002e34:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d121      	bne.n	8002e80 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <UART_TX_init+0xa8>)
 8002e3e:	889b      	ldrh	r3, [r3, #4]
 8002e40:	461a      	mov	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e4a:	d219      	bcs.n	8002e80 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <UART_TX_init+0xac>)
 8002e50:	4413      	add	r3, r2
 8002e52:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <UART_TX_init+0xa8>)
 8002e54:	6811      	ldr	r1, [r2, #0]
 8002e56:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <UART_TX_init+0xa8>)
 8002e58:	8892      	ldrh	r2, [r2, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f013 fdf8 	bl	8016a50 <memcpy>
					free(msg.array);
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <UART_TX_init+0xa8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f013 fdeb 	bl	8016a40 <free>
					total_size += msg.size;
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <UART_TX_init+0xa8>)
 8002e6c:	889b      	ldrh	r3, [r3, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f240 32b5 	movw	r2, #949	; 0x3b5
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d803      	bhi.n	8002e88 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ce      	beq.n	8002e24 <UART_TX_init+0x10>
 8002e86:	e000      	b.n	8002e8a <UART_TX_init+0x76>
						break;
 8002e88:	bf00      	nop

		if (total_size > 0) {
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	490a      	ldr	r1, [pc, #40]	; (8002ec0 <UART_TX_init+0xac>)
 8002e98:	480a      	ldr	r0, [pc, #40]	; (8002ec4 <UART_TX_init+0xb0>)
 8002e9a:	f00d fabd 	bl	8010418 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002e9e:	e001      	b.n	8002ea4 <UART_TX_init+0x90>
				osThreadYield();
 8002ea0:	f010 f95c 	bl	801315c <osThreadYield>
			while (tx_flag == 0) {
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <UART_TX_init+0xb4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f9      	beq.n	8002ea0 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <UART_TX_init+0xb4>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002eb2:	f010 f953 	bl	801315c <osThreadYield>
		total_size = 0;
 8002eb6:	e7b3      	b.n	8002e20 <UART_TX_init+0xc>
 8002eb8:	24000c48 	.word	0x24000c48
 8002ebc:	24000c4c 	.word	0x24000c4c
 8002ec0:	24000cf4 	.word	0x24000cf4
 8002ec4:	24000638 	.word	0x24000638
 8002ec8:	24000000 	.word	0x24000000

08002ecc <Voltage_Monitor_init>:
 * @brief Function implementing the Voltage_Monitor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <Voltage_Monitor_init+0xbc>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002edc:	2200      	movs	r2, #0
 8002ede:	2108      	movs	r1, #8
 8002ee0:	f010 fa6f 	bl	80133c2 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002ee4:	2014      	movs	r0, #20
 8002ee6:	f013 fda3 	bl	8016a30 <malloc>
 8002eea:	4603      	mov	r3, r0
 8002eec:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002eee:	2008      	movs	r0, #8
 8002ef0:	f013 fd9e 	bl	8016a30 <malloc>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff f88d 	bl	8002018 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002efe:	68b8      	ldr	r0, [r7, #8]
 8002f00:	f7ff f8dc 	bl	80020bc <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	885a      	ldrh	r2, [r3, #2]
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <Voltage_Monitor_init+0xc0>)
 8002f0a:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <Voltage_Monitor_init+0xc4>)
 8002f12:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <Voltage_Monitor_init+0xc8>)
 8002f1a:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	885a      	ldrh	r2, [r3, #2]
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <Voltage_Monitor_init+0xcc>)
 8002f22:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	889a      	ldrh	r2, [r3, #4]
 8002f28:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <Voltage_Monitor_init+0xd0>)
 8002f2a:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	88da      	ldrh	r2, [r3, #6]
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <Voltage_Monitor_init+0xd4>)
 8002f32:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	899a      	ldrh	r2, [r3, #12]
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <Voltage_Monitor_init+0xd8>)
 8002f3a:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	88da      	ldrh	r2, [r3, #6]
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <Voltage_Monitor_init+0xdc>)
 8002f42:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	889a      	ldrh	r2, [r3, #4]
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <Voltage_Monitor_init+0xe0>)
 8002f4a:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	89da      	ldrh	r2, [r3, #14]
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <Voltage_Monitor_init+0xe4>)
 8002f52:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8a1a      	ldrh	r2, [r3, #16]
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <Voltage_Monitor_init+0xe8>)
 8002f5a:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	891a      	ldrh	r2, [r3, #8]
 8002f60:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <Voltage_Monitor_init+0xec>)
 8002f62:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	895a      	ldrh	r2, [r3, #10]
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <Voltage_Monitor_init+0xf0>)
 8002f6a:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8a5a      	ldrh	r2, [r3, #18]
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <Voltage_Monitor_init+0xf4>)
 8002f72:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f013 fd63 	bl	8016a40 <free>
		free(hk_adc3);
 8002f7a:	68b8      	ldr	r0, [r7, #8]
 8002f7c:	f013 fd60 	bl	8016a40 <free>

		osThreadYield();
 8002f80:	f010 f8ec 	bl	801315c <osThreadYield>
	for (;;) {
 8002f84:	e7a6      	b.n	8002ed4 <Voltage_Monitor_init+0x8>
 8002f86:	bf00      	nop
 8002f88:	24000c64 	.word	0x24000c64
 8002f8c:	24000c26 	.word	0x24000c26
 8002f90:	24000c28 	.word	0x24000c28
 8002f94:	24000c2a 	.word	0x24000c2a
 8002f98:	24000c2c 	.word	0x24000c2c
 8002f9c:	24000c2e 	.word	0x24000c2e
 8002fa0:	24000c30 	.word	0x24000c30
 8002fa4:	24000c32 	.word	0x24000c32
 8002fa8:	24000c34 	.word	0x24000c34
 8002fac:	24000c36 	.word	0x24000c36
 8002fb0:	24000c38 	.word	0x24000c38
 8002fb4:	24000c3a 	.word	0x24000c3a
 8002fb8:	24000c3c 	.word	0x24000c3c
 8002fbc:	24000c3e 	.word	0x24000c3e
 8002fc0:	24000c40 	.word	0x24000c40

08002fc4 <FLAG_init>:
 * @brief Function implementing the FLAG_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <FLAG_init+0x38>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f010 f9d5 	bl	8013380 <osEventFlagsGet>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0316 	and.w	r3, r3, #22
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <FLAG_init+0x38>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2116      	movs	r1, #22
 8002fea:	4618      	mov	r0, r3
 8002fec:	f010 f996 	bl	801331c <osEventFlagsClear>
			enter_stop();
 8002ff0:	f7ff f942 	bl	8002278 <enter_stop>
		}
		osDelay(1);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f010 f8f2 	bl	80131de <osDelay>
	for (;;) {
 8002ffa:	e7e7      	b.n	8002fcc <FLAG_init+0x8>
 8002ffc:	24000c64 	.word	0x24000c64

08003000 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a04      	ldr	r2, [pc, #16]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003012:	f000 ff85 	bl	8003f20 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40001000 	.word	0x40001000

08003024 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003028:	b672      	cpsid	i
}
 800302a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800302c:	e7fe      	b.n	800302c <Error_Handler+0x8>
	...

08003030 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_MspInit+0x38>)
 8003038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <HAL_MspInit+0x38>)
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_MspInit+0x38>)
 8003048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	210f      	movs	r1, #15
 8003058:	f06f 0001 	mvn.w	r0, #1
 800305c:	f002 fc6e 	bl	800593c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	58024400 	.word	0x58024400

0800306c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08e      	sub	sp, #56	; 0x38
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a7b      	ldr	r2, [pc, #492]	; (8003278 <HAL_ADC_MspInit+0x20c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	f040 8091 	bne.w	80031b2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003090:	4b7a      	ldr	r3, [pc, #488]	; (800327c <HAL_ADC_MspInit+0x210>)
 8003092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003096:	4a79      	ldr	r2, [pc, #484]	; (800327c <HAL_ADC_MspInit+0x210>)
 8003098:	f043 0320 	orr.w	r3, r3, #32
 800309c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030a0:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	4b73      	ldr	r3, [pc, #460]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b4:	4a71      	ldr	r2, [pc, #452]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030be:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030cc:	4b6b      	ldr	r3, [pc, #428]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d2:	4a6a      	ldr	r2, [pc, #424]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030dc:	4b67      	ldr	r3, [pc, #412]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ea:	4b64      	ldr	r3, [pc, #400]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f0:	4a62      	ldr	r2, [pc, #392]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030fa:	4b60      	ldr	r3, [pc, #384]	; (800327c <HAL_ADC_MspInit+0x210>)
 80030fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003108:	2333      	movs	r3, #51	; 0x33
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800310c:	2303      	movs	r3, #3
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003118:	4619      	mov	r1, r3
 800311a:	4859      	ldr	r0, [pc, #356]	; (8003280 <HAL_ADC_MspInit+0x214>)
 800311c:	f005 fe84 	bl	8008e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8003120:	23ce      	movs	r3, #206	; 0xce
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003124:	2303      	movs	r3, #3
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003130:	4619      	mov	r1, r3
 8003132:	4854      	ldr	r0, [pc, #336]	; (8003284 <HAL_ADC_MspInit+0x218>)
 8003134:	f005 fe78 	bl	8008e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003138:	2303      	movs	r3, #3
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800313c:	2303      	movs	r3, #3
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003148:	4619      	mov	r1, r3
 800314a:	484f      	ldr	r0, [pc, #316]	; (8003288 <HAL_ADC_MspInit+0x21c>)
 800314c:	f005 fe6c 	bl	8008e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003150:	4b4e      	ldr	r3, [pc, #312]	; (800328c <HAL_ADC_MspInit+0x220>)
 8003152:	4a4f      	ldr	r2, [pc, #316]	; (8003290 <HAL_ADC_MspInit+0x224>)
 8003154:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003156:	4b4d      	ldr	r3, [pc, #308]	; (800328c <HAL_ADC_MspInit+0x220>)
 8003158:	2209      	movs	r2, #9
 800315a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_ADC_MspInit+0x220>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003162:	4b4a      	ldr	r3, [pc, #296]	; (800328c <HAL_ADC_MspInit+0x220>)
 8003164:	2200      	movs	r2, #0
 8003166:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003168:	4b48      	ldr	r3, [pc, #288]	; (800328c <HAL_ADC_MspInit+0x220>)
 800316a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800316e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_ADC_MspInit+0x220>)
 8003172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003176:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003178:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_ADC_MspInit+0x220>)
 800317a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800317e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003180:	4b42      	ldr	r3, [pc, #264]	; (800328c <HAL_ADC_MspInit+0x220>)
 8003182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003186:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003188:	4b40      	ldr	r3, [pc, #256]	; (800328c <HAL_ADC_MspInit+0x220>)
 800318a:	2200      	movs	r2, #0
 800318c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_ADC_MspInit+0x220>)
 8003190:	2200      	movs	r2, #0
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003194:	483d      	ldr	r0, [pc, #244]	; (800328c <HAL_ADC_MspInit+0x220>)
 8003196:	f002 ffff 	bl	8006198 <HAL_DMA_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80031a0:	f7ff ff40 	bl	8003024 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a39      	ldr	r2, [pc, #228]	; (800328c <HAL_ADC_MspInit+0x220>)
 80031a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80031aa:	4a38      	ldr	r2, [pc, #224]	; (800328c <HAL_ADC_MspInit+0x220>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80031b0:	e05e      	b.n	8003270 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a37      	ldr	r2, [pc, #220]	; (8003294 <HAL_ADC_MspInit+0x228>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d159      	bne.n	8003270 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_ADC_MspInit+0x210>)
 80031be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c2:	4a2e      	ldr	r2, [pc, #184]	; (800327c <HAL_ADC_MspInit+0x210>)
 80031c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_ADC_MspInit+0x210>)
 80031ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031da:	4b28      	ldr	r3, [pc, #160]	; (800327c <HAL_ADC_MspInit+0x210>)
 80031dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <HAL_ADC_MspInit+0x210>)
 80031e2:	f043 0304 	orr.w	r3, r3, #4
 80031e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_ADC_MspInit+0x210>)
 80031ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80031f8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80031fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003200:	f000 feba 	bl	8003f78 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003204:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003208:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800320c:	f000 feb4 	bl	8003f78 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_ADC_MspInit+0x230>)
 8003214:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 8003218:	2273      	movs	r2, #115	; 0x73
 800321a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 8003224:	2200      	movs	r2, #0
 8003226:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 800322a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 8003232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003236:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003238:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 800323a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800323e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003240:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 8003242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003246:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 800324a:	2200      	movs	r2, #0
 800324c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 8003250:	2200      	movs	r2, #0
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003254:	4810      	ldr	r0, [pc, #64]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 8003256:	f002 ff9f 	bl	8006198 <HAL_DMA_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003260:	f7ff fee0 	bl	8003024 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 8003268:	64da      	str	r2, [r3, #76]	; 0x4c
 800326a:	4a0b      	ldr	r2, [pc, #44]	; (8003298 <HAL_ADC_MspInit+0x22c>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003270:	bf00      	nop
 8003272:	3738      	adds	r7, #56	; 0x38
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40022000 	.word	0x40022000
 800327c:	58024400 	.word	0x58024400
 8003280:	58020800 	.word	0x58020800
 8003284:	58020000 	.word	0x58020000
 8003288:	58020400 	.word	0x58020400
 800328c:	24000204 	.word	0x24000204
 8003290:	40020010 	.word	0x40020010
 8003294:	58026000 	.word	0x58026000
 8003298:	2400027c 	.word	0x2400027c
 800329c:	40020028 	.word	0x40020028

080032a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a34      	ldr	r2, [pc, #208]	; (8003390 <HAL_DAC_MspInit+0xf0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d161      	bne.n	8003386 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_DAC_MspInit+0xf4>)
 80032c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032c8:	4a32      	ldr	r2, [pc, #200]	; (8003394 <HAL_DAC_MspInit+0xf4>)
 80032ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032d2:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_DAC_MspInit+0xf4>)
 80032d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e0:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <HAL_DAC_MspInit+0xf4>)
 80032e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e6:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <HAL_DAC_MspInit+0xf4>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_DAC_MspInit+0xf4>)
 80032f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032fe:	2310      	movs	r3, #16
 8003300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003302:	2303      	movs	r3, #3
 8003304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	4619      	mov	r1, r3
 8003310:	4821      	ldr	r0, [pc, #132]	; (8003398 <HAL_DAC_MspInit+0xf8>)
 8003312:	f005 fd89 	bl	8008e28 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8003316:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003318:	4a21      	ldr	r2, [pc, #132]	; (80033a0 <HAL_DAC_MspInit+0x100>)
 800331a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800331c:	4b1f      	ldr	r3, [pc, #124]	; (800339c <HAL_DAC_MspInit+0xfc>)
 800331e:	2243      	movs	r2, #67	; 0x43
 8003320:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_DAC_MspInit+0xfc>)
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003334:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800333c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800333e:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003340:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003344:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003350:	2200      	movs	r2, #0
 8003352:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003356:	2200      	movs	r2, #0
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800335a:	4810      	ldr	r0, [pc, #64]	; (800339c <HAL_DAC_MspInit+0xfc>)
 800335c:	f002 ff1c 	bl	8006198 <HAL_DMA_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003366:	f7ff fe5d 	bl	8003024 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HAL_DAC_MspInit+0xfc>)
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_DAC_MspInit+0xfc>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2105      	movs	r1, #5
 800337a:	2036      	movs	r0, #54	; 0x36
 800337c:	f002 fade 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003380:	2036      	movs	r0, #54	; 0x36
 8003382:	f002 faf5 	bl	8005970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003386:	bf00      	nop
 8003388:	3728      	adds	r7, #40	; 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40007400 	.word	0x40007400
 8003394:	58024400 	.word	0x58024400
 8003398:	58020000 	.word	0x58020000
 800339c:	24000308 	.word	0x24000308
 80033a0:	40020088 	.word	0x40020088

080033a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b0ba      	sub	sp, #232	; 0xe8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033bc:	f107 0310 	add.w	r3, r7, #16
 80033c0:	22c0      	movs	r2, #192	; 0xc0
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f013 fb51 	bl	8016a6c <memset>
  if(hi2c->Instance==I2C1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a27      	ldr	r2, [pc, #156]	; (800346c <HAL_I2C_MspInit+0xc8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d146      	bne.n	8003462 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033d4:	f04f 0208 	mov.w	r2, #8
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	4618      	mov	r0, r3
 80033ec:	f007 fda8 	bl	800af40 <HAL_RCCEx_PeriphCLKConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80033f6:	f7ff fe15 	bl	8003024 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_I2C_MspInit+0xcc>)
 80033fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003400:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <HAL_I2C_MspInit+0xcc>)
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_I2C_MspInit+0xcc>)
 800340c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003418:	f44f 7340 	mov.w	r3, #768	; 0x300
 800341c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003420:	2312      	movs	r3, #18
 8003422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003432:	2304      	movs	r3, #4
 8003434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003438:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800343c:	4619      	mov	r1, r3
 800343e:	480d      	ldr	r0, [pc, #52]	; (8003474 <HAL_I2C_MspInit+0xd0>)
 8003440:	f005 fcf2 	bl	8008e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_I2C_MspInit+0xcc>)
 8003446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <HAL_I2C_MspInit+0xcc>)
 800344c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003450:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_I2C_MspInit+0xcc>)
 8003456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800345a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003462:	bf00      	nop
 8003464:	37e8      	adds	r7, #232	; 0xe8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40005400 	.word	0x40005400
 8003470:	58024400 	.word	0x58024400
 8003474:	58020400 	.word	0x58020400

08003478 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b0b2      	sub	sp, #200	; 0xc8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003480:	f107 0308 	add.w	r3, r7, #8
 8003484:	22c0      	movs	r2, #192	; 0xc0
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f013 faef 	bl	8016a6c <memset>
  if(hrtc->Instance==RTC)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a10      	ldr	r2, [pc, #64]	; (80034d4 <HAL_RTC_MspInit+0x5c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d118      	bne.n	80034ca <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003498:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_RTC_MspInit+0x60>)
 80034a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f007 fd46 	bl	800af40 <HAL_RCCEx_PeriphCLKConfig>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80034ba:	f7ff fdb3 	bl	8003024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_RTC_MspInit+0x64>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a06      	ldr	r2, [pc, #24]	; (80034dc <HAL_RTC_MspInit+0x64>)
 80034c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034ca:	bf00      	nop
 80034cc:	37c8      	adds	r7, #200	; 0xc8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	58004000 	.word	0x58004000
 80034d8:	00019300 	.word	0x00019300
 80034dc:	58024400 	.word	0x58024400

080034e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b0bc      	sub	sp, #240	; 0xf0
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034f8:	f107 0318 	add.w	r3, r7, #24
 80034fc:	22c0      	movs	r2, #192	; 0xc0
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f013 fab3 	bl	8016a6c <memset>
  if(hspi->Instance==SPI1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a4c      	ldr	r2, [pc, #304]	; (800363c <HAL_SPI_MspInit+0x15c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d145      	bne.n	800359c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800351c:	2300      	movs	r3, #0
 800351e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003520:	f107 0318 	add.w	r3, r7, #24
 8003524:	4618      	mov	r0, r3
 8003526:	f007 fd0b 	bl	800af40 <HAL_RCCEx_PeriphCLKConfig>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003530:	f7ff fd78 	bl	8003024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003534:	4b42      	ldr	r3, [pc, #264]	; (8003640 <HAL_SPI_MspInit+0x160>)
 8003536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800353a:	4a41      	ldr	r2, [pc, #260]	; (8003640 <HAL_SPI_MspInit+0x160>)
 800353c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003544:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <HAL_SPI_MspInit+0x160>)
 8003546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800354a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_SPI_MspInit+0x160>)
 8003554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003558:	4a39      	ldr	r2, [pc, #228]	; (8003640 <HAL_SPI_MspInit+0x160>)
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003562:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_SPI_MspInit+0x160>)
 8003564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003570:	2318      	movs	r3, #24
 8003572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003582:	2300      	movs	r3, #0
 8003584:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003588:	2305      	movs	r3, #5
 800358a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003592:	4619      	mov	r1, r3
 8003594:	482b      	ldr	r0, [pc, #172]	; (8003644 <HAL_SPI_MspInit+0x164>)
 8003596:	f005 fc47 	bl	8008e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800359a:	e04a      	b.n	8003632 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a29      	ldr	r2, [pc, #164]	; (8003648 <HAL_SPI_MspInit+0x168>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d145      	bne.n	8003632 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80035a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035b6:	f107 0318 	add.w	r3, r7, #24
 80035ba:	4618      	mov	r0, r3
 80035bc:	f007 fcc0 	bl	800af40 <HAL_RCCEx_PeriphCLKConfig>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80035c6:	f7ff fd2d 	bl	8003024 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_SPI_MspInit+0x160>)
 80035cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035d0:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_SPI_MspInit+0x160>)
 80035d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035da:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_SPI_MspInit+0x160>)
 80035dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <HAL_SPI_MspInit+0x160>)
 80035ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ee:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_SPI_MspInit+0x160>)
 80035f0:	f043 0302 	orr.w	r3, r3, #2
 80035f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_SPI_MspInit+0x160>)
 80035fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003606:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800360a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003620:	2305      	movs	r3, #5
 8003622:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003626:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800362a:	4619      	mov	r1, r3
 800362c:	4805      	ldr	r0, [pc, #20]	; (8003644 <HAL_SPI_MspInit+0x164>)
 800362e:	f005 fbfb 	bl	8008e28 <HAL_GPIO_Init>
}
 8003632:	bf00      	nop
 8003634:	37f0      	adds	r7, #240	; 0xf0
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40013000 	.word	0x40013000
 8003640:	58024400 	.word	0x58024400
 8003644:	58020400 	.word	0x58020400
 8003648:	40003800 	.word	0x40003800

0800364c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a46      	ldr	r2, [pc, #280]	; (8003774 <HAL_TIM_Base_MspInit+0x128>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d12f      	bne.n	80036be <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800365e:	4b46      	ldr	r3, [pc, #280]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 8003660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003664:	4a44      	ldr	r2, [pc, #272]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800366e:	4b42      	ldr	r3, [pc, #264]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 8003670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2105      	movs	r1, #5
 8003680:	2018      	movs	r0, #24
 8003682:	f002 f95b 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003686:	2018      	movs	r0, #24
 8003688:	f002 f972 	bl	8005970 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2105      	movs	r1, #5
 8003690:	2019      	movs	r0, #25
 8003692:	f002 f953 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003696:	2019      	movs	r0, #25
 8003698:	f002 f96a 	bl	8005970 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	2105      	movs	r1, #5
 80036a0:	201a      	movs	r0, #26
 80036a2:	f002 f94b 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80036a6:	201a      	movs	r0, #26
 80036a8:	f002 f962 	bl	8005970 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2105      	movs	r1, #5
 80036b0:	201b      	movs	r0, #27
 80036b2:	f002 f943 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80036b6:	201b      	movs	r0, #27
 80036b8:	f002 f95a 	bl	8005970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036bc:	e055      	b.n	800376a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d117      	bne.n	80036f8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036c8:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 80036ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ce:	4a2a      	ldr	r2, [pc, #168]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 80036da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	2105      	movs	r1, #5
 80036ea:	201c      	movs	r0, #28
 80036ec:	f002 f926 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036f0:	201c      	movs	r0, #28
 80036f2:	f002 f93d 	bl	8005970 <HAL_NVIC_EnableIRQ>
}
 80036f6:	e038      	b.n	800376a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1f      	ldr	r2, [pc, #124]	; (800377c <HAL_TIM_Base_MspInit+0x130>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d117      	bne.n	8003732 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 8003704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003708:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003712:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 8003714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003720:	2200      	movs	r2, #0
 8003722:	2105      	movs	r1, #5
 8003724:	201d      	movs	r0, #29
 8003726:	f002 f909 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800372a:	201d      	movs	r0, #29
 800372c:	f002 f920 	bl	8005970 <HAL_NVIC_EnableIRQ>
}
 8003730:	e01b      	b.n	800376a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <HAL_TIM_Base_MspInit+0x134>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d116      	bne.n	800376a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 800373e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003742:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <HAL_TIM_Base_MspInit+0x12c>)
 800374e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800375a:	2200      	movs	r2, #0
 800375c:	2105      	movs	r1, #5
 800375e:	201e      	movs	r0, #30
 8003760:	f002 f8ec 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003764:	201e      	movs	r0, #30
 8003766:	f002 f903 	bl	8005970 <HAL_NVIC_EnableIRQ>
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	58024400 	.word	0x58024400
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800

08003784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_TIM_MspPostInit+0xb8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d120      	bne.n	80037e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 0314 	add.w	r3, r7, #20
 80037de:	4619      	mov	r1, r3
 80037e0:	4818      	ldr	r0, [pc, #96]	; (8003844 <HAL_TIM_MspPostInit+0xc0>)
 80037e2:	f005 fb21 	bl	8008e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80037e6:	e024      	b.n	8003832 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d11f      	bne.n	8003832 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f8:	4a11      	ldr	r2, [pc, #68]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 80037fa:	f043 0302 	orr.w	r3, r3, #2
 80037fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
 8003804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003822:	2301      	movs	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4619      	mov	r1, r3
 800382c:	4806      	ldr	r0, [pc, #24]	; (8003848 <HAL_TIM_MspPostInit+0xc4>)
 800382e:	f005 fafb 	bl	8008e28 <HAL_GPIO_Init>
}
 8003832:	bf00      	nop
 8003834:	3728      	adds	r7, #40	; 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	58024400 	.word	0x58024400
 8003844:	58020000 	.word	0x58020000
 8003848:	58020400 	.word	0x58020400

0800384c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b0ba      	sub	sp, #232	; 0xe8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003864:	f107 0310 	add.w	r3, r7, #16
 8003868:	22c0      	movs	r2, #192	; 0xc0
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f013 f8fd 	bl	8016a6c <memset>
  if(huart->Instance==USART1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a41      	ldr	r2, [pc, #260]	; (800397c <HAL_UART_MspInit+0x130>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d17b      	bne.n	8003974 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800387c:	f04f 0201 	mov.w	r2, #1
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003888:	2318      	movs	r3, #24
 800388a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800388e:	f107 0310 	add.w	r3, r7, #16
 8003892:	4618      	mov	r0, r3
 8003894:	f007 fb54 	bl	800af40 <HAL_RCCEx_PeriphCLKConfig>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800389e:	f7ff fbc1 	bl	8003024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038a2:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_UART_MspInit+0x134>)
 80038a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038a8:	4a35      	ldr	r2, [pc, #212]	; (8003980 <HAL_UART_MspInit+0x134>)
 80038aa:	f043 0310 	orr.w	r3, r3, #16
 80038ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038b2:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_UART_MspInit+0x134>)
 80038b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <HAL_UART_MspInit+0x134>)
 80038c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c6:	4a2e      	ldr	r2, [pc, #184]	; (8003980 <HAL_UART_MspInit+0x134>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d0:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <HAL_UART_MspInit+0x134>)
 80038d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038f8:	2307      	movs	r3, #7
 80038fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003902:	4619      	mov	r1, r3
 8003904:	481f      	ldr	r0, [pc, #124]	; (8003984 <HAL_UART_MspInit+0x138>)
 8003906:	f005 fa8f 	bl	8008e28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800390a:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800390c:	4a1f      	ldr	r2, [pc, #124]	; (800398c <HAL_UART_MspInit+0x140>)
 800390e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003912:	222a      	movs	r2, #42	; 0x2a
 8003914:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800391c:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003928:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800392c:	2200      	movs	r2, #0
 800392e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003932:	2200      	movs	r2, #0
 8003934:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003936:	4b14      	ldr	r3, [pc, #80]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003938:	2200      	movs	r2, #0
 800393a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800393e:	2200      	movs	r2, #0
 8003940:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003942:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003944:	2200      	movs	r2, #0
 8003946:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003948:	480f      	ldr	r0, [pc, #60]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800394a:	f002 fc25 	bl	8006198 <HAL_DMA_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003954:	f7ff fb66 	bl	8003024 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800395c:	67da      	str	r2, [r3, #124]	; 0x7c
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003964:	2200      	movs	r2, #0
 8003966:	2105      	movs	r1, #5
 8003968:	2025      	movs	r0, #37	; 0x25
 800396a:	f001 ffe7 	bl	800593c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800396e:	2025      	movs	r0, #37	; 0x25
 8003970:	f001 fffe 	bl	8005970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003974:	bf00      	nop
 8003976:	37e8      	adds	r7, #232	; 0xe8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40011000 	.word	0x40011000
 8003980:	58024400 	.word	0x58024400
 8003984:	58020000 	.word	0x58020000
 8003988:	240006cc 	.word	0x240006cc
 800398c:	40020040 	.word	0x40020040

08003990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b090      	sub	sp, #64	; 0x40
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b0f      	cmp	r3, #15
 800399c:	d827      	bhi.n	80039ee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800399e:	2200      	movs	r2, #0
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	2036      	movs	r0, #54	; 0x36
 80039a4:	f001 ffca 	bl	800593c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039a8:	2036      	movs	r0, #54	; 0x36
 80039aa:	f001 ffe1 	bl	8005970 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80039ae:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <HAL_InitTick+0xc4>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80039b4:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_InitTick+0xc8>)
 80039b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ba:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <HAL_InitTick+0xc8>)
 80039bc:	f043 0310 	orr.w	r3, r3, #16
 80039c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039c4:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_InitTick+0xc8>)
 80039c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039d2:	f107 0210 	add.w	r2, r7, #16
 80039d6:	f107 0314 	add.w	r3, r7, #20
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f007 fa6d 	bl	800aebc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d106      	bne.n	80039fa <HAL_InitTick+0x6a>
 80039ec:	e001      	b.n	80039f2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e02b      	b.n	8003a4a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80039f2:	f007 fa37 	bl	800ae64 <HAL_RCC_GetPCLK1Freq>
 80039f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80039f8:	e004      	b.n	8003a04 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80039fa:	f007 fa33 	bl	800ae64 <HAL_RCC_GetPCLK1Freq>
 80039fe:	4603      	mov	r3, r0
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <HAL_InitTick+0xcc>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	0c9b      	lsrs	r3, r3, #18
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_InitTick+0xd0>)
 8003a14:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <HAL_InitTick+0xd4>)
 8003a16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_InitTick+0xd0>)
 8003a1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a20:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <HAL_InitTick+0xd0>)
 8003a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a26:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <HAL_InitTick+0xd0>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_InitTick+0xd0>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003a32:	480b      	ldr	r0, [pc, #44]	; (8003a60 <HAL_InitTick+0xd0>)
 8003a34:	f00a fef5 	bl	800e822 <HAL_TIM_Base_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003a3e:	4808      	ldr	r0, [pc, #32]	; (8003a60 <HAL_InitTick+0xd0>)
 8003a40:	f00a ff46 	bl	800e8d0 <HAL_TIM_Base_Start_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	e000      	b.n	8003a4a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3740      	adds	r7, #64	; 0x40
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	24000098 	.word	0x24000098
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	431bde83 	.word	0x431bde83
 8003a60:	240010dc 	.word	0x240010dc
 8003a64:	40001000 	.word	0x40001000

08003a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003a6c:	e7fe      	b.n	8003a6c <NMI_Handler+0x4>

08003a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <HardFault_Handler+0x4>

08003a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <MemManage_Handler+0x4>

08003a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a7e:	e7fe      	b.n	8003a7e <BusFault_Handler+0x4>

08003a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a84:	e7fe      	b.n	8003a84 <UsageFault_Handler+0x4>

08003a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <DMA1_Stream0_IRQHandler+0x10>)
 8003a9a:	f003 fea7 	bl	80077ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	24000204 	.word	0x24000204

08003aa8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <DMA1_Stream1_IRQHandler+0x10>)
 8003aae:	f003 fe9d 	bl	80077ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2400027c 	.word	0x2400027c

08003abc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <DMA1_Stream2_IRQHandler+0x10>)
 8003ac2:	f003 fe93 	bl	80077ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	240006cc 	.word	0x240006cc

08003ad0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <DMA1_Stream5_IRQHandler+0x10>)
 8003ad6:	f003 fe89 	bl	80077ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	24000308 	.word	0x24000308

08003ae4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <TIM1_BRK_IRQHandler+0x10>)
 8003aea:	f00b fa08 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	24000508 	.word	0x24000508

08003af8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <TIM1_UP_IRQHandler+0x10>)
 8003afe:	f00b f9fe 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	24000508 	.word	0x24000508

08003b0c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <TIM1_TRG_COM_IRQHandler+0x10>)
 8003b12:	f00b f9f4 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	24000508 	.word	0x24000508

08003b20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <TIM1_CC_IRQHandler+0x10>)
 8003b26:	f00b f9ea 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	24000508 	.word	0x24000508

08003b34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <TIM2_IRQHandler+0x10>)
 8003b3a:	f00b f9e0 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	24000554 	.word	0x24000554

08003b48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <TIM3_IRQHandler+0x10>)
 8003b4e:	f00b f9d6 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	240005a0 	.word	0x240005a0

08003b5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <TIM4_IRQHandler+0x10>)
 8003b62:	f00b f9cc 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	240005ec 	.word	0x240005ec

08003b70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <USART1_IRQHandler+0x10>)
 8003b76:	f00c fd85 	bl	8010684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	24000638 	.word	0x24000638

08003b84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <TIM6_DAC_IRQHandler+0x20>)
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003b92:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <TIM6_DAC_IRQHandler+0x20>)
 8003b94:	f002 f881 	bl	8005c9a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003b98:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <TIM6_DAC_IRQHandler+0x24>)
 8003b9a:	f00b f9b0 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	240002f4 	.word	0x240002f4
 8003ba8:	240010dc 	.word	0x240010dc

08003bac <ITM_SendChar>:
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <ITM_SendChar+0x48>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a0e      	ldr	r2, [pc, #56]	; (8003bf4 <ITM_SendChar+0x48>)
 8003bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <ITM_SendChar+0x4c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <ITM_SendChar+0x4c>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	bf00      	nop
 8003bd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f8      	beq.n	8003bd0 <ITM_SendChar+0x24>
 8003bde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000edfc 	.word	0xe000edfc
 8003bf8:	e0000e00 	.word	0xe0000e00

08003bfc <_read>:
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e00a      	b.n	8003c24 <_read+0x28>
 8003c0e:	f3af 8000 	nop.w
 8003c12:	4601      	mov	r1, r0
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	60ba      	str	r2, [r7, #8]
 8003c1a:	b2ca      	uxtb	r2, r1
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3301      	adds	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	dbf0      	blt.n	8003c0e <_read+0x12>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <_write>:
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e009      	b.n	8003c5c <_write+0x26>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	60ba      	str	r2, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ffab 	bl	8003bac <ITM_SendChar>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	dbf1      	blt.n	8003c48 <_write+0x12>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_close>:
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_fstat>:
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_isatty>:
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_lseek>:
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <_sbrk>:
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <_sbrk+0x5c>)
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <_sbrk+0x60>)
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <_sbrk+0x64>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <_sbrk+0x22>
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <_sbrk+0x64>)
 8003cf6:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <_sbrk+0x68>)
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <_sbrk+0x64>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d207      	bcs.n	8003d18 <_sbrk+0x40>
 8003d08:	f012 fe68 	bl	80169dc <__errno>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	220c      	movs	r2, #12
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d16:	e009      	b.n	8003d2c <_sbrk+0x54>
 8003d18:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <_sbrk+0x64>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <_sbrk+0x64>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <_sbrk+0x64>)
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	24080000 	.word	0x24080000
 8003d38:	00000400 	.word	0x00000400
 8003d3c:	24001128 	.word	0x24001128
 8003d40:	24005a90 	.word	0x24005a90

08003d44 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003d48:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <SystemInit+0xe4>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	4a36      	ldr	r2, [pc, #216]	; (8003e28 <SystemInit+0xe4>)
 8003d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003d58:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <SystemInit+0xe8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	2b06      	cmp	r3, #6
 8003d62:	d807      	bhi.n	8003d74 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003d64:	4b31      	ldr	r3, [pc, #196]	; (8003e2c <SystemInit+0xe8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 030f 	bic.w	r3, r3, #15
 8003d6c:	4a2f      	ldr	r2, [pc, #188]	; (8003e2c <SystemInit+0xe8>)
 8003d6e:	f043 0307 	orr.w	r3, r3, #7
 8003d72:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003d74:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <SystemInit+0xec>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <SystemInit+0xec>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <SystemInit+0xec>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003d86:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <SystemInit+0xec>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4929      	ldr	r1, [pc, #164]	; (8003e30 <SystemInit+0xec>)
 8003d8c:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <SystemInit+0xf0>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003d92:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <SystemInit+0xe8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003d9e:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <SystemInit+0xe8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 030f 	bic.w	r3, r3, #15
 8003da6:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <SystemInit+0xe8>)
 8003da8:	f043 0307 	orr.w	r3, r3, #7
 8003dac:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <SystemInit+0xec>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <SystemInit+0xec>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <SystemInit+0xec>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <SystemInit+0xec>)
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <SystemInit+0xf4>)
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <SystemInit+0xec>)
 8003dc8:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <SystemInit+0xf8>)
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <SystemInit+0xec>)
 8003dce:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <SystemInit+0xfc>)
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <SystemInit+0xec>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <SystemInit+0xec>)
 8003dda:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <SystemInit+0xfc>)
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003dde:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <SystemInit+0xec>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003de4:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <SystemInit+0xec>)
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <SystemInit+0xfc>)
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <SystemInit+0xec>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <SystemInit+0xec>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <SystemInit+0xec>)
 8003df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfa:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <SystemInit+0xec>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <SystemInit+0x100>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <SystemInit+0x104>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e0e:	d202      	bcs.n	8003e16 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003e10:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <SystemInit+0x108>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <SystemInit+0x10c>)
 8003e18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00
 8003e2c:	52002000 	.word	0x52002000
 8003e30:	58024400 	.word	0x58024400
 8003e34:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e38:	02020200 	.word	0x02020200
 8003e3c:	01ff0000 	.word	0x01ff0000
 8003e40:	01010280 	.word	0x01010280
 8003e44:	5c001000 	.word	0x5c001000
 8003e48:	ffff0000 	.word	0xffff0000
 8003e4c:	51008108 	.word	0x51008108
 8003e50:	52004000 	.word	0x52004000

08003e54 <Reset_Handler>:
 8003e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e8c <LoopFillZerobss+0xe>
 8003e58:	f7ff ff74 	bl	8003d44 <SystemInit>
 8003e5c:	480c      	ldr	r0, [pc, #48]	; (8003e90 <LoopFillZerobss+0x12>)
 8003e5e:	490d      	ldr	r1, [pc, #52]	; (8003e94 <LoopFillZerobss+0x16>)
 8003e60:	4a0d      	ldr	r2, [pc, #52]	; (8003e98 <LoopFillZerobss+0x1a>)
 8003e62:	2300      	movs	r3, #0
 8003e64:	e002      	b.n	8003e6c <LoopCopyDataInit>

08003e66 <CopyDataInit>:
 8003e66:	58d4      	ldr	r4, [r2, r3]
 8003e68:	50c4      	str	r4, [r0, r3]
 8003e6a:	3304      	adds	r3, #4

08003e6c <LoopCopyDataInit>:
 8003e6c:	18c4      	adds	r4, r0, r3
 8003e6e:	428c      	cmp	r4, r1
 8003e70:	d3f9      	bcc.n	8003e66 <CopyDataInit>
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <LoopFillZerobss+0x1e>)
 8003e74:	4c0a      	ldr	r4, [pc, #40]	; (8003ea0 <LoopFillZerobss+0x22>)
 8003e76:	2300      	movs	r3, #0
 8003e78:	e001      	b.n	8003e7e <LoopFillZerobss>

08003e7a <FillZerobss>:
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	3204      	adds	r2, #4

08003e7e <LoopFillZerobss>:
 8003e7e:	42a2      	cmp	r2, r4
 8003e80:	d3fb      	bcc.n	8003e7a <FillZerobss>
 8003e82:	f012 fdb1 	bl	80169e8 <__libc_init_array>
 8003e86:	f7fd f887 	bl	8000f98 <main>
 8003e8a:	4770      	bx	lr
 8003e8c:	24080000 	.word	0x24080000
 8003e90:	24000000 	.word	0x24000000
 8003e94:	24000108 	.word	0x24000108
 8003e98:	080178d4 	.word	0x080178d4
 8003e9c:	24000120 	.word	0x24000120
 8003ea0:	24005a90 	.word	0x24005a90

08003ea4 <ADC3_IRQHandler>:
 8003ea4:	e7fe      	b.n	8003ea4 <ADC3_IRQHandler>
	...

08003ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eae:	2003      	movs	r0, #3
 8003eb0:	f001 fd39 	bl	8005926 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003eb4:	f006 fe2c 	bl	800ab10 <HAL_RCC_GetSysClockFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_Init+0x68>)
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	4913      	ldr	r1, [pc, #76]	; (8003f14 <HAL_Init+0x6c>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_Init+0x68>)
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <HAL_Init+0x6c>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_Init+0x70>)
 8003eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eec:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <HAL_Init+0x74>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ef2:	2005      	movs	r0, #5
 8003ef4:	f7ff fd4c 	bl	8003990 <HAL_InitTick>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e002      	b.n	8003f08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f02:	f7ff f895 	bl	8003030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	58024400 	.word	0x58024400
 8003f14:	08017820 	.word	0x08017820
 8003f18:	24000094 	.word	0x24000094
 8003f1c:	24000090 	.word	0x24000090

08003f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_IncTick+0x20>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_IncTick+0x24>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4413      	add	r3, r2
 8003f30:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <HAL_IncTick+0x24>)
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	2400009c 	.word	0x2400009c
 8003f44:	2400112c 	.word	0x2400112c

08003f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_GetTick+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	2400112c 	.word	0x2400112c

08003f60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_GetREVID+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0c1b      	lsrs	r3, r3, #16
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	5c001000 	.word	0x5c001000

08003f78 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	4904      	ldr	r1, [pc, #16]	; (8003fa0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	58000400 	.word	0x58000400

08003fa4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3360      	adds	r3, #96	; 0x60
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	430b      	orrs	r3, r1
 800403a:	431a      	orrs	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	611a      	str	r2, [r3, #16]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800407e:	b480      	push	{r7}
 8004080:	b087      	sub	sp, #28
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3360      	adds	r3, #96	; 0x60
 800408e:	461a      	mov	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	601a      	str	r2, [r3, #0]
  }
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040da:	b480      	push	{r7}
 80040dc:	b087      	sub	sp, #28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3330      	adds	r3, #48	; 0x30
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	4413      	add	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	211f      	movs	r1, #31
 8004106:	fa01 f303 	lsl.w	r3, r1, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	401a      	ands	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	f003 011f 	and.w	r1, r3, #31
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa01 f303 	lsl.w	r3, r1, r3
 8004120:	431a      	orrs	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f023 0203 	bic.w	r2, r3, #3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3314      	adds	r3, #20
 8004168:	461a      	mov	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0e5b      	lsrs	r3, r3, #25
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	0d1b      	lsrs	r3, r3, #20
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2107      	movs	r1, #7
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	401a      	ands	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	0d1b      	lsrs	r3, r3, #20
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	431a      	orrs	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c8:	43db      	mvns	r3, r3
 80041ca:	401a      	ands	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f003 0318 	and.w	r3, r3, #24
 80041d2:	4908      	ldr	r1, [pc, #32]	; (80041f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80041d4:	40d9      	lsrs	r1, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	400b      	ands	r3, r1
 80041da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041de:	431a      	orrs	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	000fffff 	.word	0x000fffff

080041f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 031f 	and.w	r3, r3, #31
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004222:	4013      	ands	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6093      	str	r3, [r2, #8]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	5fffffc0 	.word	0x5fffffc0

08004238 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424c:	d101      	bne.n	8004252 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <LL_ADC_EnableInternalRegulator+0x24>)
 800426e:	4013      	ands	r3, r2
 8004270:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	6fffffc0 	.word	0x6fffffc0

08004288 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800429c:	d101      	bne.n	80042a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <LL_ADC_Enable+0x24>)
 80042be:	4013      	ands	r3, r2
 80042c0:	f043 0201 	orr.w	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	7fffffc0 	.word	0x7fffffc0

080042d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <LL_ADC_Disable+0x24>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	f043 0202 	orr.w	r2, r3, #2
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	7fffffc0 	.word	0x7fffffc0

08004300 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <LL_ADC_IsEnabled+0x18>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <LL_ADC_IsEnabled+0x1a>
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d101      	bne.n	800433e <LL_ADC_IsDisableOngoing+0x18>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_ADC_IsDisableOngoing+0x1a>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <LL_ADC_REG_StartConversion+0x24>)
 800435a:	4013      	ands	r3, r2
 800435c:	f043 0204 	orr.w	r2, r3, #4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	7fffffc0 	.word	0x7fffffc0

08004374 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b04      	cmp	r3, #4
 8004386:	d101      	bne.n	800438c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d101      	bne.n	80043b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e18f      	b.n	80046fa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fe fe3f 	bl	800306c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff19 	bl	8004238 <LL_ADC_IsDeepPowerDownEnabled>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff feff 	bl	8004214 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff34 	bl	8004288 <LL_ADC_IsInternalRegulatorEnabled>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d114      	bne.n	8004450 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff ff18 	bl	8004260 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004430:	4b87      	ldr	r3, [pc, #540]	; (8004650 <HAL_ADC_Init+0x290>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	4a87      	ldr	r2, [pc, #540]	; (8004654 <HAL_ADC_Init+0x294>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	3301      	adds	r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004442:	e002      	b.n	800444a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3b01      	subs	r3, #1
 8004448:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f9      	bne.n	8004444 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff17 	bl	8004288 <LL_ADC_IsInternalRegulatorEnabled>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	f043 0210 	orr.w	r2, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f043 0201 	orr.w	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff77 	bl	8004374 <LL_ADC_REG_IsConversionOngoing>
 8004486:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f040 8129 	bne.w	80046e8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8125 	bne.w	80046e8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044a6:	f043 0202 	orr.w	r2, r3, #2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff ff24 	bl	8004300 <LL_ADC_IsEnabled>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d136      	bne.n	800452c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a65      	ldr	r2, [pc, #404]	; (8004658 <HAL_ADC_Init+0x298>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_ADC_Init+0x112>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a63      	ldr	r2, [pc, #396]	; (800465c <HAL_ADC_Init+0x29c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10e      	bne.n	80044f0 <HAL_ADC_Init+0x130>
 80044d2:	4861      	ldr	r0, [pc, #388]	; (8004658 <HAL_ADC_Init+0x298>)
 80044d4:	f7ff ff14 	bl	8004300 <LL_ADC_IsEnabled>
 80044d8:	4604      	mov	r4, r0
 80044da:	4860      	ldr	r0, [pc, #384]	; (800465c <HAL_ADC_Init+0x29c>)
 80044dc:	f7ff ff10 	bl	8004300 <LL_ADC_IsEnabled>
 80044e0:	4603      	mov	r3, r0
 80044e2:	4323      	orrs	r3, r4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e008      	b.n	8004502 <HAL_ADC_Init+0x142>
 80044f0:	485b      	ldr	r0, [pc, #364]	; (8004660 <HAL_ADC_Init+0x2a0>)
 80044f2:	f7ff ff05 	bl	8004300 <LL_ADC_IsEnabled>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d012      	beq.n	800452c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a53      	ldr	r2, [pc, #332]	; (8004658 <HAL_ADC_Init+0x298>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_ADC_Init+0x15a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a51      	ldr	r2, [pc, #324]	; (800465c <HAL_ADC_Init+0x29c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d101      	bne.n	800451e <HAL_ADC_Init+0x15e>
 800451a:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_ADC_Init+0x2a4>)
 800451c:	e000      	b.n	8004520 <HAL_ADC_Init+0x160>
 800451e:	4a52      	ldr	r2, [pc, #328]	; (8004668 <HAL_ADC_Init+0x2a8>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7ff fd3c 	bl	8003fa4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800452c:	f7ff fd18 	bl	8003f60 <HAL_GetREVID>
 8004530:	4603      	mov	r3, r0
 8004532:	f241 0203 	movw	r2, #4099	; 0x1003
 8004536:	4293      	cmp	r3, r2
 8004538:	d914      	bls.n	8004564 <HAL_ADC_Init+0x1a4>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b10      	cmp	r3, #16
 8004540:	d110      	bne.n	8004564 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	7d5b      	ldrb	r3, [r3, #21]
 8004546:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800454c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004552:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7f1b      	ldrb	r3, [r3, #28]
 8004558:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800455a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800455c:	f043 030c 	orr.w	r3, r3, #12
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e00d      	b.n	8004580 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7d5b      	ldrb	r3, [r3, #21]
 8004568:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800456e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004574:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7f1b      	ldrb	r3, [r3, #28]
 800457a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7f1b      	ldrb	r3, [r3, #28]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d106      	bne.n	8004596 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	3b01      	subs	r3, #1
 800458e:	045b      	lsls	r3, r3, #17
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	4b2c      	ldr	r3, [pc, #176]	; (800466c <HAL_ADC_Init+0x2ac>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	430b      	orrs	r3, r1
 80045c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fed2 	bl	8004374 <LL_ADC_REG_IsConversionOngoing>
 80045d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fedf 	bl	800439a <LL_ADC_INJ_IsConversionOngoing>
 80045dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d15f      	bne.n	80046a4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d15c      	bne.n	80046a4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7d1b      	ldrb	r3, [r3, #20]
 80045ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <HAL_ADC_Init+0x2b0>)
 8004600:	4013      	ands	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	430b      	orrs	r3, r1
 800460a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004612:	2b01      	cmp	r3, #1
 8004614:	d130      	bne.n	8004678 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_ADC_Init+0x2b4>)
 8004624:	4013      	ands	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800462a:	3a01      	subs	r2, #1
 800462c:	0411      	lsls	r1, r2, #16
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004632:	4311      	orrs	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004638:	4311      	orrs	r1, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800463e:	430a      	orrs	r2, r1
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	611a      	str	r2, [r3, #16]
 800464c:	e01c      	b.n	8004688 <HAL_ADC_Init+0x2c8>
 800464e:	bf00      	nop
 8004650:	24000090 	.word	0x24000090
 8004654:	053e2d63 	.word	0x053e2d63
 8004658:	40022000 	.word	0x40022000
 800465c:	40022100 	.word	0x40022100
 8004660:	58026000 	.word	0x58026000
 8004664:	40022300 	.word	0x40022300
 8004668:	58026300 	.word	0x58026300
 800466c:	fff0c003 	.word	0xfff0c003
 8004670:	ffffbffc 	.word	0xffffbffc
 8004674:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fdec 	bl	800527c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d10c      	bne.n	80046c6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f023 010f 	bic.w	r1, r3, #15
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
 80046c4:	e007      	b.n	80046d6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 020f 	bic.w	r2, r2, #15
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
 80046e6:	e007      	b.n	80046f8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f043 0210 	orr.w	r2, r3, #16
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3724      	adds	r7, #36	; 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd90      	pop	{r4, r7, pc}
 8004702:	bf00      	nop

08004704 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a55      	ldr	r2, [pc, #340]	; (800486c <HAL_ADC_Start_DMA+0x168>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_ADC_Start_DMA+0x20>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a54      	ldr	r2, [pc, #336]	; (8004870 <HAL_ADC_Start_DMA+0x16c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_ADC_Start_DMA+0x24>
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_ADC_Start_DMA+0x170>)
 8004726:	e000      	b.n	800472a <HAL_ADC_Start_DMA+0x26>
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_ADC_Start_DMA+0x174>)
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fd64 	bl	80041f8 <LL_ADC_GetMultimode>
 8004730:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fe1c 	bl	8004374 <LL_ADC_REG_IsConversionOngoing>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 808c 	bne.w	800485c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_ADC_Start_DMA+0x4e>
 800474e:	2302      	movs	r3, #2
 8004750:	e087      	b.n	8004862 <HAL_ADC_Start_DMA+0x15e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d002      	beq.n	800476c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b09      	cmp	r3, #9
 800476a:	d170      	bne.n	800484e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fc07 	bl	8004f80 <ADC_Enable>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d163      	bne.n	8004844 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004780:	4b3e      	ldr	r3, [pc, #248]	; (800487c <HAL_ADC_Start_DMA+0x178>)
 8004782:	4013      	ands	r3, r2
 8004784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a37      	ldr	r2, [pc, #220]	; (8004870 <HAL_ADC_Start_DMA+0x16c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d002      	beq.n	800479c <HAL_ADC_Start_DMA+0x98>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	e000      	b.n	800479e <HAL_ADC_Start_DMA+0x9a>
 800479c:	4b33      	ldr	r3, [pc, #204]	; (800486c <HAL_ADC_Start_DMA+0x168>)
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d002      	beq.n	80047ac <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	f023 0206 	bic.w	r2, r3, #6
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	659a      	str	r2, [r3, #88]	; 0x58
 80047d0:	e002      	b.n	80047d8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047dc:	4a28      	ldr	r2, [pc, #160]	; (8004880 <HAL_ADC_Start_DMA+0x17c>)
 80047de:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e4:	4a27      	ldr	r2, [pc, #156]	; (8004884 <HAL_ADC_Start_DMA+0x180>)
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	4a26      	ldr	r2, [pc, #152]	; (8004888 <HAL_ADC_Start_DMA+0x184>)
 80047ee:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	221c      	movs	r2, #28
 80047f6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0210 	orr.w	r2, r2, #16
 800480e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7ff fc89 	bl	8004132 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3340      	adds	r3, #64	; 0x40
 800482a:	4619      	mov	r1, r3
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f002 f80e 	bl	8006850 <HAL_DMA_Start_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fd85 	bl	800434c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004842:	e00d      	b.n	8004860 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800484c:	e008      	b.n	8004860 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800485a:	e001      	b.n	8004860 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40022000 	.word	0x40022000
 8004870:	40022100 	.word	0x40022100
 8004874:	40022300 	.word	0x40022300
 8004878:	58026300 	.word	0x58026300
 800487c:	fffff0fe 	.word	0xfffff0fe
 8004880:	08005153 	.word	0x08005153
 8004884:	0800522b 	.word	0x0800522b
 8004888:	08005247 	.word	0x08005247

0800488c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b0a1      	sub	sp, #132	; 0x84
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a65      	ldr	r2, [pc, #404]	; (8004a78 <HAL_ADC_ConfigChannel+0x1b0>)
 80048e2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x2a>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e32e      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x688>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fd38 	bl	8004374 <LL_ADC_REG_IsConversionOngoing>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 8313 	bne.w	8004f32 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	db2c      	blt.n	800496e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800491c:	2b00      	cmp	r3, #0
 800491e:	d108      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x6a>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0e9b      	lsrs	r3, r3, #26
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2201      	movs	r2, #1
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	e016      	b.n	8004960 <HAL_ADC_ConfigChannel+0x98>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800493a:	fa93 f3a3 	rbit	r3, r3
 800493e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004942:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800494a:	2320      	movs	r3, #32
 800494c:	e003      	b.n	8004956 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800494e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2201      	movs	r2, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	69d1      	ldr	r1, [r2, #28]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	430b      	orrs	r3, r1
 800496c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f7ff fbad 	bl	80040da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fcf5 	bl	8004374 <LL_ADC_REG_IsConversionOngoing>
 800498a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fd02 	bl	800439a <LL_ADC_INJ_IsConversionOngoing>
 8004996:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 80b8 	bne.w	8004b10 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 80b4 	bne.w	8004b10 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f7ff fbcf 	bl	8004158 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049ba:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <HAL_ADC_ConfigChannel+0x1b4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c6:	d10b      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x118>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	e01d      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x154>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x13e>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	e00a      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x154>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d02c      	beq.n	8004a80 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6919      	ldr	r1, [r3, #16]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a34:	f7ff faea 	bl	800400c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6919      	ldr	r1, [r3, #16]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	7e5b      	ldrb	r3, [r3, #25]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d102      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x186>
 8004a48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a4c:	e000      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x188>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	461a      	mov	r2, r3
 8004a52:	f7ff fb14 	bl	800407e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6919      	ldr	r1, [r3, #16]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	7e1b      	ldrb	r3, [r3, #24]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d102      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x1a4>
 8004a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a6a:	e000      	b.n	8004a6e <HAL_ADC_ConfigChannel+0x1a6>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f7ff faec 	bl	800404c <LL_ADC_SetDataRightShift>
 8004a74:	e04c      	b.n	8004b10 <HAL_ADC_ConfigChannel+0x248>
 8004a76:	bf00      	nop
 8004a78:	47ff0000 	.word	0x47ff0000
 8004a7c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	069b      	lsls	r3, r3, #26
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d107      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	069b      	lsls	r3, r3, #26
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d107      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ac6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	069b      	lsls	r3, r3, #26
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d107      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004aea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	069b      	lsls	r3, r3, #26
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d107      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff fbf3 	bl	8004300 <LL_ADC_IsEnabled>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 8211 	bne.w	8004f44 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f7ff fb3e 	bl	80041b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4aa1      	ldr	r2, [pc, #644]	; (8004dc0 <HAL_ADC_ConfigChannel+0x4f8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	f040 812e 	bne.w	8004d9c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x2a0>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	0e9b      	lsrs	r3, r3, #26
 8004b56:	3301      	adds	r3, #1
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2b09      	cmp	r3, #9
 8004b5e:	bf94      	ite	ls
 8004b60:	2301      	movls	r3, #1
 8004b62:	2300      	movhi	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e019      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x2d4>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004b80:	2320      	movs	r3, #32
 8004b82:	e003      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	2b09      	cmp	r3, #9
 8004b94:	bf94      	ite	ls
 8004b96:	2301      	movls	r3, #1
 8004b98:	2300      	movhi	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d079      	beq.n	8004c94 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d107      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x2f4>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0e9b      	lsrs	r3, r3, #26
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	069b      	lsls	r3, r3, #26
 8004bb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bba:	e015      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x320>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bcc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004bd4:	2320      	movs	r3, #32
 8004bd6:	e003      	b.n	8004be0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bda:	fab3 f383 	clz	r3, r3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	3301      	adds	r3, #1
 8004be2:	069b      	lsls	r3, r3, #26
 8004be4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x340>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	0e9b      	lsrs	r3, r3, #26
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	e017      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x370>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c10:	fa93 f3a3 	rbit	r3, r3
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004c20:	2320      	movs	r3, #32
 8004c22:	e003      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c26:	fab3 f383 	clz	r3, r3
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2101      	movs	r1, #1
 8004c34:	fa01 f303 	lsl.w	r3, r1, r3
 8004c38:	ea42 0103 	orr.w	r1, r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x396>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	0e9b      	lsrs	r3, r3, #26
 8004c4e:	3301      	adds	r3, #1
 8004c50:	f003 021f 	and.w	r2, r3, #31
 8004c54:	4613      	mov	r3, r2
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	4413      	add	r3, r2
 8004c5a:	051b      	lsls	r3, r3, #20
 8004c5c:	e018      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x3c8>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c66:	fa93 f3a3 	rbit	r3, r3
 8004c6a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004c76:	2320      	movs	r3, #32
 8004c78:	e003      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	fab3 f383 	clz	r3, r3
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	3301      	adds	r3, #1
 8004c84:	f003 021f 	and.w	r2, r3, #31
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c90:	430b      	orrs	r3, r1
 8004c92:	e07e      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d107      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x3e8>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	0e9b      	lsrs	r3, r3, #26
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	069b      	lsls	r3, r3, #26
 8004caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cae:	e015      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x414>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004cc8:	2320      	movs	r3, #32
 8004cca:	e003      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	069b      	lsls	r3, r3, #26
 8004cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x434>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	0e9b      	lsrs	r3, r3, #26
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	e017      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x464>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	61bb      	str	r3, [r7, #24]
  return result;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004d14:	2320      	movs	r3, #32
 8004d16:	e003      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2101      	movs	r1, #1
 8004d28:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2c:	ea42 0103 	orr.w	r1, r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10d      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x490>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	0e9b      	lsrs	r3, r3, #26
 8004d42:	3301      	adds	r3, #1
 8004d44:	f003 021f 	and.w	r2, r3, #31
 8004d48:	4613      	mov	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3b1e      	subs	r3, #30
 8004d50:	051b      	lsls	r3, r3, #20
 8004d52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d56:	e01b      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x4c8>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	fa93 f3a3 	rbit	r3, r3
 8004d64:	60fb      	str	r3, [r7, #12]
  return result;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004d70:	2320      	movs	r3, #32
 8004d72:	e003      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f003 021f 	and.w	r2, r3, #31
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	3b1e      	subs	r3, #30
 8004d8a:	051b      	lsls	r3, r3, #20
 8004d8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d90:	430b      	orrs	r3, r1
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	6892      	ldr	r2, [r2, #8]
 8004d96:	4619      	mov	r1, r3
 8004d98:	f7ff f9de 	bl	8004158 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f280 80cf 	bge.w	8004f44 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <HAL_ADC_ConfigChannel+0x4fc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_ADC_ConfigChannel+0x4f2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <HAL_ADC_ConfigChannel+0x500>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d10a      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x508>
 8004dba:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <HAL_ADC_ConfigChannel+0x504>)
 8004dbc:	e009      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x50a>
 8004dbe:	bf00      	nop
 8004dc0:	47ff0000 	.word	0x47ff0000
 8004dc4:	40022000 	.word	0x40022000
 8004dc8:	40022100 	.word	0x40022100
 8004dcc:	40022300 	.word	0x40022300
 8004dd0:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <HAL_ADC_ConfigChannel+0x690>)
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff f90c 	bl	8003ff0 <LL_ADC_GetCommonPathInternalCh>
 8004dd8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5f      	ldr	r2, [pc, #380]	; (8004f5c <HAL_ADC_ConfigChannel+0x694>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_ADC_ConfigChannel+0x526>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a5d      	ldr	r2, [pc, #372]	; (8004f60 <HAL_ADC_ConfigChannel+0x698>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d10e      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x544>
 8004dee:	485b      	ldr	r0, [pc, #364]	; (8004f5c <HAL_ADC_ConfigChannel+0x694>)
 8004df0:	f7ff fa86 	bl	8004300 <LL_ADC_IsEnabled>
 8004df4:	4604      	mov	r4, r0
 8004df6:	485a      	ldr	r0, [pc, #360]	; (8004f60 <HAL_ADC_ConfigChannel+0x698>)
 8004df8:	f7ff fa82 	bl	8004300 <LL_ADC_IsEnabled>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4323      	orrs	r3, r4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e008      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x556>
 8004e0c:	4855      	ldr	r0, [pc, #340]	; (8004f64 <HAL_ADC_ConfigChannel+0x69c>)
 8004e0e:	f7ff fa77 	bl	8004300 <LL_ADC_IsEnabled>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf0c      	ite	eq
 8004e18:	2301      	moveq	r3, #1
 8004e1a:	2300      	movne	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d07d      	beq.n	8004f1e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a50      	ldr	r2, [pc, #320]	; (8004f68 <HAL_ADC_ConfigChannel+0x6a0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d130      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x5c6>
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d12b      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a4a      	ldr	r2, [pc, #296]	; (8004f64 <HAL_ADC_ConfigChannel+0x69c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	f040 8081 	bne.w	8004f44 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a45      	ldr	r2, [pc, #276]	; (8004f5c <HAL_ADC_ConfigChannel+0x694>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_ADC_ConfigChannel+0x58e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a43      	ldr	r2, [pc, #268]	; (8004f60 <HAL_ADC_ConfigChannel+0x698>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x592>
 8004e56:	4a45      	ldr	r2, [pc, #276]	; (8004f6c <HAL_ADC_ConfigChannel+0x6a4>)
 8004e58:	e000      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x594>
 8004e5a:	4a3f      	ldr	r2, [pc, #252]	; (8004f58 <HAL_ADC_ConfigChannel+0x690>)
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f7ff f8b0 	bl	8003fca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e6a:	4b41      	ldr	r3, [pc, #260]	; (8004f70 <HAL_ADC_ConfigChannel+0x6a8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	4a40      	ldr	r2, [pc, #256]	; (8004f74 <HAL_ADC_ConfigChannel+0x6ac>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	3301      	adds	r3, #1
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e7e:	e002      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f9      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e8c:	e05a      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a39      	ldr	r2, [pc, #228]	; (8004f78 <HAL_ADC_ConfigChannel+0x6b0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d11e      	bne.n	8004ed6 <HAL_ADC_ConfigChannel+0x60e>
 8004e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d119      	bne.n	8004ed6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_ADC_ConfigChannel+0x69c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d14b      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <HAL_ADC_ConfigChannel+0x694>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_ADC_ConfigChannel+0x5f8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <HAL_ADC_ConfigChannel+0x698>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x5fc>
 8004ec0:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <HAL_ADC_ConfigChannel+0x6a4>)
 8004ec2:	e000      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x5fe>
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <HAL_ADC_ConfigChannel+0x690>)
 8004ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7ff f87b 	bl	8003fca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ed4:	e036      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a28      	ldr	r2, [pc, #160]	; (8004f7c <HAL_ADC_ConfigChannel+0x6b4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d131      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x67c>
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d12c      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <HAL_ADC_ConfigChannel+0x69c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d127      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <HAL_ADC_ConfigChannel+0x694>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_ADC_ConfigChannel+0x640>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <HAL_ADC_ConfigChannel+0x698>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d101      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x644>
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_ADC_ConfigChannel+0x6a4>)
 8004f0a:	e000      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x646>
 8004f0c:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <HAL_ADC_ConfigChannel+0x690>)
 8004f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7ff f857 	bl	8003fca <LL_ADC_SetCommonPathInternalCh>
 8004f1c:	e012      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f30:	e008      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3784      	adds	r7, #132	; 0x84
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd90      	pop	{r4, r7, pc}
 8004f58:	58026300 	.word	0x58026300
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40022100 	.word	0x40022100
 8004f64:	58026000 	.word	0x58026000
 8004f68:	cb840000 	.word	0xcb840000
 8004f6c:	40022300 	.word	0x40022300
 8004f70:	24000090 	.word	0x24000090
 8004f74:	053e2d63 	.word	0x053e2d63
 8004f78:	c7520000 	.word	0xc7520000
 8004f7c:	cfb80000 	.word	0xcfb80000

08004f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff f9b7 	bl	8004300 <LL_ADC_IsEnabled>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d16e      	bne.n	8005076 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	4b38      	ldr	r3, [pc, #224]	; (8005080 <ADC_Enable+0x100>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f043 0210 	orr.w	r2, r3, #16
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e05a      	b.n	8005078 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff f972 	bl	80042b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fcc:	f7fe ffbc 	bl	8003f48 <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2b      	ldr	r2, [pc, #172]	; (8005084 <ADC_Enable+0x104>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <ADC_Enable+0x66>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a29      	ldr	r2, [pc, #164]	; (8005088 <ADC_Enable+0x108>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d101      	bne.n	8004fea <ADC_Enable+0x6a>
 8004fe6:	4b29      	ldr	r3, [pc, #164]	; (800508c <ADC_Enable+0x10c>)
 8004fe8:	e000      	b.n	8004fec <ADC_Enable+0x6c>
 8004fea:	4b29      	ldr	r3, [pc, #164]	; (8005090 <ADC_Enable+0x110>)
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff f903 	bl	80041f8 <LL_ADC_GetMultimode>
 8004ff2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a23      	ldr	r2, [pc, #140]	; (8005088 <ADC_Enable+0x108>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d002      	beq.n	8005004 <ADC_Enable+0x84>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	e000      	b.n	8005006 <ADC_Enable+0x86>
 8005004:	4b1f      	ldr	r3, [pc, #124]	; (8005084 <ADC_Enable+0x104>)
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	4293      	cmp	r3, r2
 800500c:	d02c      	beq.n	8005068 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d130      	bne.n	8005076 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005014:	e028      	b.n	8005068 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff f970 	bl	8004300 <LL_ADC_IsEnabled>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff f940 	bl	80042b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005030:	f7fe ff8a 	bl	8003f48 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d914      	bls.n	8005068 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	d00d      	beq.n	8005068 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	f043 0210 	orr.w	r2, r3, #16
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	f043 0201 	orr.w	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e007      	b.n	8005078 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d1cf      	bne.n	8005016 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	8000003f 	.word	0x8000003f
 8005084:	40022000 	.word	0x40022000
 8005088:	40022100 	.word	0x40022100
 800508c:	40022300 	.word	0x40022300
 8005090:	58026300 	.word	0x58026300

08005094 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff f940 	bl	8004326 <LL_ADC_IsDisableOngoing>
 80050a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff f927 	bl	8004300 <LL_ADC_IsEnabled>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d047      	beq.n	8005148 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d144      	bne.n	8005148 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030d 	and.w	r3, r3, #13
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d10c      	bne.n	80050e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff f901 	bl	80042d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2203      	movs	r2, #3
 80050dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050de:	f7fe ff33 	bl	8003f48 <HAL_GetTick>
 80050e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050e4:	e029      	b.n	800513a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f043 0210 	orr.w	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e023      	b.n	800514a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005102:	f7fe ff21 	bl	8003f48 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d914      	bls.n	800513a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	f043 0210 	orr.w	r2, r3, #16
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	f043 0201 	orr.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e007      	b.n	800514a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1dc      	bne.n	8005102 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005168:	2b00      	cmp	r3, #0
 800516a:	d14b      	bne.n	8005204 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d021      	beq.n	80051ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe ff92 	bl	80040b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d032      	beq.n	80051fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d12b      	bne.n	80051fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11f      	bne.n	80051fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	f043 0201 	orr.w	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
 80051c8:	e018      	b.n	80051fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d111      	bne.n	80051fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f4:	f043 0201 	orr.w	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff fb45 	bl	800488c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005202:	e00e      	b.n	8005222 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff fb4f 	bl	80048b4 <HAL_ADC_ErrorCallback>
}
 8005216:	e004      	b.n	8005222 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	4798      	blx	r3
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f7ff fb31 	bl	80048a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800523e:	bf00      	nop
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	f043 0204 	orr.w	r2, r3, #4
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff fb21 	bl	80048b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a7a      	ldr	r2, [pc, #488]	; (8005474 <ADC_ConfigureBoostMode+0x1f8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <ADC_ConfigureBoostMode+0x1c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a79      	ldr	r2, [pc, #484]	; (8005478 <ADC_ConfigureBoostMode+0x1fc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d109      	bne.n	80052ac <ADC_ConfigureBoostMode+0x30>
 8005298:	4b78      	ldr	r3, [pc, #480]	; (800547c <ADC_ConfigureBoostMode+0x200>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bf14      	ite	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	2300      	moveq	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e008      	b.n	80052be <ADC_ConfigureBoostMode+0x42>
 80052ac:	4b74      	ldr	r3, [pc, #464]	; (8005480 <ADC_ConfigureBoostMode+0x204>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01c      	beq.n	80052fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80052c2:	f005 fd9f 	bl	800ae04 <HAL_RCC_GetHCLKFreq>
 80052c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052d0:	d010      	beq.n	80052f4 <ADC_ConfigureBoostMode+0x78>
 80052d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052d6:	d873      	bhi.n	80053c0 <ADC_ConfigureBoostMode+0x144>
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052dc:	d002      	beq.n	80052e4 <ADC_ConfigureBoostMode+0x68>
 80052de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e2:	d16d      	bne.n	80053c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	60fb      	str	r3, [r7, #12]
        break;
 80052f2:	e068      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	60fb      	str	r3, [r7, #12]
        break;
 80052fa:	e064      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80052fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	f007 f826 	bl	800c354 <HAL_RCCEx_GetPeriphCLKFreq>
 8005308:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005312:	d051      	beq.n	80053b8 <ADC_ConfigureBoostMode+0x13c>
 8005314:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005318:	d854      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 800531a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800531e:	d047      	beq.n	80053b0 <ADC_ConfigureBoostMode+0x134>
 8005320:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005324:	d84e      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 8005326:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800532a:	d03d      	beq.n	80053a8 <ADC_ConfigureBoostMode+0x12c>
 800532c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005330:	d848      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 8005332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005336:	d033      	beq.n	80053a0 <ADC_ConfigureBoostMode+0x124>
 8005338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800533c:	d842      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 800533e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005342:	d029      	beq.n	8005398 <ADC_ConfigureBoostMode+0x11c>
 8005344:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005348:	d83c      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 800534a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800534e:	d01a      	beq.n	8005386 <ADC_ConfigureBoostMode+0x10a>
 8005350:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005354:	d836      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 8005356:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800535a:	d014      	beq.n	8005386 <ADC_ConfigureBoostMode+0x10a>
 800535c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005360:	d830      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 8005362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005366:	d00e      	beq.n	8005386 <ADC_ConfigureBoostMode+0x10a>
 8005368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536c:	d82a      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 800536e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005372:	d008      	beq.n	8005386 <ADC_ConfigureBoostMode+0x10a>
 8005374:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005378:	d824      	bhi.n	80053c4 <ADC_ConfigureBoostMode+0x148>
 800537a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800537e:	d002      	beq.n	8005386 <ADC_ConfigureBoostMode+0x10a>
 8005380:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005384:	d11e      	bne.n	80053c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	0c9b      	lsrs	r3, r3, #18
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	60fb      	str	r3, [r7, #12]
        break;
 8005396:	e016      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	091b      	lsrs	r3, r3, #4
 800539c:	60fb      	str	r3, [r7, #12]
        break;
 800539e:	e012      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	60fb      	str	r3, [r7, #12]
        break;
 80053a6:	e00e      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	099b      	lsrs	r3, r3, #6
 80053ac:	60fb      	str	r3, [r7, #12]
        break;
 80053ae:	e00a      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	09db      	lsrs	r3, r3, #7
 80053b4:	60fb      	str	r3, [r7, #12]
        break;
 80053b6:	e006      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	60fb      	str	r3, [r7, #12]
        break;
 80053be:	e002      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80053c4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80053c6:	f7fe fdcb 	bl	8003f60 <HAL_GetREVID>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d815      	bhi.n	8005400 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a2b      	ldr	r2, [pc, #172]	; (8005484 <ADC_ConfigureBoostMode+0x208>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d908      	bls.n	80053ee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80053ec:	e03e      	b.n	800546c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053fc:	609a      	str	r2, [r3, #8]
}
 80053fe:	e035      	b.n	800546c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <ADC_ConfigureBoostMode+0x20c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d808      	bhi.n	8005420 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800541c:	609a      	str	r2, [r3, #8]
}
 800541e:	e025      	b.n	800546c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a1a      	ldr	r2, [pc, #104]	; (800548c <ADC_ConfigureBoostMode+0x210>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d80a      	bhi.n	800543e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543a:	609a      	str	r2, [r3, #8]
}
 800543c:	e016      	b.n	800546c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a13      	ldr	r2, [pc, #76]	; (8005490 <ADC_ConfigureBoostMode+0x214>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d80a      	bhi.n	800545c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005458:	609a      	str	r2, [r3, #8]
}
 800545a:	e007      	b.n	800546c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800546a:	609a      	str	r2, [r3, #8]
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40022000 	.word	0x40022000
 8005478:	40022100 	.word	0x40022100
 800547c:	40022300 	.word	0x40022300
 8005480:	58026300 	.word	0x58026300
 8005484:	01312d00 	.word	0x01312d00
 8005488:	005f5e10 	.word	0x005f5e10
 800548c:	00bebc20 	.word	0x00bebc20
 8005490:	017d7840 	.word	0x017d7840

08005494 <LL_ADC_IsEnabled>:
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <LL_ADC_IsEnabled+0x18>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <LL_ADC_IsEnabled+0x1a>
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <LL_ADC_StartCalibration>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <LL_ADC_StartCalibration+0x38>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054dc:	430a      	orrs	r2, r1
 80054de:	4313      	orrs	r3, r2
 80054e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	3ffeffc0 	.word	0x3ffeffc0

080054f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800550c:	d101      	bne.n	8005512 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LL_ADC_REG_IsConversionOngoing>:
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d101      	bne.n	8005538 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_ADCEx_Calibration_Start+0x1e>
 8005562:	2302      	movs	r3, #2
 8005564:	e04c      	b.n	8005600 <HAL_ADCEx_Calibration_Start+0xb8>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff fd90 	bl	8005094 <ADC_Disable>
 8005574:	4603      	mov	r3, r0
 8005576:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d135      	bne.n	80055ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005582:	4b21      	ldr	r3, [pc, #132]	; (8005608 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005584:	4013      	ands	r3, r2
 8005586:	f043 0202 	orr.w	r2, r3, #2
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff ff90 	bl	80054bc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800559c:	e014      	b.n	80055c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3301      	adds	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4a19      	ldr	r2, [pc, #100]	; (800560c <HAL_ADCEx_Calibration_Start+0xc4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d30d      	bcc.n	80055c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f023 0312 	bic.w	r3, r3, #18
 80055b4:	f043 0210 	orr.w	r2, r3, #16
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e01b      	b.n	8005600 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff ff93 	bl	80054f8 <LL_ADC_IsCalibrationOnGoing>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e2      	bne.n	800559e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	f023 0303 	bic.w	r3, r3, #3
 80055e0:	f043 0201 	orr.w	r2, r3, #1
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
 80055e8:	e005      	b.n	80055f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	f043 0210 	orr.w	r2, r3, #16
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	ffffeefd 	.word	0xffffeefd
 800560c:	25c3f800 	.word	0x25c3f800

08005610 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b09f      	sub	sp, #124	; 0x7c
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800562a:	2302      	movs	r3, #2
 800562c:	e0be      	b.n	80057ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005636:	2300      	movs	r3, #0
 8005638:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800563a:	2300      	movs	r3, #0
 800563c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a5c      	ldr	r2, [pc, #368]	; (80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d102      	bne.n	800564e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005648:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	e001      	b.n	8005652 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	f043 0220 	orr.w	r2, r3, #32
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e09d      	b.n	80057ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff54 	bl	8005520 <LL_ADC_REG_IsConversionOngoing>
 8005678:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff ff4e 	bl	8005520 <LL_ADC_REG_IsConversionOngoing>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d17f      	bne.n	800578a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800568a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800568c:	2b00      	cmp	r3, #0
 800568e:	d17c      	bne.n	800578a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a47      	ldr	r2, [pc, #284]	; (80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a46      	ldr	r2, [pc, #280]	; (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80056a4:	4b45      	ldr	r3, [pc, #276]	; (80057bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80056a6:	e000      	b.n	80056aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80056a8:	4b45      	ldr	r3, [pc, #276]	; (80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80056aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d039      	beq.n	8005728 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80056b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	431a      	orrs	r2, r3
 80056c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a3a      	ldr	r2, [pc, #232]	; (80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a38      	ldr	r2, [pc, #224]	; (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10e      	bne.n	80056f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80056da:	4836      	ldr	r0, [pc, #216]	; (80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056dc:	f7ff feda 	bl	8005494 <LL_ADC_IsEnabled>
 80056e0:	4604      	mov	r4, r0
 80056e2:	4835      	ldr	r0, [pc, #212]	; (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056e4:	f7ff fed6 	bl	8005494 <LL_ADC_IsEnabled>
 80056e8:	4603      	mov	r3, r0
 80056ea:	4323      	orrs	r3, r4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e008      	b.n	800570a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80056f8:	4832      	ldr	r0, [pc, #200]	; (80057c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80056fa:	f7ff fecb 	bl	8005494 <LL_ADC_IsEnabled>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d047      	beq.n	800579e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005714:	4013      	ands	r3, r2
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	6811      	ldr	r1, [r2, #0]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	430a      	orrs	r2, r1
 8005720:	431a      	orrs	r2, r3
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005726:	e03a      	b.n	800579e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d10e      	bne.n	8005766 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005748:	481a      	ldr	r0, [pc, #104]	; (80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800574a:	f7ff fea3 	bl	8005494 <LL_ADC_IsEnabled>
 800574e:	4604      	mov	r4, r0
 8005750:	4819      	ldr	r0, [pc, #100]	; (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005752:	f7ff fe9f 	bl	8005494 <LL_ADC_IsEnabled>
 8005756:	4603      	mov	r3, r0
 8005758:	4323      	orrs	r3, r4
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	e008      	b.n	8005778 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005766:	4817      	ldr	r0, [pc, #92]	; (80057c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005768:	f7ff fe94 	bl	8005494 <LL_ADC_IsEnabled>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf0c      	ite	eq
 8005772:	2301      	moveq	r3, #1
 8005774:	2300      	movne	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800577c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005782:	4013      	ands	r3, r2
 8005784:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005786:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005788:	e009      	b.n	800579e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800579c:	e000      	b.n	80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800579e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80057a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	377c      	adds	r7, #124	; 0x7c
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd90      	pop	{r4, r7, pc}
 80057b4:	40022000 	.word	0x40022000
 80057b8:	40022100 	.word	0x40022100
 80057bc:	40022300 	.word	0x40022300
 80057c0:	58026300 	.word	0x58026300
 80057c4:	58026000 	.word	0x58026000
 80057c8:	fffff0e0 	.word	0xfffff0e0

080057cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <__NVIC_SetPriorityGrouping+0x40>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057e8:	4013      	ands	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <__NVIC_SetPriorityGrouping+0x44>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057fa:	4a04      	ldr	r2, [pc, #16]	; (800580c <__NVIC_SetPriorityGrouping+0x40>)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	60d3      	str	r3, [r2, #12]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	e000ed00 	.word	0xe000ed00
 8005810:	05fa0000 	.word	0x05fa0000

08005814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <__NVIC_GetPriorityGrouping+0x18>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	f003 0307 	and.w	r3, r3, #7
}
 8005822:	4618      	mov	r0, r3
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	e000ed00 	.word	0xe000ed00

08005830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	4603      	mov	r3, r0
 8005838:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800583a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800583e:	2b00      	cmp	r3, #0
 8005840:	db0b      	blt.n	800585a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	f003 021f 	and.w	r2, r3, #31
 8005848:	4907      	ldr	r1, [pc, #28]	; (8005868 <__NVIC_EnableIRQ+0x38>)
 800584a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	2001      	movs	r0, #1
 8005852:	fa00 f202 	lsl.w	r2, r0, r2
 8005856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	e000e100 	.word	0xe000e100

0800586c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	6039      	str	r1, [r7, #0]
 8005876:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800587c:	2b00      	cmp	r3, #0
 800587e:	db0a      	blt.n	8005896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	490c      	ldr	r1, [pc, #48]	; (80058b8 <__NVIC_SetPriority+0x4c>)
 8005886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800588a:	0112      	lsls	r2, r2, #4
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	440b      	add	r3, r1
 8005890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005894:	e00a      	b.n	80058ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	4908      	ldr	r1, [pc, #32]	; (80058bc <__NVIC_SetPriority+0x50>)
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	3b04      	subs	r3, #4
 80058a4:	0112      	lsls	r2, r2, #4
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	440b      	add	r3, r1
 80058aa:	761a      	strb	r2, [r3, #24]
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	e000e100 	.word	0xe000e100
 80058bc:	e000ed00 	.word	0xe000ed00

080058c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b089      	sub	sp, #36	; 0x24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f1c3 0307 	rsb	r3, r3, #7
 80058da:	2b04      	cmp	r3, #4
 80058dc:	bf28      	it	cs
 80058de:	2304      	movcs	r3, #4
 80058e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	3304      	adds	r3, #4
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d902      	bls.n	80058f0 <NVIC_EncodePriority+0x30>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3b03      	subs	r3, #3
 80058ee:	e000      	b.n	80058f2 <NVIC_EncodePriority+0x32>
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	43da      	mvns	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	401a      	ands	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	fa01 f303 	lsl.w	r3, r1, r3
 8005912:	43d9      	mvns	r1, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005918:	4313      	orrs	r3, r2
         );
}
 800591a:	4618      	mov	r0, r3
 800591c:	3724      	adds	r7, #36	; 0x24
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff ff4c 	bl	80057cc <__NVIC_SetPriorityGrouping>
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800594a:	f7ff ff63 	bl	8005814 <__NVIC_GetPriorityGrouping>
 800594e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	6978      	ldr	r0, [r7, #20]
 8005956:	f7ff ffb3 	bl	80058c0 <NVIC_EncodePriority>
 800595a:	4602      	mov	r2, r0
 800595c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ff82 	bl	800586c <__NVIC_SetPriority>
}
 8005968:	bf00      	nop
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	4603      	mov	r3, r0
 8005978:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800597a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff ff56 	bl	8005830 <__NVIC_EnableIRQ>
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e014      	b.n	80059c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	791b      	ldrb	r3, [r3, #4]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d105      	bne.n	80059b4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fd fc76 	bl	80032a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e046      	b.n	8005a72 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	795b      	ldrb	r3, [r3, #5]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_DAC_Start+0x20>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e040      	b.n	8005a72 <HAL_DAC_Start+0xa2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6819      	ldr	r1, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2201      	movs	r2, #1
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d11d      	bne.n	8005a64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	e014      	b.n	8005a64 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d107      	bne.n	8005a64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0202 	orr.w	r2, r2, #2
 8005a62:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0a2      	b.n	8005bde <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	795b      	ldrb	r3, [r3, #5]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_DAC_Start_DMA+0x24>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e09c      	b.n	8005bde <HAL_DAC_Start_DMA+0x15e>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2202      	movs	r2, #2
 8005aae:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d129      	bne.n	8005b0a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	4a4b      	ldr	r2, [pc, #300]	; (8005be8 <HAL_DAC_Start_DMA+0x168>)
 8005abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	4a4a      	ldr	r2, [pc, #296]	; (8005bec <HAL_DAC_Start_DMA+0x16c>)
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	4a49      	ldr	r2, [pc, #292]	; (8005bf0 <HAL_DAC_Start_DMA+0x170>)
 8005acc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005adc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_DAC_Start_DMA+0x6c>
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d005      	beq.n	8005af6 <HAL_DAC_Start_DMA+0x76>
 8005aea:	e009      	b.n	8005b00 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3308      	adds	r3, #8
 8005af2:	613b      	str	r3, [r7, #16]
        break;
 8005af4:	e033      	b.n	8005b5e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	613b      	str	r3, [r7, #16]
        break;
 8005afe:	e02e      	b.n	8005b5e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3310      	adds	r3, #16
 8005b06:	613b      	str	r3, [r7, #16]
        break;
 8005b08:	e029      	b.n	8005b5e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4a39      	ldr	r2, [pc, #228]	; (8005bf4 <HAL_DAC_Start_DMA+0x174>)
 8005b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	4a38      	ldr	r2, [pc, #224]	; (8005bf8 <HAL_DAC_Start_DMA+0x178>)
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	4a37      	ldr	r2, [pc, #220]	; (8005bfc <HAL_DAC_Start_DMA+0x17c>)
 8005b20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_DAC_Start_DMA+0xc0>
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d005      	beq.n	8005b4a <HAL_DAC_Start_DMA+0xca>
 8005b3e:	e009      	b.n	8005b54 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	613b      	str	r3, [r7, #16]
        break;
 8005b48:	e009      	b.n	8005b5e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3318      	adds	r3, #24
 8005b50:	613b      	str	r3, [r7, #16]
        break;
 8005b52:	e004      	b.n	8005b5e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	331c      	adds	r3, #28
 8005b5a:	613b      	str	r3, [r7, #16]
        break;
 8005b5c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d111      	bne.n	8005b88 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6898      	ldr	r0, [r3, #8]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	f000 fe67 	bl	8006850 <HAL_DMA_Start_IT>
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]
 8005b86:	e010      	b.n	8005baa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005b96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68d8      	ldr	r0, [r3, #12]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	f000 fe55 	bl	8006850 <HAL_DMA_Start_IT>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	409a      	lsls	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e005      	b.n	8005bdc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f043 0204 	orr.w	r2, r3, #4
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	08006071 	.word	0x08006071
 8005bec:	08006093 	.word	0x08006093
 8005bf0:	080060af 	.word	0x080060af
 8005bf4:	0800612d 	.word	0x0800612d
 8005bf8:	0800614f 	.word	0x0800614f
 8005bfc:	0800616b 	.word	0x0800616b

08005c00 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e03e      	b.n	8005c92 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43da      	mvns	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	400a      	ands	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6819      	ldr	r1, [r3, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2201      	movs	r2, #1
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	43da      	mvns	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	400a      	ands	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10d      	bne.n	8005c70 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 f863 	bl	8006d24 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e00c      	b.n	8005c8a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 f855 	bl	8006d24 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005c88:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01d      	beq.n	8005cf8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d018      	beq.n	8005cf8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f043 0201 	orr.w	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ce0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cf0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f86f 	bl	8005dd6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01d      	beq.n	8005d3e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d018      	beq.n	8005d3e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2204      	movs	r2, #4
 8005d10:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f043 0202 	orr.w	r2, r3, #2
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005d26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f9ed 	bl	8006118 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b087      	sub	sp, #28
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e015      	b.n	8005d8e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4413      	add	r3, r2
 8005d74:	3308      	adds	r3, #8
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e004      	b.n	8005d84 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	3314      	adds	r3, #20
 8005d82:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	461a      	mov	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
	...

08005dec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08a      	sub	sp, #40	; 0x28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_DAC_ConfigChannel+0x1e>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e12a      	b.n	8006064 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	795b      	ldrb	r3, [r3, #5]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_DAC_ConfigChannel+0x2e>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e124      	b.n	8006064 <HAL_DAC_ConfigChannel+0x278>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2202      	movs	r2, #2
 8005e24:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d17a      	bne.n	8005f24 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005e2e:	f7fe f88b 	bl	8003f48 <HAL_GetTick>
 8005e32:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d13d      	bne.n	8005eb6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e3a:	e018      	b.n	8005e6e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e3c:	f7fe f884 	bl	8003f48 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d911      	bls.n	8005e6e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e50:	4b86      	ldr	r3, [pc, #536]	; (800606c <HAL_DAC_ConfigChannel+0x280>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f043 0208 	orr.w	r2, r3, #8
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2203      	movs	r2, #3
 8005e68:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e0fa      	b.n	8006064 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e74:	4b7d      	ldr	r3, [pc, #500]	; (800606c <HAL_DAC_ConfigChannel+0x280>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1df      	bne.n	8005e3c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	6992      	ldr	r2, [r2, #24]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
 8005e86:	e020      	b.n	8005eca <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e88:	f7fe f85e 	bl	8003f48 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d90f      	bls.n	8005eb6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da0a      	bge.n	8005eb6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f043 0208 	orr.w	r2, r3, #8
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2203      	movs	r2, #3
 8005eb0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e0d6      	b.n	8006064 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dbe3      	blt.n	8005e88 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	6992      	ldr	r2, [r2, #24]
 8005ec8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	ea02 0103 	and.w	r1, r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f003 0310 	and.w	r3, r3, #16
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	21ff      	movs	r1, #255	; 0xff
 8005f06:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	ea02 0103 	and.w	r1, r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d11d      	bne.n	8005f68 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f003 0310 	and.w	r3, r3, #16
 8005f3a:	221f      	movs	r2, #31
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2207      	movs	r2, #7
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d102      	bne.n	8005f92 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	e00f      	b.n	8005fb2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d102      	bne.n	8005fa0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9e:	e008      	b.n	8005fb2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
 8005fac:	e001      	b.n	8005fb2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6819      	ldr	r1, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	43da      	mvns	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	400a      	ands	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	f640 72fe 	movw	r2, #4094	; 0xffe
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43db      	mvns	r3, r3
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	4013      	ands	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4313      	orrs	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6819      	ldr	r1, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	22c0      	movs	r2, #192	; 0xc0
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43da      	mvns	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	400a      	ands	r2, r1
 8006052:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006064:	4618      	mov	r0, r3
 8006066:	3728      	adds	r7, #40	; 0x28
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20008000 	.word	0x20008000

08006070 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff fe8b 	bl	8005d9a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	711a      	strb	r2, [r3, #4]
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff fe84 	bl	8005dae <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f043 0204 	orr.w	r2, r3, #4
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fe7a 	bl	8005dc2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	711a      	strb	r2, [r3, #4]
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff ffce 	bl	80060dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	711a      	strb	r2, [r3, #4]
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff ffc7 	bl	80060f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f043 0204 	orr.w	r2, r3, #4
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff ffbd 	bl	8006104 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	711a      	strb	r2, [r3, #4]
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80061a0:	f7fd fed2 	bl	8003f48 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e316      	b.n	80067de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a66      	ldr	r2, [pc, #408]	; (8006350 <HAL_DMA_Init+0x1b8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d04a      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a65      	ldr	r2, [pc, #404]	; (8006354 <HAL_DMA_Init+0x1bc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d045      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a63      	ldr	r2, [pc, #396]	; (8006358 <HAL_DMA_Init+0x1c0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d040      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a62      	ldr	r2, [pc, #392]	; (800635c <HAL_DMA_Init+0x1c4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d03b      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a60      	ldr	r2, [pc, #384]	; (8006360 <HAL_DMA_Init+0x1c8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d036      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a5f      	ldr	r2, [pc, #380]	; (8006364 <HAL_DMA_Init+0x1cc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d031      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a5d      	ldr	r2, [pc, #372]	; (8006368 <HAL_DMA_Init+0x1d0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d02c      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a5c      	ldr	r2, [pc, #368]	; (800636c <HAL_DMA_Init+0x1d4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d027      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a5a      	ldr	r2, [pc, #360]	; (8006370 <HAL_DMA_Init+0x1d8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d022      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a59      	ldr	r2, [pc, #356]	; (8006374 <HAL_DMA_Init+0x1dc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d01d      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a57      	ldr	r2, [pc, #348]	; (8006378 <HAL_DMA_Init+0x1e0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d018      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a56      	ldr	r2, [pc, #344]	; (800637c <HAL_DMA_Init+0x1e4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a54      	ldr	r2, [pc, #336]	; (8006380 <HAL_DMA_Init+0x1e8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00e      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a53      	ldr	r2, [pc, #332]	; (8006384 <HAL_DMA_Init+0x1ec>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d009      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a51      	ldr	r2, [pc, #324]	; (8006388 <HAL_DMA_Init+0x1f0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_DMA_Init+0xb8>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a50      	ldr	r2, [pc, #320]	; (800638c <HAL_DMA_Init+0x1f4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d101      	bne.n	8006254 <HAL_DMA_Init+0xbc>
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <HAL_DMA_Init+0xbe>
 8006254:	2300      	movs	r3, #0
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 813b 	beq.w	80064d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a37      	ldr	r2, [pc, #220]	; (8006350 <HAL_DMA_Init+0x1b8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d04a      	beq.n	800630c <HAL_DMA_Init+0x174>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a36      	ldr	r2, [pc, #216]	; (8006354 <HAL_DMA_Init+0x1bc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d045      	beq.n	800630c <HAL_DMA_Init+0x174>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a34      	ldr	r2, [pc, #208]	; (8006358 <HAL_DMA_Init+0x1c0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d040      	beq.n	800630c <HAL_DMA_Init+0x174>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a33      	ldr	r2, [pc, #204]	; (800635c <HAL_DMA_Init+0x1c4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d03b      	beq.n	800630c <HAL_DMA_Init+0x174>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a31      	ldr	r2, [pc, #196]	; (8006360 <HAL_DMA_Init+0x1c8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d036      	beq.n	800630c <HAL_DMA_Init+0x174>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a30      	ldr	r2, [pc, #192]	; (8006364 <HAL_DMA_Init+0x1cc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d031      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2e      	ldr	r2, [pc, #184]	; (8006368 <HAL_DMA_Init+0x1d0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d02c      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2d      	ldr	r2, [pc, #180]	; (800636c <HAL_DMA_Init+0x1d4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d027      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2b      	ldr	r2, [pc, #172]	; (8006370 <HAL_DMA_Init+0x1d8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d022      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <HAL_DMA_Init+0x1dc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d01d      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a28      	ldr	r2, [pc, #160]	; (8006378 <HAL_DMA_Init+0x1e0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d018      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a27      	ldr	r2, [pc, #156]	; (800637c <HAL_DMA_Init+0x1e4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d013      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a25      	ldr	r2, [pc, #148]	; (8006380 <HAL_DMA_Init+0x1e8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00e      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a24      	ldr	r2, [pc, #144]	; (8006384 <HAL_DMA_Init+0x1ec>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_DMA_Init+0x174>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a22      	ldr	r2, [pc, #136]	; (8006388 <HAL_DMA_Init+0x1f0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <HAL_DMA_Init+0x174>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a21      	ldr	r2, [pc, #132]	; (800638c <HAL_DMA_Init+0x1f4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d108      	bne.n	800631e <HAL_DMA_Init+0x186>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e007      	b.n	800632e <HAL_DMA_Init+0x196>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800632e:	e02f      	b.n	8006390 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006330:	f7fd fe0a 	bl	8003f48 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b05      	cmp	r3, #5
 800633c:	d928      	bls.n	8006390 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2203      	movs	r2, #3
 8006348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e246      	b.n	80067de <HAL_DMA_Init+0x646>
 8006350:	40020010 	.word	0x40020010
 8006354:	40020028 	.word	0x40020028
 8006358:	40020040 	.word	0x40020040
 800635c:	40020058 	.word	0x40020058
 8006360:	40020070 	.word	0x40020070
 8006364:	40020088 	.word	0x40020088
 8006368:	400200a0 	.word	0x400200a0
 800636c:	400200b8 	.word	0x400200b8
 8006370:	40020410 	.word	0x40020410
 8006374:	40020428 	.word	0x40020428
 8006378:	40020440 	.word	0x40020440
 800637c:	40020458 	.word	0x40020458
 8006380:	40020470 	.word	0x40020470
 8006384:	40020488 	.word	0x40020488
 8006388:	400204a0 	.word	0x400204a0
 800638c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1c8      	bne.n	8006330 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4b83      	ldr	r3, [pc, #524]	; (80065b8 <HAL_DMA_Init+0x420>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80063b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d107      	bne.n	80063f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	4313      	orrs	r3, r2
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80063f4:	4b71      	ldr	r3, [pc, #452]	; (80065bc <HAL_DMA_Init+0x424>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b71      	ldr	r3, [pc, #452]	; (80065c0 <HAL_DMA_Init+0x428>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006400:	d328      	bcc.n	8006454 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b28      	cmp	r3, #40	; 0x28
 8006408:	d903      	bls.n	8006412 <HAL_DMA_Init+0x27a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b2e      	cmp	r3, #46	; 0x2e
 8006410:	d917      	bls.n	8006442 <HAL_DMA_Init+0x2aa>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b3e      	cmp	r3, #62	; 0x3e
 8006418:	d903      	bls.n	8006422 <HAL_DMA_Init+0x28a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b42      	cmp	r3, #66	; 0x42
 8006420:	d90f      	bls.n	8006442 <HAL_DMA_Init+0x2aa>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b46      	cmp	r3, #70	; 0x46
 8006428:	d903      	bls.n	8006432 <HAL_DMA_Init+0x29a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b48      	cmp	r3, #72	; 0x48
 8006430:	d907      	bls.n	8006442 <HAL_DMA_Init+0x2aa>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b4e      	cmp	r3, #78	; 0x4e
 8006438:	d905      	bls.n	8006446 <HAL_DMA_Init+0x2ae>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b52      	cmp	r3, #82	; 0x52
 8006440:	d801      	bhi.n	8006446 <HAL_DMA_Init+0x2ae>
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <HAL_DMA_Init+0x2b0>
 8006446:	2300      	movs	r3, #0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006452:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0307 	bic.w	r3, r3, #7
 800646a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b04      	cmp	r3, #4
 800647c:	d117      	bne.n	80064ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00e      	beq.n	80064ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f002 fb3f 	bl	8008b14 <DMA_CheckFifoParam>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2240      	movs	r2, #64	; 0x40
 80064a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e197      	b.n	80067de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f002 fa7a 	bl	80089b0 <DMA_CalcBaseAndBitshift>
 80064bc:	4603      	mov	r3, r0
 80064be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	223f      	movs	r2, #63	; 0x3f
 80064ca:	409a      	lsls	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	e0cd      	b.n	800666e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a3b      	ldr	r2, [pc, #236]	; (80065c4 <HAL_DMA_Init+0x42c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d022      	beq.n	8006522 <HAL_DMA_Init+0x38a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a39      	ldr	r2, [pc, #228]	; (80065c8 <HAL_DMA_Init+0x430>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01d      	beq.n	8006522 <HAL_DMA_Init+0x38a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a38      	ldr	r2, [pc, #224]	; (80065cc <HAL_DMA_Init+0x434>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d018      	beq.n	8006522 <HAL_DMA_Init+0x38a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a36      	ldr	r2, [pc, #216]	; (80065d0 <HAL_DMA_Init+0x438>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d013      	beq.n	8006522 <HAL_DMA_Init+0x38a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a35      	ldr	r2, [pc, #212]	; (80065d4 <HAL_DMA_Init+0x43c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00e      	beq.n	8006522 <HAL_DMA_Init+0x38a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a33      	ldr	r2, [pc, #204]	; (80065d8 <HAL_DMA_Init+0x440>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d009      	beq.n	8006522 <HAL_DMA_Init+0x38a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a32      	ldr	r2, [pc, #200]	; (80065dc <HAL_DMA_Init+0x444>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_DMA_Init+0x38a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a30      	ldr	r2, [pc, #192]	; (80065e0 <HAL_DMA_Init+0x448>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d101      	bne.n	8006526 <HAL_DMA_Init+0x38e>
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <HAL_DMA_Init+0x390>
 8006526:	2300      	movs	r3, #0
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8097 	beq.w	800665c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a24      	ldr	r2, [pc, #144]	; (80065c4 <HAL_DMA_Init+0x42c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d021      	beq.n	800657c <HAL_DMA_Init+0x3e4>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a22      	ldr	r2, [pc, #136]	; (80065c8 <HAL_DMA_Init+0x430>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01c      	beq.n	800657c <HAL_DMA_Init+0x3e4>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a21      	ldr	r2, [pc, #132]	; (80065cc <HAL_DMA_Init+0x434>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d017      	beq.n	800657c <HAL_DMA_Init+0x3e4>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1f      	ldr	r2, [pc, #124]	; (80065d0 <HAL_DMA_Init+0x438>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d012      	beq.n	800657c <HAL_DMA_Init+0x3e4>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <HAL_DMA_Init+0x43c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00d      	beq.n	800657c <HAL_DMA_Init+0x3e4>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <HAL_DMA_Init+0x440>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d008      	beq.n	800657c <HAL_DMA_Init+0x3e4>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1b      	ldr	r2, [pc, #108]	; (80065dc <HAL_DMA_Init+0x444>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <HAL_DMA_Init+0x3e4>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a19      	ldr	r2, [pc, #100]	; (80065e0 <HAL_DMA_Init+0x448>)
 800657a:	4293      	cmp	r3, r2
 800657c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <HAL_DMA_Init+0x44c>)
 800659a:	4013      	ands	r3, r2
 800659c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d020      	beq.n	80065e8 <HAL_DMA_Init+0x450>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b80      	cmp	r3, #128	; 0x80
 80065ac:	d102      	bne.n	80065b4 <HAL_DMA_Init+0x41c>
 80065ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065b2:	e01a      	b.n	80065ea <HAL_DMA_Init+0x452>
 80065b4:	2300      	movs	r3, #0
 80065b6:	e018      	b.n	80065ea <HAL_DMA_Init+0x452>
 80065b8:	fe10803f 	.word	0xfe10803f
 80065bc:	5c001000 	.word	0x5c001000
 80065c0:	ffff0000 	.word	0xffff0000
 80065c4:	58025408 	.word	0x58025408
 80065c8:	5802541c 	.word	0x5802541c
 80065cc:	58025430 	.word	0x58025430
 80065d0:	58025444 	.word	0x58025444
 80065d4:	58025458 	.word	0x58025458
 80065d8:	5802546c 	.word	0x5802546c
 80065dc:	58025480 	.word	0x58025480
 80065e0:	58025494 	.word	0x58025494
 80065e4:	fffe000f 	.word	0xfffe000f
 80065e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	68d2      	ldr	r2, [r2, #12]
 80065ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006618:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	4b6e      	ldr	r3, [pc, #440]	; (80067e8 <HAL_DMA_Init+0x650>)
 8006630:	4413      	add	r3, r2
 8006632:	4a6e      	ldr	r2, [pc, #440]	; (80067ec <HAL_DMA_Init+0x654>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	009a      	lsls	r2, r3, #2
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f002 f9b5 	bl	80089b0 <DMA_CalcBaseAndBitshift>
 8006646:	4603      	mov	r3, r0
 8006648:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	2201      	movs	r2, #1
 8006654:	409a      	lsls	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	605a      	str	r2, [r3, #4]
 800665a:	e008      	b.n	800666e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2240      	movs	r2, #64	; 0x40
 8006660:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2203      	movs	r2, #3
 8006666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e0b7      	b.n	80067de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a5f      	ldr	r2, [pc, #380]	; (80067f0 <HAL_DMA_Init+0x658>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d072      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a5d      	ldr	r2, [pc, #372]	; (80067f4 <HAL_DMA_Init+0x65c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d06d      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a5c      	ldr	r2, [pc, #368]	; (80067f8 <HAL_DMA_Init+0x660>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d068      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a5a      	ldr	r2, [pc, #360]	; (80067fc <HAL_DMA_Init+0x664>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d063      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a59      	ldr	r2, [pc, #356]	; (8006800 <HAL_DMA_Init+0x668>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d05e      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a57      	ldr	r2, [pc, #348]	; (8006804 <HAL_DMA_Init+0x66c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d059      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a56      	ldr	r2, [pc, #344]	; (8006808 <HAL_DMA_Init+0x670>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d054      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a54      	ldr	r2, [pc, #336]	; (800680c <HAL_DMA_Init+0x674>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d04f      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a53      	ldr	r2, [pc, #332]	; (8006810 <HAL_DMA_Init+0x678>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d04a      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a51      	ldr	r2, [pc, #324]	; (8006814 <HAL_DMA_Init+0x67c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d045      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a50      	ldr	r2, [pc, #320]	; (8006818 <HAL_DMA_Init+0x680>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d040      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a4e      	ldr	r2, [pc, #312]	; (800681c <HAL_DMA_Init+0x684>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d03b      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a4d      	ldr	r2, [pc, #308]	; (8006820 <HAL_DMA_Init+0x688>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d036      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a4b      	ldr	r2, [pc, #300]	; (8006824 <HAL_DMA_Init+0x68c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d031      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a4a      	ldr	r2, [pc, #296]	; (8006828 <HAL_DMA_Init+0x690>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d02c      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a48      	ldr	r2, [pc, #288]	; (800682c <HAL_DMA_Init+0x694>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d027      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a47      	ldr	r2, [pc, #284]	; (8006830 <HAL_DMA_Init+0x698>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d022      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a45      	ldr	r2, [pc, #276]	; (8006834 <HAL_DMA_Init+0x69c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01d      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a44      	ldr	r2, [pc, #272]	; (8006838 <HAL_DMA_Init+0x6a0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d018      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a42      	ldr	r2, [pc, #264]	; (800683c <HAL_DMA_Init+0x6a4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d013      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a41      	ldr	r2, [pc, #260]	; (8006840 <HAL_DMA_Init+0x6a8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00e      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a3f      	ldr	r2, [pc, #252]	; (8006844 <HAL_DMA_Init+0x6ac>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d009      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a3e      	ldr	r2, [pc, #248]	; (8006848 <HAL_DMA_Init+0x6b0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d004      	beq.n	800675e <HAL_DMA_Init+0x5c6>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a3c      	ldr	r2, [pc, #240]	; (800684c <HAL_DMA_Init+0x6b4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d101      	bne.n	8006762 <HAL_DMA_Init+0x5ca>
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <HAL_DMA_Init+0x5cc>
 8006762:	2300      	movs	r3, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d032      	beq.n	80067ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 fa4f 	bl	8008c0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d102      	bne.n	800677c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006790:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d010      	beq.n	80067bc <HAL_DMA_Init+0x624>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d80c      	bhi.n	80067bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f002 facc 	bl	8008d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	e008      	b.n	80067ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	a7fdabf8 	.word	0xa7fdabf8
 80067ec:	cccccccd 	.word	0xcccccccd
 80067f0:	40020010 	.word	0x40020010
 80067f4:	40020028 	.word	0x40020028
 80067f8:	40020040 	.word	0x40020040
 80067fc:	40020058 	.word	0x40020058
 8006800:	40020070 	.word	0x40020070
 8006804:	40020088 	.word	0x40020088
 8006808:	400200a0 	.word	0x400200a0
 800680c:	400200b8 	.word	0x400200b8
 8006810:	40020410 	.word	0x40020410
 8006814:	40020428 	.word	0x40020428
 8006818:	40020440 	.word	0x40020440
 800681c:	40020458 	.word	0x40020458
 8006820:	40020470 	.word	0x40020470
 8006824:	40020488 	.word	0x40020488
 8006828:	400204a0 	.word	0x400204a0
 800682c:	400204b8 	.word	0x400204b8
 8006830:	58025408 	.word	0x58025408
 8006834:	5802541c 	.word	0x5802541c
 8006838:	58025430 	.word	0x58025430
 800683c:	58025444 	.word	0x58025444
 8006840:	58025458 	.word	0x58025458
 8006844:	5802546c 	.word	0x5802546c
 8006848:	58025480 	.word	0x58025480
 800684c:	58025494 	.word	0x58025494

08006850 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e226      	b.n	8006cba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_DMA_Start_IT+0x2a>
 8006876:	2302      	movs	r3, #2
 8006878:	e21f      	b.n	8006cba <HAL_DMA_Start_IT+0x46a>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b01      	cmp	r3, #1
 800688c:	f040 820a 	bne.w	8006ca4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a68      	ldr	r2, [pc, #416]	; (8006a44 <HAL_DMA_Start_IT+0x1f4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d04a      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a66      	ldr	r2, [pc, #408]	; (8006a48 <HAL_DMA_Start_IT+0x1f8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d045      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a65      	ldr	r2, [pc, #404]	; (8006a4c <HAL_DMA_Start_IT+0x1fc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d040      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a63      	ldr	r2, [pc, #396]	; (8006a50 <HAL_DMA_Start_IT+0x200>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d03b      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a62      	ldr	r2, [pc, #392]	; (8006a54 <HAL_DMA_Start_IT+0x204>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d036      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a60      	ldr	r2, [pc, #384]	; (8006a58 <HAL_DMA_Start_IT+0x208>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d031      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a5f      	ldr	r2, [pc, #380]	; (8006a5c <HAL_DMA_Start_IT+0x20c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d02c      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a5d      	ldr	r2, [pc, #372]	; (8006a60 <HAL_DMA_Start_IT+0x210>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d027      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a5c      	ldr	r2, [pc, #368]	; (8006a64 <HAL_DMA_Start_IT+0x214>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d022      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a5a      	ldr	r2, [pc, #360]	; (8006a68 <HAL_DMA_Start_IT+0x218>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d01d      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a59      	ldr	r2, [pc, #356]	; (8006a6c <HAL_DMA_Start_IT+0x21c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d018      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a57      	ldr	r2, [pc, #348]	; (8006a70 <HAL_DMA_Start_IT+0x220>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a56      	ldr	r2, [pc, #344]	; (8006a74 <HAL_DMA_Start_IT+0x224>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a54      	ldr	r2, [pc, #336]	; (8006a78 <HAL_DMA_Start_IT+0x228>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d009      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a53      	ldr	r2, [pc, #332]	; (8006a7c <HAL_DMA_Start_IT+0x22c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_DMA_Start_IT+0xee>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a51      	ldr	r2, [pc, #324]	; (8006a80 <HAL_DMA_Start_IT+0x230>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d108      	bne.n	8006950 <HAL_DMA_Start_IT+0x100>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e007      	b.n	8006960 <HAL_DMA_Start_IT+0x110>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0201 	bic.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f001 fe76 	bl	8008658 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a34      	ldr	r2, [pc, #208]	; (8006a44 <HAL_DMA_Start_IT+0x1f4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d04a      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a33      	ldr	r2, [pc, #204]	; (8006a48 <HAL_DMA_Start_IT+0x1f8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d045      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a31      	ldr	r2, [pc, #196]	; (8006a4c <HAL_DMA_Start_IT+0x1fc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d040      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a30      	ldr	r2, [pc, #192]	; (8006a50 <HAL_DMA_Start_IT+0x200>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d03b      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a2e      	ldr	r2, [pc, #184]	; (8006a54 <HAL_DMA_Start_IT+0x204>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d036      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2d      	ldr	r2, [pc, #180]	; (8006a58 <HAL_DMA_Start_IT+0x208>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d031      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2b      	ldr	r2, [pc, #172]	; (8006a5c <HAL_DMA_Start_IT+0x20c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d02c      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2a      	ldr	r2, [pc, #168]	; (8006a60 <HAL_DMA_Start_IT+0x210>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d027      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a28      	ldr	r2, [pc, #160]	; (8006a64 <HAL_DMA_Start_IT+0x214>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d022      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a27      	ldr	r2, [pc, #156]	; (8006a68 <HAL_DMA_Start_IT+0x218>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d01d      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a25      	ldr	r2, [pc, #148]	; (8006a6c <HAL_DMA_Start_IT+0x21c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d018      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a24      	ldr	r2, [pc, #144]	; (8006a70 <HAL_DMA_Start_IT+0x220>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a22      	ldr	r2, [pc, #136]	; (8006a74 <HAL_DMA_Start_IT+0x224>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00e      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a21      	ldr	r2, [pc, #132]	; (8006a78 <HAL_DMA_Start_IT+0x228>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1f      	ldr	r2, [pc, #124]	; (8006a7c <HAL_DMA_Start_IT+0x22c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_DMA_Start_IT+0x1bc>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <HAL_DMA_Start_IT+0x230>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <HAL_DMA_Start_IT+0x1c0>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <HAL_DMA_Start_IT+0x1c2>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d036      	beq.n	8006a84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f023 021e 	bic.w	r2, r3, #30
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0216 	orr.w	r2, r2, #22
 8006a28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d03e      	beq.n	8006ab0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0208 	orr.w	r2, r2, #8
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e035      	b.n	8006ab0 <HAL_DMA_Start_IT+0x260>
 8006a44:	40020010 	.word	0x40020010
 8006a48:	40020028 	.word	0x40020028
 8006a4c:	40020040 	.word	0x40020040
 8006a50:	40020058 	.word	0x40020058
 8006a54:	40020070 	.word	0x40020070
 8006a58:	40020088 	.word	0x40020088
 8006a5c:	400200a0 	.word	0x400200a0
 8006a60:	400200b8 	.word	0x400200b8
 8006a64:	40020410 	.word	0x40020410
 8006a68:	40020428 	.word	0x40020428
 8006a6c:	40020440 	.word	0x40020440
 8006a70:	40020458 	.word	0x40020458
 8006a74:	40020470 	.word	0x40020470
 8006a78:	40020488 	.word	0x40020488
 8006a7c:	400204a0 	.word	0x400204a0
 8006a80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 020e 	bic.w	r2, r3, #14
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 020a 	orr.w	r2, r2, #10
 8006a96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0204 	orr.w	r2, r2, #4
 8006aae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a83      	ldr	r2, [pc, #524]	; (8006cc4 <HAL_DMA_Start_IT+0x474>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d072      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a82      	ldr	r2, [pc, #520]	; (8006cc8 <HAL_DMA_Start_IT+0x478>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d06d      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a80      	ldr	r2, [pc, #512]	; (8006ccc <HAL_DMA_Start_IT+0x47c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d068      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7f      	ldr	r2, [pc, #508]	; (8006cd0 <HAL_DMA_Start_IT+0x480>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d063      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a7d      	ldr	r2, [pc, #500]	; (8006cd4 <HAL_DMA_Start_IT+0x484>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d05e      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7c      	ldr	r2, [pc, #496]	; (8006cd8 <HAL_DMA_Start_IT+0x488>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d059      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a7a      	ldr	r2, [pc, #488]	; (8006cdc <HAL_DMA_Start_IT+0x48c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d054      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a79      	ldr	r2, [pc, #484]	; (8006ce0 <HAL_DMA_Start_IT+0x490>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d04f      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a77      	ldr	r2, [pc, #476]	; (8006ce4 <HAL_DMA_Start_IT+0x494>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d04a      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a76      	ldr	r2, [pc, #472]	; (8006ce8 <HAL_DMA_Start_IT+0x498>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d045      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a74      	ldr	r2, [pc, #464]	; (8006cec <HAL_DMA_Start_IT+0x49c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d040      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a73      	ldr	r2, [pc, #460]	; (8006cf0 <HAL_DMA_Start_IT+0x4a0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d03b      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a71      	ldr	r2, [pc, #452]	; (8006cf4 <HAL_DMA_Start_IT+0x4a4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d036      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a70      	ldr	r2, [pc, #448]	; (8006cf8 <HAL_DMA_Start_IT+0x4a8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d031      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6e      	ldr	r2, [pc, #440]	; (8006cfc <HAL_DMA_Start_IT+0x4ac>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d02c      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6d      	ldr	r2, [pc, #436]	; (8006d00 <HAL_DMA_Start_IT+0x4b0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d027      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a6b      	ldr	r2, [pc, #428]	; (8006d04 <HAL_DMA_Start_IT+0x4b4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d022      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6a      	ldr	r2, [pc, #424]	; (8006d08 <HAL_DMA_Start_IT+0x4b8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d01d      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a68      	ldr	r2, [pc, #416]	; (8006d0c <HAL_DMA_Start_IT+0x4bc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d018      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <HAL_DMA_Start_IT+0x4c0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d013      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a65      	ldr	r2, [pc, #404]	; (8006d14 <HAL_DMA_Start_IT+0x4c4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00e      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a64      	ldr	r2, [pc, #400]	; (8006d18 <HAL_DMA_Start_IT+0x4c8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d009      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a62      	ldr	r2, [pc, #392]	; (8006d1c <HAL_DMA_Start_IT+0x4cc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x350>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a61      	ldr	r2, [pc, #388]	; (8006d20 <HAL_DMA_Start_IT+0x4d0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d101      	bne.n	8006ba4 <HAL_DMA_Start_IT+0x354>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <HAL_DMA_Start_IT+0x356>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01a      	beq.n	8006be0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a37      	ldr	r2, [pc, #220]	; (8006cc4 <HAL_DMA_Start_IT+0x474>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d04a      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a36      	ldr	r2, [pc, #216]	; (8006cc8 <HAL_DMA_Start_IT+0x478>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d045      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a34      	ldr	r2, [pc, #208]	; (8006ccc <HAL_DMA_Start_IT+0x47c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d040      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a33      	ldr	r2, [pc, #204]	; (8006cd0 <HAL_DMA_Start_IT+0x480>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d03b      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a31      	ldr	r2, [pc, #196]	; (8006cd4 <HAL_DMA_Start_IT+0x484>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d036      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a30      	ldr	r2, [pc, #192]	; (8006cd8 <HAL_DMA_Start_IT+0x488>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d031      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a2e      	ldr	r2, [pc, #184]	; (8006cdc <HAL_DMA_Start_IT+0x48c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d02c      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a2d      	ldr	r2, [pc, #180]	; (8006ce0 <HAL_DMA_Start_IT+0x490>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d027      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a2b      	ldr	r2, [pc, #172]	; (8006ce4 <HAL_DMA_Start_IT+0x494>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d022      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ce8 <HAL_DMA_Start_IT+0x498>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d01d      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a28      	ldr	r2, [pc, #160]	; (8006cec <HAL_DMA_Start_IT+0x49c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d018      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <HAL_DMA_Start_IT+0x4a0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d013      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a25      	ldr	r2, [pc, #148]	; (8006cf4 <HAL_DMA_Start_IT+0x4a4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00e      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a24      	ldr	r2, [pc, #144]	; (8006cf8 <HAL_DMA_Start_IT+0x4a8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d009      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a22      	ldr	r2, [pc, #136]	; (8006cfc <HAL_DMA_Start_IT+0x4ac>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d004      	beq.n	8006c80 <HAL_DMA_Start_IT+0x430>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <HAL_DMA_Start_IT+0x4b0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d108      	bne.n	8006c92 <HAL_DMA_Start_IT+0x442>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e012      	b.n	8006cb8 <HAL_DMA_Start_IT+0x468>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	e009      	b.n	8006cb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40020010 	.word	0x40020010
 8006cc8:	40020028 	.word	0x40020028
 8006ccc:	40020040 	.word	0x40020040
 8006cd0:	40020058 	.word	0x40020058
 8006cd4:	40020070 	.word	0x40020070
 8006cd8:	40020088 	.word	0x40020088
 8006cdc:	400200a0 	.word	0x400200a0
 8006ce0:	400200b8 	.word	0x400200b8
 8006ce4:	40020410 	.word	0x40020410
 8006ce8:	40020428 	.word	0x40020428
 8006cec:	40020440 	.word	0x40020440
 8006cf0:	40020458 	.word	0x40020458
 8006cf4:	40020470 	.word	0x40020470
 8006cf8:	40020488 	.word	0x40020488
 8006cfc:	400204a0 	.word	0x400204a0
 8006d00:	400204b8 	.word	0x400204b8
 8006d04:	58025408 	.word	0x58025408
 8006d08:	5802541c 	.word	0x5802541c
 8006d0c:	58025430 	.word	0x58025430
 8006d10:	58025444 	.word	0x58025444
 8006d14:	58025458 	.word	0x58025458
 8006d18:	5802546c 	.word	0x5802546c
 8006d1c:	58025480 	.word	0x58025480
 8006d20:	58025494 	.word	0x58025494

08006d24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006d2c:	f7fd f90c 	bl	8003f48 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e2dc      	b.n	80072f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d008      	beq.n	8006d5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2280      	movs	r2, #128	; 0x80
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e2cd      	b.n	80072f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a76      	ldr	r2, [pc, #472]	; (8006f38 <HAL_DMA_Abort+0x214>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d04a      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a74      	ldr	r2, [pc, #464]	; (8006f3c <HAL_DMA_Abort+0x218>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d045      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a73      	ldr	r2, [pc, #460]	; (8006f40 <HAL_DMA_Abort+0x21c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d040      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a71      	ldr	r2, [pc, #452]	; (8006f44 <HAL_DMA_Abort+0x220>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d03b      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a70      	ldr	r2, [pc, #448]	; (8006f48 <HAL_DMA_Abort+0x224>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d036      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a6e      	ldr	r2, [pc, #440]	; (8006f4c <HAL_DMA_Abort+0x228>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d031      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a6d      	ldr	r2, [pc, #436]	; (8006f50 <HAL_DMA_Abort+0x22c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d02c      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a6b      	ldr	r2, [pc, #428]	; (8006f54 <HAL_DMA_Abort+0x230>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d027      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a6a      	ldr	r2, [pc, #424]	; (8006f58 <HAL_DMA_Abort+0x234>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d022      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a68      	ldr	r2, [pc, #416]	; (8006f5c <HAL_DMA_Abort+0x238>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01d      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a67      	ldr	r2, [pc, #412]	; (8006f60 <HAL_DMA_Abort+0x23c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d018      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a65      	ldr	r2, [pc, #404]	; (8006f64 <HAL_DMA_Abort+0x240>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a64      	ldr	r2, [pc, #400]	; (8006f68 <HAL_DMA_Abort+0x244>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a62      	ldr	r2, [pc, #392]	; (8006f6c <HAL_DMA_Abort+0x248>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d009      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a61      	ldr	r2, [pc, #388]	; (8006f70 <HAL_DMA_Abort+0x24c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_DMA_Abort+0xd6>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5f      	ldr	r2, [pc, #380]	; (8006f74 <HAL_DMA_Abort+0x250>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d101      	bne.n	8006dfe <HAL_DMA_Abort+0xda>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <HAL_DMA_Abort+0xdc>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d013      	beq.n	8006e2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 021e 	bic.w	r2, r2, #30
 8006e12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e00a      	b.n	8006e42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 020e 	bic.w	r2, r2, #14
 8006e3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a3c      	ldr	r2, [pc, #240]	; (8006f38 <HAL_DMA_Abort+0x214>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d072      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a3a      	ldr	r2, [pc, #232]	; (8006f3c <HAL_DMA_Abort+0x218>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d06d      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a39      	ldr	r2, [pc, #228]	; (8006f40 <HAL_DMA_Abort+0x21c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d068      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a37      	ldr	r2, [pc, #220]	; (8006f44 <HAL_DMA_Abort+0x220>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d063      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a36      	ldr	r2, [pc, #216]	; (8006f48 <HAL_DMA_Abort+0x224>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d05e      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a34      	ldr	r2, [pc, #208]	; (8006f4c <HAL_DMA_Abort+0x228>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d059      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a33      	ldr	r2, [pc, #204]	; (8006f50 <HAL_DMA_Abort+0x22c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d054      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a31      	ldr	r2, [pc, #196]	; (8006f54 <HAL_DMA_Abort+0x230>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d04f      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a30      	ldr	r2, [pc, #192]	; (8006f58 <HAL_DMA_Abort+0x234>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d04a      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a2e      	ldr	r2, [pc, #184]	; (8006f5c <HAL_DMA_Abort+0x238>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d045      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a2d      	ldr	r2, [pc, #180]	; (8006f60 <HAL_DMA_Abort+0x23c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d040      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a2b      	ldr	r2, [pc, #172]	; (8006f64 <HAL_DMA_Abort+0x240>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d03b      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <HAL_DMA_Abort+0x244>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d036      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <HAL_DMA_Abort+0x248>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d031      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a27      	ldr	r2, [pc, #156]	; (8006f70 <HAL_DMA_Abort+0x24c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d02c      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a25      	ldr	r2, [pc, #148]	; (8006f74 <HAL_DMA_Abort+0x250>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d027      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a24      	ldr	r2, [pc, #144]	; (8006f78 <HAL_DMA_Abort+0x254>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d022      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a22      	ldr	r2, [pc, #136]	; (8006f7c <HAL_DMA_Abort+0x258>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d01d      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a21      	ldr	r2, [pc, #132]	; (8006f80 <HAL_DMA_Abort+0x25c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d018      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1f      	ldr	r2, [pc, #124]	; (8006f84 <HAL_DMA_Abort+0x260>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1e      	ldr	r2, [pc, #120]	; (8006f88 <HAL_DMA_Abort+0x264>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1c      	ldr	r2, [pc, #112]	; (8006f8c <HAL_DMA_Abort+0x268>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <HAL_DMA_Abort+0x26c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_DMA_Abort+0x20e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a19      	ldr	r2, [pc, #100]	; (8006f94 <HAL_DMA_Abort+0x270>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d132      	bne.n	8006f98 <HAL_DMA_Abort+0x274>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e031      	b.n	8006f9a <HAL_DMA_Abort+0x276>
 8006f36:	bf00      	nop
 8006f38:	40020010 	.word	0x40020010
 8006f3c:	40020028 	.word	0x40020028
 8006f40:	40020040 	.word	0x40020040
 8006f44:	40020058 	.word	0x40020058
 8006f48:	40020070 	.word	0x40020070
 8006f4c:	40020088 	.word	0x40020088
 8006f50:	400200a0 	.word	0x400200a0
 8006f54:	400200b8 	.word	0x400200b8
 8006f58:	40020410 	.word	0x40020410
 8006f5c:	40020428 	.word	0x40020428
 8006f60:	40020440 	.word	0x40020440
 8006f64:	40020458 	.word	0x40020458
 8006f68:	40020470 	.word	0x40020470
 8006f6c:	40020488 	.word	0x40020488
 8006f70:	400204a0 	.word	0x400204a0
 8006f74:	400204b8 	.word	0x400204b8
 8006f78:	58025408 	.word	0x58025408
 8006f7c:	5802541c 	.word	0x5802541c
 8006f80:	58025430 	.word	0x58025430
 8006f84:	58025444 	.word	0x58025444
 8006f88:	58025458 	.word	0x58025458
 8006f8c:	5802546c 	.word	0x5802546c
 8006f90:	58025480 	.word	0x58025480
 8006f94:	58025494 	.word	0x58025494
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a6d      	ldr	r2, [pc, #436]	; (8007168 <HAL_DMA_Abort+0x444>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d04a      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a6b      	ldr	r2, [pc, #428]	; (800716c <HAL_DMA_Abort+0x448>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d045      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a6a      	ldr	r2, [pc, #424]	; (8007170 <HAL_DMA_Abort+0x44c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d040      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a68      	ldr	r2, [pc, #416]	; (8007174 <HAL_DMA_Abort+0x450>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d03b      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a67      	ldr	r2, [pc, #412]	; (8007178 <HAL_DMA_Abort+0x454>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d036      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a65      	ldr	r2, [pc, #404]	; (800717c <HAL_DMA_Abort+0x458>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d031      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a64      	ldr	r2, [pc, #400]	; (8007180 <HAL_DMA_Abort+0x45c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d02c      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a62      	ldr	r2, [pc, #392]	; (8007184 <HAL_DMA_Abort+0x460>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d027      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a61      	ldr	r2, [pc, #388]	; (8007188 <HAL_DMA_Abort+0x464>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d022      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a5f      	ldr	r2, [pc, #380]	; (800718c <HAL_DMA_Abort+0x468>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01d      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a5e      	ldr	r2, [pc, #376]	; (8007190 <HAL_DMA_Abort+0x46c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d018      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a5c      	ldr	r2, [pc, #368]	; (8007194 <HAL_DMA_Abort+0x470>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a5b      	ldr	r2, [pc, #364]	; (8007198 <HAL_DMA_Abort+0x474>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00e      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a59      	ldr	r2, [pc, #356]	; (800719c <HAL_DMA_Abort+0x478>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a58      	ldr	r2, [pc, #352]	; (80071a0 <HAL_DMA_Abort+0x47c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <HAL_DMA_Abort+0x32a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a56      	ldr	r2, [pc, #344]	; (80071a4 <HAL_DMA_Abort+0x480>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d108      	bne.n	8007060 <HAL_DMA_Abort+0x33c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e007      	b.n	8007070 <HAL_DMA_Abort+0x34c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007070:	e013      	b.n	800709a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007072:	f7fc ff69 	bl	8003f48 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b05      	cmp	r3, #5
 800707e:	d90c      	bls.n	800709a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2203      	movs	r2, #3
 800708a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e12d      	b.n	80072f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e5      	bne.n	8007072 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2f      	ldr	r2, [pc, #188]	; (8007168 <HAL_DMA_Abort+0x444>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d04a      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2d      	ldr	r2, [pc, #180]	; (800716c <HAL_DMA_Abort+0x448>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d045      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a2c      	ldr	r2, [pc, #176]	; (8007170 <HAL_DMA_Abort+0x44c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d040      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a2a      	ldr	r2, [pc, #168]	; (8007174 <HAL_DMA_Abort+0x450>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d03b      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a29      	ldr	r2, [pc, #164]	; (8007178 <HAL_DMA_Abort+0x454>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d036      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a27      	ldr	r2, [pc, #156]	; (800717c <HAL_DMA_Abort+0x458>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d031      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a26      	ldr	r2, [pc, #152]	; (8007180 <HAL_DMA_Abort+0x45c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d02c      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a24      	ldr	r2, [pc, #144]	; (8007184 <HAL_DMA_Abort+0x460>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d027      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a23      	ldr	r2, [pc, #140]	; (8007188 <HAL_DMA_Abort+0x464>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d022      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a21      	ldr	r2, [pc, #132]	; (800718c <HAL_DMA_Abort+0x468>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01d      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a20      	ldr	r2, [pc, #128]	; (8007190 <HAL_DMA_Abort+0x46c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d018      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1e      	ldr	r2, [pc, #120]	; (8007194 <HAL_DMA_Abort+0x470>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1d      	ldr	r2, [pc, #116]	; (8007198 <HAL_DMA_Abort+0x474>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00e      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1b      	ldr	r2, [pc, #108]	; (800719c <HAL_DMA_Abort+0x478>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d009      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1a      	ldr	r2, [pc, #104]	; (80071a0 <HAL_DMA_Abort+0x47c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d004      	beq.n	8007146 <HAL_DMA_Abort+0x422>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <HAL_DMA_Abort+0x480>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d101      	bne.n	800714a <HAL_DMA_Abort+0x426>
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <HAL_DMA_Abort+0x428>
 800714a:	2300      	movs	r3, #0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d02b      	beq.n	80071a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007154:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	223f      	movs	r2, #63	; 0x3f
 8007160:	409a      	lsls	r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	609a      	str	r2, [r3, #8]
 8007166:	e02a      	b.n	80071be <HAL_DMA_Abort+0x49a>
 8007168:	40020010 	.word	0x40020010
 800716c:	40020028 	.word	0x40020028
 8007170:	40020040 	.word	0x40020040
 8007174:	40020058 	.word	0x40020058
 8007178:	40020070 	.word	0x40020070
 800717c:	40020088 	.word	0x40020088
 8007180:	400200a0 	.word	0x400200a0
 8007184:	400200b8 	.word	0x400200b8
 8007188:	40020410 	.word	0x40020410
 800718c:	40020428 	.word	0x40020428
 8007190:	40020440 	.word	0x40020440
 8007194:	40020458 	.word	0x40020458
 8007198:	40020470 	.word	0x40020470
 800719c:	40020488 	.word	0x40020488
 80071a0:	400204a0 	.word	0x400204a0
 80071a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	2201      	movs	r2, #1
 80071b8:	409a      	lsls	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a4f      	ldr	r2, [pc, #316]	; (8007300 <HAL_DMA_Abort+0x5dc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d072      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a4d      	ldr	r2, [pc, #308]	; (8007304 <HAL_DMA_Abort+0x5e0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d06d      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a4c      	ldr	r2, [pc, #304]	; (8007308 <HAL_DMA_Abort+0x5e4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d068      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a4a      	ldr	r2, [pc, #296]	; (800730c <HAL_DMA_Abort+0x5e8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d063      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a49      	ldr	r2, [pc, #292]	; (8007310 <HAL_DMA_Abort+0x5ec>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d05e      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a47      	ldr	r2, [pc, #284]	; (8007314 <HAL_DMA_Abort+0x5f0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d059      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a46      	ldr	r2, [pc, #280]	; (8007318 <HAL_DMA_Abort+0x5f4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d054      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a44      	ldr	r2, [pc, #272]	; (800731c <HAL_DMA_Abort+0x5f8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d04f      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a43      	ldr	r2, [pc, #268]	; (8007320 <HAL_DMA_Abort+0x5fc>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d04a      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a41      	ldr	r2, [pc, #260]	; (8007324 <HAL_DMA_Abort+0x600>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d045      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a40      	ldr	r2, [pc, #256]	; (8007328 <HAL_DMA_Abort+0x604>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d040      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a3e      	ldr	r2, [pc, #248]	; (800732c <HAL_DMA_Abort+0x608>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d03b      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a3d      	ldr	r2, [pc, #244]	; (8007330 <HAL_DMA_Abort+0x60c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d036      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a3b      	ldr	r2, [pc, #236]	; (8007334 <HAL_DMA_Abort+0x610>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d031      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a3a      	ldr	r2, [pc, #232]	; (8007338 <HAL_DMA_Abort+0x614>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d02c      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a38      	ldr	r2, [pc, #224]	; (800733c <HAL_DMA_Abort+0x618>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d027      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a37      	ldr	r2, [pc, #220]	; (8007340 <HAL_DMA_Abort+0x61c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d022      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a35      	ldr	r2, [pc, #212]	; (8007344 <HAL_DMA_Abort+0x620>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01d      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a34      	ldr	r2, [pc, #208]	; (8007348 <HAL_DMA_Abort+0x624>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d018      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a32      	ldr	r2, [pc, #200]	; (800734c <HAL_DMA_Abort+0x628>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a31      	ldr	r2, [pc, #196]	; (8007350 <HAL_DMA_Abort+0x62c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00e      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a2f      	ldr	r2, [pc, #188]	; (8007354 <HAL_DMA_Abort+0x630>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d009      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a2e      	ldr	r2, [pc, #184]	; (8007358 <HAL_DMA_Abort+0x634>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d004      	beq.n	80072ae <HAL_DMA_Abort+0x58a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a2c      	ldr	r2, [pc, #176]	; (800735c <HAL_DMA_Abort+0x638>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d101      	bne.n	80072b2 <HAL_DMA_Abort+0x58e>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <HAL_DMA_Abort+0x590>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d015      	beq.n	80072e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00c      	beq.n	80072e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	40020010 	.word	0x40020010
 8007304:	40020028 	.word	0x40020028
 8007308:	40020040 	.word	0x40020040
 800730c:	40020058 	.word	0x40020058
 8007310:	40020070 	.word	0x40020070
 8007314:	40020088 	.word	0x40020088
 8007318:	400200a0 	.word	0x400200a0
 800731c:	400200b8 	.word	0x400200b8
 8007320:	40020410 	.word	0x40020410
 8007324:	40020428 	.word	0x40020428
 8007328:	40020440 	.word	0x40020440
 800732c:	40020458 	.word	0x40020458
 8007330:	40020470 	.word	0x40020470
 8007334:	40020488 	.word	0x40020488
 8007338:	400204a0 	.word	0x400204a0
 800733c:	400204b8 	.word	0x400204b8
 8007340:	58025408 	.word	0x58025408
 8007344:	5802541c 	.word	0x5802541c
 8007348:	58025430 	.word	0x58025430
 800734c:	58025444 	.word	0x58025444
 8007350:	58025458 	.word	0x58025458
 8007354:	5802546c 	.word	0x5802546c
 8007358:	58025480 	.word	0x58025480
 800735c:	58025494 	.word	0x58025494

08007360 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e237      	b.n	80077e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d004      	beq.n	8007388 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2280      	movs	r2, #128	; 0x80
 8007382:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e22c      	b.n	80077e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a5c      	ldr	r2, [pc, #368]	; (8007500 <HAL_DMA_Abort_IT+0x1a0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d04a      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a5b      	ldr	r2, [pc, #364]	; (8007504 <HAL_DMA_Abort_IT+0x1a4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d045      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a59      	ldr	r2, [pc, #356]	; (8007508 <HAL_DMA_Abort_IT+0x1a8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d040      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a58      	ldr	r2, [pc, #352]	; (800750c <HAL_DMA_Abort_IT+0x1ac>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d03b      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a56      	ldr	r2, [pc, #344]	; (8007510 <HAL_DMA_Abort_IT+0x1b0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d036      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a55      	ldr	r2, [pc, #340]	; (8007514 <HAL_DMA_Abort_IT+0x1b4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d031      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a53      	ldr	r2, [pc, #332]	; (8007518 <HAL_DMA_Abort_IT+0x1b8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d02c      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a52      	ldr	r2, [pc, #328]	; (800751c <HAL_DMA_Abort_IT+0x1bc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d027      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a50      	ldr	r2, [pc, #320]	; (8007520 <HAL_DMA_Abort_IT+0x1c0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d022      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a4f      	ldr	r2, [pc, #316]	; (8007524 <HAL_DMA_Abort_IT+0x1c4>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d01d      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a4d      	ldr	r2, [pc, #308]	; (8007528 <HAL_DMA_Abort_IT+0x1c8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d018      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a4c      	ldr	r2, [pc, #304]	; (800752c <HAL_DMA_Abort_IT+0x1cc>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d013      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a4a      	ldr	r2, [pc, #296]	; (8007530 <HAL_DMA_Abort_IT+0x1d0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00e      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a49      	ldr	r2, [pc, #292]	; (8007534 <HAL_DMA_Abort_IT+0x1d4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d009      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a47      	ldr	r2, [pc, #284]	; (8007538 <HAL_DMA_Abort_IT+0x1d8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d004      	beq.n	8007428 <HAL_DMA_Abort_IT+0xc8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a46      	ldr	r2, [pc, #280]	; (800753c <HAL_DMA_Abort_IT+0x1dc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d101      	bne.n	800742c <HAL_DMA_Abort_IT+0xcc>
 8007428:	2301      	movs	r3, #1
 800742a:	e000      	b.n	800742e <HAL_DMA_Abort_IT+0xce>
 800742c:	2300      	movs	r3, #0
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8086 	beq.w	8007540 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a2f      	ldr	r2, [pc, #188]	; (8007500 <HAL_DMA_Abort_IT+0x1a0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d04a      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2e      	ldr	r2, [pc, #184]	; (8007504 <HAL_DMA_Abort_IT+0x1a4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d045      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2c      	ldr	r2, [pc, #176]	; (8007508 <HAL_DMA_Abort_IT+0x1a8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d040      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a2b      	ldr	r2, [pc, #172]	; (800750c <HAL_DMA_Abort_IT+0x1ac>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d03b      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a29      	ldr	r2, [pc, #164]	; (8007510 <HAL_DMA_Abort_IT+0x1b0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d036      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a28      	ldr	r2, [pc, #160]	; (8007514 <HAL_DMA_Abort_IT+0x1b4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d031      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a26      	ldr	r2, [pc, #152]	; (8007518 <HAL_DMA_Abort_IT+0x1b8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02c      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a25      	ldr	r2, [pc, #148]	; (800751c <HAL_DMA_Abort_IT+0x1bc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d027      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a23      	ldr	r2, [pc, #140]	; (8007520 <HAL_DMA_Abort_IT+0x1c0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d022      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a22      	ldr	r2, [pc, #136]	; (8007524 <HAL_DMA_Abort_IT+0x1c4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d01d      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a20      	ldr	r2, [pc, #128]	; (8007528 <HAL_DMA_Abort_IT+0x1c8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d018      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1f      	ldr	r2, [pc, #124]	; (800752c <HAL_DMA_Abort_IT+0x1cc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d013      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <HAL_DMA_Abort_IT+0x1d0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <HAL_DMA_Abort_IT+0x1d4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <HAL_DMA_Abort_IT+0x1d8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <HAL_DMA_Abort_IT+0x17c>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <HAL_DMA_Abort_IT+0x1dc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d108      	bne.n	80074ee <HAL_DMA_Abort_IT+0x18e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0201 	bic.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	e178      	b.n	80077e0 <HAL_DMA_Abort_IT+0x480>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0201 	bic.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	e16f      	b.n	80077e0 <HAL_DMA_Abort_IT+0x480>
 8007500:	40020010 	.word	0x40020010
 8007504:	40020028 	.word	0x40020028
 8007508:	40020040 	.word	0x40020040
 800750c:	40020058 	.word	0x40020058
 8007510:	40020070 	.word	0x40020070
 8007514:	40020088 	.word	0x40020088
 8007518:	400200a0 	.word	0x400200a0
 800751c:	400200b8 	.word	0x400200b8
 8007520:	40020410 	.word	0x40020410
 8007524:	40020428 	.word	0x40020428
 8007528:	40020440 	.word	0x40020440
 800752c:	40020458 	.word	0x40020458
 8007530:	40020470 	.word	0x40020470
 8007534:	40020488 	.word	0x40020488
 8007538:	400204a0 	.word	0x400204a0
 800753c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 020e 	bic.w	r2, r2, #14
 800754e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a6c      	ldr	r2, [pc, #432]	; (8007708 <HAL_DMA_Abort_IT+0x3a8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d04a      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a6b      	ldr	r2, [pc, #428]	; (800770c <HAL_DMA_Abort_IT+0x3ac>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d045      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a69      	ldr	r2, [pc, #420]	; (8007710 <HAL_DMA_Abort_IT+0x3b0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d040      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a68      	ldr	r2, [pc, #416]	; (8007714 <HAL_DMA_Abort_IT+0x3b4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d03b      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a66      	ldr	r2, [pc, #408]	; (8007718 <HAL_DMA_Abort_IT+0x3b8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d036      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a65      	ldr	r2, [pc, #404]	; (800771c <HAL_DMA_Abort_IT+0x3bc>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d031      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a63      	ldr	r2, [pc, #396]	; (8007720 <HAL_DMA_Abort_IT+0x3c0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d02c      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a62      	ldr	r2, [pc, #392]	; (8007724 <HAL_DMA_Abort_IT+0x3c4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d027      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a60      	ldr	r2, [pc, #384]	; (8007728 <HAL_DMA_Abort_IT+0x3c8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d022      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a5f      	ldr	r2, [pc, #380]	; (800772c <HAL_DMA_Abort_IT+0x3cc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d01d      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a5d      	ldr	r2, [pc, #372]	; (8007730 <HAL_DMA_Abort_IT+0x3d0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d018      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a5c      	ldr	r2, [pc, #368]	; (8007734 <HAL_DMA_Abort_IT+0x3d4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d013      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a5a      	ldr	r2, [pc, #360]	; (8007738 <HAL_DMA_Abort_IT+0x3d8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00e      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a59      	ldr	r2, [pc, #356]	; (800773c <HAL_DMA_Abort_IT+0x3dc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d009      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a57      	ldr	r2, [pc, #348]	; (8007740 <HAL_DMA_Abort_IT+0x3e0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x290>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a56      	ldr	r2, [pc, #344]	; (8007744 <HAL_DMA_Abort_IT+0x3e4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d108      	bne.n	8007602 <HAL_DMA_Abort_IT+0x2a2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e007      	b.n	8007612 <HAL_DMA_Abort_IT+0x2b2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a3c      	ldr	r2, [pc, #240]	; (8007708 <HAL_DMA_Abort_IT+0x3a8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d072      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a3a      	ldr	r2, [pc, #232]	; (800770c <HAL_DMA_Abort_IT+0x3ac>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d06d      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a39      	ldr	r2, [pc, #228]	; (8007710 <HAL_DMA_Abort_IT+0x3b0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d068      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a37      	ldr	r2, [pc, #220]	; (8007714 <HAL_DMA_Abort_IT+0x3b4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d063      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a36      	ldr	r2, [pc, #216]	; (8007718 <HAL_DMA_Abort_IT+0x3b8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d05e      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a34      	ldr	r2, [pc, #208]	; (800771c <HAL_DMA_Abort_IT+0x3bc>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d059      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a33      	ldr	r2, [pc, #204]	; (8007720 <HAL_DMA_Abort_IT+0x3c0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d054      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a31      	ldr	r2, [pc, #196]	; (8007724 <HAL_DMA_Abort_IT+0x3c4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d04f      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a30      	ldr	r2, [pc, #192]	; (8007728 <HAL_DMA_Abort_IT+0x3c8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d04a      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a2e      	ldr	r2, [pc, #184]	; (800772c <HAL_DMA_Abort_IT+0x3cc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d045      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a2d      	ldr	r2, [pc, #180]	; (8007730 <HAL_DMA_Abort_IT+0x3d0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d040      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2b      	ldr	r2, [pc, #172]	; (8007734 <HAL_DMA_Abort_IT+0x3d4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d03b      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a2a      	ldr	r2, [pc, #168]	; (8007738 <HAL_DMA_Abort_IT+0x3d8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d036      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a28      	ldr	r2, [pc, #160]	; (800773c <HAL_DMA_Abort_IT+0x3dc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d031      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a27      	ldr	r2, [pc, #156]	; (8007740 <HAL_DMA_Abort_IT+0x3e0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d02c      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a25      	ldr	r2, [pc, #148]	; (8007744 <HAL_DMA_Abort_IT+0x3e4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d027      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a24      	ldr	r2, [pc, #144]	; (8007748 <HAL_DMA_Abort_IT+0x3e8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d022      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a22      	ldr	r2, [pc, #136]	; (800774c <HAL_DMA_Abort_IT+0x3ec>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01d      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a21      	ldr	r2, [pc, #132]	; (8007750 <HAL_DMA_Abort_IT+0x3f0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d018      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <HAL_DMA_Abort_IT+0x3f4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1e      	ldr	r2, [pc, #120]	; (8007758 <HAL_DMA_Abort_IT+0x3f8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00e      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1c      	ldr	r2, [pc, #112]	; (800775c <HAL_DMA_Abort_IT+0x3fc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d009      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <HAL_DMA_Abort_IT+0x400>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_DMA_Abort_IT+0x3a2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a19      	ldr	r2, [pc, #100]	; (8007764 <HAL_DMA_Abort_IT+0x404>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d132      	bne.n	8007768 <HAL_DMA_Abort_IT+0x408>
 8007702:	2301      	movs	r3, #1
 8007704:	e031      	b.n	800776a <HAL_DMA_Abort_IT+0x40a>
 8007706:	bf00      	nop
 8007708:	40020010 	.word	0x40020010
 800770c:	40020028 	.word	0x40020028
 8007710:	40020040 	.word	0x40020040
 8007714:	40020058 	.word	0x40020058
 8007718:	40020070 	.word	0x40020070
 800771c:	40020088 	.word	0x40020088
 8007720:	400200a0 	.word	0x400200a0
 8007724:	400200b8 	.word	0x400200b8
 8007728:	40020410 	.word	0x40020410
 800772c:	40020428 	.word	0x40020428
 8007730:	40020440 	.word	0x40020440
 8007734:	40020458 	.word	0x40020458
 8007738:	40020470 	.word	0x40020470
 800773c:	40020488 	.word	0x40020488
 8007740:	400204a0 	.word	0x400204a0
 8007744:	400204b8 	.word	0x400204b8
 8007748:	58025408 	.word	0x58025408
 800774c:	5802541c 	.word	0x5802541c
 8007750:	58025430 	.word	0x58025430
 8007754:	58025444 	.word	0x58025444
 8007758:	58025458 	.word	0x58025458
 800775c:	5802546c 	.word	0x5802546c
 8007760:	58025480 	.word	0x58025480
 8007764:	58025494 	.word	0x58025494
 8007768:	2300      	movs	r3, #0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d028      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800777c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007782:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007788:	f003 031f 	and.w	r3, r3, #31
 800778c:	2201      	movs	r2, #1
 800778e:	409a      	lsls	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800779c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00c      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop

080077ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80077f8:	4b67      	ldr	r3, [pc, #412]	; (8007998 <HAL_DMA_IRQHandler+0x1ac>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a67      	ldr	r2, [pc, #412]	; (800799c <HAL_DMA_IRQHandler+0x1b0>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	0a9b      	lsrs	r3, r3, #10
 8007804:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007810:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a5f      	ldr	r2, [pc, #380]	; (80079a0 <HAL_DMA_IRQHandler+0x1b4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d04a      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a5d      	ldr	r2, [pc, #372]	; (80079a4 <HAL_DMA_IRQHandler+0x1b8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d045      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a5c      	ldr	r2, [pc, #368]	; (80079a8 <HAL_DMA_IRQHandler+0x1bc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d040      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a5a      	ldr	r2, [pc, #360]	; (80079ac <HAL_DMA_IRQHandler+0x1c0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d03b      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a59      	ldr	r2, [pc, #356]	; (80079b0 <HAL_DMA_IRQHandler+0x1c4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d036      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a57      	ldr	r2, [pc, #348]	; (80079b4 <HAL_DMA_IRQHandler+0x1c8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d031      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a56      	ldr	r2, [pc, #344]	; (80079b8 <HAL_DMA_IRQHandler+0x1cc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d02c      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a54      	ldr	r2, [pc, #336]	; (80079bc <HAL_DMA_IRQHandler+0x1d0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d027      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a53      	ldr	r2, [pc, #332]	; (80079c0 <HAL_DMA_IRQHandler+0x1d4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d022      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a51      	ldr	r2, [pc, #324]	; (80079c4 <HAL_DMA_IRQHandler+0x1d8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d01d      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a50      	ldr	r2, [pc, #320]	; (80079c8 <HAL_DMA_IRQHandler+0x1dc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d018      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a4e      	ldr	r2, [pc, #312]	; (80079cc <HAL_DMA_IRQHandler+0x1e0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a4d      	ldr	r2, [pc, #308]	; (80079d0 <HAL_DMA_IRQHandler+0x1e4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a4b      	ldr	r2, [pc, #300]	; (80079d4 <HAL_DMA_IRQHandler+0x1e8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a4a      	ldr	r2, [pc, #296]	; (80079d8 <HAL_DMA_IRQHandler+0x1ec>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_DMA_IRQHandler+0xd2>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a48      	ldr	r2, [pc, #288]	; (80079dc <HAL_DMA_IRQHandler+0x1f0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d101      	bne.n	80078c2 <HAL_DMA_IRQHandler+0xd6>
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <HAL_DMA_IRQHandler+0xd8>
 80078c2:	2300      	movs	r3, #0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 842b 	beq.w	8008120 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ce:	f003 031f 	and.w	r3, r3, #31
 80078d2:	2208      	movs	r2, #8
 80078d4:	409a      	lsls	r2, r3
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	4013      	ands	r3, r2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80a2 	beq.w	8007a24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a2e      	ldr	r2, [pc, #184]	; (80079a0 <HAL_DMA_IRQHandler+0x1b4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d04a      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a2d      	ldr	r2, [pc, #180]	; (80079a4 <HAL_DMA_IRQHandler+0x1b8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d045      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a2b      	ldr	r2, [pc, #172]	; (80079a8 <HAL_DMA_IRQHandler+0x1bc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d040      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a2a      	ldr	r2, [pc, #168]	; (80079ac <HAL_DMA_IRQHandler+0x1c0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d03b      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a28      	ldr	r2, [pc, #160]	; (80079b0 <HAL_DMA_IRQHandler+0x1c4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d036      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a27      	ldr	r2, [pc, #156]	; (80079b4 <HAL_DMA_IRQHandler+0x1c8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d031      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a25      	ldr	r2, [pc, #148]	; (80079b8 <HAL_DMA_IRQHandler+0x1cc>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d02c      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a24      	ldr	r2, [pc, #144]	; (80079bc <HAL_DMA_IRQHandler+0x1d0>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d027      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a22      	ldr	r2, [pc, #136]	; (80079c0 <HAL_DMA_IRQHandler+0x1d4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d022      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a21      	ldr	r2, [pc, #132]	; (80079c4 <HAL_DMA_IRQHandler+0x1d8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d01d      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <HAL_DMA_IRQHandler+0x1dc>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d018      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <HAL_DMA_IRQHandler+0x1e0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d013      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <HAL_DMA_IRQHandler+0x1e4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00e      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <HAL_DMA_IRQHandler+0x1e8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d009      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a19      	ldr	r2, [pc, #100]	; (80079d8 <HAL_DMA_IRQHandler+0x1ec>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <HAL_DMA_IRQHandler+0x194>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a18      	ldr	r2, [pc, #96]	; (80079dc <HAL_DMA_IRQHandler+0x1f0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d12f      	bne.n	80079e0 <HAL_DMA_IRQHandler+0x1f4>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	bf14      	ite	ne
 800798e:	2301      	movne	r3, #1
 8007990:	2300      	moveq	r3, #0
 8007992:	b2db      	uxtb	r3, r3
 8007994:	e02e      	b.n	80079f4 <HAL_DMA_IRQHandler+0x208>
 8007996:	bf00      	nop
 8007998:	24000090 	.word	0x24000090
 800799c:	1b4e81b5 	.word	0x1b4e81b5
 80079a0:	40020010 	.word	0x40020010
 80079a4:	40020028 	.word	0x40020028
 80079a8:	40020040 	.word	0x40020040
 80079ac:	40020058 	.word	0x40020058
 80079b0:	40020070 	.word	0x40020070
 80079b4:	40020088 	.word	0x40020088
 80079b8:	400200a0 	.word	0x400200a0
 80079bc:	400200b8 	.word	0x400200b8
 80079c0:	40020410 	.word	0x40020410
 80079c4:	40020428 	.word	0x40020428
 80079c8:	40020440 	.word	0x40020440
 80079cc:	40020458 	.word	0x40020458
 80079d0:	40020470 	.word	0x40020470
 80079d4:	40020488 	.word	0x40020488
 80079d8:	400204a0 	.word	0x400204a0
 80079dc:	400204b8 	.word	0x400204b8
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0308 	and.w	r3, r3, #8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d015      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0204 	bic.w	r2, r2, #4
 8007a06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	2208      	movs	r2, #8
 8007a12:	409a      	lsls	r2, r3
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	f043 0201 	orr.w	r2, r3, #1
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d06e      	beq.n	8007b18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a69      	ldr	r2, [pc, #420]	; (8007be4 <HAL_DMA_IRQHandler+0x3f8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d04a      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a67      	ldr	r2, [pc, #412]	; (8007be8 <HAL_DMA_IRQHandler+0x3fc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d045      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a66      	ldr	r2, [pc, #408]	; (8007bec <HAL_DMA_IRQHandler+0x400>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d040      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a64      	ldr	r2, [pc, #400]	; (8007bf0 <HAL_DMA_IRQHandler+0x404>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d03b      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a63      	ldr	r2, [pc, #396]	; (8007bf4 <HAL_DMA_IRQHandler+0x408>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d036      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a61      	ldr	r2, [pc, #388]	; (8007bf8 <HAL_DMA_IRQHandler+0x40c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d031      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a60      	ldr	r2, [pc, #384]	; (8007bfc <HAL_DMA_IRQHandler+0x410>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d02c      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a5e      	ldr	r2, [pc, #376]	; (8007c00 <HAL_DMA_IRQHandler+0x414>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d027      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a5d      	ldr	r2, [pc, #372]	; (8007c04 <HAL_DMA_IRQHandler+0x418>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d022      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a5b      	ldr	r2, [pc, #364]	; (8007c08 <HAL_DMA_IRQHandler+0x41c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01d      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a5a      	ldr	r2, [pc, #360]	; (8007c0c <HAL_DMA_IRQHandler+0x420>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d018      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a58      	ldr	r2, [pc, #352]	; (8007c10 <HAL_DMA_IRQHandler+0x424>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a57      	ldr	r2, [pc, #348]	; (8007c14 <HAL_DMA_IRQHandler+0x428>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a55      	ldr	r2, [pc, #340]	; (8007c18 <HAL_DMA_IRQHandler+0x42c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a54      	ldr	r2, [pc, #336]	; (8007c1c <HAL_DMA_IRQHandler+0x430>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_DMA_IRQHandler+0x2ee>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a52      	ldr	r2, [pc, #328]	; (8007c20 <HAL_DMA_IRQHandler+0x434>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d10a      	bne.n	8007af0 <HAL_DMA_IRQHandler+0x304>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bf14      	ite	ne
 8007ae8:	2301      	movne	r3, #1
 8007aea:	2300      	moveq	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	e003      	b.n	8007af8 <HAL_DMA_IRQHandler+0x30c>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2300      	movs	r3, #0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00d      	beq.n	8007b18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2201      	movs	r2, #1
 8007b06:	409a      	lsls	r2, r3
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b10:	f043 0202 	orr.w	r2, r3, #2
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	2204      	movs	r2, #4
 8007b22:	409a      	lsls	r2, r3
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	4013      	ands	r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 808f 	beq.w	8007c4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a2c      	ldr	r2, [pc, #176]	; (8007be4 <HAL_DMA_IRQHandler+0x3f8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d04a      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a2a      	ldr	r2, [pc, #168]	; (8007be8 <HAL_DMA_IRQHandler+0x3fc>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d045      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a29      	ldr	r2, [pc, #164]	; (8007bec <HAL_DMA_IRQHandler+0x400>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d040      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a27      	ldr	r2, [pc, #156]	; (8007bf0 <HAL_DMA_IRQHandler+0x404>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d03b      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <HAL_DMA_IRQHandler+0x408>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d036      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a24      	ldr	r2, [pc, #144]	; (8007bf8 <HAL_DMA_IRQHandler+0x40c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d031      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a23      	ldr	r2, [pc, #140]	; (8007bfc <HAL_DMA_IRQHandler+0x410>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d02c      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a21      	ldr	r2, [pc, #132]	; (8007c00 <HAL_DMA_IRQHandler+0x414>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d027      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a20      	ldr	r2, [pc, #128]	; (8007c04 <HAL_DMA_IRQHandler+0x418>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d022      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1e      	ldr	r2, [pc, #120]	; (8007c08 <HAL_DMA_IRQHandler+0x41c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d01d      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1d      	ldr	r2, [pc, #116]	; (8007c0c <HAL_DMA_IRQHandler+0x420>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d018      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <HAL_DMA_IRQHandler+0x424>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1a      	ldr	r2, [pc, #104]	; (8007c14 <HAL_DMA_IRQHandler+0x428>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00e      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <HAL_DMA_IRQHandler+0x42c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d009      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a17      	ldr	r2, [pc, #92]	; (8007c1c <HAL_DMA_IRQHandler+0x430>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d004      	beq.n	8007bce <HAL_DMA_IRQHandler+0x3e2>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <HAL_DMA_IRQHandler+0x434>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d12a      	bne.n	8007c24 <HAL_DMA_IRQHandler+0x438>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bf14      	ite	ne
 8007bdc:	2301      	movne	r3, #1
 8007bde:	2300      	moveq	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	e023      	b.n	8007c2c <HAL_DMA_IRQHandler+0x440>
 8007be4:	40020010 	.word	0x40020010
 8007be8:	40020028 	.word	0x40020028
 8007bec:	40020040 	.word	0x40020040
 8007bf0:	40020058 	.word	0x40020058
 8007bf4:	40020070 	.word	0x40020070
 8007bf8:	40020088 	.word	0x40020088
 8007bfc:	400200a0 	.word	0x400200a0
 8007c00:	400200b8 	.word	0x400200b8
 8007c04:	40020410 	.word	0x40020410
 8007c08:	40020428 	.word	0x40020428
 8007c0c:	40020440 	.word	0x40020440
 8007c10:	40020458 	.word	0x40020458
 8007c14:	40020470 	.word	0x40020470
 8007c18:	40020488 	.word	0x40020488
 8007c1c:	400204a0 	.word	0x400204a0
 8007c20:	400204b8 	.word	0x400204b8
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00d      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	f003 031f 	and.w	r3, r3, #31
 8007c38:	2204      	movs	r2, #4
 8007c3a:	409a      	lsls	r2, r3
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c44:	f043 0204 	orr.w	r2, r3, #4
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2210      	movs	r2, #16
 8007c56:	409a      	lsls	r2, r3
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 80a6 	beq.w	8007dae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a85      	ldr	r2, [pc, #532]	; (8007e7c <HAL_DMA_IRQHandler+0x690>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d04a      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a83      	ldr	r2, [pc, #524]	; (8007e80 <HAL_DMA_IRQHandler+0x694>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d045      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a82      	ldr	r2, [pc, #520]	; (8007e84 <HAL_DMA_IRQHandler+0x698>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d040      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a80      	ldr	r2, [pc, #512]	; (8007e88 <HAL_DMA_IRQHandler+0x69c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d03b      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a7f      	ldr	r2, [pc, #508]	; (8007e8c <HAL_DMA_IRQHandler+0x6a0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d036      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a7d      	ldr	r2, [pc, #500]	; (8007e90 <HAL_DMA_IRQHandler+0x6a4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d031      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a7c      	ldr	r2, [pc, #496]	; (8007e94 <HAL_DMA_IRQHandler+0x6a8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d02c      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a7a      	ldr	r2, [pc, #488]	; (8007e98 <HAL_DMA_IRQHandler+0x6ac>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d027      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a79      	ldr	r2, [pc, #484]	; (8007e9c <HAL_DMA_IRQHandler+0x6b0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d022      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a77      	ldr	r2, [pc, #476]	; (8007ea0 <HAL_DMA_IRQHandler+0x6b4>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01d      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a76      	ldr	r2, [pc, #472]	; (8007ea4 <HAL_DMA_IRQHandler+0x6b8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d018      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a74      	ldr	r2, [pc, #464]	; (8007ea8 <HAL_DMA_IRQHandler+0x6bc>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a73      	ldr	r2, [pc, #460]	; (8007eac <HAL_DMA_IRQHandler+0x6c0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00e      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a71      	ldr	r2, [pc, #452]	; (8007eb0 <HAL_DMA_IRQHandler+0x6c4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a70      	ldr	r2, [pc, #448]	; (8007eb4 <HAL_DMA_IRQHandler+0x6c8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x516>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a6e      	ldr	r2, [pc, #440]	; (8007eb8 <HAL_DMA_IRQHandler+0x6cc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d10a      	bne.n	8007d18 <HAL_DMA_IRQHandler+0x52c>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	bf14      	ite	ne
 8007d10:	2301      	movne	r3, #1
 8007d12:	2300      	moveq	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	e009      	b.n	8007d2c <HAL_DMA_IRQHandler+0x540>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bf14      	ite	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	2300      	moveq	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d03e      	beq.n	8007dae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d34:	f003 031f 	and.w	r3, r3, #31
 8007d38:	2210      	movs	r2, #16
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d018      	beq.n	8007d80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d108      	bne.n	8007d6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d024      	beq.n	8007dae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
 8007d6c:	e01f      	b.n	8007dae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d01b      	beq.n	8007dae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
 8007d7e:	e016      	b.n	8007dae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d107      	bne.n	8007d9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0208 	bic.w	r2, r2, #8
 8007d9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2220      	movs	r2, #32
 8007db8:	409a      	lsls	r2, r3
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 8110 	beq.w	8007fe4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a2c      	ldr	r2, [pc, #176]	; (8007e7c <HAL_DMA_IRQHandler+0x690>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d04a      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a2b      	ldr	r2, [pc, #172]	; (8007e80 <HAL_DMA_IRQHandler+0x694>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d045      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a29      	ldr	r2, [pc, #164]	; (8007e84 <HAL_DMA_IRQHandler+0x698>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d040      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a28      	ldr	r2, [pc, #160]	; (8007e88 <HAL_DMA_IRQHandler+0x69c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d03b      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a26      	ldr	r2, [pc, #152]	; (8007e8c <HAL_DMA_IRQHandler+0x6a0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d036      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a25      	ldr	r2, [pc, #148]	; (8007e90 <HAL_DMA_IRQHandler+0x6a4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d031      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a23      	ldr	r2, [pc, #140]	; (8007e94 <HAL_DMA_IRQHandler+0x6a8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d02c      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a22      	ldr	r2, [pc, #136]	; (8007e98 <HAL_DMA_IRQHandler+0x6ac>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d027      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a20      	ldr	r2, [pc, #128]	; (8007e9c <HAL_DMA_IRQHandler+0x6b0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d022      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <HAL_DMA_IRQHandler+0x6b4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d01d      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ea4 <HAL_DMA_IRQHandler+0x6b8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d018      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1c      	ldr	r2, [pc, #112]	; (8007ea8 <HAL_DMA_IRQHandler+0x6bc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d013      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1a      	ldr	r2, [pc, #104]	; (8007eac <HAL_DMA_IRQHandler+0x6c0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00e      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <HAL_DMA_IRQHandler+0x6c4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d009      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a17      	ldr	r2, [pc, #92]	; (8007eb4 <HAL_DMA_IRQHandler+0x6c8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d004      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x678>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <HAL_DMA_IRQHandler+0x6cc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d12b      	bne.n	8007ebc <HAL_DMA_IRQHandler+0x6d0>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0310 	and.w	r3, r3, #16
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bf14      	ite	ne
 8007e72:	2301      	movne	r3, #1
 8007e74:	2300      	moveq	r3, #0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	e02a      	b.n	8007ed0 <HAL_DMA_IRQHandler+0x6e4>
 8007e7a:	bf00      	nop
 8007e7c:	40020010 	.word	0x40020010
 8007e80:	40020028 	.word	0x40020028
 8007e84:	40020040 	.word	0x40020040
 8007e88:	40020058 	.word	0x40020058
 8007e8c:	40020070 	.word	0x40020070
 8007e90:	40020088 	.word	0x40020088
 8007e94:	400200a0 	.word	0x400200a0
 8007e98:	400200b8 	.word	0x400200b8
 8007e9c:	40020410 	.word	0x40020410
 8007ea0:	40020428 	.word	0x40020428
 8007ea4:	40020440 	.word	0x40020440
 8007ea8:	40020458 	.word	0x40020458
 8007eac:	40020470 	.word	0x40020470
 8007eb0:	40020488 	.word	0x40020488
 8007eb4:	400204a0 	.word	0x400204a0
 8007eb8:	400204b8 	.word	0x400204b8
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bf14      	ite	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	2300      	moveq	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 8087 	beq.w	8007fe4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	2220      	movs	r2, #32
 8007ee0:	409a      	lsls	r2, r3
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d139      	bne.n	8007f66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0216 	bic.w	r2, r2, #22
 8007f00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695a      	ldr	r2, [r3, #20]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <HAL_DMA_IRQHandler+0x736>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0208 	bic.w	r2, r2, #8
 8007f30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f36:	f003 031f 	and.w	r3, r3, #31
 8007f3a:	223f      	movs	r2, #63	; 0x3f
 8007f3c:	409a      	lsls	r2, r3
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 834a 	beq.w	80085f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
          }
          return;
 8007f64:	e344      	b.n	80085f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d018      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d108      	bne.n	8007f94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d02c      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4798      	blx	r3
 8007f92:	e027      	b.n	8007fe4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d023      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
 8007fa4:	e01e      	b.n	8007fe4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10f      	bne.n	8007fd4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0210 	bic.w	r2, r2, #16
 8007fc2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8306 	beq.w	80085fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 8088 	beq.w	800810c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2204      	movs	r2, #4
 8008000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a7a      	ldr	r2, [pc, #488]	; (80081f4 <HAL_DMA_IRQHandler+0xa08>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d04a      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a79      	ldr	r2, [pc, #484]	; (80081f8 <HAL_DMA_IRQHandler+0xa0c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d045      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a77      	ldr	r2, [pc, #476]	; (80081fc <HAL_DMA_IRQHandler+0xa10>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d040      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a76      	ldr	r2, [pc, #472]	; (8008200 <HAL_DMA_IRQHandler+0xa14>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d03b      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a74      	ldr	r2, [pc, #464]	; (8008204 <HAL_DMA_IRQHandler+0xa18>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d036      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a73      	ldr	r2, [pc, #460]	; (8008208 <HAL_DMA_IRQHandler+0xa1c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d031      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a71      	ldr	r2, [pc, #452]	; (800820c <HAL_DMA_IRQHandler+0xa20>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d02c      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a70      	ldr	r2, [pc, #448]	; (8008210 <HAL_DMA_IRQHandler+0xa24>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d027      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a6e      	ldr	r2, [pc, #440]	; (8008214 <HAL_DMA_IRQHandler+0xa28>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d022      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a6d      	ldr	r2, [pc, #436]	; (8008218 <HAL_DMA_IRQHandler+0xa2c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d01d      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a6b      	ldr	r2, [pc, #428]	; (800821c <HAL_DMA_IRQHandler+0xa30>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d018      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a6a      	ldr	r2, [pc, #424]	; (8008220 <HAL_DMA_IRQHandler+0xa34>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d013      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a68      	ldr	r2, [pc, #416]	; (8008224 <HAL_DMA_IRQHandler+0xa38>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d00e      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a67      	ldr	r2, [pc, #412]	; (8008228 <HAL_DMA_IRQHandler+0xa3c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d009      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a65      	ldr	r2, [pc, #404]	; (800822c <HAL_DMA_IRQHandler+0xa40>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d004      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x8b8>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a64      	ldr	r2, [pc, #400]	; (8008230 <HAL_DMA_IRQHandler+0xa44>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d108      	bne.n	80080b6 <HAL_DMA_IRQHandler+0x8ca>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e007      	b.n	80080c6 <HAL_DMA_IRQHandler+0x8da>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0201 	bic.w	r2, r2, #1
 80080c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d307      	bcc.n	80080e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f2      	bne.n	80080c6 <HAL_DMA_IRQHandler+0x8da>
 80080e0:	e000      	b.n	80080e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80080e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2203      	movs	r2, #3
 80080f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80080fa:	e003      	b.n	8008104 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 8272 	beq.w	80085fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
 800811e:	e26c      	b.n	80085fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a43      	ldr	r2, [pc, #268]	; (8008234 <HAL_DMA_IRQHandler+0xa48>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d022      	beq.n	8008170 <HAL_DMA_IRQHandler+0x984>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a42      	ldr	r2, [pc, #264]	; (8008238 <HAL_DMA_IRQHandler+0xa4c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d01d      	beq.n	8008170 <HAL_DMA_IRQHandler+0x984>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a40      	ldr	r2, [pc, #256]	; (800823c <HAL_DMA_IRQHandler+0xa50>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d018      	beq.n	8008170 <HAL_DMA_IRQHandler+0x984>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a3f      	ldr	r2, [pc, #252]	; (8008240 <HAL_DMA_IRQHandler+0xa54>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d013      	beq.n	8008170 <HAL_DMA_IRQHandler+0x984>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a3d      	ldr	r2, [pc, #244]	; (8008244 <HAL_DMA_IRQHandler+0xa58>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00e      	beq.n	8008170 <HAL_DMA_IRQHandler+0x984>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a3c      	ldr	r2, [pc, #240]	; (8008248 <HAL_DMA_IRQHandler+0xa5c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d009      	beq.n	8008170 <HAL_DMA_IRQHandler+0x984>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a3a      	ldr	r2, [pc, #232]	; (800824c <HAL_DMA_IRQHandler+0xa60>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d004      	beq.n	8008170 <HAL_DMA_IRQHandler+0x984>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a39      	ldr	r2, [pc, #228]	; (8008250 <HAL_DMA_IRQHandler+0xa64>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d101      	bne.n	8008174 <HAL_DMA_IRQHandler+0x988>
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <HAL_DMA_IRQHandler+0x98a>
 8008174:	2300      	movs	r3, #0
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 823f 	beq.w	80085fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008188:	f003 031f 	and.w	r3, r3, #31
 800818c:	2204      	movs	r2, #4
 800818e:	409a      	lsls	r2, r3
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	4013      	ands	r3, r2
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 80cd 	beq.w	8008334 <HAL_DMA_IRQHandler+0xb48>
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 80c7 	beq.w	8008334 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081aa:	f003 031f 	and.w	r3, r3, #31
 80081ae:	2204      	movs	r2, #4
 80081b0:	409a      	lsls	r2, r3
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d049      	beq.n	8008254 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 8210 	beq.w	80085f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081dc:	e20a      	b.n	80085f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 8206 	beq.w	80085f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081f0:	e200      	b.n	80085f4 <HAL_DMA_IRQHandler+0xe08>
 80081f2:	bf00      	nop
 80081f4:	40020010 	.word	0x40020010
 80081f8:	40020028 	.word	0x40020028
 80081fc:	40020040 	.word	0x40020040
 8008200:	40020058 	.word	0x40020058
 8008204:	40020070 	.word	0x40020070
 8008208:	40020088 	.word	0x40020088
 800820c:	400200a0 	.word	0x400200a0
 8008210:	400200b8 	.word	0x400200b8
 8008214:	40020410 	.word	0x40020410
 8008218:	40020428 	.word	0x40020428
 800821c:	40020440 	.word	0x40020440
 8008220:	40020458 	.word	0x40020458
 8008224:	40020470 	.word	0x40020470
 8008228:	40020488 	.word	0x40020488
 800822c:	400204a0 	.word	0x400204a0
 8008230:	400204b8 	.word	0x400204b8
 8008234:	58025408 	.word	0x58025408
 8008238:	5802541c 	.word	0x5802541c
 800823c:	58025430 	.word	0x58025430
 8008240:	58025444 	.word	0x58025444
 8008244:	58025458 	.word	0x58025458
 8008248:	5802546c 	.word	0x5802546c
 800824c:	58025480 	.word	0x58025480
 8008250:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d160      	bne.n	8008320 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a7f      	ldr	r2, [pc, #508]	; (8008460 <HAL_DMA_IRQHandler+0xc74>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d04a      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a7d      	ldr	r2, [pc, #500]	; (8008464 <HAL_DMA_IRQHandler+0xc78>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d045      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a7c      	ldr	r2, [pc, #496]	; (8008468 <HAL_DMA_IRQHandler+0xc7c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d040      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a7a      	ldr	r2, [pc, #488]	; (800846c <HAL_DMA_IRQHandler+0xc80>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d03b      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a79      	ldr	r2, [pc, #484]	; (8008470 <HAL_DMA_IRQHandler+0xc84>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d036      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a77      	ldr	r2, [pc, #476]	; (8008474 <HAL_DMA_IRQHandler+0xc88>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d031      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a76      	ldr	r2, [pc, #472]	; (8008478 <HAL_DMA_IRQHandler+0xc8c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d02c      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a74      	ldr	r2, [pc, #464]	; (800847c <HAL_DMA_IRQHandler+0xc90>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d027      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a73      	ldr	r2, [pc, #460]	; (8008480 <HAL_DMA_IRQHandler+0xc94>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d022      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a71      	ldr	r2, [pc, #452]	; (8008484 <HAL_DMA_IRQHandler+0xc98>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d01d      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a70      	ldr	r2, [pc, #448]	; (8008488 <HAL_DMA_IRQHandler+0xc9c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d018      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a6e      	ldr	r2, [pc, #440]	; (800848c <HAL_DMA_IRQHandler+0xca0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a6d      	ldr	r2, [pc, #436]	; (8008490 <HAL_DMA_IRQHandler+0xca4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00e      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a6b      	ldr	r2, [pc, #428]	; (8008494 <HAL_DMA_IRQHandler+0xca8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d009      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a6a      	ldr	r2, [pc, #424]	; (8008498 <HAL_DMA_IRQHandler+0xcac>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_DMA_IRQHandler+0xb12>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a68      	ldr	r2, [pc, #416]	; (800849c <HAL_DMA_IRQHandler+0xcb0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d108      	bne.n	8008310 <HAL_DMA_IRQHandler+0xb24>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0208 	bic.w	r2, r2, #8
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e007      	b.n	8008320 <HAL_DMA_IRQHandler+0xb34>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f022 0204 	bic.w	r2, r2, #4
 800831e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8165 	beq.w	80085f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008332:	e15f      	b.n	80085f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008338:	f003 031f 	and.w	r3, r3, #31
 800833c:	2202      	movs	r2, #2
 800833e:	409a      	lsls	r2, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	4013      	ands	r3, r2
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 80c5 	beq.w	80084d4 <HAL_DMA_IRQHandler+0xce8>
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80bf 	beq.w	80084d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835a:	f003 031f 	and.w	r3, r3, #31
 800835e:	2202      	movs	r2, #2
 8008360:	409a      	lsls	r2, r3
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d018      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d109      	bne.n	800838e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 813a 	beq.w	80085f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800838c:	e134      	b.n	80085f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8130 	beq.w	80085f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083a0:	e12a      	b.n	80085f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f040 8089 	bne.w	80084c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a2b      	ldr	r2, [pc, #172]	; (8008460 <HAL_DMA_IRQHandler+0xc74>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d04a      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a29      	ldr	r2, [pc, #164]	; (8008464 <HAL_DMA_IRQHandler+0xc78>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d045      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a28      	ldr	r2, [pc, #160]	; (8008468 <HAL_DMA_IRQHandler+0xc7c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d040      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a26      	ldr	r2, [pc, #152]	; (800846c <HAL_DMA_IRQHandler+0xc80>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d03b      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a25      	ldr	r2, [pc, #148]	; (8008470 <HAL_DMA_IRQHandler+0xc84>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d036      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a23      	ldr	r2, [pc, #140]	; (8008474 <HAL_DMA_IRQHandler+0xc88>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d031      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a22      	ldr	r2, [pc, #136]	; (8008478 <HAL_DMA_IRQHandler+0xc8c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d02c      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a20      	ldr	r2, [pc, #128]	; (800847c <HAL_DMA_IRQHandler+0xc90>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d027      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <HAL_DMA_IRQHandler+0xc94>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d022      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <HAL_DMA_IRQHandler+0xc98>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01d      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1c      	ldr	r2, [pc, #112]	; (8008488 <HAL_DMA_IRQHandler+0xc9c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d018      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1a      	ldr	r2, [pc, #104]	; (800848c <HAL_DMA_IRQHandler+0xca0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d013      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a19      	ldr	r2, [pc, #100]	; (8008490 <HAL_DMA_IRQHandler+0xca4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00e      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a17      	ldr	r2, [pc, #92]	; (8008494 <HAL_DMA_IRQHandler+0xca8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d009      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a16      	ldr	r2, [pc, #88]	; (8008498 <HAL_DMA_IRQHandler+0xcac>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d004      	beq.n	800844e <HAL_DMA_IRQHandler+0xc62>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a14      	ldr	r2, [pc, #80]	; (800849c <HAL_DMA_IRQHandler+0xcb0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d128      	bne.n	80084a0 <HAL_DMA_IRQHandler+0xcb4>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0214 	bic.w	r2, r2, #20
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	e027      	b.n	80084b0 <HAL_DMA_IRQHandler+0xcc4>
 8008460:	40020010 	.word	0x40020010
 8008464:	40020028 	.word	0x40020028
 8008468:	40020040 	.word	0x40020040
 800846c:	40020058 	.word	0x40020058
 8008470:	40020070 	.word	0x40020070
 8008474:	40020088 	.word	0x40020088
 8008478:	400200a0 	.word	0x400200a0
 800847c:	400200b8 	.word	0x400200b8
 8008480:	40020410 	.word	0x40020410
 8008484:	40020428 	.word	0x40020428
 8008488:	40020440 	.word	0x40020440
 800848c:	40020458 	.word	0x40020458
 8008490:	40020470 	.word	0x40020470
 8008494:	40020488 	.word	0x40020488
 8008498:	400204a0 	.word	0x400204a0
 800849c:	400204b8 	.word	0x400204b8
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 020a 	bic.w	r2, r2, #10
 80084ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 8097 	beq.w	80085f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084d2:	e091      	b.n	80085f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	2208      	movs	r2, #8
 80084de:	409a      	lsls	r2, r3
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	4013      	ands	r3, r2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 8088 	beq.w	80085fa <HAL_DMA_IRQHandler+0xe0e>
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 8082 	beq.w	80085fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a41      	ldr	r2, [pc, #260]	; (8008600 <HAL_DMA_IRQHandler+0xe14>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d04a      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a3f      	ldr	r2, [pc, #252]	; (8008604 <HAL_DMA_IRQHandler+0xe18>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d045      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a3e      	ldr	r2, [pc, #248]	; (8008608 <HAL_DMA_IRQHandler+0xe1c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d040      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a3c      	ldr	r2, [pc, #240]	; (800860c <HAL_DMA_IRQHandler+0xe20>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d03b      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a3b      	ldr	r2, [pc, #236]	; (8008610 <HAL_DMA_IRQHandler+0xe24>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d036      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a39      	ldr	r2, [pc, #228]	; (8008614 <HAL_DMA_IRQHandler+0xe28>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d031      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a38      	ldr	r2, [pc, #224]	; (8008618 <HAL_DMA_IRQHandler+0xe2c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d02c      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a36      	ldr	r2, [pc, #216]	; (800861c <HAL_DMA_IRQHandler+0xe30>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d027      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a35      	ldr	r2, [pc, #212]	; (8008620 <HAL_DMA_IRQHandler+0xe34>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d022      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a33      	ldr	r2, [pc, #204]	; (8008624 <HAL_DMA_IRQHandler+0xe38>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01d      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a32      	ldr	r2, [pc, #200]	; (8008628 <HAL_DMA_IRQHandler+0xe3c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d018      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a30      	ldr	r2, [pc, #192]	; (800862c <HAL_DMA_IRQHandler+0xe40>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a2f      	ldr	r2, [pc, #188]	; (8008630 <HAL_DMA_IRQHandler+0xe44>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00e      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a2d      	ldr	r2, [pc, #180]	; (8008634 <HAL_DMA_IRQHandler+0xe48>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d009      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a2c      	ldr	r2, [pc, #176]	; (8008638 <HAL_DMA_IRQHandler+0xe4c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d004      	beq.n	8008596 <HAL_DMA_IRQHandler+0xdaa>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a2a      	ldr	r2, [pc, #168]	; (800863c <HAL_DMA_IRQHandler+0xe50>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d108      	bne.n	80085a8 <HAL_DMA_IRQHandler+0xdbc>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 021c 	bic.w	r2, r2, #28
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e007      	b.n	80085b8 <HAL_DMA_IRQHandler+0xdcc>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 020e 	bic.w	r2, r2, #14
 80085b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	2201      	movs	r2, #1
 80085c2:	409a      	lsls	r2, r3
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
 80085ee:	e004      	b.n	80085fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80085f0:	bf00      	nop
 80085f2:	e002      	b.n	80085fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085f4:	bf00      	nop
 80085f6:	e000      	b.n	80085fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80085fa:	3728      	adds	r7, #40	; 0x28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40020010 	.word	0x40020010
 8008604:	40020028 	.word	0x40020028
 8008608:	40020040 	.word	0x40020040
 800860c:	40020058 	.word	0x40020058
 8008610:	40020070 	.word	0x40020070
 8008614:	40020088 	.word	0x40020088
 8008618:	400200a0 	.word	0x400200a0
 800861c:	400200b8 	.word	0x400200b8
 8008620:	40020410 	.word	0x40020410
 8008624:	40020428 	.word	0x40020428
 8008628:	40020440 	.word	0x40020440
 800862c:	40020458 	.word	0x40020458
 8008630:	40020470 	.word	0x40020470
 8008634:	40020488 	.word	0x40020488
 8008638:	400204a0 	.word	0x400204a0
 800863c:	400204b8 	.word	0x400204b8

08008640 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008670:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a7f      	ldr	r2, [pc, #508]	; (8008874 <DMA_SetConfig+0x21c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d072      	beq.n	8008762 <DMA_SetConfig+0x10a>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a7d      	ldr	r2, [pc, #500]	; (8008878 <DMA_SetConfig+0x220>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d06d      	beq.n	8008762 <DMA_SetConfig+0x10a>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a7c      	ldr	r2, [pc, #496]	; (800887c <DMA_SetConfig+0x224>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d068      	beq.n	8008762 <DMA_SetConfig+0x10a>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a7a      	ldr	r2, [pc, #488]	; (8008880 <DMA_SetConfig+0x228>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d063      	beq.n	8008762 <DMA_SetConfig+0x10a>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a79      	ldr	r2, [pc, #484]	; (8008884 <DMA_SetConfig+0x22c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d05e      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a77      	ldr	r2, [pc, #476]	; (8008888 <DMA_SetConfig+0x230>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d059      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a76      	ldr	r2, [pc, #472]	; (800888c <DMA_SetConfig+0x234>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d054      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a74      	ldr	r2, [pc, #464]	; (8008890 <DMA_SetConfig+0x238>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d04f      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a73      	ldr	r2, [pc, #460]	; (8008894 <DMA_SetConfig+0x23c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d04a      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a71      	ldr	r2, [pc, #452]	; (8008898 <DMA_SetConfig+0x240>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d045      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a70      	ldr	r2, [pc, #448]	; (800889c <DMA_SetConfig+0x244>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d040      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a6e      	ldr	r2, [pc, #440]	; (80088a0 <DMA_SetConfig+0x248>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d03b      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a6d      	ldr	r2, [pc, #436]	; (80088a4 <DMA_SetConfig+0x24c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d036      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a6b      	ldr	r2, [pc, #428]	; (80088a8 <DMA_SetConfig+0x250>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d031      	beq.n	8008762 <DMA_SetConfig+0x10a>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a6a      	ldr	r2, [pc, #424]	; (80088ac <DMA_SetConfig+0x254>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d02c      	beq.n	8008762 <DMA_SetConfig+0x10a>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a68      	ldr	r2, [pc, #416]	; (80088b0 <DMA_SetConfig+0x258>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d027      	beq.n	8008762 <DMA_SetConfig+0x10a>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a67      	ldr	r2, [pc, #412]	; (80088b4 <DMA_SetConfig+0x25c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d022      	beq.n	8008762 <DMA_SetConfig+0x10a>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a65      	ldr	r2, [pc, #404]	; (80088b8 <DMA_SetConfig+0x260>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d01d      	beq.n	8008762 <DMA_SetConfig+0x10a>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a64      	ldr	r2, [pc, #400]	; (80088bc <DMA_SetConfig+0x264>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d018      	beq.n	8008762 <DMA_SetConfig+0x10a>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a62      	ldr	r2, [pc, #392]	; (80088c0 <DMA_SetConfig+0x268>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d013      	beq.n	8008762 <DMA_SetConfig+0x10a>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a61      	ldr	r2, [pc, #388]	; (80088c4 <DMA_SetConfig+0x26c>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d00e      	beq.n	8008762 <DMA_SetConfig+0x10a>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a5f      	ldr	r2, [pc, #380]	; (80088c8 <DMA_SetConfig+0x270>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d009      	beq.n	8008762 <DMA_SetConfig+0x10a>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a5e      	ldr	r2, [pc, #376]	; (80088cc <DMA_SetConfig+0x274>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d004      	beq.n	8008762 <DMA_SetConfig+0x10a>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a5c      	ldr	r2, [pc, #368]	; (80088d0 <DMA_SetConfig+0x278>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d101      	bne.n	8008766 <DMA_SetConfig+0x10e>
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <DMA_SetConfig+0x110>
 8008766:	2300      	movs	r3, #0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00d      	beq.n	8008788 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008774:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008786:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a39      	ldr	r2, [pc, #228]	; (8008874 <DMA_SetConfig+0x21c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d04a      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a38      	ldr	r2, [pc, #224]	; (8008878 <DMA_SetConfig+0x220>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d045      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a36      	ldr	r2, [pc, #216]	; (800887c <DMA_SetConfig+0x224>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d040      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a35      	ldr	r2, [pc, #212]	; (8008880 <DMA_SetConfig+0x228>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d03b      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a33      	ldr	r2, [pc, #204]	; (8008884 <DMA_SetConfig+0x22c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d036      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a32      	ldr	r2, [pc, #200]	; (8008888 <DMA_SetConfig+0x230>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d031      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a30      	ldr	r2, [pc, #192]	; (800888c <DMA_SetConfig+0x234>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d02c      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a2f      	ldr	r2, [pc, #188]	; (8008890 <DMA_SetConfig+0x238>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d027      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a2d      	ldr	r2, [pc, #180]	; (8008894 <DMA_SetConfig+0x23c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d022      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a2c      	ldr	r2, [pc, #176]	; (8008898 <DMA_SetConfig+0x240>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d01d      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a2a      	ldr	r2, [pc, #168]	; (800889c <DMA_SetConfig+0x244>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d018      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a29      	ldr	r2, [pc, #164]	; (80088a0 <DMA_SetConfig+0x248>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d013      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a27      	ldr	r2, [pc, #156]	; (80088a4 <DMA_SetConfig+0x24c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00e      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <DMA_SetConfig+0x250>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d009      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a24      	ldr	r2, [pc, #144]	; (80088ac <DMA_SetConfig+0x254>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d004      	beq.n	8008828 <DMA_SetConfig+0x1d0>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a23      	ldr	r2, [pc, #140]	; (80088b0 <DMA_SetConfig+0x258>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d101      	bne.n	800882c <DMA_SetConfig+0x1d4>
 8008828:	2301      	movs	r3, #1
 800882a:	e000      	b.n	800882e <DMA_SetConfig+0x1d6>
 800882c:	2300      	movs	r3, #0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d059      	beq.n	80088e6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	223f      	movs	r2, #63	; 0x3f
 800883c:	409a      	lsls	r2, r3
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008850:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d138      	bne.n	80088d4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008872:	e086      	b.n	8008982 <DMA_SetConfig+0x32a>
 8008874:	40020010 	.word	0x40020010
 8008878:	40020028 	.word	0x40020028
 800887c:	40020040 	.word	0x40020040
 8008880:	40020058 	.word	0x40020058
 8008884:	40020070 	.word	0x40020070
 8008888:	40020088 	.word	0x40020088
 800888c:	400200a0 	.word	0x400200a0
 8008890:	400200b8 	.word	0x400200b8
 8008894:	40020410 	.word	0x40020410
 8008898:	40020428 	.word	0x40020428
 800889c:	40020440 	.word	0x40020440
 80088a0:	40020458 	.word	0x40020458
 80088a4:	40020470 	.word	0x40020470
 80088a8:	40020488 	.word	0x40020488
 80088ac:	400204a0 	.word	0x400204a0
 80088b0:	400204b8 	.word	0x400204b8
 80088b4:	58025408 	.word	0x58025408
 80088b8:	5802541c 	.word	0x5802541c
 80088bc:	58025430 	.word	0x58025430
 80088c0:	58025444 	.word	0x58025444
 80088c4:	58025458 	.word	0x58025458
 80088c8:	5802546c 	.word	0x5802546c
 80088cc:	58025480 	.word	0x58025480
 80088d0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	60da      	str	r2, [r3, #12]
}
 80088e4:	e04d      	b.n	8008982 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a29      	ldr	r2, [pc, #164]	; (8008990 <DMA_SetConfig+0x338>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d022      	beq.n	8008936 <DMA_SetConfig+0x2de>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a27      	ldr	r2, [pc, #156]	; (8008994 <DMA_SetConfig+0x33c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01d      	beq.n	8008936 <DMA_SetConfig+0x2de>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a26      	ldr	r2, [pc, #152]	; (8008998 <DMA_SetConfig+0x340>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d018      	beq.n	8008936 <DMA_SetConfig+0x2de>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a24      	ldr	r2, [pc, #144]	; (800899c <DMA_SetConfig+0x344>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d013      	beq.n	8008936 <DMA_SetConfig+0x2de>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a23      	ldr	r2, [pc, #140]	; (80089a0 <DMA_SetConfig+0x348>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00e      	beq.n	8008936 <DMA_SetConfig+0x2de>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a21      	ldr	r2, [pc, #132]	; (80089a4 <DMA_SetConfig+0x34c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d009      	beq.n	8008936 <DMA_SetConfig+0x2de>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a20      	ldr	r2, [pc, #128]	; (80089a8 <DMA_SetConfig+0x350>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d004      	beq.n	8008936 <DMA_SetConfig+0x2de>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a1e      	ldr	r2, [pc, #120]	; (80089ac <DMA_SetConfig+0x354>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d101      	bne.n	800893a <DMA_SetConfig+0x2e2>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <DMA_SetConfig+0x2e4>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d020      	beq.n	8008982 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008944:	f003 031f 	and.w	r3, r3, #31
 8008948:	2201      	movs	r2, #1
 800894a:	409a      	lsls	r2, r3
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	2b40      	cmp	r3, #64	; 0x40
 800895e:	d108      	bne.n	8008972 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	60da      	str	r2, [r3, #12]
}
 8008970:	e007      	b.n	8008982 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	60da      	str	r2, [r3, #12]
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	58025408 	.word	0x58025408
 8008994:	5802541c 	.word	0x5802541c
 8008998:	58025430 	.word	0x58025430
 800899c:	58025444 	.word	0x58025444
 80089a0:	58025458 	.word	0x58025458
 80089a4:	5802546c 	.word	0x5802546c
 80089a8:	58025480 	.word	0x58025480
 80089ac:	58025494 	.word	0x58025494

080089b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a42      	ldr	r2, [pc, #264]	; (8008ac8 <DMA_CalcBaseAndBitshift+0x118>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d04a      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a41      	ldr	r2, [pc, #260]	; (8008acc <DMA_CalcBaseAndBitshift+0x11c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d045      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a3f      	ldr	r2, [pc, #252]	; (8008ad0 <DMA_CalcBaseAndBitshift+0x120>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d040      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a3e      	ldr	r2, [pc, #248]	; (8008ad4 <DMA_CalcBaseAndBitshift+0x124>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d03b      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a3c      	ldr	r2, [pc, #240]	; (8008ad8 <DMA_CalcBaseAndBitshift+0x128>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d036      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a3b      	ldr	r2, [pc, #236]	; (8008adc <DMA_CalcBaseAndBitshift+0x12c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d031      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a39      	ldr	r2, [pc, #228]	; (8008ae0 <DMA_CalcBaseAndBitshift+0x130>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d02c      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a38      	ldr	r2, [pc, #224]	; (8008ae4 <DMA_CalcBaseAndBitshift+0x134>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d027      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a36      	ldr	r2, [pc, #216]	; (8008ae8 <DMA_CalcBaseAndBitshift+0x138>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d022      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a35      	ldr	r2, [pc, #212]	; (8008aec <DMA_CalcBaseAndBitshift+0x13c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d01d      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a33      	ldr	r2, [pc, #204]	; (8008af0 <DMA_CalcBaseAndBitshift+0x140>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d018      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a32      	ldr	r2, [pc, #200]	; (8008af4 <DMA_CalcBaseAndBitshift+0x144>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d013      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a30      	ldr	r2, [pc, #192]	; (8008af8 <DMA_CalcBaseAndBitshift+0x148>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00e      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a2f      	ldr	r2, [pc, #188]	; (8008afc <DMA_CalcBaseAndBitshift+0x14c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d009      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a2d      	ldr	r2, [pc, #180]	; (8008b00 <DMA_CalcBaseAndBitshift+0x150>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d004      	beq.n	8008a58 <DMA_CalcBaseAndBitshift+0xa8>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a2c      	ldr	r2, [pc, #176]	; (8008b04 <DMA_CalcBaseAndBitshift+0x154>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d101      	bne.n	8008a5c <DMA_CalcBaseAndBitshift+0xac>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <DMA_CalcBaseAndBitshift+0xae>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d024      	beq.n	8008aac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	3b10      	subs	r3, #16
 8008a6a:	4a27      	ldr	r2, [pc, #156]	; (8008b08 <DMA_CalcBaseAndBitshift+0x158>)
 8008a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a70:	091b      	lsrs	r3, r3, #4
 8008a72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	4a24      	ldr	r2, [pc, #144]	; (8008b0c <DMA_CalcBaseAndBitshift+0x15c>)
 8008a7c:	5cd3      	ldrb	r3, [r2, r3]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d908      	bls.n	8008a9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4b1f      	ldr	r3, [pc, #124]	; (8008b10 <DMA_CalcBaseAndBitshift+0x160>)
 8008a92:	4013      	ands	r3, r2
 8008a94:	1d1a      	adds	r2, r3, #4
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	659a      	str	r2, [r3, #88]	; 0x58
 8008a9a:	e00d      	b.n	8008ab8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <DMA_CalcBaseAndBitshift+0x160>)
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8008aaa:	e005      	b.n	8008ab8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	40020010 	.word	0x40020010
 8008acc:	40020028 	.word	0x40020028
 8008ad0:	40020040 	.word	0x40020040
 8008ad4:	40020058 	.word	0x40020058
 8008ad8:	40020070 	.word	0x40020070
 8008adc:	40020088 	.word	0x40020088
 8008ae0:	400200a0 	.word	0x400200a0
 8008ae4:	400200b8 	.word	0x400200b8
 8008ae8:	40020410 	.word	0x40020410
 8008aec:	40020428 	.word	0x40020428
 8008af0:	40020440 	.word	0x40020440
 8008af4:	40020458 	.word	0x40020458
 8008af8:	40020470 	.word	0x40020470
 8008afc:	40020488 	.word	0x40020488
 8008b00:	400204a0 	.word	0x400204a0
 8008b04:	400204b8 	.word	0x400204b8
 8008b08:	aaaaaaab 	.word	0xaaaaaaab
 8008b0c:	08017830 	.word	0x08017830
 8008b10:	fffffc00 	.word	0xfffffc00

08008b14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d120      	bne.n	8008b6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d858      	bhi.n	8008be2 <DMA_CheckFifoParam+0xce>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <DMA_CheckFifoParam+0x24>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b5b 	.word	0x08008b5b
 8008b40:	08008b49 	.word	0x08008b49
 8008b44:	08008be3 	.word	0x08008be3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d048      	beq.n	8008be6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b58:	e045      	b.n	8008be6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b62:	d142      	bne.n	8008bea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b68:	e03f      	b.n	8008bea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b72:	d123      	bne.n	8008bbc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d838      	bhi.n	8008bee <DMA_CheckFifoParam+0xda>
 8008b7c:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <DMA_CheckFifoParam+0x70>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008b9b 	.word	0x08008b9b
 8008b8c:	08008b95 	.word	0x08008b95
 8008b90:	08008bad 	.word	0x08008bad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	73fb      	strb	r3, [r7, #15]
        break;
 8008b98:	e030      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d025      	beq.n	8008bf2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008baa:	e022      	b.n	8008bf2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bb4:	d11f      	bne.n	8008bf6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008bba:	e01c      	b.n	8008bf6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d902      	bls.n	8008bca <DMA_CheckFifoParam+0xb6>
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d003      	beq.n	8008bd0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008bc8:	e018      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8008bce:	e015      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00e      	beq.n	8008bfa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
    break;
 8008be0:	e00b      	b.n	8008bfa <DMA_CheckFifoParam+0xe6>
        break;
 8008be2:	bf00      	nop
 8008be4:	e00a      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>
        break;
 8008be6:	bf00      	nop
 8008be8:	e008      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>
        break;
 8008bea:	bf00      	nop
 8008bec:	e006      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>
        break;
 8008bee:	bf00      	nop
 8008bf0:	e004      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>
        break;
 8008bf2:	bf00      	nop
 8008bf4:	e002      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>
        break;
 8008bf6:	bf00      	nop
 8008bf8:	e000      	b.n	8008bfc <DMA_CheckFifoParam+0xe8>
    break;
 8008bfa:	bf00      	nop
    }
  }

  return status;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop

08008c0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a38      	ldr	r2, [pc, #224]	; (8008d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d022      	beq.n	8008c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a36      	ldr	r2, [pc, #216]	; (8008d04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d01d      	beq.n	8008c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a35      	ldr	r2, [pc, #212]	; (8008d08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d018      	beq.n	8008c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a33      	ldr	r2, [pc, #204]	; (8008d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a32      	ldr	r2, [pc, #200]	; (8008d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00e      	beq.n	8008c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a30      	ldr	r2, [pc, #192]	; (8008d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d009      	beq.n	8008c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a2f      	ldr	r2, [pc, #188]	; (8008d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d004      	beq.n	8008c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a2d      	ldr	r2, [pc, #180]	; (8008d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d101      	bne.n	8008c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01a      	beq.n	8008caa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	3b08      	subs	r3, #8
 8008c7c:	4a28      	ldr	r2, [pc, #160]	; (8008d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c82:	091b      	lsrs	r3, r3, #4
 8008c84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	4b26      	ldr	r3, [pc, #152]	; (8008d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a24      	ldr	r2, [pc, #144]	; (8008d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008c98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	409a      	lsls	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008ca8:	e024      	b.n	8008cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	3b10      	subs	r3, #16
 8008cb2:	4a1e      	ldr	r2, [pc, #120]	; (8008d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb8:	091b      	lsrs	r3, r3, #4
 8008cba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4a1c      	ldr	r2, [pc, #112]	; (8008d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d806      	bhi.n	8008cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4a1b      	ldr	r2, [pc, #108]	; (8008d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d902      	bls.n	8008cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4b18      	ldr	r3, [pc, #96]	; (8008d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	461a      	mov	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a16      	ldr	r2, [pc, #88]	; (8008d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008ce4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	2201      	movs	r2, #1
 8008cee:	409a      	lsls	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	58025408 	.word	0x58025408
 8008d04:	5802541c 	.word	0x5802541c
 8008d08:	58025430 	.word	0x58025430
 8008d0c:	58025444 	.word	0x58025444
 8008d10:	58025458 	.word	0x58025458
 8008d14:	5802546c 	.word	0x5802546c
 8008d18:	58025480 	.word	0x58025480
 8008d1c:	58025494 	.word	0x58025494
 8008d20:	cccccccd 	.word	0xcccccccd
 8008d24:	16009600 	.word	0x16009600
 8008d28:	58025880 	.word	0x58025880
 8008d2c:	aaaaaaab 	.word	0xaaaaaaab
 8008d30:	400204b8 	.word	0x400204b8
 8008d34:	4002040f 	.word	0x4002040f
 8008d38:	10008200 	.word	0x10008200
 8008d3c:	40020880 	.word	0x40020880

08008d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d04a      	beq.n	8008dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d847      	bhi.n	8008dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a25      	ldr	r2, [pc, #148]	; (8008df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d022      	beq.n	8008dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a24      	ldr	r2, [pc, #144]	; (8008dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d01d      	beq.n	8008dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a22      	ldr	r2, [pc, #136]	; (8008e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d018      	beq.n	8008dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a21      	ldr	r2, [pc, #132]	; (8008e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d013      	beq.n	8008dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1f      	ldr	r2, [pc, #124]	; (8008e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00e      	beq.n	8008dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a1e      	ldr	r2, [pc, #120]	; (8008e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d009      	beq.n	8008dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	; (8008e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d004      	beq.n	8008dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d101      	bne.n	8008db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e000      	b.n	8008db2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008db0:	2300      	movs	r3, #0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a15      	ldr	r2, [pc, #84]	; (8008e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008dc8:	671a      	str	r2, [r3, #112]	; 0x70
 8008dca:	e009      	b.n	8008de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4b14      	ldr	r3, [pc, #80]	; (8008e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a11      	ldr	r2, [pc, #68]	; (8008e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008dde:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	2201      	movs	r2, #1
 8008de6:	409a      	lsls	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008dec:	bf00      	nop
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	58025408 	.word	0x58025408
 8008dfc:	5802541c 	.word	0x5802541c
 8008e00:	58025430 	.word	0x58025430
 8008e04:	58025444 	.word	0x58025444
 8008e08:	58025458 	.word	0x58025458
 8008e0c:	5802546c 	.word	0x5802546c
 8008e10:	58025480 	.word	0x58025480
 8008e14:	58025494 	.word	0x58025494
 8008e18:	1600963f 	.word	0x1600963f
 8008e1c:	58025940 	.word	0x58025940
 8008e20:	1000823f 	.word	0x1000823f
 8008e24:	40020940 	.word	0x40020940

08008e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b089      	sub	sp, #36	; 0x24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e36:	4b89      	ldr	r3, [pc, #548]	; (800905c <HAL_GPIO_Init+0x234>)
 8008e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e3a:	e194      	b.n	8009166 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	2101      	movs	r1, #1
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	fa01 f303 	lsl.w	r3, r1, r3
 8008e48:	4013      	ands	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 8186 	beq.w	8009160 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d005      	beq.n	8008e6c <HAL_GPIO_Init+0x44>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f003 0303 	and.w	r3, r3, #3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d130      	bne.n	8008ece <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	2203      	movs	r2, #3
 8008e78:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	4013      	ands	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eaa:	43db      	mvns	r3, r3
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	091b      	lsrs	r3, r3, #4
 8008eb8:	f003 0201 	and.w	r2, r3, #1
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d017      	beq.n	8008f0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	2203      	movs	r2, #3
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	43db      	mvns	r3, r3
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	fa02 f303 	lsl.w	r3, r2, r3
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d123      	bne.n	8008f5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	08da      	lsrs	r2, r3, #3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3208      	adds	r2, #8
 8008f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	220f      	movs	r2, #15
 8008f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f32:	43db      	mvns	r3, r3
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	4013      	ands	r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	691a      	ldr	r2, [r3, #16]
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	f003 0307 	and.w	r3, r3, #7
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	08da      	lsrs	r2, r3, #3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3208      	adds	r2, #8
 8008f58:	69b9      	ldr	r1, [r7, #24]
 8008f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	2203      	movs	r2, #3
 8008f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6e:	43db      	mvns	r3, r3
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	4013      	ands	r3, r2
 8008f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f003 0203 	and.w	r2, r3, #3
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	fa02 f303 	lsl.w	r3, r2, r3
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80e0 	beq.w	8009160 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fa0:	4b2f      	ldr	r3, [pc, #188]	; (8009060 <HAL_GPIO_Init+0x238>)
 8008fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fa6:	4a2e      	ldr	r2, [pc, #184]	; (8009060 <HAL_GPIO_Init+0x238>)
 8008fa8:	f043 0302 	orr.w	r3, r3, #2
 8008fac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008fb0:	4b2b      	ldr	r3, [pc, #172]	; (8009060 <HAL_GPIO_Init+0x238>)
 8008fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008fbe:	4a29      	ldr	r2, [pc, #164]	; (8009064 <HAL_GPIO_Init+0x23c>)
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	089b      	lsrs	r3, r3, #2
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	220f      	movs	r2, #15
 8008fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fda:	43db      	mvns	r3, r3
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a20      	ldr	r2, [pc, #128]	; (8009068 <HAL_GPIO_Init+0x240>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d052      	beq.n	8009090 <HAL_GPIO_Init+0x268>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a1f      	ldr	r2, [pc, #124]	; (800906c <HAL_GPIO_Init+0x244>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d031      	beq.n	8009056 <HAL_GPIO_Init+0x22e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a1e      	ldr	r2, [pc, #120]	; (8009070 <HAL_GPIO_Init+0x248>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d02b      	beq.n	8009052 <HAL_GPIO_Init+0x22a>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <HAL_GPIO_Init+0x24c>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d025      	beq.n	800904e <HAL_GPIO_Init+0x226>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a1c      	ldr	r2, [pc, #112]	; (8009078 <HAL_GPIO_Init+0x250>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d01f      	beq.n	800904a <HAL_GPIO_Init+0x222>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a1b      	ldr	r2, [pc, #108]	; (800907c <HAL_GPIO_Init+0x254>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d019      	beq.n	8009046 <HAL_GPIO_Init+0x21e>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a1a      	ldr	r2, [pc, #104]	; (8009080 <HAL_GPIO_Init+0x258>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d013      	beq.n	8009042 <HAL_GPIO_Init+0x21a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a19      	ldr	r2, [pc, #100]	; (8009084 <HAL_GPIO_Init+0x25c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d00d      	beq.n	800903e <HAL_GPIO_Init+0x216>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a18      	ldr	r2, [pc, #96]	; (8009088 <HAL_GPIO_Init+0x260>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d007      	beq.n	800903a <HAL_GPIO_Init+0x212>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a17      	ldr	r2, [pc, #92]	; (800908c <HAL_GPIO_Init+0x264>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d101      	bne.n	8009036 <HAL_GPIO_Init+0x20e>
 8009032:	2309      	movs	r3, #9
 8009034:	e02d      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 8009036:	230a      	movs	r3, #10
 8009038:	e02b      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 800903a:	2308      	movs	r3, #8
 800903c:	e029      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 800903e:	2307      	movs	r3, #7
 8009040:	e027      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 8009042:	2306      	movs	r3, #6
 8009044:	e025      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 8009046:	2305      	movs	r3, #5
 8009048:	e023      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 800904a:	2304      	movs	r3, #4
 800904c:	e021      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 800904e:	2303      	movs	r3, #3
 8009050:	e01f      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 8009052:	2302      	movs	r3, #2
 8009054:	e01d      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 8009056:	2301      	movs	r3, #1
 8009058:	e01b      	b.n	8009092 <HAL_GPIO_Init+0x26a>
 800905a:	bf00      	nop
 800905c:	58000080 	.word	0x58000080
 8009060:	58024400 	.word	0x58024400
 8009064:	58000400 	.word	0x58000400
 8009068:	58020000 	.word	0x58020000
 800906c:	58020400 	.word	0x58020400
 8009070:	58020800 	.word	0x58020800
 8009074:	58020c00 	.word	0x58020c00
 8009078:	58021000 	.word	0x58021000
 800907c:	58021400 	.word	0x58021400
 8009080:	58021800 	.word	0x58021800
 8009084:	58021c00 	.word	0x58021c00
 8009088:	58022000 	.word	0x58022000
 800908c:	58022400 	.word	0x58022400
 8009090:	2300      	movs	r3, #0
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	f002 0203 	and.w	r2, r2, #3
 8009098:	0092      	lsls	r2, r2, #2
 800909a:	4093      	lsls	r3, r2
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	4313      	orrs	r3, r2
 80090a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090a2:	4938      	ldr	r1, [pc, #224]	; (8009184 <HAL_GPIO_Init+0x35c>)
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	089b      	lsrs	r3, r3, #2
 80090a8:	3302      	adds	r3, #2
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80090b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	43db      	mvns	r3, r3
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	4013      	ands	r3, r2
 80090c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80090d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80090de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	43db      	mvns	r3, r3
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	4013      	ands	r3, r2
 80090ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	4313      	orrs	r3, r2
 8009102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	43db      	mvns	r3, r3
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	4013      	ands	r3, r2
 800911a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	4313      	orrs	r3, r2
 800912e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	43db      	mvns	r3, r3
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	4013      	ands	r3, r2
 8009144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	4313      	orrs	r3, r2
 8009158:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	3301      	adds	r3, #1
 8009164:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	fa22 f303 	lsr.w	r3, r2, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	f47f ae63 	bne.w	8008e3c <HAL_GPIO_Init+0x14>
  }
}
 8009176:	bf00      	nop
 8009178:	bf00      	nop
 800917a:	3724      	adds	r7, #36	; 0x24
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	58000400 	.word	0x58000400

08009188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	887b      	ldrh	r3, [r7, #2]
 800919a:	4013      	ands	r3, r2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80091a0:	2301      	movs	r3, #1
 80091a2:	73fb      	strb	r3, [r7, #15]
 80091a4:	e001      	b.n	80091aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	807b      	strh	r3, [r7, #2]
 80091c4:	4613      	mov	r3, r2
 80091c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091c8:	787b      	ldrb	r3, [r7, #1]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80091ce:	887a      	ldrh	r2, [r7, #2]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80091d4:	e003      	b.n	80091de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80091d6:	887b      	ldrh	r3, [r7, #2]
 80091d8:	041a      	lsls	r2, r3, #16
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	619a      	str	r2, [r3, #24]
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
	...

080091ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e08b      	b.n	8009316 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fa f8c6 	bl	80033a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2224      	movs	r2, #36	; 0x24
 800921c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0201 	bic.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800923c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800924c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d107      	bne.n	8009266 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689a      	ldr	r2, [r3, #8]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009262:	609a      	str	r2, [r3, #8]
 8009264:	e006      	b.n	8009274 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009272:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d108      	bne.n	800928e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800928a:	605a      	str	r2, [r3, #4]
 800928c:	e007      	b.n	800929e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800929c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6859      	ldr	r1, [r3, #4]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <HAL_I2C_Init+0x134>)
 80092aa:	430b      	orrs	r3, r1
 80092ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	69d9      	ldr	r1, [r3, #28]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1a      	ldr	r2, [r3, #32]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0201 	orr.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	02008000 	.word	0x02008000

08009324 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af02      	add	r7, sp, #8
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	607a      	str	r2, [r7, #4]
 800932e:	461a      	mov	r2, r3
 8009330:	460b      	mov	r3, r1
 8009332:	817b      	strh	r3, [r7, #10]
 8009334:	4613      	mov	r3, r2
 8009336:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b20      	cmp	r3, #32
 8009342:	f040 80fd 	bne.w	8009540 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800934c:	2b01      	cmp	r3, #1
 800934e:	d101      	bne.n	8009354 <HAL_I2C_Master_Transmit+0x30>
 8009350:	2302      	movs	r3, #2
 8009352:	e0f6      	b.n	8009542 <HAL_I2C_Master_Transmit+0x21e>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800935c:	f7fa fdf4 	bl	8003f48 <HAL_GetTick>
 8009360:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	2319      	movs	r3, #25
 8009368:	2201      	movs	r2, #1
 800936a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fa0a 	bl	8009788 <I2C_WaitOnFlagUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e0e1      	b.n	8009542 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2221      	movs	r2, #33	; 0x21
 8009382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2210      	movs	r2, #16
 800938a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	893a      	ldrh	r2, [r7, #8]
 800939e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2bff      	cmp	r3, #255	; 0xff
 80093ae:	d906      	bls.n	80093be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	22ff      	movs	r2, #255	; 0xff
 80093b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80093b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	e007      	b.n	80093ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80093c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d024      	beq.n	8009420 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	781a      	ldrb	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	3b01      	subs	r3, #1
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940a:	b2db      	uxtb	r3, r3
 800940c:	3301      	adds	r3, #1
 800940e:	b2da      	uxtb	r2, r3
 8009410:	8979      	ldrh	r1, [r7, #10]
 8009412:	4b4e      	ldr	r3, [pc, #312]	; (800954c <HAL_I2C_Master_Transmit+0x228>)
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fc05 	bl	8009c28 <I2C_TransferConfig>
 800941e:	e066      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009424:	b2da      	uxtb	r2, r3
 8009426:	8979      	ldrh	r1, [r7, #10]
 8009428:	4b48      	ldr	r3, [pc, #288]	; (800954c <HAL_I2C_Master_Transmit+0x228>)
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fbfa 	bl	8009c28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009434:	e05b      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	6a39      	ldr	r1, [r7, #32]
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f9fd 	bl	800983a <I2C_WaitOnTXISFlagUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e07b      	b.n	8009542 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	781a      	ldrb	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009464:	b29b      	uxth	r3, r3
 8009466:	3b01      	subs	r3, #1
 8009468:	b29a      	uxth	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d034      	beq.n	80094ee <HAL_I2C_Master_Transmit+0x1ca>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009488:	2b00      	cmp	r3, #0
 800948a:	d130      	bne.n	80094ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	2200      	movs	r2, #0
 8009494:	2180      	movs	r1, #128	; 0x80
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 f976 	bl	8009788 <I2C_WaitOnFlagUntilTimeout>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e04d      	b.n	8009542 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2bff      	cmp	r3, #255	; 0xff
 80094ae:	d90e      	bls.n	80094ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	22ff      	movs	r2, #255	; 0xff
 80094b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	8979      	ldrh	r1, [r7, #10]
 80094be:	2300      	movs	r3, #0
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fbae 	bl	8009c28 <I2C_TransferConfig>
 80094cc:	e00f      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	8979      	ldrh	r1, [r7, #10]
 80094e0:	2300      	movs	r3, #0
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 fb9d 	bl	8009c28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d19e      	bne.n	8009436 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	6a39      	ldr	r1, [r7, #32]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f9e3 	bl	80098c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e01a      	b.n	8009542 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2220      	movs	r2, #32
 8009512:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6859      	ldr	r1, [r3, #4]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4b0c      	ldr	r3, [pc, #48]	; (8009550 <HAL_I2C_Master_Transmit+0x22c>)
 8009520:	400b      	ands	r3, r1
 8009522:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	e000      	b.n	8009542 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009540:	2302      	movs	r3, #2
  }
}
 8009542:	4618      	mov	r0, r3
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	80002000 	.word	0x80002000
 8009550:	fe00e800 	.word	0xfe00e800

08009554 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af02      	add	r7, sp, #8
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	461a      	mov	r2, r3
 8009560:	460b      	mov	r3, r1
 8009562:	817b      	strh	r3, [r7, #10]
 8009564:	4613      	mov	r3, r2
 8009566:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b20      	cmp	r3, #32
 8009572:	f040 80db 	bne.w	800972c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800957c:	2b01      	cmp	r3, #1
 800957e:	d101      	bne.n	8009584 <HAL_I2C_Master_Receive+0x30>
 8009580:	2302      	movs	r3, #2
 8009582:	e0d4      	b.n	800972e <HAL_I2C_Master_Receive+0x1da>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800958c:	f7fa fcdc 	bl	8003f48 <HAL_GetTick>
 8009590:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	2319      	movs	r3, #25
 8009598:	2201      	movs	r2, #1
 800959a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 f8f2 	bl	8009788 <I2C_WaitOnFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e0bf      	b.n	800972e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2222      	movs	r2, #34	; 0x22
 80095b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2210      	movs	r2, #16
 80095ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	893a      	ldrh	r2, [r7, #8]
 80095ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095da:	b29b      	uxth	r3, r3
 80095dc:	2bff      	cmp	r3, #255	; 0xff
 80095de:	d90e      	bls.n	80095fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	22ff      	movs	r2, #255	; 0xff
 80095e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	8979      	ldrh	r1, [r7, #10]
 80095ee:	4b52      	ldr	r3, [pc, #328]	; (8009738 <HAL_I2C_Master_Receive+0x1e4>)
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 fb16 	bl	8009c28 <I2C_TransferConfig>
 80095fc:	e06d      	b.n	80096da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009602:	b29a      	uxth	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800960c:	b2da      	uxtb	r2, r3
 800960e:	8979      	ldrh	r1, [r7, #10]
 8009610:	4b49      	ldr	r3, [pc, #292]	; (8009738 <HAL_I2C_Master_Receive+0x1e4>)
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fb05 	bl	8009c28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800961e:	e05c      	b.n	80096da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	6a39      	ldr	r1, [r7, #32]
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 f993 	bl	8009950 <I2C_WaitOnRXNEFlagUntilTimeout>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e07c      	b.n	800972e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	b2d2      	uxtb	r2, r2
 8009640:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800965c:	b29b      	uxth	r3, r3
 800965e:	3b01      	subs	r3, #1
 8009660:	b29a      	uxth	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800966a:	b29b      	uxth	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d034      	beq.n	80096da <HAL_I2C_Master_Receive+0x186>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009674:	2b00      	cmp	r3, #0
 8009676:	d130      	bne.n	80096da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	2200      	movs	r2, #0
 8009680:	2180      	movs	r1, #128	; 0x80
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 f880 	bl	8009788 <I2C_WaitOnFlagUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e04d      	b.n	800972e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009696:	b29b      	uxth	r3, r3
 8009698:	2bff      	cmp	r3, #255	; 0xff
 800969a:	d90e      	bls.n	80096ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	22ff      	movs	r2, #255	; 0xff
 80096a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	8979      	ldrh	r1, [r7, #10]
 80096aa:	2300      	movs	r3, #0
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fab8 	bl	8009c28 <I2C_TransferConfig>
 80096b8:	e00f      	b.n	80096da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096be:	b29a      	uxth	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	8979      	ldrh	r1, [r7, #10]
 80096cc:	2300      	movs	r3, #0
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 faa7 	bl	8009c28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096de:	b29b      	uxth	r3, r3
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d19d      	bne.n	8009620 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	6a39      	ldr	r1, [r7, #32]
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f8ed 	bl	80098c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e01a      	b.n	800972e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2220      	movs	r2, #32
 80096fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6859      	ldr	r1, [r3, #4]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	4b0c      	ldr	r3, [pc, #48]	; (800973c <HAL_I2C_Master_Receive+0x1e8>)
 800970c:	400b      	ands	r3, r1
 800970e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2220      	movs	r2, #32
 8009714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	e000      	b.n	800972e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800972c:	2302      	movs	r3, #2
  }
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	80002400 	.word	0x80002400
 800973c:	fe00e800 	.word	0xfe00e800

08009740 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	f003 0302 	and.w	r3, r3, #2
 8009752:	2b02      	cmp	r3, #2
 8009754:	d103      	bne.n	800975e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2200      	movs	r2, #0
 800975c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b01      	cmp	r3, #1
 800976a:	d007      	beq.n	800977c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699a      	ldr	r2, [r3, #24]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	619a      	str	r2, [r3, #24]
  }
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	4613      	mov	r3, r2
 8009796:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009798:	e03b      	b.n	8009812 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 f962 	bl	8009a68 <I2C_IsErrorOccurred>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e041      	b.n	8009832 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097b4:	d02d      	beq.n	8009812 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097b6:	f7fa fbc7 	bl	8003f48 <HAL_GetTick>
 80097ba:	4602      	mov	r2, r0
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d302      	bcc.n	80097cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d122      	bne.n	8009812 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	699a      	ldr	r2, [r3, #24]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4013      	ands	r3, r2
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	429a      	cmp	r2, r3
 80097da:	bf0c      	ite	eq
 80097dc:	2301      	moveq	r3, #1
 80097de:	2300      	movne	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	461a      	mov	r2, r3
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d113      	bne.n	8009812 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ee:	f043 0220 	orr.w	r2, r3, #32
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e00f      	b.n	8009832 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	699a      	ldr	r2, [r3, #24]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	4013      	ands	r3, r2
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	429a      	cmp	r2, r3
 8009820:	bf0c      	ite	eq
 8009822:	2301      	moveq	r3, #1
 8009824:	2300      	movne	r3, #0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	461a      	mov	r2, r3
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	429a      	cmp	r2, r3
 800982e:	d0b4      	beq.n	800979a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	60b9      	str	r1, [r7, #8]
 8009844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009846:	e033      	b.n	80098b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 f90b 	bl	8009a68 <I2C_IsErrorOccurred>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e031      	b.n	80098c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009862:	d025      	beq.n	80098b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009864:	f7fa fb70 	bl	8003f48 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	429a      	cmp	r2, r3
 8009872:	d302      	bcc.n	800987a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d11a      	bne.n	80098b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b02      	cmp	r3, #2
 8009886:	d013      	beq.n	80098b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988c:	f043 0220 	orr.w	r2, r3, #32
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2220      	movs	r2, #32
 8009898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e007      	b.n	80098c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d1c4      	bne.n	8009848 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098d4:	e02f      	b.n	8009936 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	68b9      	ldr	r1, [r7, #8]
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 f8c4 	bl	8009a68 <I2C_IsErrorOccurred>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e02d      	b.n	8009946 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ea:	f7fa fb2d 	bl	8003f48 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d302      	bcc.n	8009900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d11a      	bne.n	8009936 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b20      	cmp	r3, #32
 800990c:	d013      	beq.n	8009936 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009912:	f043 0220 	orr.w	r2, r3, #32
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2220      	movs	r2, #32
 800991e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e007      	b.n	8009946 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	f003 0320 	and.w	r3, r3, #32
 8009940:	2b20      	cmp	r3, #32
 8009942:	d1c8      	bne.n	80098d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009960:	e071      	b.n	8009a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 f87e 	bl	8009a68 <I2C_IsErrorOccurred>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	f003 0320 	and.w	r3, r3, #32
 8009980:	2b20      	cmp	r3, #32
 8009982:	d13b      	bne.n	80099fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009984:	7dfb      	ldrb	r3, [r7, #23]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d138      	bne.n	80099fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b04      	cmp	r3, #4
 8009996:	d105      	bne.n	80099a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	f003 0310 	and.w	r3, r3, #16
 80099ae:	2b10      	cmp	r3, #16
 80099b0:	d121      	bne.n	80099f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2210      	movs	r2, #16
 80099b8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2204      	movs	r2, #4
 80099be:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2220      	movs	r2, #32
 80099c6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6859      	ldr	r1, [r3, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b24      	ldr	r3, [pc, #144]	; (8009a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80099d4:	400b      	ands	r3, r1
 80099d6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2220      	movs	r2, #32
 80099dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	75fb      	strb	r3, [r7, #23]
 80099f4:	e002      	b.n	80099fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80099fc:	f7fa faa4 	bl	8003f48 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d302      	bcc.n	8009a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d119      	bne.n	8009a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d116      	bne.n	8009a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	f003 0304 	and.w	r3, r3, #4
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d00f      	beq.n	8009a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2a:	f043 0220 	orr.w	r2, r3, #32
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d002      	beq.n	8009a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d083      	beq.n	8009962 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	fe00e800 	.word	0xfe00e800

08009a68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08a      	sub	sp, #40	; 0x28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	f003 0310 	and.w	r3, r3, #16
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d068      	beq.n	8009b66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2210      	movs	r2, #16
 8009a9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a9c:	e049      	b.n	8009b32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aa4:	d045      	beq.n	8009b32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009aa6:	f7fa fa4f 	bl	8003f48 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d302      	bcc.n	8009abc <I2C_IsErrorOccurred+0x54>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d13a      	bne.n	8009b32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ac6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ace:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ade:	d121      	bne.n	8009b24 <I2C_IsErrorOccurred+0xbc>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ae6:	d01d      	beq.n	8009b24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009ae8:	7cfb      	ldrb	r3, [r7, #19]
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d01a      	beq.n	8009b24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009afc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009afe:	f7fa fa23 	bl	8003f48 <HAL_GetTick>
 8009b02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b04:	e00e      	b.n	8009b24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b06:	f7fa fa1f 	bl	8003f48 <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b19      	cmp	r3, #25
 8009b12:	d907      	bls.n	8009b24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	f043 0320 	orr.w	r3, r3, #32
 8009b1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009b22:	e006      	b.n	8009b32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	d1e9      	bne.n	8009b06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d003      	beq.n	8009b48 <I2C_IsErrorOccurred+0xe0>
 8009b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0aa      	beq.n	8009a9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d103      	bne.n	8009b58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2220      	movs	r2, #32
 8009b56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	f043 0304 	orr.w	r3, r3, #4
 8009b5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	f043 0301 	orr.w	r3, r3, #1
 8009b7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	f043 0308 	orr.w	r3, r3, #8
 8009ba0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009baa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00b      	beq.n	8009bd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	f043 0302 	orr.w	r3, r3, #2
 8009bc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01c      	beq.n	8009c16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7ff fdaf 	bl	8009740 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6859      	ldr	r1, [r3, #4]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <I2C_IsErrorOccurred+0x1bc>)
 8009bee:	400b      	ands	r3, r1
 8009bf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2220      	movs	r2, #32
 8009c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3728      	adds	r7, #40	; 0x28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	fe00e800 	.word	0xfe00e800

08009c28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	607b      	str	r3, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	817b      	strh	r3, [r7, #10]
 8009c36:	4613      	mov	r3, r2
 8009c38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c3a:	897b      	ldrh	r3, [r7, #10]
 8009c3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c40:	7a7b      	ldrb	r3, [r7, #9]
 8009c42:	041b      	lsls	r3, r3, #16
 8009c44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	0d5b      	lsrs	r3, r3, #21
 8009c62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c66:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <I2C_TransferConfig+0x60>)
 8009c68:	430b      	orrs	r3, r1
 8009c6a:	43db      	mvns	r3, r3
 8009c6c:	ea02 0103 	and.w	r1, r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c7a:	bf00      	nop
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	03ff63ff 	.word	0x03ff63ff

08009c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d138      	bne.n	8009d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cac:	2302      	movs	r3, #2
 8009cae:	e032      	b.n	8009d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2224      	movs	r2, #36	; 0x24
 8009cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0201 	bic.w	r2, r2, #1
 8009cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6819      	ldr	r1, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	430a      	orrs	r2, r1
 8009cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0201 	orr.w	r2, r2, #1
 8009cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	e000      	b.n	8009d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d14:	2302      	movs	r3, #2
  }
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d139      	bne.n	8009dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e033      	b.n	8009dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2224      	movs	r2, #36	; 0x24
 8009d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f022 0201 	bic.w	r2, r2, #1
 8009d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	021b      	lsls	r3, r3, #8
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0201 	orr.w	r2, r2, #1
 8009d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	e000      	b.n	8009dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009dac:	2302      	movs	r3, #2
  }
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3714      	adds	r7, #20
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
	...

08009dbc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dc4:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dca:	4a0c      	ldr	r2, [pc, #48]	; (8009dfc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009dcc:	f043 0302 	orr.w	r3, r3, #2
 8009dd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009dd4:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009de2:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	4906      	ldr	r1, [pc, #24]	; (8009e00 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	604b      	str	r3, [r1, #4]
}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	58024400 	.word	0x58024400
 8009e00:	58000400 	.word	0x58000400

08009e04 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009e10:	4b18      	ldr	r3, [pc, #96]	; (8009e74 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f023 0201 	bic.w	r2, r3, #1
 8009e18:	4916      	ldr	r1, [pc, #88]	; (8009e74 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009e20:	4b14      	ldr	r3, [pc, #80]	; (8009e74 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	4a13      	ldr	r2, [pc, #76]	; (8009e74 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e26:	f023 0305 	bic.w	r3, r3, #5
 8009e2a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009e2c:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	4a10      	ldr	r2, [pc, #64]	; (8009e74 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e32:	f023 0302 	bic.w	r3, r3, #2
 8009e36:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009e38:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <HAL_PWR_EnterSTOPMode+0x74>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	4a0e      	ldr	r2, [pc, #56]	; (8009e78 <HAL_PWR_EnterSTOPMode+0x74>)
 8009e3e:	f043 0304 	orr.w	r3, r3, #4
 8009e42:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009e44:	f3bf 8f4f 	dsb	sy
}
 8009e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009e4a:	f3bf 8f6f 	isb	sy
}
 8009e4e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d101      	bne.n	8009e5a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009e56:	bf30      	wfi
 8009e58:	e000      	b.n	8009e5c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009e5a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <HAL_PWR_EnterSTOPMode+0x74>)
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	4a05      	ldr	r2, [pc, #20]	; (8009e78 <HAL_PWR_EnterSTOPMode+0x74>)
 8009e62:	f023 0304 	bic.w	r3, r3, #4
 8009e66:	6113      	str	r3, [r2, #16]
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	58024800 	.word	0x58024800
 8009e78:	e000ed00 	.word	0xe000ed00

08009e7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e84:	4b19      	ldr	r3, [pc, #100]	; (8009eec <HAL_PWREx_ConfigSupply+0x70>)
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d00a      	beq.n	8009ea6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e90:	4b16      	ldr	r3, [pc, #88]	; (8009eec <HAL_PWREx_ConfigSupply+0x70>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 0307 	and.w	r3, r3, #7
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d001      	beq.n	8009ea2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e01f      	b.n	8009ee2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e01d      	b.n	8009ee2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009ea6:	4b11      	ldr	r3, [pc, #68]	; (8009eec <HAL_PWREx_ConfigSupply+0x70>)
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f023 0207 	bic.w	r2, r3, #7
 8009eae:	490f      	ldr	r1, [pc, #60]	; (8009eec <HAL_PWREx_ConfigSupply+0x70>)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009eb6:	f7fa f847 	bl	8003f48 <HAL_GetTick>
 8009eba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ebc:	e009      	b.n	8009ed2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ebe:	f7fa f843 	bl	8003f48 <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ecc:	d901      	bls.n	8009ed2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e007      	b.n	8009ee2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ed2:	4b06      	ldr	r3, [pc, #24]	; (8009eec <HAL_PWREx_ConfigSupply+0x70>)
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ede:	d1ee      	bne.n	8009ebe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	58024800 	.word	0x58024800

08009ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08c      	sub	sp, #48	; 0x30
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f000 bc48 	b.w	800a794 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 8088 	beq.w	800a022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f12:	4b99      	ldr	r3, [pc, #612]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f1c:	4b96      	ldr	r3, [pc, #600]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	2b10      	cmp	r3, #16
 8009f26:	d007      	beq.n	8009f38 <HAL_RCC_OscConfig+0x48>
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	2b18      	cmp	r3, #24
 8009f2c:	d111      	bne.n	8009f52 <HAL_RCC_OscConfig+0x62>
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d10c      	bne.n	8009f52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f38:	4b8f      	ldr	r3, [pc, #572]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d06d      	beq.n	800a020 <HAL_RCC_OscConfig+0x130>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d169      	bne.n	800a020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f000 bc21 	b.w	800a794 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f5a:	d106      	bne.n	8009f6a <HAL_RCC_OscConfig+0x7a>
 8009f5c:	4b86      	ldr	r3, [pc, #536]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a85      	ldr	r2, [pc, #532]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	e02e      	b.n	8009fc8 <HAL_RCC_OscConfig+0xd8>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10c      	bne.n	8009f8c <HAL_RCC_OscConfig+0x9c>
 8009f72:	4b81      	ldr	r3, [pc, #516]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a80      	ldr	r2, [pc, #512]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	4b7e      	ldr	r3, [pc, #504]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a7d      	ldr	r2, [pc, #500]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	e01d      	b.n	8009fc8 <HAL_RCC_OscConfig+0xd8>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f94:	d10c      	bne.n	8009fb0 <HAL_RCC_OscConfig+0xc0>
 8009f96:	4b78      	ldr	r3, [pc, #480]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a77      	ldr	r2, [pc, #476]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	4b75      	ldr	r3, [pc, #468]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a74      	ldr	r2, [pc, #464]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	e00b      	b.n	8009fc8 <HAL_RCC_OscConfig+0xd8>
 8009fb0:	4b71      	ldr	r3, [pc, #452]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a70      	ldr	r2, [pc, #448]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	4b6e      	ldr	r3, [pc, #440]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a6d      	ldr	r2, [pc, #436]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d013      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd0:	f7f9 ffba 	bl	8003f48 <HAL_GetTick>
 8009fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fd8:	f7f9 ffb6 	bl	8003f48 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b64      	cmp	r3, #100	; 0x64
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e3d4      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fea:	4b63      	ldr	r3, [pc, #396]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f0      	beq.n	8009fd8 <HAL_RCC_OscConfig+0xe8>
 8009ff6:	e014      	b.n	800a022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ff8:	f7f9 ffa6 	bl	8003f48 <HAL_GetTick>
 8009ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ffe:	e008      	b.n	800a012 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a000:	f7f9 ffa2 	bl	8003f48 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	2b64      	cmp	r3, #100	; 0x64
 800a00c:	d901      	bls.n	800a012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e3c0      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a012:	4b59      	ldr	r3, [pc, #356]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1f0      	bne.n	800a000 <HAL_RCC_OscConfig+0x110>
 800a01e:	e000      	b.n	800a022 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0302 	and.w	r3, r3, #2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 80ca 	beq.w	800a1c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a030:	4b51      	ldr	r3, [pc, #324]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a038:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a03a:	4b4f      	ldr	r3, [pc, #316]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d007      	beq.n	800a056 <HAL_RCC_OscConfig+0x166>
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	2b18      	cmp	r3, #24
 800a04a:	d156      	bne.n	800a0fa <HAL_RCC_OscConfig+0x20a>
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	f003 0303 	and.w	r3, r3, #3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d151      	bne.n	800a0fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a056:	4b48      	ldr	r3, [pc, #288]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0304 	and.w	r3, r3, #4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_RCC_OscConfig+0x17e>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e392      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a06e:	4b42      	ldr	r3, [pc, #264]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f023 0219 	bic.w	r2, r3, #25
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	493f      	ldr	r1, [pc, #252]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a080:	f7f9 ff62 	bl	8003f48 <HAL_GetTick>
 800a084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a086:	e008      	b.n	800a09a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a088:	f7f9 ff5e 	bl	8003f48 <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e37c      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a09a:	4b37      	ldr	r3, [pc, #220]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0304 	and.w	r3, r3, #4
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0f0      	beq.n	800a088 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0a6:	f7f9 ff5b 	bl	8003f60 <HAL_GetREVID>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d817      	bhi.n	800a0e4 <HAL_RCC_OscConfig+0x1f4>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	2b40      	cmp	r3, #64	; 0x40
 800a0ba:	d108      	bne.n	800a0ce <HAL_RCC_OscConfig+0x1de>
 800a0bc:	4b2e      	ldr	r3, [pc, #184]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0c4:	4a2c      	ldr	r2, [pc, #176]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a0c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0cc:	e07a      	b.n	800a1c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0ce:	4b2a      	ldr	r3, [pc, #168]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	031b      	lsls	r3, r3, #12
 800a0dc:	4926      	ldr	r1, [pc, #152]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0e2:	e06f      	b.n	800a1c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0e4:	4b24      	ldr	r3, [pc, #144]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	061b      	lsls	r3, r3, #24
 800a0f2:	4921      	ldr	r1, [pc, #132]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0f8:	e064      	b.n	800a1c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d047      	beq.n	800a192 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a102:	4b1d      	ldr	r3, [pc, #116]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f023 0219 	bic.w	r2, r3, #25
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	491a      	ldr	r1, [pc, #104]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a110:	4313      	orrs	r3, r2
 800a112:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a114:	f7f9 ff18 	bl	8003f48 <HAL_GetTick>
 800a118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a11a:	e008      	b.n	800a12e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a11c:	f7f9 ff14 	bl	8003f48 <HAL_GetTick>
 800a120:	4602      	mov	r2, r0
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	2b02      	cmp	r3, #2
 800a128:	d901      	bls.n	800a12e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e332      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a12e:	4b12      	ldr	r3, [pc, #72]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	2b00      	cmp	r3, #0
 800a138:	d0f0      	beq.n	800a11c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a13a:	f7f9 ff11 	bl	8003f60 <HAL_GetREVID>
 800a13e:	4603      	mov	r3, r0
 800a140:	f241 0203 	movw	r2, #4099	; 0x1003
 800a144:	4293      	cmp	r3, r2
 800a146:	d819      	bhi.n	800a17c <HAL_RCC_OscConfig+0x28c>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	2b40      	cmp	r3, #64	; 0x40
 800a14e:	d108      	bne.n	800a162 <HAL_RCC_OscConfig+0x272>
 800a150:	4b09      	ldr	r3, [pc, #36]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a158:	4a07      	ldr	r2, [pc, #28]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a15a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a15e:	6053      	str	r3, [r2, #4]
 800a160:	e030      	b.n	800a1c4 <HAL_RCC_OscConfig+0x2d4>
 800a162:	4b05      	ldr	r3, [pc, #20]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	031b      	lsls	r3, r3, #12
 800a170:	4901      	ldr	r1, [pc, #4]	; (800a178 <HAL_RCC_OscConfig+0x288>)
 800a172:	4313      	orrs	r3, r2
 800a174:	604b      	str	r3, [r1, #4]
 800a176:	e025      	b.n	800a1c4 <HAL_RCC_OscConfig+0x2d4>
 800a178:	58024400 	.word	0x58024400
 800a17c:	4b9a      	ldr	r3, [pc, #616]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	061b      	lsls	r3, r3, #24
 800a18a:	4997      	ldr	r1, [pc, #604]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	604b      	str	r3, [r1, #4]
 800a190:	e018      	b.n	800a1c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a192:	4b95      	ldr	r3, [pc, #596]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a94      	ldr	r2, [pc, #592]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a198:	f023 0301 	bic.w	r3, r3, #1
 800a19c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a19e:	f7f9 fed3 	bl	8003f48 <HAL_GetTick>
 800a1a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1a4:	e008      	b.n	800a1b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1a6:	f7f9 fecf 	bl	8003f48 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e2ed      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1b8:	4b8b      	ldr	r3, [pc, #556]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1f0      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 80a9 	beq.w	800a324 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1d2:	4b85      	ldr	r3, [pc, #532]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1dc:	4b82      	ldr	r3, [pc, #520]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	d007      	beq.n	800a1f8 <HAL_RCC_OscConfig+0x308>
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	2b18      	cmp	r3, #24
 800a1ec:	d13a      	bne.n	800a264 <HAL_RCC_OscConfig+0x374>
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d135      	bne.n	800a264 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1f8:	4b7b      	ldr	r3, [pc, #492]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <HAL_RCC_OscConfig+0x320>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	2b80      	cmp	r3, #128	; 0x80
 800a20a:	d001      	beq.n	800a210 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e2c1      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a210:	f7f9 fea6 	bl	8003f60 <HAL_GetREVID>
 800a214:	4603      	mov	r3, r0
 800a216:	f241 0203 	movw	r2, #4099	; 0x1003
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d817      	bhi.n	800a24e <HAL_RCC_OscConfig+0x35e>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	2b20      	cmp	r3, #32
 800a224:	d108      	bne.n	800a238 <HAL_RCC_OscConfig+0x348>
 800a226:	4b70      	ldr	r3, [pc, #448]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a22e:	4a6e      	ldr	r2, [pc, #440]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a234:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a236:	e075      	b.n	800a324 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a238:	4b6b      	ldr	r3, [pc, #428]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	069b      	lsls	r3, r3, #26
 800a246:	4968      	ldr	r1, [pc, #416]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a24c:	e06a      	b.n	800a324 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a24e:	4b66      	ldr	r3, [pc, #408]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	061b      	lsls	r3, r3, #24
 800a25c:	4962      	ldr	r1, [pc, #392]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a262:	e05f      	b.n	800a324 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d042      	beq.n	800a2f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a26c:	4b5e      	ldr	r3, [pc, #376]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a5d      	ldr	r2, [pc, #372]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a278:	f7f9 fe66 	bl	8003f48 <HAL_GetTick>
 800a27c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a27e:	e008      	b.n	800a292 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a280:	f7f9 fe62 	bl	8003f48 <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d901      	bls.n	800a292 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e280      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a292:	4b55      	ldr	r3, [pc, #340]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0f0      	beq.n	800a280 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a29e:	f7f9 fe5f 	bl	8003f60 <HAL_GetREVID>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d817      	bhi.n	800a2dc <HAL_RCC_OscConfig+0x3ec>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a1b      	ldr	r3, [r3, #32]
 800a2b0:	2b20      	cmp	r3, #32
 800a2b2:	d108      	bne.n	800a2c6 <HAL_RCC_OscConfig+0x3d6>
 800a2b4:	4b4c      	ldr	r3, [pc, #304]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2bc:	4a4a      	ldr	r2, [pc, #296]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a2be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2c2:	6053      	str	r3, [r2, #4]
 800a2c4:	e02e      	b.n	800a324 <HAL_RCC_OscConfig+0x434>
 800a2c6:	4b48      	ldr	r3, [pc, #288]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	069b      	lsls	r3, r3, #26
 800a2d4:	4944      	ldr	r1, [pc, #272]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	604b      	str	r3, [r1, #4]
 800a2da:	e023      	b.n	800a324 <HAL_RCC_OscConfig+0x434>
 800a2dc:	4b42      	ldr	r3, [pc, #264]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	061b      	lsls	r3, r3, #24
 800a2ea:	493f      	ldr	r1, [pc, #252]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60cb      	str	r3, [r1, #12]
 800a2f0:	e018      	b.n	800a324 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a2f2:	4b3d      	ldr	r3, [pc, #244]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a3c      	ldr	r2, [pc, #240]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a2f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2fe:	f7f9 fe23 	bl	8003f48 <HAL_GetTick>
 800a302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a304:	e008      	b.n	800a318 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a306:	f7f9 fe1f 	bl	8003f48 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	2b02      	cmp	r3, #2
 800a312:	d901      	bls.n	800a318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e23d      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a318:	4b33      	ldr	r3, [pc, #204]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1f0      	bne.n	800a306 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0308 	and.w	r3, r3, #8
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d036      	beq.n	800a39e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d019      	beq.n	800a36c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a338:	4b2b      	ldr	r3, [pc, #172]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a33c:	4a2a      	ldr	r2, [pc, #168]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a33e:	f043 0301 	orr.w	r3, r3, #1
 800a342:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a344:	f7f9 fe00 	bl	8003f48 <HAL_GetTick>
 800a348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a34a:	e008      	b.n	800a35e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a34c:	f7f9 fdfc 	bl	8003f48 <HAL_GetTick>
 800a350:	4602      	mov	r2, r0
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	2b02      	cmp	r3, #2
 800a358:	d901      	bls.n	800a35e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e21a      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a35e:	4b22      	ldr	r3, [pc, #136]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a362:	f003 0302 	and.w	r3, r3, #2
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0f0      	beq.n	800a34c <HAL_RCC_OscConfig+0x45c>
 800a36a:	e018      	b.n	800a39e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a36c:	4b1e      	ldr	r3, [pc, #120]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a370:	4a1d      	ldr	r2, [pc, #116]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a372:	f023 0301 	bic.w	r3, r3, #1
 800a376:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a378:	f7f9 fde6 	bl	8003f48 <HAL_GetTick>
 800a37c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a37e:	e008      	b.n	800a392 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a380:	f7f9 fde2 	bl	8003f48 <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d901      	bls.n	800a392 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e200      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a392:	4b15      	ldr	r3, [pc, #84]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a396:	f003 0302 	and.w	r3, r3, #2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1f0      	bne.n	800a380 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0320 	and.w	r3, r3, #32
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d039      	beq.n	800a41e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01c      	beq.n	800a3ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3b2:	4b0d      	ldr	r3, [pc, #52]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a0c      	ldr	r2, [pc, #48]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a3b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3be:	f7f9 fdc3 	bl	8003f48 <HAL_GetTick>
 800a3c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3c4:	e008      	b.n	800a3d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3c6:	f7f9 fdbf 	bl	8003f48 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d901      	bls.n	800a3d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e1dd      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <HAL_RCC_OscConfig+0x4f8>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0f0      	beq.n	800a3c6 <HAL_RCC_OscConfig+0x4d6>
 800a3e4:	e01b      	b.n	800a41e <HAL_RCC_OscConfig+0x52e>
 800a3e6:	bf00      	nop
 800a3e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3ec:	4b9b      	ldr	r3, [pc, #620]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a9a      	ldr	r2, [pc, #616]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a3f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3f8:	f7f9 fda6 	bl	8003f48 <HAL_GetTick>
 800a3fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a400:	f7f9 fda2 	bl	8003f48 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e1c0      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a412:	4b92      	ldr	r3, [pc, #584]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1f0      	bne.n	800a400 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0304 	and.w	r3, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 8081 	beq.w	800a52e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a42c:	4b8c      	ldr	r3, [pc, #560]	; (800a660 <HAL_RCC_OscConfig+0x770>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a8b      	ldr	r2, [pc, #556]	; (800a660 <HAL_RCC_OscConfig+0x770>)
 800a432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a438:	f7f9 fd86 	bl	8003f48 <HAL_GetTick>
 800a43c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a43e:	e008      	b.n	800a452 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a440:	f7f9 fd82 	bl	8003f48 <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2b64      	cmp	r3, #100	; 0x64
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e1a0      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a452:	4b83      	ldr	r3, [pc, #524]	; (800a660 <HAL_RCC_OscConfig+0x770>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d0f0      	beq.n	800a440 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d106      	bne.n	800a474 <HAL_RCC_OscConfig+0x584>
 800a466:	4b7d      	ldr	r3, [pc, #500]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46a:	4a7c      	ldr	r2, [pc, #496]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a46c:	f043 0301 	orr.w	r3, r3, #1
 800a470:	6713      	str	r3, [r2, #112]	; 0x70
 800a472:	e02d      	b.n	800a4d0 <HAL_RCC_OscConfig+0x5e0>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10c      	bne.n	800a496 <HAL_RCC_OscConfig+0x5a6>
 800a47c:	4b77      	ldr	r3, [pc, #476]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a480:	4a76      	ldr	r2, [pc, #472]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a482:	f023 0301 	bic.w	r3, r3, #1
 800a486:	6713      	str	r3, [r2, #112]	; 0x70
 800a488:	4b74      	ldr	r3, [pc, #464]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48c:	4a73      	ldr	r2, [pc, #460]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a48e:	f023 0304 	bic.w	r3, r3, #4
 800a492:	6713      	str	r3, [r2, #112]	; 0x70
 800a494:	e01c      	b.n	800a4d0 <HAL_RCC_OscConfig+0x5e0>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	d10c      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x5c8>
 800a49e:	4b6f      	ldr	r3, [pc, #444]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a2:	4a6e      	ldr	r2, [pc, #440]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4a4:	f043 0304 	orr.w	r3, r3, #4
 800a4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4aa:	4b6c      	ldr	r3, [pc, #432]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ae:	4a6b      	ldr	r2, [pc, #428]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4b0:	f043 0301 	orr.w	r3, r3, #1
 800a4b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b6:	e00b      	b.n	800a4d0 <HAL_RCC_OscConfig+0x5e0>
 800a4b8:	4b68      	ldr	r3, [pc, #416]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	4a67      	ldr	r2, [pc, #412]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4be:	f023 0301 	bic.w	r3, r3, #1
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c4:	4b65      	ldr	r3, [pc, #404]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c8:	4a64      	ldr	r2, [pc, #400]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4ca:	f023 0304 	bic.w	r3, r3, #4
 800a4ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d015      	beq.n	800a504 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4d8:	f7f9 fd36 	bl	8003f48 <HAL_GetTick>
 800a4dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4de:	e00a      	b.n	800a4f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4e0:	f7f9 fd32 	bl	8003f48 <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e14e      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4f6:	4b59      	ldr	r3, [pc, #356]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0ee      	beq.n	800a4e0 <HAL_RCC_OscConfig+0x5f0>
 800a502:	e014      	b.n	800a52e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a504:	f7f9 fd20 	bl	8003f48 <HAL_GetTick>
 800a508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a50a:	e00a      	b.n	800a522 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a50c:	f7f9 fd1c 	bl	8003f48 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d901      	bls.n	800a522 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e138      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a522:	4b4e      	ldr	r3, [pc, #312]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1ee      	bne.n	800a50c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 812d 	beq.w	800a792 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a538:	4b48      	ldr	r3, [pc, #288]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a540:	2b18      	cmp	r3, #24
 800a542:	f000 80bd 	beq.w	800a6c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	f040 809e 	bne.w	800a68c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a550:	4b42      	ldr	r3, [pc, #264]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a41      	ldr	r2, [pc, #260]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a55a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a55c:	f7f9 fcf4 	bl	8003f48 <HAL_GetTick>
 800a560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a562:	e008      	b.n	800a576 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a564:	f7f9 fcf0 	bl	8003f48 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e10e      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a576:	4b39      	ldr	r3, [pc, #228]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f0      	bne.n	800a564 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a582:	4b36      	ldr	r3, [pc, #216]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a586:	4b37      	ldr	r3, [pc, #220]	; (800a664 <HAL_RCC_OscConfig+0x774>)
 800a588:	4013      	ands	r3, r2
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a592:	0112      	lsls	r2, r2, #4
 800a594:	430a      	orrs	r2, r1
 800a596:	4931      	ldr	r1, [pc, #196]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	628b      	str	r3, [r1, #40]	; 0x28
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	025b      	lsls	r3, r3, #9
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	041b      	lsls	r3, r3, #16
 800a5ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5be:	431a      	orrs	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	061b      	lsls	r3, r3, #24
 800a5c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5cc:	4923      	ldr	r1, [pc, #140]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a5d2:	4b22      	ldr	r3, [pc, #136]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d6:	4a21      	ldr	r2, [pc, #132]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a5d8:	f023 0301 	bic.w	r3, r3, #1
 800a5dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5de:	4b1f      	ldr	r3, [pc, #124]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a5e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5e2:	4b21      	ldr	r3, [pc, #132]	; (800a668 <HAL_RCC_OscConfig+0x778>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a5ea:	00d2      	lsls	r2, r2, #3
 800a5ec:	491b      	ldr	r1, [pc, #108]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a5f2:	4b1a      	ldr	r3, [pc, #104]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f6:	f023 020c 	bic.w	r2, r3, #12
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	4917      	ldr	r1, [pc, #92]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a600:	4313      	orrs	r3, r2
 800a602:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a604:	4b15      	ldr	r3, [pc, #84]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a608:	f023 0202 	bic.w	r2, r3, #2
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a610:	4912      	ldr	r1, [pc, #72]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a612:	4313      	orrs	r3, r2
 800a614:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a616:	4b11      	ldr	r3, [pc, #68]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61a:	4a10      	ldr	r2, [pc, #64]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a61c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a620:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	4a0d      	ldr	r2, [pc, #52]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a62c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	4a0a      	ldr	r2, [pc, #40]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a63a:	4b08      	ldr	r3, [pc, #32]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63e:	4a07      	ldr	r2, [pc, #28]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a640:	f043 0301 	orr.w	r3, r3, #1
 800a644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a646:	4b05      	ldr	r3, [pc, #20]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a04      	ldr	r2, [pc, #16]	; (800a65c <HAL_RCC_OscConfig+0x76c>)
 800a64c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a652:	f7f9 fc79 	bl	8003f48 <HAL_GetTick>
 800a656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a658:	e011      	b.n	800a67e <HAL_RCC_OscConfig+0x78e>
 800a65a:	bf00      	nop
 800a65c:	58024400 	.word	0x58024400
 800a660:	58024800 	.word	0x58024800
 800a664:	fffffc0c 	.word	0xfffffc0c
 800a668:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a66c:	f7f9 fc6c 	bl	8003f48 <HAL_GetTick>
 800a670:	4602      	mov	r2, r0
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	2b02      	cmp	r3, #2
 800a678:	d901      	bls.n	800a67e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a67a:	2303      	movs	r3, #3
 800a67c:	e08a      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a67e:	4b47      	ldr	r3, [pc, #284]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d0f0      	beq.n	800a66c <HAL_RCC_OscConfig+0x77c>
 800a68a:	e082      	b.n	800a792 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a68c:	4b43      	ldr	r3, [pc, #268]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a42      	ldr	r2, [pc, #264]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a698:	f7f9 fc56 	bl	8003f48 <HAL_GetTick>
 800a69c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a69e:	e008      	b.n	800a6b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6a0:	f7f9 fc52 	bl	8003f48 <HAL_GetTick>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d901      	bls.n	800a6b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e070      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6b2:	4b3a      	ldr	r3, [pc, #232]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1f0      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x7b0>
 800a6be:	e068      	b.n	800a792 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6c0:	4b36      	ldr	r3, [pc, #216]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6c6:	4b35      	ldr	r3, [pc, #212]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d031      	beq.n	800a738 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	f003 0203 	and.w	r2, r3, #3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d12a      	bne.n	800a738 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	091b      	lsrs	r3, r3, #4
 800a6e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d122      	bne.n	800a738 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d11a      	bne.n	800a738 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	0a5b      	lsrs	r3, r3, #9
 800a706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a710:	429a      	cmp	r2, r3
 800a712:	d111      	bne.n	800a738 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	0c1b      	lsrs	r3, r3, #16
 800a718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a720:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a722:	429a      	cmp	r2, r3
 800a724:	d108      	bne.n	800a738 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	0e1b      	lsrs	r3, r3, #24
 800a72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a732:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a734:	429a      	cmp	r2, r3
 800a736:	d001      	beq.n	800a73c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e02b      	b.n	800a794 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a73c:	4b17      	ldr	r3, [pc, #92]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a740:	08db      	lsrs	r3, r3, #3
 800a742:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a746:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d01f      	beq.n	800a792 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a752:	4b12      	ldr	r3, [pc, #72]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a756:	4a11      	ldr	r2, [pc, #68]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a758:	f023 0301 	bic.w	r3, r3, #1
 800a75c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a75e:	f7f9 fbf3 	bl	8003f48 <HAL_GetTick>
 800a762:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a764:	bf00      	nop
 800a766:	f7f9 fbef 	bl	8003f48 <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	4293      	cmp	r3, r2
 800a770:	d0f9      	beq.n	800a766 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a772:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a776:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <HAL_RCC_OscConfig+0x8b0>)
 800a778:	4013      	ands	r3, r2
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a77e:	00d2      	lsls	r2, r2, #3
 800a780:	4906      	ldr	r1, [pc, #24]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a782:	4313      	orrs	r3, r2
 800a784:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a786:	4b05      	ldr	r3, [pc, #20]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78a:	4a04      	ldr	r2, [pc, #16]	; (800a79c <HAL_RCC_OscConfig+0x8ac>)
 800a78c:	f043 0301 	orr.w	r3, r3, #1
 800a790:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3730      	adds	r7, #48	; 0x30
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	58024400 	.word	0x58024400
 800a7a0:	ffff0007 	.word	0xffff0007

0800a7a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e19c      	b.n	800aaf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7b8:	4b8a      	ldr	r3, [pc, #552]	; (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 030f 	and.w	r3, r3, #15
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d910      	bls.n	800a7e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7c6:	4b87      	ldr	r3, [pc, #540]	; (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f023 020f 	bic.w	r2, r3, #15
 800a7ce:	4985      	ldr	r1, [pc, #532]	; (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7d6:	4b83      	ldr	r3, [pc, #524]	; (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 030f 	and.w	r3, r3, #15
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d001      	beq.n	800a7e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e184      	b.n	800aaf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d010      	beq.n	800a816 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	691a      	ldr	r2, [r3, #16]
 800a7f8:	4b7b      	ldr	r3, [pc, #492]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a800:	429a      	cmp	r2, r3
 800a802:	d908      	bls.n	800a816 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a804:	4b78      	ldr	r3, [pc, #480]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	4975      	ldr	r1, [pc, #468]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a812:	4313      	orrs	r3, r2
 800a814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0308 	and.w	r3, r3, #8
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d010      	beq.n	800a844 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	695a      	ldr	r2, [r3, #20]
 800a826:	4b70      	ldr	r3, [pc, #448]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a82e:	429a      	cmp	r2, r3
 800a830:	d908      	bls.n	800a844 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a832:	4b6d      	ldr	r3, [pc, #436]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	496a      	ldr	r1, [pc, #424]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a840:	4313      	orrs	r3, r2
 800a842:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0310 	and.w	r3, r3, #16
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d010      	beq.n	800a872 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	4b64      	ldr	r3, [pc, #400]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a856:	69db      	ldr	r3, [r3, #28]
 800a858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d908      	bls.n	800a872 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a860:	4b61      	ldr	r3, [pc, #388]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	495e      	ldr	r1, [pc, #376]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0320 	and.w	r3, r3, #32
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d010      	beq.n	800a8a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	69da      	ldr	r2, [r3, #28]
 800a882:	4b59      	ldr	r3, [pc, #356]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d908      	bls.n	800a8a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a88e:	4b56      	ldr	r3, [pc, #344]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	4953      	ldr	r1, [pc, #332]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d010      	beq.n	800a8ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68da      	ldr	r2, [r3, #12]
 800a8b0:	4b4d      	ldr	r3, [pc, #308]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	f003 030f 	and.w	r3, r3, #15
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d908      	bls.n	800a8ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8bc:	4b4a      	ldr	r3, [pc, #296]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	f023 020f 	bic.w	r2, r3, #15
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	4947      	ldr	r1, [pc, #284]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d055      	beq.n	800a986 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a8da:	4b43      	ldr	r3, [pc, #268]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	4940      	ldr	r1, [pc, #256]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d107      	bne.n	800a904 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8f4:	4b3c      	ldr	r3, [pc, #240]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d121      	bne.n	800a944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e0f6      	b.n	800aaf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d107      	bne.n	800a91c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a90c:	4b36      	ldr	r3, [pc, #216]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d115      	bne.n	800a944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e0ea      	b.n	800aaf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d107      	bne.n	800a934 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a924:	4b30      	ldr	r3, [pc, #192]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d109      	bne.n	800a944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e0de      	b.n	800aaf2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a934:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e0d6      	b.n	800aaf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a944:	4b28      	ldr	r3, [pc, #160]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	f023 0207 	bic.w	r2, r3, #7
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	4925      	ldr	r1, [pc, #148]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a952:	4313      	orrs	r3, r2
 800a954:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a956:	f7f9 faf7 	bl	8003f48 <HAL_GetTick>
 800a95a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a95c:	e00a      	b.n	800a974 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a95e:	f7f9 faf3 	bl	8003f48 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	f241 3288 	movw	r2, #5000	; 0x1388
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d901      	bls.n	800a974 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e0be      	b.n	800aaf2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a974:	4b1c      	ldr	r3, [pc, #112]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	429a      	cmp	r2, r3
 800a984:	d1eb      	bne.n	800a95e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0302 	and.w	r3, r3, #2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d010      	beq.n	800a9b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	4b14      	ldr	r3, [pc, #80]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	f003 030f 	and.w	r3, r3, #15
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d208      	bcs.n	800a9b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9a2:	4b11      	ldr	r3, [pc, #68]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	f023 020f 	bic.w	r2, r3, #15
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	490e      	ldr	r1, [pc, #56]	; (800a9e8 <HAL_RCC_ClockConfig+0x244>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9b4:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 030f 	and.w	r3, r3, #15
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d214      	bcs.n	800a9ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9c2:	4b08      	ldr	r3, [pc, #32]	; (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f023 020f 	bic.w	r2, r3, #15
 800a9ca:	4906      	ldr	r1, [pc, #24]	; (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9d2:	4b04      	ldr	r3, [pc, #16]	; (800a9e4 <HAL_RCC_ClockConfig+0x240>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 030f 	and.w	r3, r3, #15
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d005      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e086      	b.n	800aaf2 <HAL_RCC_ClockConfig+0x34e>
 800a9e4:	52002000 	.word	0x52002000
 800a9e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d010      	beq.n	800aa1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691a      	ldr	r2, [r3, #16]
 800a9fc:	4b3f      	ldr	r3, [pc, #252]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d208      	bcs.n	800aa1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa08:	4b3c      	ldr	r3, [pc, #240]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	4939      	ldr	r1, [pc, #228]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa16:	4313      	orrs	r3, r2
 800aa18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0308 	and.w	r3, r3, #8
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d010      	beq.n	800aa48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	695a      	ldr	r2, [r3, #20]
 800aa2a:	4b34      	ldr	r3, [pc, #208]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d208      	bcs.n	800aa48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa36:	4b31      	ldr	r3, [pc, #196]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	492e      	ldr	r1, [pc, #184]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d010      	beq.n	800aa76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699a      	ldr	r2, [r3, #24]
 800aa58:	4b28      	ldr	r3, [pc, #160]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d208      	bcs.n	800aa76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa64:	4b25      	ldr	r3, [pc, #148]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	4922      	ldr	r1, [pc, #136]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0320 	and.w	r3, r3, #32
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d010      	beq.n	800aaa4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	69da      	ldr	r2, [r3, #28]
 800aa86:	4b1d      	ldr	r3, [pc, #116]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d208      	bcs.n	800aaa4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa92:	4b1a      	ldr	r3, [pc, #104]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	4917      	ldr	r1, [pc, #92]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aaa4:	f000 f834 	bl	800ab10 <HAL_RCC_GetSysClockFreq>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	4b14      	ldr	r3, [pc, #80]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	0a1b      	lsrs	r3, r3, #8
 800aab0:	f003 030f 	and.w	r3, r3, #15
 800aab4:	4912      	ldr	r1, [pc, #72]	; (800ab00 <HAL_RCC_ClockConfig+0x35c>)
 800aab6:	5ccb      	ldrb	r3, [r1, r3]
 800aab8:	f003 031f 	and.w	r3, r3, #31
 800aabc:	fa22 f303 	lsr.w	r3, r2, r3
 800aac0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aac2:	4b0e      	ldr	r3, [pc, #56]	; (800aafc <HAL_RCC_ClockConfig+0x358>)
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	f003 030f 	and.w	r3, r3, #15
 800aaca:	4a0d      	ldr	r2, [pc, #52]	; (800ab00 <HAL_RCC_ClockConfig+0x35c>)
 800aacc:	5cd3      	ldrb	r3, [r2, r3]
 800aace:	f003 031f 	and.w	r3, r3, #31
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	fa22 f303 	lsr.w	r3, r2, r3
 800aad8:	4a0a      	ldr	r2, [pc, #40]	; (800ab04 <HAL_RCC_ClockConfig+0x360>)
 800aada:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aadc:	4a0a      	ldr	r2, [pc, #40]	; (800ab08 <HAL_RCC_ClockConfig+0x364>)
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aae2:	4b0a      	ldr	r3, [pc, #40]	; (800ab0c <HAL_RCC_ClockConfig+0x368>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7f8 ff52 	bl	8003990 <HAL_InitTick>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3718      	adds	r7, #24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	58024400 	.word	0x58024400
 800ab00:	08017820 	.word	0x08017820
 800ab04:	24000094 	.word	0x24000094
 800ab08:	24000090 	.word	0x24000090
 800ab0c:	24000098 	.word	0x24000098

0800ab10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b089      	sub	sp, #36	; 0x24
 800ab14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab16:	4bb3      	ldr	r3, [pc, #716]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab1e:	2b18      	cmp	r3, #24
 800ab20:	f200 8155 	bhi.w	800adce <HAL_RCC_GetSysClockFreq+0x2be>
 800ab24:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <HAL_RCC_GetSysClockFreq+0x1c>)
 800ab26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2a:	bf00      	nop
 800ab2c:	0800ab91 	.word	0x0800ab91
 800ab30:	0800adcf 	.word	0x0800adcf
 800ab34:	0800adcf 	.word	0x0800adcf
 800ab38:	0800adcf 	.word	0x0800adcf
 800ab3c:	0800adcf 	.word	0x0800adcf
 800ab40:	0800adcf 	.word	0x0800adcf
 800ab44:	0800adcf 	.word	0x0800adcf
 800ab48:	0800adcf 	.word	0x0800adcf
 800ab4c:	0800abb7 	.word	0x0800abb7
 800ab50:	0800adcf 	.word	0x0800adcf
 800ab54:	0800adcf 	.word	0x0800adcf
 800ab58:	0800adcf 	.word	0x0800adcf
 800ab5c:	0800adcf 	.word	0x0800adcf
 800ab60:	0800adcf 	.word	0x0800adcf
 800ab64:	0800adcf 	.word	0x0800adcf
 800ab68:	0800adcf 	.word	0x0800adcf
 800ab6c:	0800abbd 	.word	0x0800abbd
 800ab70:	0800adcf 	.word	0x0800adcf
 800ab74:	0800adcf 	.word	0x0800adcf
 800ab78:	0800adcf 	.word	0x0800adcf
 800ab7c:	0800adcf 	.word	0x0800adcf
 800ab80:	0800adcf 	.word	0x0800adcf
 800ab84:	0800adcf 	.word	0x0800adcf
 800ab88:	0800adcf 	.word	0x0800adcf
 800ab8c:	0800abc3 	.word	0x0800abc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab90:	4b94      	ldr	r3, [pc, #592]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0320 	and.w	r3, r3, #32
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d009      	beq.n	800abb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab9c:	4b91      	ldr	r3, [pc, #580]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	08db      	lsrs	r3, r3, #3
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	4a90      	ldr	r2, [pc, #576]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
 800abac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800abae:	e111      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800abb0:	4b8d      	ldr	r3, [pc, #564]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abb2:	61bb      	str	r3, [r7, #24]
      break;
 800abb4:	e10e      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800abb6:	4b8d      	ldr	r3, [pc, #564]	; (800adec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800abb8:	61bb      	str	r3, [r7, #24]
      break;
 800abba:	e10b      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800abbc:	4b8c      	ldr	r3, [pc, #560]	; (800adf0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800abbe:	61bb      	str	r3, [r7, #24]
      break;
 800abc0:	e108      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abc2:	4b88      	ldr	r3, [pc, #544]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800abcc:	4b85      	ldr	r3, [pc, #532]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	091b      	lsrs	r3, r3, #4
 800abd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800abd8:	4b82      	ldr	r3, [pc, #520]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800abe2:	4b80      	ldr	r3, [pc, #512]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe6:	08db      	lsrs	r3, r3, #3
 800abe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	fb02 f303 	mul.w	r3, r2, r3
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 80e1 	beq.w	800adc8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	f000 8083 	beq.w	800ad14 <HAL_RCC_GetSysClockFreq+0x204>
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	f200 80a1 	bhi.w	800ad58 <HAL_RCC_GetSysClockFreq+0x248>
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <HAL_RCC_GetSysClockFreq+0x114>
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d056      	beq.n	800acd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ac22:	e099      	b.n	800ad58 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac24:	4b6f      	ldr	r3, [pc, #444]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d02d      	beq.n	800ac8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac30:	4b6c      	ldr	r3, [pc, #432]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	08db      	lsrs	r3, r3, #3
 800ac36:	f003 0303 	and.w	r3, r3, #3
 800ac3a:	4a6b      	ldr	r2, [pc, #428]	; (800ade8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	ee07 3a90 	vmov	s15, r3
 800ac48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac5a:	4b62      	ldr	r3, [pc, #392]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800adf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ac8a:	e087      	b.n	800ad9c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac96:	eddf 6a58 	vldr	s13, [pc, #352]	; 800adf8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ac9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9e:	4b51      	ldr	r3, [pc, #324]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acae:	ed97 6a02 	vldr	s12, [r7, #8]
 800acb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800adf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800acce:	e065      	b.n	800ad9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acda:	eddf 6a48 	vldr	s13, [pc, #288]	; 800adfc <HAL_RCC_GetSysClockFreq+0x2ec>
 800acde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace2:	4b40      	ldr	r3, [pc, #256]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ace4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800acf6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800adf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad12:	e043      	b.n	800ad9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ae00 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ad22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad26:	4b2f      	ldr	r3, [pc, #188]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad36:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800adf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad56:	e021      	b.n	800ad9c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad62:	eddf 6a26 	vldr	s13, [pc, #152]	; 800adfc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad6a:	4b1e      	ldr	r3, [pc, #120]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800adf4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad9a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ad9c:	4b11      	ldr	r3, [pc, #68]	; (800ade4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	0a5b      	lsrs	r3, r3, #9
 800ada2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada6:	3301      	adds	r3, #1
 800ada8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800adb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc0:	ee17 3a90 	vmov	r3, s15
 800adc4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800adc6:	e005      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	61bb      	str	r3, [r7, #24]
      break;
 800adcc:	e002      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800adce:	4b07      	ldr	r3, [pc, #28]	; (800adec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800add0:	61bb      	str	r3, [r7, #24]
      break;
 800add2:	bf00      	nop
  }

  return sysclockfreq;
 800add4:	69bb      	ldr	r3, [r7, #24]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3724      	adds	r7, #36	; 0x24
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	58024400 	.word	0x58024400
 800ade8:	03d09000 	.word	0x03d09000
 800adec:	003d0900 	.word	0x003d0900
 800adf0:	017d7840 	.word	0x017d7840
 800adf4:	46000000 	.word	0x46000000
 800adf8:	4c742400 	.word	0x4c742400
 800adfc:	4a742400 	.word	0x4a742400
 800ae00:	4bbebc20 	.word	0x4bbebc20

0800ae04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ae0a:	f7ff fe81 	bl	800ab10 <HAL_RCC_GetSysClockFreq>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	4b10      	ldr	r3, [pc, #64]	; (800ae54 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	0a1b      	lsrs	r3, r3, #8
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	490f      	ldr	r1, [pc, #60]	; (800ae58 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae1c:	5ccb      	ldrb	r3, [r1, r3]
 800ae1e:	f003 031f 	and.w	r3, r3, #31
 800ae22:	fa22 f303 	lsr.w	r3, r2, r3
 800ae26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae28:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	f003 030f 	and.w	r3, r3, #15
 800ae30:	4a09      	ldr	r2, [pc, #36]	; (800ae58 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae32:	5cd3      	ldrb	r3, [r2, r3]
 800ae34:	f003 031f 	and.w	r3, r3, #31
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3e:	4a07      	ldr	r2, [pc, #28]	; (800ae5c <HAL_RCC_GetHCLKFreq+0x58>)
 800ae40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae42:	4a07      	ldr	r2, [pc, #28]	; (800ae60 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae48:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <HAL_RCC_GetHCLKFreq+0x58>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	58024400 	.word	0x58024400
 800ae58:	08017820 	.word	0x08017820
 800ae5c:	24000094 	.word	0x24000094
 800ae60:	24000090 	.word	0x24000090

0800ae64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae68:	f7ff ffcc 	bl	800ae04 <HAL_RCC_GetHCLKFreq>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	091b      	lsrs	r3, r3, #4
 800ae74:	f003 0307 	and.w	r3, r3, #7
 800ae78:	4904      	ldr	r1, [pc, #16]	; (800ae8c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae7a:	5ccb      	ldrb	r3, [r1, r3]
 800ae7c:	f003 031f 	and.w	r3, r3, #31
 800ae80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	58024400 	.word	0x58024400
 800ae8c:	08017820 	.word	0x08017820

0800ae90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ae94:	f7ff ffb6 	bl	800ae04 <HAL_RCC_GetHCLKFreq>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	0a1b      	lsrs	r3, r3, #8
 800aea0:	f003 0307 	and.w	r3, r3, #7
 800aea4:	4904      	ldr	r1, [pc, #16]	; (800aeb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aea6:	5ccb      	ldrb	r3, [r1, r3]
 800aea8:	f003 031f 	and.w	r3, r3, #31
 800aeac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	58024400 	.word	0x58024400
 800aeb8:	08017820 	.word	0x08017820

0800aebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	223f      	movs	r2, #63	; 0x3f
 800aeca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aecc:	4b1a      	ldr	r3, [pc, #104]	; (800af38 <HAL_RCC_GetClockConfig+0x7c>)
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	f003 0207 	and.w	r2, r3, #7
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800aed8:	4b17      	ldr	r3, [pc, #92]	; (800af38 <HAL_RCC_GetClockConfig+0x7c>)
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800aee4:	4b14      	ldr	r3, [pc, #80]	; (800af38 <HAL_RCC_GetClockConfig+0x7c>)
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	f003 020f 	and.w	r2, r3, #15
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800aef0:	4b11      	ldr	r3, [pc, #68]	; (800af38 <HAL_RCC_GetClockConfig+0x7c>)
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800aefc:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <HAL_RCC_GetClockConfig+0x7c>)
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800af08:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <HAL_RCC_GetClockConfig+0x7c>)
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800af14:	4b08      	ldr	r3, [pc, #32]	; (800af38 <HAL_RCC_GetClockConfig+0x7c>)
 800af16:	6a1b      	ldr	r3, [r3, #32]
 800af18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800af20:	4b06      	ldr	r3, [pc, #24]	; (800af3c <HAL_RCC_GetClockConfig+0x80>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 020f 	and.w	r2, r3, #15
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	601a      	str	r2, [r3, #0]
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	58024400 	.word	0x58024400
 800af3c:	52002000 	.word	0x52002000

0800af40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af44:	b0ca      	sub	sp, #296	; 0x128
 800af46:	af00      	add	r7, sp, #0
 800af48:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af52:	2300      	movs	r3, #0
 800af54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800af64:	2500      	movs	r5, #0
 800af66:	ea54 0305 	orrs.w	r3, r4, r5
 800af6a:	d049      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800af6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af76:	d02f      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800af78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af7c:	d828      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af82:	d01a      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800af84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af88:	d822      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800af8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af92:	d007      	beq.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800af94:	e01c      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af96:	4bb8      	ldr	r3, [pc, #736]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9a:	4ab7      	ldr	r2, [pc, #732]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800afa2:	e01a      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa8:	3308      	adds	r3, #8
 800afaa:	2102      	movs	r1, #2
 800afac:	4618      	mov	r0, r3
 800afae:	f002 fb61 	bl	800d674 <RCCEx_PLL2_Config>
 800afb2:	4603      	mov	r3, r0
 800afb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800afb8:	e00f      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afbe:	3328      	adds	r3, #40	; 0x28
 800afc0:	2102      	movs	r1, #2
 800afc2:	4618      	mov	r0, r3
 800afc4:	f002 fc08 	bl	800d7d8 <RCCEx_PLL3_Config>
 800afc8:	4603      	mov	r3, r0
 800afca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800afce:	e004      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afd6:	e000      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800afd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800afe2:	4ba5      	ldr	r3, [pc, #660]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800afea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aff0:	4aa1      	ldr	r2, [pc, #644]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aff2:	430b      	orrs	r3, r1
 800aff4:	6513      	str	r3, [r2, #80]	; 0x50
 800aff6:	e003      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800affc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b00c:	f04f 0900 	mov.w	r9, #0
 800b010:	ea58 0309 	orrs.w	r3, r8, r9
 800b014:	d047      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b01c:	2b04      	cmp	r3, #4
 800b01e:	d82a      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b020:	a201      	add	r2, pc, #4	; (adr r2, 800b028 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b026:	bf00      	nop
 800b028:	0800b03d 	.word	0x0800b03d
 800b02c:	0800b04b 	.word	0x0800b04b
 800b030:	0800b061 	.word	0x0800b061
 800b034:	0800b07f 	.word	0x0800b07f
 800b038:	0800b07f 	.word	0x0800b07f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b03c:	4b8e      	ldr	r3, [pc, #568]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	4a8d      	ldr	r2, [pc, #564]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b048:	e01a      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04e:	3308      	adds	r3, #8
 800b050:	2100      	movs	r1, #0
 800b052:	4618      	mov	r0, r3
 800b054:	f002 fb0e 	bl	800d674 <RCCEx_PLL2_Config>
 800b058:	4603      	mov	r3, r0
 800b05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b05e:	e00f      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b064:	3328      	adds	r3, #40	; 0x28
 800b066:	2100      	movs	r1, #0
 800b068:	4618      	mov	r0, r3
 800b06a:	f002 fbb5 	bl	800d7d8 <RCCEx_PLL3_Config>
 800b06e:	4603      	mov	r3, r0
 800b070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b074:	e004      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b07c:	e000      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b07e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b088:	4b7b      	ldr	r3, [pc, #492]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08c:	f023 0107 	bic.w	r1, r3, #7
 800b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b096:	4a78      	ldr	r2, [pc, #480]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b098:	430b      	orrs	r3, r1
 800b09a:	6513      	str	r3, [r2, #80]	; 0x50
 800b09c:	e003      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b0b2:	f04f 0b00 	mov.w	fp, #0
 800b0b6:	ea5a 030b 	orrs.w	r3, sl, fp
 800b0ba:	d04c      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0c6:	d030      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0cc:	d829      	bhi.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0ce:	2bc0      	cmp	r3, #192	; 0xc0
 800b0d0:	d02d      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b0d2:	2bc0      	cmp	r3, #192	; 0xc0
 800b0d4:	d825      	bhi.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0d6:	2b80      	cmp	r3, #128	; 0x80
 800b0d8:	d018      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b0da:	2b80      	cmp	r3, #128	; 0x80
 800b0dc:	d821      	bhi.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b0e2:	2b40      	cmp	r3, #64	; 0x40
 800b0e4:	d007      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b0e6:	e01c      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0e8:	4b63      	ldr	r3, [pc, #396]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	4a62      	ldr	r2, [pc, #392]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0f4:	e01c      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	4618      	mov	r0, r3
 800b100:	f002 fab8 	bl	800d674 <RCCEx_PLL2_Config>
 800b104:	4603      	mov	r3, r0
 800b106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b10a:	e011      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b110:	3328      	adds	r3, #40	; 0x28
 800b112:	2100      	movs	r1, #0
 800b114:	4618      	mov	r0, r3
 800b116:	f002 fb5f 	bl	800d7d8 <RCCEx_PLL3_Config>
 800b11a:	4603      	mov	r3, r0
 800b11c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b120:	e006      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b128:	e002      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b12a:	bf00      	nop
 800b12c:	e000      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b12e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10a      	bne.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b138:	4b4f      	ldr	r3, [pc, #316]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b13c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b146:	4a4c      	ldr	r2, [pc, #304]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b148:	430b      	orrs	r3, r1
 800b14a:	6513      	str	r3, [r2, #80]	; 0x50
 800b14c:	e003      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b162:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b166:	2300      	movs	r3, #0
 800b168:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b16c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b170:	460b      	mov	r3, r1
 800b172:	4313      	orrs	r3, r2
 800b174:	d053      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b17e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b182:	d035      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b188:	d82e      	bhi.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b18a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b18e:	d031      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b190:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b194:	d828      	bhi.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b19a:	d01a      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b19c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1a0:	d822      	bhi.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b1a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1aa:	d007      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b1ac:	e01c      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1ae:	4b32      	ldr	r3, [pc, #200]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b2:	4a31      	ldr	r2, [pc, #196]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1ba:	e01c      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f002 fa55 	bl	800d674 <RCCEx_PLL2_Config>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b1d0:	e011      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d6:	3328      	adds	r3, #40	; 0x28
 800b1d8:	2100      	movs	r1, #0
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f002 fafc 	bl	800d7d8 <RCCEx_PLL3_Config>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1e6:	e006      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1ee:	e002      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b1f0:	bf00      	nop
 800b1f2:	e000      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10b      	bne.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b1fe:	4b1e      	ldr	r3, [pc, #120]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b202:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b20e:	4a1a      	ldr	r2, [pc, #104]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b210:	430b      	orrs	r3, r1
 800b212:	6593      	str	r3, [r2, #88]	; 0x58
 800b214:	e003      	b.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b22a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b22e:	2300      	movs	r3, #0
 800b230:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b234:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b238:	460b      	mov	r3, r1
 800b23a:	4313      	orrs	r3, r2
 800b23c:	d056      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b24a:	d038      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b24c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b250:	d831      	bhi.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b252:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b256:	d034      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b258:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b25c:	d82b      	bhi.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b25e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b262:	d01d      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b268:	d825      	bhi.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d006      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b26e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b272:	d00a      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b274:	e01f      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b276:	bf00      	nop
 800b278:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b27c:	4ba2      	ldr	r3, [pc, #648]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	4aa1      	ldr	r2, [pc, #644]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b288:	e01c      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b28e:	3308      	adds	r3, #8
 800b290:	2100      	movs	r1, #0
 800b292:	4618      	mov	r0, r3
 800b294:	f002 f9ee 	bl	800d674 <RCCEx_PLL2_Config>
 800b298:	4603      	mov	r3, r0
 800b29a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b29e:	e011      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a4:	3328      	adds	r3, #40	; 0x28
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f002 fa95 	bl	800d7d8 <RCCEx_PLL3_Config>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2b4:	e006      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2bc:	e002      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b2be:	bf00      	nop
 800b2c0:	e000      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b2c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10b      	bne.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b2cc:	4b8e      	ldr	r3, [pc, #568]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2dc:	4a8a      	ldr	r2, [pc, #552]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2de:	430b      	orrs	r3, r1
 800b2e0:	6593      	str	r3, [r2, #88]	; 0x58
 800b2e2:	e003      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b2f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b302:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b306:	460b      	mov	r3, r1
 800b308:	4313      	orrs	r3, r2
 800b30a:	d03a      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b312:	2b30      	cmp	r3, #48	; 0x30
 800b314:	d01f      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b316:	2b30      	cmp	r3, #48	; 0x30
 800b318:	d819      	bhi.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	d00c      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b31e:	2b20      	cmp	r3, #32
 800b320:	d815      	bhi.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d019      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b326:	2b10      	cmp	r3, #16
 800b328:	d111      	bne.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b32a:	4b77      	ldr	r3, [pc, #476]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32e:	4a76      	ldr	r2, [pc, #472]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b336:	e011      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33c:	3308      	adds	r3, #8
 800b33e:	2102      	movs	r1, #2
 800b340:	4618      	mov	r0, r3
 800b342:	f002 f997 	bl	800d674 <RCCEx_PLL2_Config>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b34c:	e006      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b354:	e002      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b356:	bf00      	nop
 800b358:	e000      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10a      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b364:	4b68      	ldr	r3, [pc, #416]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b368:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b372:	4a65      	ldr	r2, [pc, #404]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b374:	430b      	orrs	r3, r1
 800b376:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b378:	e003      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b37e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b38e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b392:	2300      	movs	r3, #0
 800b394:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b398:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b39c:	460b      	mov	r3, r1
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	d051      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3ac:	d035      	beq.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b3ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3b2:	d82e      	bhi.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3b8:	d031      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b3ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3be:	d828      	bhi.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c4:	d01a      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ca:	d822      	bhi.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d4:	d007      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b3d6:	e01c      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3d8:	4b4b      	ldr	r3, [pc, #300]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3dc:	4a4a      	ldr	r2, [pc, #296]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3e4:	e01c      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ea:	3308      	adds	r3, #8
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f002 f940 	bl	800d674 <RCCEx_PLL2_Config>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3fa:	e011      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b400:	3328      	adds	r3, #40	; 0x28
 800b402:	2100      	movs	r1, #0
 800b404:	4618      	mov	r0, r3
 800b406:	f002 f9e7 	bl	800d7d8 <RCCEx_PLL3_Config>
 800b40a:	4603      	mov	r3, r0
 800b40c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b410:	e006      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b418:	e002      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b41a:	bf00      	nop
 800b41c:	e000      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b41e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b428:	4b37      	ldr	r3, [pc, #220]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b436:	4a34      	ldr	r2, [pc, #208]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b438:	430b      	orrs	r3, r1
 800b43a:	6513      	str	r3, [r2, #80]	; 0x50
 800b43c:	e003      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b43e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b456:	2300      	movs	r3, #0
 800b458:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b45c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b460:	460b      	mov	r3, r1
 800b462:	4313      	orrs	r3, r2
 800b464:	d056      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b46c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b470:	d033      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b476:	d82c      	bhi.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b47c:	d02f      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b47e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b482:	d826      	bhi.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b488:	d02b      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b48a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b48e:	d820      	bhi.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b494:	d012      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b49a:	d81a      	bhi.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d022      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b4a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4a4:	d115      	bne.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f002 f8e0 	bl	800d674 <RCCEx_PLL2_Config>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b4ba:	e015      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c0:	3328      	adds	r3, #40	; 0x28
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f002 f987 	bl	800d7d8 <RCCEx_PLL3_Config>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b4d0:	e00a      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4d8:	e006      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4da:	bf00      	nop
 800b4dc:	e004      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4de:	bf00      	nop
 800b4e0:	e002      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4e2:	bf00      	nop
 800b4e4:	e000      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10d      	bne.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b4f0:	4b05      	ldr	r3, [pc, #20]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4fe:	4a02      	ldr	r2, [pc, #8]	; (800b508 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b500:	430b      	orrs	r3, r1
 800b502:	6513      	str	r3, [r2, #80]	; 0x50
 800b504:	e006      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b506:	bf00      	nop
 800b508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b50c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b524:	2300      	movs	r3, #0
 800b526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b52a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b52e:	460b      	mov	r3, r1
 800b530:	4313      	orrs	r3, r2
 800b532:	d055      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b53c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b540:	d033      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b546:	d82c      	bhi.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b54c:	d02f      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b54e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b552:	d826      	bhi.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b554:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b558:	d02b      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b55a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b55e:	d820      	bhi.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b564:	d012      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b56a:	d81a      	bhi.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d022      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b574:	d115      	bne.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57a:	3308      	adds	r3, #8
 800b57c:	2101      	movs	r1, #1
 800b57e:	4618      	mov	r0, r3
 800b580:	f002 f878 	bl	800d674 <RCCEx_PLL2_Config>
 800b584:	4603      	mov	r3, r0
 800b586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b58a:	e015      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b590:	3328      	adds	r3, #40	; 0x28
 800b592:	2101      	movs	r1, #1
 800b594:	4618      	mov	r0, r3
 800b596:	f002 f91f 	bl	800d7d8 <RCCEx_PLL3_Config>
 800b59a:	4603      	mov	r3, r0
 800b59c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b5a0:	e00a      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5a8:	e006      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5aa:	bf00      	nop
 800b5ac:	e004      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5ae:	bf00      	nop
 800b5b0:	e002      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5b2:	bf00      	nop
 800b5b4:	e000      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10b      	bne.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b5c0:	4ba3      	ldr	r3, [pc, #652]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5d0:	4a9f      	ldr	r2, [pc, #636]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5d2:	430b      	orrs	r3, r1
 800b5d4:	6593      	str	r3, [r2, #88]	; 0x58
 800b5d6:	e003      	b.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b5ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	d037      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b60a:	d00e      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b610:	d816      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b612:	2b00      	cmp	r3, #0
 800b614:	d018      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b61a:	d111      	bne.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b61c:	4b8c      	ldr	r3, [pc, #560]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	4a8b      	ldr	r2, [pc, #556]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b628:	e00f      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b62e:	3308      	adds	r3, #8
 800b630:	2101      	movs	r1, #1
 800b632:	4618      	mov	r0, r3
 800b634:	f002 f81e 	bl	800d674 <RCCEx_PLL2_Config>
 800b638:	4603      	mov	r3, r0
 800b63a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b63e:	e004      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b646:	e000      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b64a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b652:	4b7f      	ldr	r3, [pc, #508]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b656:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b660:	4a7b      	ldr	r2, [pc, #492]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b662:	430b      	orrs	r3, r1
 800b664:	6513      	str	r3, [r2, #80]	; 0x50
 800b666:	e003      	b.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b66c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b678:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b67c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b680:	2300      	movs	r3, #0
 800b682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b686:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b68a:	460b      	mov	r3, r1
 800b68c:	4313      	orrs	r3, r2
 800b68e:	d039      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b696:	2b03      	cmp	r3, #3
 800b698:	d81c      	bhi.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b69a:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a0:	0800b6dd 	.word	0x0800b6dd
 800b6a4:	0800b6b1 	.word	0x0800b6b1
 800b6a8:	0800b6bf 	.word	0x0800b6bf
 800b6ac:	0800b6dd 	.word	0x0800b6dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b0:	4b67      	ldr	r3, [pc, #412]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	4a66      	ldr	r2, [pc, #408]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b6bc:	e00f      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	2102      	movs	r1, #2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 ffd4 	bl	800d674 <RCCEx_PLL2_Config>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b6d2:	e004      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6da:	e000      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b6dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10a      	bne.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b6e6:	4b5a      	ldr	r3, [pc, #360]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ea:	f023 0103 	bic.w	r1, r3, #3
 800b6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6f4:	4a56      	ldr	r2, [pc, #344]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f6:	430b      	orrs	r3, r1
 800b6f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6fa:	e003      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b714:	2300      	movs	r3, #0
 800b716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b71a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b71e:	460b      	mov	r3, r1
 800b720:	4313      	orrs	r3, r2
 800b722:	f000 809f 	beq.w	800b864 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b726:	4b4b      	ldr	r3, [pc, #300]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a4a      	ldr	r2, [pc, #296]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b72c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b730:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b732:	f7f8 fc09 	bl	8003f48 <HAL_GetTick>
 800b736:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b73a:	e00b      	b.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b73c:	f7f8 fc04 	bl	8003f48 <HAL_GetTick>
 800b740:	4602      	mov	r2, r0
 800b742:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	2b64      	cmp	r3, #100	; 0x64
 800b74a:	d903      	bls.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b752:	e005      	b.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b754:	4b3f      	ldr	r3, [pc, #252]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0ed      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b764:	2b00      	cmp	r3, #0
 800b766:	d179      	bne.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b768:	4b39      	ldr	r3, [pc, #228]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b76a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b770:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b774:	4053      	eors	r3, r2
 800b776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d015      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b77e:	4b34      	ldr	r3, [pc, #208]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b78a:	4b31      	ldr	r3, [pc, #196]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b78e:	4a30      	ldr	r2, [pc, #192]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b794:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b796:	4b2e      	ldr	r3, [pc, #184]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b79a:	4a2d      	ldr	r2, [pc, #180]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b7a2:	4a2b      	ldr	r2, [pc, #172]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b7a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7b6:	d118      	bne.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7b8:	f7f8 fbc6 	bl	8003f48 <HAL_GetTick>
 800b7bc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7c0:	e00d      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7c2:	f7f8 fbc1 	bl	8003f48 <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b7cc:	1ad2      	subs	r2, r2, r3
 800b7ce:	f241 3388 	movw	r3, #5000	; 0x1388
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d903      	bls.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b7dc:	e005      	b.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7de:	4b1c      	ldr	r3, [pc, #112]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e2:	f003 0302 	and.w	r3, r3, #2
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d0eb      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d129      	bne.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b802:	d10e      	bne.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b804:	4b12      	ldr	r3, [pc, #72]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b810:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b814:	091a      	lsrs	r2, r3, #4
 800b816:	4b10      	ldr	r3, [pc, #64]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b818:	4013      	ands	r3, r2
 800b81a:	4a0d      	ldr	r2, [pc, #52]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b81c:	430b      	orrs	r3, r1
 800b81e:	6113      	str	r3, [r2, #16]
 800b820:	e005      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b822:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	4a0a      	ldr	r2, [pc, #40]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b828:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b82c:	6113      	str	r3, [r2, #16]
 800b82e:	4b08      	ldr	r3, [pc, #32]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b830:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b83a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b83e:	4a04      	ldr	r2, [pc, #16]	; (800b850 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b840:	430b      	orrs	r3, r1
 800b842:	6713      	str	r3, [r2, #112]	; 0x70
 800b844:	e00e      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b84a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b84e:	e009      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b850:	58024400 	.word	0x58024400
 800b854:	58024800 	.word	0x58024800
 800b858:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b85c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	f002 0301 	and.w	r3, r2, #1
 800b870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b874:	2300      	movs	r3, #0
 800b876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b87a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b87e:	460b      	mov	r3, r1
 800b880:	4313      	orrs	r3, r2
 800b882:	f000 8089 	beq.w	800b998 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b88c:	2b28      	cmp	r3, #40	; 0x28
 800b88e:	d86b      	bhi.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b890:	a201      	add	r2, pc, #4	; (adr r2, 800b898 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b896:	bf00      	nop
 800b898:	0800b971 	.word	0x0800b971
 800b89c:	0800b969 	.word	0x0800b969
 800b8a0:	0800b969 	.word	0x0800b969
 800b8a4:	0800b969 	.word	0x0800b969
 800b8a8:	0800b969 	.word	0x0800b969
 800b8ac:	0800b969 	.word	0x0800b969
 800b8b0:	0800b969 	.word	0x0800b969
 800b8b4:	0800b969 	.word	0x0800b969
 800b8b8:	0800b93d 	.word	0x0800b93d
 800b8bc:	0800b969 	.word	0x0800b969
 800b8c0:	0800b969 	.word	0x0800b969
 800b8c4:	0800b969 	.word	0x0800b969
 800b8c8:	0800b969 	.word	0x0800b969
 800b8cc:	0800b969 	.word	0x0800b969
 800b8d0:	0800b969 	.word	0x0800b969
 800b8d4:	0800b969 	.word	0x0800b969
 800b8d8:	0800b953 	.word	0x0800b953
 800b8dc:	0800b969 	.word	0x0800b969
 800b8e0:	0800b969 	.word	0x0800b969
 800b8e4:	0800b969 	.word	0x0800b969
 800b8e8:	0800b969 	.word	0x0800b969
 800b8ec:	0800b969 	.word	0x0800b969
 800b8f0:	0800b969 	.word	0x0800b969
 800b8f4:	0800b969 	.word	0x0800b969
 800b8f8:	0800b971 	.word	0x0800b971
 800b8fc:	0800b969 	.word	0x0800b969
 800b900:	0800b969 	.word	0x0800b969
 800b904:	0800b969 	.word	0x0800b969
 800b908:	0800b969 	.word	0x0800b969
 800b90c:	0800b969 	.word	0x0800b969
 800b910:	0800b969 	.word	0x0800b969
 800b914:	0800b969 	.word	0x0800b969
 800b918:	0800b971 	.word	0x0800b971
 800b91c:	0800b969 	.word	0x0800b969
 800b920:	0800b969 	.word	0x0800b969
 800b924:	0800b969 	.word	0x0800b969
 800b928:	0800b969 	.word	0x0800b969
 800b92c:	0800b969 	.word	0x0800b969
 800b930:	0800b969 	.word	0x0800b969
 800b934:	0800b969 	.word	0x0800b969
 800b938:	0800b971 	.word	0x0800b971
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b940:	3308      	adds	r3, #8
 800b942:	2101      	movs	r1, #1
 800b944:	4618      	mov	r0, r3
 800b946:	f001 fe95 	bl	800d674 <RCCEx_PLL2_Config>
 800b94a:	4603      	mov	r3, r0
 800b94c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b950:	e00f      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b956:	3328      	adds	r3, #40	; 0x28
 800b958:	2101      	movs	r1, #1
 800b95a:	4618      	mov	r0, r3
 800b95c:	f001 ff3c 	bl	800d7d8 <RCCEx_PLL3_Config>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b966:	e004      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b96e:	e000      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b970:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10a      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b97a:	4bbf      	ldr	r3, [pc, #764]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b97e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b988:	4abb      	ldr	r2, [pc, #748]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b98a:	430b      	orrs	r3, r1
 800b98c:	6553      	str	r3, [r2, #84]	; 0x54
 800b98e:	e003      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	f002 0302 	and.w	r3, r2, #2
 800b9a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	d041      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9be:	2b05      	cmp	r3, #5
 800b9c0:	d824      	bhi.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b9c2:	a201      	add	r2, pc, #4	; (adr r2, 800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c8:	0800ba15 	.word	0x0800ba15
 800b9cc:	0800b9e1 	.word	0x0800b9e1
 800b9d0:	0800b9f7 	.word	0x0800b9f7
 800b9d4:	0800ba15 	.word	0x0800ba15
 800b9d8:	0800ba15 	.word	0x0800ba15
 800b9dc:	0800ba15 	.word	0x0800ba15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 fe43 	bl	800d674 <RCCEx_PLL2_Config>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b9f4:	e00f      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fa:	3328      	adds	r3, #40	; 0x28
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f001 feea 	bl	800d7d8 <RCCEx_PLL3_Config>
 800ba04:	4603      	mov	r3, r0
 800ba06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba0a:	e004      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba12:	e000      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ba14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ba1e:	4b96      	ldr	r3, [pc, #600]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba22:	f023 0107 	bic.w	r1, r3, #7
 800ba26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba2c:	4a92      	ldr	r2, [pc, #584]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba2e:	430b      	orrs	r3, r1
 800ba30:	6553      	str	r3, [r2, #84]	; 0x54
 800ba32:	e003      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f002 0304 	and.w	r3, r2, #4
 800ba48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	d044      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba64:	2b05      	cmp	r3, #5
 800ba66:	d825      	bhi.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ba68:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ba6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6e:	bf00      	nop
 800ba70:	0800babd 	.word	0x0800babd
 800ba74:	0800ba89 	.word	0x0800ba89
 800ba78:	0800ba9f 	.word	0x0800ba9f
 800ba7c:	0800babd 	.word	0x0800babd
 800ba80:	0800babd 	.word	0x0800babd
 800ba84:	0800babd 	.word	0x0800babd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	2101      	movs	r1, #1
 800ba90:	4618      	mov	r0, r3
 800ba92:	f001 fdef 	bl	800d674 <RCCEx_PLL2_Config>
 800ba96:	4603      	mov	r3, r0
 800ba98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba9c:	e00f      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa2:	3328      	adds	r3, #40	; 0x28
 800baa4:	2101      	movs	r1, #1
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 fe96 	bl	800d7d8 <RCCEx_PLL3_Config>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bab2:	e004      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baba:	e000      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800babc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800babe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10b      	bne.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bac6:	4b6c      	ldr	r3, [pc, #432]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baca:	f023 0107 	bic.w	r1, r3, #7
 800bace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bad6:	4a68      	ldr	r2, [pc, #416]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bad8:	430b      	orrs	r3, r1
 800bada:	6593      	str	r3, [r2, #88]	; 0x58
 800badc:	e003      	b.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f002 0320 	and.w	r3, r2, #32
 800baf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800baf6:	2300      	movs	r3, #0
 800baf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bafc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb00:	460b      	mov	r3, r1
 800bb02:	4313      	orrs	r3, r2
 800bb04:	d055      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb12:	d033      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bb14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb18:	d82c      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb1e:	d02f      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bb20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb24:	d826      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb2a:	d02b      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bb2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb30:	d820      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb36:	d012      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bb38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb3c:	d81a      	bhi.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d022      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bb42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb46:	d115      	bne.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	2100      	movs	r1, #0
 800bb50:	4618      	mov	r0, r3
 800bb52:	f001 fd8f 	bl	800d674 <RCCEx_PLL2_Config>
 800bb56:	4603      	mov	r3, r0
 800bb58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb5c:	e015      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb62:	3328      	adds	r3, #40	; 0x28
 800bb64:	2102      	movs	r1, #2
 800bb66:	4618      	mov	r0, r3
 800bb68:	f001 fe36 	bl	800d7d8 <RCCEx_PLL3_Config>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb72:	e00a      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb7a:	e006      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb7c:	bf00      	nop
 800bb7e:	e004      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb80:	bf00      	nop
 800bb82:	e002      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb84:	bf00      	nop
 800bb86:	e000      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb92:	4b39      	ldr	r3, [pc, #228]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bba2:	4a35      	ldr	r2, [pc, #212]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bba4:	430b      	orrs	r3, r1
 800bba6:	6553      	str	r3, [r2, #84]	; 0x54
 800bba8:	e003      	b.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bbbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bbc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	d058      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbde:	d033      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bbe0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbe4:	d82c      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbea:	d02f      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bbec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbf0:	d826      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbf6:	d02b      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bbf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbfc:	d820      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc02:	d012      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bc04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc08:	d81a      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d022      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bc0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc12:	d115      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc18:	3308      	adds	r3, #8
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 fd29 	bl	800d674 <RCCEx_PLL2_Config>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc28:	e015      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2e:	3328      	adds	r3, #40	; 0x28
 800bc30:	2102      	movs	r1, #2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f001 fdd0 	bl	800d7d8 <RCCEx_PLL3_Config>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc3e:	e00a      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc46:	e006      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc48:	bf00      	nop
 800bc4a:	e004      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc4c:	bf00      	nop
 800bc4e:	e002      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc50:	bf00      	nop
 800bc52:	e000      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10e      	bne.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc5e:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc62:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc6e:	4a02      	ldr	r2, [pc, #8]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc70:	430b      	orrs	r3, r1
 800bc72:	6593      	str	r3, [r2, #88]	; 0x58
 800bc74:	e006      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bc76:	bf00      	nop
 800bc78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bc90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc94:	2300      	movs	r3, #0
 800bc96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4313      	orrs	r3, r2
 800bca2:	d055      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcb0:	d033      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bcb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcb6:	d82c      	bhi.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcbc:	d02f      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bcbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcc2:	d826      	bhi.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcc8:	d02b      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bcca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcce:	d820      	bhi.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcd4:	d012      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bcd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcda:	d81a      	bhi.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d022      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bce4:	d115      	bne.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcea:	3308      	adds	r3, #8
 800bcec:	2100      	movs	r1, #0
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f001 fcc0 	bl	800d674 <RCCEx_PLL2_Config>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bcfa:	e015      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd00:	3328      	adds	r3, #40	; 0x28
 800bd02:	2102      	movs	r1, #2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f001 fd67 	bl	800d7d8 <RCCEx_PLL3_Config>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd10:	e00a      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd18:	e006      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd1a:	bf00      	nop
 800bd1c:	e004      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd1e:	bf00      	nop
 800bd20:	e002      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd22:	bf00      	nop
 800bd24:	e000      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10b      	bne.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bd30:	4ba1      	ldr	r3, [pc, #644]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd34:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bd38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd40:	4a9d      	ldr	r2, [pc, #628]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd42:	430b      	orrs	r3, r1
 800bd44:	6593      	str	r3, [r2, #88]	; 0x58
 800bd46:	e003      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f002 0308 	and.w	r3, r2, #8
 800bd5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd60:	2300      	movs	r3, #0
 800bd62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	d01e      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd7c:	d10c      	bne.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd82:	3328      	adds	r3, #40	; 0x28
 800bd84:	2102      	movs	r1, #2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 fd26 	bl	800d7d8 <RCCEx_PLL3_Config>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d002      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd98:	4b87      	ldr	r3, [pc, #540]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bda8:	4a83      	ldr	r2, [pc, #524]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdaa:	430b      	orrs	r3, r1
 800bdac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bdae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f002 0310 	and.w	r3, r2, #16
 800bdba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdc4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	d01e      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdda:	d10c      	bne.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde0:	3328      	adds	r3, #40	; 0x28
 800bde2:	2102      	movs	r1, #2
 800bde4:	4618      	mov	r0, r3
 800bde6:	f001 fcf7 	bl	800d7d8 <RCCEx_PLL3_Config>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d002      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bdf6:	4b70      	ldr	r3, [pc, #448]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bdfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be06:	4a6c      	ldr	r2, [pc, #432]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be08:	430b      	orrs	r3, r1
 800be0a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800be18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be1c:	2300      	movs	r3, #0
 800be1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800be26:	460b      	mov	r3, r1
 800be28:	4313      	orrs	r3, r2
 800be2a:	d03e      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800be2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be38:	d022      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800be3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be3e:	d81b      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800be44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be48:	d00b      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800be4a:	e015      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be50:	3308      	adds	r3, #8
 800be52:	2100      	movs	r1, #0
 800be54:	4618      	mov	r0, r3
 800be56:	f001 fc0d 	bl	800d674 <RCCEx_PLL2_Config>
 800be5a:	4603      	mov	r3, r0
 800be5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be60:	e00f      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be66:	3328      	adds	r3, #40	; 0x28
 800be68:	2102      	movs	r1, #2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 fcb4 	bl	800d7d8 <RCCEx_PLL3_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be76:	e004      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be7e:	e000      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800be80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10b      	bne.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be8a:	4b4b      	ldr	r3, [pc, #300]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800be92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be9a:	4a47      	ldr	r2, [pc, #284]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be9c:	430b      	orrs	r3, r1
 800be9e:	6593      	str	r3, [r2, #88]	; 0x58
 800bea0:	e003      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800beaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800beb6:	67bb      	str	r3, [r7, #120]	; 0x78
 800beb8:	2300      	movs	r3, #0
 800beba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bebc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bec0:	460b      	mov	r3, r1
 800bec2:	4313      	orrs	r3, r2
 800bec4:	d03b      	beq.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bece:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bed2:	d01f      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bed4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bed8:	d818      	bhi.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800beda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bede:	d003      	beq.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bee4:	d007      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bee6:	e011      	b.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bee8:	4b33      	ldr	r3, [pc, #204]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	4a32      	ldr	r2, [pc, #200]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bef4:	e00f      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800befa:	3328      	adds	r3, #40	; 0x28
 800befc:	2101      	movs	r1, #1
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 fc6a 	bl	800d7d8 <RCCEx_PLL3_Config>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf0a:	e004      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf12:	e000      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bf14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10b      	bne.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf1e:	4b26      	ldr	r3, [pc, #152]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bf26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf2e:	4a22      	ldr	r2, [pc, #136]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf30:	430b      	orrs	r3, r1
 800bf32:	6553      	str	r3, [r2, #84]	; 0x54
 800bf34:	e003      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bf4a:	673b      	str	r3, [r7, #112]	; 0x70
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	677b      	str	r3, [r7, #116]	; 0x74
 800bf50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bf54:	460b      	mov	r3, r1
 800bf56:	4313      	orrs	r3, r2
 800bf58:	d034      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bf5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bf64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf68:	d007      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bf6a:	e011      	b.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf6c:	4b12      	ldr	r3, [pc, #72]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf70:	4a11      	ldr	r2, [pc, #68]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf78:	e00e      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7e:	3308      	adds	r3, #8
 800bf80:	2102      	movs	r1, #2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f001 fb76 	bl	800d674 <RCCEx_PLL2_Config>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf8e:	e003      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10d      	bne.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bfa0:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bfa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfae:	4a02      	ldr	r2, [pc, #8]	; (800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfb0:	430b      	orrs	r3, r1
 800bfb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfb4:	e006      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bfb6:	bf00      	nop
 800bfb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bfc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bfd0:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfd6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	d00c      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bfe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe4:	3328      	adds	r3, #40	; 0x28
 800bfe6:	2102      	movs	r1, #2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f001 fbf5 	bl	800d7d8 <RCCEx_PLL3_Config>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c006:	663b      	str	r3, [r7, #96]	; 0x60
 800c008:	2300      	movs	r3, #0
 800c00a:	667b      	str	r3, [r7, #100]	; 0x64
 800c00c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c010:	460b      	mov	r3, r1
 800c012:	4313      	orrs	r3, r2
 800c014:	d038      	beq.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c01e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c022:	d018      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c028:	d811      	bhi.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c02a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c02e:	d014      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c034:	d80b      	bhi.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c036:	2b00      	cmp	r3, #0
 800c038:	d011      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c03e:	d106      	bne.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c040:	4bc3      	ldr	r3, [pc, #780]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c044:	4ac2      	ldr	r2, [pc, #776]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c04a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c04c:	e008      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c054:	e004      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c056:	bf00      	nop
 800c058:	e002      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c05a:	bf00      	nop
 800c05c:	e000      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c05e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10b      	bne.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c068:	4bb9      	ldr	r3, [pc, #740]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c078:	4ab5      	ldr	r2, [pc, #724]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c07a:	430b      	orrs	r3, r1
 800c07c:	6553      	str	r3, [r2, #84]	; 0x54
 800c07e:	e003      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c094:	65bb      	str	r3, [r7, #88]	; 0x58
 800c096:	2300      	movs	r3, #0
 800c098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c09a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c09e:	460b      	mov	r3, r1
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	d009      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c0a4:	4baa      	ldr	r3, [pc, #680]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0b2:	4aa7      	ldr	r2, [pc, #668]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0b4:	430b      	orrs	r3, r1
 800c0b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c0c4:	653b      	str	r3, [r7, #80]	; 0x50
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	657b      	str	r3, [r7, #84]	; 0x54
 800c0ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	d00a      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c0d4:	4b9e      	ldr	r3, [pc, #632]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c0e4:	4a9a      	ldr	r2, [pc, #616]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0e6:	430b      	orrs	r3, r1
 800c0e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c0f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c100:	460b      	mov	r3, r1
 800c102:	4313      	orrs	r3, r2
 800c104:	d009      	beq.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c106:	4b92      	ldr	r3, [pc, #584]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c114:	4a8e      	ldr	r2, [pc, #568]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c116:	430b      	orrs	r3, r1
 800c118:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c126:	643b      	str	r3, [r7, #64]	; 0x40
 800c128:	2300      	movs	r3, #0
 800c12a:	647b      	str	r3, [r7, #68]	; 0x44
 800c12c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c130:	460b      	mov	r3, r1
 800c132:	4313      	orrs	r3, r2
 800c134:	d00e      	beq.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c136:	4b86      	ldr	r3, [pc, #536]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	4a85      	ldr	r2, [pc, #532]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c13c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c140:	6113      	str	r3, [r2, #16]
 800c142:	4b83      	ldr	r3, [pc, #524]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c144:	6919      	ldr	r1, [r3, #16]
 800c146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c14a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c14e:	4a80      	ldr	r2, [pc, #512]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c150:	430b      	orrs	r3, r1
 800c152:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c160:	63bb      	str	r3, [r7, #56]	; 0x38
 800c162:	2300      	movs	r3, #0
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c166:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c16a:	460b      	mov	r3, r1
 800c16c:	4313      	orrs	r3, r2
 800c16e:	d009      	beq.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c170:	4b77      	ldr	r3, [pc, #476]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c174:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c17e:	4a74      	ldr	r2, [pc, #464]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c180:	430b      	orrs	r3, r1
 800c182:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c190:	633b      	str	r3, [r7, #48]	; 0x30
 800c192:	2300      	movs	r3, #0
 800c194:	637b      	str	r3, [r7, #52]	; 0x34
 800c196:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c19a:	460b      	mov	r3, r1
 800c19c:	4313      	orrs	r3, r2
 800c19e:	d00a      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c1a0:	4b6b      	ldr	r3, [pc, #428]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1b0:	4a67      	ldr	r2, [pc, #412]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1b2:	430b      	orrs	r3, r1
 800c1b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	2100      	movs	r1, #0
 800c1c0:	62b9      	str	r1, [r7, #40]	; 0x28
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	d011      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	2100      	movs	r1, #0
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 fa4a 	bl	800d674 <RCCEx_PLL2_Config>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d003      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	2100      	movs	r1, #0
 800c200:	6239      	str	r1, [r7, #32]
 800c202:	f003 0302 	and.w	r3, r3, #2
 800c206:	627b      	str	r3, [r7, #36]	; 0x24
 800c208:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c20c:	460b      	mov	r3, r1
 800c20e:	4313      	orrs	r3, r2
 800c210:	d011      	beq.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c216:	3308      	adds	r3, #8
 800c218:	2101      	movs	r1, #1
 800c21a:	4618      	mov	r0, r3
 800c21c:	f001 fa2a 	bl	800d674 <RCCEx_PLL2_Config>
 800c220:	4603      	mov	r3, r0
 800c222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23e:	2100      	movs	r1, #0
 800c240:	61b9      	str	r1, [r7, #24]
 800c242:	f003 0304 	and.w	r3, r3, #4
 800c246:	61fb      	str	r3, [r7, #28]
 800c248:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c24c:	460b      	mov	r3, r1
 800c24e:	4313      	orrs	r3, r2
 800c250:	d011      	beq.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c256:	3308      	adds	r3, #8
 800c258:	2102      	movs	r1, #2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f001 fa0a 	bl	800d674 <RCCEx_PLL2_Config>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d003      	beq.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c26e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	2100      	movs	r1, #0
 800c280:	6139      	str	r1, [r7, #16]
 800c282:	f003 0308 	and.w	r3, r3, #8
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c28c:	460b      	mov	r3, r1
 800c28e:	4313      	orrs	r3, r2
 800c290:	d011      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c296:	3328      	adds	r3, #40	; 0x28
 800c298:	2100      	movs	r1, #0
 800c29a:	4618      	mov	r0, r3
 800c29c:	f001 fa9c 	bl	800d7d8 <RCCEx_PLL3_Config>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	2100      	movs	r1, #0
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	f003 0310 	and.w	r3, r3, #16
 800c2c6:	60fb      	str	r3, [r7, #12]
 800c2c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	d011      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d6:	3328      	adds	r3, #40	; 0x28
 800c2d8:	2101      	movs	r1, #1
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f001 fa7c 	bl	800d7d8 <RCCEx_PLL3_Config>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	2100      	movs	r1, #0
 800c300:	6039      	str	r1, [r7, #0]
 800c302:	f003 0320 	and.w	r3, r3, #32
 800c306:	607b      	str	r3, [r7, #4]
 800c308:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c30c:	460b      	mov	r3, r1
 800c30e:	4313      	orrs	r3, r2
 800c310:	d011      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c316:	3328      	adds	r3, #40	; 0x28
 800c318:	2102      	movs	r1, #2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f001 fa5c 	bl	800d7d8 <RCCEx_PLL3_Config>
 800c320:	4603      	mov	r3, r0
 800c322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c336:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	e000      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
}
 800c344:	4618      	mov	r0, r3
 800c346:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c34a:	46bd      	mov	sp, r7
 800c34c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c350:	58024400 	.word	0x58024400

0800c354 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b090      	sub	sp, #64	; 0x40
 800c358:	af00      	add	r7, sp, #0
 800c35a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c35e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c362:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c366:	430b      	orrs	r3, r1
 800c368:	f040 8094 	bne.w	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c36c:	4b9e      	ldr	r3, [pc, #632]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c36e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c370:	f003 0307 	and.w	r3, r3, #7
 800c374:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	2b04      	cmp	r3, #4
 800c37a:	f200 8087 	bhi.w	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c37e:	a201      	add	r2, pc, #4	; (adr r2, 800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c384:	0800c399 	.word	0x0800c399
 800c388:	0800c3c1 	.word	0x0800c3c1
 800c38c:	0800c3e9 	.word	0x0800c3e9
 800c390:	0800c485 	.word	0x0800c485
 800c394:	0800c411 	.word	0x0800c411
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c398:	4b93      	ldr	r3, [pc, #588]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3a4:	d108      	bne.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f001 f810 	bl	800d3d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3b4:	f000 bd45 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3bc:	f000 bd41 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3c0:	4b89      	ldr	r3, [pc, #548]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3cc:	d108      	bne.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3ce:	f107 0318 	add.w	r3, r7, #24
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 fd54 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3dc:	f000 bd31 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e4:	f000 bd2d 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3e8:	4b7f      	ldr	r3, [pc, #508]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3f4:	d108      	bne.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3f6:	f107 030c 	add.w	r3, r7, #12
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fe94 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c404:	f000 bd1d 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40c:	f000 bd19 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c410:	4b75      	ldr	r3, [pc, #468]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c414:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c418:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c41a:	4b73      	ldr	r3, [pc, #460]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 0304 	and.w	r3, r3, #4
 800c422:	2b04      	cmp	r3, #4
 800c424:	d10c      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d109      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c42c:	4b6e      	ldr	r3, [pc, #440]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	08db      	lsrs	r3, r3, #3
 800c432:	f003 0303 	and.w	r3, r3, #3
 800c436:	4a6d      	ldr	r2, [pc, #436]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c438:	fa22 f303 	lsr.w	r3, r2, r3
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c43e:	e01f      	b.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c440:	4b69      	ldr	r3, [pc, #420]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c44c:	d106      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c454:	d102      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c456:	4b66      	ldr	r3, [pc, #408]	; (800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c45a:	e011      	b.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c45c:	4b62      	ldr	r3, [pc, #392]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c468:	d106      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c470:	d102      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c472:	4b60      	ldr	r3, [pc, #384]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c474:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c476:	e003      	b.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c47c:	f000 bce1 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c480:	f000 bcdf 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c484:	4b5c      	ldr	r3, [pc, #368]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c488:	f000 bcdb 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c490:	f000 bcd7 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c494:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c498:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c49c:	430b      	orrs	r3, r1
 800c49e:	f040 80ad 	bne.w	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c4a2:	4b51      	ldr	r3, [pc, #324]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c4aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b2:	d056      	beq.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ba:	f200 8090 	bhi.w	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c0:	2bc0      	cmp	r3, #192	; 0xc0
 800c4c2:	f000 8088 	beq.w	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	2bc0      	cmp	r3, #192	; 0xc0
 800c4ca:	f200 8088 	bhi.w	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	2b80      	cmp	r3, #128	; 0x80
 800c4d2:	d032      	beq.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d6:	2b80      	cmp	r3, #128	; 0x80
 800c4d8:	f200 8081 	bhi.w	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	2b40      	cmp	r3, #64	; 0x40
 800c4e6:	d014      	beq.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c4e8:	e079      	b.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4ea:	4b3f      	ldr	r3, [pc, #252]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4f6:	d108      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 ff67 	bl	800d3d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c506:	f000 bc9c 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50e:	f000 bc98 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c512:	4b35      	ldr	r3, [pc, #212]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c51a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c51e:	d108      	bne.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c520:	f107 0318 	add.w	r3, r7, #24
 800c524:	4618      	mov	r0, r3
 800c526:	f000 fcab 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c52e:	f000 bc88 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c536:	f000 bc84 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c53a:	4b2b      	ldr	r3, [pc, #172]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c546:	d108      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c548:	f107 030c 	add.w	r3, r7, #12
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 fdeb 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c556:	f000 bc74 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c55e:	f000 bc70 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c562:	4b21      	ldr	r3, [pc, #132]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c56a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c56c:	4b1e      	ldr	r3, [pc, #120]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f003 0304 	and.w	r3, r3, #4
 800c574:	2b04      	cmp	r3, #4
 800c576:	d10c      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d109      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c57e:	4b1a      	ldr	r3, [pc, #104]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	08db      	lsrs	r3, r3, #3
 800c584:	f003 0303 	and.w	r3, r3, #3
 800c588:	4a18      	ldr	r2, [pc, #96]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c58a:	fa22 f303 	lsr.w	r3, r2, r3
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c590:	e01f      	b.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c592:	4b15      	ldr	r3, [pc, #84]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59e:	d106      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5a6:	d102      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5a8:	4b11      	ldr	r3, [pc, #68]	; (800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ac:	e011      	b.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5ae:	4b0e      	ldr	r3, [pc, #56]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ba:	d106      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5c2:	d102      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5c4:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c8:	e003      	b.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5ce:	f000 bc38 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5d2:	f000 bc36 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5d6:	4b08      	ldr	r3, [pc, #32]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5da:	f000 bc32 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e2:	f000 bc2e 	b.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5e6:	bf00      	nop
 800c5e8:	58024400 	.word	0x58024400
 800c5ec:	03d09000 	.word	0x03d09000
 800c5f0:	003d0900 	.word	0x003d0900
 800c5f4:	017d7840 	.word	0x017d7840
 800c5f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c5fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c600:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c604:	430b      	orrs	r3, r1
 800c606:	f040 809c 	bne.w	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c60a:	4b9e      	ldr	r3, [pc, #632]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c60e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c612:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c616:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c61a:	d054      	beq.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c622:	f200 808b 	bhi.w	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c62c:	f000 8083 	beq.w	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c636:	f200 8081 	bhi.w	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c640:	d02f      	beq.n	800c6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c648:	d878      	bhi.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d004      	beq.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c656:	d012      	beq.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c658:	e070      	b.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c65a:	4b8a      	ldr	r3, [pc, #552]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c666:	d107      	bne.n	800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 feaf 	bl	800d3d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c676:	e3e4      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67c:	e3e1      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c67e:	4b81      	ldr	r3, [pc, #516]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c68a:	d107      	bne.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c68c:	f107 0318 	add.w	r3, r7, #24
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fbf5 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c69a:	e3d2      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a0:	e3cf      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6a2:	4b78      	ldr	r3, [pc, #480]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ae:	d107      	bne.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6b0:	f107 030c 	add.w	r3, r7, #12
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fd37 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6be:	e3c0      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c4:	e3bd      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6c6:	4b6f      	ldr	r3, [pc, #444]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6d0:	4b6c      	ldr	r3, [pc, #432]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0304 	and.w	r3, r3, #4
 800c6d8:	2b04      	cmp	r3, #4
 800c6da:	d10c      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d109      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6e2:	4b68      	ldr	r3, [pc, #416]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	08db      	lsrs	r3, r3, #3
 800c6e8:	f003 0303 	and.w	r3, r3, #3
 800c6ec:	4a66      	ldr	r2, [pc, #408]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f4:	e01e      	b.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6f6:	4b63      	ldr	r3, [pc, #396]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c702:	d106      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c70a:	d102      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c70c:	4b5f      	ldr	r3, [pc, #380]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c710:	e010      	b.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c712:	4b5c      	ldr	r3, [pc, #368]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c71a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c71e:	d106      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c726:	d102      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c728:	4b59      	ldr	r3, [pc, #356]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72c:	e002      	b.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c732:	e386      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c734:	e385      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c736:	4b57      	ldr	r3, [pc, #348]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73a:	e382      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c740:	e37f      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c746:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c74a:	430b      	orrs	r3, r1
 800c74c:	f040 80a7 	bne.w	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c750:	4b4c      	ldr	r3, [pc, #304]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c754:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c758:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c760:	d055      	beq.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c768:	f200 8096 	bhi.w	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c772:	f000 8084 	beq.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c77c:	f200 808c 	bhi.w	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c786:	d030      	beq.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c78e:	f200 8083 	bhi.w	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	2b00      	cmp	r3, #0
 800c796:	d004      	beq.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c79e:	d012      	beq.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c7a0:	e07a      	b.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7a2:	4b38      	ldr	r3, [pc, #224]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7ae:	d107      	bne.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fe0b 	bl	800d3d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7be:	e340      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c4:	e33d      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7c6:	4b2f      	ldr	r3, [pc, #188]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7d2:	d107      	bne.n	800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7d4:	f107 0318 	add.w	r3, r7, #24
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 fb51 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e2:	e32e      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e8:	e32b      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7ea:	4b26      	ldr	r3, [pc, #152]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7f6:	d107      	bne.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7f8:	f107 030c 	add.w	r3, r7, #12
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fc93 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c806:	e31c      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80c:	e319      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c80e:	4b1d      	ldr	r3, [pc, #116]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c816:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c818:	4b1a      	ldr	r3, [pc, #104]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b04      	cmp	r3, #4
 800c822:	d10c      	bne.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c826:	2b00      	cmp	r3, #0
 800c828:	d109      	bne.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c82a:	4b16      	ldr	r3, [pc, #88]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	08db      	lsrs	r3, r3, #3
 800c830:	f003 0303 	and.w	r3, r3, #3
 800c834:	4a14      	ldr	r2, [pc, #80]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c836:	fa22 f303 	lsr.w	r3, r2, r3
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c83c:	e01e      	b.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c83e:	4b11      	ldr	r3, [pc, #68]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c84a:	d106      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c852:	d102      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c854:	4b0d      	ldr	r3, [pc, #52]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c858:	e010      	b.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c85a:	4b0a      	ldr	r3, [pc, #40]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c866:	d106      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c86a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c86e:	d102      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c870:	4b07      	ldr	r3, [pc, #28]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c874:	e002      	b.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c87a:	e2e2      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c87c:	e2e1      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c87e:	4b05      	ldr	r3, [pc, #20]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c882:	e2de      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c884:	58024400 	.word	0x58024400
 800c888:	03d09000 	.word	0x03d09000
 800c88c:	003d0900 	.word	0x003d0900
 800c890:	017d7840 	.word	0x017d7840
 800c894:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89c:	e2d1      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c89e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	f040 809c 	bne.w	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c8ac:	4b93      	ldr	r3, [pc, #588]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c8b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8bc:	d054      	beq.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8c4:	f200 808b 	bhi.w	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8ce:	f000 8083 	beq.w	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8d8:	f200 8081 	bhi.w	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8e2:	d02f      	beq.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8ea:	d878      	bhi.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d004      	beq.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8f8:	d012      	beq.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c8fa:	e070      	b.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8fc:	4b7f      	ldr	r3, [pc, #508]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c908:	d107      	bne.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c90a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c90e:	4618      	mov	r0, r3
 800c910:	f000 fd5e 	bl	800d3d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c918:	e293      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c91e:	e290      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c920:	4b76      	ldr	r3, [pc, #472]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c92c:	d107      	bne.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c92e:	f107 0318 	add.w	r3, r7, #24
 800c932:	4618      	mov	r0, r3
 800c934:	f000 faa4 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c93c:	e281      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c93e:	2300      	movs	r3, #0
 800c940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c942:	e27e      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c944:	4b6d      	ldr	r3, [pc, #436]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c94c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c950:	d107      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c952:	f107 030c 	add.w	r3, r7, #12
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fbe6 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c960:	e26f      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c966:	e26c      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c968:	4b64      	ldr	r3, [pc, #400]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c96c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c970:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c972:	4b62      	ldr	r3, [pc, #392]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f003 0304 	and.w	r3, r3, #4
 800c97a:	2b04      	cmp	r3, #4
 800c97c:	d10c      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c980:	2b00      	cmp	r3, #0
 800c982:	d109      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c984:	4b5d      	ldr	r3, [pc, #372]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	08db      	lsrs	r3, r3, #3
 800c98a:	f003 0303 	and.w	r3, r3, #3
 800c98e:	4a5c      	ldr	r2, [pc, #368]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c990:	fa22 f303 	lsr.w	r3, r2, r3
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c996:	e01e      	b.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c998:	4b58      	ldr	r3, [pc, #352]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9a4:	d106      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9ac:	d102      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9ae:	4b55      	ldr	r3, [pc, #340]	; (800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b2:	e010      	b.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9b4:	4b51      	ldr	r3, [pc, #324]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9c0:	d106      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9c8:	d102      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9ca:	4b4f      	ldr	r3, [pc, #316]	; (800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ce:	e002      	b.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9d4:	e235      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9d6:	e234      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9d8:	4b4c      	ldr	r3, [pc, #304]	; (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9dc:	e231      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e2:	e22e      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c9ec:	430b      	orrs	r3, r1
 800c9ee:	f040 808f 	bne.w	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c9f2:	4b42      	ldr	r3, [pc, #264]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c9fa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca02:	d06b      	beq.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca0a:	d874      	bhi.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca12:	d056      	beq.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca1a:	d86c      	bhi.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca22:	d03b      	beq.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca2a:	d864      	bhi.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca32:	d021      	beq.n	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca3a:	d85c      	bhi.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca48:	d004      	beq.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ca4a:	e054      	b.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ca4c:	f7fe fa0a 	bl	800ae64 <HAL_RCC_GetPCLK1Freq>
 800ca50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca52:	e1f6      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca54:	4b29      	ldr	r3, [pc, #164]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca60:	d107      	bne.n	800ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca62:	f107 0318 	add.w	r3, r7, #24
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 fa0a 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca70:	e1e7      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca76:	e1e4      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca78:	4b20      	ldr	r3, [pc, #128]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca84:	d107      	bne.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca86:	f107 030c 	add.w	r3, r7, #12
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 fb4c 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca94:	e1d5      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9a:	e1d2      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca9c:	4b17      	ldr	r3, [pc, #92]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 0304 	and.w	r3, r3, #4
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	d109      	bne.n	800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caa8:	4b14      	ldr	r3, [pc, #80]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	08db      	lsrs	r3, r3, #3
 800caae:	f003 0303 	and.w	r3, r3, #3
 800cab2:	4a13      	ldr	r2, [pc, #76]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cab4:	fa22 f303 	lsr.w	r3, r2, r3
 800cab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caba:	e1c2      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac0:	e1bf      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cac2:	4b0e      	ldr	r3, [pc, #56]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cace:	d102      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cad0:	4b0c      	ldr	r3, [pc, #48]	; (800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad4:	e1b5      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cada:	e1b2      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cadc:	4b07      	ldr	r3, [pc, #28]	; (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cae8:	d102      	bne.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800caea:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800caec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caee:	e1a8      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf4:	e1a5      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafa:	e1a2      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cafc:	58024400 	.word	0x58024400
 800cb00:	03d09000 	.word	0x03d09000
 800cb04:	003d0900 	.word	0x003d0900
 800cb08:	017d7840 	.word	0x017d7840
 800cb0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb14:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	d173      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cb1c:	4b9c      	ldr	r3, [pc, #624]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb2c:	d02f      	beq.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb34:	d863      	bhi.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d004      	beq.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb42:	d012      	beq.n	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cb44:	e05b      	b.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb46:	4b92      	ldr	r3, [pc, #584]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb52:	d107      	bne.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb54:	f107 0318 	add.w	r3, r7, #24
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 f991 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb62:	e16e      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb64:	2300      	movs	r3, #0
 800cb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb68:	e16b      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb6a:	4b89      	ldr	r3, [pc, #548]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb76:	d107      	bne.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb78:	f107 030c 	add.w	r3, r7, #12
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 fad3 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb86:	e15c      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb8c:	e159      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb8e:	4b80      	ldr	r3, [pc, #512]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb98:	4b7d      	ldr	r3, [pc, #500]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f003 0304 	and.w	r3, r3, #4
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d10c      	bne.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d109      	bne.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbaa:	4b79      	ldr	r3, [pc, #484]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	08db      	lsrs	r3, r3, #3
 800cbb0:	f003 0303 	and.w	r3, r3, #3
 800cbb4:	4a77      	ldr	r2, [pc, #476]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cbb6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbbc:	e01e      	b.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbbe:	4b74      	ldr	r3, [pc, #464]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbca:	d106      	bne.n	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbd2:	d102      	bne.n	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbd4:	4b70      	ldr	r3, [pc, #448]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbd8:	e010      	b.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbda:	4b6d      	ldr	r3, [pc, #436]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbe6:	d106      	bne.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbee:	d102      	bne.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbf0:	4b6a      	ldr	r3, [pc, #424]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbf4:	e002      	b.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbfa:	e122      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cbfc:	e121      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc02:	e11e      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cc04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc08:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cc0c:	430b      	orrs	r3, r1
 800cc0e:	d133      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cc10:	4b5f      	ldr	r3, [pc, #380]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d004      	beq.n	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc26:	d012      	beq.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cc28:	e023      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc2a:	4b59      	ldr	r3, [pc, #356]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc36:	d107      	bne.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 fbc7 	bl	800d3d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc46:	e0fc      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4c:	e0f9      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc4e:	4b50      	ldr	r3, [pc, #320]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc5a:	d107      	bne.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc5c:	f107 0318 	add.w	r3, r7, #24
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 f90d 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6a:	e0ea      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc70:	e0e7      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc76:	e0e4      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cc78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc7c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cc80:	430b      	orrs	r3, r1
 800cc82:	f040 808d 	bne.w	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cc86:	4b42      	ldr	r3, [pc, #264]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cc8e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc96:	d06b      	beq.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc9e:	d874      	bhi.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cca6:	d056      	beq.n	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccae:	d86c      	bhi.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccb6:	d03b      	beq.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccbe:	d864      	bhi.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccc6:	d021      	beq.n	800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccce:	d85c      	bhi.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d004      	beq.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccdc:	d004      	beq.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ccde:	e054      	b.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cce0:	f000 f8b8 	bl	800ce54 <HAL_RCCEx_GetD3PCLK1Freq>
 800cce4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cce6:	e0ac      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cce8:	4b29      	ldr	r3, [pc, #164]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccf4:	d107      	bne.n	800cd06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccf6:	f107 0318 	add.w	r3, r7, #24
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 f8c0 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd04:	e09d      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd06:	2300      	movs	r3, #0
 800cd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0a:	e09a      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd0c:	4b20      	ldr	r3, [pc, #128]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd18:	d107      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd1a:	f107 030c 	add.w	r3, r7, #12
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 fa02 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd28:	e08b      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2e:	e088      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd30:	4b17      	ldr	r3, [pc, #92]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f003 0304 	and.w	r3, r3, #4
 800cd38:	2b04      	cmp	r3, #4
 800cd3a:	d109      	bne.n	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd3c:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	08db      	lsrs	r3, r3, #3
 800cd42:	f003 0303 	and.w	r3, r3, #3
 800cd46:	4a13      	ldr	r2, [pc, #76]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd48:	fa22 f303 	lsr.w	r3, r2, r3
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd4e:	e078      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd54:	e075      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd56:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd62:	d102      	bne.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cd64:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd68:	e06b      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd6e:	e068      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd70:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd7c:	d102      	bne.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cd7e:	4b07      	ldr	r3, [pc, #28]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd82:	e05e      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd88:	e05b      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd8e:	e058      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd90:	58024400 	.word	0x58024400
 800cd94:	03d09000 	.word	0x03d09000
 800cd98:	003d0900 	.word	0x003d0900
 800cd9c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cda0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cda4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cda8:	430b      	orrs	r3, r1
 800cdaa:	d148      	bne.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cdac:	4b27      	ldr	r3, [pc, #156]	; (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cdb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdbc:	d02a      	beq.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdc4:	d838      	bhi.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d004      	beq.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdd2:	d00d      	beq.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cdd4:	e030      	b.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdd6:	4b1d      	ldr	r3, [pc, #116]	; (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cde2:	d102      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cde4:	4b1a      	ldr	r3, [pc, #104]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cde8:	e02b      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdee:	e028      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdf0:	4b16      	ldr	r3, [pc, #88]	; (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdfc:	d107      	bne.n	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 fae4 	bl	800d3d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce0c:	e019      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce12:	e016      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce14:	4b0d      	ldr	r3, [pc, #52]	; (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce20:	d107      	bne.n	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce22:	f107 0318 	add.w	r3, r7, #24
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 f82a 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce30:	e007      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce36:	e004      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce3c:	e001      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ce42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3740      	adds	r7, #64	; 0x40
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	58024400 	.word	0x58024400
 800ce50:	017d7840 	.word	0x017d7840

0800ce54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ce58:	f7fd ffd4 	bl	800ae04 <HAL_RCC_GetHCLKFreq>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	4b06      	ldr	r3, [pc, #24]	; (800ce78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ce60:	6a1b      	ldr	r3, [r3, #32]
 800ce62:	091b      	lsrs	r3, r3, #4
 800ce64:	f003 0307 	and.w	r3, r3, #7
 800ce68:	4904      	ldr	r1, [pc, #16]	; (800ce7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ce6a:	5ccb      	ldrb	r3, [r1, r3]
 800ce6c:	f003 031f 	and.w	r3, r3, #31
 800ce70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	58024400 	.word	0x58024400
 800ce7c:	08017820 	.word	0x08017820

0800ce80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b089      	sub	sp, #36	; 0x24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce88:	4ba1      	ldr	r3, [pc, #644]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8c:	f003 0303 	and.w	r3, r3, #3
 800ce90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ce92:	4b9f      	ldr	r3, [pc, #636]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce96:	0b1b      	lsrs	r3, r3, #12
 800ce98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ce9e:	4b9c      	ldr	r3, [pc, #624]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea2:	091b      	lsrs	r3, r3, #4
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ceaa:	4b99      	ldr	r3, [pc, #612]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceae:	08db      	lsrs	r3, r3, #3
 800ceb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceb4:	693a      	ldr	r2, [r7, #16]
 800ceb6:	fb02 f303 	mul.w	r3, r2, r3
 800ceba:	ee07 3a90 	vmov	s15, r3
 800cebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 8111 	beq.w	800d0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	2b02      	cmp	r3, #2
 800ced2:	f000 8083 	beq.w	800cfdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	f200 80a1 	bhi.w	800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d003      	beq.n	800ceec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d056      	beq.n	800cf98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ceea:	e099      	b.n	800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceec:	4b88      	ldr	r3, [pc, #544]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f003 0320 	and.w	r3, r3, #32
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d02d      	beq.n	800cf54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cef8:	4b85      	ldr	r3, [pc, #532]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	08db      	lsrs	r3, r3, #3
 800cefe:	f003 0303 	and.w	r3, r3, #3
 800cf02:	4a84      	ldr	r2, [pc, #528]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf04:	fa22 f303 	lsr.w	r3, r2, r3
 800cf08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	ee07 3a90 	vmov	s15, r3
 800cf10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	ee07 3a90 	vmov	s15, r3
 800cf1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf22:	4b7b      	ldr	r3, [pc, #492]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2a:	ee07 3a90 	vmov	s15, r3
 800cf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf36:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf52:	e087      	b.n	800d064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	ee07 3a90 	vmov	s15, r3
 800cf5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cf62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf66:	4b6a      	ldr	r3, [pc, #424]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6e:	ee07 3a90 	vmov	s15, r3
 800cf72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf76:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf96:	e065      	b.n	800d064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfaa:	4b59      	ldr	r3, [pc, #356]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb2:	ee07 3a90 	vmov	s15, r3
 800cfb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfba:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfda:	e043      	b.n	800d064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	ee07 3a90 	vmov	s15, r3
 800cfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cfea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfee:	4b48      	ldr	r3, [pc, #288]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cffe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d002:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d01a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d01e:	e021      	b.n	800d064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	ee07 3a90 	vmov	s15, r3
 800d026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d032:	4b37      	ldr	r3, [pc, #220]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03a:	ee07 3a90 	vmov	s15, r3
 800d03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d042:	ed97 6a03 	vldr	s12, [r7, #12]
 800d046:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d05e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d062:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d064:	4b2a      	ldr	r3, [pc, #168]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d068:	0a5b      	lsrs	r3, r3, #9
 800d06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d06e:	ee07 3a90 	vmov	s15, r3
 800d072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d07a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d07e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d08a:	ee17 2a90 	vmov	r2, s15
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d092:	4b1f      	ldr	r3, [pc, #124]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	0c1b      	lsrs	r3, r3, #16
 800d098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d09c:	ee07 3a90 	vmov	s15, r3
 800d0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0b8:	ee17 2a90 	vmov	r2, s15
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d0c0:	4b13      	ldr	r3, [pc, #76]	; (800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c4:	0e1b      	lsrs	r3, r3, #24
 800d0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0e6:	ee17 2a90 	vmov	r2, s15
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d0ee:	e008      	b.n	800d102 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	609a      	str	r2, [r3, #8]
}
 800d102:	bf00      	nop
 800d104:	3724      	adds	r7, #36	; 0x24
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	58024400 	.word	0x58024400
 800d114:	03d09000 	.word	0x03d09000
 800d118:	46000000 	.word	0x46000000
 800d11c:	4c742400 	.word	0x4c742400
 800d120:	4a742400 	.word	0x4a742400
 800d124:	4bbebc20 	.word	0x4bbebc20

0800d128 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d128:	b480      	push	{r7}
 800d12a:	b089      	sub	sp, #36	; 0x24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d130:	4ba1      	ldr	r3, [pc, #644]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d134:	f003 0303 	and.w	r3, r3, #3
 800d138:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d13a:	4b9f      	ldr	r3, [pc, #636]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d13e:	0d1b      	lsrs	r3, r3, #20
 800d140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d144:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d146:	4b9c      	ldr	r3, [pc, #624]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14a:	0a1b      	lsrs	r3, r3, #8
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d152:	4b99      	ldr	r3, [pc, #612]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d156:	08db      	lsrs	r3, r3, #3
 800d158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d15c:	693a      	ldr	r2, [r7, #16]
 800d15e:	fb02 f303 	mul.w	r3, r2, r3
 800d162:	ee07 3a90 	vmov	s15, r3
 800d166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d16a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 8111 	beq.w	800d398 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	2b02      	cmp	r3, #2
 800d17a:	f000 8083 	beq.w	800d284 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2b02      	cmp	r3, #2
 800d182:	f200 80a1 	bhi.w	800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d003      	beq.n	800d194 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d056      	beq.n	800d240 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d192:	e099      	b.n	800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d194:	4b88      	ldr	r3, [pc, #544]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0320 	and.w	r3, r3, #32
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d02d      	beq.n	800d1fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1a0:	4b85      	ldr	r3, [pc, #532]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	08db      	lsrs	r3, r3, #3
 800d1a6:	f003 0303 	and.w	r3, r3, #3
 800d1aa:	4a84      	ldr	r2, [pc, #528]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d1ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d1b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	ee07 3a90 	vmov	s15, r3
 800d1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	ee07 3a90 	vmov	s15, r3
 800d1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ca:	4b7b      	ldr	r3, [pc, #492]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d1fa:	e087      	b.n	800d30c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	ee07 3a90 	vmov	s15, r3
 800d202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d206:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d20e:	4b6a      	ldr	r3, [pc, #424]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d216:	ee07 3a90 	vmov	s15, r3
 800d21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d222:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d23e:	e065      	b.n	800d30c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	ee07 3a90 	vmov	s15, r3
 800d246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d3c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d252:	4b59      	ldr	r3, [pc, #356]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d25a:	ee07 3a90 	vmov	s15, r3
 800d25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d262:	ed97 6a03 	vldr	s12, [r7, #12]
 800d266:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d282:	e043      	b.n	800d30c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	ee07 3a90 	vmov	s15, r3
 800d28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d28e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d3cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d296:	4b48      	ldr	r3, [pc, #288]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d29e:	ee07 3a90 	vmov	s15, r3
 800d2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2c6:	e021      	b.n	800d30c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	ee07 3a90 	vmov	s15, r3
 800d2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2da:	4b37      	ldr	r3, [pc, #220]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e2:	ee07 3a90 	vmov	s15, r3
 800d2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d30a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d30c:	4b2a      	ldr	r3, [pc, #168]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d310:	0a5b      	lsrs	r3, r3, #9
 800d312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d316:	ee07 3a90 	vmov	s15, r3
 800d31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d31e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d322:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d326:	edd7 6a07 	vldr	s13, [r7, #28]
 800d32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d332:	ee17 2a90 	vmov	r2, s15
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d33a:	4b1f      	ldr	r3, [pc, #124]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	0c1b      	lsrs	r3, r3, #16
 800d340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d344:	ee07 3a90 	vmov	s15, r3
 800d348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d350:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d354:	edd7 6a07 	vldr	s13, [r7, #28]
 800d358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d360:	ee17 2a90 	vmov	r2, s15
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d368:	4b13      	ldr	r3, [pc, #76]	; (800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36c:	0e1b      	lsrs	r3, r3, #24
 800d36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d372:	ee07 3a90 	vmov	s15, r3
 800d376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d37e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d382:	edd7 6a07 	vldr	s13, [r7, #28]
 800d386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d38e:	ee17 2a90 	vmov	r2, s15
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d396:	e008      	b.n	800d3aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	609a      	str	r2, [r3, #8]
}
 800d3aa:	bf00      	nop
 800d3ac:	3724      	adds	r7, #36	; 0x24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	58024400 	.word	0x58024400
 800d3bc:	03d09000 	.word	0x03d09000
 800d3c0:	46000000 	.word	0x46000000
 800d3c4:	4c742400 	.word	0x4c742400
 800d3c8:	4a742400 	.word	0x4a742400
 800d3cc:	4bbebc20 	.word	0x4bbebc20

0800d3d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b089      	sub	sp, #36	; 0x24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3d8:	4ba0      	ldr	r3, [pc, #640]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3dc:	f003 0303 	and.w	r3, r3, #3
 800d3e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d3e2:	4b9e      	ldr	r3, [pc, #632]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e6:	091b      	lsrs	r3, r3, #4
 800d3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d3ee:	4b9b      	ldr	r3, [pc, #620]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d3f8:	4b98      	ldr	r3, [pc, #608]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fc:	08db      	lsrs	r3, r3, #3
 800d3fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d402:	693a      	ldr	r2, [r7, #16]
 800d404:	fb02 f303 	mul.w	r3, r2, r3
 800d408:	ee07 3a90 	vmov	s15, r3
 800d40c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d410:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 8111 	beq.w	800d63e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	2b02      	cmp	r3, #2
 800d420:	f000 8083 	beq.w	800d52a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	2b02      	cmp	r3, #2
 800d428:	f200 80a1 	bhi.w	800d56e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d056      	beq.n	800d4e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d438:	e099      	b.n	800d56e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d43a:	4b88      	ldr	r3, [pc, #544]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f003 0320 	and.w	r3, r3, #32
 800d442:	2b00      	cmp	r3, #0
 800d444:	d02d      	beq.n	800d4a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d446:	4b85      	ldr	r3, [pc, #532]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	08db      	lsrs	r3, r3, #3
 800d44c:	f003 0303 	and.w	r3, r3, #3
 800d450:	4a83      	ldr	r2, [pc, #524]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d452:	fa22 f303 	lsr.w	r3, r2, r3
 800d456:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	ee07 3a90 	vmov	s15, r3
 800d468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d46c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d470:	4b7a      	ldr	r3, [pc, #488]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d478:	ee07 3a90 	vmov	s15, r3
 800d47c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d480:	ed97 6a03 	vldr	s12, [r7, #12]
 800d484:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d48c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d49c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4a0:	e087      	b.n	800d5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	ee07 3a90 	vmov	s15, r3
 800d4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d668 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d4b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4b4:	4b69      	ldr	r3, [pc, #420]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4bc:	ee07 3a90 	vmov	s15, r3
 800d4c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4e4:	e065      	b.n	800d5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	ee07 3a90 	vmov	s15, r3
 800d4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d66c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d4f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4f8:	4b58      	ldr	r3, [pc, #352]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d500:	ee07 3a90 	vmov	s15, r3
 800d504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d508:	ed97 6a03 	vldr	s12, [r7, #12]
 800d50c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d51c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d528:	e043      	b.n	800d5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	ee07 3a90 	vmov	s15, r3
 800d530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d534:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d670 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d53c:	4b47      	ldr	r3, [pc, #284]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d544:	ee07 3a90 	vmov	s15, r3
 800d548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d54c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d550:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d55c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d56c:	e021      	b.n	800d5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	ee07 3a90 	vmov	s15, r3
 800d574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d578:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d668 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d580:	4b36      	ldr	r3, [pc, #216]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d588:	ee07 3a90 	vmov	s15, r3
 800d58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d590:	ed97 6a03 	vldr	s12, [r7, #12]
 800d594:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d664 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d59c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d5b2:	4b2a      	ldr	r3, [pc, #168]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b6:	0a5b      	lsrs	r3, r3, #9
 800d5b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5bc:	ee07 3a90 	vmov	s15, r3
 800d5c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5d8:	ee17 2a90 	vmov	r2, s15
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d5e0:	4b1e      	ldr	r3, [pc, #120]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e4:	0c1b      	lsrs	r3, r3, #16
 800d5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ea:	ee07 3a90 	vmov	s15, r3
 800d5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d606:	ee17 2a90 	vmov	r2, s15
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d60e:	4b13      	ldr	r3, [pc, #76]	; (800d65c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d612:	0e1b      	lsrs	r3, r3, #24
 800d614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d618:	ee07 3a90 	vmov	s15, r3
 800d61c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d624:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d628:	edd7 6a07 	vldr	s13, [r7, #28]
 800d62c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d634:	ee17 2a90 	vmov	r2, s15
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d63c:	e008      	b.n	800d650 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	609a      	str	r2, [r3, #8]
}
 800d650:	bf00      	nop
 800d652:	3724      	adds	r7, #36	; 0x24
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	58024400 	.word	0x58024400
 800d660:	03d09000 	.word	0x03d09000
 800d664:	46000000 	.word	0x46000000
 800d668:	4c742400 	.word	0x4c742400
 800d66c:	4a742400 	.word	0x4a742400
 800d670:	4bbebc20 	.word	0x4bbebc20

0800d674 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d67e:	2300      	movs	r3, #0
 800d680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d682:	4b53      	ldr	r3, [pc, #332]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d686:	f003 0303 	and.w	r3, r3, #3
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	d101      	bne.n	800d692 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d68e:	2301      	movs	r3, #1
 800d690:	e099      	b.n	800d7c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d692:	4b4f      	ldr	r3, [pc, #316]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a4e      	ldr	r2, [pc, #312]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d698:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d69c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d69e:	f7f6 fc53 	bl	8003f48 <HAL_GetTick>
 800d6a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d6a4:	e008      	b.n	800d6b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d6a6:	f7f6 fc4f 	bl	8003f48 <HAL_GetTick>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	1ad3      	subs	r3, r2, r3
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d901      	bls.n	800d6b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	e086      	b.n	800d7c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d6b8:	4b45      	ldr	r3, [pc, #276]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1f0      	bne.n	800d6a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d6c4:	4b42      	ldr	r3, [pc, #264]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	031b      	lsls	r3, r3, #12
 800d6d2:	493f      	ldr	r1, [pc, #252]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	628b      	str	r3, [r1, #40]	; 0x28
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	025b      	lsls	r3, r3, #9
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	431a      	orrs	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	041b      	lsls	r3, r3, #16
 800d6f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d6fa:	431a      	orrs	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	3b01      	subs	r3, #1
 800d702:	061b      	lsls	r3, r3, #24
 800d704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d708:	4931      	ldr	r1, [pc, #196]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d70a:	4313      	orrs	r3, r2
 800d70c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d70e:	4b30      	ldr	r3, [pc, #192]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	492d      	ldr	r1, [pc, #180]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d71c:	4313      	orrs	r3, r2
 800d71e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d720:	4b2b      	ldr	r3, [pc, #172]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	f023 0220 	bic.w	r2, r3, #32
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	699b      	ldr	r3, [r3, #24]
 800d72c:	4928      	ldr	r1, [pc, #160]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d72e:	4313      	orrs	r3, r2
 800d730:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d732:	4b27      	ldr	r3, [pc, #156]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d736:	4a26      	ldr	r2, [pc, #152]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d738:	f023 0310 	bic.w	r3, r3, #16
 800d73c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d73e:	4b24      	ldr	r3, [pc, #144]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d742:	4b24      	ldr	r3, [pc, #144]	; (800d7d4 <RCCEx_PLL2_Config+0x160>)
 800d744:	4013      	ands	r3, r2
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	69d2      	ldr	r2, [r2, #28]
 800d74a:	00d2      	lsls	r2, r2, #3
 800d74c:	4920      	ldr	r1, [pc, #128]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d752:	4b1f      	ldr	r3, [pc, #124]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d756:	4a1e      	ldr	r2, [pc, #120]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d758:	f043 0310 	orr.w	r3, r3, #16
 800d75c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d764:	4b1a      	ldr	r3, [pc, #104]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d768:	4a19      	ldr	r2, [pc, #100]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d76a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d76e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d770:	e00f      	b.n	800d792 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d106      	bne.n	800d786 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d778:	4b15      	ldr	r3, [pc, #84]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77c:	4a14      	ldr	r2, [pc, #80]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d77e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d782:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d784:	e005      	b.n	800d792 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d786:	4b12      	ldr	r3, [pc, #72]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78a:	4a11      	ldr	r2, [pc, #68]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d78c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d790:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d792:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a0e      	ldr	r2, [pc, #56]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d79c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d79e:	f7f6 fbd3 	bl	8003f48 <HAL_GetTick>
 800d7a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d7a4:	e008      	b.n	800d7b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d7a6:	f7f6 fbcf 	bl	8003f48 <HAL_GetTick>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d901      	bls.n	800d7b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	e006      	b.n	800d7c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d7b8:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <RCCEx_PLL2_Config+0x15c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d0f0      	beq.n	800d7a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	58024400 	.word	0x58024400
 800d7d4:	ffff0007 	.word	0xffff0007

0800d7d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7e6:	4b53      	ldr	r3, [pc, #332]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ea:	f003 0303 	and.w	r3, r3, #3
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d101      	bne.n	800d7f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e099      	b.n	800d92a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d7f6:	4b4f      	ldr	r3, [pc, #316]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a4e      	ldr	r2, [pc, #312]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d7fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d802:	f7f6 fba1 	bl	8003f48 <HAL_GetTick>
 800d806:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d808:	e008      	b.n	800d81c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d80a:	f7f6 fb9d 	bl	8003f48 <HAL_GetTick>
 800d80e:	4602      	mov	r2, r0
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	2b02      	cmp	r3, #2
 800d816:	d901      	bls.n	800d81c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d818:	2303      	movs	r3, #3
 800d81a:	e086      	b.n	800d92a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d81c:	4b45      	ldr	r3, [pc, #276]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1f0      	bne.n	800d80a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d828:	4b42      	ldr	r3, [pc, #264]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	051b      	lsls	r3, r3, #20
 800d836:	493f      	ldr	r1, [pc, #252]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d838:	4313      	orrs	r3, r2
 800d83a:	628b      	str	r3, [r1, #40]	; 0x28
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	3b01      	subs	r3, #1
 800d842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	025b      	lsls	r3, r3, #9
 800d84e:	b29b      	uxth	r3, r3
 800d850:	431a      	orrs	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	3b01      	subs	r3, #1
 800d858:	041b      	lsls	r3, r3, #16
 800d85a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d85e:	431a      	orrs	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	3b01      	subs	r3, #1
 800d866:	061b      	lsls	r3, r3, #24
 800d868:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d86c:	4931      	ldr	r1, [pc, #196]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d86e:	4313      	orrs	r3, r2
 800d870:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d872:	4b30      	ldr	r3, [pc, #192]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d876:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	492d      	ldr	r1, [pc, #180]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d880:	4313      	orrs	r3, r2
 800d882:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d884:	4b2b      	ldr	r3, [pc, #172]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d888:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	699b      	ldr	r3, [r3, #24]
 800d890:	4928      	ldr	r1, [pc, #160]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d892:	4313      	orrs	r3, r2
 800d894:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d896:	4b27      	ldr	r3, [pc, #156]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89a:	4a26      	ldr	r2, [pc, #152]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d89c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d8a2:	4b24      	ldr	r3, [pc, #144]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8a6:	4b24      	ldr	r3, [pc, #144]	; (800d938 <RCCEx_PLL3_Config+0x160>)
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	69d2      	ldr	r2, [r2, #28]
 800d8ae:	00d2      	lsls	r2, r2, #3
 800d8b0:	4920      	ldr	r1, [pc, #128]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d8b6:	4b1f      	ldr	r3, [pc, #124]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ba:	4a1e      	ldr	r2, [pc, #120]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d106      	bne.n	800d8d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d8c8:	4b1a      	ldr	r3, [pc, #104]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8cc:	4a19      	ldr	r2, [pc, #100]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d8d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8d4:	e00f      	b.n	800d8f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d106      	bne.n	800d8ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d8dc:	4b15      	ldr	r3, [pc, #84]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e0:	4a14      	ldr	r2, [pc, #80]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d8e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8e8:	e005      	b.n	800d8f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d8ea:	4b12      	ldr	r3, [pc, #72]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ee:	4a11      	ldr	r2, [pc, #68]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d8f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d8f6:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a0e      	ldr	r2, [pc, #56]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d8fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d902:	f7f6 fb21 	bl	8003f48 <HAL_GetTick>
 800d906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d908:	e008      	b.n	800d91c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d90a:	f7f6 fb1d 	bl	8003f48 <HAL_GetTick>
 800d90e:	4602      	mov	r2, r0
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	2b02      	cmp	r3, #2
 800d916:	d901      	bls.n	800d91c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d918:	2303      	movs	r3, #3
 800d91a:	e006      	b.n	800d92a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d91c:	4b05      	ldr	r3, [pc, #20]	; (800d934 <RCCEx_PLL3_Config+0x15c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d0f0      	beq.n	800d90a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d928:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	58024400 	.word	0x58024400
 800d938:	ffff0007 	.word	0xffff0007

0800d93c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d944:	2301      	movs	r3, #1
 800d946:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d071      	beq.n	800da32 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7f5 fd88 	bl	8003478 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2202      	movs	r2, #2
 800d96c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	f003 0310 	and.w	r3, r3, #16
 800d97a:	2b10      	cmp	r3, #16
 800d97c:	d050      	beq.n	800da20 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	22ca      	movs	r2, #202	; 0xca
 800d984:	625a      	str	r2, [r3, #36]	; 0x24
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2253      	movs	r2, #83	; 0x53
 800d98c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fa4a 	bl	800de28 <RTC_EnterInitMode>
 800d994:	4603      	mov	r3, r0
 800d996:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d998:	7bfb      	ldrb	r3, [r7, #15]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d124      	bne.n	800d9e8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6899      	ldr	r1, [r3, #8]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	4b24      	ldr	r3, [pc, #144]	; (800da3c <HAL_RTC_Init+0x100>)
 800d9aa:	400b      	ands	r3, r1
 800d9ac:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	6899      	ldr	r1, [r3, #8]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685a      	ldr	r2, [r3, #4]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	431a      	orrs	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	430a      	orrs	r2, r1
 800d9ca:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	0419      	lsls	r1, r3, #16
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68da      	ldr	r2, [r3, #12]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	430a      	orrs	r2, r1
 800d9dc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fa56 	bl	800de90 <RTC_ExitInitMode>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d113      	bne.n	800da16 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f022 0203 	bic.w	r2, r2, #3
 800d9fc:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	69da      	ldr	r2, [r3, #28]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	431a      	orrs	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	430a      	orrs	r2, r1
 800da14:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	22ff      	movs	r2, #255	; 0xff
 800da1c:	625a      	str	r2, [r3, #36]	; 0x24
 800da1e:	e001      	b.n	800da24 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d103      	bne.n	800da32 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800da32:	7bfb      	ldrb	r3, [r7, #15]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	ff8fffbf 	.word	0xff8fffbf

0800da40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da40:	b590      	push	{r4, r7, lr}
 800da42:	b087      	sub	sp, #28
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d101      	bne.n	800da5a <HAL_RTC_SetTime+0x1a>
 800da56:	2302      	movs	r3, #2
 800da58:	e089      	b.n	800db6e <HAL_RTC_SetTime+0x12e>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2202      	movs	r2, #2
 800da66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	22ca      	movs	r2, #202	; 0xca
 800da70:	625a      	str	r2, [r3, #36]	; 0x24
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2253      	movs	r2, #83	; 0x53
 800da78:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f000 f9d4 	bl	800de28 <RTC_EnterInitMode>
 800da80:	4603      	mov	r3, r0
 800da82:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800da84:	7cfb      	ldrb	r3, [r7, #19]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d161      	bne.n	800db4e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d126      	bne.n	800dade <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d102      	bne.n	800daa4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	2200      	movs	r2, #0
 800daa2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 fa2f 	bl	800df0c <RTC_ByteToBcd2>
 800daae:	4603      	mov	r3, r0
 800dab0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	785b      	ldrb	r3, [r3, #1]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 fa28 	bl	800df0c <RTC_ByteToBcd2>
 800dabc:	4603      	mov	r3, r0
 800dabe:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dac0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	789b      	ldrb	r3, [r3, #2]
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 fa20 	bl	800df0c <RTC_ByteToBcd2>
 800dacc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dace:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	78db      	ldrb	r3, [r3, #3]
 800dad6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dad8:	4313      	orrs	r3, r2
 800dada:	617b      	str	r3, [r7, #20]
 800dadc:	e018      	b.n	800db10 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	2200      	movs	r2, #0
 800daf0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	785b      	ldrb	r3, [r3, #1]
 800dafc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dafe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db04:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	78db      	ldrb	r3, [r3, #3]
 800db0a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db0c:	4313      	orrs	r3, r2
 800db0e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	6979      	ldr	r1, [r7, #20]
 800db16:	4b18      	ldr	r3, [pc, #96]	; (800db78 <HAL_RTC_SetTime+0x138>)
 800db18:	400b      	ands	r3, r1
 800db1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	689a      	ldr	r2, [r3, #8]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800db2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6899      	ldr	r1, [r3, #8]
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	68da      	ldr	r2, [r3, #12]
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	431a      	orrs	r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	430a      	orrs	r2, r1
 800db42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	f000 f9a3 	bl	800de90 <RTC_ExitInitMode>
 800db4a:	4603      	mov	r3, r0
 800db4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	22ff      	movs	r2, #255	; 0xff
 800db54:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800db56:	7cfb      	ldrb	r3, [r7, #19]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d103      	bne.n	800db64 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800db6c:	7cfb      	ldrb	r3, [r7, #19]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	371c      	adds	r7, #28
 800db72:	46bd      	mov	sp, r7
 800db74:	bd90      	pop	{r4, r7, pc}
 800db76:	bf00      	nop
 800db78:	007f7f7f 	.word	0x007f7f7f

0800db7c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b086      	sub	sp, #24
 800db80:	af00      	add	r7, sp, #0
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	4b22      	ldr	r3, [pc, #136]	; (800dc30 <HAL_RTC_GetTime+0xb4>)
 800dba8:	4013      	ands	r3, r2
 800dbaa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	0c1b      	lsrs	r3, r3, #16
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	0a1b      	lsrs	r3, r3, #8
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	0d9b      	lsrs	r3, r3, #22
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d11a      	bne.n	800dc26 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 f9a9 	bl	800df4c <RTC_Bcd2ToByte>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	785b      	ldrb	r3, [r3, #1]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 f9a0 	bl	800df4c <RTC_Bcd2ToByte>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	461a      	mov	r2, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	789b      	ldrb	r3, [r3, #2]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 f997 	bl	800df4c <RTC_Bcd2ToByte>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	461a      	mov	r2, r3
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	007f7f7f 	.word	0x007f7f7f

0800dc34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc34:	b590      	push	{r4, r7, lr}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d101      	bne.n	800dc4e <HAL_RTC_SetDate+0x1a>
 800dc4a:	2302      	movs	r3, #2
 800dc4c:	e073      	b.n	800dd36 <HAL_RTC_SetDate+0x102>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2202      	movs	r2, #2
 800dc5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10e      	bne.n	800dc82 <HAL_RTC_SetDate+0x4e>
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	785b      	ldrb	r3, [r3, #1]
 800dc68:	f003 0310 	and.w	r3, r3, #16
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d008      	beq.n	800dc82 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	f023 0310 	bic.w	r3, r3, #16
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	330a      	adds	r3, #10
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d11c      	bne.n	800dcc2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	78db      	ldrb	r3, [r3, #3]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f000 f93d 	bl	800df0c <RTC_ByteToBcd2>
 800dc92:	4603      	mov	r3, r0
 800dc94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	785b      	ldrb	r3, [r3, #1]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 f936 	bl	800df0c <RTC_ByteToBcd2>
 800dca0:	4603      	mov	r3, r0
 800dca2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dca4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	789b      	ldrb	r3, [r3, #2]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f000 f92e 	bl	800df0c <RTC_ByteToBcd2>
 800dcb0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dcb2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	617b      	str	r3, [r7, #20]
 800dcc0:	e00e      	b.n	800dce0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	78db      	ldrb	r3, [r3, #3]
 800dcc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	785b      	ldrb	r3, [r3, #1]
 800dccc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dcce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dcd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	22ca      	movs	r2, #202	; 0xca
 800dce6:	625a      	str	r2, [r3, #36]	; 0x24
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2253      	movs	r2, #83	; 0x53
 800dcee:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 f899 	bl	800de28 <RTC_EnterInitMode>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dcfa:	7cfb      	ldrb	r3, [r7, #19]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10a      	bne.n	800dd16 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	6979      	ldr	r1, [r7, #20]
 800dd06:	4b0e      	ldr	r3, [pc, #56]	; (800dd40 <HAL_RTC_SetDate+0x10c>)
 800dd08:	400b      	ands	r3, r1
 800dd0a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f000 f8bf 	bl	800de90 <RTC_ExitInitMode>
 800dd12:	4603      	mov	r3, r0
 800dd14:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	22ff      	movs	r2, #255	; 0xff
 800dd1c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dd1e:	7cfb      	ldrb	r3, [r7, #19]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d103      	bne.n	800dd2c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dd34:	7cfb      	ldrb	r3, [r7, #19]


}
 800dd36:	4618      	mov	r0, r3
 800dd38:	371c      	adds	r7, #28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd90      	pop	{r4, r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	00ffff3f 	.word	0x00ffff3f

0800dd44 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	4b21      	ldr	r3, [pc, #132]	; (800dddc <HAL_RTC_GetDate+0x98>)
 800dd58:	4013      	ands	r3, r2
 800dd5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	0c1b      	lsrs	r3, r3, #16
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	0a1b      	lsrs	r3, r3, #8
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	f003 031f 	and.w	r3, r3, #31
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	0b5b      	lsrs	r3, r3, #13
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	f003 0307 	and.w	r3, r3, #7
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d11a      	bne.n	800ddd0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	78db      	ldrb	r3, [r3, #3]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 f8d4 	bl	800df4c <RTC_Bcd2ToByte>
 800dda4:	4603      	mov	r3, r0
 800dda6:	461a      	mov	r2, r3
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	785b      	ldrb	r3, [r3, #1]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 f8cb 	bl	800df4c <RTC_Bcd2ToByte>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	461a      	mov	r2, r3
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	789b      	ldrb	r3, [r3, #2]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 f8c2 	bl	800df4c <RTC_Bcd2ToByte>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	461a      	mov	r2, r3
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3718      	adds	r7, #24
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	00ffff3f 	.word	0x00ffff3f

0800dde0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a0d      	ldr	r2, [pc, #52]	; (800de24 <HAL_RTC_WaitForSynchro+0x44>)
 800ddee:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800ddf0:	f7f6 f8aa 	bl	8003f48 <HAL_GetTick>
 800ddf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ddf6:	e009      	b.n	800de0c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ddf8:	f7f6 f8a6 	bl	8003f48 <HAL_GetTick>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de06:	d901      	bls.n	800de0c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800de08:	2303      	movs	r3, #3
 800de0a:	e007      	b.n	800de1c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	f003 0320 	and.w	r3, r3, #32
 800de16:	2b00      	cmp	r3, #0
 800de18:	d0ee      	beq.n	800ddf8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	0003ff5f 	.word	0x0003ff5f

0800de28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d120      	bne.n	800de84 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800de4c:	f7f6 f87c 	bl	8003f48 <HAL_GetTick>
 800de50:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800de52:	e00d      	b.n	800de70 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800de54:	f7f6 f878 	bl	8003f48 <HAL_GetTick>
 800de58:	4602      	mov	r2, r0
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de62:	d905      	bls.n	800de70 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800de64:	2303      	movs	r3, #3
 800de66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2203      	movs	r2, #3
 800de6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d102      	bne.n	800de84 <RTC_EnterInitMode+0x5c>
 800de7e:	7bfb      	ldrb	r3, [r7, #15]
 800de80:	2b03      	cmp	r3, #3
 800de82:	d1e7      	bne.n	800de54 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800de84:	7bfb      	ldrb	r3, [r7, #15]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
	...

0800de90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800de9c:	4b1a      	ldr	r3, [pc, #104]	; (800df08 <RTC_ExitInitMode+0x78>)
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	4a19      	ldr	r2, [pc, #100]	; (800df08 <RTC_ExitInitMode+0x78>)
 800dea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dea6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dea8:	4b17      	ldr	r3, [pc, #92]	; (800df08 <RTC_ExitInitMode+0x78>)
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	f003 0320 	and.w	r3, r3, #32
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d10c      	bne.n	800dece <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f7ff ff93 	bl	800dde0 <HAL_RTC_WaitForSynchro>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d01e      	beq.n	800defe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2203      	movs	r2, #3
 800dec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dec8:	2303      	movs	r3, #3
 800deca:	73fb      	strb	r3, [r7, #15]
 800decc:	e017      	b.n	800defe <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dece:	4b0e      	ldr	r3, [pc, #56]	; (800df08 <RTC_ExitInitMode+0x78>)
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	4a0d      	ldr	r2, [pc, #52]	; (800df08 <RTC_ExitInitMode+0x78>)
 800ded4:	f023 0320 	bic.w	r3, r3, #32
 800ded8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7ff ff80 	bl	800dde0 <HAL_RTC_WaitForSynchro>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d005      	beq.n	800def2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2203      	movs	r2, #3
 800deea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800deee:	2303      	movs	r3, #3
 800def0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800def2:	4b05      	ldr	r3, [pc, #20]	; (800df08 <RTC_ExitInitMode+0x78>)
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	4a04      	ldr	r2, [pc, #16]	; (800df08 <RTC_ExitInitMode+0x78>)
 800def8:	f043 0320 	orr.w	r3, r3, #32
 800defc:	6093      	str	r3, [r2, #8]
  }

  return status;
 800defe:	7bfb      	ldrb	r3, [r7, #15]
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	58004000 	.word	0x58004000

0800df0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	4603      	mov	r3, r0
 800df14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800df16:	2300      	movs	r3, #0
 800df18:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800df1e:	e005      	b.n	800df2c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	3301      	adds	r3, #1
 800df24:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800df26:	7afb      	ldrb	r3, [r7, #11]
 800df28:	3b0a      	subs	r3, #10
 800df2a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800df2c:	7afb      	ldrb	r3, [r7, #11]
 800df2e:	2b09      	cmp	r3, #9
 800df30:	d8f6      	bhi.n	800df20 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	b2db      	uxtb	r3, r3
 800df36:	011b      	lsls	r3, r3, #4
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	7afb      	ldrb	r3, [r7, #11]
 800df3c:	4313      	orrs	r3, r2
 800df3e:	b2db      	uxtb	r3, r3
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	4603      	mov	r3, r0
 800df54:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	091b      	lsrs	r3, r3, #4
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	461a      	mov	r2, r3
 800df5e:	0092      	lsls	r2, r2, #2
 800df60:	4413      	add	r3, r2
 800df62:	005b      	lsls	r3, r3, #1
 800df64:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800df66:	79fb      	ldrb	r3, [r7, #7]
 800df68:	f003 030f 	and.w	r3, r3, #15
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	7bfb      	ldrb	r3, [r7, #15]
 800df70:	4413      	add	r3, r2
 800df72:	b2db      	uxtb	r3, r3
}
 800df74:	4618      	mov	r0, r3
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d101      	bne.n	800df92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	e10f      	b.n	800e1b2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a87      	ldr	r2, [pc, #540]	; (800e1bc <HAL_SPI_Init+0x23c>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d00f      	beq.n	800dfc2 <HAL_SPI_Init+0x42>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a86      	ldr	r2, [pc, #536]	; (800e1c0 <HAL_SPI_Init+0x240>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d00a      	beq.n	800dfc2 <HAL_SPI_Init+0x42>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a84      	ldr	r2, [pc, #528]	; (800e1c4 <HAL_SPI_Init+0x244>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d005      	beq.n	800dfc2 <HAL_SPI_Init+0x42>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	2b0f      	cmp	r3, #15
 800dfbc:	d901      	bls.n	800dfc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e0f7      	b.n	800e1b2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fc12 	bl	800e7ec <SPI_GetPacketSize>
 800dfc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4a7b      	ldr	r2, [pc, #492]	; (800e1bc <HAL_SPI_Init+0x23c>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d00c      	beq.n	800dfee <HAL_SPI_Init+0x6e>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a79      	ldr	r2, [pc, #484]	; (800e1c0 <HAL_SPI_Init+0x240>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d007      	beq.n	800dfee <HAL_SPI_Init+0x6e>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a78      	ldr	r2, [pc, #480]	; (800e1c4 <HAL_SPI_Init+0x244>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d002      	beq.n	800dfee <HAL_SPI_Init+0x6e>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2b08      	cmp	r3, #8
 800dfec:	d811      	bhi.n	800e012 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dff2:	4a72      	ldr	r2, [pc, #456]	; (800e1bc <HAL_SPI_Init+0x23c>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d009      	beq.n	800e00c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4a70      	ldr	r2, [pc, #448]	; (800e1c0 <HAL_SPI_Init+0x240>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d004      	beq.n	800e00c <HAL_SPI_Init+0x8c>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a6f      	ldr	r2, [pc, #444]	; (800e1c4 <HAL_SPI_Init+0x244>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d104      	bne.n	800e016 <HAL_SPI_Init+0x96>
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b10      	cmp	r3, #16
 800e010:	d901      	bls.n	800e016 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	e0cd      	b.n	800e1b2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d106      	bne.n	800e030 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7f5 fa58 	bl	80034e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2202      	movs	r2, #2
 800e034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f022 0201 	bic.w	r2, r2, #1
 800e046:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e052:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e05c:	d119      	bne.n	800e092 <HAL_SPI_Init+0x112>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e066:	d103      	bne.n	800e070 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d008      	beq.n	800e082 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10c      	bne.n	800e092 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e07c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e080:	d107      	bne.n	800e092 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e090:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00f      	beq.n	800e0be <HAL_SPI_Init+0x13e>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	2b06      	cmp	r3, #6
 800e0a4:	d90b      	bls.n	800e0be <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	430a      	orrs	r2, r1
 800e0ba:	601a      	str	r2, [r3, #0]
 800e0bc:	e007      	b.n	800e0ce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e0cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	69da      	ldr	r2, [r3, #28]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d6:	431a      	orrs	r2, r3
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	431a      	orrs	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0e0:	ea42 0103 	orr.w	r1, r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	68da      	ldr	r2, [r3, #12]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	430a      	orrs	r2, r1
 800e0ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f8:	431a      	orrs	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0fe:	431a      	orrs	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	699b      	ldr	r3, [r3, #24]
 800e104:	431a      	orrs	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	691b      	ldr	r3, [r3, #16]
 800e10a:	431a      	orrs	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	695b      	ldr	r3, [r3, #20]
 800e110:	431a      	orrs	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a1b      	ldr	r3, [r3, #32]
 800e116:	431a      	orrs	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	431a      	orrs	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e122:	431a      	orrs	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	431a      	orrs	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e12e:	ea42 0103 	orr.w	r1, r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	430a      	orrs	r2, r1
 800e13c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d113      	bne.n	800e16e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e158:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e16c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f022 0201 	bic.w	r2, r2, #1
 800e17c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00a      	beq.n	800e1a0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	430a      	orrs	r2, r1
 800e19e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	40013000 	.word	0x40013000
 800e1c0:	40003800 	.word	0x40003800
 800e1c4:	40003c00 	.word	0x40003c00

0800e1c8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	603b      	str	r3, [r7, #0]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1dc:	095b      	lsrs	r3, r3, #5
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3330      	adds	r3, #48	; 0x30
 800e1ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1ec:	f7f5 feac 	bl	8003f48 <HAL_GetTick>
 800e1f0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d001      	beq.n	800e202 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e1fe:	2302      	movs	r3, #2
 800e200:	e250      	b.n	800e6a4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <HAL_SPI_Receive+0x46>
 800e208:	88fb      	ldrh	r3, [r7, #6]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e248      	b.n	800e6a4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d101      	bne.n	800e220 <HAL_SPI_Receive+0x58>
 800e21c:	2302      	movs	r3, #2
 800e21e:	e241      	b.n	800e6a4 <HAL_SPI_Receive+0x4dc>
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2201      	movs	r2, #1
 800e224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2204      	movs	r2, #4
 800e22c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	68ba      	ldr	r2, [r7, #8]
 800e23c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	88fa      	ldrh	r2, [r7, #6]
 800e242:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	88fa      	ldrh	r2, [r7, #6]
 800e24a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2200      	movs	r2, #0
 800e252:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2200      	movs	r2, #0
 800e260:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2200      	movs	r2, #0
 800e268:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2200      	movs	r2, #0
 800e26e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e278:	d108      	bne.n	800e28c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e288:	601a      	str	r2, [r3, #0]
 800e28a:	e009      	b.n	800e2a0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e29e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	685a      	ldr	r2, [r3, #4]
 800e2a6:	4b95      	ldr	r3, [pc, #596]	; (800e4fc <HAL_SPI_Receive+0x334>)
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	88f9      	ldrh	r1, [r7, #6]
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	6812      	ldr	r2, [r2, #0]
 800e2b0:	430b      	orrs	r3, r1
 800e2b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f042 0201 	orr.w	r2, r2, #1
 800e2c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2cc:	d107      	bne.n	800e2de <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	2b0f      	cmp	r3, #15
 800e2e4:	d96c      	bls.n	800e3c0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e2e6:	e064      	b.n	800e3b2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	695b      	ldr	r3, [r3, #20]
 800e2ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	695b      	ldr	r3, [r3, #20]
 800e2f6:	f003 0301 	and.w	r3, r3, #1
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d114      	bne.n	800e328 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e306:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e308:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e30e:	1d1a      	adds	r2, r3, #4
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	3b01      	subs	r3, #1
 800e31e:	b29a      	uxth	r2, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e326:	e044      	b.n	800e3b2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e32e:	b29b      	uxth	r3, r3
 800e330:	8bfa      	ldrh	r2, [r7, #30]
 800e332:	429a      	cmp	r2, r3
 800e334:	d919      	bls.n	800e36a <HAL_SPI_Receive+0x1a2>
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d014      	beq.n	800e36a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e34a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e350:	1d1a      	adds	r2, r3, #4
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	3b01      	subs	r3, #1
 800e360:	b29a      	uxth	r2, r3
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e368:	e023      	b.n	800e3b2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e36a:	f7f5 fded 	bl	8003f48 <HAL_GetTick>
 800e36e:	4602      	mov	r2, r0
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	683a      	ldr	r2, [r7, #0]
 800e376:	429a      	cmp	r2, r3
 800e378:	d803      	bhi.n	800e382 <HAL_SPI_Receive+0x1ba>
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e380:	d102      	bne.n	800e388 <HAL_SPI_Receive+0x1c0>
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d114      	bne.n	800e3b2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f000 f98f 	bl	800e6ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e394:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e3ae:	2303      	movs	r3, #3
 800e3b0:	e178      	b.n	800e6a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d194      	bne.n	800e2e8 <HAL_SPI_Receive+0x120>
 800e3be:	e15e      	b.n	800e67e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	2b07      	cmp	r3, #7
 800e3c6:	f240 8153 	bls.w	800e670 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e3ca:	e08f      	b.n	800e4ec <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	695b      	ldr	r3, [r3, #20]
 800e3d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	695b      	ldr	r3, [r3, #20]
 800e3da:	f003 0301 	and.w	r3, r3, #1
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d114      	bne.n	800e40c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3e6:	69ba      	ldr	r2, [r7, #24]
 800e3e8:	8812      	ldrh	r2, [r2, #0]
 800e3ea:	b292      	uxth	r2, r2
 800e3ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3f2:	1c9a      	adds	r2, r3, #2
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	3b01      	subs	r3, #1
 800e402:	b29a      	uxth	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e40a:	e06f      	b.n	800e4ec <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e412:	b29b      	uxth	r3, r3
 800e414:	8bfa      	ldrh	r2, [r7, #30]
 800e416:	429a      	cmp	r2, r3
 800e418:	d924      	bls.n	800e464 <HAL_SPI_Receive+0x29c>
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d01f      	beq.n	800e464 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	8812      	ldrh	r2, [r2, #0]
 800e42c:	b292      	uxth	r2, r2
 800e42e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e434:	1c9a      	adds	r2, r3, #2
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	8812      	ldrh	r2, [r2, #0]
 800e442:	b292      	uxth	r2, r2
 800e444:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e44a:	1c9a      	adds	r2, r3, #2
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e456:	b29b      	uxth	r3, r3
 800e458:	3b02      	subs	r3, #2
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e462:	e043      	b.n	800e4ec <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d119      	bne.n	800e4a4 <HAL_SPI_Receive+0x2dc>
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e476:	2b00      	cmp	r3, #0
 800e478:	d014      	beq.n	800e4a4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e47e:	69ba      	ldr	r2, [r7, #24]
 800e480:	8812      	ldrh	r2, [r2, #0]
 800e482:	b292      	uxth	r2, r2
 800e484:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e48a:	1c9a      	adds	r2, r3, #2
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e496:	b29b      	uxth	r3, r3
 800e498:	3b01      	subs	r3, #1
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4a2:	e023      	b.n	800e4ec <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4a4:	f7f5 fd50 	bl	8003f48 <HAL_GetTick>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	683a      	ldr	r2, [r7, #0]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d803      	bhi.n	800e4bc <HAL_SPI_Receive+0x2f4>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4ba:	d102      	bne.n	800e4c2 <HAL_SPI_Receive+0x2fa>
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d114      	bne.n	800e4ec <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f000 f8f2 	bl	800e6ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	e0db      	b.n	800e6a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f47f af69 	bne.w	800e3cc <HAL_SPI_Receive+0x204>
 800e4fa:	e0c0      	b.n	800e67e <HAL_SPI_Receive+0x4b6>
 800e4fc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	695b      	ldr	r3, [r3, #20]
 800e506:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	695b      	ldr	r3, [r3, #20]
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	2b01      	cmp	r3, #1
 800e514:	d117      	bne.n	800e546 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e522:	7812      	ldrb	r2, [r2, #0]
 800e524:	b2d2      	uxtb	r2, r2
 800e526:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e52c:	1c5a      	adds	r2, r3, #1
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e538:	b29b      	uxth	r3, r3
 800e53a:	3b01      	subs	r3, #1
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e544:	e094      	b.n	800e670 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	8bfa      	ldrh	r2, [r7, #30]
 800e550:	429a      	cmp	r2, r3
 800e552:	d946      	bls.n	800e5e2 <HAL_SPI_Receive+0x41a>
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d041      	beq.n	800e5e2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e56a:	7812      	ldrb	r2, [r2, #0]
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e586:	7812      	ldrb	r2, [r2, #0]
 800e588:	b2d2      	uxtb	r2, r2
 800e58a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a2:	7812      	ldrb	r2, [r2, #0]
 800e5a4:	b2d2      	uxtb	r2, r2
 800e5a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5be:	7812      	ldrb	r2, [r2, #0]
 800e5c0:	b2d2      	uxtb	r2, r2
 800e5c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5c8:	1c5a      	adds	r2, r3, #1
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	3b04      	subs	r3, #4
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5e0:	e046      	b.n	800e670 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	2b03      	cmp	r3, #3
 800e5ec:	d81c      	bhi.n	800e628 <HAL_SPI_Receive+0x460>
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d017      	beq.n	800e628 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e604:	7812      	ldrb	r2, [r2, #0]
 800e606:	b2d2      	uxtb	r2, r2
 800e608:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e60e:	1c5a      	adds	r2, r3, #1
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	3b01      	subs	r3, #1
 800e61e:	b29a      	uxth	r2, r3
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e626:	e023      	b.n	800e670 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e628:	f7f5 fc8e 	bl	8003f48 <HAL_GetTick>
 800e62c:	4602      	mov	r2, r0
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	429a      	cmp	r2, r3
 800e636:	d803      	bhi.n	800e640 <HAL_SPI_Receive+0x478>
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e63e:	d102      	bne.n	800e646 <HAL_SPI_Receive+0x47e>
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d114      	bne.n	800e670 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f000 f830 	bl	800e6ac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2201      	movs	r2, #1
 800e660:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e66c:	2303      	movs	r3, #3
 800e66e:	e019      	b.n	800e6a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e676:	b29b      	uxth	r3, r3
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f47f af41 	bne.w	800e500 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f000 f814 	bl	800e6ac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2201      	movs	r2, #1
 800e688:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e000      	b.n	800e6a4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
  }
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3720      	adds	r7, #32
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b085      	sub	sp, #20
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	699a      	ldr	r2, [r3, #24]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f042 0208 	orr.w	r2, r2, #8
 800e6ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	699a      	ldr	r2, [r3, #24]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f042 0210 	orr.w	r2, r2, #16
 800e6da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f022 0201 	bic.w	r2, r2, #1
 800e6ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6919      	ldr	r1, [r3, #16]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	4b3c      	ldr	r3, [pc, #240]	; (800e7e8 <SPI_CloseTransfer+0x13c>)
 800e6f8:	400b      	ands	r3, r1
 800e6fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	689a      	ldr	r2, [r3, #8]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e70a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e712:	b2db      	uxtb	r3, r3
 800e714:	2b04      	cmp	r3, #4
 800e716:	d014      	beq.n	800e742 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f003 0320 	and.w	r3, r3, #32
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00f      	beq.n	800e742 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e728:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	699a      	ldr	r2, [r3, #24]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f042 0220 	orr.w	r2, r2, #32
 800e740:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2b03      	cmp	r3, #3
 800e74c:	d014      	beq.n	800e778 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00f      	beq.n	800e778 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e75e:	f043 0204 	orr.w	r2, r3, #4
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	699a      	ldr	r2, [r3, #24]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e776:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00f      	beq.n	800e7a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e788:	f043 0201 	orr.w	r2, r3, #1
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	699a      	ldr	r2, [r3, #24]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00f      	beq.n	800e7cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7b2:	f043 0208 	orr.w	r2, r3, #8
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	699a      	ldr	r2, [r3, #24]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e7dc:	bf00      	nop
 800e7de:	3714      	adds	r7, #20
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr
 800e7e8:	fffffc90 	.word	0xfffffc90

0800e7ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7f8:	095b      	lsrs	r3, r3, #5
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	3301      	adds	r3, #1
 800e804:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	3307      	adds	r3, #7
 800e80a:	08db      	lsrs	r3, r3, #3
 800e80c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	fb02 f303 	mul.w	r3, r2, r3
}
 800e816:	4618      	mov	r0, r3
 800e818:	3714      	adds	r7, #20
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d101      	bne.n	800e834 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	e049      	b.n	800e8c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d106      	bne.n	800e84e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7f4 feff 	bl	800364c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2202      	movs	r2, #2
 800e852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	3304      	adds	r3, #4
 800e85e:	4619      	mov	r1, r3
 800e860:	4610      	mov	r0, r2
 800e862:	f000 fe7d 	bl	800f560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2201      	movs	r2, #1
 800e86a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2201      	movs	r2, #1
 800e88a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2201      	movs	r2, #1
 800e892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2201      	movs	r2, #1
 800e89a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	d001      	beq.n	800e8e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e054      	b.n	800e992 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	68da      	ldr	r2, [r3, #12]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f042 0201 	orr.w	r2, r2, #1
 800e8fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4a26      	ldr	r2, [pc, #152]	; (800e9a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d022      	beq.n	800e950 <HAL_TIM_Base_Start_IT+0x80>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e912:	d01d      	beq.n	800e950 <HAL_TIM_Base_Start_IT+0x80>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a22      	ldr	r2, [pc, #136]	; (800e9a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d018      	beq.n	800e950 <HAL_TIM_Base_Start_IT+0x80>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a21      	ldr	r2, [pc, #132]	; (800e9a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d013      	beq.n	800e950 <HAL_TIM_Base_Start_IT+0x80>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a1f      	ldr	r2, [pc, #124]	; (800e9ac <HAL_TIM_Base_Start_IT+0xdc>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d00e      	beq.n	800e950 <HAL_TIM_Base_Start_IT+0x80>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a1e      	ldr	r2, [pc, #120]	; (800e9b0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d009      	beq.n	800e950 <HAL_TIM_Base_Start_IT+0x80>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a1c      	ldr	r2, [pc, #112]	; (800e9b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d004      	beq.n	800e950 <HAL_TIM_Base_Start_IT+0x80>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a1b      	ldr	r2, [pc, #108]	; (800e9b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d115      	bne.n	800e97c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	689a      	ldr	r2, [r3, #8]
 800e956:	4b19      	ldr	r3, [pc, #100]	; (800e9bc <HAL_TIM_Base_Start_IT+0xec>)
 800e958:	4013      	ands	r3, r2
 800e95a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2b06      	cmp	r3, #6
 800e960:	d015      	beq.n	800e98e <HAL_TIM_Base_Start_IT+0xbe>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e968:	d011      	beq.n	800e98e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f042 0201 	orr.w	r2, r2, #1
 800e978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e97a:	e008      	b.n	800e98e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f042 0201 	orr.w	r2, r2, #1
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	e000      	b.n	800e990 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e98e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e990:	2300      	movs	r3, #0
}
 800e992:	4618      	mov	r0, r3
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	40010000 	.word	0x40010000
 800e9a4:	40000400 	.word	0x40000400
 800e9a8:	40000800 	.word	0x40000800
 800e9ac:	40000c00 	.word	0x40000c00
 800e9b0:	40010400 	.word	0x40010400
 800e9b4:	40001800 	.word	0x40001800
 800e9b8:	40014000 	.word	0x40014000
 800e9bc:	00010007 	.word	0x00010007

0800e9c0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d109      	bne.n	800e9e8 <HAL_TIM_OC_Start_IT+0x28>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	bf14      	ite	ne
 800e9e0:	2301      	movne	r3, #1
 800e9e2:	2300      	moveq	r3, #0
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	e03c      	b.n	800ea62 <HAL_TIM_OC_Start_IT+0xa2>
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	2b04      	cmp	r3, #4
 800e9ec:	d109      	bne.n	800ea02 <HAL_TIM_OC_Start_IT+0x42>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	bf14      	ite	ne
 800e9fa:	2301      	movne	r3, #1
 800e9fc:	2300      	moveq	r3, #0
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	e02f      	b.n	800ea62 <HAL_TIM_OC_Start_IT+0xa2>
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	2b08      	cmp	r3, #8
 800ea06:	d109      	bne.n	800ea1c <HAL_TIM_OC_Start_IT+0x5c>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	bf14      	ite	ne
 800ea14:	2301      	movne	r3, #1
 800ea16:	2300      	moveq	r3, #0
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	e022      	b.n	800ea62 <HAL_TIM_OC_Start_IT+0xa2>
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2b0c      	cmp	r3, #12
 800ea20:	d109      	bne.n	800ea36 <HAL_TIM_OC_Start_IT+0x76>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	bf14      	ite	ne
 800ea2e:	2301      	movne	r3, #1
 800ea30:	2300      	moveq	r3, #0
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	e015      	b.n	800ea62 <HAL_TIM_OC_Start_IT+0xa2>
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2b10      	cmp	r3, #16
 800ea3a:	d109      	bne.n	800ea50 <HAL_TIM_OC_Start_IT+0x90>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	bf14      	ite	ne
 800ea48:	2301      	movne	r3, #1
 800ea4a:	2300      	moveq	r3, #0
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	e008      	b.n	800ea62 <HAL_TIM_OC_Start_IT+0xa2>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	bf14      	ite	ne
 800ea5c:	2301      	movne	r3, #1
 800ea5e:	2300      	moveq	r3, #0
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d001      	beq.n	800ea6a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	e0ec      	b.n	800ec44 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d104      	bne.n	800ea7a <HAL_TIM_OC_Start_IT+0xba>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2202      	movs	r2, #2
 800ea74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea78:	e023      	b.n	800eac2 <HAL_TIM_OC_Start_IT+0x102>
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2b04      	cmp	r3, #4
 800ea7e:	d104      	bne.n	800ea8a <HAL_TIM_OC_Start_IT+0xca>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2202      	movs	r2, #2
 800ea84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea88:	e01b      	b.n	800eac2 <HAL_TIM_OC_Start_IT+0x102>
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	2b08      	cmp	r3, #8
 800ea8e:	d104      	bne.n	800ea9a <HAL_TIM_OC_Start_IT+0xda>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2202      	movs	r2, #2
 800ea94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea98:	e013      	b.n	800eac2 <HAL_TIM_OC_Start_IT+0x102>
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	2b0c      	cmp	r3, #12
 800ea9e:	d104      	bne.n	800eaaa <HAL_TIM_OC_Start_IT+0xea>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2202      	movs	r2, #2
 800eaa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eaa8:	e00b      	b.n	800eac2 <HAL_TIM_OC_Start_IT+0x102>
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	2b10      	cmp	r3, #16
 800eaae:	d104      	bne.n	800eaba <HAL_TIM_OC_Start_IT+0xfa>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2202      	movs	r2, #2
 800eab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eab8:	e003      	b.n	800eac2 <HAL_TIM_OC_Start_IT+0x102>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2202      	movs	r2, #2
 800eabe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	2b0c      	cmp	r3, #12
 800eac6:	d841      	bhi.n	800eb4c <HAL_TIM_OC_Start_IT+0x18c>
 800eac8:	a201      	add	r2, pc, #4	; (adr r2, 800ead0 <HAL_TIM_OC_Start_IT+0x110>)
 800eaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eace:	bf00      	nop
 800ead0:	0800eb05 	.word	0x0800eb05
 800ead4:	0800eb4d 	.word	0x0800eb4d
 800ead8:	0800eb4d 	.word	0x0800eb4d
 800eadc:	0800eb4d 	.word	0x0800eb4d
 800eae0:	0800eb17 	.word	0x0800eb17
 800eae4:	0800eb4d 	.word	0x0800eb4d
 800eae8:	0800eb4d 	.word	0x0800eb4d
 800eaec:	0800eb4d 	.word	0x0800eb4d
 800eaf0:	0800eb29 	.word	0x0800eb29
 800eaf4:	0800eb4d 	.word	0x0800eb4d
 800eaf8:	0800eb4d 	.word	0x0800eb4d
 800eafc:	0800eb4d 	.word	0x0800eb4d
 800eb00:	0800eb3b 	.word	0x0800eb3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68da      	ldr	r2, [r3, #12]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f042 0202 	orr.w	r2, r2, #2
 800eb12:	60da      	str	r2, [r3, #12]
      break;
 800eb14:	e01d      	b.n	800eb52 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	68da      	ldr	r2, [r3, #12]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f042 0204 	orr.w	r2, r2, #4
 800eb24:	60da      	str	r2, [r3, #12]
      break;
 800eb26:	e014      	b.n	800eb52 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	68da      	ldr	r2, [r3, #12]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f042 0208 	orr.w	r2, r2, #8
 800eb36:	60da      	str	r2, [r3, #12]
      break;
 800eb38:	e00b      	b.n	800eb52 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	68da      	ldr	r2, [r3, #12]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f042 0210 	orr.w	r2, r2, #16
 800eb48:	60da      	str	r2, [r3, #12]
      break;
 800eb4a:	e002      	b.n	800eb52 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb50:	bf00      	nop
  }

  if (status == HAL_OK)
 800eb52:	7bfb      	ldrb	r3, [r7, #15]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d174      	bne.n	800ec42 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f001 f917 	bl	800fd94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a38      	ldr	r2, [pc, #224]	; (800ec4c <HAL_TIM_OC_Start_IT+0x28c>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d013      	beq.n	800eb98 <HAL_TIM_OC_Start_IT+0x1d8>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a36      	ldr	r2, [pc, #216]	; (800ec50 <HAL_TIM_OC_Start_IT+0x290>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d00e      	beq.n	800eb98 <HAL_TIM_OC_Start_IT+0x1d8>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4a35      	ldr	r2, [pc, #212]	; (800ec54 <HAL_TIM_OC_Start_IT+0x294>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d009      	beq.n	800eb98 <HAL_TIM_OC_Start_IT+0x1d8>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a33      	ldr	r2, [pc, #204]	; (800ec58 <HAL_TIM_OC_Start_IT+0x298>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d004      	beq.n	800eb98 <HAL_TIM_OC_Start_IT+0x1d8>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a32      	ldr	r2, [pc, #200]	; (800ec5c <HAL_TIM_OC_Start_IT+0x29c>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d101      	bne.n	800eb9c <HAL_TIM_OC_Start_IT+0x1dc>
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e000      	b.n	800eb9e <HAL_TIM_OC_Start_IT+0x1de>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d007      	beq.n	800ebb2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ebb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4a25      	ldr	r2, [pc, #148]	; (800ec4c <HAL_TIM_OC_Start_IT+0x28c>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d022      	beq.n	800ec02 <HAL_TIM_OC_Start_IT+0x242>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebc4:	d01d      	beq.n	800ec02 <HAL_TIM_OC_Start_IT+0x242>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a25      	ldr	r2, [pc, #148]	; (800ec60 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d018      	beq.n	800ec02 <HAL_TIM_OC_Start_IT+0x242>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a23      	ldr	r2, [pc, #140]	; (800ec64 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d013      	beq.n	800ec02 <HAL_TIM_OC_Start_IT+0x242>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a22      	ldr	r2, [pc, #136]	; (800ec68 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d00e      	beq.n	800ec02 <HAL_TIM_OC_Start_IT+0x242>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a19      	ldr	r2, [pc, #100]	; (800ec50 <HAL_TIM_OC_Start_IT+0x290>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d009      	beq.n	800ec02 <HAL_TIM_OC_Start_IT+0x242>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a1e      	ldr	r2, [pc, #120]	; (800ec6c <HAL_TIM_OC_Start_IT+0x2ac>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d004      	beq.n	800ec02 <HAL_TIM_OC_Start_IT+0x242>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a15      	ldr	r2, [pc, #84]	; (800ec54 <HAL_TIM_OC_Start_IT+0x294>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d115      	bne.n	800ec2e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	689a      	ldr	r2, [r3, #8]
 800ec08:	4b19      	ldr	r3, [pc, #100]	; (800ec70 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	2b06      	cmp	r3, #6
 800ec12:	d015      	beq.n	800ec40 <HAL_TIM_OC_Start_IT+0x280>
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec1a:	d011      	beq.n	800ec40 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f042 0201 	orr.w	r2, r2, #1
 800ec2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec2c:	e008      	b.n	800ec40 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f042 0201 	orr.w	r2, r2, #1
 800ec3c:	601a      	str	r2, [r3, #0]
 800ec3e:	e000      	b.n	800ec42 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec40:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ec42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3710      	adds	r7, #16
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	40010000 	.word	0x40010000
 800ec50:	40010400 	.word	0x40010400
 800ec54:	40014000 	.word	0x40014000
 800ec58:	40014400 	.word	0x40014400
 800ec5c:	40014800 	.word	0x40014800
 800ec60:	40000400 	.word	0x40000400
 800ec64:	40000800 	.word	0x40000800
 800ec68:	40000c00 	.word	0x40000c00
 800ec6c:	40001800 	.word	0x40001800
 800ec70:	00010007 	.word	0x00010007

0800ec74 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	2b0c      	cmp	r3, #12
 800ec86:	d841      	bhi.n	800ed0c <HAL_TIM_OC_Stop_IT+0x98>
 800ec88:	a201      	add	r2, pc, #4	; (adr r2, 800ec90 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ec8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec8e:	bf00      	nop
 800ec90:	0800ecc5 	.word	0x0800ecc5
 800ec94:	0800ed0d 	.word	0x0800ed0d
 800ec98:	0800ed0d 	.word	0x0800ed0d
 800ec9c:	0800ed0d 	.word	0x0800ed0d
 800eca0:	0800ecd7 	.word	0x0800ecd7
 800eca4:	0800ed0d 	.word	0x0800ed0d
 800eca8:	0800ed0d 	.word	0x0800ed0d
 800ecac:	0800ed0d 	.word	0x0800ed0d
 800ecb0:	0800ece9 	.word	0x0800ece9
 800ecb4:	0800ed0d 	.word	0x0800ed0d
 800ecb8:	0800ed0d 	.word	0x0800ed0d
 800ecbc:	0800ed0d 	.word	0x0800ed0d
 800ecc0:	0800ecfb 	.word	0x0800ecfb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	68da      	ldr	r2, [r3, #12]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f022 0202 	bic.w	r2, r2, #2
 800ecd2:	60da      	str	r2, [r3, #12]
      break;
 800ecd4:	e01d      	b.n	800ed12 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68da      	ldr	r2, [r3, #12]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f022 0204 	bic.w	r2, r2, #4
 800ece4:	60da      	str	r2, [r3, #12]
      break;
 800ece6:	e014      	b.n	800ed12 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68da      	ldr	r2, [r3, #12]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f022 0208 	bic.w	r2, r2, #8
 800ecf6:	60da      	str	r2, [r3, #12]
      break;
 800ecf8:	e00b      	b.n	800ed12 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	68da      	ldr	r2, [r3, #12]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f022 0210 	bic.w	r2, r2, #16
 800ed08:	60da      	str	r2, [r3, #12]
      break;
 800ed0a:	e002      	b.n	800ed12 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ed10:	bf00      	nop
  }

  if (status == HAL_OK)
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f040 8081 	bne.w	800ee1c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f001 f836 	bl	800fd94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a3e      	ldr	r2, [pc, #248]	; (800ee28 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d013      	beq.n	800ed5a <HAL_TIM_OC_Stop_IT+0xe6>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a3d      	ldr	r2, [pc, #244]	; (800ee2c <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d00e      	beq.n	800ed5a <HAL_TIM_OC_Stop_IT+0xe6>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a3b      	ldr	r2, [pc, #236]	; (800ee30 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d009      	beq.n	800ed5a <HAL_TIM_OC_Stop_IT+0xe6>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a3a      	ldr	r2, [pc, #232]	; (800ee34 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d004      	beq.n	800ed5a <HAL_TIM_OC_Stop_IT+0xe6>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a38      	ldr	r2, [pc, #224]	; (800ee38 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d101      	bne.n	800ed5e <HAL_TIM_OC_Stop_IT+0xea>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e000      	b.n	800ed60 <HAL_TIM_OC_Stop_IT+0xec>
 800ed5e:	2300      	movs	r3, #0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d017      	beq.n	800ed94 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6a1a      	ldr	r2, [r3, #32]
 800ed6a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ed6e:	4013      	ands	r3, r2
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10f      	bne.n	800ed94 <HAL_TIM_OC_Stop_IT+0x120>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6a1a      	ldr	r2, [r3, #32]
 800ed7a:	f240 4344 	movw	r3, #1092	; 0x444
 800ed7e:	4013      	ands	r3, r2
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d107      	bne.n	800ed94 <HAL_TIM_OC_Stop_IT+0x120>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ed92:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	6a1a      	ldr	r2, [r3, #32]
 800ed9a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ed9e:	4013      	ands	r3, r2
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10f      	bne.n	800edc4 <HAL_TIM_OC_Stop_IT+0x150>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6a1a      	ldr	r2, [r3, #32]
 800edaa:	f240 4344 	movw	r3, #1092	; 0x444
 800edae:	4013      	ands	r3, r2
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d107      	bne.n	800edc4 <HAL_TIM_OC_Stop_IT+0x150>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f022 0201 	bic.w	r2, r2, #1
 800edc2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d104      	bne.n	800edd4 <HAL_TIM_OC_Stop_IT+0x160>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2201      	movs	r2, #1
 800edce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800edd2:	e023      	b.n	800ee1c <HAL_TIM_OC_Stop_IT+0x1a8>
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	2b04      	cmp	r3, #4
 800edd8:	d104      	bne.n	800ede4 <HAL_TIM_OC_Stop_IT+0x170>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2201      	movs	r2, #1
 800edde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ede2:	e01b      	b.n	800ee1c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2b08      	cmp	r3, #8
 800ede8:	d104      	bne.n	800edf4 <HAL_TIM_OC_Stop_IT+0x180>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2201      	movs	r2, #1
 800edee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800edf2:	e013      	b.n	800ee1c <HAL_TIM_OC_Stop_IT+0x1a8>
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	2b0c      	cmp	r3, #12
 800edf8:	d104      	bne.n	800ee04 <HAL_TIM_OC_Stop_IT+0x190>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2201      	movs	r2, #1
 800edfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee02:	e00b      	b.n	800ee1c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	2b10      	cmp	r3, #16
 800ee08:	d104      	bne.n	800ee14 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee12:	e003      	b.n	800ee1c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ee1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	40010000 	.word	0x40010000
 800ee2c:	40010400 	.word	0x40010400
 800ee30:	40014000 	.word	0x40014000
 800ee34:	40014400 	.word	0x40014400
 800ee38:	40014800 	.word	0x40014800

0800ee3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d101      	bne.n	800ee4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e049      	b.n	800eee2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d106      	bne.n	800ee68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 f841 	bl	800eeea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2202      	movs	r2, #2
 800ee6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3304      	adds	r3, #4
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f000 fb70 	bl	800f560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2201      	movs	r2, #1
 800eea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b083      	sub	sp, #12
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800eef2:	bf00      	nop
 800eef4:	370c      	adds	r7, #12
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr

0800eefe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b084      	sub	sp, #16
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	691b      	ldr	r3, [r3, #16]
 800ef14:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	f003 0302 	and.w	r3, r3, #2
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d020      	beq.n	800ef62 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f003 0302 	and.w	r3, r3, #2
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d01b      	beq.n	800ef62 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f06f 0202 	mvn.w	r2, #2
 800ef32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	699b      	ldr	r3, [r3, #24]
 800ef40:	f003 0303 	and.w	r3, r3, #3
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d003      	beq.n	800ef50 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 faeb 	bl	800f524 <HAL_TIM_IC_CaptureCallback>
 800ef4e:	e005      	b.n	800ef5c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7f1 fb55 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 faee 	bl	800f538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	f003 0304 	and.w	r3, r3, #4
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d020      	beq.n	800efae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f003 0304 	and.w	r3, r3, #4
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d01b      	beq.n	800efae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f06f 0204 	mvn.w	r2, #4
 800ef7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2202      	movs	r2, #2
 800ef84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d003      	beq.n	800ef9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 fac5 	bl	800f524 <HAL_TIM_IC_CaptureCallback>
 800ef9a:	e005      	b.n	800efa8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7f1 fb2f 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 fac8 	bl	800f538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	f003 0308 	and.w	r3, r3, #8
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d020      	beq.n	800effa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f003 0308 	and.w	r3, r3, #8
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d01b      	beq.n	800effa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f06f 0208 	mvn.w	r2, #8
 800efca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2204      	movs	r2, #4
 800efd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	69db      	ldr	r3, [r3, #28]
 800efd8:	f003 0303 	and.w	r3, r3, #3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d003      	beq.n	800efe8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 fa9f 	bl	800f524 <HAL_TIM_IC_CaptureCallback>
 800efe6:	e005      	b.n	800eff4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7f1 fb09 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 faa2 	bl	800f538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	f003 0310 	and.w	r3, r3, #16
 800f000:	2b00      	cmp	r3, #0
 800f002:	d020      	beq.n	800f046 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f003 0310 	and.w	r3, r3, #16
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d01b      	beq.n	800f046 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f06f 0210 	mvn.w	r2, #16
 800f016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2208      	movs	r2, #8
 800f01c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	69db      	ldr	r3, [r3, #28]
 800f024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d003      	beq.n	800f034 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fa79 	bl	800f524 <HAL_TIM_IC_CaptureCallback>
 800f032:	e005      	b.n	800f040 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7f1 fae3 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fa7c 	bl	800f538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00c      	beq.n	800f06a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f003 0301 	and.w	r3, r3, #1
 800f056:	2b00      	cmp	r3, #0
 800f058:	d007      	beq.n	800f06a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f06f 0201 	mvn.w	r2, #1
 800f062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7f3 ffcb 	bl	8003000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f070:	2b00      	cmp	r3, #0
 800f072:	d104      	bne.n	800f07e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00c      	beq.n	800f098 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f084:	2b00      	cmp	r3, #0
 800f086:	d007      	beq.n	800f098 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 ffba 	bl	801000c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00c      	beq.n	800f0bc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d007      	beq.n	800f0bc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 ffb2 	bl	8010020 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00c      	beq.n	800f0e0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d007      	beq.n	800f0e0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fa36 	bl	800f54c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	f003 0320 	and.w	r3, r3, #32
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00c      	beq.n	800f104 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f003 0320 	and.w	r3, r3, #32
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d007      	beq.n	800f104 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f06f 0220 	mvn.w	r2, #32
 800f0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 ff7a 	bl	800fff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f104:	bf00      	nop
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b086      	sub	sp, #24
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f118:	2300      	movs	r3, #0
 800f11a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f122:	2b01      	cmp	r3, #1
 800f124:	d101      	bne.n	800f12a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f126:	2302      	movs	r3, #2
 800f128:	e0ff      	b.n	800f32a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2201      	movs	r2, #1
 800f12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b14      	cmp	r3, #20
 800f136:	f200 80f0 	bhi.w	800f31a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f13a:	a201      	add	r2, pc, #4	; (adr r2, 800f140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f140:	0800f195 	.word	0x0800f195
 800f144:	0800f31b 	.word	0x0800f31b
 800f148:	0800f31b 	.word	0x0800f31b
 800f14c:	0800f31b 	.word	0x0800f31b
 800f150:	0800f1d5 	.word	0x0800f1d5
 800f154:	0800f31b 	.word	0x0800f31b
 800f158:	0800f31b 	.word	0x0800f31b
 800f15c:	0800f31b 	.word	0x0800f31b
 800f160:	0800f217 	.word	0x0800f217
 800f164:	0800f31b 	.word	0x0800f31b
 800f168:	0800f31b 	.word	0x0800f31b
 800f16c:	0800f31b 	.word	0x0800f31b
 800f170:	0800f257 	.word	0x0800f257
 800f174:	0800f31b 	.word	0x0800f31b
 800f178:	0800f31b 	.word	0x0800f31b
 800f17c:	0800f31b 	.word	0x0800f31b
 800f180:	0800f299 	.word	0x0800f299
 800f184:	0800f31b 	.word	0x0800f31b
 800f188:	0800f31b 	.word	0x0800f31b
 800f18c:	0800f31b 	.word	0x0800f31b
 800f190:	0800f2d9 	.word	0x0800f2d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	68b9      	ldr	r1, [r7, #8]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 fa86 	bl	800f6ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	699a      	ldr	r2, [r3, #24]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f042 0208 	orr.w	r2, r2, #8
 800f1ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	699a      	ldr	r2, [r3, #24]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f022 0204 	bic.w	r2, r2, #4
 800f1be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6999      	ldr	r1, [r3, #24]
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	691a      	ldr	r2, [r3, #16]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	430a      	orrs	r2, r1
 800f1d0:	619a      	str	r2, [r3, #24]
      break;
 800f1d2:	e0a5      	b.n	800f320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68b9      	ldr	r1, [r7, #8]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f000 faf6 	bl	800f7cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	699a      	ldr	r2, [r3, #24]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	699a      	ldr	r2, [r3, #24]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	6999      	ldr	r1, [r3, #24]
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	691b      	ldr	r3, [r3, #16]
 800f20a:	021a      	lsls	r2, r3, #8
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	430a      	orrs	r2, r1
 800f212:	619a      	str	r2, [r3, #24]
      break;
 800f214:	e084      	b.n	800f320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	68b9      	ldr	r1, [r7, #8]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 fb5f 	bl	800f8e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	69da      	ldr	r2, [r3, #28]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f042 0208 	orr.w	r2, r2, #8
 800f230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	69da      	ldr	r2, [r3, #28]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f022 0204 	bic.w	r2, r2, #4
 800f240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69d9      	ldr	r1, [r3, #28]
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	691a      	ldr	r2, [r3, #16]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	430a      	orrs	r2, r1
 800f252:	61da      	str	r2, [r3, #28]
      break;
 800f254:	e064      	b.n	800f320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	68b9      	ldr	r1, [r7, #8]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f000 fbc7 	bl	800f9f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	69da      	ldr	r2, [r3, #28]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	69da      	ldr	r2, [r3, #28]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	69d9      	ldr	r1, [r3, #28]
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	021a      	lsls	r2, r3, #8
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	430a      	orrs	r2, r1
 800f294:	61da      	str	r2, [r3, #28]
      break;
 800f296:	e043      	b.n	800f320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68b9      	ldr	r1, [r7, #8]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f000 fc10 	bl	800fac4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f042 0208 	orr.w	r2, r2, #8
 800f2b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f022 0204 	bic.w	r2, r2, #4
 800f2c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	691a      	ldr	r2, [r3, #16]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	430a      	orrs	r2, r1
 800f2d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f2d6:	e023      	b.n	800f320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	68b9      	ldr	r1, [r7, #8]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f000 fc54 	bl	800fb8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	691b      	ldr	r3, [r3, #16]
 800f30e:	021a      	lsls	r2, r3, #8
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	430a      	orrs	r2, r1
 800f316:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f318:	e002      	b.n	800f320 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f31a:	2301      	movs	r3, #1
 800f31c:	75fb      	strb	r3, [r7, #23]
      break;
 800f31e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2200      	movs	r2, #0
 800f324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f328:	7dfb      	ldrb	r3, [r7, #23]
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3718      	adds	r7, #24
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop

0800f334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f33e:	2300      	movs	r3, #0
 800f340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d101      	bne.n	800f350 <HAL_TIM_ConfigClockSource+0x1c>
 800f34c:	2302      	movs	r3, #2
 800f34e:	e0dc      	b.n	800f50a <HAL_TIM_ConfigClockSource+0x1d6>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f368:	68ba      	ldr	r2, [r7, #8]
 800f36a:	4b6a      	ldr	r3, [pc, #424]	; (800f514 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f36c:	4013      	ands	r3, r2
 800f36e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68ba      	ldr	r2, [r7, #8]
 800f37e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a64      	ldr	r2, [pc, #400]	; (800f518 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f386:	4293      	cmp	r3, r2
 800f388:	f000 80a9 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f38c:	4a62      	ldr	r2, [pc, #392]	; (800f518 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	f200 80ae 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f394:	4a61      	ldr	r2, [pc, #388]	; (800f51c <HAL_TIM_ConfigClockSource+0x1e8>)
 800f396:	4293      	cmp	r3, r2
 800f398:	f000 80a1 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f39c:	4a5f      	ldr	r2, [pc, #380]	; (800f51c <HAL_TIM_ConfigClockSource+0x1e8>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	f200 80a6 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3a4:	4a5e      	ldr	r2, [pc, #376]	; (800f520 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	f000 8099 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f3ac:	4a5c      	ldr	r2, [pc, #368]	; (800f520 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	f200 809e 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3b8:	f000 8091 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f3bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3c0:	f200 8096 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3c8:	f000 8089 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f3cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3d0:	f200 808e 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3d8:	d03e      	beq.n	800f458 <HAL_TIM_ConfigClockSource+0x124>
 800f3da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3de:	f200 8087 	bhi.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3e6:	f000 8086 	beq.w	800f4f6 <HAL_TIM_ConfigClockSource+0x1c2>
 800f3ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3ee:	d87f      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3f0:	2b70      	cmp	r3, #112	; 0x70
 800f3f2:	d01a      	beq.n	800f42a <HAL_TIM_ConfigClockSource+0xf6>
 800f3f4:	2b70      	cmp	r3, #112	; 0x70
 800f3f6:	d87b      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3f8:	2b60      	cmp	r3, #96	; 0x60
 800f3fa:	d050      	beq.n	800f49e <HAL_TIM_ConfigClockSource+0x16a>
 800f3fc:	2b60      	cmp	r3, #96	; 0x60
 800f3fe:	d877      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f400:	2b50      	cmp	r3, #80	; 0x50
 800f402:	d03c      	beq.n	800f47e <HAL_TIM_ConfigClockSource+0x14a>
 800f404:	2b50      	cmp	r3, #80	; 0x50
 800f406:	d873      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f408:	2b40      	cmp	r3, #64	; 0x40
 800f40a:	d058      	beq.n	800f4be <HAL_TIM_ConfigClockSource+0x18a>
 800f40c:	2b40      	cmp	r3, #64	; 0x40
 800f40e:	d86f      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f410:	2b30      	cmp	r3, #48	; 0x30
 800f412:	d064      	beq.n	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f414:	2b30      	cmp	r3, #48	; 0x30
 800f416:	d86b      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f418:	2b20      	cmp	r3, #32
 800f41a:	d060      	beq.n	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f41c:	2b20      	cmp	r3, #32
 800f41e:	d867      	bhi.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f420:	2b00      	cmp	r3, #0
 800f422:	d05c      	beq.n	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f424:	2b10      	cmp	r3, #16
 800f426:	d05a      	beq.n	800f4de <HAL_TIM_ConfigClockSource+0x1aa>
 800f428:	e062      	b.n	800f4f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6818      	ldr	r0, [r3, #0]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	6899      	ldr	r1, [r3, #8]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	685a      	ldr	r2, [r3, #4]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	f000 fc8b 	bl	800fd54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f44c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	68ba      	ldr	r2, [r7, #8]
 800f454:	609a      	str	r2, [r3, #8]
      break;
 800f456:	e04f      	b.n	800f4f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6818      	ldr	r0, [r3, #0]
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	6899      	ldr	r1, [r3, #8]
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	685a      	ldr	r2, [r3, #4]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	f000 fc74 	bl	800fd54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	689a      	ldr	r2, [r3, #8]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f47a:	609a      	str	r2, [r3, #8]
      break;
 800f47c:	e03c      	b.n	800f4f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6818      	ldr	r0, [r3, #0]
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	6859      	ldr	r1, [r3, #4]
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	461a      	mov	r2, r3
 800f48c:	f000 fbe4 	bl	800fc58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2150      	movs	r1, #80	; 0x50
 800f496:	4618      	mov	r0, r3
 800f498:	f000 fc3e 	bl	800fd18 <TIM_ITRx_SetConfig>
      break;
 800f49c:	e02c      	b.n	800f4f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6818      	ldr	r0, [r3, #0]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	6859      	ldr	r1, [r3, #4]
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f000 fc03 	bl	800fcb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2160      	movs	r1, #96	; 0x60
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 fc2e 	bl	800fd18 <TIM_ITRx_SetConfig>
      break;
 800f4bc:	e01c      	b.n	800f4f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6818      	ldr	r0, [r3, #0]
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	6859      	ldr	r1, [r3, #4]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	f000 fbc4 	bl	800fc58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2140      	movs	r1, #64	; 0x40
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f000 fc1e 	bl	800fd18 <TIM_ITRx_SetConfig>
      break;
 800f4dc:	e00c      	b.n	800f4f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	4610      	mov	r0, r2
 800f4ea:	f000 fc15 	bl	800fd18 <TIM_ITRx_SetConfig>
      break;
 800f4ee:	e003      	b.n	800f4f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f4f4:	e000      	b.n	800f4f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f4f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f508:	7bfb      	ldrb	r3, [r7, #15]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3710      	adds	r7, #16
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	ffceff88 	.word	0xffceff88
 800f518:	00100040 	.word	0x00100040
 800f51c:	00100030 	.word	0x00100030
 800f520:	00100020 	.word	0x00100020

0800f524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f52c:	bf00      	nop
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f540:	bf00      	nop
 800f542:	370c      	adds	r7, #12
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a46      	ldr	r2, [pc, #280]	; (800f68c <TIM_Base_SetConfig+0x12c>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d013      	beq.n	800f5a0 <TIM_Base_SetConfig+0x40>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f57e:	d00f      	beq.n	800f5a0 <TIM_Base_SetConfig+0x40>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a43      	ldr	r2, [pc, #268]	; (800f690 <TIM_Base_SetConfig+0x130>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d00b      	beq.n	800f5a0 <TIM_Base_SetConfig+0x40>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a42      	ldr	r2, [pc, #264]	; (800f694 <TIM_Base_SetConfig+0x134>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d007      	beq.n	800f5a0 <TIM_Base_SetConfig+0x40>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a41      	ldr	r2, [pc, #260]	; (800f698 <TIM_Base_SetConfig+0x138>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d003      	beq.n	800f5a0 <TIM_Base_SetConfig+0x40>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a40      	ldr	r2, [pc, #256]	; (800f69c <TIM_Base_SetConfig+0x13c>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d108      	bne.n	800f5b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a35      	ldr	r2, [pc, #212]	; (800f68c <TIM_Base_SetConfig+0x12c>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d01f      	beq.n	800f5fa <TIM_Base_SetConfig+0x9a>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5c0:	d01b      	beq.n	800f5fa <TIM_Base_SetConfig+0x9a>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a32      	ldr	r2, [pc, #200]	; (800f690 <TIM_Base_SetConfig+0x130>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d017      	beq.n	800f5fa <TIM_Base_SetConfig+0x9a>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4a31      	ldr	r2, [pc, #196]	; (800f694 <TIM_Base_SetConfig+0x134>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d013      	beq.n	800f5fa <TIM_Base_SetConfig+0x9a>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a30      	ldr	r2, [pc, #192]	; (800f698 <TIM_Base_SetConfig+0x138>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d00f      	beq.n	800f5fa <TIM_Base_SetConfig+0x9a>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a2f      	ldr	r2, [pc, #188]	; (800f69c <TIM_Base_SetConfig+0x13c>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d00b      	beq.n	800f5fa <TIM_Base_SetConfig+0x9a>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4a2e      	ldr	r2, [pc, #184]	; (800f6a0 <TIM_Base_SetConfig+0x140>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d007      	beq.n	800f5fa <TIM_Base_SetConfig+0x9a>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a2d      	ldr	r2, [pc, #180]	; (800f6a4 <TIM_Base_SetConfig+0x144>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d003      	beq.n	800f5fa <TIM_Base_SetConfig+0x9a>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a2c      	ldr	r2, [pc, #176]	; (800f6a8 <TIM_Base_SetConfig+0x148>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d108      	bne.n	800f60c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	4313      	orrs	r3, r2
 800f60a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	695b      	ldr	r3, [r3, #20]
 800f616:	4313      	orrs	r3, r2
 800f618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	689a      	ldr	r2, [r3, #8]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a16      	ldr	r2, [pc, #88]	; (800f68c <TIM_Base_SetConfig+0x12c>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d00f      	beq.n	800f658 <TIM_Base_SetConfig+0xf8>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a18      	ldr	r2, [pc, #96]	; (800f69c <TIM_Base_SetConfig+0x13c>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d00b      	beq.n	800f658 <TIM_Base_SetConfig+0xf8>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a17      	ldr	r2, [pc, #92]	; (800f6a0 <TIM_Base_SetConfig+0x140>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d007      	beq.n	800f658 <TIM_Base_SetConfig+0xf8>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a16      	ldr	r2, [pc, #88]	; (800f6a4 <TIM_Base_SetConfig+0x144>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d003      	beq.n	800f658 <TIM_Base_SetConfig+0xf8>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a15      	ldr	r2, [pc, #84]	; (800f6a8 <TIM_Base_SetConfig+0x148>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d103      	bne.n	800f660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	691a      	ldr	r2, [r3, #16]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2201      	movs	r2, #1
 800f664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	f003 0301 	and.w	r3, r3, #1
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d105      	bne.n	800f67e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	f023 0201 	bic.w	r2, r3, #1
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	611a      	str	r2, [r3, #16]
  }
}
 800f67e:	bf00      	nop
 800f680:	3714      	adds	r7, #20
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	40010000 	.word	0x40010000
 800f690:	40000400 	.word	0x40000400
 800f694:	40000800 	.word	0x40000800
 800f698:	40000c00 	.word	0x40000c00
 800f69c:	40010400 	.word	0x40010400
 800f6a0:	40014000 	.word	0x40014000
 800f6a4:	40014400 	.word	0x40014400
 800f6a8:	40014800 	.word	0x40014800

0800f6ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b087      	sub	sp, #28
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6a1b      	ldr	r3, [r3, #32]
 800f6ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a1b      	ldr	r3, [r3, #32]
 800f6c0:	f023 0201 	bic.w	r2, r3, #1
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	699b      	ldr	r3, [r3, #24]
 800f6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	4b37      	ldr	r3, [pc, #220]	; (800f7b4 <TIM_OC1_SetConfig+0x108>)
 800f6d8:	4013      	ands	r3, r2
 800f6da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f023 0303 	bic.w	r3, r3, #3
 800f6e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	68fa      	ldr	r2, [r7, #12]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f023 0302 	bic.w	r3, r3, #2
 800f6f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a2d      	ldr	r2, [pc, #180]	; (800f7b8 <TIM_OC1_SetConfig+0x10c>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d00f      	beq.n	800f728 <TIM_OC1_SetConfig+0x7c>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a2c      	ldr	r2, [pc, #176]	; (800f7bc <TIM_OC1_SetConfig+0x110>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d00b      	beq.n	800f728 <TIM_OC1_SetConfig+0x7c>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a2b      	ldr	r2, [pc, #172]	; (800f7c0 <TIM_OC1_SetConfig+0x114>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d007      	beq.n	800f728 <TIM_OC1_SetConfig+0x7c>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a2a      	ldr	r2, [pc, #168]	; (800f7c4 <TIM_OC1_SetConfig+0x118>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d003      	beq.n	800f728 <TIM_OC1_SetConfig+0x7c>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a29      	ldr	r2, [pc, #164]	; (800f7c8 <TIM_OC1_SetConfig+0x11c>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d10c      	bne.n	800f742 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	f023 0308 	bic.w	r3, r3, #8
 800f72e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	4313      	orrs	r3, r2
 800f738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f023 0304 	bic.w	r3, r3, #4
 800f740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a1c      	ldr	r2, [pc, #112]	; (800f7b8 <TIM_OC1_SetConfig+0x10c>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d00f      	beq.n	800f76a <TIM_OC1_SetConfig+0xbe>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a1b      	ldr	r2, [pc, #108]	; (800f7bc <TIM_OC1_SetConfig+0x110>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d00b      	beq.n	800f76a <TIM_OC1_SetConfig+0xbe>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a1a      	ldr	r2, [pc, #104]	; (800f7c0 <TIM_OC1_SetConfig+0x114>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d007      	beq.n	800f76a <TIM_OC1_SetConfig+0xbe>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a19      	ldr	r2, [pc, #100]	; (800f7c4 <TIM_OC1_SetConfig+0x118>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d003      	beq.n	800f76a <TIM_OC1_SetConfig+0xbe>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4a18      	ldr	r2, [pc, #96]	; (800f7c8 <TIM_OC1_SetConfig+0x11c>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d111      	bne.n	800f78e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	4313      	orrs	r3, r2
 800f782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	699b      	ldr	r3, [r3, #24]
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	4313      	orrs	r3, r2
 800f78c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	693a      	ldr	r2, [r7, #16]
 800f792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	697a      	ldr	r2, [r7, #20]
 800f7a6:	621a      	str	r2, [r3, #32]
}
 800f7a8:	bf00      	nop
 800f7aa:	371c      	adds	r7, #28
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr
 800f7b4:	fffeff8f 	.word	0xfffeff8f
 800f7b8:	40010000 	.word	0x40010000
 800f7bc:	40010400 	.word	0x40010400
 800f7c0:	40014000 	.word	0x40014000
 800f7c4:	40014400 	.word	0x40014400
 800f7c8:	40014800 	.word	0x40014800

0800f7cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b087      	sub	sp, #28
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a1b      	ldr	r3, [r3, #32]
 800f7da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6a1b      	ldr	r3, [r3, #32]
 800f7e0:	f023 0210 	bic.w	r2, r3, #16
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	699b      	ldr	r3, [r3, #24]
 800f7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	4b34      	ldr	r3, [pc, #208]	; (800f8c8 <TIM_OC2_SetConfig+0xfc>)
 800f7f8:	4013      	ands	r3, r2
 800f7fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	021b      	lsls	r3, r3, #8
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	4313      	orrs	r3, r2
 800f80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	f023 0320 	bic.w	r3, r3, #32
 800f816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	011b      	lsls	r3, r3, #4
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	4313      	orrs	r3, r2
 800f822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a29      	ldr	r2, [pc, #164]	; (800f8cc <TIM_OC2_SetConfig+0x100>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d003      	beq.n	800f834 <TIM_OC2_SetConfig+0x68>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4a28      	ldr	r2, [pc, #160]	; (800f8d0 <TIM_OC2_SetConfig+0x104>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d10d      	bne.n	800f850 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f83a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	011b      	lsls	r3, r3, #4
 800f842:	697a      	ldr	r2, [r7, #20]
 800f844:	4313      	orrs	r3, r2
 800f846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f84e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4a1e      	ldr	r2, [pc, #120]	; (800f8cc <TIM_OC2_SetConfig+0x100>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d00f      	beq.n	800f878 <TIM_OC2_SetConfig+0xac>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4a1d      	ldr	r2, [pc, #116]	; (800f8d0 <TIM_OC2_SetConfig+0x104>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d00b      	beq.n	800f878 <TIM_OC2_SetConfig+0xac>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a1c      	ldr	r2, [pc, #112]	; (800f8d4 <TIM_OC2_SetConfig+0x108>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d007      	beq.n	800f878 <TIM_OC2_SetConfig+0xac>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a1b      	ldr	r2, [pc, #108]	; (800f8d8 <TIM_OC2_SetConfig+0x10c>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d003      	beq.n	800f878 <TIM_OC2_SetConfig+0xac>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a1a      	ldr	r2, [pc, #104]	; (800f8dc <TIM_OC2_SetConfig+0x110>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d113      	bne.n	800f8a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f87e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	695b      	ldr	r3, [r3, #20]
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	4313      	orrs	r3, r2
 800f892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	693a      	ldr	r2, [r7, #16]
 800f89c:	4313      	orrs	r3, r2
 800f89e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	693a      	ldr	r2, [r7, #16]
 800f8a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	685a      	ldr	r2, [r3, #4]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	697a      	ldr	r2, [r7, #20]
 800f8b8:	621a      	str	r2, [r3, #32]
}
 800f8ba:	bf00      	nop
 800f8bc:	371c      	adds	r7, #28
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	feff8fff 	.word	0xfeff8fff
 800f8cc:	40010000 	.word	0x40010000
 800f8d0:	40010400 	.word	0x40010400
 800f8d4:	40014000 	.word	0x40014000
 800f8d8:	40014400 	.word	0x40014400
 800f8dc:	40014800 	.word	0x40014800

0800f8e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b087      	sub	sp, #28
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a1b      	ldr	r3, [r3, #32]
 800f8ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6a1b      	ldr	r3, [r3, #32]
 800f8f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	69db      	ldr	r3, [r3, #28]
 800f906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f908:	68fa      	ldr	r2, [r7, #12]
 800f90a:	4b33      	ldr	r3, [pc, #204]	; (800f9d8 <TIM_OC3_SetConfig+0xf8>)
 800f90c:	4013      	ands	r3, r2
 800f90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f023 0303 	bic.w	r3, r3, #3
 800f916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	68fa      	ldr	r2, [r7, #12]
 800f91e:	4313      	orrs	r3, r2
 800f920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	021b      	lsls	r3, r3, #8
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	4313      	orrs	r3, r2
 800f934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a28      	ldr	r2, [pc, #160]	; (800f9dc <TIM_OC3_SetConfig+0xfc>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d003      	beq.n	800f946 <TIM_OC3_SetConfig+0x66>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4a27      	ldr	r2, [pc, #156]	; (800f9e0 <TIM_OC3_SetConfig+0x100>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d10d      	bne.n	800f962 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f94c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	021b      	lsls	r3, r3, #8
 800f954:	697a      	ldr	r2, [r7, #20]
 800f956:	4313      	orrs	r3, r2
 800f958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4a1d      	ldr	r2, [pc, #116]	; (800f9dc <TIM_OC3_SetConfig+0xfc>)
 800f966:	4293      	cmp	r3, r2
 800f968:	d00f      	beq.n	800f98a <TIM_OC3_SetConfig+0xaa>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4a1c      	ldr	r2, [pc, #112]	; (800f9e0 <TIM_OC3_SetConfig+0x100>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d00b      	beq.n	800f98a <TIM_OC3_SetConfig+0xaa>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4a1b      	ldr	r2, [pc, #108]	; (800f9e4 <TIM_OC3_SetConfig+0x104>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d007      	beq.n	800f98a <TIM_OC3_SetConfig+0xaa>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4a1a      	ldr	r2, [pc, #104]	; (800f9e8 <TIM_OC3_SetConfig+0x108>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d003      	beq.n	800f98a <TIM_OC3_SetConfig+0xaa>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	4a19      	ldr	r2, [pc, #100]	; (800f9ec <TIM_OC3_SetConfig+0x10c>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d113      	bne.n	800f9b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	011b      	lsls	r3, r3, #4
 800f9a0:	693a      	ldr	r2, [r7, #16]
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	699b      	ldr	r3, [r3, #24]
 800f9aa:	011b      	lsls	r3, r3, #4
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	693a      	ldr	r2, [r7, #16]
 800f9b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	68fa      	ldr	r2, [r7, #12]
 800f9bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	685a      	ldr	r2, [r3, #4]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	697a      	ldr	r2, [r7, #20]
 800f9ca:	621a      	str	r2, [r3, #32]
}
 800f9cc:	bf00      	nop
 800f9ce:	371c      	adds	r7, #28
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr
 800f9d8:	fffeff8f 	.word	0xfffeff8f
 800f9dc:	40010000 	.word	0x40010000
 800f9e0:	40010400 	.word	0x40010400
 800f9e4:	40014000 	.word	0x40014000
 800f9e8:	40014400 	.word	0x40014400
 800f9ec:	40014800 	.word	0x40014800

0800f9f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b087      	sub	sp, #28
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a1b      	ldr	r3, [r3, #32]
 800fa04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	69db      	ldr	r3, [r3, #28]
 800fa16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	4b24      	ldr	r3, [pc, #144]	; (800faac <TIM_OC4_SetConfig+0xbc>)
 800fa1c:	4013      	ands	r3, r2
 800fa1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	021b      	lsls	r3, r3, #8
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	4313      	orrs	r3, r2
 800fa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	689b      	ldr	r3, [r3, #8]
 800fa40:	031b      	lsls	r3, r3, #12
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	4313      	orrs	r3, r2
 800fa46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a19      	ldr	r2, [pc, #100]	; (800fab0 <TIM_OC4_SetConfig+0xc0>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d00f      	beq.n	800fa70 <TIM_OC4_SetConfig+0x80>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4a18      	ldr	r2, [pc, #96]	; (800fab4 <TIM_OC4_SetConfig+0xc4>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d00b      	beq.n	800fa70 <TIM_OC4_SetConfig+0x80>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4a17      	ldr	r2, [pc, #92]	; (800fab8 <TIM_OC4_SetConfig+0xc8>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d007      	beq.n	800fa70 <TIM_OC4_SetConfig+0x80>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4a16      	ldr	r2, [pc, #88]	; (800fabc <TIM_OC4_SetConfig+0xcc>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d003      	beq.n	800fa70 <TIM_OC4_SetConfig+0x80>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a15      	ldr	r2, [pc, #84]	; (800fac0 <TIM_OC4_SetConfig+0xd0>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d109      	bne.n	800fa84 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	695b      	ldr	r3, [r3, #20]
 800fa7c:	019b      	lsls	r3, r3, #6
 800fa7e:	697a      	ldr	r2, [r7, #20]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	685a      	ldr	r2, [r3, #4]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	693a      	ldr	r2, [r7, #16]
 800fa9c:	621a      	str	r2, [r3, #32]
}
 800fa9e:	bf00      	nop
 800faa0:	371c      	adds	r7, #28
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	feff8fff 	.word	0xfeff8fff
 800fab0:	40010000 	.word	0x40010000
 800fab4:	40010400 	.word	0x40010400
 800fab8:	40014000 	.word	0x40014000
 800fabc:	40014400 	.word	0x40014400
 800fac0:	40014800 	.word	0x40014800

0800fac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a1b      	ldr	r3, [r3, #32]
 800fad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	4b21      	ldr	r3, [pc, #132]	; (800fb74 <TIM_OC5_SetConfig+0xb0>)
 800faf0:	4013      	ands	r3, r2
 800faf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	4313      	orrs	r3, r2
 800fafc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fb04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	041b      	lsls	r3, r3, #16
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4a18      	ldr	r2, [pc, #96]	; (800fb78 <TIM_OC5_SetConfig+0xb4>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d00f      	beq.n	800fb3a <TIM_OC5_SetConfig+0x76>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4a17      	ldr	r2, [pc, #92]	; (800fb7c <TIM_OC5_SetConfig+0xb8>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d00b      	beq.n	800fb3a <TIM_OC5_SetConfig+0x76>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4a16      	ldr	r2, [pc, #88]	; (800fb80 <TIM_OC5_SetConfig+0xbc>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d007      	beq.n	800fb3a <TIM_OC5_SetConfig+0x76>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4a15      	ldr	r2, [pc, #84]	; (800fb84 <TIM_OC5_SetConfig+0xc0>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d003      	beq.n	800fb3a <TIM_OC5_SetConfig+0x76>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4a14      	ldr	r2, [pc, #80]	; (800fb88 <TIM_OC5_SetConfig+0xc4>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d109      	bne.n	800fb4e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	695b      	ldr	r3, [r3, #20]
 800fb46:	021b      	lsls	r3, r3, #8
 800fb48:	697a      	ldr	r2, [r7, #20]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	697a      	ldr	r2, [r7, #20]
 800fb52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	685a      	ldr	r2, [r3, #4]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	693a      	ldr	r2, [r7, #16]
 800fb66:	621a      	str	r2, [r3, #32]
}
 800fb68:	bf00      	nop
 800fb6a:	371c      	adds	r7, #28
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr
 800fb74:	fffeff8f 	.word	0xfffeff8f
 800fb78:	40010000 	.word	0x40010000
 800fb7c:	40010400 	.word	0x40010400
 800fb80:	40014000 	.word	0x40014000
 800fb84:	40014400 	.word	0x40014400
 800fb88:	40014800 	.word	0x40014800

0800fb8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b087      	sub	sp, #28
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6a1b      	ldr	r3, [r3, #32]
 800fb9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6a1b      	ldr	r3, [r3, #32]
 800fba0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	4b22      	ldr	r3, [pc, #136]	; (800fc40 <TIM_OC6_SetConfig+0xb4>)
 800fbb8:	4013      	ands	r3, r2
 800fbba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	021b      	lsls	r3, r3, #8
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fbce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	689b      	ldr	r3, [r3, #8]
 800fbd4:	051b      	lsls	r3, r3, #20
 800fbd6:	693a      	ldr	r2, [r7, #16]
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4a19      	ldr	r2, [pc, #100]	; (800fc44 <TIM_OC6_SetConfig+0xb8>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d00f      	beq.n	800fc04 <TIM_OC6_SetConfig+0x78>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	4a18      	ldr	r2, [pc, #96]	; (800fc48 <TIM_OC6_SetConfig+0xbc>)
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d00b      	beq.n	800fc04 <TIM_OC6_SetConfig+0x78>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	4a17      	ldr	r2, [pc, #92]	; (800fc4c <TIM_OC6_SetConfig+0xc0>)
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d007      	beq.n	800fc04 <TIM_OC6_SetConfig+0x78>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	4a16      	ldr	r2, [pc, #88]	; (800fc50 <TIM_OC6_SetConfig+0xc4>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d003      	beq.n	800fc04 <TIM_OC6_SetConfig+0x78>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4a15      	ldr	r2, [pc, #84]	; (800fc54 <TIM_OC6_SetConfig+0xc8>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d109      	bne.n	800fc18 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fc0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	695b      	ldr	r3, [r3, #20]
 800fc10:	029b      	lsls	r3, r3, #10
 800fc12:	697a      	ldr	r2, [r7, #20]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	697a      	ldr	r2, [r7, #20]
 800fc1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	685a      	ldr	r2, [r3, #4]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	621a      	str	r2, [r3, #32]
}
 800fc32:	bf00      	nop
 800fc34:	371c      	adds	r7, #28
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	feff8fff 	.word	0xfeff8fff
 800fc44:	40010000 	.word	0x40010000
 800fc48:	40010400 	.word	0x40010400
 800fc4c:	40014000 	.word	0x40014000
 800fc50:	40014400 	.word	0x40014400
 800fc54:	40014800 	.word	0x40014800

0800fc58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b087      	sub	sp, #28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6a1b      	ldr	r3, [r3, #32]
 800fc68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6a1b      	ldr	r3, [r3, #32]
 800fc6e:	f023 0201 	bic.w	r2, r3, #1
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	699b      	ldr	r3, [r3, #24]
 800fc7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	011b      	lsls	r3, r3, #4
 800fc88:	693a      	ldr	r2, [r7, #16]
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	f023 030a 	bic.w	r3, r3, #10
 800fc94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	693a      	ldr	r2, [r7, #16]
 800fca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	697a      	ldr	r2, [r7, #20]
 800fca8:	621a      	str	r2, [r3, #32]
}
 800fcaa:	bf00      	nop
 800fcac:	371c      	adds	r7, #28
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr

0800fcb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcb6:	b480      	push	{r7}
 800fcb8:	b087      	sub	sp, #28
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	60f8      	str	r0, [r7, #12]
 800fcbe:	60b9      	str	r1, [r7, #8]
 800fcc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6a1b      	ldr	r3, [r3, #32]
 800fccc:	f023 0210 	bic.w	r2, r3, #16
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	699b      	ldr	r3, [r3, #24]
 800fcd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	031b      	lsls	r3, r3, #12
 800fce6:	693a      	ldr	r2, [r7, #16]
 800fce8:	4313      	orrs	r3, r2
 800fcea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fcf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	011b      	lsls	r3, r3, #4
 800fcf8:	697a      	ldr	r2, [r7, #20]
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	693a      	ldr	r2, [r7, #16]
 800fd02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	697a      	ldr	r2, [r7, #20]
 800fd08:	621a      	str	r2, [r3, #32]
}
 800fd0a:	bf00      	nop
 800fd0c:	371c      	adds	r7, #28
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
	...

0800fd18 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd28:	68fa      	ldr	r2, [r7, #12]
 800fd2a:	4b09      	ldr	r3, [pc, #36]	; (800fd50 <TIM_ITRx_SetConfig+0x38>)
 800fd2c:	4013      	ands	r3, r2
 800fd2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd30:	683a      	ldr	r2, [r7, #0]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	4313      	orrs	r3, r2
 800fd36:	f043 0307 	orr.w	r3, r3, #7
 800fd3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	609a      	str	r2, [r3, #8]
}
 800fd42:	bf00      	nop
 800fd44:	3714      	adds	r7, #20
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	ffcfff8f 	.word	0xffcfff8f

0800fd54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b087      	sub	sp, #28
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]
 800fd60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fd6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	021a      	lsls	r2, r3, #8
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	431a      	orrs	r2, r3
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	697a      	ldr	r2, [r7, #20]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	697a      	ldr	r2, [r7, #20]
 800fd86:	609a      	str	r2, [r3, #8]
}
 800fd88:	bf00      	nop
 800fd8a:	371c      	adds	r7, #28
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b087      	sub	sp, #28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	f003 031f 	and.w	r3, r3, #31
 800fda6:	2201      	movs	r2, #1
 800fda8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6a1a      	ldr	r2, [r3, #32]
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	43db      	mvns	r3, r3
 800fdb6:	401a      	ands	r2, r3
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6a1a      	ldr	r2, [r3, #32]
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	f003 031f 	and.w	r3, r3, #31
 800fdc6:	6879      	ldr	r1, [r7, #4]
 800fdc8:	fa01 f303 	lsl.w	r3, r1, r3
 800fdcc:	431a      	orrs	r2, r3
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	621a      	str	r2, [r3, #32]
}
 800fdd2:	bf00      	nop
 800fdd4:	371c      	adds	r7, #28
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr
	...

0800fde0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b085      	sub	sp, #20
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d101      	bne.n	800fdf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fdf4:	2302      	movs	r3, #2
 800fdf6:	e06d      	b.n	800fed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2202      	movs	r2, #2
 800fe04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4a30      	ldr	r2, [pc, #192]	; (800fee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d004      	beq.n	800fe2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4a2f      	ldr	r2, [pc, #188]	; (800fee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d108      	bne.n	800fe3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fe32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a20      	ldr	r2, [pc, #128]	; (800fee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d022      	beq.n	800fea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe6a:	d01d      	beq.n	800fea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a1d      	ldr	r2, [pc, #116]	; (800fee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d018      	beq.n	800fea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a1c      	ldr	r2, [pc, #112]	; (800feec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d013      	beq.n	800fea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a1a      	ldr	r2, [pc, #104]	; (800fef0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d00e      	beq.n	800fea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a15      	ldr	r2, [pc, #84]	; (800fee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d009      	beq.n	800fea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a16      	ldr	r2, [pc, #88]	; (800fef4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d004      	beq.n	800fea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a15      	ldr	r2, [pc, #84]	; (800fef8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d10c      	bne.n	800fec2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800feae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	68ba      	ldr	r2, [r7, #8]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2201      	movs	r2, #1
 800fec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3714      	adds	r7, #20
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	40010000 	.word	0x40010000
 800fee4:	40010400 	.word	0x40010400
 800fee8:	40000400 	.word	0x40000400
 800feec:	40000800 	.word	0x40000800
 800fef0:	40000c00 	.word	0x40000c00
 800fef4:	40001800 	.word	0x40001800
 800fef8:	40014000 	.word	0x40014000

0800fefc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ff06:	2300      	movs	r3, #0
 800ff08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d101      	bne.n	800ff18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ff14:	2302      	movs	r3, #2
 800ff16:	e065      	b.n	800ffe4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	68db      	ldr	r3, [r3, #12]
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	689b      	ldr	r3, [r3, #8]
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	4313      	orrs	r3, r2
 800ff48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	691b      	ldr	r3, [r3, #16]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	695b      	ldr	r3, [r3, #20]
 800ff70:	4313      	orrs	r3, r2
 800ff72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff7e:	4313      	orrs	r3, r2
 800ff80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	041b      	lsls	r3, r3, #16
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4a16      	ldr	r2, [pc, #88]	; (800fff0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d004      	beq.n	800ffa6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4a14      	ldr	r2, [pc, #80]	; (800fff4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d115      	bne.n	800ffd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb0:	051b      	lsls	r3, r3, #20
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	69db      	ldr	r3, [r3, #28]
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	6a1b      	ldr	r3, [r3, #32]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ffe2:	2300      	movs	r3, #0
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3714      	adds	r7, #20
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr
 800fff0:	40010000 	.word	0x40010000
 800fff4:	40010400 	.word	0x40010400

0800fff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fff8:	b480      	push	{r7}
 800fffa:	b083      	sub	sp, #12
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010014:	bf00      	nop
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010028:	bf00      	nop
 801002a:	370c      	adds	r7, #12
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d101      	bne.n	8010046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010042:	2301      	movs	r3, #1
 8010044:	e042      	b.n	80100cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801004c:	2b00      	cmp	r3, #0
 801004e:	d106      	bne.n	801005e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7f3 fbf7 	bl	800384c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2224      	movs	r2, #36	; 0x24
 8010062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	681a      	ldr	r2, [r3, #0]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f022 0201 	bic.w	r2, r2, #1
 8010074:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801007a:	2b00      	cmp	r3, #0
 801007c:	d002      	beq.n	8010084 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f001 fc42 	bl	8011908 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 fed7 	bl	8010e38 <UART_SetConfig>
 801008a:	4603      	mov	r3, r0
 801008c:	2b01      	cmp	r3, #1
 801008e:	d101      	bne.n	8010094 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e01b      	b.n	80100cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	685a      	ldr	r2, [r3, #4]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80100a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	689a      	ldr	r2, [r3, #8]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80100b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f042 0201 	orr.w	r2, r2, #1
 80100c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f001 fcc1 	bl	8011a4c <UART_CheckIdleState>
 80100ca:	4603      	mov	r3, r0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b08a      	sub	sp, #40	; 0x28
 80100d8:	af02      	add	r7, sp, #8
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	603b      	str	r3, [r7, #0]
 80100e0:	4613      	mov	r3, r2
 80100e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100ea:	2b20      	cmp	r3, #32
 80100ec:	d17b      	bne.n	80101e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d002      	beq.n	80100fa <HAL_UART_Transmit+0x26>
 80100f4:	88fb      	ldrh	r3, [r7, #6]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d101      	bne.n	80100fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80100fa:	2301      	movs	r3, #1
 80100fc:	e074      	b.n	80101e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2200      	movs	r2, #0
 8010102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2221      	movs	r2, #33	; 0x21
 801010a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801010e:	f7f3 ff1b 	bl	8003f48 <HAL_GetTick>
 8010112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	88fa      	ldrh	r2, [r7, #6]
 8010118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	88fa      	ldrh	r2, [r7, #6]
 8010120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	689b      	ldr	r3, [r3, #8]
 8010128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801012c:	d108      	bne.n	8010140 <HAL_UART_Transmit+0x6c>
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	691b      	ldr	r3, [r3, #16]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d104      	bne.n	8010140 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010136:	2300      	movs	r3, #0
 8010138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	61bb      	str	r3, [r7, #24]
 801013e:	e003      	b.n	8010148 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010144:	2300      	movs	r3, #0
 8010146:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010148:	e030      	b.n	80101ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	2200      	movs	r2, #0
 8010152:	2180      	movs	r1, #128	; 0x80
 8010154:	68f8      	ldr	r0, [r7, #12]
 8010156:	f001 fd23 	bl	8011ba0 <UART_WaitOnFlagUntilTimeout>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d005      	beq.n	801016c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2220      	movs	r2, #32
 8010164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010168:	2303      	movs	r3, #3
 801016a:	e03d      	b.n	80101e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d10b      	bne.n	801018a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	881b      	ldrh	r3, [r3, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	3302      	adds	r3, #2
 8010186:	61bb      	str	r3, [r7, #24]
 8010188:	e007      	b.n	801019a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	781a      	ldrb	r2, [r3, #0]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	3301      	adds	r3, #1
 8010198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	3b01      	subs	r3, #1
 80101a4:	b29a      	uxth	r2, r3
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d1c8      	bne.n	801014a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	2200      	movs	r2, #0
 80101c0:	2140      	movs	r1, #64	; 0x40
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f001 fcec 	bl	8011ba0 <UART_WaitOnFlagUntilTimeout>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d005      	beq.n	80101da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2220      	movs	r2, #32
 80101d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80101d6:	2303      	movs	r3, #3
 80101d8:	e006      	b.n	80101e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2220      	movs	r2, #32
 80101de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80101e2:	2300      	movs	r3, #0
 80101e4:	e000      	b.n	80101e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80101e6:	2302      	movs	r3, #2
  }
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3720      	adds	r7, #32
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08a      	sub	sp, #40	; 0x28
 80101f4:	af02      	add	r7, sp, #8
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	603b      	str	r3, [r7, #0]
 80101fc:	4613      	mov	r3, r2
 80101fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010206:	2b20      	cmp	r3, #32
 8010208:	f040 80b5 	bne.w	8010376 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d002      	beq.n	8010218 <HAL_UART_Receive+0x28>
 8010212:	88fb      	ldrh	r3, [r7, #6]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d101      	bne.n	801021c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010218:	2301      	movs	r3, #1
 801021a:	e0ad      	b.n	8010378 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2200      	movs	r2, #0
 8010220:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2222      	movs	r2, #34	; 0x22
 8010228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010232:	f7f3 fe89 	bl	8003f48 <HAL_GetTick>
 8010236:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	88fa      	ldrh	r2, [r7, #6]
 801023c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	88fa      	ldrh	r2, [r7, #6]
 8010244:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010250:	d10e      	bne.n	8010270 <HAL_UART_Receive+0x80>
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	691b      	ldr	r3, [r3, #16]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d105      	bne.n	8010266 <HAL_UART_Receive+0x76>
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010264:	e02d      	b.n	80102c2 <HAL_UART_Receive+0xd2>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	22ff      	movs	r2, #255	; 0xff
 801026a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801026e:	e028      	b.n	80102c2 <HAL_UART_Receive+0xd2>
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d10d      	bne.n	8010294 <HAL_UART_Receive+0xa4>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d104      	bne.n	801028a <HAL_UART_Receive+0x9a>
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	22ff      	movs	r2, #255	; 0xff
 8010284:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010288:	e01b      	b.n	80102c2 <HAL_UART_Receive+0xd2>
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	227f      	movs	r2, #127	; 0x7f
 801028e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010292:	e016      	b.n	80102c2 <HAL_UART_Receive+0xd2>
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801029c:	d10d      	bne.n	80102ba <HAL_UART_Receive+0xca>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d104      	bne.n	80102b0 <HAL_UART_Receive+0xc0>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	227f      	movs	r2, #127	; 0x7f
 80102aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102ae:	e008      	b.n	80102c2 <HAL_UART_Receive+0xd2>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	223f      	movs	r2, #63	; 0x3f
 80102b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102b8:	e003      	b.n	80102c2 <HAL_UART_Receive+0xd2>
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2200      	movs	r2, #0
 80102be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80102c8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102d2:	d108      	bne.n	80102e6 <HAL_UART_Receive+0xf6>
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	691b      	ldr	r3, [r3, #16]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d104      	bne.n	80102e6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80102dc:	2300      	movs	r3, #0
 80102de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	61bb      	str	r3, [r7, #24]
 80102e4:	e003      	b.n	80102ee <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102ea:	2300      	movs	r3, #0
 80102ec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80102ee:	e036      	b.n	801035e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	2200      	movs	r2, #0
 80102f8:	2120      	movs	r1, #32
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	f001 fc50 	bl	8011ba0 <UART_WaitOnFlagUntilTimeout>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d005      	beq.n	8010312 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2220      	movs	r2, #32
 801030a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801030e:	2303      	movs	r3, #3
 8010310:	e032      	b.n	8010378 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010312:	69fb      	ldr	r3, [r7, #28]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d10c      	bne.n	8010332 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031e:	b29a      	uxth	r2, r3
 8010320:	8a7b      	ldrh	r3, [r7, #18]
 8010322:	4013      	ands	r3, r2
 8010324:	b29a      	uxth	r2, r3
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801032a:	69bb      	ldr	r3, [r7, #24]
 801032c:	3302      	adds	r3, #2
 801032e:	61bb      	str	r3, [r7, #24]
 8010330:	e00c      	b.n	801034c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010338:	b2da      	uxtb	r2, r3
 801033a:	8a7b      	ldrh	r3, [r7, #18]
 801033c:	b2db      	uxtb	r3, r3
 801033e:	4013      	ands	r3, r2
 8010340:	b2da      	uxtb	r2, r3
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	3301      	adds	r3, #1
 801034a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010352:	b29b      	uxth	r3, r3
 8010354:	3b01      	subs	r3, #1
 8010356:	b29a      	uxth	r2, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010364:	b29b      	uxth	r3, r3
 8010366:	2b00      	cmp	r3, #0
 8010368:	d1c2      	bne.n	80102f0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2220      	movs	r2, #32
 801036e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010372:	2300      	movs	r3, #0
 8010374:	e000      	b.n	8010378 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010376:	2302      	movs	r3, #2
  }
}
 8010378:	4618      	mov	r0, r3
 801037a:	3720      	adds	r7, #32
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b08a      	sub	sp, #40	; 0x28
 8010384:	af00      	add	r7, sp, #0
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	4613      	mov	r3, r2
 801038c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010394:	2b20      	cmp	r3, #32
 8010396:	d137      	bne.n	8010408 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d002      	beq.n	80103a4 <HAL_UART_Receive_IT+0x24>
 801039e:	88fb      	ldrh	r3, [r7, #6]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d101      	bne.n	80103a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80103a4:	2301      	movs	r3, #1
 80103a6:	e030      	b.n	801040a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a18      	ldr	r2, [pc, #96]	; (8010414 <HAL_UART_Receive_IT+0x94>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d01f      	beq.n	80103f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d018      	beq.n	80103f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	e853 3f00 	ldrex	r3, [r3]
 80103d2:	613b      	str	r3, [r7, #16]
   return(result);
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80103da:	627b      	str	r3, [r7, #36]	; 0x24
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	461a      	mov	r2, r3
 80103e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e4:	623b      	str	r3, [r7, #32]
 80103e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e8:	69f9      	ldr	r1, [r7, #28]
 80103ea:	6a3a      	ldr	r2, [r7, #32]
 80103ec:	e841 2300 	strex	r3, r2, [r1]
 80103f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d1e6      	bne.n	80103c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80103f8:	88fb      	ldrh	r3, [r7, #6]
 80103fa:	461a      	mov	r2, r3
 80103fc:	68b9      	ldr	r1, [r7, #8]
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f001 fc3c 	bl	8011c7c <UART_Start_Receive_IT>
 8010404:	4603      	mov	r3, r0
 8010406:	e000      	b.n	801040a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010408:	2302      	movs	r3, #2
  }
}
 801040a:	4618      	mov	r0, r3
 801040c:	3728      	adds	r7, #40	; 0x28
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	58000c00 	.word	0x58000c00

08010418 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b08a      	sub	sp, #40	; 0x28
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	4613      	mov	r3, r2
 8010424:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801042c:	2b20      	cmp	r3, #32
 801042e:	d167      	bne.n	8010500 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d002      	beq.n	801043c <HAL_UART_Transmit_DMA+0x24>
 8010436:	88fb      	ldrh	r3, [r7, #6]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d101      	bne.n	8010440 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801043c:	2301      	movs	r3, #1
 801043e:	e060      	b.n	8010502 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	88fa      	ldrh	r2, [r7, #6]
 801044a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	88fa      	ldrh	r2, [r7, #6]
 8010452:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2200      	movs	r2, #0
 801045a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2221      	movs	r2, #33	; 0x21
 8010462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801046a:	2b00      	cmp	r3, #0
 801046c:	d028      	beq.n	80104c0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010472:	4a26      	ldr	r2, [pc, #152]	; (801050c <HAL_UART_Transmit_DMA+0xf4>)
 8010474:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801047a:	4a25      	ldr	r2, [pc, #148]	; (8010510 <HAL_UART_Transmit_DMA+0xf8>)
 801047c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010482:	4a24      	ldr	r2, [pc, #144]	; (8010514 <HAL_UART_Transmit_DMA+0xfc>)
 8010484:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801048a:	2200      	movs	r2, #0
 801048c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010496:	4619      	mov	r1, r3
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	3328      	adds	r3, #40	; 0x28
 801049e:	461a      	mov	r2, r3
 80104a0:	88fb      	ldrh	r3, [r7, #6]
 80104a2:	f7f6 f9d5 	bl	8006850 <HAL_DMA_Start_IT>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d009      	beq.n	80104c0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2210      	movs	r2, #16
 80104b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2220      	movs	r2, #32
 80104b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80104bc:	2301      	movs	r3, #1
 80104be:	e020      	b.n	8010502 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2240      	movs	r2, #64	; 0x40
 80104c6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	3308      	adds	r3, #8
 80104ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	e853 3f00 	ldrex	r3, [r3]
 80104d6:	613b      	str	r3, [r7, #16]
   return(result);
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104de:	627b      	str	r3, [r7, #36]	; 0x24
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	3308      	adds	r3, #8
 80104e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104e8:	623a      	str	r2, [r7, #32]
 80104ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ec:	69f9      	ldr	r1, [r7, #28]
 80104ee:	6a3a      	ldr	r2, [r7, #32]
 80104f0:	e841 2300 	strex	r3, r2, [r1]
 80104f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d1e5      	bne.n	80104c8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80104fc:	2300      	movs	r3, #0
 80104fe:	e000      	b.n	8010502 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010500:	2302      	movs	r3, #2
  }
}
 8010502:	4618      	mov	r0, r3
 8010504:	3728      	adds	r7, #40	; 0x28
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
 801050a:	bf00      	nop
 801050c:	08012011 	.word	0x08012011
 8010510:	080120a7 	.word	0x080120a7
 8010514:	080120c3 	.word	0x080120c3

08010518 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b09a      	sub	sp, #104	; 0x68
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010528:	e853 3f00 	ldrex	r3, [r3]
 801052c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801052e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010534:	667b      	str	r3, [r7, #100]	; 0x64
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	461a      	mov	r2, r3
 801053c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801053e:	657b      	str	r3, [r7, #84]	; 0x54
 8010540:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010542:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010546:	e841 2300 	strex	r3, r2, [r1]
 801054a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801054c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1e6      	bne.n	8010520 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	3308      	adds	r3, #8
 8010558:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055c:	e853 3f00 	ldrex	r3, [r3]
 8010560:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010564:	4b46      	ldr	r3, [pc, #280]	; (8010680 <HAL_UART_AbortReceive+0x168>)
 8010566:	4013      	ands	r3, r2
 8010568:	663b      	str	r3, [r7, #96]	; 0x60
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	3308      	adds	r3, #8
 8010570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010572:	643a      	str	r2, [r7, #64]	; 0x40
 8010574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010576:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801057a:	e841 2300 	strex	r3, r2, [r1]
 801057e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1e5      	bne.n	8010552 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801058a:	2b01      	cmp	r3, #1
 801058c:	d118      	bne.n	80105c0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	e853 3f00 	ldrex	r3, [r3]
 801059a:	61fb      	str	r3, [r7, #28]
   return(result);
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	f023 0310 	bic.w	r3, r3, #16
 80105a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	461a      	mov	r2, r3
 80105aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105b4:	e841 2300 	strex	r3, r2, [r1]
 80105b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1e6      	bne.n	801058e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105ca:	2b40      	cmp	r3, #64	; 0x40
 80105cc:	d13b      	bne.n	8010646 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	3308      	adds	r3, #8
 80105d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	e853 3f00 	ldrex	r3, [r3]
 80105dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	3308      	adds	r3, #8
 80105ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105ee:	61ba      	str	r2, [r7, #24]
 80105f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f2:	6979      	ldr	r1, [r7, #20]
 80105f4:	69ba      	ldr	r2, [r7, #24]
 80105f6:	e841 2300 	strex	r3, r2, [r1]
 80105fa:	613b      	str	r3, [r7, #16]
   return(result);
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d1e5      	bne.n	80105ce <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010608:	2b00      	cmp	r3, #0
 801060a:	d01c      	beq.n	8010646 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010612:	2200      	movs	r2, #0
 8010614:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801061c:	4618      	mov	r0, r3
 801061e:	f7f6 fb81 	bl	8006d24 <HAL_DMA_Abort>
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d00e      	beq.n	8010646 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801062e:	4618      	mov	r0, r3
 8010630:	f7f8 f806 	bl	8008640 <HAL_DMA_GetError>
 8010634:	4603      	mov	r3, r0
 8010636:	2b20      	cmp	r3, #32
 8010638:	d105      	bne.n	8010646 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2210      	movs	r2, #16
 801063e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010642:	2303      	movs	r3, #3
 8010644:	e017      	b.n	8010676 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	220f      	movs	r2, #15
 8010654:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	699a      	ldr	r2, [r3, #24]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f042 0208 	orr.w	r2, r2, #8
 8010664:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2220      	movs	r2, #32
 801066a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2200      	movs	r2, #0
 8010672:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3768      	adds	r7, #104	; 0x68
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	effffffe 	.word	0xeffffffe

08010684 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b0ba      	sub	sp, #232	; 0xe8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80106aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80106ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80106b2:	4013      	ands	r3, r2
 80106b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80106b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d11b      	bne.n	80106f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80106c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106c4:	f003 0320 	and.w	r3, r3, #32
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d015      	beq.n	80106f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80106cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106d0:	f003 0320 	and.w	r3, r3, #32
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d105      	bne.n	80106e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80106d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d009      	beq.n	80106f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	f000 8377 	beq.w	8010ddc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	4798      	blx	r3
      }
      return;
 80106f6:	e371      	b.n	8010ddc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80106f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f000 8123 	beq.w	8010948 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010702:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010706:	4b8d      	ldr	r3, [pc, #564]	; (801093c <HAL_UART_IRQHandler+0x2b8>)
 8010708:	4013      	ands	r3, r2
 801070a:	2b00      	cmp	r3, #0
 801070c:	d106      	bne.n	801071c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801070e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010712:	4b8b      	ldr	r3, [pc, #556]	; (8010940 <HAL_UART_IRQHandler+0x2bc>)
 8010714:	4013      	ands	r3, r2
 8010716:	2b00      	cmp	r3, #0
 8010718:	f000 8116 	beq.w	8010948 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801071c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010720:	f003 0301 	and.w	r3, r3, #1
 8010724:	2b00      	cmp	r3, #0
 8010726:	d011      	beq.n	801074c <HAL_UART_IRQHandler+0xc8>
 8010728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801072c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010730:	2b00      	cmp	r3, #0
 8010732:	d00b      	beq.n	801074c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2201      	movs	r2, #1
 801073a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010742:	f043 0201 	orr.w	r2, r3, #1
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801074c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010750:	f003 0302 	and.w	r3, r3, #2
 8010754:	2b00      	cmp	r3, #0
 8010756:	d011      	beq.n	801077c <HAL_UART_IRQHandler+0xf8>
 8010758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	d00b      	beq.n	801077c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2202      	movs	r2, #2
 801076a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010772:	f043 0204 	orr.w	r2, r3, #4
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801077c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010780:	f003 0304 	and.w	r3, r3, #4
 8010784:	2b00      	cmp	r3, #0
 8010786:	d011      	beq.n	80107ac <HAL_UART_IRQHandler+0x128>
 8010788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801078c:	f003 0301 	and.w	r3, r3, #1
 8010790:	2b00      	cmp	r3, #0
 8010792:	d00b      	beq.n	80107ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2204      	movs	r2, #4
 801079a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107a2:	f043 0202 	orr.w	r2, r3, #2
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80107ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107b0:	f003 0308 	and.w	r3, r3, #8
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d017      	beq.n	80107e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80107b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107bc:	f003 0320 	and.w	r3, r3, #32
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d105      	bne.n	80107d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80107c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80107c8:	4b5c      	ldr	r3, [pc, #368]	; (801093c <HAL_UART_IRQHandler+0x2b8>)
 80107ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00b      	beq.n	80107e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2208      	movs	r2, #8
 80107d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107de:	f043 0208 	orr.w	r2, r3, #8
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80107e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d012      	beq.n	801081a <HAL_UART_IRQHandler+0x196>
 80107f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00c      	beq.n	801081a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010810:	f043 0220 	orr.w	r2, r3, #32
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010820:	2b00      	cmp	r3, #0
 8010822:	f000 82dd 	beq.w	8010de0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801082a:	f003 0320 	and.w	r3, r3, #32
 801082e:	2b00      	cmp	r3, #0
 8010830:	d013      	beq.n	801085a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010836:	f003 0320 	and.w	r3, r3, #32
 801083a:	2b00      	cmp	r3, #0
 801083c:	d105      	bne.n	801084a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801083e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010846:	2b00      	cmp	r3, #0
 8010848:	d007      	beq.n	801085a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801084e:	2b00      	cmp	r3, #0
 8010850:	d003      	beq.n	801085a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010860:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	689b      	ldr	r3, [r3, #8]
 801086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801086e:	2b40      	cmp	r3, #64	; 0x40
 8010870:	d005      	beq.n	801087e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010876:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801087a:	2b00      	cmp	r3, #0
 801087c:	d054      	beq.n	8010928 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f001 fb60 	bl	8011f44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	689b      	ldr	r3, [r3, #8]
 801088a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801088e:	2b40      	cmp	r3, #64	; 0x40
 8010890:	d146      	bne.n	8010920 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	3308      	adds	r3, #8
 8010898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801089c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108a0:	e853 3f00 	ldrex	r3, [r3]
 80108a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80108a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80108ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	3308      	adds	r3, #8
 80108ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80108be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80108c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80108ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80108ce:	e841 2300 	strex	r3, r2, [r1]
 80108d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80108d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d1d9      	bne.n	8010892 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d017      	beq.n	8010918 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ee:	4a15      	ldr	r2, [pc, #84]	; (8010944 <HAL_UART_IRQHandler+0x2c0>)
 80108f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7f6 fd31 	bl	8007360 <HAL_DMA_Abort_IT>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d019      	beq.n	8010938 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801090a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010912:	4610      	mov	r0, r2
 8010914:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010916:	e00f      	b.n	8010938 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 fa77 	bl	8010e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801091e:	e00b      	b.n	8010938 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 fa73 	bl	8010e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010926:	e007      	b.n	8010938 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 fa6f 	bl	8010e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2200      	movs	r2, #0
 8010932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010936:	e253      	b.n	8010de0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010938:	bf00      	nop
    return;
 801093a:	e251      	b.n	8010de0 <HAL_UART_IRQHandler+0x75c>
 801093c:	10000001 	.word	0x10000001
 8010940:	04000120 	.word	0x04000120
 8010944:	08012143 	.word	0x08012143

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801094c:	2b01      	cmp	r3, #1
 801094e:	f040 81e7 	bne.w	8010d20 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010956:	f003 0310 	and.w	r3, r3, #16
 801095a:	2b00      	cmp	r3, #0
 801095c:	f000 81e0 	beq.w	8010d20 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010964:	f003 0310 	and.w	r3, r3, #16
 8010968:	2b00      	cmp	r3, #0
 801096a:	f000 81d9 	beq.w	8010d20 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2210      	movs	r2, #16
 8010974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010980:	2b40      	cmp	r3, #64	; 0x40
 8010982:	f040 8151 	bne.w	8010c28 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4a96      	ldr	r2, [pc, #600]	; (8010be8 <HAL_UART_IRQHandler+0x564>)
 8010990:	4293      	cmp	r3, r2
 8010992:	d068      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a93      	ldr	r2, [pc, #588]	; (8010bec <HAL_UART_IRQHandler+0x568>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d061      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4a91      	ldr	r2, [pc, #580]	; (8010bf0 <HAL_UART_IRQHandler+0x56c>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d05a      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4a8e      	ldr	r2, [pc, #568]	; (8010bf4 <HAL_UART_IRQHandler+0x570>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d053      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a8c      	ldr	r2, [pc, #560]	; (8010bf8 <HAL_UART_IRQHandler+0x574>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d04c      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a89      	ldr	r2, [pc, #548]	; (8010bfc <HAL_UART_IRQHandler+0x578>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d045      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4a87      	ldr	r2, [pc, #540]	; (8010c00 <HAL_UART_IRQHandler+0x57c>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d03e      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a84      	ldr	r2, [pc, #528]	; (8010c04 <HAL_UART_IRQHandler+0x580>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d037      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4a82      	ldr	r2, [pc, #520]	; (8010c08 <HAL_UART_IRQHandler+0x584>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d030      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4a7f      	ldr	r2, [pc, #508]	; (8010c0c <HAL_UART_IRQHandler+0x588>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d029      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a7d      	ldr	r2, [pc, #500]	; (8010c10 <HAL_UART_IRQHandler+0x58c>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d022      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4a7a      	ldr	r2, [pc, #488]	; (8010c14 <HAL_UART_IRQHandler+0x590>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d01b      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a78      	ldr	r2, [pc, #480]	; (8010c18 <HAL_UART_IRQHandler+0x594>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d014      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4a75      	ldr	r2, [pc, #468]	; (8010c1c <HAL_UART_IRQHandler+0x598>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d00d      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a73      	ldr	r2, [pc, #460]	; (8010c20 <HAL_UART_IRQHandler+0x59c>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d006      	beq.n	8010a66 <HAL_UART_IRQHandler+0x3e2>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a70      	ldr	r2, [pc, #448]	; (8010c24 <HAL_UART_IRQHandler+0x5a0>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d106      	bne.n	8010a74 <HAL_UART_IRQHandler+0x3f0>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	e005      	b.n	8010a80 <HAL_UART_IRQHandler+0x3fc>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f000 81ab 	beq.w	8010de4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	f080 81a3 	bcs.w	8010de4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010aa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aae:	69db      	ldr	r3, [r3, #28]
 8010ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ab4:	f000 8087 	beq.w	8010bc6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ac4:	e853 3f00 	ldrex	r3, [r3]
 8010ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	461a      	mov	r2, r3
 8010ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010ae6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010af2:	e841 2300 	strex	r3, r2, [r1]
 8010af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1da      	bne.n	8010ab8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	3308      	adds	r3, #8
 8010b08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b0c:	e853 3f00 	ldrex	r3, [r3]
 8010b10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b14:	f023 0301 	bic.w	r3, r3, #1
 8010b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	3308      	adds	r3, #8
 8010b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010b26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010b32:	e841 2300 	strex	r3, r2, [r1]
 8010b36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d1e1      	bne.n	8010b02 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	3308      	adds	r3, #8
 8010b44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b48:	e853 3f00 	ldrex	r3, [r3]
 8010b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	3308      	adds	r3, #8
 8010b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010b62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010b64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010b68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010b6a:	e841 2300 	strex	r3, r2, [r1]
 8010b6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d1e3      	bne.n	8010b3e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2220      	movs	r2, #32
 8010b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2200      	movs	r2, #0
 8010b82:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b8c:	e853 3f00 	ldrex	r3, [r3]
 8010b90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b94:	f023 0310 	bic.w	r3, r3, #16
 8010b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8010ba8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010baa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010bae:	e841 2300 	strex	r3, r2, [r1]
 8010bb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1e4      	bne.n	8010b84 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7f6 f8af 	bl	8006d24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2202      	movs	r2, #2
 8010bca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	1ad3      	subs	r3, r2, r3
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	4619      	mov	r1, r3
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f000 f91d 	bl	8010e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010be6:	e0fd      	b.n	8010de4 <HAL_UART_IRQHandler+0x760>
 8010be8:	40020010 	.word	0x40020010
 8010bec:	40020028 	.word	0x40020028
 8010bf0:	40020040 	.word	0x40020040
 8010bf4:	40020058 	.word	0x40020058
 8010bf8:	40020070 	.word	0x40020070
 8010bfc:	40020088 	.word	0x40020088
 8010c00:	400200a0 	.word	0x400200a0
 8010c04:	400200b8 	.word	0x400200b8
 8010c08:	40020410 	.word	0x40020410
 8010c0c:	40020428 	.word	0x40020428
 8010c10:	40020440 	.word	0x40020440
 8010c14:	40020458 	.word	0x40020458
 8010c18:	40020470 	.word	0x40020470
 8010c1c:	40020488 	.word	0x40020488
 8010c20:	400204a0 	.word	0x400204a0
 8010c24:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f000 80cf 	beq.w	8010de8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010c4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 80ca 	beq.w	8010de8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5c:	e853 3f00 	ldrex	r3, [r3]
 8010c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	461a      	mov	r2, r3
 8010c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010c76:	647b      	str	r3, [r7, #68]	; 0x44
 8010c78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c7e:	e841 2300 	strex	r3, r2, [r1]
 8010c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d1e4      	bne.n	8010c54 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	3308      	adds	r3, #8
 8010c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	e853 3f00 	ldrex	r3, [r3]
 8010c98:	623b      	str	r3, [r7, #32]
   return(result);
 8010c9a:	6a3a      	ldr	r2, [r7, #32]
 8010c9c:	4b55      	ldr	r3, [pc, #340]	; (8010df4 <HAL_UART_IRQHandler+0x770>)
 8010c9e:	4013      	ands	r3, r2
 8010ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	3308      	adds	r3, #8
 8010caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010cae:	633a      	str	r2, [r7, #48]	; 0x30
 8010cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cb6:	e841 2300 	strex	r3, r2, [r1]
 8010cba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1e3      	bne.n	8010c8a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2220      	movs	r2, #32
 8010cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	e853 3f00 	ldrex	r3, [r3]
 8010ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f023 0310 	bic.w	r3, r3, #16
 8010cea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010cf8:	61fb      	str	r3, [r7, #28]
 8010cfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cfc:	69b9      	ldr	r1, [r7, #24]
 8010cfe:	69fa      	ldr	r2, [r7, #28]
 8010d00:	e841 2300 	strex	r3, r2, [r1]
 8010d04:	617b      	str	r3, [r7, #20]
   return(result);
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1e4      	bne.n	8010cd6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2202      	movs	r2, #2
 8010d10:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010d12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d16:	4619      	mov	r1, r3
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f881 	bl	8010e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d1e:	e063      	b.n	8010de8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d00e      	beq.n	8010d4a <HAL_UART_IRQHandler+0x6c6>
 8010d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d008      	beq.n	8010d4a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f001 ff5a 	bl	8012bfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010d48:	e051      	b.n	8010dee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d014      	beq.n	8010d80 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d105      	bne.n	8010d6e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d008      	beq.n	8010d80 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d03a      	beq.n	8010dec <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	4798      	blx	r3
    }
    return;
 8010d7e:	e035      	b.n	8010dec <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d009      	beq.n	8010da0 <HAL_UART_IRQHandler+0x71c>
 8010d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d003      	beq.n	8010da0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f001 f9e8 	bl	801216e <UART_EndTransmit_IT>
    return;
 8010d9e:	e026      	b.n	8010dee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d009      	beq.n	8010dc0 <HAL_UART_IRQHandler+0x73c>
 8010dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010db0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d003      	beq.n	8010dc0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f001 ff33 	bl	8012c24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010dbe:	e016      	b.n	8010dee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d010      	beq.n	8010dee <HAL_UART_IRQHandler+0x76a>
 8010dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	da0c      	bge.n	8010dee <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f001 ff1b 	bl	8012c10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010dda:	e008      	b.n	8010dee <HAL_UART_IRQHandler+0x76a>
      return;
 8010ddc:	bf00      	nop
 8010dde:	e006      	b.n	8010dee <HAL_UART_IRQHandler+0x76a>
    return;
 8010de0:	bf00      	nop
 8010de2:	e004      	b.n	8010dee <HAL_UART_IRQHandler+0x76a>
      return;
 8010de4:	bf00      	nop
 8010de6:	e002      	b.n	8010dee <HAL_UART_IRQHandler+0x76a>
      return;
 8010de8:	bf00      	nop
 8010dea:	e000      	b.n	8010dee <HAL_UART_IRQHandler+0x76a>
    return;
 8010dec:	bf00      	nop
  }
}
 8010dee:	37e8      	adds	r7, #232	; 0xe8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	effffffe 	.word	0xeffffffe

08010df8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010e00:	bf00      	nop
 8010e02:	370c      	adds	r7, #12
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010e2c:	bf00      	nop
 8010e2e:	370c      	adds	r7, #12
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr

08010e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e3c:	b092      	sub	sp, #72	; 0x48
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e42:	2300      	movs	r3, #0
 8010e44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	689a      	ldr	r2, [r3, #8]
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	691b      	ldr	r3, [r3, #16]
 8010e50:	431a      	orrs	r2, r3
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	695b      	ldr	r3, [r3, #20]
 8010e56:	431a      	orrs	r2, r3
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	69db      	ldr	r3, [r3, #28]
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	4bbe      	ldr	r3, [pc, #760]	; (8011160 <UART_SetConfig+0x328>)
 8010e68:	4013      	ands	r3, r2
 8010e6a:	697a      	ldr	r2, [r7, #20]
 8010e6c:	6812      	ldr	r2, [r2, #0]
 8010e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010e70:	430b      	orrs	r3, r1
 8010e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	68da      	ldr	r2, [r3, #12]
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	430a      	orrs	r2, r1
 8010e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	699b      	ldr	r3, [r3, #24]
 8010e8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4ab3      	ldr	r2, [pc, #716]	; (8011164 <UART_SetConfig+0x32c>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d004      	beq.n	8010ea4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	6a1b      	ldr	r3, [r3, #32]
 8010e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	689a      	ldr	r2, [r3, #8]
 8010eaa:	4baf      	ldr	r3, [pc, #700]	; (8011168 <UART_SetConfig+0x330>)
 8010eac:	4013      	ands	r3, r2
 8010eae:	697a      	ldr	r2, [r7, #20]
 8010eb0:	6812      	ldr	r2, [r2, #0]
 8010eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010eb4:	430b      	orrs	r3, r1
 8010eb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ebe:	f023 010f 	bic.w	r1, r3, #15
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	430a      	orrs	r2, r1
 8010ecc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	4aa6      	ldr	r2, [pc, #664]	; (801116c <UART_SetConfig+0x334>)
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	d177      	bne.n	8010fc8 <UART_SetConfig+0x190>
 8010ed8:	4ba5      	ldr	r3, [pc, #660]	; (8011170 <UART_SetConfig+0x338>)
 8010eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ee0:	2b28      	cmp	r3, #40	; 0x28
 8010ee2:	d86d      	bhi.n	8010fc0 <UART_SetConfig+0x188>
 8010ee4:	a201      	add	r2, pc, #4	; (adr r2, 8010eec <UART_SetConfig+0xb4>)
 8010ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eea:	bf00      	nop
 8010eec:	08010f91 	.word	0x08010f91
 8010ef0:	08010fc1 	.word	0x08010fc1
 8010ef4:	08010fc1 	.word	0x08010fc1
 8010ef8:	08010fc1 	.word	0x08010fc1
 8010efc:	08010fc1 	.word	0x08010fc1
 8010f00:	08010fc1 	.word	0x08010fc1
 8010f04:	08010fc1 	.word	0x08010fc1
 8010f08:	08010fc1 	.word	0x08010fc1
 8010f0c:	08010f99 	.word	0x08010f99
 8010f10:	08010fc1 	.word	0x08010fc1
 8010f14:	08010fc1 	.word	0x08010fc1
 8010f18:	08010fc1 	.word	0x08010fc1
 8010f1c:	08010fc1 	.word	0x08010fc1
 8010f20:	08010fc1 	.word	0x08010fc1
 8010f24:	08010fc1 	.word	0x08010fc1
 8010f28:	08010fc1 	.word	0x08010fc1
 8010f2c:	08010fa1 	.word	0x08010fa1
 8010f30:	08010fc1 	.word	0x08010fc1
 8010f34:	08010fc1 	.word	0x08010fc1
 8010f38:	08010fc1 	.word	0x08010fc1
 8010f3c:	08010fc1 	.word	0x08010fc1
 8010f40:	08010fc1 	.word	0x08010fc1
 8010f44:	08010fc1 	.word	0x08010fc1
 8010f48:	08010fc1 	.word	0x08010fc1
 8010f4c:	08010fa9 	.word	0x08010fa9
 8010f50:	08010fc1 	.word	0x08010fc1
 8010f54:	08010fc1 	.word	0x08010fc1
 8010f58:	08010fc1 	.word	0x08010fc1
 8010f5c:	08010fc1 	.word	0x08010fc1
 8010f60:	08010fc1 	.word	0x08010fc1
 8010f64:	08010fc1 	.word	0x08010fc1
 8010f68:	08010fc1 	.word	0x08010fc1
 8010f6c:	08010fb1 	.word	0x08010fb1
 8010f70:	08010fc1 	.word	0x08010fc1
 8010f74:	08010fc1 	.word	0x08010fc1
 8010f78:	08010fc1 	.word	0x08010fc1
 8010f7c:	08010fc1 	.word	0x08010fc1
 8010f80:	08010fc1 	.word	0x08010fc1
 8010f84:	08010fc1 	.word	0x08010fc1
 8010f88:	08010fc1 	.word	0x08010fc1
 8010f8c:	08010fb9 	.word	0x08010fb9
 8010f90:	2301      	movs	r3, #1
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f96:	e222      	b.n	80113de <UART_SetConfig+0x5a6>
 8010f98:	2304      	movs	r3, #4
 8010f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9e:	e21e      	b.n	80113de <UART_SetConfig+0x5a6>
 8010fa0:	2308      	movs	r3, #8
 8010fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa6:	e21a      	b.n	80113de <UART_SetConfig+0x5a6>
 8010fa8:	2310      	movs	r3, #16
 8010faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fae:	e216      	b.n	80113de <UART_SetConfig+0x5a6>
 8010fb0:	2320      	movs	r3, #32
 8010fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb6:	e212      	b.n	80113de <UART_SetConfig+0x5a6>
 8010fb8:	2340      	movs	r3, #64	; 0x40
 8010fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fbe:	e20e      	b.n	80113de <UART_SetConfig+0x5a6>
 8010fc0:	2380      	movs	r3, #128	; 0x80
 8010fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fc6:	e20a      	b.n	80113de <UART_SetConfig+0x5a6>
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4a69      	ldr	r2, [pc, #420]	; (8011174 <UART_SetConfig+0x33c>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d130      	bne.n	8011034 <UART_SetConfig+0x1fc>
 8010fd2:	4b67      	ldr	r3, [pc, #412]	; (8011170 <UART_SetConfig+0x338>)
 8010fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fd6:	f003 0307 	and.w	r3, r3, #7
 8010fda:	2b05      	cmp	r3, #5
 8010fdc:	d826      	bhi.n	801102c <UART_SetConfig+0x1f4>
 8010fde:	a201      	add	r2, pc, #4	; (adr r2, 8010fe4 <UART_SetConfig+0x1ac>)
 8010fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fe4:	08010ffd 	.word	0x08010ffd
 8010fe8:	08011005 	.word	0x08011005
 8010fec:	0801100d 	.word	0x0801100d
 8010ff0:	08011015 	.word	0x08011015
 8010ff4:	0801101d 	.word	0x0801101d
 8010ff8:	08011025 	.word	0x08011025
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011002:	e1ec      	b.n	80113de <UART_SetConfig+0x5a6>
 8011004:	2304      	movs	r3, #4
 8011006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100a:	e1e8      	b.n	80113de <UART_SetConfig+0x5a6>
 801100c:	2308      	movs	r3, #8
 801100e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011012:	e1e4      	b.n	80113de <UART_SetConfig+0x5a6>
 8011014:	2310      	movs	r3, #16
 8011016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101a:	e1e0      	b.n	80113de <UART_SetConfig+0x5a6>
 801101c:	2320      	movs	r3, #32
 801101e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011022:	e1dc      	b.n	80113de <UART_SetConfig+0x5a6>
 8011024:	2340      	movs	r3, #64	; 0x40
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102a:	e1d8      	b.n	80113de <UART_SetConfig+0x5a6>
 801102c:	2380      	movs	r3, #128	; 0x80
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011032:	e1d4      	b.n	80113de <UART_SetConfig+0x5a6>
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a4f      	ldr	r2, [pc, #316]	; (8011178 <UART_SetConfig+0x340>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d130      	bne.n	80110a0 <UART_SetConfig+0x268>
 801103e:	4b4c      	ldr	r3, [pc, #304]	; (8011170 <UART_SetConfig+0x338>)
 8011040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011042:	f003 0307 	and.w	r3, r3, #7
 8011046:	2b05      	cmp	r3, #5
 8011048:	d826      	bhi.n	8011098 <UART_SetConfig+0x260>
 801104a:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <UART_SetConfig+0x218>)
 801104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011050:	08011069 	.word	0x08011069
 8011054:	08011071 	.word	0x08011071
 8011058:	08011079 	.word	0x08011079
 801105c:	08011081 	.word	0x08011081
 8011060:	08011089 	.word	0x08011089
 8011064:	08011091 	.word	0x08011091
 8011068:	2300      	movs	r3, #0
 801106a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106e:	e1b6      	b.n	80113de <UART_SetConfig+0x5a6>
 8011070:	2304      	movs	r3, #4
 8011072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011076:	e1b2      	b.n	80113de <UART_SetConfig+0x5a6>
 8011078:	2308      	movs	r3, #8
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e1ae      	b.n	80113de <UART_SetConfig+0x5a6>
 8011080:	2310      	movs	r3, #16
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e1aa      	b.n	80113de <UART_SetConfig+0x5a6>
 8011088:	2320      	movs	r3, #32
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e1a6      	b.n	80113de <UART_SetConfig+0x5a6>
 8011090:	2340      	movs	r3, #64	; 0x40
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011096:	e1a2      	b.n	80113de <UART_SetConfig+0x5a6>
 8011098:	2380      	movs	r3, #128	; 0x80
 801109a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109e:	e19e      	b.n	80113de <UART_SetConfig+0x5a6>
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a35      	ldr	r2, [pc, #212]	; (801117c <UART_SetConfig+0x344>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d130      	bne.n	801110c <UART_SetConfig+0x2d4>
 80110aa:	4b31      	ldr	r3, [pc, #196]	; (8011170 <UART_SetConfig+0x338>)
 80110ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110ae:	f003 0307 	and.w	r3, r3, #7
 80110b2:	2b05      	cmp	r3, #5
 80110b4:	d826      	bhi.n	8011104 <UART_SetConfig+0x2cc>
 80110b6:	a201      	add	r2, pc, #4	; (adr r2, 80110bc <UART_SetConfig+0x284>)
 80110b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110bc:	080110d5 	.word	0x080110d5
 80110c0:	080110dd 	.word	0x080110dd
 80110c4:	080110e5 	.word	0x080110e5
 80110c8:	080110ed 	.word	0x080110ed
 80110cc:	080110f5 	.word	0x080110f5
 80110d0:	080110fd 	.word	0x080110fd
 80110d4:	2300      	movs	r3, #0
 80110d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110da:	e180      	b.n	80113de <UART_SetConfig+0x5a6>
 80110dc:	2304      	movs	r3, #4
 80110de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e2:	e17c      	b.n	80113de <UART_SetConfig+0x5a6>
 80110e4:	2308      	movs	r3, #8
 80110e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ea:	e178      	b.n	80113de <UART_SetConfig+0x5a6>
 80110ec:	2310      	movs	r3, #16
 80110ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f2:	e174      	b.n	80113de <UART_SetConfig+0x5a6>
 80110f4:	2320      	movs	r3, #32
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fa:	e170      	b.n	80113de <UART_SetConfig+0x5a6>
 80110fc:	2340      	movs	r3, #64	; 0x40
 80110fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011102:	e16c      	b.n	80113de <UART_SetConfig+0x5a6>
 8011104:	2380      	movs	r3, #128	; 0x80
 8011106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110a:	e168      	b.n	80113de <UART_SetConfig+0x5a6>
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	4a1b      	ldr	r2, [pc, #108]	; (8011180 <UART_SetConfig+0x348>)
 8011112:	4293      	cmp	r3, r2
 8011114:	d142      	bne.n	801119c <UART_SetConfig+0x364>
 8011116:	4b16      	ldr	r3, [pc, #88]	; (8011170 <UART_SetConfig+0x338>)
 8011118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801111a:	f003 0307 	and.w	r3, r3, #7
 801111e:	2b05      	cmp	r3, #5
 8011120:	d838      	bhi.n	8011194 <UART_SetConfig+0x35c>
 8011122:	a201      	add	r2, pc, #4	; (adr r2, 8011128 <UART_SetConfig+0x2f0>)
 8011124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011128:	08011141 	.word	0x08011141
 801112c:	08011149 	.word	0x08011149
 8011130:	08011151 	.word	0x08011151
 8011134:	08011159 	.word	0x08011159
 8011138:	08011185 	.word	0x08011185
 801113c:	0801118d 	.word	0x0801118d
 8011140:	2300      	movs	r3, #0
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e14a      	b.n	80113de <UART_SetConfig+0x5a6>
 8011148:	2304      	movs	r3, #4
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114e:	e146      	b.n	80113de <UART_SetConfig+0x5a6>
 8011150:	2308      	movs	r3, #8
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e142      	b.n	80113de <UART_SetConfig+0x5a6>
 8011158:	2310      	movs	r3, #16
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e13e      	b.n	80113de <UART_SetConfig+0x5a6>
 8011160:	cfff69f3 	.word	0xcfff69f3
 8011164:	58000c00 	.word	0x58000c00
 8011168:	11fff4ff 	.word	0x11fff4ff
 801116c:	40011000 	.word	0x40011000
 8011170:	58024400 	.word	0x58024400
 8011174:	40004400 	.word	0x40004400
 8011178:	40004800 	.word	0x40004800
 801117c:	40004c00 	.word	0x40004c00
 8011180:	40005000 	.word	0x40005000
 8011184:	2320      	movs	r3, #32
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e128      	b.n	80113de <UART_SetConfig+0x5a6>
 801118c:	2340      	movs	r3, #64	; 0x40
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e124      	b.n	80113de <UART_SetConfig+0x5a6>
 8011194:	2380      	movs	r3, #128	; 0x80
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e120      	b.n	80113de <UART_SetConfig+0x5a6>
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	4acb      	ldr	r2, [pc, #812]	; (80114d0 <UART_SetConfig+0x698>)
 80111a2:	4293      	cmp	r3, r2
 80111a4:	d176      	bne.n	8011294 <UART_SetConfig+0x45c>
 80111a6:	4bcb      	ldr	r3, [pc, #812]	; (80114d4 <UART_SetConfig+0x69c>)
 80111a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111ae:	2b28      	cmp	r3, #40	; 0x28
 80111b0:	d86c      	bhi.n	801128c <UART_SetConfig+0x454>
 80111b2:	a201      	add	r2, pc, #4	; (adr r2, 80111b8 <UART_SetConfig+0x380>)
 80111b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111b8:	0801125d 	.word	0x0801125d
 80111bc:	0801128d 	.word	0x0801128d
 80111c0:	0801128d 	.word	0x0801128d
 80111c4:	0801128d 	.word	0x0801128d
 80111c8:	0801128d 	.word	0x0801128d
 80111cc:	0801128d 	.word	0x0801128d
 80111d0:	0801128d 	.word	0x0801128d
 80111d4:	0801128d 	.word	0x0801128d
 80111d8:	08011265 	.word	0x08011265
 80111dc:	0801128d 	.word	0x0801128d
 80111e0:	0801128d 	.word	0x0801128d
 80111e4:	0801128d 	.word	0x0801128d
 80111e8:	0801128d 	.word	0x0801128d
 80111ec:	0801128d 	.word	0x0801128d
 80111f0:	0801128d 	.word	0x0801128d
 80111f4:	0801128d 	.word	0x0801128d
 80111f8:	0801126d 	.word	0x0801126d
 80111fc:	0801128d 	.word	0x0801128d
 8011200:	0801128d 	.word	0x0801128d
 8011204:	0801128d 	.word	0x0801128d
 8011208:	0801128d 	.word	0x0801128d
 801120c:	0801128d 	.word	0x0801128d
 8011210:	0801128d 	.word	0x0801128d
 8011214:	0801128d 	.word	0x0801128d
 8011218:	08011275 	.word	0x08011275
 801121c:	0801128d 	.word	0x0801128d
 8011220:	0801128d 	.word	0x0801128d
 8011224:	0801128d 	.word	0x0801128d
 8011228:	0801128d 	.word	0x0801128d
 801122c:	0801128d 	.word	0x0801128d
 8011230:	0801128d 	.word	0x0801128d
 8011234:	0801128d 	.word	0x0801128d
 8011238:	0801127d 	.word	0x0801127d
 801123c:	0801128d 	.word	0x0801128d
 8011240:	0801128d 	.word	0x0801128d
 8011244:	0801128d 	.word	0x0801128d
 8011248:	0801128d 	.word	0x0801128d
 801124c:	0801128d 	.word	0x0801128d
 8011250:	0801128d 	.word	0x0801128d
 8011254:	0801128d 	.word	0x0801128d
 8011258:	08011285 	.word	0x08011285
 801125c:	2301      	movs	r3, #1
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011262:	e0bc      	b.n	80113de <UART_SetConfig+0x5a6>
 8011264:	2304      	movs	r3, #4
 8011266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126a:	e0b8      	b.n	80113de <UART_SetConfig+0x5a6>
 801126c:	2308      	movs	r3, #8
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e0b4      	b.n	80113de <UART_SetConfig+0x5a6>
 8011274:	2310      	movs	r3, #16
 8011276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127a:	e0b0      	b.n	80113de <UART_SetConfig+0x5a6>
 801127c:	2320      	movs	r3, #32
 801127e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011282:	e0ac      	b.n	80113de <UART_SetConfig+0x5a6>
 8011284:	2340      	movs	r3, #64	; 0x40
 8011286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128a:	e0a8      	b.n	80113de <UART_SetConfig+0x5a6>
 801128c:	2380      	movs	r3, #128	; 0x80
 801128e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011292:	e0a4      	b.n	80113de <UART_SetConfig+0x5a6>
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4a8f      	ldr	r2, [pc, #572]	; (80114d8 <UART_SetConfig+0x6a0>)
 801129a:	4293      	cmp	r3, r2
 801129c:	d130      	bne.n	8011300 <UART_SetConfig+0x4c8>
 801129e:	4b8d      	ldr	r3, [pc, #564]	; (80114d4 <UART_SetConfig+0x69c>)
 80112a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112a2:	f003 0307 	and.w	r3, r3, #7
 80112a6:	2b05      	cmp	r3, #5
 80112a8:	d826      	bhi.n	80112f8 <UART_SetConfig+0x4c0>
 80112aa:	a201      	add	r2, pc, #4	; (adr r2, 80112b0 <UART_SetConfig+0x478>)
 80112ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b0:	080112c9 	.word	0x080112c9
 80112b4:	080112d1 	.word	0x080112d1
 80112b8:	080112d9 	.word	0x080112d9
 80112bc:	080112e1 	.word	0x080112e1
 80112c0:	080112e9 	.word	0x080112e9
 80112c4:	080112f1 	.word	0x080112f1
 80112c8:	2300      	movs	r3, #0
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e086      	b.n	80113de <UART_SetConfig+0x5a6>
 80112d0:	2304      	movs	r3, #4
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e082      	b.n	80113de <UART_SetConfig+0x5a6>
 80112d8:	2308      	movs	r3, #8
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e07e      	b.n	80113de <UART_SetConfig+0x5a6>
 80112e0:	2310      	movs	r3, #16
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e6:	e07a      	b.n	80113de <UART_SetConfig+0x5a6>
 80112e8:	2320      	movs	r3, #32
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e076      	b.n	80113de <UART_SetConfig+0x5a6>
 80112f0:	2340      	movs	r3, #64	; 0x40
 80112f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f6:	e072      	b.n	80113de <UART_SetConfig+0x5a6>
 80112f8:	2380      	movs	r3, #128	; 0x80
 80112fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fe:	e06e      	b.n	80113de <UART_SetConfig+0x5a6>
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a75      	ldr	r2, [pc, #468]	; (80114dc <UART_SetConfig+0x6a4>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d130      	bne.n	801136c <UART_SetConfig+0x534>
 801130a:	4b72      	ldr	r3, [pc, #456]	; (80114d4 <UART_SetConfig+0x69c>)
 801130c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801130e:	f003 0307 	and.w	r3, r3, #7
 8011312:	2b05      	cmp	r3, #5
 8011314:	d826      	bhi.n	8011364 <UART_SetConfig+0x52c>
 8011316:	a201      	add	r2, pc, #4	; (adr r2, 801131c <UART_SetConfig+0x4e4>)
 8011318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131c:	08011335 	.word	0x08011335
 8011320:	0801133d 	.word	0x0801133d
 8011324:	08011345 	.word	0x08011345
 8011328:	0801134d 	.word	0x0801134d
 801132c:	08011355 	.word	0x08011355
 8011330:	0801135d 	.word	0x0801135d
 8011334:	2300      	movs	r3, #0
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133a:	e050      	b.n	80113de <UART_SetConfig+0x5a6>
 801133c:	2304      	movs	r3, #4
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e04c      	b.n	80113de <UART_SetConfig+0x5a6>
 8011344:	2308      	movs	r3, #8
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e048      	b.n	80113de <UART_SetConfig+0x5a6>
 801134c:	2310      	movs	r3, #16
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e044      	b.n	80113de <UART_SetConfig+0x5a6>
 8011354:	2320      	movs	r3, #32
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e040      	b.n	80113de <UART_SetConfig+0x5a6>
 801135c:	2340      	movs	r3, #64	; 0x40
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e03c      	b.n	80113de <UART_SetConfig+0x5a6>
 8011364:	2380      	movs	r3, #128	; 0x80
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e038      	b.n	80113de <UART_SetConfig+0x5a6>
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	4a5b      	ldr	r2, [pc, #364]	; (80114e0 <UART_SetConfig+0x6a8>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d130      	bne.n	80113d8 <UART_SetConfig+0x5a0>
 8011376:	4b57      	ldr	r3, [pc, #348]	; (80114d4 <UART_SetConfig+0x69c>)
 8011378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801137a:	f003 0307 	and.w	r3, r3, #7
 801137e:	2b05      	cmp	r3, #5
 8011380:	d826      	bhi.n	80113d0 <UART_SetConfig+0x598>
 8011382:	a201      	add	r2, pc, #4	; (adr r2, 8011388 <UART_SetConfig+0x550>)
 8011384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011388:	080113a1 	.word	0x080113a1
 801138c:	080113a9 	.word	0x080113a9
 8011390:	080113b1 	.word	0x080113b1
 8011394:	080113b9 	.word	0x080113b9
 8011398:	080113c1 	.word	0x080113c1
 801139c:	080113c9 	.word	0x080113c9
 80113a0:	2302      	movs	r3, #2
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e01a      	b.n	80113de <UART_SetConfig+0x5a6>
 80113a8:	2304      	movs	r3, #4
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e016      	b.n	80113de <UART_SetConfig+0x5a6>
 80113b0:	2308      	movs	r3, #8
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e012      	b.n	80113de <UART_SetConfig+0x5a6>
 80113b8:	2310      	movs	r3, #16
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e00e      	b.n	80113de <UART_SetConfig+0x5a6>
 80113c0:	2320      	movs	r3, #32
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e00a      	b.n	80113de <UART_SetConfig+0x5a6>
 80113c8:	2340      	movs	r3, #64	; 0x40
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e006      	b.n	80113de <UART_SetConfig+0x5a6>
 80113d0:	2380      	movs	r3, #128	; 0x80
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e002      	b.n	80113de <UART_SetConfig+0x5a6>
 80113d8:	2380      	movs	r3, #128	; 0x80
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	4a3f      	ldr	r2, [pc, #252]	; (80114e0 <UART_SetConfig+0x6a8>)
 80113e4:	4293      	cmp	r3, r2
 80113e6:	f040 80f8 	bne.w	80115da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113ee:	2b20      	cmp	r3, #32
 80113f0:	dc46      	bgt.n	8011480 <UART_SetConfig+0x648>
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	f2c0 8082 	blt.w	80114fc <UART_SetConfig+0x6c4>
 80113f8:	3b02      	subs	r3, #2
 80113fa:	2b1e      	cmp	r3, #30
 80113fc:	d87e      	bhi.n	80114fc <UART_SetConfig+0x6c4>
 80113fe:	a201      	add	r2, pc, #4	; (adr r2, 8011404 <UART_SetConfig+0x5cc>)
 8011400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011404:	08011487 	.word	0x08011487
 8011408:	080114fd 	.word	0x080114fd
 801140c:	0801148f 	.word	0x0801148f
 8011410:	080114fd 	.word	0x080114fd
 8011414:	080114fd 	.word	0x080114fd
 8011418:	080114fd 	.word	0x080114fd
 801141c:	0801149f 	.word	0x0801149f
 8011420:	080114fd 	.word	0x080114fd
 8011424:	080114fd 	.word	0x080114fd
 8011428:	080114fd 	.word	0x080114fd
 801142c:	080114fd 	.word	0x080114fd
 8011430:	080114fd 	.word	0x080114fd
 8011434:	080114fd 	.word	0x080114fd
 8011438:	080114fd 	.word	0x080114fd
 801143c:	080114af 	.word	0x080114af
 8011440:	080114fd 	.word	0x080114fd
 8011444:	080114fd 	.word	0x080114fd
 8011448:	080114fd 	.word	0x080114fd
 801144c:	080114fd 	.word	0x080114fd
 8011450:	080114fd 	.word	0x080114fd
 8011454:	080114fd 	.word	0x080114fd
 8011458:	080114fd 	.word	0x080114fd
 801145c:	080114fd 	.word	0x080114fd
 8011460:	080114fd 	.word	0x080114fd
 8011464:	080114fd 	.word	0x080114fd
 8011468:	080114fd 	.word	0x080114fd
 801146c:	080114fd 	.word	0x080114fd
 8011470:	080114fd 	.word	0x080114fd
 8011474:	080114fd 	.word	0x080114fd
 8011478:	080114fd 	.word	0x080114fd
 801147c:	080114ef 	.word	0x080114ef
 8011480:	2b40      	cmp	r3, #64	; 0x40
 8011482:	d037      	beq.n	80114f4 <UART_SetConfig+0x6bc>
 8011484:	e03a      	b.n	80114fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011486:	f7fb fce5 	bl	800ce54 <HAL_RCCEx_GetD3PCLK1Freq>
 801148a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801148c:	e03c      	b.n	8011508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011492:	4618      	mov	r0, r3
 8011494:	f7fb fcf4 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801149c:	e034      	b.n	8011508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801149e:	f107 0318 	add.w	r3, r7, #24
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fb fe40 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114ac:	e02c      	b.n	8011508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114ae:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <UART_SetConfig+0x69c>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f003 0320 	and.w	r3, r3, #32
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d016      	beq.n	80114e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114ba:	4b06      	ldr	r3, [pc, #24]	; (80114d4 <UART_SetConfig+0x69c>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	08db      	lsrs	r3, r3, #3
 80114c0:	f003 0303 	and.w	r3, r3, #3
 80114c4:	4a07      	ldr	r2, [pc, #28]	; (80114e4 <UART_SetConfig+0x6ac>)
 80114c6:	fa22 f303 	lsr.w	r3, r2, r3
 80114ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114cc:	e01c      	b.n	8011508 <UART_SetConfig+0x6d0>
 80114ce:	bf00      	nop
 80114d0:	40011400 	.word	0x40011400
 80114d4:	58024400 	.word	0x58024400
 80114d8:	40007800 	.word	0x40007800
 80114dc:	40007c00 	.word	0x40007c00
 80114e0:	58000c00 	.word	0x58000c00
 80114e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80114e8:	4b9d      	ldr	r3, [pc, #628]	; (8011760 <UART_SetConfig+0x928>)
 80114ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114ec:	e00c      	b.n	8011508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114ee:	4b9d      	ldr	r3, [pc, #628]	; (8011764 <UART_SetConfig+0x92c>)
 80114f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114f2:	e009      	b.n	8011508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114fa:	e005      	b.n	8011508 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80114fc:	2300      	movs	r3, #0
 80114fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011500:	2301      	movs	r3, #1
 8011502:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011506:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801150a:	2b00      	cmp	r3, #0
 801150c:	f000 81de 	beq.w	80118cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011514:	4a94      	ldr	r2, [pc, #592]	; (8011768 <UART_SetConfig+0x930>)
 8011516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801151a:	461a      	mov	r2, r3
 801151c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801151e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011522:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	685a      	ldr	r2, [r3, #4]
 8011528:	4613      	mov	r3, r2
 801152a:	005b      	lsls	r3, r3, #1
 801152c:	4413      	add	r3, r2
 801152e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011530:	429a      	cmp	r2, r3
 8011532:	d305      	bcc.n	8011540 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801153a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801153c:	429a      	cmp	r2, r3
 801153e:	d903      	bls.n	8011548 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011540:	2301      	movs	r3, #1
 8011542:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011546:	e1c1      	b.n	80118cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801154a:	2200      	movs	r2, #0
 801154c:	60bb      	str	r3, [r7, #8]
 801154e:	60fa      	str	r2, [r7, #12]
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011554:	4a84      	ldr	r2, [pc, #528]	; (8011768 <UART_SetConfig+0x930>)
 8011556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801155a:	b29b      	uxth	r3, r3
 801155c:	2200      	movs	r2, #0
 801155e:	603b      	str	r3, [r7, #0]
 8011560:	607a      	str	r2, [r7, #4]
 8011562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801156a:	f7ee feb9 	bl	80002e0 <__aeabi_uldivmod>
 801156e:	4602      	mov	r2, r0
 8011570:	460b      	mov	r3, r1
 8011572:	4610      	mov	r0, r2
 8011574:	4619      	mov	r1, r3
 8011576:	f04f 0200 	mov.w	r2, #0
 801157a:	f04f 0300 	mov.w	r3, #0
 801157e:	020b      	lsls	r3, r1, #8
 8011580:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011584:	0202      	lsls	r2, r0, #8
 8011586:	6979      	ldr	r1, [r7, #20]
 8011588:	6849      	ldr	r1, [r1, #4]
 801158a:	0849      	lsrs	r1, r1, #1
 801158c:	2000      	movs	r0, #0
 801158e:	460c      	mov	r4, r1
 8011590:	4605      	mov	r5, r0
 8011592:	eb12 0804 	adds.w	r8, r2, r4
 8011596:	eb43 0905 	adc.w	r9, r3, r5
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	2200      	movs	r2, #0
 80115a0:	469a      	mov	sl, r3
 80115a2:	4693      	mov	fp, r2
 80115a4:	4652      	mov	r2, sl
 80115a6:	465b      	mov	r3, fp
 80115a8:	4640      	mov	r0, r8
 80115aa:	4649      	mov	r1, r9
 80115ac:	f7ee fe98 	bl	80002e0 <__aeabi_uldivmod>
 80115b0:	4602      	mov	r2, r0
 80115b2:	460b      	mov	r3, r1
 80115b4:	4613      	mov	r3, r2
 80115b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80115be:	d308      	bcc.n	80115d2 <UART_SetConfig+0x79a>
 80115c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115c6:	d204      	bcs.n	80115d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ce:	60da      	str	r2, [r3, #12]
 80115d0:	e17c      	b.n	80118cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80115d2:	2301      	movs	r3, #1
 80115d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115d8:	e178      	b.n	80118cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	69db      	ldr	r3, [r3, #28]
 80115de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115e2:	f040 80c5 	bne.w	8011770 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80115e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80115ea:	2b20      	cmp	r3, #32
 80115ec:	dc48      	bgt.n	8011680 <UART_SetConfig+0x848>
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	db7b      	blt.n	80116ea <UART_SetConfig+0x8b2>
 80115f2:	2b20      	cmp	r3, #32
 80115f4:	d879      	bhi.n	80116ea <UART_SetConfig+0x8b2>
 80115f6:	a201      	add	r2, pc, #4	; (adr r2, 80115fc <UART_SetConfig+0x7c4>)
 80115f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115fc:	08011687 	.word	0x08011687
 8011600:	0801168f 	.word	0x0801168f
 8011604:	080116eb 	.word	0x080116eb
 8011608:	080116eb 	.word	0x080116eb
 801160c:	08011697 	.word	0x08011697
 8011610:	080116eb 	.word	0x080116eb
 8011614:	080116eb 	.word	0x080116eb
 8011618:	080116eb 	.word	0x080116eb
 801161c:	080116a7 	.word	0x080116a7
 8011620:	080116eb 	.word	0x080116eb
 8011624:	080116eb 	.word	0x080116eb
 8011628:	080116eb 	.word	0x080116eb
 801162c:	080116eb 	.word	0x080116eb
 8011630:	080116eb 	.word	0x080116eb
 8011634:	080116eb 	.word	0x080116eb
 8011638:	080116eb 	.word	0x080116eb
 801163c:	080116b7 	.word	0x080116b7
 8011640:	080116eb 	.word	0x080116eb
 8011644:	080116eb 	.word	0x080116eb
 8011648:	080116eb 	.word	0x080116eb
 801164c:	080116eb 	.word	0x080116eb
 8011650:	080116eb 	.word	0x080116eb
 8011654:	080116eb 	.word	0x080116eb
 8011658:	080116eb 	.word	0x080116eb
 801165c:	080116eb 	.word	0x080116eb
 8011660:	080116eb 	.word	0x080116eb
 8011664:	080116eb 	.word	0x080116eb
 8011668:	080116eb 	.word	0x080116eb
 801166c:	080116eb 	.word	0x080116eb
 8011670:	080116eb 	.word	0x080116eb
 8011674:	080116eb 	.word	0x080116eb
 8011678:	080116eb 	.word	0x080116eb
 801167c:	080116dd 	.word	0x080116dd
 8011680:	2b40      	cmp	r3, #64	; 0x40
 8011682:	d02e      	beq.n	80116e2 <UART_SetConfig+0x8aa>
 8011684:	e031      	b.n	80116ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011686:	f7f9 fbed 	bl	800ae64 <HAL_RCC_GetPCLK1Freq>
 801168a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801168c:	e033      	b.n	80116f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801168e:	f7f9 fbff 	bl	800ae90 <HAL_RCC_GetPCLK2Freq>
 8011692:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011694:	e02f      	b.n	80116f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801169a:	4618      	mov	r0, r3
 801169c:	f7fb fbf0 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116a4:	e027      	b.n	80116f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116a6:	f107 0318 	add.w	r3, r7, #24
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fb fd3c 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116b4:	e01f      	b.n	80116f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116b6:	4b2d      	ldr	r3, [pc, #180]	; (801176c <UART_SetConfig+0x934>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f003 0320 	and.w	r3, r3, #32
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d009      	beq.n	80116d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116c2:	4b2a      	ldr	r3, [pc, #168]	; (801176c <UART_SetConfig+0x934>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	08db      	lsrs	r3, r3, #3
 80116c8:	f003 0303 	and.w	r3, r3, #3
 80116cc:	4a24      	ldr	r2, [pc, #144]	; (8011760 <UART_SetConfig+0x928>)
 80116ce:	fa22 f303 	lsr.w	r3, r2, r3
 80116d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116d4:	e00f      	b.n	80116f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80116d6:	4b22      	ldr	r3, [pc, #136]	; (8011760 <UART_SetConfig+0x928>)
 80116d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116da:	e00c      	b.n	80116f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116dc:	4b21      	ldr	r3, [pc, #132]	; (8011764 <UART_SetConfig+0x92c>)
 80116de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116e0:	e009      	b.n	80116f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116e8:	e005      	b.n	80116f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80116ea:	2300      	movs	r3, #0
 80116ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116ee:	2301      	movs	r3, #1
 80116f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	f000 80e7 	beq.w	80118cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011702:	4a19      	ldr	r2, [pc, #100]	; (8011768 <UART_SetConfig+0x930>)
 8011704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011708:	461a      	mov	r2, r3
 801170a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011710:	005a      	lsls	r2, r3, #1
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	085b      	lsrs	r3, r3, #1
 8011718:	441a      	add	r2, r3
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011722:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011726:	2b0f      	cmp	r3, #15
 8011728:	d916      	bls.n	8011758 <UART_SetConfig+0x920>
 801172a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011730:	d212      	bcs.n	8011758 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011734:	b29b      	uxth	r3, r3
 8011736:	f023 030f 	bic.w	r3, r3, #15
 801173a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173e:	085b      	lsrs	r3, r3, #1
 8011740:	b29b      	uxth	r3, r3
 8011742:	f003 0307 	and.w	r3, r3, #7
 8011746:	b29a      	uxth	r2, r3
 8011748:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801174a:	4313      	orrs	r3, r2
 801174c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011754:	60da      	str	r2, [r3, #12]
 8011756:	e0b9      	b.n	80118cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011758:	2301      	movs	r3, #1
 801175a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801175e:	e0b5      	b.n	80118cc <UART_SetConfig+0xa94>
 8011760:	03d09000 	.word	0x03d09000
 8011764:	003d0900 	.word	0x003d0900
 8011768:	08017838 	.word	0x08017838
 801176c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011770:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011774:	2b20      	cmp	r3, #32
 8011776:	dc49      	bgt.n	801180c <UART_SetConfig+0x9d4>
 8011778:	2b00      	cmp	r3, #0
 801177a:	db7c      	blt.n	8011876 <UART_SetConfig+0xa3e>
 801177c:	2b20      	cmp	r3, #32
 801177e:	d87a      	bhi.n	8011876 <UART_SetConfig+0xa3e>
 8011780:	a201      	add	r2, pc, #4	; (adr r2, 8011788 <UART_SetConfig+0x950>)
 8011782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011786:	bf00      	nop
 8011788:	08011813 	.word	0x08011813
 801178c:	0801181b 	.word	0x0801181b
 8011790:	08011877 	.word	0x08011877
 8011794:	08011877 	.word	0x08011877
 8011798:	08011823 	.word	0x08011823
 801179c:	08011877 	.word	0x08011877
 80117a0:	08011877 	.word	0x08011877
 80117a4:	08011877 	.word	0x08011877
 80117a8:	08011833 	.word	0x08011833
 80117ac:	08011877 	.word	0x08011877
 80117b0:	08011877 	.word	0x08011877
 80117b4:	08011877 	.word	0x08011877
 80117b8:	08011877 	.word	0x08011877
 80117bc:	08011877 	.word	0x08011877
 80117c0:	08011877 	.word	0x08011877
 80117c4:	08011877 	.word	0x08011877
 80117c8:	08011843 	.word	0x08011843
 80117cc:	08011877 	.word	0x08011877
 80117d0:	08011877 	.word	0x08011877
 80117d4:	08011877 	.word	0x08011877
 80117d8:	08011877 	.word	0x08011877
 80117dc:	08011877 	.word	0x08011877
 80117e0:	08011877 	.word	0x08011877
 80117e4:	08011877 	.word	0x08011877
 80117e8:	08011877 	.word	0x08011877
 80117ec:	08011877 	.word	0x08011877
 80117f0:	08011877 	.word	0x08011877
 80117f4:	08011877 	.word	0x08011877
 80117f8:	08011877 	.word	0x08011877
 80117fc:	08011877 	.word	0x08011877
 8011800:	08011877 	.word	0x08011877
 8011804:	08011877 	.word	0x08011877
 8011808:	08011869 	.word	0x08011869
 801180c:	2b40      	cmp	r3, #64	; 0x40
 801180e:	d02e      	beq.n	801186e <UART_SetConfig+0xa36>
 8011810:	e031      	b.n	8011876 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011812:	f7f9 fb27 	bl	800ae64 <HAL_RCC_GetPCLK1Freq>
 8011816:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011818:	e033      	b.n	8011882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801181a:	f7f9 fb39 	bl	800ae90 <HAL_RCC_GetPCLK2Freq>
 801181e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011820:	e02f      	b.n	8011882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011826:	4618      	mov	r0, r3
 8011828:	f7fb fb2a 	bl	800ce80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011830:	e027      	b.n	8011882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011832:	f107 0318 	add.w	r3, r7, #24
 8011836:	4618      	mov	r0, r3
 8011838:	f7fb fc76 	bl	800d128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801183c:	69fb      	ldr	r3, [r7, #28]
 801183e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011840:	e01f      	b.n	8011882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011842:	4b2d      	ldr	r3, [pc, #180]	; (80118f8 <UART_SetConfig+0xac0>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f003 0320 	and.w	r3, r3, #32
 801184a:	2b00      	cmp	r3, #0
 801184c:	d009      	beq.n	8011862 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801184e:	4b2a      	ldr	r3, [pc, #168]	; (80118f8 <UART_SetConfig+0xac0>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	08db      	lsrs	r3, r3, #3
 8011854:	f003 0303 	and.w	r3, r3, #3
 8011858:	4a28      	ldr	r2, [pc, #160]	; (80118fc <UART_SetConfig+0xac4>)
 801185a:	fa22 f303 	lsr.w	r3, r2, r3
 801185e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011860:	e00f      	b.n	8011882 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011862:	4b26      	ldr	r3, [pc, #152]	; (80118fc <UART_SetConfig+0xac4>)
 8011864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011866:	e00c      	b.n	8011882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011868:	4b25      	ldr	r3, [pc, #148]	; (8011900 <UART_SetConfig+0xac8>)
 801186a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801186c:	e009      	b.n	8011882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801186e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011874:	e005      	b.n	8011882 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011876:	2300      	movs	r3, #0
 8011878:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801187a:	2301      	movs	r3, #1
 801187c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011880:	bf00      	nop
    }

    if (pclk != 0U)
 8011882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011884:	2b00      	cmp	r3, #0
 8011886:	d021      	beq.n	80118cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801188c:	4a1d      	ldr	r2, [pc, #116]	; (8011904 <UART_SetConfig+0xacc>)
 801188e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011892:	461a      	mov	r2, r3
 8011894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011896:	fbb3 f2f2 	udiv	r2, r3, r2
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	085b      	lsrs	r3, r3, #1
 80118a0:	441a      	add	r2, r3
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80118aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ae:	2b0f      	cmp	r3, #15
 80118b0:	d909      	bls.n	80118c6 <UART_SetConfig+0xa8e>
 80118b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118b8:	d205      	bcs.n	80118c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80118ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118bc:	b29a      	uxth	r2, r3
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	60da      	str	r2, [r3, #12]
 80118c4:	e002      	b.n	80118cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80118c6:	2301      	movs	r3, #1
 80118c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	2201      	movs	r2, #1
 80118d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	2201      	movs	r2, #1
 80118d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	2200      	movs	r2, #0
 80118e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	2200      	movs	r2, #0
 80118e6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80118e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3748      	adds	r7, #72	; 0x48
 80118f0:	46bd      	mov	sp, r7
 80118f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80118f6:	bf00      	nop
 80118f8:	58024400 	.word	0x58024400
 80118fc:	03d09000 	.word	0x03d09000
 8011900:	003d0900 	.word	0x003d0900
 8011904:	08017838 	.word	0x08017838

08011908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011914:	f003 0308 	and.w	r3, r3, #8
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00a      	beq.n	8011932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	430a      	orrs	r2, r1
 8011930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011936:	f003 0301 	and.w	r3, r3, #1
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00a      	beq.n	8011954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	685b      	ldr	r3, [r3, #4]
 8011944:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	430a      	orrs	r2, r1
 8011952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011958:	f003 0302 	and.w	r3, r3, #2
 801195c:	2b00      	cmp	r3, #0
 801195e:	d00a      	beq.n	8011976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	430a      	orrs	r2, r1
 8011974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801197a:	f003 0304 	and.w	r3, r3, #4
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00a      	beq.n	8011998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	430a      	orrs	r2, r1
 8011996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199c:	f003 0310 	and.w	r3, r3, #16
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00a      	beq.n	80119ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	689b      	ldr	r3, [r3, #8]
 80119aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	430a      	orrs	r2, r1
 80119b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119be:	f003 0320 	and.w	r3, r3, #32
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d00a      	beq.n	80119dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	689b      	ldr	r3, [r3, #8]
 80119cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	430a      	orrs	r2, r1
 80119da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d01a      	beq.n	8011a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	430a      	orrs	r2, r1
 80119fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a06:	d10a      	bne.n	8011a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	430a      	orrs	r2, r1
 8011a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d00a      	beq.n	8011a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	430a      	orrs	r2, r1
 8011a3e:	605a      	str	r2, [r3, #4]
  }
}
 8011a40:	bf00      	nop
 8011a42:	370c      	adds	r7, #12
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b098      	sub	sp, #96	; 0x60
 8011a50:	af02      	add	r7, sp, #8
 8011a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a5c:	f7f2 fa74 	bl	8003f48 <HAL_GetTick>
 8011a60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	f003 0308 	and.w	r3, r3, #8
 8011a6c:	2b08      	cmp	r3, #8
 8011a6e:	d12f      	bne.n	8011ad0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a74:	9300      	str	r3, [sp, #0]
 8011a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 f88e 	bl	8011ba0 <UART_WaitOnFlagUntilTimeout>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d022      	beq.n	8011ad0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a92:	e853 3f00 	ldrex	r3, [r3]
 8011a96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8011aaa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ab0:	e841 2300 	strex	r3, r2, [r1]
 8011ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d1e6      	bne.n	8011a8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2220      	movs	r2, #32
 8011ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011acc:	2303      	movs	r3, #3
 8011ace:	e063      	b.n	8011b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f003 0304 	and.w	r3, r3, #4
 8011ada:	2b04      	cmp	r3, #4
 8011adc:	d149      	bne.n	8011b72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ae2:	9300      	str	r3, [sp, #0]
 8011ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f000 f857 	bl	8011ba0 <UART_WaitOnFlagUntilTimeout>
 8011af2:	4603      	mov	r3, r0
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d03c      	beq.n	8011b72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b00:	e853 3f00 	ldrex	r3, [r3]
 8011b04:	623b      	str	r3, [r7, #32]
   return(result);
 8011b06:	6a3b      	ldr	r3, [r7, #32]
 8011b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	461a      	mov	r2, r3
 8011b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b16:	633b      	str	r3, [r7, #48]	; 0x30
 8011b18:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b1e:	e841 2300 	strex	r3, r2, [r1]
 8011b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d1e6      	bne.n	8011af8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	3308      	adds	r3, #8
 8011b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	e853 3f00 	ldrex	r3, [r3]
 8011b38:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	f023 0301 	bic.w	r3, r3, #1
 8011b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	3308      	adds	r3, #8
 8011b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b4a:	61fa      	str	r2, [r7, #28]
 8011b4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b4e:	69b9      	ldr	r1, [r7, #24]
 8011b50:	69fa      	ldr	r2, [r7, #28]
 8011b52:	e841 2300 	strex	r3, r2, [r1]
 8011b56:	617b      	str	r3, [r7, #20]
   return(result);
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d1e5      	bne.n	8011b2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2220      	movs	r2, #32
 8011b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b6e:	2303      	movs	r3, #3
 8011b70:	e012      	b.n	8011b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2220      	movs	r2, #32
 8011b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2220      	movs	r2, #32
 8011b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2200      	movs	r2, #0
 8011b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b96:	2300      	movs	r3, #0
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3758      	adds	r7, #88	; 0x58
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	603b      	str	r3, [r7, #0]
 8011bac:	4613      	mov	r3, r2
 8011bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bb0:	e04f      	b.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bb8:	d04b      	beq.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011bba:	f7f2 f9c5 	bl	8003f48 <HAL_GetTick>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	69ba      	ldr	r2, [r7, #24]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d302      	bcc.n	8011bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d101      	bne.n	8011bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011bd0:	2303      	movs	r3, #3
 8011bd2:	e04e      	b.n	8011c72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f003 0304 	and.w	r3, r3, #4
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d037      	beq.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	2b80      	cmp	r3, #128	; 0x80
 8011be6:	d034      	beq.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	2b40      	cmp	r3, #64	; 0x40
 8011bec:	d031      	beq.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	69db      	ldr	r3, [r3, #28]
 8011bf4:	f003 0308 	and.w	r3, r3, #8
 8011bf8:	2b08      	cmp	r3, #8
 8011bfa:	d110      	bne.n	8011c1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2208      	movs	r2, #8
 8011c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	f000 f99d 	bl	8011f44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	2208      	movs	r2, #8
 8011c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2200      	movs	r2, #0
 8011c16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e029      	b.n	8011c72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	69db      	ldr	r3, [r3, #28]
 8011c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c2c:	d111      	bne.n	8011c52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f000 f983 	bl	8011f44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2220      	movs	r2, #32
 8011c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c4e:	2303      	movs	r3, #3
 8011c50:	e00f      	b.n	8011c72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	69da      	ldr	r2, [r3, #28]
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	4013      	ands	r3, r2
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	bf0c      	ite	eq
 8011c62:	2301      	moveq	r3, #1
 8011c64:	2300      	movne	r3, #0
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	461a      	mov	r2, r3
 8011c6a:	79fb      	ldrb	r3, [r7, #7]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d0a0      	beq.n	8011bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c70:	2300      	movs	r3, #0
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
	...

08011c7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b0a3      	sub	sp, #140	; 0x8c
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	4613      	mov	r3, r2
 8011c88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	68ba      	ldr	r2, [r7, #8]
 8011c8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	88fa      	ldrh	r2, [r7, #6]
 8011c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	88fa      	ldrh	r2, [r7, #6]
 8011c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011cae:	d10e      	bne.n	8011cce <UART_Start_Receive_IT+0x52>
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	691b      	ldr	r3, [r3, #16]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d105      	bne.n	8011cc4 <UART_Start_Receive_IT+0x48>
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011cbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011cc2:	e02d      	b.n	8011d20 <UART_Start_Receive_IT+0xa4>
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	22ff      	movs	r2, #255	; 0xff
 8011cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ccc:	e028      	b.n	8011d20 <UART_Start_Receive_IT+0xa4>
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d10d      	bne.n	8011cf2 <UART_Start_Receive_IT+0x76>
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	691b      	ldr	r3, [r3, #16]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d104      	bne.n	8011ce8 <UART_Start_Receive_IT+0x6c>
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	22ff      	movs	r2, #255	; 0xff
 8011ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ce6:	e01b      	b.n	8011d20 <UART_Start_Receive_IT+0xa4>
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	227f      	movs	r2, #127	; 0x7f
 8011cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011cf0:	e016      	b.n	8011d20 <UART_Start_Receive_IT+0xa4>
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	689b      	ldr	r3, [r3, #8]
 8011cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011cfa:	d10d      	bne.n	8011d18 <UART_Start_Receive_IT+0x9c>
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	691b      	ldr	r3, [r3, #16]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d104      	bne.n	8011d0e <UART_Start_Receive_IT+0x92>
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	227f      	movs	r2, #127	; 0x7f
 8011d08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d0c:	e008      	b.n	8011d20 <UART_Start_Receive_IT+0xa4>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	223f      	movs	r2, #63	; 0x3f
 8011d12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d16:	e003      	b.n	8011d20 <UART_Start_Receive_IT+0xa4>
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2200      	movs	r2, #0
 8011d24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2222      	movs	r2, #34	; 0x22
 8011d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	3308      	adds	r3, #8
 8011d36:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d3a:	e853 3f00 	ldrex	r3, [r3]
 8011d3e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d42:	f043 0301 	orr.w	r3, r3, #1
 8011d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	3308      	adds	r3, #8
 8011d50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d54:	673a      	str	r2, [r7, #112]	; 0x70
 8011d56:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011d5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011d5c:	e841 2300 	strex	r3, r2, [r1]
 8011d60:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1e3      	bne.n	8011d30 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d70:	d14f      	bne.n	8011e12 <UART_Start_Receive_IT+0x196>
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d78:	88fa      	ldrh	r2, [r7, #6]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d349      	bcc.n	8011e12 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	689b      	ldr	r3, [r3, #8]
 8011d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d86:	d107      	bne.n	8011d98 <UART_Start_Receive_IT+0x11c>
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	691b      	ldr	r3, [r3, #16]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d103      	bne.n	8011d98 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	4a47      	ldr	r2, [pc, #284]	; (8011eb0 <UART_Start_Receive_IT+0x234>)
 8011d94:	675a      	str	r2, [r3, #116]	; 0x74
 8011d96:	e002      	b.n	8011d9e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	4a46      	ldr	r2, [pc, #280]	; (8011eb4 <UART_Start_Receive_IT+0x238>)
 8011d9c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	691b      	ldr	r3, [r3, #16]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d01a      	beq.n	8011ddc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dae:	e853 3f00 	ldrex	r3, [r3]
 8011db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011dca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011dce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011dd0:	e841 2300 	strex	r3, r2, [r1]
 8011dd4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d1e4      	bne.n	8011da6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	3308      	adds	r3, #8
 8011de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011de6:	e853 3f00 	ldrex	r3, [r3]
 8011dea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011df2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	3308      	adds	r3, #8
 8011dfa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011dfc:	64ba      	str	r2, [r7, #72]	; 0x48
 8011dfe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e04:	e841 2300 	strex	r3, r2, [r1]
 8011e08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d1e5      	bne.n	8011ddc <UART_Start_Receive_IT+0x160>
 8011e10:	e046      	b.n	8011ea0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	689b      	ldr	r3, [r3, #8]
 8011e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e1a:	d107      	bne.n	8011e2c <UART_Start_Receive_IT+0x1b0>
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	691b      	ldr	r3, [r3, #16]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d103      	bne.n	8011e2c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	4a24      	ldr	r2, [pc, #144]	; (8011eb8 <UART_Start_Receive_IT+0x23c>)
 8011e28:	675a      	str	r2, [r3, #116]	; 0x74
 8011e2a:	e002      	b.n	8011e32 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	4a23      	ldr	r2, [pc, #140]	; (8011ebc <UART_Start_Receive_IT+0x240>)
 8011e30:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	691b      	ldr	r3, [r3, #16]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d019      	beq.n	8011e6e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e42:	e853 3f00 	ldrex	r3, [r3]
 8011e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011e4e:	677b      	str	r3, [r7, #116]	; 0x74
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	461a      	mov	r2, r3
 8011e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011e58:	637b      	str	r3, [r7, #52]	; 0x34
 8011e5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e60:	e841 2300 	strex	r3, r2, [r1]
 8011e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d1e6      	bne.n	8011e3a <UART_Start_Receive_IT+0x1be>
 8011e6c:	e018      	b.n	8011ea0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	e853 3f00 	ldrex	r3, [r3]
 8011e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	f043 0320 	orr.w	r3, r3, #32
 8011e82:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	461a      	mov	r2, r3
 8011e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e8c:	623b      	str	r3, [r7, #32]
 8011e8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e90:	69f9      	ldr	r1, [r7, #28]
 8011e92:	6a3a      	ldr	r2, [r7, #32]
 8011e94:	e841 2300 	strex	r3, r2, [r1]
 8011e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e9a:	69bb      	ldr	r3, [r7, #24]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d1e6      	bne.n	8011e6e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011ea0:	2300      	movs	r3, #0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	378c      	adds	r7, #140	; 0x8c
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eac:	4770      	bx	lr
 8011eae:	bf00      	nop
 8011eb0:	08012895 	.word	0x08012895
 8011eb4:	08012535 	.word	0x08012535
 8011eb8:	0801237d 	.word	0x0801237d
 8011ebc:	080121c5 	.word	0x080121c5

08011ec0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b08f      	sub	sp, #60	; 0x3c
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ece:	6a3b      	ldr	r3, [r7, #32]
 8011ed0:	e853 3f00 	ldrex	r3, [r3]
 8011ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ed6:	69fb      	ldr	r3, [r7, #28]
 8011ed8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011edc:	637b      	str	r3, [r7, #52]	; 0x34
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ee8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011eee:	e841 2300 	strex	r3, r2, [r1]
 8011ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1e6      	bne.n	8011ec8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	3308      	adds	r3, #8
 8011f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	e853 3f00 	ldrex	r3, [r3]
 8011f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011f10:	633b      	str	r3, [r7, #48]	; 0x30
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	3308      	adds	r3, #8
 8011f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f1a:	61ba      	str	r2, [r7, #24]
 8011f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f1e:	6979      	ldr	r1, [r7, #20]
 8011f20:	69ba      	ldr	r2, [r7, #24]
 8011f22:	e841 2300 	strex	r3, r2, [r1]
 8011f26:	613b      	str	r3, [r7, #16]
   return(result);
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d1e5      	bne.n	8011efa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2220      	movs	r2, #32
 8011f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011f36:	bf00      	nop
 8011f38:	373c      	adds	r7, #60	; 0x3c
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr
	...

08011f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f44:	b480      	push	{r7}
 8011f46:	b095      	sub	sp, #84	; 0x54
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f54:	e853 3f00 	ldrex	r3, [r3]
 8011f58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	461a      	mov	r2, r3
 8011f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8011f6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f72:	e841 2300 	strex	r3, r2, [r1]
 8011f76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d1e6      	bne.n	8011f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	3308      	adds	r3, #8
 8011f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f86:	6a3b      	ldr	r3, [r7, #32]
 8011f88:	e853 3f00 	ldrex	r3, [r3]
 8011f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f8e:	69fa      	ldr	r2, [r7, #28]
 8011f90:	4b1e      	ldr	r3, [pc, #120]	; (801200c <UART_EndRxTransfer+0xc8>)
 8011f92:	4013      	ands	r3, r2
 8011f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	3308      	adds	r3, #8
 8011f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fa6:	e841 2300 	strex	r3, r2, [r1]
 8011faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d1e5      	bne.n	8011f7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fb6:	2b01      	cmp	r3, #1
 8011fb8:	d118      	bne.n	8011fec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	e853 3f00 	ldrex	r3, [r3]
 8011fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	f023 0310 	bic.w	r3, r3, #16
 8011fce:	647b      	str	r3, [r7, #68]	; 0x44
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fd8:	61bb      	str	r3, [r7, #24]
 8011fda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fdc:	6979      	ldr	r1, [r7, #20]
 8011fde:	69ba      	ldr	r2, [r7, #24]
 8011fe0:	e841 2300 	strex	r3, r2, [r1]
 8011fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d1e6      	bne.n	8011fba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2220      	movs	r2, #32
 8011ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012000:	bf00      	nop
 8012002:	3754      	adds	r7, #84	; 0x54
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr
 801200c:	effffffe 	.word	0xeffffffe

08012010 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b090      	sub	sp, #64	; 0x40
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801201c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	69db      	ldr	r3, [r3, #28]
 8012022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012026:	d037      	beq.n	8012098 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8012028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801202a:	2200      	movs	r2, #0
 801202c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	3308      	adds	r3, #8
 8012036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203a:	e853 3f00 	ldrex	r3, [r3]
 801203e:	623b      	str	r3, [r7, #32]
   return(result);
 8012040:	6a3b      	ldr	r3, [r7, #32]
 8012042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012046:	63bb      	str	r3, [r7, #56]	; 0x38
 8012048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	3308      	adds	r3, #8
 801204e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012050:	633a      	str	r2, [r7, #48]	; 0x30
 8012052:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012058:	e841 2300 	strex	r3, r2, [r1]
 801205c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012060:	2b00      	cmp	r3, #0
 8012062:	d1e5      	bne.n	8012030 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	e853 3f00 	ldrex	r3, [r3]
 8012070:	60fb      	str	r3, [r7, #12]
   return(result);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012078:	637b      	str	r3, [r7, #52]	; 0x34
 801207a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	461a      	mov	r2, r3
 8012080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012082:	61fb      	str	r3, [r7, #28]
 8012084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012086:	69b9      	ldr	r1, [r7, #24]
 8012088:	69fa      	ldr	r2, [r7, #28]
 801208a:	e841 2300 	strex	r3, r2, [r1]
 801208e:	617b      	str	r3, [r7, #20]
   return(result);
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d1e6      	bne.n	8012064 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012096:	e002      	b.n	801209e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8012098:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801209a:	f7f0 f99b 	bl	80023d4 <HAL_UART_TxCpltCallback>
}
 801209e:	bf00      	nop
 80120a0:	3740      	adds	r7, #64	; 0x40
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}

080120a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b084      	sub	sp, #16
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	f7fe fe9f 	bl	8010df8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120ba:	bf00      	nop
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b086      	sub	sp, #24
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	689b      	ldr	r3, [r3, #8]
 80120e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120ea:	2b80      	cmp	r3, #128	; 0x80
 80120ec:	d109      	bne.n	8012102 <UART_DMAError+0x40>
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	2b21      	cmp	r3, #33	; 0x21
 80120f2:	d106      	bne.n	8012102 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	2200      	movs	r2, #0
 80120f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80120fc:	6978      	ldr	r0, [r7, #20]
 80120fe:	f7ff fedf 	bl	8011ec0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801210c:	2b40      	cmp	r3, #64	; 0x40
 801210e:	d109      	bne.n	8012124 <UART_DMAError+0x62>
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2b22      	cmp	r3, #34	; 0x22
 8012114:	d106      	bne.n	8012124 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	2200      	movs	r2, #0
 801211a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801211e:	6978      	ldr	r0, [r7, #20]
 8012120:	f7ff ff10 	bl	8011f44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801212a:	f043 0210 	orr.w	r2, r3, #16
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012134:	6978      	ldr	r0, [r7, #20]
 8012136:	f7fe fe69 	bl	8010e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801213a:	bf00      	nop
 801213c:	3718      	adds	r7, #24
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}

08012142 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012142:	b580      	push	{r7, lr}
 8012144:	b084      	sub	sp, #16
 8012146:	af00      	add	r7, sp, #0
 8012148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801214e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	2200      	movs	r2, #0
 8012154:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	2200      	movs	r2, #0
 801215c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012160:	68f8      	ldr	r0, [r7, #12]
 8012162:	f7fe fe53 	bl	8010e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012166:	bf00      	nop
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}

0801216e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801216e:	b580      	push	{r7, lr}
 8012170:	b088      	sub	sp, #32
 8012172:	af00      	add	r7, sp, #0
 8012174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	e853 3f00 	ldrex	r3, [r3]
 8012182:	60bb      	str	r3, [r7, #8]
   return(result);
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801218a:	61fb      	str	r3, [r7, #28]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	461a      	mov	r2, r3
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	61bb      	str	r3, [r7, #24]
 8012196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012198:	6979      	ldr	r1, [r7, #20]
 801219a:	69ba      	ldr	r2, [r7, #24]
 801219c:	e841 2300 	strex	r3, r2, [r1]
 80121a0:	613b      	str	r3, [r7, #16]
   return(result);
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d1e6      	bne.n	8012176 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2220      	movs	r2, #32
 80121ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7f0 f90c 	bl	80023d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121bc:	bf00      	nop
 80121be:	3720      	adds	r7, #32
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b09c      	sub	sp, #112	; 0x70
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121dc:	2b22      	cmp	r3, #34	; 0x22
 80121de:	f040 80be 	bne.w	801235e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80121ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80121f0:	b2d9      	uxtb	r1, r3
 80121f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80121f6:	b2da      	uxtb	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121fc:	400a      	ands	r2, r1
 80121fe:	b2d2      	uxtb	r2, r2
 8012200:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012206:	1c5a      	adds	r2, r3, #1
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012212:	b29b      	uxth	r3, r3
 8012214:	3b01      	subs	r3, #1
 8012216:	b29a      	uxth	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012224:	b29b      	uxth	r3, r3
 8012226:	2b00      	cmp	r3, #0
 8012228:	f040 80a1 	bne.w	801236e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012234:	e853 3f00 	ldrex	r3, [r3]
 8012238:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801223a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801223c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012240:	66bb      	str	r3, [r7, #104]	; 0x68
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	461a      	mov	r2, r3
 8012248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801224a:	65bb      	str	r3, [r7, #88]	; 0x58
 801224c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801224e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012252:	e841 2300 	strex	r3, r2, [r1]
 8012256:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801225a:	2b00      	cmp	r3, #0
 801225c:	d1e6      	bne.n	801222c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	3308      	adds	r3, #8
 8012264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012268:	e853 3f00 	ldrex	r3, [r3]
 801226c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012270:	f023 0301 	bic.w	r3, r3, #1
 8012274:	667b      	str	r3, [r7, #100]	; 0x64
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	3308      	adds	r3, #8
 801227c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801227e:	647a      	str	r2, [r7, #68]	; 0x44
 8012280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012286:	e841 2300 	strex	r3, r2, [r1]
 801228a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801228c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1e5      	bne.n	801225e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2220      	movs	r2, #32
 8012296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2200      	movs	r2, #0
 801229e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	4a33      	ldr	r2, [pc, #204]	; (8012378 <UART_RxISR_8BIT+0x1b4>)
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d01f      	beq.n	80122f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d018      	beq.n	80122f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c6:	e853 3f00 	ldrex	r3, [r3]
 80122ca:	623b      	str	r3, [r7, #32]
   return(result);
 80122cc:	6a3b      	ldr	r3, [r7, #32]
 80122ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80122d2:	663b      	str	r3, [r7, #96]	; 0x60
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	461a      	mov	r2, r3
 80122da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122dc:	633b      	str	r3, [r7, #48]	; 0x30
 80122de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80122e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122e4:	e841 2300 	strex	r3, r2, [r1]
 80122e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80122ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d1e6      	bne.n	80122be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d12e      	bne.n	8012356 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2200      	movs	r2, #0
 80122fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	e853 3f00 	ldrex	r3, [r3]
 801230a:	60fb      	str	r3, [r7, #12]
   return(result);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f023 0310 	bic.w	r3, r3, #16
 8012312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	461a      	mov	r2, r3
 801231a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801231c:	61fb      	str	r3, [r7, #28]
 801231e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012320:	69b9      	ldr	r1, [r7, #24]
 8012322:	69fa      	ldr	r2, [r7, #28]
 8012324:	e841 2300 	strex	r3, r2, [r1]
 8012328:	617b      	str	r3, [r7, #20]
   return(result);
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d1e6      	bne.n	80122fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	69db      	ldr	r3, [r3, #28]
 8012336:	f003 0310 	and.w	r3, r3, #16
 801233a:	2b10      	cmp	r3, #16
 801233c:	d103      	bne.n	8012346 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	2210      	movs	r2, #16
 8012344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801234c:	4619      	mov	r1, r3
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f7fe fd66 	bl	8010e20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012354:	e00b      	b.n	801236e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f7ee f996 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 801235c:	e007      	b.n	801236e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	699a      	ldr	r2, [r3, #24]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f042 0208 	orr.w	r2, r2, #8
 801236c:	619a      	str	r2, [r3, #24]
}
 801236e:	bf00      	nop
 8012370:	3770      	adds	r7, #112	; 0x70
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	58000c00 	.word	0x58000c00

0801237c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b09c      	sub	sp, #112	; 0x70
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801238a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012394:	2b22      	cmp	r3, #34	; 0x22
 8012396:	f040 80be 	bne.w	8012516 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123a8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80123aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80123ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80123b2:	4013      	ands	r3, r2
 80123b4:	b29a      	uxth	r2, r3
 80123b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123be:	1c9a      	adds	r2, r3, #2
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	3b01      	subs	r3, #1
 80123ce:	b29a      	uxth	r2, r3
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80123dc:	b29b      	uxth	r3, r3
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f040 80a1 	bne.w	8012526 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123ec:	e853 3f00 	ldrex	r3, [r3]
 80123f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80123f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123f8:	667b      	str	r3, [r7, #100]	; 0x64
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	461a      	mov	r2, r3
 8012400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012402:	657b      	str	r3, [r7, #84]	; 0x54
 8012404:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012406:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801240a:	e841 2300 	strex	r3, r2, [r1]
 801240e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012412:	2b00      	cmp	r3, #0
 8012414:	d1e6      	bne.n	80123e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	3308      	adds	r3, #8
 801241c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012420:	e853 3f00 	ldrex	r3, [r3]
 8012424:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012428:	f023 0301 	bic.w	r3, r3, #1
 801242c:	663b      	str	r3, [r7, #96]	; 0x60
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	3308      	adds	r3, #8
 8012434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012436:	643a      	str	r2, [r7, #64]	; 0x40
 8012438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801243a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801243c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801243e:	e841 2300 	strex	r3, r2, [r1]
 8012442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012446:	2b00      	cmp	r3, #0
 8012448:	d1e5      	bne.n	8012416 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2220      	movs	r2, #32
 801244e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2200      	movs	r2, #0
 8012456:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	4a33      	ldr	r2, [pc, #204]	; (8012530 <UART_RxISR_16BIT+0x1b4>)
 8012464:	4293      	cmp	r3, r2
 8012466:	d01f      	beq.n	80124a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012472:	2b00      	cmp	r3, #0
 8012474:	d018      	beq.n	80124a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801247c:	6a3b      	ldr	r3, [r7, #32]
 801247e:	e853 3f00 	ldrex	r3, [r3]
 8012482:	61fb      	str	r3, [r7, #28]
   return(result);
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801248a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	461a      	mov	r2, r3
 8012492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012496:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801249a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801249c:	e841 2300 	strex	r3, r2, [r1]
 80124a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80124a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d1e6      	bne.n	8012476 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124ac:	2b01      	cmp	r3, #1
 80124ae:	d12e      	bne.n	801250e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	e853 3f00 	ldrex	r3, [r3]
 80124c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	f023 0310 	bic.w	r3, r3, #16
 80124ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	461a      	mov	r2, r3
 80124d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124d4:	61bb      	str	r3, [r7, #24]
 80124d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124d8:	6979      	ldr	r1, [r7, #20]
 80124da:	69ba      	ldr	r2, [r7, #24]
 80124dc:	e841 2300 	strex	r3, r2, [r1]
 80124e0:	613b      	str	r3, [r7, #16]
   return(result);
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d1e6      	bne.n	80124b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	69db      	ldr	r3, [r3, #28]
 80124ee:	f003 0310 	and.w	r3, r3, #16
 80124f2:	2b10      	cmp	r3, #16
 80124f4:	d103      	bne.n	80124fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2210      	movs	r2, #16
 80124fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012504:	4619      	mov	r1, r3
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7fe fc8a 	bl	8010e20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801250c:	e00b      	b.n	8012526 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7ee f8ba 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012514:	e007      	b.n	8012526 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	699a      	ldr	r2, [r3, #24]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f042 0208 	orr.w	r2, r2, #8
 8012524:	619a      	str	r2, [r3, #24]
}
 8012526:	bf00      	nop
 8012528:	3770      	adds	r7, #112	; 0x70
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	58000c00 	.word	0x58000c00

08012534 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b0ac      	sub	sp, #176	; 0xb0
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012542:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	69db      	ldr	r3, [r3, #28]
 801254c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	689b      	ldr	r3, [r3, #8]
 8012560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801256a:	2b22      	cmp	r3, #34	; 0x22
 801256c:	f040 8180 	bne.w	8012870 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012576:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801257a:	e123      	b.n	80127c4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012582:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012586:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801258a:	b2d9      	uxtb	r1, r3
 801258c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012590:	b2da      	uxtb	r2, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012596:	400a      	ands	r2, r1
 8012598:	b2d2      	uxtb	r2, r2
 801259a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125a0:	1c5a      	adds	r2, r3, #1
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	3b01      	subs	r3, #1
 80125b0:	b29a      	uxth	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	69db      	ldr	r3, [r3, #28]
 80125be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80125c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80125c6:	f003 0307 	and.w	r3, r3, #7
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d053      	beq.n	8012676 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80125ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80125d2:	f003 0301 	and.w	r3, r3, #1
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d011      	beq.n	80125fe <UART_RxISR_8BIT_FIFOEN+0xca>
 80125da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80125de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00b      	beq.n	80125fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	2201      	movs	r2, #1
 80125ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125f4:	f043 0201 	orr.w	r2, r3, #1
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012602:	f003 0302 	and.w	r3, r3, #2
 8012606:	2b00      	cmp	r3, #0
 8012608:	d011      	beq.n	801262e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801260a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801260e:	f003 0301 	and.w	r3, r3, #1
 8012612:	2b00      	cmp	r3, #0
 8012614:	d00b      	beq.n	801262e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2202      	movs	r2, #2
 801261c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012624:	f043 0204 	orr.w	r2, r3, #4
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801262e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012632:	f003 0304 	and.w	r3, r3, #4
 8012636:	2b00      	cmp	r3, #0
 8012638:	d011      	beq.n	801265e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801263a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801263e:	f003 0301 	and.w	r3, r3, #1
 8012642:	2b00      	cmp	r3, #0
 8012644:	d00b      	beq.n	801265e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2204      	movs	r2, #4
 801264c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012654:	f043 0202 	orr.w	r2, r3, #2
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012664:	2b00      	cmp	r3, #0
 8012666:	d006      	beq.n	8012676 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f7fe fbcf 	bl	8010e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801267c:	b29b      	uxth	r3, r3
 801267e:	2b00      	cmp	r3, #0
 8012680:	f040 80a0 	bne.w	80127c4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801268a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801268c:	e853 3f00 	ldrex	r3, [r3]
 8012690:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	461a      	mov	r2, r3
 80126a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80126a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80126a8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80126ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80126ae:	e841 2300 	strex	r3, r2, [r1]
 80126b2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80126b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d1e4      	bne.n	8012684 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	3308      	adds	r3, #8
 80126c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126c4:	e853 3f00 	ldrex	r3, [r3]
 80126c8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80126ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80126cc:	4b6e      	ldr	r3, [pc, #440]	; (8012888 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80126ce:	4013      	ands	r3, r2
 80126d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	3308      	adds	r3, #8
 80126da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80126de:	66ba      	str	r2, [r7, #104]	; 0x68
 80126e0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80126e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80126e6:	e841 2300 	strex	r3, r2, [r1]
 80126ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80126ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d1e3      	bne.n	80126ba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2220      	movs	r2, #32
 80126f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2200      	movs	r2, #0
 80126fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4a60      	ldr	r2, [pc, #384]	; (801288c <UART_RxISR_8BIT_FIFOEN+0x358>)
 801270c:	4293      	cmp	r3, r2
 801270e:	d021      	beq.n	8012754 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801271a:	2b00      	cmp	r3, #0
 801271c:	d01a      	beq.n	8012754 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012726:	e853 3f00 	ldrex	r3, [r3]
 801272a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801272c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801272e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	461a      	mov	r2, r3
 801273c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012740:	657b      	str	r3, [r7, #84]	; 0x54
 8012742:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012744:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012746:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012748:	e841 2300 	strex	r3, r2, [r1]
 801274c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801274e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012750:	2b00      	cmp	r3, #0
 8012752:	d1e4      	bne.n	801271e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012758:	2b01      	cmp	r3, #1
 801275a:	d130      	bne.n	80127be <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2200      	movs	r2, #0
 8012760:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801276a:	e853 3f00 	ldrex	r3, [r3]
 801276e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012772:	f023 0310 	bic.w	r3, r3, #16
 8012776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	461a      	mov	r2, r3
 8012780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012784:	643b      	str	r3, [r7, #64]	; 0x40
 8012786:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801278a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801278c:	e841 2300 	strex	r3, r2, [r1]
 8012790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012794:	2b00      	cmp	r3, #0
 8012796:	d1e4      	bne.n	8012762 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	69db      	ldr	r3, [r3, #28]
 801279e:	f003 0310 	and.w	r3, r3, #16
 80127a2:	2b10      	cmp	r3, #16
 80127a4:	d103      	bne.n	80127ae <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	2210      	movs	r2, #16
 80127ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80127b4:	4619      	mov	r1, r3
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7fe fb32 	bl	8010e20 <HAL_UARTEx_RxEventCallback>
 80127bc:	e002      	b.n	80127c4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f7ed ff62 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d006      	beq.n	80127da <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80127cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127d0:	f003 0320 	and.w	r3, r3, #32
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f47f aed1 	bne.w	801257c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80127e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d049      	beq.n	8012880 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127f2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d242      	bcs.n	8012880 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	3308      	adds	r3, #8
 8012800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012802:	6a3b      	ldr	r3, [r7, #32]
 8012804:	e853 3f00 	ldrex	r3, [r3]
 8012808:	61fb      	str	r3, [r7, #28]
   return(result);
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	3308      	adds	r3, #8
 801281a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801281e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012820:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012826:	e841 2300 	strex	r3, r2, [r1]
 801282a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282e:	2b00      	cmp	r3, #0
 8012830:	d1e3      	bne.n	80127fa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	4a16      	ldr	r2, [pc, #88]	; (8012890 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012836:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	e853 3f00 	ldrex	r3, [r3]
 8012844:	60bb      	str	r3, [r7, #8]
   return(result);
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	f043 0320 	orr.w	r3, r3, #32
 801284c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	461a      	mov	r2, r3
 8012856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801285a:	61bb      	str	r3, [r7, #24]
 801285c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801285e:	6979      	ldr	r1, [r7, #20]
 8012860:	69ba      	ldr	r2, [r7, #24]
 8012862:	e841 2300 	strex	r3, r2, [r1]
 8012866:	613b      	str	r3, [r7, #16]
   return(result);
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1e4      	bne.n	8012838 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801286e:	e007      	b.n	8012880 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	699a      	ldr	r2, [r3, #24]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f042 0208 	orr.w	r2, r2, #8
 801287e:	619a      	str	r2, [r3, #24]
}
 8012880:	bf00      	nop
 8012882:	37b0      	adds	r7, #176	; 0xb0
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	effffffe 	.word	0xeffffffe
 801288c:	58000c00 	.word	0x58000c00
 8012890:	080121c5 	.word	0x080121c5

08012894 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b0ae      	sub	sp, #184	; 0xb8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128a2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	69db      	ldr	r3, [r3, #28]
 80128ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80128ca:	2b22      	cmp	r3, #34	; 0x22
 80128cc:	f040 8184 	bne.w	8012bd8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80128d6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80128da:	e127      	b.n	8012b2c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80128ee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80128f2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80128f6:	4013      	ands	r3, r2
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80128fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012904:	1c9a      	adds	r2, r3, #2
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012910:	b29b      	uxth	r3, r3
 8012912:	3b01      	subs	r3, #1
 8012914:	b29a      	uxth	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	69db      	ldr	r3, [r3, #28]
 8012922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801292a:	f003 0307 	and.w	r3, r3, #7
 801292e:	2b00      	cmp	r3, #0
 8012930:	d053      	beq.n	80129da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012936:	f003 0301 	and.w	r3, r3, #1
 801293a:	2b00      	cmp	r3, #0
 801293c:	d011      	beq.n	8012962 <UART_RxISR_16BIT_FIFOEN+0xce>
 801293e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012946:	2b00      	cmp	r3, #0
 8012948:	d00b      	beq.n	8012962 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	2201      	movs	r2, #1
 8012950:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012958:	f043 0201 	orr.w	r2, r3, #1
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012966:	f003 0302 	and.w	r3, r3, #2
 801296a:	2b00      	cmp	r3, #0
 801296c:	d011      	beq.n	8012992 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801296e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012972:	f003 0301 	and.w	r3, r3, #1
 8012976:	2b00      	cmp	r3, #0
 8012978:	d00b      	beq.n	8012992 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2202      	movs	r2, #2
 8012980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012988:	f043 0204 	orr.w	r2, r3, #4
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012996:	f003 0304 	and.w	r3, r3, #4
 801299a:	2b00      	cmp	r3, #0
 801299c:	d011      	beq.n	80129c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801299e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80129a2:	f003 0301 	and.w	r3, r3, #1
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00b      	beq.n	80129c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2204      	movs	r2, #4
 80129b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129b8:	f043 0202 	orr.w	r2, r3, #2
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d006      	beq.n	80129da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f7fe fa1d 	bl	8010e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2200      	movs	r2, #0
 80129d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f040 80a2 	bne.w	8012b2c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129f0:	e853 3f00 	ldrex	r3, [r3]
 80129f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80129f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80129f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80129fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	461a      	mov	r2, r3
 8012a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012a0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012a12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012a16:	e841 2300 	strex	r3, r2, [r1]
 8012a1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d1e2      	bne.n	80129e8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	3308      	adds	r3, #8
 8012a28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a2c:	e853 3f00 	ldrex	r3, [r3]
 8012a30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012a32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012a34:	4b6e      	ldr	r3, [pc, #440]	; (8012bf0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012a36:	4013      	ands	r3, r2
 8012a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	3308      	adds	r3, #8
 8012a42:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012a46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012a48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012a4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a4e:	e841 2300 	strex	r3, r2, [r1]
 8012a52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1e3      	bne.n	8012a22 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2220      	movs	r2, #32
 8012a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2200      	movs	r2, #0
 8012a66:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	4a60      	ldr	r2, [pc, #384]	; (8012bf4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012a74:	4293      	cmp	r3, r2
 8012a76:	d021      	beq.n	8012abc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d01a      	beq.n	8012abc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a8e:	e853 3f00 	ldrex	r3, [r3]
 8012a92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8012aaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012aae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ab0:	e841 2300 	strex	r3, r2, [r1]
 8012ab4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d1e4      	bne.n	8012a86 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d130      	bne.n	8012b26 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad2:	e853 3f00 	ldrex	r3, [r3]
 8012ad6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ada:	f023 0310 	bic.w	r3, r3, #16
 8012ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012aec:	647b      	str	r3, [r7, #68]	; 0x44
 8012aee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012af0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012af4:	e841 2300 	strex	r3, r2, [r1]
 8012af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d1e4      	bne.n	8012aca <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	69db      	ldr	r3, [r3, #28]
 8012b06:	f003 0310 	and.w	r3, r3, #16
 8012b0a:	2b10      	cmp	r3, #16
 8012b0c:	d103      	bne.n	8012b16 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2210      	movs	r2, #16
 8012b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f7fe f97e 	bl	8010e20 <HAL_UARTEx_RxEventCallback>
 8012b24:	e002      	b.n	8012b2c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7ed fdae 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012b2c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d006      	beq.n	8012b42 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b38:	f003 0320 	and.w	r3, r3, #32
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f47f aecd 	bne.w	80128dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b48:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012b4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d049      	beq.n	8012be8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012b5a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d242      	bcs.n	8012be8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	3308      	adds	r3, #8
 8012b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6c:	e853 3f00 	ldrex	r3, [r3]
 8012b70:	623b      	str	r3, [r7, #32]
   return(result);
 8012b72:	6a3b      	ldr	r3, [r7, #32]
 8012b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012b78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	3308      	adds	r3, #8
 8012b82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012b86:	633a      	str	r2, [r7, #48]	; 0x30
 8012b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b8e:	e841 2300 	strex	r3, r2, [r1]
 8012b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d1e3      	bne.n	8012b62 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4a16      	ldr	r2, [pc, #88]	; (8012bf8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012b9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	e853 3f00 	ldrex	r3, [r3]
 8012bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f043 0320 	orr.w	r3, r3, #32
 8012bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012bc2:	61fb      	str	r3, [r7, #28]
 8012bc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bc6:	69b9      	ldr	r1, [r7, #24]
 8012bc8:	69fa      	ldr	r2, [r7, #28]
 8012bca:	e841 2300 	strex	r3, r2, [r1]
 8012bce:	617b      	str	r3, [r7, #20]
   return(result);
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d1e4      	bne.n	8012ba0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012bd6:	e007      	b.n	8012be8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	699a      	ldr	r2, [r3, #24]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f042 0208 	orr.w	r2, r2, #8
 8012be6:	619a      	str	r2, [r3, #24]
}
 8012be8:	bf00      	nop
 8012bea:	37b8      	adds	r7, #184	; 0xb8
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	effffffe 	.word	0xeffffffe
 8012bf4:	58000c00 	.word	0x58000c00
 8012bf8:	0801237d 	.word	0x0801237d

08012bfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012c04:	bf00      	nop
 8012c06:	370c      	adds	r7, #12
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr

08012c10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b083      	sub	sp, #12
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012c18:	bf00      	nop
 8012c1a:	370c      	adds	r7, #12
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c22:	4770      	bx	lr

08012c24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012c24:	b480      	push	{r7}
 8012c26:	b083      	sub	sp, #12
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012c2c:	bf00      	nop
 8012c2e:	370c      	adds	r7, #12
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b089      	sub	sp, #36	; 0x24
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d101      	bne.n	8012c4e <HAL_UARTEx_EnableStopMode+0x16>
 8012c4a:	2302      	movs	r3, #2
 8012c4c:	e021      	b.n	8012c92 <HAL_UARTEx_EnableStopMode+0x5a>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2201      	movs	r2, #1
 8012c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	e853 3f00 	ldrex	r3, [r3]
 8012c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	f043 0302 	orr.w	r3, r3, #2
 8012c6a:	61fb      	str	r3, [r7, #28]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	461a      	mov	r2, r3
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	61bb      	str	r3, [r7, #24]
 8012c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c78:	6979      	ldr	r1, [r7, #20]
 8012c7a:	69ba      	ldr	r2, [r7, #24]
 8012c7c:	e841 2300 	strex	r3, r2, [r1]
 8012c80:	613b      	str	r3, [r7, #16]
   return(result);
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1e6      	bne.n	8012c56 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c90:	2300      	movs	r3, #0
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3724      	adds	r7, #36	; 0x24
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr

08012c9e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012c9e:	b580      	push	{r7, lr}
 8012ca0:	b084      	sub	sp, #16
 8012ca2:	af00      	add	r7, sp, #0
 8012ca4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cac:	2b01      	cmp	r3, #1
 8012cae:	d101      	bne.n	8012cb4 <HAL_UARTEx_EnableFifoMode+0x16>
 8012cb0:	2302      	movs	r3, #2
 8012cb2:	e02b      	b.n	8012d0c <HAL_UARTEx_EnableFifoMode+0x6e>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2224      	movs	r2, #36	; 0x24
 8012cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f022 0201 	bic.w	r2, r2, #1
 8012cda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012ce2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012cea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	68fa      	ldr	r2, [r7, #12]
 8012cf2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f000 f8c3 	bl	8012e80 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2220      	movs	r2, #32
 8012cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	2200      	movs	r2, #0
 8012d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d0a:	2300      	movs	r3, #0
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3710      	adds	r7, #16
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012d14:	b480      	push	{r7}
 8012d16:	b085      	sub	sp, #20
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d101      	bne.n	8012d2a <HAL_UARTEx_DisableFifoMode+0x16>
 8012d26:	2302      	movs	r3, #2
 8012d28:	e027      	b.n	8012d7a <HAL_UARTEx_DisableFifoMode+0x66>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2224      	movs	r2, #36	; 0x24
 8012d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	681a      	ldr	r2, [r3, #0]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f022 0201 	bic.w	r2, r2, #1
 8012d50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012d58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	68fa      	ldr	r2, [r7, #12]
 8012d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2220      	movs	r2, #32
 8012d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2200      	movs	r2, #0
 8012d74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d78:	2300      	movs	r3, #0
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3714      	adds	r7, #20
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr

08012d86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b084      	sub	sp, #16
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
 8012d8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d101      	bne.n	8012d9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012d9a:	2302      	movs	r3, #2
 8012d9c:	e02d      	b.n	8012dfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2224      	movs	r2, #36	; 0x24
 8012daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	681a      	ldr	r2, [r3, #0]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f022 0201 	bic.w	r2, r2, #1
 8012dc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	689b      	ldr	r3, [r3, #8]
 8012dcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	683a      	ldr	r2, [r7, #0]
 8012dd6:	430a      	orrs	r2, r1
 8012dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f000 f850 	bl	8012e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	68fa      	ldr	r2, [r7, #12]
 8012de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2220      	movs	r2, #32
 8012dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2200      	movs	r2, #0
 8012df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012df8:	2300      	movs	r3, #0
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3710      	adds	r7, #16
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b084      	sub	sp, #16
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
 8012e0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d101      	bne.n	8012e1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012e16:	2302      	movs	r3, #2
 8012e18:	e02d      	b.n	8012e76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2224      	movs	r2, #36	; 0x24
 8012e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	f022 0201 	bic.w	r2, r2, #1
 8012e40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	689b      	ldr	r3, [r3, #8]
 8012e48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	683a      	ldr	r2, [r7, #0]
 8012e52:	430a      	orrs	r2, r1
 8012e54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f000 f812 	bl	8012e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2220      	movs	r2, #32
 8012e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3710      	adds	r7, #16
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
	...

08012e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012e80:	b480      	push	{r7}
 8012e82:	b085      	sub	sp, #20
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d108      	bne.n	8012ea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2201      	movs	r2, #1
 8012e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ea0:	e031      	b.n	8012f06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012ea2:	2310      	movs	r3, #16
 8012ea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012ea6:	2310      	movs	r3, #16
 8012ea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	689b      	ldr	r3, [r3, #8]
 8012eb0:	0e5b      	lsrs	r3, r3, #25
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	f003 0307 	and.w	r3, r3, #7
 8012eb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	689b      	ldr	r3, [r3, #8]
 8012ec0:	0f5b      	lsrs	r3, r3, #29
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	f003 0307 	and.w	r3, r3, #7
 8012ec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012eca:	7bbb      	ldrb	r3, [r7, #14]
 8012ecc:	7b3a      	ldrb	r2, [r7, #12]
 8012ece:	4911      	ldr	r1, [pc, #68]	; (8012f14 <UARTEx_SetNbDataToProcess+0x94>)
 8012ed0:	5c8a      	ldrb	r2, [r1, r2]
 8012ed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012ed6:	7b3a      	ldrb	r2, [r7, #12]
 8012ed8:	490f      	ldr	r1, [pc, #60]	; (8012f18 <UARTEx_SetNbDataToProcess+0x98>)
 8012eda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ee0:	b29a      	uxth	r2, r3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012ee8:	7bfb      	ldrb	r3, [r7, #15]
 8012eea:	7b7a      	ldrb	r2, [r7, #13]
 8012eec:	4909      	ldr	r1, [pc, #36]	; (8012f14 <UARTEx_SetNbDataToProcess+0x94>)
 8012eee:	5c8a      	ldrb	r2, [r1, r2]
 8012ef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012ef4:	7b7a      	ldrb	r2, [r7, #13]
 8012ef6:	4908      	ldr	r1, [pc, #32]	; (8012f18 <UARTEx_SetNbDataToProcess+0x98>)
 8012ef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012f06:	bf00      	nop
 8012f08:	3714      	adds	r7, #20
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop
 8012f14:	08017850 	.word	0x08017850
 8012f18:	08017858 	.word	0x08017858

08012f1c <__NVIC_SetPriority>:
 8012f1c:	b480      	push	{r7}
 8012f1e:	b083      	sub	sp, #12
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	4603      	mov	r3, r0
 8012f24:	6039      	str	r1, [r7, #0]
 8012f26:	80fb      	strh	r3, [r7, #6]
 8012f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	db0a      	blt.n	8012f46 <__NVIC_SetPriority+0x2a>
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	b2da      	uxtb	r2, r3
 8012f34:	490c      	ldr	r1, [pc, #48]	; (8012f68 <__NVIC_SetPriority+0x4c>)
 8012f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f3a:	0112      	lsls	r2, r2, #4
 8012f3c:	b2d2      	uxtb	r2, r2
 8012f3e:	440b      	add	r3, r1
 8012f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8012f44:	e00a      	b.n	8012f5c <__NVIC_SetPriority+0x40>
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	b2da      	uxtb	r2, r3
 8012f4a:	4908      	ldr	r1, [pc, #32]	; (8012f6c <__NVIC_SetPriority+0x50>)
 8012f4c:	88fb      	ldrh	r3, [r7, #6]
 8012f4e:	f003 030f 	and.w	r3, r3, #15
 8012f52:	3b04      	subs	r3, #4
 8012f54:	0112      	lsls	r2, r2, #4
 8012f56:	b2d2      	uxtb	r2, r2
 8012f58:	440b      	add	r3, r1
 8012f5a:	761a      	strb	r2, [r3, #24]
 8012f5c:	bf00      	nop
 8012f5e:	370c      	adds	r7, #12
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr
 8012f68:	e000e100 	.word	0xe000e100
 8012f6c:	e000ed00 	.word	0xe000ed00

08012f70 <SysTick_Handler>:
 8012f70:	b580      	push	{r7, lr}
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	4b05      	ldr	r3, [pc, #20]	; (8012f8c <SysTick_Handler+0x1c>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f002 fc92 	bl	80158a0 <xTaskGetSchedulerState>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d001      	beq.n	8012f86 <SysTick_Handler+0x16>
 8012f82:	f003 fab1 	bl	80164e8 <xPortSysTickHandler>
 8012f86:	bf00      	nop
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	e000e010 	.word	0xe000e010

08012f90 <SVC_Setup>:
 8012f90:	b580      	push	{r7, lr}
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	2100      	movs	r1, #0
 8012f96:	f06f 0004 	mvn.w	r0, #4
 8012f9a:	f7ff ffbf 	bl	8012f1c <__NVIC_SetPriority>
 8012f9e:	bf00      	nop
 8012fa0:	bd80      	pop	{r7, pc}
	...

08012fa4 <osKernelInitialize>:
 8012fa4:	b480      	push	{r7}
 8012fa6:	b083      	sub	sp, #12
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	f3ef 8305 	mrs	r3, IPSR
 8012fae:	603b      	str	r3, [r7, #0]
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d003      	beq.n	8012fbe <osKernelInitialize+0x1a>
 8012fb6:	f06f 0305 	mvn.w	r3, #5
 8012fba:	607b      	str	r3, [r7, #4]
 8012fbc:	e00c      	b.n	8012fd8 <osKernelInitialize+0x34>
 8012fbe:	4b0a      	ldr	r3, [pc, #40]	; (8012fe8 <osKernelInitialize+0x44>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d105      	bne.n	8012fd2 <osKernelInitialize+0x2e>
 8012fc6:	4b08      	ldr	r3, [pc, #32]	; (8012fe8 <osKernelInitialize+0x44>)
 8012fc8:	2201      	movs	r2, #1
 8012fca:	601a      	str	r2, [r3, #0]
 8012fcc:	2300      	movs	r3, #0
 8012fce:	607b      	str	r3, [r7, #4]
 8012fd0:	e002      	b.n	8012fd8 <osKernelInitialize+0x34>
 8012fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fd6:	607b      	str	r3, [r7, #4]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	370c      	adds	r7, #12
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe4:	4770      	bx	lr
 8012fe6:	bf00      	nop
 8012fe8:	24001130 	.word	0x24001130

08012fec <osKernelStart>:
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	f3ef 8305 	mrs	r3, IPSR
 8012ff6:	603b      	str	r3, [r7, #0]
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d003      	beq.n	8013006 <osKernelStart+0x1a>
 8012ffe:	f06f 0305 	mvn.w	r3, #5
 8013002:	607b      	str	r3, [r7, #4]
 8013004:	e010      	b.n	8013028 <osKernelStart+0x3c>
 8013006:	4b0b      	ldr	r3, [pc, #44]	; (8013034 <osKernelStart+0x48>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	2b01      	cmp	r3, #1
 801300c:	d109      	bne.n	8013022 <osKernelStart+0x36>
 801300e:	f7ff ffbf 	bl	8012f90 <SVC_Setup>
 8013012:	4b08      	ldr	r3, [pc, #32]	; (8013034 <osKernelStart+0x48>)
 8013014:	2202      	movs	r2, #2
 8013016:	601a      	str	r2, [r3, #0]
 8013018:	f001 ff54 	bl	8014ec4 <vTaskStartScheduler>
 801301c:	2300      	movs	r3, #0
 801301e:	607b      	str	r3, [r7, #4]
 8013020:	e002      	b.n	8013028 <osKernelStart+0x3c>
 8013022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013026:	607b      	str	r3, [r7, #4]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	4618      	mov	r0, r3
 801302c:	3708      	adds	r7, #8
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
 8013032:	bf00      	nop
 8013034:	24001130 	.word	0x24001130

08013038 <osThreadNew>:
 8013038:	b580      	push	{r7, lr}
 801303a:	b08e      	sub	sp, #56	; 0x38
 801303c:	af04      	add	r7, sp, #16
 801303e:	60f8      	str	r0, [r7, #12]
 8013040:	60b9      	str	r1, [r7, #8]
 8013042:	607a      	str	r2, [r7, #4]
 8013044:	2300      	movs	r3, #0
 8013046:	613b      	str	r3, [r7, #16]
 8013048:	f3ef 8305 	mrs	r3, IPSR
 801304c:	617b      	str	r3, [r7, #20]
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d17e      	bne.n	8013152 <osThreadNew+0x11a>
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d07b      	beq.n	8013152 <osThreadNew+0x11a>
 801305a:	2380      	movs	r3, #128	; 0x80
 801305c:	623b      	str	r3, [r7, #32]
 801305e:	2318      	movs	r3, #24
 8013060:	61fb      	str	r3, [r7, #28]
 8013062:	2300      	movs	r3, #0
 8013064:	627b      	str	r3, [r7, #36]	; 0x24
 8013066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801306a:	61bb      	str	r3, [r7, #24]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d045      	beq.n	80130fe <osThreadNew+0xc6>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d002      	beq.n	8013080 <osThreadNew+0x48>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	627b      	str	r3, [r7, #36]	; 0x24
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	699b      	ldr	r3, [r3, #24]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d002      	beq.n	801308e <osThreadNew+0x56>
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	699b      	ldr	r3, [r3, #24]
 801308c:	61fb      	str	r3, [r7, #28]
 801308e:	69fb      	ldr	r3, [r7, #28]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d008      	beq.n	80130a6 <osThreadNew+0x6e>
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	2b38      	cmp	r3, #56	; 0x38
 8013098:	d805      	bhi.n	80130a6 <osThreadNew+0x6e>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	f003 0301 	and.w	r3, r3, #1
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <osThreadNew+0x72>
 80130a6:	2300      	movs	r3, #0
 80130a8:	e054      	b.n	8013154 <osThreadNew+0x11c>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	695b      	ldr	r3, [r3, #20]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d003      	beq.n	80130ba <osThreadNew+0x82>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	695b      	ldr	r3, [r3, #20]
 80130b6:	089b      	lsrs	r3, r3, #2
 80130b8:	623b      	str	r3, [r7, #32]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	689b      	ldr	r3, [r3, #8]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d00e      	beq.n	80130e0 <osThreadNew+0xa8>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	68db      	ldr	r3, [r3, #12]
 80130c6:	2b5b      	cmp	r3, #91	; 0x5b
 80130c8:	d90a      	bls.n	80130e0 <osThreadNew+0xa8>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	691b      	ldr	r3, [r3, #16]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d006      	beq.n	80130e0 <osThreadNew+0xa8>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	695b      	ldr	r3, [r3, #20]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d002      	beq.n	80130e0 <osThreadNew+0xa8>
 80130da:	2301      	movs	r3, #1
 80130dc:	61bb      	str	r3, [r7, #24]
 80130de:	e010      	b.n	8013102 <osThreadNew+0xca>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	689b      	ldr	r3, [r3, #8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d10c      	bne.n	8013102 <osThreadNew+0xca>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	68db      	ldr	r3, [r3, #12]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d108      	bne.n	8013102 <osThreadNew+0xca>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	691b      	ldr	r3, [r3, #16]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d104      	bne.n	8013102 <osThreadNew+0xca>
 80130f8:	2300      	movs	r3, #0
 80130fa:	61bb      	str	r3, [r7, #24]
 80130fc:	e001      	b.n	8013102 <osThreadNew+0xca>
 80130fe:	2300      	movs	r3, #0
 8013100:	61bb      	str	r3, [r7, #24]
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d110      	bne.n	801312a <osThreadNew+0xf2>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	691b      	ldr	r3, [r3, #16]
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	6892      	ldr	r2, [r2, #8]
 8013110:	9202      	str	r2, [sp, #8]
 8013112:	9301      	str	r3, [sp, #4]
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	9300      	str	r3, [sp, #0]
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	6a3a      	ldr	r2, [r7, #32]
 801311c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801311e:	68f8      	ldr	r0, [r7, #12]
 8013120:	f001 fbe0 	bl	80148e4 <xTaskCreateStatic>
 8013124:	4603      	mov	r3, r0
 8013126:	613b      	str	r3, [r7, #16]
 8013128:	e013      	b.n	8013152 <osThreadNew+0x11a>
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d110      	bne.n	8013152 <osThreadNew+0x11a>
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	b29a      	uxth	r2, r3
 8013134:	f107 0310 	add.w	r3, r7, #16
 8013138:	9301      	str	r3, [sp, #4]
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	9300      	str	r3, [sp, #0]
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013142:	68f8      	ldr	r0, [r7, #12]
 8013144:	f001 fc2b 	bl	801499e <xTaskCreate>
 8013148:	4603      	mov	r3, r0
 801314a:	2b01      	cmp	r3, #1
 801314c:	d001      	beq.n	8013152 <osThreadNew+0x11a>
 801314e:	2300      	movs	r3, #0
 8013150:	613b      	str	r3, [r7, #16]
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	4618      	mov	r0, r3
 8013156:	3728      	adds	r7, #40	; 0x28
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <osThreadYield>:
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	f3ef 8305 	mrs	r3, IPSR
 8013166:	603b      	str	r3, [r7, #0]
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d003      	beq.n	8013176 <osThreadYield+0x1a>
 801316e:	f06f 0305 	mvn.w	r3, #5
 8013172:	607b      	str	r3, [r7, #4]
 8013174:	e009      	b.n	801318a <osThreadYield+0x2e>
 8013176:	2300      	movs	r3, #0
 8013178:	607b      	str	r3, [r7, #4]
 801317a:	4b07      	ldr	r3, [pc, #28]	; (8013198 <osThreadYield+0x3c>)
 801317c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013180:	601a      	str	r2, [r3, #0]
 8013182:	f3bf 8f4f 	dsb	sy
 8013186:	f3bf 8f6f 	isb	sy
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	4618      	mov	r0, r3
 801318e:	370c      	adds	r7, #12
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr
 8013198:	e000ed04 	.word	0xe000ed04

0801319c <osThreadSuspend>:
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	613b      	str	r3, [r7, #16]
 80131a8:	f3ef 8305 	mrs	r3, IPSR
 80131ac:	60fb      	str	r3, [r7, #12]
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d003      	beq.n	80131bc <osThreadSuspend+0x20>
 80131b4:	f06f 0305 	mvn.w	r3, #5
 80131b8:	617b      	str	r3, [r7, #20]
 80131ba:	e00b      	b.n	80131d4 <osThreadSuspend+0x38>
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d103      	bne.n	80131ca <osThreadSuspend+0x2e>
 80131c2:	f06f 0303 	mvn.w	r3, #3
 80131c6:	617b      	str	r3, [r7, #20]
 80131c8:	e004      	b.n	80131d4 <osThreadSuspend+0x38>
 80131ca:	2300      	movs	r3, #0
 80131cc:	617b      	str	r3, [r7, #20]
 80131ce:	6938      	ldr	r0, [r7, #16]
 80131d0:	f001 fd5e 	bl	8014c90 <vTaskSuspend>
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	4618      	mov	r0, r3
 80131d8:	3718      	adds	r7, #24
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}

080131de <osDelay>:
 80131de:	b580      	push	{r7, lr}
 80131e0:	b084      	sub	sp, #16
 80131e2:	af00      	add	r7, sp, #0
 80131e4:	6078      	str	r0, [r7, #4]
 80131e6:	f3ef 8305 	mrs	r3, IPSR
 80131ea:	60bb      	str	r3, [r7, #8]
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d003      	beq.n	80131fa <osDelay+0x1c>
 80131f2:	f06f 0305 	mvn.w	r3, #5
 80131f6:	60fb      	str	r3, [r7, #12]
 80131f8:	e007      	b.n	801320a <osDelay+0x2c>
 80131fa:	2300      	movs	r3, #0
 80131fc:	60fb      	str	r3, [r7, #12]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d002      	beq.n	801320a <osDelay+0x2c>
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f001 fd0f 	bl	8014c28 <vTaskDelay>
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	4618      	mov	r0, r3
 801320e:	3710      	adds	r7, #16
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <osEventFlagsNew>:
 8013214:	b580      	push	{r7, lr}
 8013216:	b086      	sub	sp, #24
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	2300      	movs	r3, #0
 801321e:	617b      	str	r3, [r7, #20]
 8013220:	f3ef 8305 	mrs	r3, IPSR
 8013224:	60fb      	str	r3, [r7, #12]
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d12d      	bne.n	8013288 <osEventFlagsNew+0x74>
 801322c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013230:	613b      	str	r3, [r7, #16]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d015      	beq.n	8013264 <osEventFlagsNew+0x50>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	689b      	ldr	r3, [r3, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d006      	beq.n	801324e <osEventFlagsNew+0x3a>
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	68db      	ldr	r3, [r3, #12]
 8013244:	2b1f      	cmp	r3, #31
 8013246:	d902      	bls.n	801324e <osEventFlagsNew+0x3a>
 8013248:	2301      	movs	r3, #1
 801324a:	613b      	str	r3, [r7, #16]
 801324c:	e00c      	b.n	8013268 <osEventFlagsNew+0x54>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	689b      	ldr	r3, [r3, #8]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d108      	bne.n	8013268 <osEventFlagsNew+0x54>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	68db      	ldr	r3, [r3, #12]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d104      	bne.n	8013268 <osEventFlagsNew+0x54>
 801325e:	2300      	movs	r3, #0
 8013260:	613b      	str	r3, [r7, #16]
 8013262:	e001      	b.n	8013268 <osEventFlagsNew+0x54>
 8013264:	2300      	movs	r3, #0
 8013266:	613b      	str	r3, [r7, #16]
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	2b01      	cmp	r3, #1
 801326c:	d106      	bne.n	801327c <osEventFlagsNew+0x68>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	689b      	ldr	r3, [r3, #8]
 8013272:	4618      	mov	r0, r3
 8013274:	f000 fa70 	bl	8013758 <xEventGroupCreateStatic>
 8013278:	6178      	str	r0, [r7, #20]
 801327a:	e005      	b.n	8013288 <osEventFlagsNew+0x74>
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d102      	bne.n	8013288 <osEventFlagsNew+0x74>
 8013282:	f000 faa0 	bl	80137c6 <xEventGroupCreate>
 8013286:	6178      	str	r0, [r7, #20]
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	4618      	mov	r0, r3
 801328c:	3718      	adds	r7, #24
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
	...

08013294 <osEventFlagsSet>:
 8013294:	b580      	push	{r7, lr}
 8013296:	b086      	sub	sp, #24
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	613b      	str	r3, [r7, #16]
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d004      	beq.n	80132b2 <osEventFlagsSet+0x1e>
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d003      	beq.n	80132ba <osEventFlagsSet+0x26>
 80132b2:	f06f 0303 	mvn.w	r3, #3
 80132b6:	617b      	str	r3, [r7, #20]
 80132b8:	e028      	b.n	801330c <osEventFlagsSet+0x78>
 80132ba:	f3ef 8305 	mrs	r3, IPSR
 80132be:	60fb      	str	r3, [r7, #12]
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d01d      	beq.n	8013302 <osEventFlagsSet+0x6e>
 80132c6:	2300      	movs	r3, #0
 80132c8:	60bb      	str	r3, [r7, #8]
 80132ca:	f107 0308 	add.w	r3, r7, #8
 80132ce:	461a      	mov	r2, r3
 80132d0:	6839      	ldr	r1, [r7, #0]
 80132d2:	6938      	ldr	r0, [r7, #16]
 80132d4:	f000 fc98 	bl	8013c08 <xEventGroupSetBitsFromISR>
 80132d8:	4603      	mov	r3, r0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d103      	bne.n	80132e6 <osEventFlagsSet+0x52>
 80132de:	f06f 0302 	mvn.w	r3, #2
 80132e2:	617b      	str	r3, [r7, #20]
 80132e4:	e012      	b.n	801330c <osEventFlagsSet+0x78>
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	617b      	str	r3, [r7, #20]
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d00d      	beq.n	801330c <osEventFlagsSet+0x78>
 80132f0:	4b09      	ldr	r3, [pc, #36]	; (8013318 <osEventFlagsSet+0x84>)
 80132f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132f6:	601a      	str	r2, [r3, #0]
 80132f8:	f3bf 8f4f 	dsb	sy
 80132fc:	f3bf 8f6f 	isb	sy
 8013300:	e004      	b.n	801330c <osEventFlagsSet+0x78>
 8013302:	6839      	ldr	r1, [r7, #0]
 8013304:	6938      	ldr	r0, [r7, #16]
 8013306:	f000 fbb7 	bl	8013a78 <xEventGroupSetBits>
 801330a:	6178      	str	r0, [r7, #20]
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	4618      	mov	r0, r3
 8013310:	3718      	adds	r7, #24
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	e000ed04 	.word	0xe000ed04

0801331c <osEventFlagsClear>:
 801331c:	b580      	push	{r7, lr}
 801331e:	b086      	sub	sp, #24
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	613b      	str	r3, [r7, #16]
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d004      	beq.n	801333a <osEventFlagsClear+0x1e>
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013336:	2b00      	cmp	r3, #0
 8013338:	d003      	beq.n	8013342 <osEventFlagsClear+0x26>
 801333a:	f06f 0303 	mvn.w	r3, #3
 801333e:	617b      	str	r3, [r7, #20]
 8013340:	e019      	b.n	8013376 <osEventFlagsClear+0x5a>
 8013342:	f3ef 8305 	mrs	r3, IPSR
 8013346:	60fb      	str	r3, [r7, #12]
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d00e      	beq.n	801336c <osEventFlagsClear+0x50>
 801334e:	6938      	ldr	r0, [r7, #16]
 8013350:	f000 fb6e 	bl	8013a30 <xEventGroupGetBitsFromISR>
 8013354:	6178      	str	r0, [r7, #20]
 8013356:	6839      	ldr	r1, [r7, #0]
 8013358:	6938      	ldr	r0, [r7, #16]
 801335a:	f000 fb55 	bl	8013a08 <xEventGroupClearBitsFromISR>
 801335e:	4603      	mov	r3, r0
 8013360:	2b00      	cmp	r3, #0
 8013362:	d108      	bne.n	8013376 <osEventFlagsClear+0x5a>
 8013364:	f06f 0302 	mvn.w	r3, #2
 8013368:	617b      	str	r3, [r7, #20]
 801336a:	e004      	b.n	8013376 <osEventFlagsClear+0x5a>
 801336c:	6839      	ldr	r1, [r7, #0]
 801336e:	6938      	ldr	r0, [r7, #16]
 8013370:	f000 fb12 	bl	8013998 <xEventGroupClearBits>
 8013374:	6178      	str	r0, [r7, #20]
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	4618      	mov	r0, r3
 801337a:	3718      	adds	r7, #24
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <osEventFlagsGet>:
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	613b      	str	r3, [r7, #16]
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d102      	bne.n	8013398 <osEventFlagsGet+0x18>
 8013392:	2300      	movs	r3, #0
 8013394:	617b      	str	r3, [r7, #20]
 8013396:	e00f      	b.n	80133b8 <osEventFlagsGet+0x38>
 8013398:	f3ef 8305 	mrs	r3, IPSR
 801339c:	60fb      	str	r3, [r7, #12]
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d004      	beq.n	80133ae <osEventFlagsGet+0x2e>
 80133a4:	6938      	ldr	r0, [r7, #16]
 80133a6:	f000 fb43 	bl	8013a30 <xEventGroupGetBitsFromISR>
 80133aa:	6178      	str	r0, [r7, #20]
 80133ac:	e004      	b.n	80133b8 <osEventFlagsGet+0x38>
 80133ae:	2100      	movs	r1, #0
 80133b0:	6938      	ldr	r0, [r7, #16]
 80133b2:	f000 faf1 	bl	8013998 <xEventGroupClearBits>
 80133b6:	6178      	str	r0, [r7, #20]
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	4618      	mov	r0, r3
 80133bc:	3718      	adds	r7, #24
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}

080133c2 <osEventFlagsWait>:
 80133c2:	b580      	push	{r7, lr}
 80133c4:	b08c      	sub	sp, #48	; 0x30
 80133c6:	af02      	add	r7, sp, #8
 80133c8:	60f8      	str	r0, [r7, #12]
 80133ca:	60b9      	str	r1, [r7, #8]
 80133cc:	607a      	str	r2, [r7, #4]
 80133ce:	603b      	str	r3, [r7, #0]
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	61bb      	str	r3, [r7, #24]
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d004      	beq.n	80133e4 <osEventFlagsWait+0x22>
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d003      	beq.n	80133ec <osEventFlagsWait+0x2a>
 80133e4:	f06f 0303 	mvn.w	r3, #3
 80133e8:	61fb      	str	r3, [r7, #28]
 80133ea:	e04b      	b.n	8013484 <osEventFlagsWait+0xc2>
 80133ec:	f3ef 8305 	mrs	r3, IPSR
 80133f0:	617b      	str	r3, [r7, #20]
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d003      	beq.n	8013400 <osEventFlagsWait+0x3e>
 80133f8:	f06f 0305 	mvn.w	r3, #5
 80133fc:	61fb      	str	r3, [r7, #28]
 80133fe:	e041      	b.n	8013484 <osEventFlagsWait+0xc2>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f003 0301 	and.w	r3, r3, #1
 8013406:	2b00      	cmp	r3, #0
 8013408:	d002      	beq.n	8013410 <osEventFlagsWait+0x4e>
 801340a:	2301      	movs	r3, #1
 801340c:	627b      	str	r3, [r7, #36]	; 0x24
 801340e:	e001      	b.n	8013414 <osEventFlagsWait+0x52>
 8013410:	2300      	movs	r3, #0
 8013412:	627b      	str	r3, [r7, #36]	; 0x24
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f003 0302 	and.w	r3, r3, #2
 801341a:	2b00      	cmp	r3, #0
 801341c:	d002      	beq.n	8013424 <osEventFlagsWait+0x62>
 801341e:	2300      	movs	r3, #0
 8013420:	623b      	str	r3, [r7, #32]
 8013422:	e001      	b.n	8013428 <osEventFlagsWait+0x66>
 8013424:	2301      	movs	r3, #1
 8013426:	623b      	str	r3, [r7, #32]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	9300      	str	r3, [sp, #0]
 801342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342e:	6a3a      	ldr	r2, [r7, #32]
 8013430:	68b9      	ldr	r1, [r7, #8]
 8013432:	69b8      	ldr	r0, [r7, #24]
 8013434:	f000 f9e2 	bl	80137fc <xEventGroupWaitBits>
 8013438:	61f8      	str	r0, [r7, #28]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f003 0301 	and.w	r3, r3, #1
 8013440:	2b00      	cmp	r3, #0
 8013442:	d010      	beq.n	8013466 <osEventFlagsWait+0xa4>
 8013444:	68ba      	ldr	r2, [r7, #8]
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	4013      	ands	r3, r2
 801344a:	68ba      	ldr	r2, [r7, #8]
 801344c:	429a      	cmp	r2, r3
 801344e:	d019      	beq.n	8013484 <osEventFlagsWait+0xc2>
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d003      	beq.n	801345e <osEventFlagsWait+0x9c>
 8013456:	f06f 0301 	mvn.w	r3, #1
 801345a:	61fb      	str	r3, [r7, #28]
 801345c:	e012      	b.n	8013484 <osEventFlagsWait+0xc2>
 801345e:	f06f 0302 	mvn.w	r3, #2
 8013462:	61fb      	str	r3, [r7, #28]
 8013464:	e00e      	b.n	8013484 <osEventFlagsWait+0xc2>
 8013466:	68ba      	ldr	r2, [r7, #8]
 8013468:	69fb      	ldr	r3, [r7, #28]
 801346a:	4013      	ands	r3, r2
 801346c:	2b00      	cmp	r3, #0
 801346e:	d109      	bne.n	8013484 <osEventFlagsWait+0xc2>
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d003      	beq.n	801347e <osEventFlagsWait+0xbc>
 8013476:	f06f 0301 	mvn.w	r3, #1
 801347a:	61fb      	str	r3, [r7, #28]
 801347c:	e002      	b.n	8013484 <osEventFlagsWait+0xc2>
 801347e:	f06f 0302 	mvn.w	r3, #2
 8013482:	61fb      	str	r3, [r7, #28]
 8013484:	69fb      	ldr	r3, [r7, #28]
 8013486:	4618      	mov	r0, r3
 8013488:	3728      	adds	r7, #40	; 0x28
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}

0801348e <osMessageQueueNew>:
 801348e:	b580      	push	{r7, lr}
 8013490:	b08a      	sub	sp, #40	; 0x28
 8013492:	af02      	add	r7, sp, #8
 8013494:	60f8      	str	r0, [r7, #12]
 8013496:	60b9      	str	r1, [r7, #8]
 8013498:	607a      	str	r2, [r7, #4]
 801349a:	2300      	movs	r3, #0
 801349c:	61fb      	str	r3, [r7, #28]
 801349e:	f3ef 8305 	mrs	r3, IPSR
 80134a2:	613b      	str	r3, [r7, #16]
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d15f      	bne.n	801356a <osMessageQueueNew+0xdc>
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d05c      	beq.n	801356a <osMessageQueueNew+0xdc>
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d059      	beq.n	801356a <osMessageQueueNew+0xdc>
 80134b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134ba:	61bb      	str	r3, [r7, #24]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d029      	beq.n	8013516 <osMessageQueueNew+0x88>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	689b      	ldr	r3, [r3, #8]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d012      	beq.n	80134f0 <osMessageQueueNew+0x62>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	68db      	ldr	r3, [r3, #12]
 80134ce:	2b4f      	cmp	r3, #79	; 0x4f
 80134d0:	d90e      	bls.n	80134f0 <osMessageQueueNew+0x62>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	691b      	ldr	r3, [r3, #16]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d00a      	beq.n	80134f0 <osMessageQueueNew+0x62>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	695a      	ldr	r2, [r3, #20]
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	68b9      	ldr	r1, [r7, #8]
 80134e2:	fb01 f303 	mul.w	r3, r1, r3
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d302      	bcc.n	80134f0 <osMessageQueueNew+0x62>
 80134ea:	2301      	movs	r3, #1
 80134ec:	61bb      	str	r3, [r7, #24]
 80134ee:	e014      	b.n	801351a <osMessageQueueNew+0x8c>
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	689b      	ldr	r3, [r3, #8]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d110      	bne.n	801351a <osMessageQueueNew+0x8c>
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	68db      	ldr	r3, [r3, #12]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d10c      	bne.n	801351a <osMessageQueueNew+0x8c>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	691b      	ldr	r3, [r3, #16]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d108      	bne.n	801351a <osMessageQueueNew+0x8c>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	695b      	ldr	r3, [r3, #20]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d104      	bne.n	801351a <osMessageQueueNew+0x8c>
 8013510:	2300      	movs	r3, #0
 8013512:	61bb      	str	r3, [r7, #24]
 8013514:	e001      	b.n	801351a <osMessageQueueNew+0x8c>
 8013516:	2300      	movs	r3, #0
 8013518:	61bb      	str	r3, [r7, #24]
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	2b01      	cmp	r3, #1
 801351e:	d10b      	bne.n	8013538 <osMessageQueueNew+0xaa>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	691a      	ldr	r2, [r3, #16]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	689b      	ldr	r3, [r3, #8]
 8013528:	2100      	movs	r1, #0
 801352a:	9100      	str	r1, [sp, #0]
 801352c:	68b9      	ldr	r1, [r7, #8]
 801352e:	68f8      	ldr	r0, [r7, #12]
 8013530:	f000 fc9a 	bl	8013e68 <xQueueGenericCreateStatic>
 8013534:	61f8      	str	r0, [r7, #28]
 8013536:	e008      	b.n	801354a <osMessageQueueNew+0xbc>
 8013538:	69bb      	ldr	r3, [r7, #24]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d105      	bne.n	801354a <osMessageQueueNew+0xbc>
 801353e:	2200      	movs	r2, #0
 8013540:	68b9      	ldr	r1, [r7, #8]
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f000 fd08 	bl	8013f58 <xQueueGenericCreate>
 8013548:	61f8      	str	r0, [r7, #28]
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d00c      	beq.n	801356a <osMessageQueueNew+0xdc>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d003      	beq.n	801355e <osMessageQueueNew+0xd0>
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	617b      	str	r3, [r7, #20]
 801355c:	e001      	b.n	8013562 <osMessageQueueNew+0xd4>
 801355e:	2300      	movs	r3, #0
 8013560:	617b      	str	r3, [r7, #20]
 8013562:	6979      	ldr	r1, [r7, #20]
 8013564:	69f8      	ldr	r0, [r7, #28]
 8013566:	f001 f95f 	bl	8014828 <vQueueAddToRegistry>
 801356a:	69fb      	ldr	r3, [r7, #28]
 801356c:	4618      	mov	r0, r3
 801356e:	3720      	adds	r7, #32
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}

08013574 <osMessageQueuePut>:
 8013574:	b580      	push	{r7, lr}
 8013576:	b088      	sub	sp, #32
 8013578:	af00      	add	r7, sp, #0
 801357a:	60f8      	str	r0, [r7, #12]
 801357c:	60b9      	str	r1, [r7, #8]
 801357e:	603b      	str	r3, [r7, #0]
 8013580:	4613      	mov	r3, r2
 8013582:	71fb      	strb	r3, [r7, #7]
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	61bb      	str	r3, [r7, #24]
 8013588:	2300      	movs	r3, #0
 801358a:	61fb      	str	r3, [r7, #28]
 801358c:	f3ef 8305 	mrs	r3, IPSR
 8013590:	617b      	str	r3, [r7, #20]
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d028      	beq.n	80135ea <osMessageQueuePut+0x76>
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d005      	beq.n	80135aa <osMessageQueuePut+0x36>
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d002      	beq.n	80135aa <osMessageQueuePut+0x36>
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d003      	beq.n	80135b2 <osMessageQueuePut+0x3e>
 80135aa:	f06f 0303 	mvn.w	r3, #3
 80135ae:	61fb      	str	r3, [r7, #28]
 80135b0:	e038      	b.n	8013624 <osMessageQueuePut+0xb0>
 80135b2:	2300      	movs	r3, #0
 80135b4:	613b      	str	r3, [r7, #16]
 80135b6:	f107 0210 	add.w	r2, r7, #16
 80135ba:	2300      	movs	r3, #0
 80135bc:	68b9      	ldr	r1, [r7, #8]
 80135be:	69b8      	ldr	r0, [r7, #24]
 80135c0:	f000 fe26 	bl	8014210 <xQueueGenericSendFromISR>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	d003      	beq.n	80135d2 <osMessageQueuePut+0x5e>
 80135ca:	f06f 0302 	mvn.w	r3, #2
 80135ce:	61fb      	str	r3, [r7, #28]
 80135d0:	e028      	b.n	8013624 <osMessageQueuePut+0xb0>
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d025      	beq.n	8013624 <osMessageQueuePut+0xb0>
 80135d8:	4b15      	ldr	r3, [pc, #84]	; (8013630 <osMessageQueuePut+0xbc>)
 80135da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135de:	601a      	str	r2, [r3, #0]
 80135e0:	f3bf 8f4f 	dsb	sy
 80135e4:	f3bf 8f6f 	isb	sy
 80135e8:	e01c      	b.n	8013624 <osMessageQueuePut+0xb0>
 80135ea:	69bb      	ldr	r3, [r7, #24]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d002      	beq.n	80135f6 <osMessageQueuePut+0x82>
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d103      	bne.n	80135fe <osMessageQueuePut+0x8a>
 80135f6:	f06f 0303 	mvn.w	r3, #3
 80135fa:	61fb      	str	r3, [r7, #28]
 80135fc:	e012      	b.n	8013624 <osMessageQueuePut+0xb0>
 80135fe:	2300      	movs	r3, #0
 8013600:	683a      	ldr	r2, [r7, #0]
 8013602:	68b9      	ldr	r1, [r7, #8]
 8013604:	69b8      	ldr	r0, [r7, #24]
 8013606:	f000 fd05 	bl	8014014 <xQueueGenericSend>
 801360a:	4603      	mov	r3, r0
 801360c:	2b01      	cmp	r3, #1
 801360e:	d009      	beq.n	8013624 <osMessageQueuePut+0xb0>
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d003      	beq.n	801361e <osMessageQueuePut+0xaa>
 8013616:	f06f 0301 	mvn.w	r3, #1
 801361a:	61fb      	str	r3, [r7, #28]
 801361c:	e002      	b.n	8013624 <osMessageQueuePut+0xb0>
 801361e:	f06f 0302 	mvn.w	r3, #2
 8013622:	61fb      	str	r3, [r7, #28]
 8013624:	69fb      	ldr	r3, [r7, #28]
 8013626:	4618      	mov	r0, r3
 8013628:	3720      	adds	r7, #32
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	e000ed04 	.word	0xe000ed04

08013634 <osMessageQueueGet>:
 8013634:	b580      	push	{r7, lr}
 8013636:	b088      	sub	sp, #32
 8013638:	af00      	add	r7, sp, #0
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	60b9      	str	r1, [r7, #8]
 801363e:	607a      	str	r2, [r7, #4]
 8013640:	603b      	str	r3, [r7, #0]
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	61bb      	str	r3, [r7, #24]
 8013646:	2300      	movs	r3, #0
 8013648:	61fb      	str	r3, [r7, #28]
 801364a:	f3ef 8305 	mrs	r3, IPSR
 801364e:	617b      	str	r3, [r7, #20]
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d028      	beq.n	80136a8 <osMessageQueueGet+0x74>
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d005      	beq.n	8013668 <osMessageQueueGet+0x34>
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d002      	beq.n	8013668 <osMessageQueueGet+0x34>
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d003      	beq.n	8013670 <osMessageQueueGet+0x3c>
 8013668:	f06f 0303 	mvn.w	r3, #3
 801366c:	61fb      	str	r3, [r7, #28]
 801366e:	e037      	b.n	80136e0 <osMessageQueueGet+0xac>
 8013670:	2300      	movs	r3, #0
 8013672:	613b      	str	r3, [r7, #16]
 8013674:	f107 0310 	add.w	r3, r7, #16
 8013678:	461a      	mov	r2, r3
 801367a:	68b9      	ldr	r1, [r7, #8]
 801367c:	69b8      	ldr	r0, [r7, #24]
 801367e:	f000 ff43 	bl	8014508 <xQueueReceiveFromISR>
 8013682:	4603      	mov	r3, r0
 8013684:	2b01      	cmp	r3, #1
 8013686:	d003      	beq.n	8013690 <osMessageQueueGet+0x5c>
 8013688:	f06f 0302 	mvn.w	r3, #2
 801368c:	61fb      	str	r3, [r7, #28]
 801368e:	e027      	b.n	80136e0 <osMessageQueueGet+0xac>
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d024      	beq.n	80136e0 <osMessageQueueGet+0xac>
 8013696:	4b15      	ldr	r3, [pc, #84]	; (80136ec <osMessageQueueGet+0xb8>)
 8013698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801369c:	601a      	str	r2, [r3, #0]
 801369e:	f3bf 8f4f 	dsb	sy
 80136a2:	f3bf 8f6f 	isb	sy
 80136a6:	e01b      	b.n	80136e0 <osMessageQueueGet+0xac>
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d002      	beq.n	80136b4 <osMessageQueueGet+0x80>
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d103      	bne.n	80136bc <osMessageQueueGet+0x88>
 80136b4:	f06f 0303 	mvn.w	r3, #3
 80136b8:	61fb      	str	r3, [r7, #28]
 80136ba:	e011      	b.n	80136e0 <osMessageQueueGet+0xac>
 80136bc:	683a      	ldr	r2, [r7, #0]
 80136be:	68b9      	ldr	r1, [r7, #8]
 80136c0:	69b8      	ldr	r0, [r7, #24]
 80136c2:	f000 fe41 	bl	8014348 <xQueueReceive>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d009      	beq.n	80136e0 <osMessageQueueGet+0xac>
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d003      	beq.n	80136da <osMessageQueueGet+0xa6>
 80136d2:	f06f 0301 	mvn.w	r3, #1
 80136d6:	61fb      	str	r3, [r7, #28]
 80136d8:	e002      	b.n	80136e0 <osMessageQueueGet+0xac>
 80136da:	f06f 0302 	mvn.w	r3, #2
 80136de:	61fb      	str	r3, [r7, #28]
 80136e0:	69fb      	ldr	r3, [r7, #28]
 80136e2:	4618      	mov	r0, r3
 80136e4:	3720      	adds	r7, #32
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	e000ed04 	.word	0xe000ed04

080136f0 <vApplicationGetIdleTaskMemory>:
 80136f0:	b480      	push	{r7}
 80136f2:	b085      	sub	sp, #20
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	4a07      	ldr	r2, [pc, #28]	; (801371c <vApplicationGetIdleTaskMemory+0x2c>)
 8013700:	601a      	str	r2, [r3, #0]
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	4a06      	ldr	r2, [pc, #24]	; (8013720 <vApplicationGetIdleTaskMemory+0x30>)
 8013706:	601a      	str	r2, [r3, #0]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2280      	movs	r2, #128	; 0x80
 801370c:	601a      	str	r2, [r3, #0]
 801370e:	bf00      	nop
 8013710:	3714      	adds	r7, #20
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	24001134 	.word	0x24001134
 8013720:	24001190 	.word	0x24001190

08013724 <vApplicationGetTimerTaskMemory>:
 8013724:	b480      	push	{r7}
 8013726:	b085      	sub	sp, #20
 8013728:	af00      	add	r7, sp, #0
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	607a      	str	r2, [r7, #4]
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	4a07      	ldr	r2, [pc, #28]	; (8013750 <vApplicationGetTimerTaskMemory+0x2c>)
 8013734:	601a      	str	r2, [r3, #0]
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	4a06      	ldr	r2, [pc, #24]	; (8013754 <vApplicationGetTimerTaskMemory+0x30>)
 801373a:	601a      	str	r2, [r3, #0]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	bf00      	nop
 8013746:	3714      	adds	r7, #20
 8013748:	46bd      	mov	sp, r7
 801374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374e:	4770      	bx	lr
 8013750:	24001390 	.word	0x24001390
 8013754:	240013ec 	.word	0x240013ec

08013758 <xEventGroupCreateStatic>:
 8013758:	b580      	push	{r7, lr}
 801375a:	b086      	sub	sp, #24
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d10a      	bne.n	801377c <xEventGroupCreateStatic+0x24>
 8013766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801376a:	f383 8811 	msr	BASEPRI, r3
 801376e:	f3bf 8f6f 	isb	sy
 8013772:	f3bf 8f4f 	dsb	sy
 8013776:	613b      	str	r3, [r7, #16]
 8013778:	bf00      	nop
 801377a:	e7fe      	b.n	801377a <xEventGroupCreateStatic+0x22>
 801377c:	2320      	movs	r3, #32
 801377e:	60bb      	str	r3, [r7, #8]
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	2b20      	cmp	r3, #32
 8013784:	d00a      	beq.n	801379c <xEventGroupCreateStatic+0x44>
 8013786:	f04f 0350 	mov.w	r3, #80	; 0x50
 801378a:	f383 8811 	msr	BASEPRI, r3
 801378e:	f3bf 8f6f 	isb	sy
 8013792:	f3bf 8f4f 	dsb	sy
 8013796:	60fb      	str	r3, [r7, #12]
 8013798:	bf00      	nop
 801379a:	e7fe      	b.n	801379a <xEventGroupCreateStatic+0x42>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	617b      	str	r3, [r7, #20]
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d00a      	beq.n	80137bc <xEventGroupCreateStatic+0x64>
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	2200      	movs	r2, #0
 80137aa:	601a      	str	r2, [r3, #0]
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	3304      	adds	r3, #4
 80137b0:	4618      	mov	r0, r3
 80137b2:	f000 fa3d 	bl	8013c30 <vListInitialise>
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2201      	movs	r2, #1
 80137ba:	771a      	strb	r2, [r3, #28]
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	4618      	mov	r0, r3
 80137c0:	3718      	adds	r7, #24
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}

080137c6 <xEventGroupCreate>:
 80137c6:	b580      	push	{r7, lr}
 80137c8:	b082      	sub	sp, #8
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	2020      	movs	r0, #32
 80137ce:	f002 ff1b 	bl	8016608 <pvPortMalloc>
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00a      	beq.n	80137f0 <xEventGroupCreate+0x2a>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2200      	movs	r2, #0
 80137de:	601a      	str	r2, [r3, #0]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	3304      	adds	r3, #4
 80137e4:	4618      	mov	r0, r3
 80137e6:	f000 fa23 	bl	8013c30 <vListInitialise>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2200      	movs	r2, #0
 80137ee:	771a      	strb	r2, [r3, #28]
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	4618      	mov	r0, r3
 80137f4:	3708      	adds	r7, #8
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
	...

080137fc <xEventGroupWaitBits>:
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b090      	sub	sp, #64	; 0x40
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	607a      	str	r2, [r7, #4]
 8013808:	603b      	str	r3, [r7, #0]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	637b      	str	r3, [r7, #52]	; 0x34
 801380e:	2300      	movs	r3, #0
 8013810:	63bb      	str	r3, [r7, #56]	; 0x38
 8013812:	2300      	movs	r3, #0
 8013814:	633b      	str	r3, [r7, #48]	; 0x30
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d10a      	bne.n	8013832 <xEventGroupWaitBits+0x36>
 801381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013820:	f383 8811 	msr	BASEPRI, r3
 8013824:	f3bf 8f6f 	isb	sy
 8013828:	f3bf 8f4f 	dsb	sy
 801382c:	623b      	str	r3, [r7, #32]
 801382e:	bf00      	nop
 8013830:	e7fe      	b.n	8013830 <xEventGroupWaitBits+0x34>
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013838:	2b00      	cmp	r3, #0
 801383a:	d00a      	beq.n	8013852 <xEventGroupWaitBits+0x56>
 801383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013840:	f383 8811 	msr	BASEPRI, r3
 8013844:	f3bf 8f6f 	isb	sy
 8013848:	f3bf 8f4f 	dsb	sy
 801384c:	61fb      	str	r3, [r7, #28]
 801384e:	bf00      	nop
 8013850:	e7fe      	b.n	8013850 <xEventGroupWaitBits+0x54>
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d10a      	bne.n	801386e <xEventGroupWaitBits+0x72>
 8013858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801385c:	f383 8811 	msr	BASEPRI, r3
 8013860:	f3bf 8f6f 	isb	sy
 8013864:	f3bf 8f4f 	dsb	sy
 8013868:	61bb      	str	r3, [r7, #24]
 801386a:	bf00      	nop
 801386c:	e7fe      	b.n	801386c <xEventGroupWaitBits+0x70>
 801386e:	f002 f817 	bl	80158a0 <xTaskGetSchedulerState>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d102      	bne.n	801387e <xEventGroupWaitBits+0x82>
 8013878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801387a:	2b00      	cmp	r3, #0
 801387c:	d101      	bne.n	8013882 <xEventGroupWaitBits+0x86>
 801387e:	2301      	movs	r3, #1
 8013880:	e000      	b.n	8013884 <xEventGroupWaitBits+0x88>
 8013882:	2300      	movs	r3, #0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d10a      	bne.n	801389e <xEventGroupWaitBits+0xa2>
 8013888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801388c:	f383 8811 	msr	BASEPRI, r3
 8013890:	f3bf 8f6f 	isb	sy
 8013894:	f3bf 8f4f 	dsb	sy
 8013898:	617b      	str	r3, [r7, #20]
 801389a:	bf00      	nop
 801389c:	e7fe      	b.n	801389c <xEventGroupWaitBits+0xa0>
 801389e:	f001 fb77 	bl	8014f90 <vTaskSuspendAll>
 80138a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138a8:	683a      	ldr	r2, [r7, #0]
 80138aa:	68b9      	ldr	r1, [r7, #8]
 80138ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138ae:	f000 f988 	bl	8013bc2 <prvTestWaitCondition>
 80138b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80138b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d00e      	beq.n	80138d8 <xEventGroupWaitBits+0xdc>
 80138ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138be:	2300      	movs	r3, #0
 80138c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d028      	beq.n	801391a <xEventGroupWaitBits+0x11e>
 80138c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	43db      	mvns	r3, r3
 80138d0:	401a      	ands	r2, r3
 80138d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138d4:	601a      	str	r2, [r3, #0]
 80138d6:	e020      	b.n	801391a <xEventGroupWaitBits+0x11e>
 80138d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d104      	bne.n	80138e8 <xEventGroupWaitBits+0xec>
 80138de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138e2:	2301      	movs	r3, #1
 80138e4:	633b      	str	r3, [r7, #48]	; 0x30
 80138e6:	e018      	b.n	801391a <xEventGroupWaitBits+0x11e>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d003      	beq.n	80138f6 <xEventGroupWaitBits+0xfa>
 80138ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80138f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d003      	beq.n	8013904 <xEventGroupWaitBits+0x108>
 80138fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013902:	63bb      	str	r3, [r7, #56]	; 0x38
 8013904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013906:	1d18      	adds	r0, r3, #4
 8013908:	68ba      	ldr	r2, [r7, #8]
 801390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801390c:	4313      	orrs	r3, r2
 801390e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013910:	4619      	mov	r1, r3
 8013912:	f001 fd3d 	bl	8015390 <vTaskPlaceOnUnorderedEventList>
 8013916:	2300      	movs	r3, #0
 8013918:	63fb      	str	r3, [r7, #60]	; 0x3c
 801391a:	f001 fb47 	bl	8014fac <xTaskResumeAll>
 801391e:	6278      	str	r0, [r7, #36]	; 0x24
 8013920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013922:	2b00      	cmp	r3, #0
 8013924:	d031      	beq.n	801398a <xEventGroupWaitBits+0x18e>
 8013926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013928:	2b00      	cmp	r3, #0
 801392a:	d107      	bne.n	801393c <xEventGroupWaitBits+0x140>
 801392c:	4b19      	ldr	r3, [pc, #100]	; (8013994 <xEventGroupWaitBits+0x198>)
 801392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013932:	601a      	str	r2, [r3, #0]
 8013934:	f3bf 8f4f 	dsb	sy
 8013938:	f3bf 8f6f 	isb	sy
 801393c:	f002 f83c 	bl	80159b8 <uxTaskResetEventItemValue>
 8013940:	63f8      	str	r0, [r7, #60]	; 0x3c
 8013942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013948:	2b00      	cmp	r3, #0
 801394a:	d11a      	bne.n	8013982 <xEventGroupWaitBits+0x186>
 801394c:	f002 fd3a 	bl	80163c4 <vPortEnterCritical>
 8013950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013956:	683a      	ldr	r2, [r7, #0]
 8013958:	68b9      	ldr	r1, [r7, #8]
 801395a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801395c:	f000 f931 	bl	8013bc2 <prvTestWaitCondition>
 8013960:	4603      	mov	r3, r0
 8013962:	2b00      	cmp	r3, #0
 8013964:	d009      	beq.n	801397a <xEventGroupWaitBits+0x17e>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d006      	beq.n	801397a <xEventGroupWaitBits+0x17e>
 801396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801396e:	681a      	ldr	r2, [r3, #0]
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	43db      	mvns	r3, r3
 8013974:	401a      	ands	r2, r3
 8013976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013978:	601a      	str	r2, [r3, #0]
 801397a:	2301      	movs	r3, #1
 801397c:	633b      	str	r3, [r7, #48]	; 0x30
 801397e:	f002 fd51 	bl	8016424 <vPortExitCritical>
 8013982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013984:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013988:	63fb      	str	r3, [r7, #60]	; 0x3c
 801398a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801398c:	4618      	mov	r0, r3
 801398e:	3740      	adds	r7, #64	; 0x40
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}
 8013994:	e000ed04 	.word	0xe000ed04

08013998 <xEventGroupClearBits>:
 8013998:	b580      	push	{r7, lr}
 801399a:	b086      	sub	sp, #24
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	617b      	str	r3, [r7, #20]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d10a      	bne.n	80139c2 <xEventGroupClearBits+0x2a>
 80139ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b0:	f383 8811 	msr	BASEPRI, r3
 80139b4:	f3bf 8f6f 	isb	sy
 80139b8:	f3bf 8f4f 	dsb	sy
 80139bc:	60fb      	str	r3, [r7, #12]
 80139be:	bf00      	nop
 80139c0:	e7fe      	b.n	80139c0 <xEventGroupClearBits+0x28>
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d00a      	beq.n	80139e2 <xEventGroupClearBits+0x4a>
 80139cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d0:	f383 8811 	msr	BASEPRI, r3
 80139d4:	f3bf 8f6f 	isb	sy
 80139d8:	f3bf 8f4f 	dsb	sy
 80139dc:	60bb      	str	r3, [r7, #8]
 80139de:	bf00      	nop
 80139e0:	e7fe      	b.n	80139e0 <xEventGroupClearBits+0x48>
 80139e2:	f002 fcef 	bl	80163c4 <vPortEnterCritical>
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	613b      	str	r3, [r7, #16]
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	43db      	mvns	r3, r3
 80139f4:	401a      	ands	r2, r3
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	601a      	str	r2, [r3, #0]
 80139fa:	f002 fd13 	bl	8016424 <vPortExitCritical>
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	4618      	mov	r0, r3
 8013a02:	3718      	adds	r7, #24
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}

08013a08 <xEventGroupClearBitsFromISR>:
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b084      	sub	sp, #16
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6039      	str	r1, [r7, #0]
 8013a12:	2300      	movs	r3, #0
 8013a14:	683a      	ldr	r2, [r7, #0]
 8013a16:	6879      	ldr	r1, [r7, #4]
 8013a18:	4804      	ldr	r0, [pc, #16]	; (8013a2c <xEventGroupClearBitsFromISR+0x24>)
 8013a1a:	f002 fb87 	bl	801612c <xTimerPendFunctionCallFromISR>
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	4618      	mov	r0, r3
 8013a24:	3710      	adds	r7, #16
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	08013ba9 	.word	0x08013ba9

08013a30 <xEventGroupGetBitsFromISR>:
 8013a30:	b480      	push	{r7}
 8013a32:	b089      	sub	sp, #36	; 0x24
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	61fb      	str	r3, [r7, #28]
 8013a3c:	f3ef 8211 	mrs	r2, BASEPRI
 8013a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a44:	f383 8811 	msr	BASEPRI, r3
 8013a48:	f3bf 8f6f 	isb	sy
 8013a4c:	f3bf 8f4f 	dsb	sy
 8013a50:	60fa      	str	r2, [r7, #12]
 8013a52:	60bb      	str	r3, [r7, #8]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	61bb      	str	r3, [r7, #24]
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	617b      	str	r3, [r7, #20]
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	613b      	str	r3, [r7, #16]
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	f383 8811 	msr	BASEPRI, r3
 8013a68:	bf00      	nop
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3724      	adds	r7, #36	; 0x24
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr

08013a78 <xEventGroupSetBits>:
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b08e      	sub	sp, #56	; 0x38
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	6039      	str	r1, [r7, #0]
 8013a82:	2300      	movs	r3, #0
 8013a84:	633b      	str	r3, [r7, #48]	; 0x30
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d10a      	bne.n	8013aaa <xEventGroupSetBits+0x32>
 8013a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a98:	f383 8811 	msr	BASEPRI, r3
 8013a9c:	f3bf 8f6f 	isb	sy
 8013aa0:	f3bf 8f4f 	dsb	sy
 8013aa4:	613b      	str	r3, [r7, #16]
 8013aa6:	bf00      	nop
 8013aa8:	e7fe      	b.n	8013aa8 <xEventGroupSetBits+0x30>
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d00a      	beq.n	8013aca <xEventGroupSetBits+0x52>
 8013ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab8:	f383 8811 	msr	BASEPRI, r3
 8013abc:	f3bf 8f6f 	isb	sy
 8013ac0:	f3bf 8f4f 	dsb	sy
 8013ac4:	60fb      	str	r3, [r7, #12]
 8013ac6:	bf00      	nop
 8013ac8:	e7fe      	b.n	8013ac8 <xEventGroupSetBits+0x50>
 8013aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013acc:	3304      	adds	r3, #4
 8013ace:	627b      	str	r3, [r7, #36]	; 0x24
 8013ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad2:	3308      	adds	r3, #8
 8013ad4:	623b      	str	r3, [r7, #32]
 8013ad6:	f001 fa5b 	bl	8014f90 <vTaskSuspendAll>
 8013ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013adc:	68db      	ldr	r3, [r3, #12]
 8013ade:	637b      	str	r3, [r7, #52]	; 0x34
 8013ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	431a      	orrs	r2, r3
 8013ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aea:	601a      	str	r2, [r3, #0]
 8013aec:	e03c      	b.n	8013b68 <xEventGroupSetBits+0xf0>
 8013aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	61fb      	str	r3, [r7, #28]
 8013af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	61bb      	str	r3, [r7, #24]
 8013afa:	2300      	movs	r3, #0
 8013afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013afe:	69bb      	ldr	r3, [r7, #24]
 8013b00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b04:	617b      	str	r3, [r7, #20]
 8013b06:	69bb      	ldr	r3, [r7, #24]
 8013b08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b0c:	61bb      	str	r3, [r7, #24]
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d108      	bne.n	8013b2a <xEventGroupSetBits+0xb2>
 8013b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	69bb      	ldr	r3, [r7, #24]
 8013b1e:	4013      	ands	r3, r2
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d00b      	beq.n	8013b3c <xEventGroupSetBits+0xc4>
 8013b24:	2301      	movs	r3, #1
 8013b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b28:	e008      	b.n	8013b3c <xEventGroupSetBits+0xc4>
 8013b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	69bb      	ldr	r3, [r7, #24]
 8013b30:	4013      	ands	r3, r2
 8013b32:	69ba      	ldr	r2, [r7, #24]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d101      	bne.n	8013b3c <xEventGroupSetBits+0xc4>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d010      	beq.n	8013b64 <xEventGroupSetBits+0xec>
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d003      	beq.n	8013b54 <xEventGroupSetBits+0xdc>
 8013b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	4313      	orrs	r3, r2
 8013b52:	633b      	str	r3, [r7, #48]	; 0x30
 8013b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013b5c:	4619      	mov	r1, r3
 8013b5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b60:	f001 fce2 	bl	8015528 <vTaskRemoveFromUnorderedEventList>
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	637b      	str	r3, [r7, #52]	; 0x34
 8013b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b6a:	6a3b      	ldr	r3, [r7, #32]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d1be      	bne.n	8013aee <xEventGroupSetBits+0x76>
 8013b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b72:	681a      	ldr	r2, [r3, #0]
 8013b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b76:	43db      	mvns	r3, r3
 8013b78:	401a      	ands	r2, r3
 8013b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b7c:	601a      	str	r2, [r3, #0]
 8013b7e:	f001 fa15 	bl	8014fac <xTaskResumeAll>
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	4618      	mov	r0, r3
 8013b88:	3738      	adds	r7, #56	; 0x38
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}

08013b8e <vEventGroupSetBitsCallback>:
 8013b8e:	b580      	push	{r7, lr}
 8013b90:	b082      	sub	sp, #8
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
 8013b96:	6039      	str	r1, [r7, #0]
 8013b98:	6839      	ldr	r1, [r7, #0]
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f7ff ff6c 	bl	8013a78 <xEventGroupSetBits>
 8013ba0:	bf00      	nop
 8013ba2:	3708      	adds	r7, #8
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <vEventGroupClearBitsCallback>:
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	6039      	str	r1, [r7, #0]
 8013bb2:	6839      	ldr	r1, [r7, #0]
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f7ff feef 	bl	8013998 <xEventGroupClearBits>
 8013bba:	bf00      	nop
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}

08013bc2 <prvTestWaitCondition>:
 8013bc2:	b480      	push	{r7}
 8013bc4:	b087      	sub	sp, #28
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	60f8      	str	r0, [r7, #12]
 8013bca:	60b9      	str	r1, [r7, #8]
 8013bcc:	607a      	str	r2, [r7, #4]
 8013bce:	2300      	movs	r3, #0
 8013bd0:	617b      	str	r3, [r7, #20]
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d107      	bne.n	8013be8 <prvTestWaitCondition+0x26>
 8013bd8:	68fa      	ldr	r2, [r7, #12]
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	4013      	ands	r3, r2
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d00a      	beq.n	8013bf8 <prvTestWaitCondition+0x36>
 8013be2:	2301      	movs	r3, #1
 8013be4:	617b      	str	r3, [r7, #20]
 8013be6:	e007      	b.n	8013bf8 <prvTestWaitCondition+0x36>
 8013be8:	68fa      	ldr	r2, [r7, #12]
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	4013      	ands	r3, r2
 8013bee:	68ba      	ldr	r2, [r7, #8]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d101      	bne.n	8013bf8 <prvTestWaitCondition+0x36>
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	617b      	str	r3, [r7, #20]
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	371c      	adds	r7, #28
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr
	...

08013c08 <xEventGroupSetBitsFromISR>:
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b086      	sub	sp, #24
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	607a      	str	r2, [r7, #4]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	68ba      	ldr	r2, [r7, #8]
 8013c18:	68f9      	ldr	r1, [r7, #12]
 8013c1a:	4804      	ldr	r0, [pc, #16]	; (8013c2c <xEventGroupSetBitsFromISR+0x24>)
 8013c1c:	f002 fa86 	bl	801612c <xTimerPendFunctionCallFromISR>
 8013c20:	6178      	str	r0, [r7, #20]
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	4618      	mov	r0, r3
 8013c26:	3718      	adds	r7, #24
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	08013b8f 	.word	0x08013b8f

08013c30 <vListInitialise>:
 8013c30:	b480      	push	{r7}
 8013c32:	b083      	sub	sp, #12
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f103 0208 	add.w	r2, r3, #8
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	605a      	str	r2, [r3, #4]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c48:	609a      	str	r2, [r3, #8]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f103 0208 	add.w	r2, r3, #8
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	60da      	str	r2, [r3, #12]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f103 0208 	add.w	r2, r3, #8
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	611a      	str	r2, [r3, #16]
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2200      	movs	r2, #0
 8013c62:	601a      	str	r2, [r3, #0]
 8013c64:	bf00      	nop
 8013c66:	370c      	adds	r7, #12
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6e:	4770      	bx	lr

08013c70 <vListInitialiseItem>:
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	611a      	str	r2, [r3, #16]
 8013c7e:	bf00      	nop
 8013c80:	370c      	adds	r7, #12
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr

08013c8a <vListInsertEnd>:
 8013c8a:	b480      	push	{r7}
 8013c8c:	b085      	sub	sp, #20
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	6039      	str	r1, [r7, #0]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	60fb      	str	r3, [r7, #12]
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	68fa      	ldr	r2, [r7, #12]
 8013c9e:	605a      	str	r2, [r3, #4]
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	689a      	ldr	r2, [r3, #8]
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	609a      	str	r2, [r3, #8]
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	689b      	ldr	r3, [r3, #8]
 8013cac:	683a      	ldr	r2, [r7, #0]
 8013cae:	605a      	str	r2, [r3, #4]
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	683a      	ldr	r2, [r7, #0]
 8013cb4:	609a      	str	r2, [r3, #8]
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	687a      	ldr	r2, [r7, #4]
 8013cba:	611a      	str	r2, [r3, #16]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	1c5a      	adds	r2, r3, #1
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	601a      	str	r2, [r3, #0]
 8013cc6:	bf00      	nop
 8013cc8:	3714      	adds	r7, #20
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd0:	4770      	bx	lr

08013cd2 <vListInsert>:
 8013cd2:	b480      	push	{r7}
 8013cd4:	b085      	sub	sp, #20
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	6078      	str	r0, [r7, #4]
 8013cda:	6039      	str	r1, [r7, #0]
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	60bb      	str	r3, [r7, #8]
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ce8:	d103      	bne.n	8013cf2 <vListInsert+0x20>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	691b      	ldr	r3, [r3, #16]
 8013cee:	60fb      	str	r3, [r7, #12]
 8013cf0:	e00c      	b.n	8013d0c <vListInsert+0x3a>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	3308      	adds	r3, #8
 8013cf6:	60fb      	str	r3, [r7, #12]
 8013cf8:	e002      	b.n	8013d00 <vListInsert+0x2e>
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	60fb      	str	r3, [r7, #12]
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	685b      	ldr	r3, [r3, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	68ba      	ldr	r2, [r7, #8]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d2f6      	bcs.n	8013cfa <vListInsert+0x28>
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	685a      	ldr	r2, [r3, #4]
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	605a      	str	r2, [r3, #4]
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	683a      	ldr	r2, [r7, #0]
 8013d1a:	609a      	str	r2, [r3, #8]
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	68fa      	ldr	r2, [r7, #12]
 8013d20:	609a      	str	r2, [r3, #8]
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	683a      	ldr	r2, [r7, #0]
 8013d26:	605a      	str	r2, [r3, #4]
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	611a      	str	r2, [r3, #16]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	1c5a      	adds	r2, r3, #1
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	601a      	str	r2, [r3, #0]
 8013d38:	bf00      	nop
 8013d3a:	3714      	adds	r7, #20
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <uxListRemove>:
 8013d44:	b480      	push	{r7}
 8013d46:	b085      	sub	sp, #20
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	691b      	ldr	r3, [r3, #16]
 8013d50:	60fb      	str	r3, [r7, #12]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	687a      	ldr	r2, [r7, #4]
 8013d58:	6892      	ldr	r2, [r2, #8]
 8013d5a:	609a      	str	r2, [r3, #8]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	689b      	ldr	r3, [r3, #8]
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	6852      	ldr	r2, [r2, #4]
 8013d64:	605a      	str	r2, [r3, #4]
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d103      	bne.n	8013d78 <uxListRemove+0x34>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	689a      	ldr	r2, [r3, #8]
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	605a      	str	r2, [r3, #4]
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	611a      	str	r2, [r3, #16]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	1e5a      	subs	r2, r3, #1
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	601a      	str	r2, [r3, #0]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3714      	adds	r7, #20
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <xQueueGenericReset>:
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	60fb      	str	r3, [r7, #12]
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d10a      	bne.n	8013dc2 <xQueueGenericReset+0x2a>
 8013dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db0:	f383 8811 	msr	BASEPRI, r3
 8013db4:	f3bf 8f6f 	isb	sy
 8013db8:	f3bf 8f4f 	dsb	sy
 8013dbc:	60bb      	str	r3, [r7, #8]
 8013dbe:	bf00      	nop
 8013dc0:	e7fe      	b.n	8013dc0 <xQueueGenericReset+0x28>
 8013dc2:	f002 faff 	bl	80163c4 <vPortEnterCritical>
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	681a      	ldr	r2, [r3, #0]
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dce:	68f9      	ldr	r1, [r7, #12]
 8013dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013dd2:	fb01 f303 	mul.w	r3, r1, r3
 8013dd6:	441a      	add	r2, r3
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	609a      	str	r2, [r3, #8]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2200      	movs	r2, #0
 8013de0:	639a      	str	r2, [r3, #56]	; 0x38
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	605a      	str	r2, [r3, #4]
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	681a      	ldr	r2, [r3, #0]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013df2:	3b01      	subs	r3, #1
 8013df4:	68f9      	ldr	r1, [r7, #12]
 8013df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013df8:	fb01 f303 	mul.w	r3, r1, r3
 8013dfc:	441a      	add	r2, r3
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	60da      	str	r2, [r3, #12]
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	22ff      	movs	r2, #255	; 0xff
 8013e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	22ff      	movs	r2, #255	; 0xff
 8013e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d114      	bne.n	8013e42 <xQueueGenericReset+0xaa>
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	691b      	ldr	r3, [r3, #16]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d01a      	beq.n	8013e56 <xQueueGenericReset+0xbe>
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	3310      	adds	r3, #16
 8013e24:	4618      	mov	r0, r3
 8013e26:	f001 fb1b 	bl	8015460 <xTaskRemoveFromEventList>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d012      	beq.n	8013e56 <xQueueGenericReset+0xbe>
 8013e30:	4b0c      	ldr	r3, [pc, #48]	; (8013e64 <xQueueGenericReset+0xcc>)
 8013e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e36:	601a      	str	r2, [r3, #0]
 8013e38:	f3bf 8f4f 	dsb	sy
 8013e3c:	f3bf 8f6f 	isb	sy
 8013e40:	e009      	b.n	8013e56 <xQueueGenericReset+0xbe>
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	3310      	adds	r3, #16
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7ff fef2 	bl	8013c30 <vListInitialise>
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	3324      	adds	r3, #36	; 0x24
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7ff feed 	bl	8013c30 <vListInitialise>
 8013e56:	f002 fae5 	bl	8016424 <vPortExitCritical>
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3710      	adds	r7, #16
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}
 8013e64:	e000ed04 	.word	0xe000ed04

08013e68 <xQueueGenericCreateStatic>:
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b08e      	sub	sp, #56	; 0x38
 8013e6c:	af02      	add	r7, sp, #8
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
 8013e74:	603b      	str	r3, [r7, #0]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d10a      	bne.n	8013e92 <xQueueGenericCreateStatic+0x2a>
 8013e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e80:	f383 8811 	msr	BASEPRI, r3
 8013e84:	f3bf 8f6f 	isb	sy
 8013e88:	f3bf 8f4f 	dsb	sy
 8013e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e8e:	bf00      	nop
 8013e90:	e7fe      	b.n	8013e90 <xQueueGenericCreateStatic+0x28>
 8013e92:	683b      	ldr	r3, [r7, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d10a      	bne.n	8013eae <xQueueGenericCreateStatic+0x46>
 8013e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9c:	f383 8811 	msr	BASEPRI, r3
 8013ea0:	f3bf 8f6f 	isb	sy
 8013ea4:	f3bf 8f4f 	dsb	sy
 8013ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8013eaa:	bf00      	nop
 8013eac:	e7fe      	b.n	8013eac <xQueueGenericCreateStatic+0x44>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d002      	beq.n	8013eba <xQueueGenericCreateStatic+0x52>
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d001      	beq.n	8013ebe <xQueueGenericCreateStatic+0x56>
 8013eba:	2301      	movs	r3, #1
 8013ebc:	e000      	b.n	8013ec0 <xQueueGenericCreateStatic+0x58>
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d10a      	bne.n	8013eda <xQueueGenericCreateStatic+0x72>
 8013ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec8:	f383 8811 	msr	BASEPRI, r3
 8013ecc:	f3bf 8f6f 	isb	sy
 8013ed0:	f3bf 8f4f 	dsb	sy
 8013ed4:	623b      	str	r3, [r7, #32]
 8013ed6:	bf00      	nop
 8013ed8:	e7fe      	b.n	8013ed8 <xQueueGenericCreateStatic+0x70>
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d102      	bne.n	8013ee6 <xQueueGenericCreateStatic+0x7e>
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d101      	bne.n	8013eea <xQueueGenericCreateStatic+0x82>
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	e000      	b.n	8013eec <xQueueGenericCreateStatic+0x84>
 8013eea:	2300      	movs	r3, #0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d10a      	bne.n	8013f06 <xQueueGenericCreateStatic+0x9e>
 8013ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef4:	f383 8811 	msr	BASEPRI, r3
 8013ef8:	f3bf 8f6f 	isb	sy
 8013efc:	f3bf 8f4f 	dsb	sy
 8013f00:	61fb      	str	r3, [r7, #28]
 8013f02:	bf00      	nop
 8013f04:	e7fe      	b.n	8013f04 <xQueueGenericCreateStatic+0x9c>
 8013f06:	2350      	movs	r3, #80	; 0x50
 8013f08:	617b      	str	r3, [r7, #20]
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	2b50      	cmp	r3, #80	; 0x50
 8013f0e:	d00a      	beq.n	8013f26 <xQueueGenericCreateStatic+0xbe>
 8013f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f14:	f383 8811 	msr	BASEPRI, r3
 8013f18:	f3bf 8f6f 	isb	sy
 8013f1c:	f3bf 8f4f 	dsb	sy
 8013f20:	61bb      	str	r3, [r7, #24]
 8013f22:	bf00      	nop
 8013f24:	e7fe      	b.n	8013f24 <xQueueGenericCreateStatic+0xbc>
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d00d      	beq.n	8013f4e <xQueueGenericCreateStatic+0xe6>
 8013f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f34:	2201      	movs	r2, #1
 8013f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013f3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f40:	9300      	str	r3, [sp, #0]
 8013f42:	4613      	mov	r3, r2
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	68b9      	ldr	r1, [r7, #8]
 8013f48:	68f8      	ldr	r0, [r7, #12]
 8013f4a:	f000 f83f 	bl	8013fcc <prvInitialiseNewQueue>
 8013f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f50:	4618      	mov	r0, r3
 8013f52:	3730      	adds	r7, #48	; 0x30
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}

08013f58 <xQueueGenericCreate>:
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b08a      	sub	sp, #40	; 0x28
 8013f5c:	af02      	add	r7, sp, #8
 8013f5e:	60f8      	str	r0, [r7, #12]
 8013f60:	60b9      	str	r1, [r7, #8]
 8013f62:	4613      	mov	r3, r2
 8013f64:	71fb      	strb	r3, [r7, #7]
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d10a      	bne.n	8013f82 <xQueueGenericCreate+0x2a>
 8013f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f70:	f383 8811 	msr	BASEPRI, r3
 8013f74:	f3bf 8f6f 	isb	sy
 8013f78:	f3bf 8f4f 	dsb	sy
 8013f7c:	613b      	str	r3, [r7, #16]
 8013f7e:	bf00      	nop
 8013f80:	e7fe      	b.n	8013f80 <xQueueGenericCreate+0x28>
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	68ba      	ldr	r2, [r7, #8]
 8013f86:	fb02 f303 	mul.w	r3, r2, r3
 8013f8a:	61fb      	str	r3, [r7, #28]
 8013f8c:	69fb      	ldr	r3, [r7, #28]
 8013f8e:	3350      	adds	r3, #80	; 0x50
 8013f90:	4618      	mov	r0, r3
 8013f92:	f002 fb39 	bl	8016608 <pvPortMalloc>
 8013f96:	61b8      	str	r0, [r7, #24]
 8013f98:	69bb      	ldr	r3, [r7, #24]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d011      	beq.n	8013fc2 <xQueueGenericCreate+0x6a>
 8013f9e:	69bb      	ldr	r3, [r7, #24]
 8013fa0:	617b      	str	r3, [r7, #20]
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	3350      	adds	r3, #80	; 0x50
 8013fa6:	617b      	str	r3, [r7, #20]
 8013fa8:	69bb      	ldr	r3, [r7, #24]
 8013faa:	2200      	movs	r2, #0
 8013fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013fb0:	79fa      	ldrb	r2, [r7, #7]
 8013fb2:	69bb      	ldr	r3, [r7, #24]
 8013fb4:	9300      	str	r3, [sp, #0]
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	697a      	ldr	r2, [r7, #20]
 8013fba:	68b9      	ldr	r1, [r7, #8]
 8013fbc:	68f8      	ldr	r0, [r7, #12]
 8013fbe:	f000 f805 	bl	8013fcc <prvInitialiseNewQueue>
 8013fc2:	69bb      	ldr	r3, [r7, #24]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3720      	adds	r7, #32
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}

08013fcc <prvInitialiseNewQueue>:
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b084      	sub	sp, #16
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	607a      	str	r2, [r7, #4]
 8013fd8:	70fb      	strb	r3, [r7, #3]
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d103      	bne.n	8013fe8 <prvInitialiseNewQueue+0x1c>
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	69ba      	ldr	r2, [r7, #24]
 8013fe4:	601a      	str	r2, [r3, #0]
 8013fe6:	e002      	b.n	8013fee <prvInitialiseNewQueue+0x22>
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	601a      	str	r2, [r3, #0]
 8013fee:	69bb      	ldr	r3, [r7, #24]
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	68ba      	ldr	r2, [r7, #8]
 8013ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8013ffa:	2101      	movs	r1, #1
 8013ffc:	69b8      	ldr	r0, [r7, #24]
 8013ffe:	f7ff fecb 	bl	8013d98 <xQueueGenericReset>
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	78fa      	ldrb	r2, [r7, #3]
 8014006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 801400a:	bf00      	nop
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
	...

08014014 <xQueueGenericSend>:
 8014014:	b580      	push	{r7, lr}
 8014016:	b08e      	sub	sp, #56	; 0x38
 8014018:	af00      	add	r7, sp, #0
 801401a:	60f8      	str	r0, [r7, #12]
 801401c:	60b9      	str	r1, [r7, #8]
 801401e:	607a      	str	r2, [r7, #4]
 8014020:	603b      	str	r3, [r7, #0]
 8014022:	2300      	movs	r3, #0
 8014024:	637b      	str	r3, [r7, #52]	; 0x34
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	633b      	str	r3, [r7, #48]	; 0x30
 801402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402c:	2b00      	cmp	r3, #0
 801402e:	d10a      	bne.n	8014046 <xQueueGenericSend+0x32>
 8014030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014034:	f383 8811 	msr	BASEPRI, r3
 8014038:	f3bf 8f6f 	isb	sy
 801403c:	f3bf 8f4f 	dsb	sy
 8014040:	62bb      	str	r3, [r7, #40]	; 0x28
 8014042:	bf00      	nop
 8014044:	e7fe      	b.n	8014044 <xQueueGenericSend+0x30>
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d103      	bne.n	8014054 <xQueueGenericSend+0x40>
 801404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014050:	2b00      	cmp	r3, #0
 8014052:	d101      	bne.n	8014058 <xQueueGenericSend+0x44>
 8014054:	2301      	movs	r3, #1
 8014056:	e000      	b.n	801405a <xQueueGenericSend+0x46>
 8014058:	2300      	movs	r3, #0
 801405a:	2b00      	cmp	r3, #0
 801405c:	d10a      	bne.n	8014074 <xQueueGenericSend+0x60>
 801405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014062:	f383 8811 	msr	BASEPRI, r3
 8014066:	f3bf 8f6f 	isb	sy
 801406a:	f3bf 8f4f 	dsb	sy
 801406e:	627b      	str	r3, [r7, #36]	; 0x24
 8014070:	bf00      	nop
 8014072:	e7fe      	b.n	8014072 <xQueueGenericSend+0x5e>
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	2b02      	cmp	r3, #2
 8014078:	d103      	bne.n	8014082 <xQueueGenericSend+0x6e>
 801407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801407e:	2b01      	cmp	r3, #1
 8014080:	d101      	bne.n	8014086 <xQueueGenericSend+0x72>
 8014082:	2301      	movs	r3, #1
 8014084:	e000      	b.n	8014088 <xQueueGenericSend+0x74>
 8014086:	2300      	movs	r3, #0
 8014088:	2b00      	cmp	r3, #0
 801408a:	d10a      	bne.n	80140a2 <xQueueGenericSend+0x8e>
 801408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014090:	f383 8811 	msr	BASEPRI, r3
 8014094:	f3bf 8f6f 	isb	sy
 8014098:	f3bf 8f4f 	dsb	sy
 801409c:	623b      	str	r3, [r7, #32]
 801409e:	bf00      	nop
 80140a0:	e7fe      	b.n	80140a0 <xQueueGenericSend+0x8c>
 80140a2:	f001 fbfd 	bl	80158a0 <xTaskGetSchedulerState>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d102      	bne.n	80140b2 <xQueueGenericSend+0x9e>
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d101      	bne.n	80140b6 <xQueueGenericSend+0xa2>
 80140b2:	2301      	movs	r3, #1
 80140b4:	e000      	b.n	80140b8 <xQueueGenericSend+0xa4>
 80140b6:	2300      	movs	r3, #0
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d10a      	bne.n	80140d2 <xQueueGenericSend+0xbe>
 80140bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c0:	f383 8811 	msr	BASEPRI, r3
 80140c4:	f3bf 8f6f 	isb	sy
 80140c8:	f3bf 8f4f 	dsb	sy
 80140cc:	61fb      	str	r3, [r7, #28]
 80140ce:	bf00      	nop
 80140d0:	e7fe      	b.n	80140d0 <xQueueGenericSend+0xbc>
 80140d2:	f002 f977 	bl	80163c4 <vPortEnterCritical>
 80140d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140de:	429a      	cmp	r2, r3
 80140e0:	d302      	bcc.n	80140e8 <xQueueGenericSend+0xd4>
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	2b02      	cmp	r3, #2
 80140e6:	d129      	bne.n	801413c <xQueueGenericSend+0x128>
 80140e8:	683a      	ldr	r2, [r7, #0]
 80140ea:	68b9      	ldr	r1, [r7, #8]
 80140ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140ee:	f000 fa8b 	bl	8014608 <prvCopyDataToQueue>
 80140f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80140f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d010      	beq.n	801411e <xQueueGenericSend+0x10a>
 80140fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fe:	3324      	adds	r3, #36	; 0x24
 8014100:	4618      	mov	r0, r3
 8014102:	f001 f9ad 	bl	8015460 <xTaskRemoveFromEventList>
 8014106:	4603      	mov	r3, r0
 8014108:	2b00      	cmp	r3, #0
 801410a:	d013      	beq.n	8014134 <xQueueGenericSend+0x120>
 801410c:	4b3f      	ldr	r3, [pc, #252]	; (801420c <xQueueGenericSend+0x1f8>)
 801410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014112:	601a      	str	r2, [r3, #0]
 8014114:	f3bf 8f4f 	dsb	sy
 8014118:	f3bf 8f6f 	isb	sy
 801411c:	e00a      	b.n	8014134 <xQueueGenericSend+0x120>
 801411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014120:	2b00      	cmp	r3, #0
 8014122:	d007      	beq.n	8014134 <xQueueGenericSend+0x120>
 8014124:	4b39      	ldr	r3, [pc, #228]	; (801420c <xQueueGenericSend+0x1f8>)
 8014126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801412a:	601a      	str	r2, [r3, #0]
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	f3bf 8f6f 	isb	sy
 8014134:	f002 f976 	bl	8016424 <vPortExitCritical>
 8014138:	2301      	movs	r3, #1
 801413a:	e063      	b.n	8014204 <xQueueGenericSend+0x1f0>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d103      	bne.n	801414a <xQueueGenericSend+0x136>
 8014142:	f002 f96f 	bl	8016424 <vPortExitCritical>
 8014146:	2300      	movs	r3, #0
 8014148:	e05c      	b.n	8014204 <xQueueGenericSend+0x1f0>
 801414a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801414c:	2b00      	cmp	r3, #0
 801414e:	d106      	bne.n	801415e <xQueueGenericSend+0x14a>
 8014150:	f107 0314 	add.w	r3, r7, #20
 8014154:	4618      	mov	r0, r3
 8014156:	f001 fa49 	bl	80155ec <vTaskInternalSetTimeOutState>
 801415a:	2301      	movs	r3, #1
 801415c:	637b      	str	r3, [r7, #52]	; 0x34
 801415e:	f002 f961 	bl	8016424 <vPortExitCritical>
 8014162:	f000 ff15 	bl	8014f90 <vTaskSuspendAll>
 8014166:	f002 f92d 	bl	80163c4 <vPortEnterCritical>
 801416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801416c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014170:	b25b      	sxtb	r3, r3
 8014172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014176:	d103      	bne.n	8014180 <xQueueGenericSend+0x16c>
 8014178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417a:	2200      	movs	r2, #0
 801417c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014186:	b25b      	sxtb	r3, r3
 8014188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801418c:	d103      	bne.n	8014196 <xQueueGenericSend+0x182>
 801418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014190:	2200      	movs	r2, #0
 8014192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014196:	f002 f945 	bl	8016424 <vPortExitCritical>
 801419a:	1d3a      	adds	r2, r7, #4
 801419c:	f107 0314 	add.w	r3, r7, #20
 80141a0:	4611      	mov	r1, r2
 80141a2:	4618      	mov	r0, r3
 80141a4:	f001 fa38 	bl	8015618 <xTaskCheckForTimeOut>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d124      	bne.n	80141f8 <xQueueGenericSend+0x1e4>
 80141ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141b0:	f000 fb22 	bl	80147f8 <prvIsQueueFull>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d018      	beq.n	80141ec <xQueueGenericSend+0x1d8>
 80141ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141bc:	3310      	adds	r3, #16
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	4611      	mov	r1, r2
 80141c2:	4618      	mov	r0, r3
 80141c4:	f001 f8c0 	bl	8015348 <vTaskPlaceOnEventList>
 80141c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141ca:	f000 faad 	bl	8014728 <prvUnlockQueue>
 80141ce:	f000 feed 	bl	8014fac <xTaskResumeAll>
 80141d2:	4603      	mov	r3, r0
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	f47f af7c 	bne.w	80140d2 <xQueueGenericSend+0xbe>
 80141da:	4b0c      	ldr	r3, [pc, #48]	; (801420c <xQueueGenericSend+0x1f8>)
 80141dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	f3bf 8f4f 	dsb	sy
 80141e6:	f3bf 8f6f 	isb	sy
 80141ea:	e772      	b.n	80140d2 <xQueueGenericSend+0xbe>
 80141ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141ee:	f000 fa9b 	bl	8014728 <prvUnlockQueue>
 80141f2:	f000 fedb 	bl	8014fac <xTaskResumeAll>
 80141f6:	e76c      	b.n	80140d2 <xQueueGenericSend+0xbe>
 80141f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141fa:	f000 fa95 	bl	8014728 <prvUnlockQueue>
 80141fe:	f000 fed5 	bl	8014fac <xTaskResumeAll>
 8014202:	2300      	movs	r3, #0
 8014204:	4618      	mov	r0, r3
 8014206:	3738      	adds	r7, #56	; 0x38
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	e000ed04 	.word	0xe000ed04

08014210 <xQueueGenericSendFromISR>:
 8014210:	b580      	push	{r7, lr}
 8014212:	b090      	sub	sp, #64	; 0x40
 8014214:	af00      	add	r7, sp, #0
 8014216:	60f8      	str	r0, [r7, #12]
 8014218:	60b9      	str	r1, [r7, #8]
 801421a:	607a      	str	r2, [r7, #4]
 801421c:	603b      	str	r3, [r7, #0]
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	63bb      	str	r3, [r7, #56]	; 0x38
 8014222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014224:	2b00      	cmp	r3, #0
 8014226:	d10a      	bne.n	801423e <xQueueGenericSendFromISR+0x2e>
 8014228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801422c:	f383 8811 	msr	BASEPRI, r3
 8014230:	f3bf 8f6f 	isb	sy
 8014234:	f3bf 8f4f 	dsb	sy
 8014238:	62bb      	str	r3, [r7, #40]	; 0x28
 801423a:	bf00      	nop
 801423c:	e7fe      	b.n	801423c <xQueueGenericSendFromISR+0x2c>
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d103      	bne.n	801424c <xQueueGenericSendFromISR+0x3c>
 8014244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014248:	2b00      	cmp	r3, #0
 801424a:	d101      	bne.n	8014250 <xQueueGenericSendFromISR+0x40>
 801424c:	2301      	movs	r3, #1
 801424e:	e000      	b.n	8014252 <xQueueGenericSendFromISR+0x42>
 8014250:	2300      	movs	r3, #0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d10a      	bne.n	801426c <xQueueGenericSendFromISR+0x5c>
 8014256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801425a:	f383 8811 	msr	BASEPRI, r3
 801425e:	f3bf 8f6f 	isb	sy
 8014262:	f3bf 8f4f 	dsb	sy
 8014266:	627b      	str	r3, [r7, #36]	; 0x24
 8014268:	bf00      	nop
 801426a:	e7fe      	b.n	801426a <xQueueGenericSendFromISR+0x5a>
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	2b02      	cmp	r3, #2
 8014270:	d103      	bne.n	801427a <xQueueGenericSendFromISR+0x6a>
 8014272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014276:	2b01      	cmp	r3, #1
 8014278:	d101      	bne.n	801427e <xQueueGenericSendFromISR+0x6e>
 801427a:	2301      	movs	r3, #1
 801427c:	e000      	b.n	8014280 <xQueueGenericSendFromISR+0x70>
 801427e:	2300      	movs	r3, #0
 8014280:	2b00      	cmp	r3, #0
 8014282:	d10a      	bne.n	801429a <xQueueGenericSendFromISR+0x8a>
 8014284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014288:	f383 8811 	msr	BASEPRI, r3
 801428c:	f3bf 8f6f 	isb	sy
 8014290:	f3bf 8f4f 	dsb	sy
 8014294:	623b      	str	r3, [r7, #32]
 8014296:	bf00      	nop
 8014298:	e7fe      	b.n	8014298 <xQueueGenericSendFromISR+0x88>
 801429a:	f002 f975 	bl	8016588 <vPortValidateInterruptPriority>
 801429e:	f3ef 8211 	mrs	r2, BASEPRI
 80142a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a6:	f383 8811 	msr	BASEPRI, r3
 80142aa:	f3bf 8f6f 	isb	sy
 80142ae:	f3bf 8f4f 	dsb	sy
 80142b2:	61fa      	str	r2, [r7, #28]
 80142b4:	61bb      	str	r3, [r7, #24]
 80142b6:	69fb      	ldr	r3, [r7, #28]
 80142b8:	637b      	str	r3, [r7, #52]	; 0x34
 80142ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80142be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d302      	bcc.n	80142cc <xQueueGenericSendFromISR+0xbc>
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	2b02      	cmp	r3, #2
 80142ca:	d12f      	bne.n	801432c <xQueueGenericSendFromISR+0x11c>
 80142cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80142d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142dc:	683a      	ldr	r2, [r7, #0]
 80142de:	68b9      	ldr	r1, [r7, #8]
 80142e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80142e2:	f000 f991 	bl	8014608 <prvCopyDataToQueue>
 80142e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80142ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142ee:	d112      	bne.n	8014316 <xQueueGenericSendFromISR+0x106>
 80142f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d016      	beq.n	8014326 <xQueueGenericSendFromISR+0x116>
 80142f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142fa:	3324      	adds	r3, #36	; 0x24
 80142fc:	4618      	mov	r0, r3
 80142fe:	f001 f8af 	bl	8015460 <xTaskRemoveFromEventList>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00e      	beq.n	8014326 <xQueueGenericSendFromISR+0x116>
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00b      	beq.n	8014326 <xQueueGenericSendFromISR+0x116>
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2201      	movs	r2, #1
 8014312:	601a      	str	r2, [r3, #0]
 8014314:	e007      	b.n	8014326 <xQueueGenericSendFromISR+0x116>
 8014316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801431a:	3301      	adds	r3, #1
 801431c:	b2db      	uxtb	r3, r3
 801431e:	b25a      	sxtb	r2, r3
 8014320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014326:	2301      	movs	r3, #1
 8014328:	63fb      	str	r3, [r7, #60]	; 0x3c
 801432a:	e001      	b.n	8014330 <xQueueGenericSendFromISR+0x120>
 801432c:	2300      	movs	r3, #0
 801432e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014332:	617b      	str	r3, [r7, #20]
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	f383 8811 	msr	BASEPRI, r3
 801433a:	bf00      	nop
 801433c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801433e:	4618      	mov	r0, r3
 8014340:	3740      	adds	r7, #64	; 0x40
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
	...

08014348 <xQueueReceive>:
 8014348:	b580      	push	{r7, lr}
 801434a:	b08c      	sub	sp, #48	; 0x30
 801434c:	af00      	add	r7, sp, #0
 801434e:	60f8      	str	r0, [r7, #12]
 8014350:	60b9      	str	r1, [r7, #8]
 8014352:	607a      	str	r2, [r7, #4]
 8014354:	2300      	movs	r3, #0
 8014356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	62bb      	str	r3, [r7, #40]	; 0x28
 801435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801435e:	2b00      	cmp	r3, #0
 8014360:	d10a      	bne.n	8014378 <xQueueReceive+0x30>
 8014362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014366:	f383 8811 	msr	BASEPRI, r3
 801436a:	f3bf 8f6f 	isb	sy
 801436e:	f3bf 8f4f 	dsb	sy
 8014372:	623b      	str	r3, [r7, #32]
 8014374:	bf00      	nop
 8014376:	e7fe      	b.n	8014376 <xQueueReceive+0x2e>
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d103      	bne.n	8014386 <xQueueReceive+0x3e>
 801437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014382:	2b00      	cmp	r3, #0
 8014384:	d101      	bne.n	801438a <xQueueReceive+0x42>
 8014386:	2301      	movs	r3, #1
 8014388:	e000      	b.n	801438c <xQueueReceive+0x44>
 801438a:	2300      	movs	r3, #0
 801438c:	2b00      	cmp	r3, #0
 801438e:	d10a      	bne.n	80143a6 <xQueueReceive+0x5e>
 8014390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014394:	f383 8811 	msr	BASEPRI, r3
 8014398:	f3bf 8f6f 	isb	sy
 801439c:	f3bf 8f4f 	dsb	sy
 80143a0:	61fb      	str	r3, [r7, #28]
 80143a2:	bf00      	nop
 80143a4:	e7fe      	b.n	80143a4 <xQueueReceive+0x5c>
 80143a6:	f001 fa7b 	bl	80158a0 <xTaskGetSchedulerState>
 80143aa:	4603      	mov	r3, r0
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d102      	bne.n	80143b6 <xQueueReceive+0x6e>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d101      	bne.n	80143ba <xQueueReceive+0x72>
 80143b6:	2301      	movs	r3, #1
 80143b8:	e000      	b.n	80143bc <xQueueReceive+0x74>
 80143ba:	2300      	movs	r3, #0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d10a      	bne.n	80143d6 <xQueueReceive+0x8e>
 80143c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c4:	f383 8811 	msr	BASEPRI, r3
 80143c8:	f3bf 8f6f 	isb	sy
 80143cc:	f3bf 8f4f 	dsb	sy
 80143d0:	61bb      	str	r3, [r7, #24]
 80143d2:	bf00      	nop
 80143d4:	e7fe      	b.n	80143d4 <xQueueReceive+0x8c>
 80143d6:	f001 fff5 	bl	80163c4 <vPortEnterCritical>
 80143da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143de:	627b      	str	r3, [r7, #36]	; 0x24
 80143e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d01f      	beq.n	8014426 <xQueueReceive+0xde>
 80143e6:	68b9      	ldr	r1, [r7, #8]
 80143e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ea:	f000 f977 	bl	80146dc <prvCopyDataFromQueue>
 80143ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f0:	1e5a      	subs	r2, r3, #1
 80143f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f4:	639a      	str	r2, [r3, #56]	; 0x38
 80143f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d00f      	beq.n	801441e <xQueueReceive+0xd6>
 80143fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014400:	3310      	adds	r3, #16
 8014402:	4618      	mov	r0, r3
 8014404:	f001 f82c 	bl	8015460 <xTaskRemoveFromEventList>
 8014408:	4603      	mov	r3, r0
 801440a:	2b00      	cmp	r3, #0
 801440c:	d007      	beq.n	801441e <xQueueReceive+0xd6>
 801440e:	4b3d      	ldr	r3, [pc, #244]	; (8014504 <xQueueReceive+0x1bc>)
 8014410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014414:	601a      	str	r2, [r3, #0]
 8014416:	f3bf 8f4f 	dsb	sy
 801441a:	f3bf 8f6f 	isb	sy
 801441e:	f002 f801 	bl	8016424 <vPortExitCritical>
 8014422:	2301      	movs	r3, #1
 8014424:	e069      	b.n	80144fa <xQueueReceive+0x1b2>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d103      	bne.n	8014434 <xQueueReceive+0xec>
 801442c:	f001 fffa 	bl	8016424 <vPortExitCritical>
 8014430:	2300      	movs	r3, #0
 8014432:	e062      	b.n	80144fa <xQueueReceive+0x1b2>
 8014434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014436:	2b00      	cmp	r3, #0
 8014438:	d106      	bne.n	8014448 <xQueueReceive+0x100>
 801443a:	f107 0310 	add.w	r3, r7, #16
 801443e:	4618      	mov	r0, r3
 8014440:	f001 f8d4 	bl	80155ec <vTaskInternalSetTimeOutState>
 8014444:	2301      	movs	r3, #1
 8014446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014448:	f001 ffec 	bl	8016424 <vPortExitCritical>
 801444c:	f000 fda0 	bl	8014f90 <vTaskSuspendAll>
 8014450:	f001 ffb8 	bl	80163c4 <vPortEnterCritical>
 8014454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801445a:	b25b      	sxtb	r3, r3
 801445c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014460:	d103      	bne.n	801446a <xQueueReceive+0x122>
 8014462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014464:	2200      	movs	r2, #0
 8014466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801446c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014470:	b25b      	sxtb	r3, r3
 8014472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014476:	d103      	bne.n	8014480 <xQueueReceive+0x138>
 8014478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801447a:	2200      	movs	r2, #0
 801447c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014480:	f001 ffd0 	bl	8016424 <vPortExitCritical>
 8014484:	1d3a      	adds	r2, r7, #4
 8014486:	f107 0310 	add.w	r3, r7, #16
 801448a:	4611      	mov	r1, r2
 801448c:	4618      	mov	r0, r3
 801448e:	f001 f8c3 	bl	8015618 <xTaskCheckForTimeOut>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d123      	bne.n	80144e0 <xQueueReceive+0x198>
 8014498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801449a:	f000 f997 	bl	80147cc <prvIsQueueEmpty>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d017      	beq.n	80144d4 <xQueueReceive+0x18c>
 80144a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a6:	3324      	adds	r3, #36	; 0x24
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	4611      	mov	r1, r2
 80144ac:	4618      	mov	r0, r3
 80144ae:	f000 ff4b 	bl	8015348 <vTaskPlaceOnEventList>
 80144b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144b4:	f000 f938 	bl	8014728 <prvUnlockQueue>
 80144b8:	f000 fd78 	bl	8014fac <xTaskResumeAll>
 80144bc:	4603      	mov	r3, r0
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d189      	bne.n	80143d6 <xQueueReceive+0x8e>
 80144c2:	4b10      	ldr	r3, [pc, #64]	; (8014504 <xQueueReceive+0x1bc>)
 80144c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144c8:	601a      	str	r2, [r3, #0]
 80144ca:	f3bf 8f4f 	dsb	sy
 80144ce:	f3bf 8f6f 	isb	sy
 80144d2:	e780      	b.n	80143d6 <xQueueReceive+0x8e>
 80144d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144d6:	f000 f927 	bl	8014728 <prvUnlockQueue>
 80144da:	f000 fd67 	bl	8014fac <xTaskResumeAll>
 80144de:	e77a      	b.n	80143d6 <xQueueReceive+0x8e>
 80144e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144e2:	f000 f921 	bl	8014728 <prvUnlockQueue>
 80144e6:	f000 fd61 	bl	8014fac <xTaskResumeAll>
 80144ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144ec:	f000 f96e 	bl	80147cc <prvIsQueueEmpty>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	f43f af6f 	beq.w	80143d6 <xQueueReceive+0x8e>
 80144f8:	2300      	movs	r3, #0
 80144fa:	4618      	mov	r0, r3
 80144fc:	3730      	adds	r7, #48	; 0x30
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	e000ed04 	.word	0xe000ed04

08014508 <xQueueReceiveFromISR>:
 8014508:	b580      	push	{r7, lr}
 801450a:	b08e      	sub	sp, #56	; 0x38
 801450c:	af00      	add	r7, sp, #0
 801450e:	60f8      	str	r0, [r7, #12]
 8014510:	60b9      	str	r1, [r7, #8]
 8014512:	607a      	str	r2, [r7, #4]
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	633b      	str	r3, [r7, #48]	; 0x30
 8014518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451a:	2b00      	cmp	r3, #0
 801451c:	d10a      	bne.n	8014534 <xQueueReceiveFromISR+0x2c>
 801451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014522:	f383 8811 	msr	BASEPRI, r3
 8014526:	f3bf 8f6f 	isb	sy
 801452a:	f3bf 8f4f 	dsb	sy
 801452e:	623b      	str	r3, [r7, #32]
 8014530:	bf00      	nop
 8014532:	e7fe      	b.n	8014532 <xQueueReceiveFromISR+0x2a>
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d103      	bne.n	8014542 <xQueueReceiveFromISR+0x3a>
 801453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801453e:	2b00      	cmp	r3, #0
 8014540:	d101      	bne.n	8014546 <xQueueReceiveFromISR+0x3e>
 8014542:	2301      	movs	r3, #1
 8014544:	e000      	b.n	8014548 <xQueueReceiveFromISR+0x40>
 8014546:	2300      	movs	r3, #0
 8014548:	2b00      	cmp	r3, #0
 801454a:	d10a      	bne.n	8014562 <xQueueReceiveFromISR+0x5a>
 801454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014550:	f383 8811 	msr	BASEPRI, r3
 8014554:	f3bf 8f6f 	isb	sy
 8014558:	f3bf 8f4f 	dsb	sy
 801455c:	61fb      	str	r3, [r7, #28]
 801455e:	bf00      	nop
 8014560:	e7fe      	b.n	8014560 <xQueueReceiveFromISR+0x58>
 8014562:	f002 f811 	bl	8016588 <vPortValidateInterruptPriority>
 8014566:	f3ef 8211 	mrs	r2, BASEPRI
 801456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801456e:	f383 8811 	msr	BASEPRI, r3
 8014572:	f3bf 8f6f 	isb	sy
 8014576:	f3bf 8f4f 	dsb	sy
 801457a:	61ba      	str	r2, [r7, #24]
 801457c:	617b      	str	r3, [r7, #20]
 801457e:	69bb      	ldr	r3, [r7, #24]
 8014580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014586:	62bb      	str	r3, [r7, #40]	; 0x28
 8014588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458a:	2b00      	cmp	r3, #0
 801458c:	d02f      	beq.n	80145ee <xQueueReceiveFromISR+0xe6>
 801458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014598:	68b9      	ldr	r1, [r7, #8]
 801459a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801459c:	f000 f89e 	bl	80146dc <prvCopyDataFromQueue>
 80145a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a2:	1e5a      	subs	r2, r3, #1
 80145a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a6:	639a      	str	r2, [r3, #56]	; 0x38
 80145a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80145ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145b0:	d112      	bne.n	80145d8 <xQueueReceiveFromISR+0xd0>
 80145b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b4:	691b      	ldr	r3, [r3, #16]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d016      	beq.n	80145e8 <xQueueReceiveFromISR+0xe0>
 80145ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145bc:	3310      	adds	r3, #16
 80145be:	4618      	mov	r0, r3
 80145c0:	f000 ff4e 	bl	8015460 <xTaskRemoveFromEventList>
 80145c4:	4603      	mov	r3, r0
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d00e      	beq.n	80145e8 <xQueueReceiveFromISR+0xe0>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d00b      	beq.n	80145e8 <xQueueReceiveFromISR+0xe0>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2201      	movs	r2, #1
 80145d4:	601a      	str	r2, [r3, #0]
 80145d6:	e007      	b.n	80145e8 <xQueueReceiveFromISR+0xe0>
 80145d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145dc:	3301      	adds	r3, #1
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	b25a      	sxtb	r2, r3
 80145e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145e8:	2301      	movs	r3, #1
 80145ea:	637b      	str	r3, [r7, #52]	; 0x34
 80145ec:	e001      	b.n	80145f2 <xQueueReceiveFromISR+0xea>
 80145ee:	2300      	movs	r3, #0
 80145f0:	637b      	str	r3, [r7, #52]	; 0x34
 80145f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f4:	613b      	str	r3, [r7, #16]
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	f383 8811 	msr	BASEPRI, r3
 80145fc:	bf00      	nop
 80145fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014600:	4618      	mov	r0, r3
 8014602:	3738      	adds	r7, #56	; 0x38
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <prvCopyDataToQueue>:
 8014608:	b580      	push	{r7, lr}
 801460a:	b086      	sub	sp, #24
 801460c:	af00      	add	r7, sp, #0
 801460e:	60f8      	str	r0, [r7, #12]
 8014610:	60b9      	str	r1, [r7, #8]
 8014612:	607a      	str	r2, [r7, #4]
 8014614:	2300      	movs	r3, #0
 8014616:	617b      	str	r3, [r7, #20]
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801461c:	613b      	str	r3, [r7, #16]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014622:	2b00      	cmp	r3, #0
 8014624:	d10d      	bne.n	8014642 <prvCopyDataToQueue+0x3a>
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d14d      	bne.n	80146ca <prvCopyDataToQueue+0xc2>
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	689b      	ldr	r3, [r3, #8]
 8014632:	4618      	mov	r0, r3
 8014634:	f001 f952 	bl	80158dc <xTaskPriorityDisinherit>
 8014638:	6178      	str	r0, [r7, #20]
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2200      	movs	r2, #0
 801463e:	609a      	str	r2, [r3, #8]
 8014640:	e043      	b.n	80146ca <prvCopyDataToQueue+0xc2>
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d119      	bne.n	801467c <prvCopyDataToQueue+0x74>
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	6858      	ldr	r0, [r3, #4]
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014650:	461a      	mov	r2, r3
 8014652:	68b9      	ldr	r1, [r7, #8]
 8014654:	f002 f9fc 	bl	8016a50 <memcpy>
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	685a      	ldr	r2, [r3, #4]
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014660:	441a      	add	r2, r3
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	605a      	str	r2, [r3, #4]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	685a      	ldr	r2, [r3, #4]
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	689b      	ldr	r3, [r3, #8]
 801466e:	429a      	cmp	r2, r3
 8014670:	d32b      	bcc.n	80146ca <prvCopyDataToQueue+0xc2>
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	605a      	str	r2, [r3, #4]
 801467a:	e026      	b.n	80146ca <prvCopyDataToQueue+0xc2>
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	68d8      	ldr	r0, [r3, #12]
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014684:	461a      	mov	r2, r3
 8014686:	68b9      	ldr	r1, [r7, #8]
 8014688:	f002 f9e2 	bl	8016a50 <memcpy>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	68da      	ldr	r2, [r3, #12]
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014694:	425b      	negs	r3, r3
 8014696:	441a      	add	r2, r3
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	60da      	str	r2, [r3, #12]
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	68da      	ldr	r2, [r3, #12]
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d207      	bcs.n	80146b8 <prvCopyDataToQueue+0xb0>
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	689a      	ldr	r2, [r3, #8]
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146b0:	425b      	negs	r3, r3
 80146b2:	441a      	add	r2, r3
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	60da      	str	r2, [r3, #12]
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2b02      	cmp	r3, #2
 80146bc:	d105      	bne.n	80146ca <prvCopyDataToQueue+0xc2>
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d002      	beq.n	80146ca <prvCopyDataToQueue+0xc2>
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	3b01      	subs	r3, #1
 80146c8:	613b      	str	r3, [r7, #16]
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	1c5a      	adds	r2, r3, #1
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	639a      	str	r2, [r3, #56]	; 0x38
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	4618      	mov	r0, r3
 80146d6:	3718      	adds	r7, #24
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <prvCopyDataFromQueue>:
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d018      	beq.n	8014720 <prvCopyDataFromQueue+0x44>
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	68da      	ldr	r2, [r3, #12]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146f6:	441a      	add	r2, r3
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	60da      	str	r2, [r3, #12]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	68da      	ldr	r2, [r3, #12]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	689b      	ldr	r3, [r3, #8]
 8014704:	429a      	cmp	r2, r3
 8014706:	d303      	bcc.n	8014710 <prvCopyDataFromQueue+0x34>
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	681a      	ldr	r2, [r3, #0]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	60da      	str	r2, [r3, #12]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	68d9      	ldr	r1, [r3, #12]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014718:	461a      	mov	r2, r3
 801471a:	6838      	ldr	r0, [r7, #0]
 801471c:	f002 f998 	bl	8016a50 <memcpy>
 8014720:	bf00      	nop
 8014722:	3708      	adds	r7, #8
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}

08014728 <prvUnlockQueue>:
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	f001 fe48 	bl	80163c4 <vPortEnterCritical>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801473a:	73fb      	strb	r3, [r7, #15]
 801473c:	e011      	b.n	8014762 <prvUnlockQueue+0x3a>
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014742:	2b00      	cmp	r3, #0
 8014744:	d012      	beq.n	801476c <prvUnlockQueue+0x44>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	3324      	adds	r3, #36	; 0x24
 801474a:	4618      	mov	r0, r3
 801474c:	f000 fe88 	bl	8015460 <xTaskRemoveFromEventList>
 8014750:	4603      	mov	r3, r0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d001      	beq.n	801475a <prvUnlockQueue+0x32>
 8014756:	f000 ffc1 	bl	80156dc <vTaskMissedYield>
 801475a:	7bfb      	ldrb	r3, [r7, #15]
 801475c:	3b01      	subs	r3, #1
 801475e:	b2db      	uxtb	r3, r3
 8014760:	73fb      	strb	r3, [r7, #15]
 8014762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014766:	2b00      	cmp	r3, #0
 8014768:	dce9      	bgt.n	801473e <prvUnlockQueue+0x16>
 801476a:	e000      	b.n	801476e <prvUnlockQueue+0x46>
 801476c:	bf00      	nop
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	22ff      	movs	r2, #255	; 0xff
 8014772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014776:	f001 fe55 	bl	8016424 <vPortExitCritical>
 801477a:	f001 fe23 	bl	80163c4 <vPortEnterCritical>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014784:	73bb      	strb	r3, [r7, #14]
 8014786:	e011      	b.n	80147ac <prvUnlockQueue+0x84>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	691b      	ldr	r3, [r3, #16]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d012      	beq.n	80147b6 <prvUnlockQueue+0x8e>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	3310      	adds	r3, #16
 8014794:	4618      	mov	r0, r3
 8014796:	f000 fe63 	bl	8015460 <xTaskRemoveFromEventList>
 801479a:	4603      	mov	r3, r0
 801479c:	2b00      	cmp	r3, #0
 801479e:	d001      	beq.n	80147a4 <prvUnlockQueue+0x7c>
 80147a0:	f000 ff9c 	bl	80156dc <vTaskMissedYield>
 80147a4:	7bbb      	ldrb	r3, [r7, #14]
 80147a6:	3b01      	subs	r3, #1
 80147a8:	b2db      	uxtb	r3, r3
 80147aa:	73bb      	strb	r3, [r7, #14]
 80147ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	dce9      	bgt.n	8014788 <prvUnlockQueue+0x60>
 80147b4:	e000      	b.n	80147b8 <prvUnlockQueue+0x90>
 80147b6:	bf00      	nop
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	22ff      	movs	r2, #255	; 0xff
 80147bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80147c0:	f001 fe30 	bl	8016424 <vPortExitCritical>
 80147c4:	bf00      	nop
 80147c6:	3710      	adds	r7, #16
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <prvIsQueueEmpty>:
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b084      	sub	sp, #16
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	f001 fdf6 	bl	80163c4 <vPortEnterCritical>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d102      	bne.n	80147e6 <prvIsQueueEmpty+0x1a>
 80147e0:	2301      	movs	r3, #1
 80147e2:	60fb      	str	r3, [r7, #12]
 80147e4:	e001      	b.n	80147ea <prvIsQueueEmpty+0x1e>
 80147e6:	2300      	movs	r3, #0
 80147e8:	60fb      	str	r3, [r7, #12]
 80147ea:	f001 fe1b 	bl	8016424 <vPortExitCritical>
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	4618      	mov	r0, r3
 80147f2:	3710      	adds	r7, #16
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}

080147f8 <prvIsQueueFull>:
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	f001 fde0 	bl	80163c4 <vPortEnterCritical>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801480c:	429a      	cmp	r2, r3
 801480e:	d102      	bne.n	8014816 <prvIsQueueFull+0x1e>
 8014810:	2301      	movs	r3, #1
 8014812:	60fb      	str	r3, [r7, #12]
 8014814:	e001      	b.n	801481a <prvIsQueueFull+0x22>
 8014816:	2300      	movs	r3, #0
 8014818:	60fb      	str	r3, [r7, #12]
 801481a:	f001 fe03 	bl	8016424 <vPortExitCritical>
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <vQueueAddToRegistry>:
 8014828:	b480      	push	{r7}
 801482a:	b085      	sub	sp, #20
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
 8014832:	2300      	movs	r3, #0
 8014834:	60fb      	str	r3, [r7, #12]
 8014836:	e014      	b.n	8014862 <vQueueAddToRegistry+0x3a>
 8014838:	4a0f      	ldr	r2, [pc, #60]	; (8014878 <vQueueAddToRegistry+0x50>)
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d10b      	bne.n	801485c <vQueueAddToRegistry+0x34>
 8014844:	490c      	ldr	r1, [pc, #48]	; (8014878 <vQueueAddToRegistry+0x50>)
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	683a      	ldr	r2, [r7, #0]
 801484a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801484e:	4a0a      	ldr	r2, [pc, #40]	; (8014878 <vQueueAddToRegistry+0x50>)
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	00db      	lsls	r3, r3, #3
 8014854:	4413      	add	r3, r2
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	605a      	str	r2, [r3, #4]
 801485a:	e006      	b.n	801486a <vQueueAddToRegistry+0x42>
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	3301      	adds	r3, #1
 8014860:	60fb      	str	r3, [r7, #12]
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2b07      	cmp	r3, #7
 8014866:	d9e7      	bls.n	8014838 <vQueueAddToRegistry+0x10>
 8014868:	bf00      	nop
 801486a:	bf00      	nop
 801486c:	3714      	adds	r7, #20
 801486e:	46bd      	mov	sp, r7
 8014870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014874:	4770      	bx	lr
 8014876:	bf00      	nop
 8014878:	240017ec 	.word	0x240017ec

0801487c <vQueueWaitForMessageRestricted>:
 801487c:	b580      	push	{r7, lr}
 801487e:	b086      	sub	sp, #24
 8014880:	af00      	add	r7, sp, #0
 8014882:	60f8      	str	r0, [r7, #12]
 8014884:	60b9      	str	r1, [r7, #8]
 8014886:	607a      	str	r2, [r7, #4]
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	617b      	str	r3, [r7, #20]
 801488c:	f001 fd9a 	bl	80163c4 <vPortEnterCritical>
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014896:	b25b      	sxtb	r3, r3
 8014898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801489c:	d103      	bne.n	80148a6 <vQueueWaitForMessageRestricted+0x2a>
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	2200      	movs	r2, #0
 80148a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148a6:	697b      	ldr	r3, [r7, #20]
 80148a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148ac:	b25b      	sxtb	r3, r3
 80148ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148b2:	d103      	bne.n	80148bc <vQueueWaitForMessageRestricted+0x40>
 80148b4:	697b      	ldr	r3, [r7, #20]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80148bc:	f001 fdb2 	bl	8016424 <vPortExitCritical>
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d106      	bne.n	80148d6 <vQueueWaitForMessageRestricted+0x5a>
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	3324      	adds	r3, #36	; 0x24
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	68b9      	ldr	r1, [r7, #8]
 80148d0:	4618      	mov	r0, r3
 80148d2:	f000 fd99 	bl	8015408 <vTaskPlaceOnEventListRestricted>
 80148d6:	6978      	ldr	r0, [r7, #20]
 80148d8:	f7ff ff26 	bl	8014728 <prvUnlockQueue>
 80148dc:	bf00      	nop
 80148de:	3718      	adds	r7, #24
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <xTaskCreateStatic>:
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b08e      	sub	sp, #56	; 0x38
 80148e8:	af04      	add	r7, sp, #16
 80148ea:	60f8      	str	r0, [r7, #12]
 80148ec:	60b9      	str	r1, [r7, #8]
 80148ee:	607a      	str	r2, [r7, #4]
 80148f0:	603b      	str	r3, [r7, #0]
 80148f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d10a      	bne.n	801490e <xTaskCreateStatic+0x2a>
 80148f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fc:	f383 8811 	msr	BASEPRI, r3
 8014900:	f3bf 8f6f 	isb	sy
 8014904:	f3bf 8f4f 	dsb	sy
 8014908:	623b      	str	r3, [r7, #32]
 801490a:	bf00      	nop
 801490c:	e7fe      	b.n	801490c <xTaskCreateStatic+0x28>
 801490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014910:	2b00      	cmp	r3, #0
 8014912:	d10a      	bne.n	801492a <xTaskCreateStatic+0x46>
 8014914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014918:	f383 8811 	msr	BASEPRI, r3
 801491c:	f3bf 8f6f 	isb	sy
 8014920:	f3bf 8f4f 	dsb	sy
 8014924:	61fb      	str	r3, [r7, #28]
 8014926:	bf00      	nop
 8014928:	e7fe      	b.n	8014928 <xTaskCreateStatic+0x44>
 801492a:	235c      	movs	r3, #92	; 0x5c
 801492c:	613b      	str	r3, [r7, #16]
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	2b5c      	cmp	r3, #92	; 0x5c
 8014932:	d00a      	beq.n	801494a <xTaskCreateStatic+0x66>
 8014934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014938:	f383 8811 	msr	BASEPRI, r3
 801493c:	f3bf 8f6f 	isb	sy
 8014940:	f3bf 8f4f 	dsb	sy
 8014944:	61bb      	str	r3, [r7, #24]
 8014946:	bf00      	nop
 8014948:	e7fe      	b.n	8014948 <xTaskCreateStatic+0x64>
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494e:	2b00      	cmp	r3, #0
 8014950:	d01e      	beq.n	8014990 <xTaskCreateStatic+0xac>
 8014952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014954:	2b00      	cmp	r3, #0
 8014956:	d01b      	beq.n	8014990 <xTaskCreateStatic+0xac>
 8014958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801495a:	627b      	str	r3, [r7, #36]	; 0x24
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014960:	631a      	str	r2, [r3, #48]	; 0x30
 8014962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014964:	2202      	movs	r2, #2
 8014966:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 801496a:	2300      	movs	r3, #0
 801496c:	9303      	str	r3, [sp, #12]
 801496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014970:	9302      	str	r3, [sp, #8]
 8014972:	f107 0314 	add.w	r3, r7, #20
 8014976:	9301      	str	r3, [sp, #4]
 8014978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497a:	9300      	str	r3, [sp, #0]
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	687a      	ldr	r2, [r7, #4]
 8014980:	68b9      	ldr	r1, [r7, #8]
 8014982:	68f8      	ldr	r0, [r7, #12]
 8014984:	f000 f850 	bl	8014a28 <prvInitialiseNewTask>
 8014988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801498a:	f000 f8dd 	bl	8014b48 <prvAddNewTaskToReadyList>
 801498e:	e001      	b.n	8014994 <xTaskCreateStatic+0xb0>
 8014990:	2300      	movs	r3, #0
 8014992:	617b      	str	r3, [r7, #20]
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	4618      	mov	r0, r3
 8014998:	3728      	adds	r7, #40	; 0x28
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <xTaskCreate>:
 801499e:	b580      	push	{r7, lr}
 80149a0:	b08c      	sub	sp, #48	; 0x30
 80149a2:	af04      	add	r7, sp, #16
 80149a4:	60f8      	str	r0, [r7, #12]
 80149a6:	60b9      	str	r1, [r7, #8]
 80149a8:	603b      	str	r3, [r7, #0]
 80149aa:	4613      	mov	r3, r2
 80149ac:	80fb      	strh	r3, [r7, #6]
 80149ae:	88fb      	ldrh	r3, [r7, #6]
 80149b0:	009b      	lsls	r3, r3, #2
 80149b2:	4618      	mov	r0, r3
 80149b4:	f001 fe28 	bl	8016608 <pvPortMalloc>
 80149b8:	6178      	str	r0, [r7, #20]
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00e      	beq.n	80149de <xTaskCreate+0x40>
 80149c0:	205c      	movs	r0, #92	; 0x5c
 80149c2:	f001 fe21 	bl	8016608 <pvPortMalloc>
 80149c6:	61f8      	str	r0, [r7, #28]
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d003      	beq.n	80149d6 <xTaskCreate+0x38>
 80149ce:	69fb      	ldr	r3, [r7, #28]
 80149d0:	697a      	ldr	r2, [r7, #20]
 80149d2:	631a      	str	r2, [r3, #48]	; 0x30
 80149d4:	e005      	b.n	80149e2 <xTaskCreate+0x44>
 80149d6:	6978      	ldr	r0, [r7, #20]
 80149d8:	f001 fee2 	bl	80167a0 <vPortFree>
 80149dc:	e001      	b.n	80149e2 <xTaskCreate+0x44>
 80149de:	2300      	movs	r3, #0
 80149e0:	61fb      	str	r3, [r7, #28]
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d017      	beq.n	8014a18 <xTaskCreate+0x7a>
 80149e8:	69fb      	ldr	r3, [r7, #28]
 80149ea:	2200      	movs	r2, #0
 80149ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80149f0:	88fa      	ldrh	r2, [r7, #6]
 80149f2:	2300      	movs	r3, #0
 80149f4:	9303      	str	r3, [sp, #12]
 80149f6:	69fb      	ldr	r3, [r7, #28]
 80149f8:	9302      	str	r3, [sp, #8]
 80149fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fc:	9301      	str	r3, [sp, #4]
 80149fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a00:	9300      	str	r3, [sp, #0]
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	68b9      	ldr	r1, [r7, #8]
 8014a06:	68f8      	ldr	r0, [r7, #12]
 8014a08:	f000 f80e 	bl	8014a28 <prvInitialiseNewTask>
 8014a0c:	69f8      	ldr	r0, [r7, #28]
 8014a0e:	f000 f89b 	bl	8014b48 <prvAddNewTaskToReadyList>
 8014a12:	2301      	movs	r3, #1
 8014a14:	61bb      	str	r3, [r7, #24]
 8014a16:	e002      	b.n	8014a1e <xTaskCreate+0x80>
 8014a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a1c:	61bb      	str	r3, [r7, #24]
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	4618      	mov	r0, r3
 8014a22:	3720      	adds	r7, #32
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <prvInitialiseNewTask>:
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b088      	sub	sp, #32
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	60f8      	str	r0, [r7, #12]
 8014a30:	60b9      	str	r1, [r7, #8]
 8014a32:	607a      	str	r2, [r7, #4]
 8014a34:	603b      	str	r3, [r7, #0]
 8014a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	009b      	lsls	r3, r3, #2
 8014a3e:	461a      	mov	r2, r3
 8014a40:	21a5      	movs	r1, #165	; 0xa5
 8014a42:	f002 f813 	bl	8016a6c <memset>
 8014a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a4a:	6879      	ldr	r1, [r7, #4]
 8014a4c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014a50:	440b      	add	r3, r1
 8014a52:	009b      	lsls	r3, r3, #2
 8014a54:	4413      	add	r3, r2
 8014a56:	61bb      	str	r3, [r7, #24]
 8014a58:	69bb      	ldr	r3, [r7, #24]
 8014a5a:	f023 0307 	bic.w	r3, r3, #7
 8014a5e:	61bb      	str	r3, [r7, #24]
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	f003 0307 	and.w	r3, r3, #7
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d00a      	beq.n	8014a80 <prvInitialiseNewTask+0x58>
 8014a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a6e:	f383 8811 	msr	BASEPRI, r3
 8014a72:	f3bf 8f6f 	isb	sy
 8014a76:	f3bf 8f4f 	dsb	sy
 8014a7a:	617b      	str	r3, [r7, #20]
 8014a7c:	bf00      	nop
 8014a7e:	e7fe      	b.n	8014a7e <prvInitialiseNewTask+0x56>
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d01f      	beq.n	8014ac6 <prvInitialiseNewTask+0x9e>
 8014a86:	2300      	movs	r3, #0
 8014a88:	61fb      	str	r3, [r7, #28]
 8014a8a:	e012      	b.n	8014ab2 <prvInitialiseNewTask+0x8a>
 8014a8c:	68ba      	ldr	r2, [r7, #8]
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	4413      	add	r3, r2
 8014a92:	7819      	ldrb	r1, [r3, #0]
 8014a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a96:	69fb      	ldr	r3, [r7, #28]
 8014a98:	4413      	add	r3, r2
 8014a9a:	3334      	adds	r3, #52	; 0x34
 8014a9c:	460a      	mov	r2, r1
 8014a9e:	701a      	strb	r2, [r3, #0]
 8014aa0:	68ba      	ldr	r2, [r7, #8]
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d006      	beq.n	8014aba <prvInitialiseNewTask+0x92>
 8014aac:	69fb      	ldr	r3, [r7, #28]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	61fb      	str	r3, [r7, #28]
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	2b0f      	cmp	r3, #15
 8014ab6:	d9e9      	bls.n	8014a8c <prvInitialiseNewTask+0x64>
 8014ab8:	e000      	b.n	8014abc <prvInitialiseNewTask+0x94>
 8014aba:	bf00      	nop
 8014abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014abe:	2200      	movs	r2, #0
 8014ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014ac4:	e003      	b.n	8014ace <prvInitialiseNewTask+0xa6>
 8014ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ac8:	2200      	movs	r2, #0
 8014aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8014ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad0:	2b37      	cmp	r3, #55	; 0x37
 8014ad2:	d901      	bls.n	8014ad8 <prvInitialiseNewTask+0xb0>
 8014ad4:	2337      	movs	r3, #55	; 0x37
 8014ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8014ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ae2:	64da      	str	r2, [r3, #76]	; 0x4c
 8014ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	651a      	str	r2, [r3, #80]	; 0x50
 8014aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aec:	3304      	adds	r3, #4
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7ff f8be 	bl	8013c70 <vListInitialiseItem>
 8014af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af6:	3318      	adds	r3, #24
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7ff f8b9 	bl	8013c70 <vListInitialiseItem>
 8014afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b02:	611a      	str	r2, [r3, #16]
 8014b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b0c:	619a      	str	r2, [r3, #24]
 8014b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b12:	625a      	str	r2, [r3, #36]	; 0x24
 8014b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b16:	2200      	movs	r2, #0
 8014b18:	655a      	str	r2, [r3, #84]	; 0x54
 8014b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014b22:	683a      	ldr	r2, [r7, #0]
 8014b24:	68f9      	ldr	r1, [r7, #12]
 8014b26:	69b8      	ldr	r0, [r7, #24]
 8014b28:	f001 fb20 	bl	801616c <pxPortInitialiseStack>
 8014b2c:	4602      	mov	r2, r0
 8014b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b30:	601a      	str	r2, [r3, #0]
 8014b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d002      	beq.n	8014b3e <prvInitialiseNewTask+0x116>
 8014b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b3c:	601a      	str	r2, [r3, #0]
 8014b3e:	bf00      	nop
 8014b40:	3720      	adds	r7, #32
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
	...

08014b48 <prvAddNewTaskToReadyList>:
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	f001 fc38 	bl	80163c4 <vPortEnterCritical>
 8014b54:	4b2d      	ldr	r3, [pc, #180]	; (8014c0c <prvAddNewTaskToReadyList+0xc4>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	4a2c      	ldr	r2, [pc, #176]	; (8014c0c <prvAddNewTaskToReadyList+0xc4>)
 8014b5c:	6013      	str	r3, [r2, #0]
 8014b5e:	4b2c      	ldr	r3, [pc, #176]	; (8014c10 <prvAddNewTaskToReadyList+0xc8>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d109      	bne.n	8014b7a <prvAddNewTaskToReadyList+0x32>
 8014b66:	4a2a      	ldr	r2, [pc, #168]	; (8014c10 <prvAddNewTaskToReadyList+0xc8>)
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6013      	str	r3, [r2, #0]
 8014b6c:	4b27      	ldr	r3, [pc, #156]	; (8014c0c <prvAddNewTaskToReadyList+0xc4>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d110      	bne.n	8014b96 <prvAddNewTaskToReadyList+0x4e>
 8014b74:	f000 fdd6 	bl	8015724 <prvInitialiseTaskLists>
 8014b78:	e00d      	b.n	8014b96 <prvAddNewTaskToReadyList+0x4e>
 8014b7a:	4b26      	ldr	r3, [pc, #152]	; (8014c14 <prvAddNewTaskToReadyList+0xcc>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d109      	bne.n	8014b96 <prvAddNewTaskToReadyList+0x4e>
 8014b82:	4b23      	ldr	r3, [pc, #140]	; (8014c10 <prvAddNewTaskToReadyList+0xc8>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d802      	bhi.n	8014b96 <prvAddNewTaskToReadyList+0x4e>
 8014b90:	4a1f      	ldr	r2, [pc, #124]	; (8014c10 <prvAddNewTaskToReadyList+0xc8>)
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6013      	str	r3, [r2, #0]
 8014b96:	4b20      	ldr	r3, [pc, #128]	; (8014c18 <prvAddNewTaskToReadyList+0xd0>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	4a1e      	ldr	r2, [pc, #120]	; (8014c18 <prvAddNewTaskToReadyList+0xd0>)
 8014b9e:	6013      	str	r3, [r2, #0]
 8014ba0:	4b1d      	ldr	r3, [pc, #116]	; (8014c18 <prvAddNewTaskToReadyList+0xd0>)
 8014ba2:	681a      	ldr	r2, [r3, #0]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	645a      	str	r2, [r3, #68]	; 0x44
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bac:	4b1b      	ldr	r3, [pc, #108]	; (8014c1c <prvAddNewTaskToReadyList+0xd4>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d903      	bls.n	8014bbc <prvAddNewTaskToReadyList+0x74>
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bb8:	4a18      	ldr	r2, [pc, #96]	; (8014c1c <prvAddNewTaskToReadyList+0xd4>)
 8014bba:	6013      	str	r3, [r2, #0]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	4413      	add	r3, r2
 8014bc6:	009b      	lsls	r3, r3, #2
 8014bc8:	4a15      	ldr	r2, [pc, #84]	; (8014c20 <prvAddNewTaskToReadyList+0xd8>)
 8014bca:	441a      	add	r2, r3
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	3304      	adds	r3, #4
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	4610      	mov	r0, r2
 8014bd4:	f7ff f859 	bl	8013c8a <vListInsertEnd>
 8014bd8:	f001 fc24 	bl	8016424 <vPortExitCritical>
 8014bdc:	4b0d      	ldr	r3, [pc, #52]	; (8014c14 <prvAddNewTaskToReadyList+0xcc>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d00e      	beq.n	8014c02 <prvAddNewTaskToReadyList+0xba>
 8014be4:	4b0a      	ldr	r3, [pc, #40]	; (8014c10 <prvAddNewTaskToReadyList+0xc8>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d207      	bcs.n	8014c02 <prvAddNewTaskToReadyList+0xba>
 8014bf2:	4b0c      	ldr	r3, [pc, #48]	; (8014c24 <prvAddNewTaskToReadyList+0xdc>)
 8014bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bf8:	601a      	str	r2, [r3, #0]
 8014bfa:	f3bf 8f4f 	dsb	sy
 8014bfe:	f3bf 8f6f 	isb	sy
 8014c02:	bf00      	nop
 8014c04:	3708      	adds	r7, #8
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	bf00      	nop
 8014c0c:	24001d00 	.word	0x24001d00
 8014c10:	2400182c 	.word	0x2400182c
 8014c14:	24001d0c 	.word	0x24001d0c
 8014c18:	24001d1c 	.word	0x24001d1c
 8014c1c:	24001d08 	.word	0x24001d08
 8014c20:	24001830 	.word	0x24001830
 8014c24:	e000ed04 	.word	0xe000ed04

08014c28 <vTaskDelay>:
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b084      	sub	sp, #16
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	2300      	movs	r3, #0
 8014c32:	60fb      	str	r3, [r7, #12]
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d017      	beq.n	8014c6a <vTaskDelay+0x42>
 8014c3a:	4b13      	ldr	r3, [pc, #76]	; (8014c88 <vTaskDelay+0x60>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d00a      	beq.n	8014c58 <vTaskDelay+0x30>
 8014c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c46:	f383 8811 	msr	BASEPRI, r3
 8014c4a:	f3bf 8f6f 	isb	sy
 8014c4e:	f3bf 8f4f 	dsb	sy
 8014c52:	60bb      	str	r3, [r7, #8]
 8014c54:	bf00      	nop
 8014c56:	e7fe      	b.n	8014c56 <vTaskDelay+0x2e>
 8014c58:	f000 f99a 	bl	8014f90 <vTaskSuspendAll>
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f000 fec2 	bl	80159e8 <prvAddCurrentTaskToDelayedList>
 8014c64:	f000 f9a2 	bl	8014fac <xTaskResumeAll>
 8014c68:	60f8      	str	r0, [r7, #12]
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d107      	bne.n	8014c80 <vTaskDelay+0x58>
 8014c70:	4b06      	ldr	r3, [pc, #24]	; (8014c8c <vTaskDelay+0x64>)
 8014c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c76:	601a      	str	r2, [r3, #0]
 8014c78:	f3bf 8f4f 	dsb	sy
 8014c7c:	f3bf 8f6f 	isb	sy
 8014c80:	bf00      	nop
 8014c82:	3710      	adds	r7, #16
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	24001d28 	.word	0x24001d28
 8014c8c:	e000ed04 	.word	0xe000ed04

08014c90 <vTaskSuspend>:
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b084      	sub	sp, #16
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	f001 fb94 	bl	80163c4 <vPortEnterCritical>
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d102      	bne.n	8014ca8 <vTaskSuspend+0x18>
 8014ca2:	4b30      	ldr	r3, [pc, #192]	; (8014d64 <vTaskSuspend+0xd4>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	e000      	b.n	8014caa <vTaskSuspend+0x1a>
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	60fb      	str	r3, [r7, #12]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	3304      	adds	r3, #4
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7ff f847 	bl	8013d44 <uxListRemove>
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d004      	beq.n	8014cc8 <vTaskSuspend+0x38>
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	3318      	adds	r3, #24
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7ff f83e 	bl	8013d44 <uxListRemove>
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	3304      	adds	r3, #4
 8014ccc:	4619      	mov	r1, r3
 8014cce:	4826      	ldr	r0, [pc, #152]	; (8014d68 <vTaskSuspend+0xd8>)
 8014cd0:	f7fe ffdb 	bl	8013c8a <vListInsertEnd>
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014cda:	b2db      	uxtb	r3, r3
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	d103      	bne.n	8014ce8 <vTaskSuspend+0x58>
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014ce8:	f001 fb9c 	bl	8016424 <vPortExitCritical>
 8014cec:	4b1f      	ldr	r3, [pc, #124]	; (8014d6c <vTaskSuspend+0xdc>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d005      	beq.n	8014d00 <vTaskSuspend+0x70>
 8014cf4:	f001 fb66 	bl	80163c4 <vPortEnterCritical>
 8014cf8:	f000 fdb2 	bl	8015860 <prvResetNextTaskUnblockTime>
 8014cfc:	f001 fb92 	bl	8016424 <vPortExitCritical>
 8014d00:	4b18      	ldr	r3, [pc, #96]	; (8014d64 <vTaskSuspend+0xd4>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	68fa      	ldr	r2, [r7, #12]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d127      	bne.n	8014d5a <vTaskSuspend+0xca>
 8014d0a:	4b18      	ldr	r3, [pc, #96]	; (8014d6c <vTaskSuspend+0xdc>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d017      	beq.n	8014d42 <vTaskSuspend+0xb2>
 8014d12:	4b17      	ldr	r3, [pc, #92]	; (8014d70 <vTaskSuspend+0xe0>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d00a      	beq.n	8014d30 <vTaskSuspend+0xa0>
 8014d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d1e:	f383 8811 	msr	BASEPRI, r3
 8014d22:	f3bf 8f6f 	isb	sy
 8014d26:	f3bf 8f4f 	dsb	sy
 8014d2a:	60bb      	str	r3, [r7, #8]
 8014d2c:	bf00      	nop
 8014d2e:	e7fe      	b.n	8014d2e <vTaskSuspend+0x9e>
 8014d30:	4b10      	ldr	r3, [pc, #64]	; (8014d74 <vTaskSuspend+0xe4>)
 8014d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d36:	601a      	str	r2, [r3, #0]
 8014d38:	f3bf 8f4f 	dsb	sy
 8014d3c:	f3bf 8f6f 	isb	sy
 8014d40:	e00b      	b.n	8014d5a <vTaskSuspend+0xca>
 8014d42:	4b09      	ldr	r3, [pc, #36]	; (8014d68 <vTaskSuspend+0xd8>)
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	4b0c      	ldr	r3, [pc, #48]	; (8014d78 <vTaskSuspend+0xe8>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d103      	bne.n	8014d56 <vTaskSuspend+0xc6>
 8014d4e:	4b05      	ldr	r3, [pc, #20]	; (8014d64 <vTaskSuspend+0xd4>)
 8014d50:	2200      	movs	r2, #0
 8014d52:	601a      	str	r2, [r3, #0]
 8014d54:	e001      	b.n	8014d5a <vTaskSuspend+0xca>
 8014d56:	f000 fa99 	bl	801528c <vTaskSwitchContext>
 8014d5a:	bf00      	nop
 8014d5c:	3710      	adds	r7, #16
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	2400182c 	.word	0x2400182c
 8014d68:	24001cec 	.word	0x24001cec
 8014d6c:	24001d0c 	.word	0x24001d0c
 8014d70:	24001d28 	.word	0x24001d28
 8014d74:	e000ed04 	.word	0xe000ed04
 8014d78:	24001d00 	.word	0x24001d00

08014d7c <prvTaskIsTaskSuspended>:
 8014d7c:	b480      	push	{r7}
 8014d7e:	b087      	sub	sp, #28
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	2300      	movs	r3, #0
 8014d86:	617b      	str	r3, [r7, #20]
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	613b      	str	r3, [r7, #16]
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d10a      	bne.n	8014da8 <prvTaskIsTaskSuspended+0x2c>
 8014d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d96:	f383 8811 	msr	BASEPRI, r3
 8014d9a:	f3bf 8f6f 	isb	sy
 8014d9e:	f3bf 8f4f 	dsb	sy
 8014da2:	60fb      	str	r3, [r7, #12]
 8014da4:	bf00      	nop
 8014da6:	e7fe      	b.n	8014da6 <prvTaskIsTaskSuspended+0x2a>
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	695b      	ldr	r3, [r3, #20]
 8014dac:	4a0a      	ldr	r2, [pc, #40]	; (8014dd8 <prvTaskIsTaskSuspended+0x5c>)
 8014dae:	4293      	cmp	r3, r2
 8014db0:	d10a      	bne.n	8014dc8 <prvTaskIsTaskSuspended+0x4c>
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014db6:	4a09      	ldr	r2, [pc, #36]	; (8014ddc <prvTaskIsTaskSuspended+0x60>)
 8014db8:	4293      	cmp	r3, r2
 8014dba:	d005      	beq.n	8014dc8 <prvTaskIsTaskSuspended+0x4c>
 8014dbc:	693b      	ldr	r3, [r7, #16]
 8014dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d101      	bne.n	8014dc8 <prvTaskIsTaskSuspended+0x4c>
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	617b      	str	r3, [r7, #20]
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	4618      	mov	r0, r3
 8014dcc:	371c      	adds	r7, #28
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd4:	4770      	bx	lr
 8014dd6:	bf00      	nop
 8014dd8:	24001cec 	.word	0x24001cec
 8014ddc:	24001cc0 	.word	0x24001cc0

08014de0 <xTaskResumeFromISR>:
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b08a      	sub	sp, #40	; 0x28
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	2300      	movs	r3, #0
 8014dea:	627b      	str	r3, [r7, #36]	; 0x24
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	623b      	str	r3, [r7, #32]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d10a      	bne.n	8014e0c <xTaskResumeFromISR+0x2c>
 8014df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dfa:	f383 8811 	msr	BASEPRI, r3
 8014dfe:	f3bf 8f6f 	isb	sy
 8014e02:	f3bf 8f4f 	dsb	sy
 8014e06:	61bb      	str	r3, [r7, #24]
 8014e08:	bf00      	nop
 8014e0a:	e7fe      	b.n	8014e0a <xTaskResumeFromISR+0x2a>
 8014e0c:	f001 fbbc 	bl	8016588 <vPortValidateInterruptPriority>
 8014e10:	f3ef 8211 	mrs	r2, BASEPRI
 8014e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e18:	f383 8811 	msr	BASEPRI, r3
 8014e1c:	f3bf 8f6f 	isb	sy
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	617a      	str	r2, [r7, #20]
 8014e26:	613b      	str	r3, [r7, #16]
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	61fb      	str	r3, [r7, #28]
 8014e2c:	6a38      	ldr	r0, [r7, #32]
 8014e2e:	f7ff ffa5 	bl	8014d7c <prvTaskIsTaskSuspended>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d030      	beq.n	8014e9a <xTaskResumeFromISR+0xba>
 8014e38:	4b1d      	ldr	r3, [pc, #116]	; (8014eb0 <xTaskResumeFromISR+0xd0>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d126      	bne.n	8014e8e <xTaskResumeFromISR+0xae>
 8014e40:	6a3b      	ldr	r3, [r7, #32]
 8014e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e44:	4b1b      	ldr	r3, [pc, #108]	; (8014eb4 <xTaskResumeFromISR+0xd4>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d301      	bcc.n	8014e52 <xTaskResumeFromISR+0x72>
 8014e4e:	2301      	movs	r3, #1
 8014e50:	627b      	str	r3, [r7, #36]	; 0x24
 8014e52:	6a3b      	ldr	r3, [r7, #32]
 8014e54:	3304      	adds	r3, #4
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7fe ff74 	bl	8013d44 <uxListRemove>
 8014e5c:	6a3b      	ldr	r3, [r7, #32]
 8014e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e60:	4b15      	ldr	r3, [pc, #84]	; (8014eb8 <xTaskResumeFromISR+0xd8>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d903      	bls.n	8014e70 <xTaskResumeFromISR+0x90>
 8014e68:	6a3b      	ldr	r3, [r7, #32]
 8014e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e6c:	4a12      	ldr	r2, [pc, #72]	; (8014eb8 <xTaskResumeFromISR+0xd8>)
 8014e6e:	6013      	str	r3, [r2, #0]
 8014e70:	6a3b      	ldr	r3, [r7, #32]
 8014e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e74:	4613      	mov	r3, r2
 8014e76:	009b      	lsls	r3, r3, #2
 8014e78:	4413      	add	r3, r2
 8014e7a:	009b      	lsls	r3, r3, #2
 8014e7c:	4a0f      	ldr	r2, [pc, #60]	; (8014ebc <xTaskResumeFromISR+0xdc>)
 8014e7e:	441a      	add	r2, r3
 8014e80:	6a3b      	ldr	r3, [r7, #32]
 8014e82:	3304      	adds	r3, #4
 8014e84:	4619      	mov	r1, r3
 8014e86:	4610      	mov	r0, r2
 8014e88:	f7fe feff 	bl	8013c8a <vListInsertEnd>
 8014e8c:	e005      	b.n	8014e9a <xTaskResumeFromISR+0xba>
 8014e8e:	6a3b      	ldr	r3, [r7, #32]
 8014e90:	3318      	adds	r3, #24
 8014e92:	4619      	mov	r1, r3
 8014e94:	480a      	ldr	r0, [pc, #40]	; (8014ec0 <xTaskResumeFromISR+0xe0>)
 8014e96:	f7fe fef8 	bl	8013c8a <vListInsertEnd>
 8014e9a:	69fb      	ldr	r3, [r7, #28]
 8014e9c:	60fb      	str	r3, [r7, #12]
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f383 8811 	msr	BASEPRI, r3
 8014ea4:	bf00      	nop
 8014ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3728      	adds	r7, #40	; 0x28
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}
 8014eb0:	24001d28 	.word	0x24001d28
 8014eb4:	2400182c 	.word	0x2400182c
 8014eb8:	24001d08 	.word	0x24001d08
 8014ebc:	24001830 	.word	0x24001830
 8014ec0:	24001cc0 	.word	0x24001cc0

08014ec4 <vTaskStartScheduler>:
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b08a      	sub	sp, #40	; 0x28
 8014ec8:	af04      	add	r7, sp, #16
 8014eca:	2300      	movs	r3, #0
 8014ecc:	60bb      	str	r3, [r7, #8]
 8014ece:	2300      	movs	r3, #0
 8014ed0:	607b      	str	r3, [r7, #4]
 8014ed2:	463a      	mov	r2, r7
 8014ed4:	1d39      	adds	r1, r7, #4
 8014ed6:	f107 0308 	add.w	r3, r7, #8
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fe fc08 	bl	80136f0 <vApplicationGetIdleTaskMemory>
 8014ee0:	6839      	ldr	r1, [r7, #0]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	68ba      	ldr	r2, [r7, #8]
 8014ee6:	9202      	str	r2, [sp, #8]
 8014ee8:	9301      	str	r3, [sp, #4]
 8014eea:	2300      	movs	r3, #0
 8014eec:	9300      	str	r3, [sp, #0]
 8014eee:	2300      	movs	r3, #0
 8014ef0:	460a      	mov	r2, r1
 8014ef2:	4921      	ldr	r1, [pc, #132]	; (8014f78 <vTaskStartScheduler+0xb4>)
 8014ef4:	4821      	ldr	r0, [pc, #132]	; (8014f7c <vTaskStartScheduler+0xb8>)
 8014ef6:	f7ff fcf5 	bl	80148e4 <xTaskCreateStatic>
 8014efa:	4603      	mov	r3, r0
 8014efc:	4a20      	ldr	r2, [pc, #128]	; (8014f80 <vTaskStartScheduler+0xbc>)
 8014efe:	6013      	str	r3, [r2, #0]
 8014f00:	4b1f      	ldr	r3, [pc, #124]	; (8014f80 <vTaskStartScheduler+0xbc>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d002      	beq.n	8014f0e <vTaskStartScheduler+0x4a>
 8014f08:	2301      	movs	r3, #1
 8014f0a:	617b      	str	r3, [r7, #20]
 8014f0c:	e001      	b.n	8014f12 <vTaskStartScheduler+0x4e>
 8014f0e:	2300      	movs	r3, #0
 8014f10:	617b      	str	r3, [r7, #20]
 8014f12:	697b      	ldr	r3, [r7, #20]
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d102      	bne.n	8014f1e <vTaskStartScheduler+0x5a>
 8014f18:	f000 fdba 	bl	8015a90 <xTimerCreateTimerTask>
 8014f1c:	6178      	str	r0, [r7, #20]
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	d116      	bne.n	8014f52 <vTaskStartScheduler+0x8e>
 8014f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f28:	f383 8811 	msr	BASEPRI, r3
 8014f2c:	f3bf 8f6f 	isb	sy
 8014f30:	f3bf 8f4f 	dsb	sy
 8014f34:	613b      	str	r3, [r7, #16]
 8014f36:	bf00      	nop
 8014f38:	4b12      	ldr	r3, [pc, #72]	; (8014f84 <vTaskStartScheduler+0xc0>)
 8014f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f3e:	601a      	str	r2, [r3, #0]
 8014f40:	4b11      	ldr	r3, [pc, #68]	; (8014f88 <vTaskStartScheduler+0xc4>)
 8014f42:	2201      	movs	r2, #1
 8014f44:	601a      	str	r2, [r3, #0]
 8014f46:	4b11      	ldr	r3, [pc, #68]	; (8014f8c <vTaskStartScheduler+0xc8>)
 8014f48:	2200      	movs	r2, #0
 8014f4a:	601a      	str	r2, [r3, #0]
 8014f4c:	f001 f998 	bl	8016280 <xPortStartScheduler>
 8014f50:	e00e      	b.n	8014f70 <vTaskStartScheduler+0xac>
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f58:	d10a      	bne.n	8014f70 <vTaskStartScheduler+0xac>
 8014f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5e:	f383 8811 	msr	BASEPRI, r3
 8014f62:	f3bf 8f6f 	isb	sy
 8014f66:	f3bf 8f4f 	dsb	sy
 8014f6a:	60fb      	str	r3, [r7, #12]
 8014f6c:	bf00      	nop
 8014f6e:	e7fe      	b.n	8014f6e <vTaskStartScheduler+0xaa>
 8014f70:	bf00      	nop
 8014f72:	3718      	adds	r7, #24
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	080176e8 	.word	0x080176e8
 8014f7c:	080156f5 	.word	0x080156f5
 8014f80:	24001d24 	.word	0x24001d24
 8014f84:	24001d20 	.word	0x24001d20
 8014f88:	24001d0c 	.word	0x24001d0c
 8014f8c:	24001d04 	.word	0x24001d04

08014f90 <vTaskSuspendAll>:
 8014f90:	b480      	push	{r7}
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	4b04      	ldr	r3, [pc, #16]	; (8014fa8 <vTaskSuspendAll+0x18>)
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	3301      	adds	r3, #1
 8014f9a:	4a03      	ldr	r2, [pc, #12]	; (8014fa8 <vTaskSuspendAll+0x18>)
 8014f9c:	6013      	str	r3, [r2, #0]
 8014f9e:	bf00      	nop
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa6:	4770      	bx	lr
 8014fa8:	24001d28 	.word	0x24001d28

08014fac <xTaskResumeAll>:
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b084      	sub	sp, #16
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	60fb      	str	r3, [r7, #12]
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	60bb      	str	r3, [r7, #8]
 8014fba:	4b42      	ldr	r3, [pc, #264]	; (80150c4 <xTaskResumeAll+0x118>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d10a      	bne.n	8014fd8 <xTaskResumeAll+0x2c>
 8014fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc6:	f383 8811 	msr	BASEPRI, r3
 8014fca:	f3bf 8f6f 	isb	sy
 8014fce:	f3bf 8f4f 	dsb	sy
 8014fd2:	603b      	str	r3, [r7, #0]
 8014fd4:	bf00      	nop
 8014fd6:	e7fe      	b.n	8014fd6 <xTaskResumeAll+0x2a>
 8014fd8:	f001 f9f4 	bl	80163c4 <vPortEnterCritical>
 8014fdc:	4b39      	ldr	r3, [pc, #228]	; (80150c4 <xTaskResumeAll+0x118>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	3b01      	subs	r3, #1
 8014fe2:	4a38      	ldr	r2, [pc, #224]	; (80150c4 <xTaskResumeAll+0x118>)
 8014fe4:	6013      	str	r3, [r2, #0]
 8014fe6:	4b37      	ldr	r3, [pc, #220]	; (80150c4 <xTaskResumeAll+0x118>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d162      	bne.n	80150b4 <xTaskResumeAll+0x108>
 8014fee:	4b36      	ldr	r3, [pc, #216]	; (80150c8 <xTaskResumeAll+0x11c>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d05e      	beq.n	80150b4 <xTaskResumeAll+0x108>
 8014ff6:	e02f      	b.n	8015058 <xTaskResumeAll+0xac>
 8014ff8:	4b34      	ldr	r3, [pc, #208]	; (80150cc <xTaskResumeAll+0x120>)
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	60fb      	str	r3, [r7, #12]
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	3318      	adds	r3, #24
 8015004:	4618      	mov	r0, r3
 8015006:	f7fe fe9d 	bl	8013d44 <uxListRemove>
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	3304      	adds	r3, #4
 801500e:	4618      	mov	r0, r3
 8015010:	f7fe fe98 	bl	8013d44 <uxListRemove>
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015018:	4b2d      	ldr	r3, [pc, #180]	; (80150d0 <xTaskResumeAll+0x124>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	429a      	cmp	r2, r3
 801501e:	d903      	bls.n	8015028 <xTaskResumeAll+0x7c>
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015024:	4a2a      	ldr	r2, [pc, #168]	; (80150d0 <xTaskResumeAll+0x124>)
 8015026:	6013      	str	r3, [r2, #0]
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801502c:	4613      	mov	r3, r2
 801502e:	009b      	lsls	r3, r3, #2
 8015030:	4413      	add	r3, r2
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4a27      	ldr	r2, [pc, #156]	; (80150d4 <xTaskResumeAll+0x128>)
 8015036:	441a      	add	r2, r3
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	3304      	adds	r3, #4
 801503c:	4619      	mov	r1, r3
 801503e:	4610      	mov	r0, r2
 8015040:	f7fe fe23 	bl	8013c8a <vListInsertEnd>
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015048:	4b23      	ldr	r3, [pc, #140]	; (80150d8 <xTaskResumeAll+0x12c>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801504e:	429a      	cmp	r2, r3
 8015050:	d302      	bcc.n	8015058 <xTaskResumeAll+0xac>
 8015052:	4b22      	ldr	r3, [pc, #136]	; (80150dc <xTaskResumeAll+0x130>)
 8015054:	2201      	movs	r2, #1
 8015056:	601a      	str	r2, [r3, #0]
 8015058:	4b1c      	ldr	r3, [pc, #112]	; (80150cc <xTaskResumeAll+0x120>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d1cb      	bne.n	8014ff8 <xTaskResumeAll+0x4c>
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d001      	beq.n	801506a <xTaskResumeAll+0xbe>
 8015066:	f000 fbfb 	bl	8015860 <prvResetNextTaskUnblockTime>
 801506a:	4b1d      	ldr	r3, [pc, #116]	; (80150e0 <xTaskResumeAll+0x134>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	607b      	str	r3, [r7, #4]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d010      	beq.n	8015098 <xTaskResumeAll+0xec>
 8015076:	f000 f847 	bl	8015108 <xTaskIncrementTick>
 801507a:	4603      	mov	r3, r0
 801507c:	2b00      	cmp	r3, #0
 801507e:	d002      	beq.n	8015086 <xTaskResumeAll+0xda>
 8015080:	4b16      	ldr	r3, [pc, #88]	; (80150dc <xTaskResumeAll+0x130>)
 8015082:	2201      	movs	r2, #1
 8015084:	601a      	str	r2, [r3, #0]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	3b01      	subs	r3, #1
 801508a:	607b      	str	r3, [r7, #4]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d1f1      	bne.n	8015076 <xTaskResumeAll+0xca>
 8015092:	4b13      	ldr	r3, [pc, #76]	; (80150e0 <xTaskResumeAll+0x134>)
 8015094:	2200      	movs	r2, #0
 8015096:	601a      	str	r2, [r3, #0]
 8015098:	4b10      	ldr	r3, [pc, #64]	; (80150dc <xTaskResumeAll+0x130>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d009      	beq.n	80150b4 <xTaskResumeAll+0x108>
 80150a0:	2301      	movs	r3, #1
 80150a2:	60bb      	str	r3, [r7, #8]
 80150a4:	4b0f      	ldr	r3, [pc, #60]	; (80150e4 <xTaskResumeAll+0x138>)
 80150a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150aa:	601a      	str	r2, [r3, #0]
 80150ac:	f3bf 8f4f 	dsb	sy
 80150b0:	f3bf 8f6f 	isb	sy
 80150b4:	f001 f9b6 	bl	8016424 <vPortExitCritical>
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	4618      	mov	r0, r3
 80150bc:	3710      	adds	r7, #16
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	24001d28 	.word	0x24001d28
 80150c8:	24001d00 	.word	0x24001d00
 80150cc:	24001cc0 	.word	0x24001cc0
 80150d0:	24001d08 	.word	0x24001d08
 80150d4:	24001830 	.word	0x24001830
 80150d8:	2400182c 	.word	0x2400182c
 80150dc:	24001d14 	.word	0x24001d14
 80150e0:	24001d10 	.word	0x24001d10
 80150e4:	e000ed04 	.word	0xe000ed04

080150e8 <xTaskGetTickCount>:
 80150e8:	b480      	push	{r7}
 80150ea:	b083      	sub	sp, #12
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	4b05      	ldr	r3, [pc, #20]	; (8015104 <xTaskGetTickCount+0x1c>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	607b      	str	r3, [r7, #4]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	4618      	mov	r0, r3
 80150f8:	370c      	adds	r7, #12
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr
 8015102:	bf00      	nop
 8015104:	24001d04 	.word	0x24001d04

08015108 <xTaskIncrementTick>:
 8015108:	b580      	push	{r7, lr}
 801510a:	b086      	sub	sp, #24
 801510c:	af00      	add	r7, sp, #0
 801510e:	2300      	movs	r3, #0
 8015110:	617b      	str	r3, [r7, #20]
 8015112:	4b53      	ldr	r3, [pc, #332]	; (8015260 <xTaskIncrementTick+0x158>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	f040 8095 	bne.w	8015246 <xTaskIncrementTick+0x13e>
 801511c:	4b51      	ldr	r3, [pc, #324]	; (8015264 <xTaskIncrementTick+0x15c>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	3301      	adds	r3, #1
 8015122:	613b      	str	r3, [r7, #16]
 8015124:	4a4f      	ldr	r2, [pc, #316]	; (8015264 <xTaskIncrementTick+0x15c>)
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	6013      	str	r3, [r2, #0]
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d120      	bne.n	8015172 <xTaskIncrementTick+0x6a>
 8015130:	4b4d      	ldr	r3, [pc, #308]	; (8015268 <xTaskIncrementTick+0x160>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d00a      	beq.n	8015150 <xTaskIncrementTick+0x48>
 801513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801513e:	f383 8811 	msr	BASEPRI, r3
 8015142:	f3bf 8f6f 	isb	sy
 8015146:	f3bf 8f4f 	dsb	sy
 801514a:	603b      	str	r3, [r7, #0]
 801514c:	bf00      	nop
 801514e:	e7fe      	b.n	801514e <xTaskIncrementTick+0x46>
 8015150:	4b45      	ldr	r3, [pc, #276]	; (8015268 <xTaskIncrementTick+0x160>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	60fb      	str	r3, [r7, #12]
 8015156:	4b45      	ldr	r3, [pc, #276]	; (801526c <xTaskIncrementTick+0x164>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4a43      	ldr	r2, [pc, #268]	; (8015268 <xTaskIncrementTick+0x160>)
 801515c:	6013      	str	r3, [r2, #0]
 801515e:	4a43      	ldr	r2, [pc, #268]	; (801526c <xTaskIncrementTick+0x164>)
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	6013      	str	r3, [r2, #0]
 8015164:	4b42      	ldr	r3, [pc, #264]	; (8015270 <xTaskIncrementTick+0x168>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	3301      	adds	r3, #1
 801516a:	4a41      	ldr	r2, [pc, #260]	; (8015270 <xTaskIncrementTick+0x168>)
 801516c:	6013      	str	r3, [r2, #0]
 801516e:	f000 fb77 	bl	8015860 <prvResetNextTaskUnblockTime>
 8015172:	4b40      	ldr	r3, [pc, #256]	; (8015274 <xTaskIncrementTick+0x16c>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	693a      	ldr	r2, [r7, #16]
 8015178:	429a      	cmp	r2, r3
 801517a:	d349      	bcc.n	8015210 <xTaskIncrementTick+0x108>
 801517c:	4b3a      	ldr	r3, [pc, #232]	; (8015268 <xTaskIncrementTick+0x160>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d104      	bne.n	8015190 <xTaskIncrementTick+0x88>
 8015186:	4b3b      	ldr	r3, [pc, #236]	; (8015274 <xTaskIncrementTick+0x16c>)
 8015188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801518c:	601a      	str	r2, [r3, #0]
 801518e:	e03f      	b.n	8015210 <xTaskIncrementTick+0x108>
 8015190:	4b35      	ldr	r3, [pc, #212]	; (8015268 <xTaskIncrementTick+0x160>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	68db      	ldr	r3, [r3, #12]
 8015198:	60bb      	str	r3, [r7, #8]
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	607b      	str	r3, [r7, #4]
 80151a0:	693a      	ldr	r2, [r7, #16]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d203      	bcs.n	80151b0 <xTaskIncrementTick+0xa8>
 80151a8:	4a32      	ldr	r2, [pc, #200]	; (8015274 <xTaskIncrementTick+0x16c>)
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6013      	str	r3, [r2, #0]
 80151ae:	e02f      	b.n	8015210 <xTaskIncrementTick+0x108>
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	3304      	adds	r3, #4
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7fe fdc5 	bl	8013d44 <uxListRemove>
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d004      	beq.n	80151cc <xTaskIncrementTick+0xc4>
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	3318      	adds	r3, #24
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fe fdbc 	bl	8013d44 <uxListRemove>
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151d0:	4b29      	ldr	r3, [pc, #164]	; (8015278 <xTaskIncrementTick+0x170>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d903      	bls.n	80151e0 <xTaskIncrementTick+0xd8>
 80151d8:	68bb      	ldr	r3, [r7, #8]
 80151da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151dc:	4a26      	ldr	r2, [pc, #152]	; (8015278 <xTaskIncrementTick+0x170>)
 80151de:	6013      	str	r3, [r2, #0]
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151e4:	4613      	mov	r3, r2
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	4413      	add	r3, r2
 80151ea:	009b      	lsls	r3, r3, #2
 80151ec:	4a23      	ldr	r2, [pc, #140]	; (801527c <xTaskIncrementTick+0x174>)
 80151ee:	441a      	add	r2, r3
 80151f0:	68bb      	ldr	r3, [r7, #8]
 80151f2:	3304      	adds	r3, #4
 80151f4:	4619      	mov	r1, r3
 80151f6:	4610      	mov	r0, r2
 80151f8:	f7fe fd47 	bl	8013c8a <vListInsertEnd>
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015200:	4b1f      	ldr	r3, [pc, #124]	; (8015280 <xTaskIncrementTick+0x178>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015206:	429a      	cmp	r2, r3
 8015208:	d3b8      	bcc.n	801517c <xTaskIncrementTick+0x74>
 801520a:	2301      	movs	r3, #1
 801520c:	617b      	str	r3, [r7, #20]
 801520e:	e7b5      	b.n	801517c <xTaskIncrementTick+0x74>
 8015210:	4b1b      	ldr	r3, [pc, #108]	; (8015280 <xTaskIncrementTick+0x178>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015216:	4919      	ldr	r1, [pc, #100]	; (801527c <xTaskIncrementTick+0x174>)
 8015218:	4613      	mov	r3, r2
 801521a:	009b      	lsls	r3, r3, #2
 801521c:	4413      	add	r3, r2
 801521e:	009b      	lsls	r3, r3, #2
 8015220:	440b      	add	r3, r1
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2b01      	cmp	r3, #1
 8015226:	d901      	bls.n	801522c <xTaskIncrementTick+0x124>
 8015228:	2301      	movs	r3, #1
 801522a:	617b      	str	r3, [r7, #20]
 801522c:	4b15      	ldr	r3, [pc, #84]	; (8015284 <xTaskIncrementTick+0x17c>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d101      	bne.n	8015238 <xTaskIncrementTick+0x130>
 8015234:	f7eb f9d6 	bl	80005e4 <vApplicationTickHook>
 8015238:	4b13      	ldr	r3, [pc, #76]	; (8015288 <xTaskIncrementTick+0x180>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d009      	beq.n	8015254 <xTaskIncrementTick+0x14c>
 8015240:	2301      	movs	r3, #1
 8015242:	617b      	str	r3, [r7, #20]
 8015244:	e006      	b.n	8015254 <xTaskIncrementTick+0x14c>
 8015246:	4b0f      	ldr	r3, [pc, #60]	; (8015284 <xTaskIncrementTick+0x17c>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	3301      	adds	r3, #1
 801524c:	4a0d      	ldr	r2, [pc, #52]	; (8015284 <xTaskIncrementTick+0x17c>)
 801524e:	6013      	str	r3, [r2, #0]
 8015250:	f7eb f9c8 	bl	80005e4 <vApplicationTickHook>
 8015254:	697b      	ldr	r3, [r7, #20]
 8015256:	4618      	mov	r0, r3
 8015258:	3718      	adds	r7, #24
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	24001d28 	.word	0x24001d28
 8015264:	24001d04 	.word	0x24001d04
 8015268:	24001cb8 	.word	0x24001cb8
 801526c:	24001cbc 	.word	0x24001cbc
 8015270:	24001d18 	.word	0x24001d18
 8015274:	24001d20 	.word	0x24001d20
 8015278:	24001d08 	.word	0x24001d08
 801527c:	24001830 	.word	0x24001830
 8015280:	2400182c 	.word	0x2400182c
 8015284:	24001d10 	.word	0x24001d10
 8015288:	24001d14 	.word	0x24001d14

0801528c <vTaskSwitchContext>:
 801528c:	b480      	push	{r7}
 801528e:	b085      	sub	sp, #20
 8015290:	af00      	add	r7, sp, #0
 8015292:	4b28      	ldr	r3, [pc, #160]	; (8015334 <vTaskSwitchContext+0xa8>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d003      	beq.n	80152a2 <vTaskSwitchContext+0x16>
 801529a:	4b27      	ldr	r3, [pc, #156]	; (8015338 <vTaskSwitchContext+0xac>)
 801529c:	2201      	movs	r2, #1
 801529e:	601a      	str	r2, [r3, #0]
 80152a0:	e041      	b.n	8015326 <vTaskSwitchContext+0x9a>
 80152a2:	4b25      	ldr	r3, [pc, #148]	; (8015338 <vTaskSwitchContext+0xac>)
 80152a4:	2200      	movs	r2, #0
 80152a6:	601a      	str	r2, [r3, #0]
 80152a8:	4b24      	ldr	r3, [pc, #144]	; (801533c <vTaskSwitchContext+0xb0>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	60fb      	str	r3, [r7, #12]
 80152ae:	e010      	b.n	80152d2 <vTaskSwitchContext+0x46>
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d10a      	bne.n	80152cc <vTaskSwitchContext+0x40>
 80152b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ba:	f383 8811 	msr	BASEPRI, r3
 80152be:	f3bf 8f6f 	isb	sy
 80152c2:	f3bf 8f4f 	dsb	sy
 80152c6:	607b      	str	r3, [r7, #4]
 80152c8:	bf00      	nop
 80152ca:	e7fe      	b.n	80152ca <vTaskSwitchContext+0x3e>
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	3b01      	subs	r3, #1
 80152d0:	60fb      	str	r3, [r7, #12]
 80152d2:	491b      	ldr	r1, [pc, #108]	; (8015340 <vTaskSwitchContext+0xb4>)
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	4613      	mov	r3, r2
 80152d8:	009b      	lsls	r3, r3, #2
 80152da:	4413      	add	r3, r2
 80152dc:	009b      	lsls	r3, r3, #2
 80152de:	440b      	add	r3, r1
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d0e4      	beq.n	80152b0 <vTaskSwitchContext+0x24>
 80152e6:	68fa      	ldr	r2, [r7, #12]
 80152e8:	4613      	mov	r3, r2
 80152ea:	009b      	lsls	r3, r3, #2
 80152ec:	4413      	add	r3, r2
 80152ee:	009b      	lsls	r3, r3, #2
 80152f0:	4a13      	ldr	r2, [pc, #76]	; (8015340 <vTaskSwitchContext+0xb4>)
 80152f2:	4413      	add	r3, r2
 80152f4:	60bb      	str	r3, [r7, #8]
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	685b      	ldr	r3, [r3, #4]
 80152fa:	685a      	ldr	r2, [r3, #4]
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	605a      	str	r2, [r3, #4]
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	685a      	ldr	r2, [r3, #4]
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	3308      	adds	r3, #8
 8015308:	429a      	cmp	r2, r3
 801530a:	d104      	bne.n	8015316 <vTaskSwitchContext+0x8a>
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	685a      	ldr	r2, [r3, #4]
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	605a      	str	r2, [r3, #4]
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	68db      	ldr	r3, [r3, #12]
 801531c:	4a09      	ldr	r2, [pc, #36]	; (8015344 <vTaskSwitchContext+0xb8>)
 801531e:	6013      	str	r3, [r2, #0]
 8015320:	4a06      	ldr	r2, [pc, #24]	; (801533c <vTaskSwitchContext+0xb0>)
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	6013      	str	r3, [r2, #0]
 8015326:	bf00      	nop
 8015328:	3714      	adds	r7, #20
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	24001d28 	.word	0x24001d28
 8015338:	24001d14 	.word	0x24001d14
 801533c:	24001d08 	.word	0x24001d08
 8015340:	24001830 	.word	0x24001830
 8015344:	2400182c 	.word	0x2400182c

08015348 <vTaskPlaceOnEventList>:
 8015348:	b580      	push	{r7, lr}
 801534a:	b084      	sub	sp, #16
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	6039      	str	r1, [r7, #0]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d10a      	bne.n	801536e <vTaskPlaceOnEventList+0x26>
 8015358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801535c:	f383 8811 	msr	BASEPRI, r3
 8015360:	f3bf 8f6f 	isb	sy
 8015364:	f3bf 8f4f 	dsb	sy
 8015368:	60fb      	str	r3, [r7, #12]
 801536a:	bf00      	nop
 801536c:	e7fe      	b.n	801536c <vTaskPlaceOnEventList+0x24>
 801536e:	4b07      	ldr	r3, [pc, #28]	; (801538c <vTaskPlaceOnEventList+0x44>)
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	3318      	adds	r3, #24
 8015374:	4619      	mov	r1, r3
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f7fe fcab 	bl	8013cd2 <vListInsert>
 801537c:	2101      	movs	r1, #1
 801537e:	6838      	ldr	r0, [r7, #0]
 8015380:	f000 fb32 	bl	80159e8 <prvAddCurrentTaskToDelayedList>
 8015384:	bf00      	nop
 8015386:	3710      	adds	r7, #16
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}
 801538c:	2400182c 	.word	0x2400182c

08015390 <vTaskPlaceOnUnorderedEventList>:
 8015390:	b580      	push	{r7, lr}
 8015392:	b086      	sub	sp, #24
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	60b9      	str	r1, [r7, #8]
 801539a:	607a      	str	r2, [r7, #4]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d10a      	bne.n	80153b8 <vTaskPlaceOnUnorderedEventList+0x28>
 80153a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	617b      	str	r3, [r7, #20]
 80153b4:	bf00      	nop
 80153b6:	e7fe      	b.n	80153b6 <vTaskPlaceOnUnorderedEventList+0x26>
 80153b8:	4b11      	ldr	r3, [pc, #68]	; (8015400 <vTaskPlaceOnUnorderedEventList+0x70>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d10a      	bne.n	80153d6 <vTaskPlaceOnUnorderedEventList+0x46>
 80153c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c4:	f383 8811 	msr	BASEPRI, r3
 80153c8:	f3bf 8f6f 	isb	sy
 80153cc:	f3bf 8f4f 	dsb	sy
 80153d0:	613b      	str	r3, [r7, #16]
 80153d2:	bf00      	nop
 80153d4:	e7fe      	b.n	80153d4 <vTaskPlaceOnUnorderedEventList+0x44>
 80153d6:	4b0b      	ldr	r3, [pc, #44]	; (8015404 <vTaskPlaceOnUnorderedEventList+0x74>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	68ba      	ldr	r2, [r7, #8]
 80153dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80153e0:	619a      	str	r2, [r3, #24]
 80153e2:	4b08      	ldr	r3, [pc, #32]	; (8015404 <vTaskPlaceOnUnorderedEventList+0x74>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	3318      	adds	r3, #24
 80153e8:	4619      	mov	r1, r3
 80153ea:	68f8      	ldr	r0, [r7, #12]
 80153ec:	f7fe fc4d 	bl	8013c8a <vListInsertEnd>
 80153f0:	2101      	movs	r1, #1
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f000 faf8 	bl	80159e8 <prvAddCurrentTaskToDelayedList>
 80153f8:	bf00      	nop
 80153fa:	3718      	adds	r7, #24
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	24001d28 	.word	0x24001d28
 8015404:	2400182c 	.word	0x2400182c

08015408 <vTaskPlaceOnEventListRestricted>:
 8015408:	b580      	push	{r7, lr}
 801540a:	b086      	sub	sp, #24
 801540c:	af00      	add	r7, sp, #0
 801540e:	60f8      	str	r0, [r7, #12]
 8015410:	60b9      	str	r1, [r7, #8]
 8015412:	607a      	str	r2, [r7, #4]
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10a      	bne.n	8015430 <vTaskPlaceOnEventListRestricted+0x28>
 801541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541e:	f383 8811 	msr	BASEPRI, r3
 8015422:	f3bf 8f6f 	isb	sy
 8015426:	f3bf 8f4f 	dsb	sy
 801542a:	617b      	str	r3, [r7, #20]
 801542c:	bf00      	nop
 801542e:	e7fe      	b.n	801542e <vTaskPlaceOnEventListRestricted+0x26>
 8015430:	4b0a      	ldr	r3, [pc, #40]	; (801545c <vTaskPlaceOnEventListRestricted+0x54>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	3318      	adds	r3, #24
 8015436:	4619      	mov	r1, r3
 8015438:	68f8      	ldr	r0, [r7, #12]
 801543a:	f7fe fc26 	bl	8013c8a <vListInsertEnd>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d002      	beq.n	801544a <vTaskPlaceOnEventListRestricted+0x42>
 8015444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015448:	60bb      	str	r3, [r7, #8]
 801544a:	6879      	ldr	r1, [r7, #4]
 801544c:	68b8      	ldr	r0, [r7, #8]
 801544e:	f000 facb 	bl	80159e8 <prvAddCurrentTaskToDelayedList>
 8015452:	bf00      	nop
 8015454:	3718      	adds	r7, #24
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	2400182c 	.word	0x2400182c

08015460 <xTaskRemoveFromEventList>:
 8015460:	b580      	push	{r7, lr}
 8015462:	b086      	sub	sp, #24
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	613b      	str	r3, [r7, #16]
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d10a      	bne.n	801548c <xTaskRemoveFromEventList+0x2c>
 8015476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801547a:	f383 8811 	msr	BASEPRI, r3
 801547e:	f3bf 8f6f 	isb	sy
 8015482:	f3bf 8f4f 	dsb	sy
 8015486:	60fb      	str	r3, [r7, #12]
 8015488:	bf00      	nop
 801548a:	e7fe      	b.n	801548a <xTaskRemoveFromEventList+0x2a>
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	3318      	adds	r3, #24
 8015490:	4618      	mov	r0, r3
 8015492:	f7fe fc57 	bl	8013d44 <uxListRemove>
 8015496:	4b1e      	ldr	r3, [pc, #120]	; (8015510 <xTaskRemoveFromEventList+0xb0>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d11d      	bne.n	80154da <xTaskRemoveFromEventList+0x7a>
 801549e:	693b      	ldr	r3, [r7, #16]
 80154a0:	3304      	adds	r3, #4
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7fe fc4e 	bl	8013d44 <uxListRemove>
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ac:	4b19      	ldr	r3, [pc, #100]	; (8015514 <xTaskRemoveFromEventList+0xb4>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d903      	bls.n	80154bc <xTaskRemoveFromEventList+0x5c>
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b8:	4a16      	ldr	r2, [pc, #88]	; (8015514 <xTaskRemoveFromEventList+0xb4>)
 80154ba:	6013      	str	r3, [r2, #0]
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154c0:	4613      	mov	r3, r2
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	4413      	add	r3, r2
 80154c6:	009b      	lsls	r3, r3, #2
 80154c8:	4a13      	ldr	r2, [pc, #76]	; (8015518 <xTaskRemoveFromEventList+0xb8>)
 80154ca:	441a      	add	r2, r3
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	3304      	adds	r3, #4
 80154d0:	4619      	mov	r1, r3
 80154d2:	4610      	mov	r0, r2
 80154d4:	f7fe fbd9 	bl	8013c8a <vListInsertEnd>
 80154d8:	e005      	b.n	80154e6 <xTaskRemoveFromEventList+0x86>
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	3318      	adds	r3, #24
 80154de:	4619      	mov	r1, r3
 80154e0:	480e      	ldr	r0, [pc, #56]	; (801551c <xTaskRemoveFromEventList+0xbc>)
 80154e2:	f7fe fbd2 	bl	8013c8a <vListInsertEnd>
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ea:	4b0d      	ldr	r3, [pc, #52]	; (8015520 <xTaskRemoveFromEventList+0xc0>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d905      	bls.n	8015500 <xTaskRemoveFromEventList+0xa0>
 80154f4:	2301      	movs	r3, #1
 80154f6:	617b      	str	r3, [r7, #20]
 80154f8:	4b0a      	ldr	r3, [pc, #40]	; (8015524 <xTaskRemoveFromEventList+0xc4>)
 80154fa:	2201      	movs	r2, #1
 80154fc:	601a      	str	r2, [r3, #0]
 80154fe:	e001      	b.n	8015504 <xTaskRemoveFromEventList+0xa4>
 8015500:	2300      	movs	r3, #0
 8015502:	617b      	str	r3, [r7, #20]
 8015504:	697b      	ldr	r3, [r7, #20]
 8015506:	4618      	mov	r0, r3
 8015508:	3718      	adds	r7, #24
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	24001d28 	.word	0x24001d28
 8015514:	24001d08 	.word	0x24001d08
 8015518:	24001830 	.word	0x24001830
 801551c:	24001cc0 	.word	0x24001cc0
 8015520:	2400182c 	.word	0x2400182c
 8015524:	24001d14 	.word	0x24001d14

08015528 <vTaskRemoveFromUnorderedEventList>:
 8015528:	b580      	push	{r7, lr}
 801552a:	b086      	sub	sp, #24
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	6039      	str	r1, [r7, #0]
 8015532:	4b29      	ldr	r3, [pc, #164]	; (80155d8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d10a      	bne.n	8015550 <vTaskRemoveFromUnorderedEventList+0x28>
 801553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801553e:	f383 8811 	msr	BASEPRI, r3
 8015542:	f3bf 8f6f 	isb	sy
 8015546:	f3bf 8f4f 	dsb	sy
 801554a:	613b      	str	r3, [r7, #16]
 801554c:	bf00      	nop
 801554e:	e7fe      	b.n	801554e <vTaskRemoveFromUnorderedEventList+0x26>
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	601a      	str	r2, [r3, #0]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	68db      	ldr	r3, [r3, #12]
 801555e:	617b      	str	r3, [r7, #20]
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d10a      	bne.n	801557c <vTaskRemoveFromUnorderedEventList+0x54>
 8015566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801556a:	f383 8811 	msr	BASEPRI, r3
 801556e:	f3bf 8f6f 	isb	sy
 8015572:	f3bf 8f4f 	dsb	sy
 8015576:	60fb      	str	r3, [r7, #12]
 8015578:	bf00      	nop
 801557a:	e7fe      	b.n	801557a <vTaskRemoveFromUnorderedEventList+0x52>
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f7fe fbe1 	bl	8013d44 <uxListRemove>
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	3304      	adds	r3, #4
 8015586:	4618      	mov	r0, r3
 8015588:	f7fe fbdc 	bl	8013d44 <uxListRemove>
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015590:	4b12      	ldr	r3, [pc, #72]	; (80155dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	429a      	cmp	r2, r3
 8015596:	d903      	bls.n	80155a0 <vTaskRemoveFromUnorderedEventList+0x78>
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801559c:	4a0f      	ldr	r2, [pc, #60]	; (80155dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 801559e:	6013      	str	r3, [r2, #0]
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155a4:	4613      	mov	r3, r2
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	4413      	add	r3, r2
 80155aa:	009b      	lsls	r3, r3, #2
 80155ac:	4a0c      	ldr	r2, [pc, #48]	; (80155e0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80155ae:	441a      	add	r2, r3
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	3304      	adds	r3, #4
 80155b4:	4619      	mov	r1, r3
 80155b6:	4610      	mov	r0, r2
 80155b8:	f7fe fb67 	bl	8013c8a <vListInsertEnd>
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155c0:	4b08      	ldr	r3, [pc, #32]	; (80155e4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d902      	bls.n	80155d0 <vTaskRemoveFromUnorderedEventList+0xa8>
 80155ca:	4b07      	ldr	r3, [pc, #28]	; (80155e8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80155cc:	2201      	movs	r2, #1
 80155ce:	601a      	str	r2, [r3, #0]
 80155d0:	bf00      	nop
 80155d2:	3718      	adds	r7, #24
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}
 80155d8:	24001d28 	.word	0x24001d28
 80155dc:	24001d08 	.word	0x24001d08
 80155e0:	24001830 	.word	0x24001830
 80155e4:	2400182c 	.word	0x2400182c
 80155e8:	24001d14 	.word	0x24001d14

080155ec <vTaskInternalSetTimeOutState>:
 80155ec:	b480      	push	{r7}
 80155ee:	b083      	sub	sp, #12
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
 80155f4:	4b06      	ldr	r3, [pc, #24]	; (8015610 <vTaskInternalSetTimeOutState+0x24>)
 80155f6:	681a      	ldr	r2, [r3, #0]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	601a      	str	r2, [r3, #0]
 80155fc:	4b05      	ldr	r3, [pc, #20]	; (8015614 <vTaskInternalSetTimeOutState+0x28>)
 80155fe:	681a      	ldr	r2, [r3, #0]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	605a      	str	r2, [r3, #4]
 8015604:	bf00      	nop
 8015606:	370c      	adds	r7, #12
 8015608:	46bd      	mov	sp, r7
 801560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560e:	4770      	bx	lr
 8015610:	24001d18 	.word	0x24001d18
 8015614:	24001d04 	.word	0x24001d04

08015618 <xTaskCheckForTimeOut>:
 8015618:	b580      	push	{r7, lr}
 801561a:	b088      	sub	sp, #32
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	6039      	str	r1, [r7, #0]
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d10a      	bne.n	801563e <xTaskCheckForTimeOut+0x26>
 8015628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562c:	f383 8811 	msr	BASEPRI, r3
 8015630:	f3bf 8f6f 	isb	sy
 8015634:	f3bf 8f4f 	dsb	sy
 8015638:	613b      	str	r3, [r7, #16]
 801563a:	bf00      	nop
 801563c:	e7fe      	b.n	801563c <xTaskCheckForTimeOut+0x24>
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d10a      	bne.n	801565a <xTaskCheckForTimeOut+0x42>
 8015644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015648:	f383 8811 	msr	BASEPRI, r3
 801564c:	f3bf 8f6f 	isb	sy
 8015650:	f3bf 8f4f 	dsb	sy
 8015654:	60fb      	str	r3, [r7, #12]
 8015656:	bf00      	nop
 8015658:	e7fe      	b.n	8015658 <xTaskCheckForTimeOut+0x40>
 801565a:	f000 feb3 	bl	80163c4 <vPortEnterCritical>
 801565e:	4b1d      	ldr	r3, [pc, #116]	; (80156d4 <xTaskCheckForTimeOut+0xbc>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	61bb      	str	r3, [r7, #24]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	69ba      	ldr	r2, [r7, #24]
 801566a:	1ad3      	subs	r3, r2, r3
 801566c:	617b      	str	r3, [r7, #20]
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015676:	d102      	bne.n	801567e <xTaskCheckForTimeOut+0x66>
 8015678:	2300      	movs	r3, #0
 801567a:	61fb      	str	r3, [r7, #28]
 801567c:	e023      	b.n	80156c6 <xTaskCheckForTimeOut+0xae>
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	4b15      	ldr	r3, [pc, #84]	; (80156d8 <xTaskCheckForTimeOut+0xc0>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	429a      	cmp	r2, r3
 8015688:	d007      	beq.n	801569a <xTaskCheckForTimeOut+0x82>
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	69ba      	ldr	r2, [r7, #24]
 8015690:	429a      	cmp	r2, r3
 8015692:	d302      	bcc.n	801569a <xTaskCheckForTimeOut+0x82>
 8015694:	2301      	movs	r3, #1
 8015696:	61fb      	str	r3, [r7, #28]
 8015698:	e015      	b.n	80156c6 <xTaskCheckForTimeOut+0xae>
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	697a      	ldr	r2, [r7, #20]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d20b      	bcs.n	80156bc <xTaskCheckForTimeOut+0xa4>
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	681a      	ldr	r2, [r3, #0]
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	1ad2      	subs	r2, r2, r3
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	601a      	str	r2, [r3, #0]
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f7ff ff9b 	bl	80155ec <vTaskInternalSetTimeOutState>
 80156b6:	2300      	movs	r3, #0
 80156b8:	61fb      	str	r3, [r7, #28]
 80156ba:	e004      	b.n	80156c6 <xTaskCheckForTimeOut+0xae>
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	2200      	movs	r2, #0
 80156c0:	601a      	str	r2, [r3, #0]
 80156c2:	2301      	movs	r3, #1
 80156c4:	61fb      	str	r3, [r7, #28]
 80156c6:	f000 fead 	bl	8016424 <vPortExitCritical>
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	4618      	mov	r0, r3
 80156ce:	3720      	adds	r7, #32
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}
 80156d4:	24001d04 	.word	0x24001d04
 80156d8:	24001d18 	.word	0x24001d18

080156dc <vTaskMissedYield>:
 80156dc:	b480      	push	{r7}
 80156de:	af00      	add	r7, sp, #0
 80156e0:	4b03      	ldr	r3, [pc, #12]	; (80156f0 <vTaskMissedYield+0x14>)
 80156e2:	2201      	movs	r2, #1
 80156e4:	601a      	str	r2, [r3, #0]
 80156e6:	bf00      	nop
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr
 80156f0:	24001d14 	.word	0x24001d14

080156f4 <prvIdleTask>:
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
 80156fc:	f000 f852 	bl	80157a4 <prvCheckTasksWaitingTermination>
 8015700:	4b06      	ldr	r3, [pc, #24]	; (801571c <prvIdleTask+0x28>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	2b01      	cmp	r3, #1
 8015706:	d9f9      	bls.n	80156fc <prvIdleTask+0x8>
 8015708:	4b05      	ldr	r3, [pc, #20]	; (8015720 <prvIdleTask+0x2c>)
 801570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801570e:	601a      	str	r2, [r3, #0]
 8015710:	f3bf 8f4f 	dsb	sy
 8015714:	f3bf 8f6f 	isb	sy
 8015718:	e7f0      	b.n	80156fc <prvIdleTask+0x8>
 801571a:	bf00      	nop
 801571c:	24001830 	.word	0x24001830
 8015720:	e000ed04 	.word	0xe000ed04

08015724 <prvInitialiseTaskLists>:
 8015724:	b580      	push	{r7, lr}
 8015726:	b082      	sub	sp, #8
 8015728:	af00      	add	r7, sp, #0
 801572a:	2300      	movs	r3, #0
 801572c:	607b      	str	r3, [r7, #4]
 801572e:	e00c      	b.n	801574a <prvInitialiseTaskLists+0x26>
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	4613      	mov	r3, r2
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	4413      	add	r3, r2
 8015738:	009b      	lsls	r3, r3, #2
 801573a:	4a12      	ldr	r2, [pc, #72]	; (8015784 <prvInitialiseTaskLists+0x60>)
 801573c:	4413      	add	r3, r2
 801573e:	4618      	mov	r0, r3
 8015740:	f7fe fa76 	bl	8013c30 <vListInitialise>
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	3301      	adds	r3, #1
 8015748:	607b      	str	r3, [r7, #4]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2b37      	cmp	r3, #55	; 0x37
 801574e:	d9ef      	bls.n	8015730 <prvInitialiseTaskLists+0xc>
 8015750:	480d      	ldr	r0, [pc, #52]	; (8015788 <prvInitialiseTaskLists+0x64>)
 8015752:	f7fe fa6d 	bl	8013c30 <vListInitialise>
 8015756:	480d      	ldr	r0, [pc, #52]	; (801578c <prvInitialiseTaskLists+0x68>)
 8015758:	f7fe fa6a 	bl	8013c30 <vListInitialise>
 801575c:	480c      	ldr	r0, [pc, #48]	; (8015790 <prvInitialiseTaskLists+0x6c>)
 801575e:	f7fe fa67 	bl	8013c30 <vListInitialise>
 8015762:	480c      	ldr	r0, [pc, #48]	; (8015794 <prvInitialiseTaskLists+0x70>)
 8015764:	f7fe fa64 	bl	8013c30 <vListInitialise>
 8015768:	480b      	ldr	r0, [pc, #44]	; (8015798 <prvInitialiseTaskLists+0x74>)
 801576a:	f7fe fa61 	bl	8013c30 <vListInitialise>
 801576e:	4b0b      	ldr	r3, [pc, #44]	; (801579c <prvInitialiseTaskLists+0x78>)
 8015770:	4a05      	ldr	r2, [pc, #20]	; (8015788 <prvInitialiseTaskLists+0x64>)
 8015772:	601a      	str	r2, [r3, #0]
 8015774:	4b0a      	ldr	r3, [pc, #40]	; (80157a0 <prvInitialiseTaskLists+0x7c>)
 8015776:	4a05      	ldr	r2, [pc, #20]	; (801578c <prvInitialiseTaskLists+0x68>)
 8015778:	601a      	str	r2, [r3, #0]
 801577a:	bf00      	nop
 801577c:	3708      	adds	r7, #8
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	24001830 	.word	0x24001830
 8015788:	24001c90 	.word	0x24001c90
 801578c:	24001ca4 	.word	0x24001ca4
 8015790:	24001cc0 	.word	0x24001cc0
 8015794:	24001cd4 	.word	0x24001cd4
 8015798:	24001cec 	.word	0x24001cec
 801579c:	24001cb8 	.word	0x24001cb8
 80157a0:	24001cbc 	.word	0x24001cbc

080157a4 <prvCheckTasksWaitingTermination>:
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b082      	sub	sp, #8
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	e019      	b.n	80157e0 <prvCheckTasksWaitingTermination+0x3c>
 80157ac:	f000 fe0a 	bl	80163c4 <vPortEnterCritical>
 80157b0:	4b10      	ldr	r3, [pc, #64]	; (80157f4 <prvCheckTasksWaitingTermination+0x50>)
 80157b2:	68db      	ldr	r3, [r3, #12]
 80157b4:	68db      	ldr	r3, [r3, #12]
 80157b6:	607b      	str	r3, [r7, #4]
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	3304      	adds	r3, #4
 80157bc:	4618      	mov	r0, r3
 80157be:	f7fe fac1 	bl	8013d44 <uxListRemove>
 80157c2:	4b0d      	ldr	r3, [pc, #52]	; (80157f8 <prvCheckTasksWaitingTermination+0x54>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	3b01      	subs	r3, #1
 80157c8:	4a0b      	ldr	r2, [pc, #44]	; (80157f8 <prvCheckTasksWaitingTermination+0x54>)
 80157ca:	6013      	str	r3, [r2, #0]
 80157cc:	4b0b      	ldr	r3, [pc, #44]	; (80157fc <prvCheckTasksWaitingTermination+0x58>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	3b01      	subs	r3, #1
 80157d2:	4a0a      	ldr	r2, [pc, #40]	; (80157fc <prvCheckTasksWaitingTermination+0x58>)
 80157d4:	6013      	str	r3, [r2, #0]
 80157d6:	f000 fe25 	bl	8016424 <vPortExitCritical>
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f000 f810 	bl	8015800 <prvDeleteTCB>
 80157e0:	4b06      	ldr	r3, [pc, #24]	; (80157fc <prvCheckTasksWaitingTermination+0x58>)
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d1e1      	bne.n	80157ac <prvCheckTasksWaitingTermination+0x8>
 80157e8:	bf00      	nop
 80157ea:	bf00      	nop
 80157ec:	3708      	adds	r7, #8
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
 80157f2:	bf00      	nop
 80157f4:	24001cd4 	.word	0x24001cd4
 80157f8:	24001d00 	.word	0x24001d00
 80157fc:	24001ce8 	.word	0x24001ce8

08015800 <prvDeleteTCB>:
 8015800:	b580      	push	{r7, lr}
 8015802:	b084      	sub	sp, #16
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801580e:	2b00      	cmp	r3, #0
 8015810:	d108      	bne.n	8015824 <prvDeleteTCB+0x24>
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015816:	4618      	mov	r0, r3
 8015818:	f000 ffc2 	bl	80167a0 <vPortFree>
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f000 ffbf 	bl	80167a0 <vPortFree>
 8015822:	e018      	b.n	8015856 <prvDeleteTCB+0x56>
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801582a:	2b01      	cmp	r3, #1
 801582c:	d103      	bne.n	8015836 <prvDeleteTCB+0x36>
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f000 ffb6 	bl	80167a0 <vPortFree>
 8015834:	e00f      	b.n	8015856 <prvDeleteTCB+0x56>
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801583c:	2b02      	cmp	r3, #2
 801583e:	d00a      	beq.n	8015856 <prvDeleteTCB+0x56>
 8015840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015844:	f383 8811 	msr	BASEPRI, r3
 8015848:	f3bf 8f6f 	isb	sy
 801584c:	f3bf 8f4f 	dsb	sy
 8015850:	60fb      	str	r3, [r7, #12]
 8015852:	bf00      	nop
 8015854:	e7fe      	b.n	8015854 <prvDeleteTCB+0x54>
 8015856:	bf00      	nop
 8015858:	3710      	adds	r7, #16
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
	...

08015860 <prvResetNextTaskUnblockTime>:
 8015860:	b480      	push	{r7}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
 8015866:	4b0c      	ldr	r3, [pc, #48]	; (8015898 <prvResetNextTaskUnblockTime+0x38>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d104      	bne.n	801587a <prvResetNextTaskUnblockTime+0x1a>
 8015870:	4b0a      	ldr	r3, [pc, #40]	; (801589c <prvResetNextTaskUnblockTime+0x3c>)
 8015872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015876:	601a      	str	r2, [r3, #0]
 8015878:	e008      	b.n	801588c <prvResetNextTaskUnblockTime+0x2c>
 801587a:	4b07      	ldr	r3, [pc, #28]	; (8015898 <prvResetNextTaskUnblockTime+0x38>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	68db      	ldr	r3, [r3, #12]
 8015882:	607b      	str	r3, [r7, #4]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	4a04      	ldr	r2, [pc, #16]	; (801589c <prvResetNextTaskUnblockTime+0x3c>)
 801588a:	6013      	str	r3, [r2, #0]
 801588c:	bf00      	nop
 801588e:	370c      	adds	r7, #12
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr
 8015898:	24001cb8 	.word	0x24001cb8
 801589c:	24001d20 	.word	0x24001d20

080158a0 <xTaskGetSchedulerState>:
 80158a0:	b480      	push	{r7}
 80158a2:	b083      	sub	sp, #12
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	4b0b      	ldr	r3, [pc, #44]	; (80158d4 <xTaskGetSchedulerState+0x34>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d102      	bne.n	80158b4 <xTaskGetSchedulerState+0x14>
 80158ae:	2301      	movs	r3, #1
 80158b0:	607b      	str	r3, [r7, #4]
 80158b2:	e008      	b.n	80158c6 <xTaskGetSchedulerState+0x26>
 80158b4:	4b08      	ldr	r3, [pc, #32]	; (80158d8 <xTaskGetSchedulerState+0x38>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d102      	bne.n	80158c2 <xTaskGetSchedulerState+0x22>
 80158bc:	2302      	movs	r3, #2
 80158be:	607b      	str	r3, [r7, #4]
 80158c0:	e001      	b.n	80158c6 <xTaskGetSchedulerState+0x26>
 80158c2:	2300      	movs	r3, #0
 80158c4:	607b      	str	r3, [r7, #4]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	4618      	mov	r0, r3
 80158ca:	370c      	adds	r7, #12
 80158cc:	46bd      	mov	sp, r7
 80158ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d2:	4770      	bx	lr
 80158d4:	24001d0c 	.word	0x24001d0c
 80158d8:	24001d28 	.word	0x24001d28

080158dc <xTaskPriorityDisinherit>:
 80158dc:	b580      	push	{r7, lr}
 80158de:	b086      	sub	sp, #24
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	613b      	str	r3, [r7, #16]
 80158e8:	2300      	movs	r3, #0
 80158ea:	617b      	str	r3, [r7, #20]
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d056      	beq.n	80159a0 <xTaskPriorityDisinherit+0xc4>
 80158f2:	4b2e      	ldr	r3, [pc, #184]	; (80159ac <xTaskPriorityDisinherit+0xd0>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	693a      	ldr	r2, [r7, #16]
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d00a      	beq.n	8015912 <xTaskPriorityDisinherit+0x36>
 80158fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015900:	f383 8811 	msr	BASEPRI, r3
 8015904:	f3bf 8f6f 	isb	sy
 8015908:	f3bf 8f4f 	dsb	sy
 801590c:	60fb      	str	r3, [r7, #12]
 801590e:	bf00      	nop
 8015910:	e7fe      	b.n	8015910 <xTaskPriorityDisinherit+0x34>
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015916:	2b00      	cmp	r3, #0
 8015918:	d10a      	bne.n	8015930 <xTaskPriorityDisinherit+0x54>
 801591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801591e:	f383 8811 	msr	BASEPRI, r3
 8015922:	f3bf 8f6f 	isb	sy
 8015926:	f3bf 8f4f 	dsb	sy
 801592a:	60bb      	str	r3, [r7, #8]
 801592c:	bf00      	nop
 801592e:	e7fe      	b.n	801592e <xTaskPriorityDisinherit+0x52>
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015934:	1e5a      	subs	r2, r3, #1
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	651a      	str	r2, [r3, #80]	; 0x50
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015942:	429a      	cmp	r2, r3
 8015944:	d02c      	beq.n	80159a0 <xTaskPriorityDisinherit+0xc4>
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801594a:	2b00      	cmp	r3, #0
 801594c:	d128      	bne.n	80159a0 <xTaskPriorityDisinherit+0xc4>
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	3304      	adds	r3, #4
 8015952:	4618      	mov	r0, r3
 8015954:	f7fe f9f6 	bl	8013d44 <uxListRemove>
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015964:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	619a      	str	r2, [r3, #24]
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015970:	4b0f      	ldr	r3, [pc, #60]	; (80159b0 <xTaskPriorityDisinherit+0xd4>)
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	429a      	cmp	r2, r3
 8015976:	d903      	bls.n	8015980 <xTaskPriorityDisinherit+0xa4>
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801597c:	4a0c      	ldr	r2, [pc, #48]	; (80159b0 <xTaskPriorityDisinherit+0xd4>)
 801597e:	6013      	str	r3, [r2, #0]
 8015980:	693b      	ldr	r3, [r7, #16]
 8015982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015984:	4613      	mov	r3, r2
 8015986:	009b      	lsls	r3, r3, #2
 8015988:	4413      	add	r3, r2
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	4a09      	ldr	r2, [pc, #36]	; (80159b4 <xTaskPriorityDisinherit+0xd8>)
 801598e:	441a      	add	r2, r3
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	3304      	adds	r3, #4
 8015994:	4619      	mov	r1, r3
 8015996:	4610      	mov	r0, r2
 8015998:	f7fe f977 	bl	8013c8a <vListInsertEnd>
 801599c:	2301      	movs	r3, #1
 801599e:	617b      	str	r3, [r7, #20]
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	4618      	mov	r0, r3
 80159a4:	3718      	adds	r7, #24
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}
 80159aa:	bf00      	nop
 80159ac:	2400182c 	.word	0x2400182c
 80159b0:	24001d08 	.word	0x24001d08
 80159b4:	24001830 	.word	0x24001830

080159b8 <uxTaskResetEventItemValue>:
 80159b8:	b480      	push	{r7}
 80159ba:	b083      	sub	sp, #12
 80159bc:	af00      	add	r7, sp, #0
 80159be:	4b09      	ldr	r3, [pc, #36]	; (80159e4 <uxTaskResetEventItemValue+0x2c>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	699b      	ldr	r3, [r3, #24]
 80159c4:	607b      	str	r3, [r7, #4]
 80159c6:	4b07      	ldr	r3, [pc, #28]	; (80159e4 <uxTaskResetEventItemValue+0x2c>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159cc:	4b05      	ldr	r3, [pc, #20]	; (80159e4 <uxTaskResetEventItemValue+0x2c>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80159d4:	619a      	str	r2, [r3, #24]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	4618      	mov	r0, r3
 80159da:	370c      	adds	r7, #12
 80159dc:	46bd      	mov	sp, r7
 80159de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e2:	4770      	bx	lr
 80159e4:	2400182c 	.word	0x2400182c

080159e8 <prvAddCurrentTaskToDelayedList>:
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b084      	sub	sp, #16
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
 80159f0:	6039      	str	r1, [r7, #0]
 80159f2:	4b21      	ldr	r3, [pc, #132]	; (8015a78 <prvAddCurrentTaskToDelayedList+0x90>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	60fb      	str	r3, [r7, #12]
 80159f8:	4b20      	ldr	r3, [pc, #128]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	3304      	adds	r3, #4
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7fe f9a0 	bl	8013d44 <uxListRemove>
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a0a:	d10a      	bne.n	8015a22 <prvAddCurrentTaskToDelayedList+0x3a>
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d007      	beq.n	8015a22 <prvAddCurrentTaskToDelayedList+0x3a>
 8015a12:	4b1a      	ldr	r3, [pc, #104]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	3304      	adds	r3, #4
 8015a18:	4619      	mov	r1, r3
 8015a1a:	4819      	ldr	r0, [pc, #100]	; (8015a80 <prvAddCurrentTaskToDelayedList+0x98>)
 8015a1c:	f7fe f935 	bl	8013c8a <vListInsertEnd>
 8015a20:	e026      	b.n	8015a70 <prvAddCurrentTaskToDelayedList+0x88>
 8015a22:	68fa      	ldr	r2, [r7, #12]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	4413      	add	r3, r2
 8015a28:	60bb      	str	r3, [r7, #8]
 8015a2a:	4b14      	ldr	r3, [pc, #80]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	68ba      	ldr	r2, [r7, #8]
 8015a30:	605a      	str	r2, [r3, #4]
 8015a32:	68ba      	ldr	r2, [r7, #8]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	429a      	cmp	r2, r3
 8015a38:	d209      	bcs.n	8015a4e <prvAddCurrentTaskToDelayedList+0x66>
 8015a3a:	4b12      	ldr	r3, [pc, #72]	; (8015a84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015a3c:	681a      	ldr	r2, [r3, #0]
 8015a3e:	4b0f      	ldr	r3, [pc, #60]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	3304      	adds	r3, #4
 8015a44:	4619      	mov	r1, r3
 8015a46:	4610      	mov	r0, r2
 8015a48:	f7fe f943 	bl	8013cd2 <vListInsert>
 8015a4c:	e010      	b.n	8015a70 <prvAddCurrentTaskToDelayedList+0x88>
 8015a4e:	4b0e      	ldr	r3, [pc, #56]	; (8015a88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	4b0a      	ldr	r3, [pc, #40]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	3304      	adds	r3, #4
 8015a58:	4619      	mov	r1, r3
 8015a5a:	4610      	mov	r0, r2
 8015a5c:	f7fe f939 	bl	8013cd2 <vListInsert>
 8015a60:	4b0a      	ldr	r3, [pc, #40]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d202      	bcs.n	8015a70 <prvAddCurrentTaskToDelayedList+0x88>
 8015a6a:	4a08      	ldr	r2, [pc, #32]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	6013      	str	r3, [r2, #0]
 8015a70:	bf00      	nop
 8015a72:	3710      	adds	r7, #16
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	24001d04 	.word	0x24001d04
 8015a7c:	2400182c 	.word	0x2400182c
 8015a80:	24001cec 	.word	0x24001cec
 8015a84:	24001cbc 	.word	0x24001cbc
 8015a88:	24001cb8 	.word	0x24001cb8
 8015a8c:	24001d20 	.word	0x24001d20

08015a90 <xTimerCreateTimerTask>:
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b08a      	sub	sp, #40	; 0x28
 8015a94:	af04      	add	r7, sp, #16
 8015a96:	2300      	movs	r3, #0
 8015a98:	617b      	str	r3, [r7, #20]
 8015a9a:	f000 fb07 	bl	80160ac <prvCheckForValidListAndQueue>
 8015a9e:	4b1c      	ldr	r3, [pc, #112]	; (8015b10 <xTimerCreateTimerTask+0x80>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d021      	beq.n	8015aea <xTimerCreateTimerTask+0x5a>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	60fb      	str	r3, [r7, #12]
 8015aaa:	2300      	movs	r3, #0
 8015aac:	60bb      	str	r3, [r7, #8]
 8015aae:	1d3a      	adds	r2, r7, #4
 8015ab0:	f107 0108 	add.w	r1, r7, #8
 8015ab4:	f107 030c 	add.w	r3, r7, #12
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7fd fe33 	bl	8013724 <vApplicationGetTimerTaskMemory>
 8015abe:	6879      	ldr	r1, [r7, #4]
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	68fa      	ldr	r2, [r7, #12]
 8015ac4:	9202      	str	r2, [sp, #8]
 8015ac6:	9301      	str	r3, [sp, #4]
 8015ac8:	2302      	movs	r3, #2
 8015aca:	9300      	str	r3, [sp, #0]
 8015acc:	2300      	movs	r3, #0
 8015ace:	460a      	mov	r2, r1
 8015ad0:	4910      	ldr	r1, [pc, #64]	; (8015b14 <xTimerCreateTimerTask+0x84>)
 8015ad2:	4811      	ldr	r0, [pc, #68]	; (8015b18 <xTimerCreateTimerTask+0x88>)
 8015ad4:	f7fe ff06 	bl	80148e4 <xTaskCreateStatic>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	4a10      	ldr	r2, [pc, #64]	; (8015b1c <xTimerCreateTimerTask+0x8c>)
 8015adc:	6013      	str	r3, [r2, #0]
 8015ade:	4b0f      	ldr	r3, [pc, #60]	; (8015b1c <xTimerCreateTimerTask+0x8c>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d001      	beq.n	8015aea <xTimerCreateTimerTask+0x5a>
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	617b      	str	r3, [r7, #20]
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d10a      	bne.n	8015b06 <xTimerCreateTimerTask+0x76>
 8015af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af4:	f383 8811 	msr	BASEPRI, r3
 8015af8:	f3bf 8f6f 	isb	sy
 8015afc:	f3bf 8f4f 	dsb	sy
 8015b00:	613b      	str	r3, [r7, #16]
 8015b02:	bf00      	nop
 8015b04:	e7fe      	b.n	8015b04 <xTimerCreateTimerTask+0x74>
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3718      	adds	r7, #24
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	24001d5c 	.word	0x24001d5c
 8015b14:	080176f0 	.word	0x080176f0
 8015b18:	08015c55 	.word	0x08015c55
 8015b1c:	24001d60 	.word	0x24001d60

08015b20 <xTimerGenericCommand>:
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b08a      	sub	sp, #40	; 0x28
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	607a      	str	r2, [r7, #4]
 8015b2c:	603b      	str	r3, [r7, #0]
 8015b2e:	2300      	movs	r3, #0
 8015b30:	627b      	str	r3, [r7, #36]	; 0x24
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d10a      	bne.n	8015b4e <xTimerGenericCommand+0x2e>
 8015b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b3c:	f383 8811 	msr	BASEPRI, r3
 8015b40:	f3bf 8f6f 	isb	sy
 8015b44:	f3bf 8f4f 	dsb	sy
 8015b48:	623b      	str	r3, [r7, #32]
 8015b4a:	bf00      	nop
 8015b4c:	e7fe      	b.n	8015b4c <xTimerGenericCommand+0x2c>
 8015b4e:	4b1a      	ldr	r3, [pc, #104]	; (8015bb8 <xTimerGenericCommand+0x98>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d02a      	beq.n	8015bac <xTimerGenericCommand+0x8c>
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	613b      	str	r3, [r7, #16]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	617b      	str	r3, [r7, #20]
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	61bb      	str	r3, [r7, #24]
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	2b05      	cmp	r3, #5
 8015b66:	dc18      	bgt.n	8015b9a <xTimerGenericCommand+0x7a>
 8015b68:	f7ff fe9a 	bl	80158a0 <xTaskGetSchedulerState>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b02      	cmp	r3, #2
 8015b70:	d109      	bne.n	8015b86 <xTimerGenericCommand+0x66>
 8015b72:	4b11      	ldr	r3, [pc, #68]	; (8015bb8 <xTimerGenericCommand+0x98>)
 8015b74:	6818      	ldr	r0, [r3, #0]
 8015b76:	f107 0110 	add.w	r1, r7, #16
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b7e:	f7fe fa49 	bl	8014014 <xQueueGenericSend>
 8015b82:	6278      	str	r0, [r7, #36]	; 0x24
 8015b84:	e012      	b.n	8015bac <xTimerGenericCommand+0x8c>
 8015b86:	4b0c      	ldr	r3, [pc, #48]	; (8015bb8 <xTimerGenericCommand+0x98>)
 8015b88:	6818      	ldr	r0, [r3, #0]
 8015b8a:	f107 0110 	add.w	r1, r7, #16
 8015b8e:	2300      	movs	r3, #0
 8015b90:	2200      	movs	r2, #0
 8015b92:	f7fe fa3f 	bl	8014014 <xQueueGenericSend>
 8015b96:	6278      	str	r0, [r7, #36]	; 0x24
 8015b98:	e008      	b.n	8015bac <xTimerGenericCommand+0x8c>
 8015b9a:	4b07      	ldr	r3, [pc, #28]	; (8015bb8 <xTimerGenericCommand+0x98>)
 8015b9c:	6818      	ldr	r0, [r3, #0]
 8015b9e:	f107 0110 	add.w	r1, r7, #16
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	683a      	ldr	r2, [r7, #0]
 8015ba6:	f7fe fb33 	bl	8014210 <xQueueGenericSendFromISR>
 8015baa:	6278      	str	r0, [r7, #36]	; 0x24
 8015bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3728      	adds	r7, #40	; 0x28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	24001d5c 	.word	0x24001d5c

08015bbc <prvProcessExpiredTimer>:
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b088      	sub	sp, #32
 8015bc0:	af02      	add	r7, sp, #8
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
 8015bc6:	4b22      	ldr	r3, [pc, #136]	; (8015c50 <prvProcessExpiredTimer+0x94>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	617b      	str	r3, [r7, #20]
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	3304      	adds	r3, #4
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f7fe f8b5 	bl	8013d44 <uxListRemove>
 8015bda:	697b      	ldr	r3, [r7, #20]
 8015bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015be0:	f003 0304 	and.w	r3, r3, #4
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d022      	beq.n	8015c2e <prvProcessExpiredTimer+0x72>
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	699a      	ldr	r2, [r3, #24]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	18d1      	adds	r1, r2, r3
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	683a      	ldr	r2, [r7, #0]
 8015bf4:	6978      	ldr	r0, [r7, #20]
 8015bf6:	f000 f8d1 	bl	8015d9c <prvInsertTimerInActiveList>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d01f      	beq.n	8015c40 <prvProcessExpiredTimer+0x84>
 8015c00:	2300      	movs	r3, #0
 8015c02:	9300      	str	r3, [sp, #0]
 8015c04:	2300      	movs	r3, #0
 8015c06:	687a      	ldr	r2, [r7, #4]
 8015c08:	2100      	movs	r1, #0
 8015c0a:	6978      	ldr	r0, [r7, #20]
 8015c0c:	f7ff ff88 	bl	8015b20 <xTimerGenericCommand>
 8015c10:	6138      	str	r0, [r7, #16]
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d113      	bne.n	8015c40 <prvProcessExpiredTimer+0x84>
 8015c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c1c:	f383 8811 	msr	BASEPRI, r3
 8015c20:	f3bf 8f6f 	isb	sy
 8015c24:	f3bf 8f4f 	dsb	sy
 8015c28:	60fb      	str	r3, [r7, #12]
 8015c2a:	bf00      	nop
 8015c2c:	e7fe      	b.n	8015c2c <prvProcessExpiredTimer+0x70>
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c34:	f023 0301 	bic.w	r3, r3, #1
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	6a1b      	ldr	r3, [r3, #32]
 8015c44:	6978      	ldr	r0, [r7, #20]
 8015c46:	4798      	blx	r3
 8015c48:	bf00      	nop
 8015c4a:	3718      	adds	r7, #24
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	24001d54 	.word	0x24001d54

08015c54 <prvTimerTask>:
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b084      	sub	sp, #16
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	f107 0308 	add.w	r3, r7, #8
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 f857 	bl	8015d14 <prvGetNextExpireTime>
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	68f8      	ldr	r0, [r7, #12]
 8015c6e:	f000 f803 	bl	8015c78 <prvProcessTimerOrBlockTask>
 8015c72:	f000 f8d5 	bl	8015e20 <prvProcessReceivedCommands>
 8015c76:	e7f1      	b.n	8015c5c <prvTimerTask+0x8>

08015c78 <prvProcessTimerOrBlockTask>:
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b084      	sub	sp, #16
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
 8015c82:	f7ff f985 	bl	8014f90 <vTaskSuspendAll>
 8015c86:	f107 0308 	add.w	r3, r7, #8
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f000 f866 	bl	8015d5c <prvSampleTimeNow>
 8015c90:	60f8      	str	r0, [r7, #12]
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d130      	bne.n	8015cfa <prvProcessTimerOrBlockTask+0x82>
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d10a      	bne.n	8015cb4 <prvProcessTimerOrBlockTask+0x3c>
 8015c9e:	687a      	ldr	r2, [r7, #4]
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	d806      	bhi.n	8015cb4 <prvProcessTimerOrBlockTask+0x3c>
 8015ca6:	f7ff f981 	bl	8014fac <xTaskResumeAll>
 8015caa:	68f9      	ldr	r1, [r7, #12]
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7ff ff85 	bl	8015bbc <prvProcessExpiredTimer>
 8015cb2:	e024      	b.n	8015cfe <prvProcessTimerOrBlockTask+0x86>
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d008      	beq.n	8015ccc <prvProcessTimerOrBlockTask+0x54>
 8015cba:	4b13      	ldr	r3, [pc, #76]	; (8015d08 <prvProcessTimerOrBlockTask+0x90>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d101      	bne.n	8015cc8 <prvProcessTimerOrBlockTask+0x50>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	e000      	b.n	8015cca <prvProcessTimerOrBlockTask+0x52>
 8015cc8:	2300      	movs	r3, #0
 8015cca:	603b      	str	r3, [r7, #0]
 8015ccc:	4b0f      	ldr	r3, [pc, #60]	; (8015d0c <prvProcessTimerOrBlockTask+0x94>)
 8015cce:	6818      	ldr	r0, [r3, #0]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	1ad3      	subs	r3, r2, r3
 8015cd6:	683a      	ldr	r2, [r7, #0]
 8015cd8:	4619      	mov	r1, r3
 8015cda:	f7fe fdcf 	bl	801487c <vQueueWaitForMessageRestricted>
 8015cde:	f7ff f965 	bl	8014fac <xTaskResumeAll>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d10a      	bne.n	8015cfe <prvProcessTimerOrBlockTask+0x86>
 8015ce8:	4b09      	ldr	r3, [pc, #36]	; (8015d10 <prvProcessTimerOrBlockTask+0x98>)
 8015cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cee:	601a      	str	r2, [r3, #0]
 8015cf0:	f3bf 8f4f 	dsb	sy
 8015cf4:	f3bf 8f6f 	isb	sy
 8015cf8:	e001      	b.n	8015cfe <prvProcessTimerOrBlockTask+0x86>
 8015cfa:	f7ff f957 	bl	8014fac <xTaskResumeAll>
 8015cfe:	bf00      	nop
 8015d00:	3710      	adds	r7, #16
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	bf00      	nop
 8015d08:	24001d58 	.word	0x24001d58
 8015d0c:	24001d5c 	.word	0x24001d5c
 8015d10:	e000ed04 	.word	0xe000ed04

08015d14 <prvGetNextExpireTime>:
 8015d14:	b480      	push	{r7}
 8015d16:	b085      	sub	sp, #20
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
 8015d1c:	4b0e      	ldr	r3, [pc, #56]	; (8015d58 <prvGetNextExpireTime+0x44>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d101      	bne.n	8015d2a <prvGetNextExpireTime+0x16>
 8015d26:	2201      	movs	r2, #1
 8015d28:	e000      	b.n	8015d2c <prvGetNextExpireTime+0x18>
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	601a      	str	r2, [r3, #0]
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d105      	bne.n	8015d44 <prvGetNextExpireTime+0x30>
 8015d38:	4b07      	ldr	r3, [pc, #28]	; (8015d58 <prvGetNextExpireTime+0x44>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	68db      	ldr	r3, [r3, #12]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	60fb      	str	r3, [r7, #12]
 8015d42:	e001      	b.n	8015d48 <prvGetNextExpireTime+0x34>
 8015d44:	2300      	movs	r3, #0
 8015d46:	60fb      	str	r3, [r7, #12]
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3714      	adds	r7, #20
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d54:	4770      	bx	lr
 8015d56:	bf00      	nop
 8015d58:	24001d54 	.word	0x24001d54

08015d5c <prvSampleTimeNow>:
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
 8015d64:	f7ff f9c0 	bl	80150e8 <xTaskGetTickCount>
 8015d68:	60f8      	str	r0, [r7, #12]
 8015d6a:	4b0b      	ldr	r3, [pc, #44]	; (8015d98 <prvSampleTimeNow+0x3c>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	68fa      	ldr	r2, [r7, #12]
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d205      	bcs.n	8015d80 <prvSampleTimeNow+0x24>
 8015d74:	f000 f936 	bl	8015fe4 <prvSwitchTimerLists>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2201      	movs	r2, #1
 8015d7c:	601a      	str	r2, [r3, #0]
 8015d7e:	e002      	b.n	8015d86 <prvSampleTimeNow+0x2a>
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2200      	movs	r2, #0
 8015d84:	601a      	str	r2, [r3, #0]
 8015d86:	4a04      	ldr	r2, [pc, #16]	; (8015d98 <prvSampleTimeNow+0x3c>)
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	6013      	str	r3, [r2, #0]
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	24001d64 	.word	0x24001d64

08015d9c <prvInsertTimerInActiveList>:
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b086      	sub	sp, #24
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	60f8      	str	r0, [r7, #12]
 8015da4:	60b9      	str	r1, [r7, #8]
 8015da6:	607a      	str	r2, [r7, #4]
 8015da8:	603b      	str	r3, [r7, #0]
 8015daa:	2300      	movs	r3, #0
 8015dac:	617b      	str	r3, [r7, #20]
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	68ba      	ldr	r2, [r7, #8]
 8015db2:	605a      	str	r2, [r3, #4]
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	611a      	str	r2, [r3, #16]
 8015dba:	68ba      	ldr	r2, [r7, #8]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d812      	bhi.n	8015de8 <prvInsertTimerInActiveList+0x4c>
 8015dc2:	687a      	ldr	r2, [r7, #4]
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	1ad2      	subs	r2, r2, r3
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	699b      	ldr	r3, [r3, #24]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d302      	bcc.n	8015dd6 <prvInsertTimerInActiveList+0x3a>
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	617b      	str	r3, [r7, #20]
 8015dd4:	e01b      	b.n	8015e0e <prvInsertTimerInActiveList+0x72>
 8015dd6:	4b10      	ldr	r3, [pc, #64]	; (8015e18 <prvInsertTimerInActiveList+0x7c>)
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	3304      	adds	r3, #4
 8015dde:	4619      	mov	r1, r3
 8015de0:	4610      	mov	r0, r2
 8015de2:	f7fd ff76 	bl	8013cd2 <vListInsert>
 8015de6:	e012      	b.n	8015e0e <prvInsertTimerInActiveList+0x72>
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d206      	bcs.n	8015dfe <prvInsertTimerInActiveList+0x62>
 8015df0:	68ba      	ldr	r2, [r7, #8]
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d302      	bcc.n	8015dfe <prvInsertTimerInActiveList+0x62>
 8015df8:	2301      	movs	r3, #1
 8015dfa:	617b      	str	r3, [r7, #20]
 8015dfc:	e007      	b.n	8015e0e <prvInsertTimerInActiveList+0x72>
 8015dfe:	4b07      	ldr	r3, [pc, #28]	; (8015e1c <prvInsertTimerInActiveList+0x80>)
 8015e00:	681a      	ldr	r2, [r3, #0]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	3304      	adds	r3, #4
 8015e06:	4619      	mov	r1, r3
 8015e08:	4610      	mov	r0, r2
 8015e0a:	f7fd ff62 	bl	8013cd2 <vListInsert>
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	4618      	mov	r0, r3
 8015e12:	3718      	adds	r7, #24
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	24001d58 	.word	0x24001d58
 8015e1c:	24001d54 	.word	0x24001d54

08015e20 <prvProcessReceivedCommands>:
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b08e      	sub	sp, #56	; 0x38
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	e0ca      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	da18      	bge.n	8015e60 <prvProcessReceivedCommands+0x40>
 8015e2e:	1d3b      	adds	r3, r7, #4
 8015e30:	3304      	adds	r3, #4
 8015e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d10a      	bne.n	8015e50 <prvProcessReceivedCommands+0x30>
 8015e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e3e:	f383 8811 	msr	BASEPRI, r3
 8015e42:	f3bf 8f6f 	isb	sy
 8015e46:	f3bf 8f4f 	dsb	sy
 8015e4a:	61fb      	str	r3, [r7, #28]
 8015e4c:	bf00      	nop
 8015e4e:	e7fe      	b.n	8015e4e <prvProcessReceivedCommands+0x2e>
 8015e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e56:	6850      	ldr	r0, [r2, #4]
 8015e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e5a:	6892      	ldr	r2, [r2, #8]
 8015e5c:	4611      	mov	r1, r2
 8015e5e:	4798      	blx	r3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	f2c0 80aa 	blt.w	8015fbc <prvProcessReceivedCommands+0x19c>
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e6e:	695b      	ldr	r3, [r3, #20]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d004      	beq.n	8015e7e <prvProcessReceivedCommands+0x5e>
 8015e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e76:	3304      	adds	r3, #4
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7fd ff63 	bl	8013d44 <uxListRemove>
 8015e7e:	463b      	mov	r3, r7
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7ff ff6b 	bl	8015d5c <prvSampleTimeNow>
 8015e86:	6278      	str	r0, [r7, #36]	; 0x24
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b09      	cmp	r3, #9
 8015e8c:	f200 8097 	bhi.w	8015fbe <prvProcessReceivedCommands+0x19e>
 8015e90:	a201      	add	r2, pc, #4	; (adr r2, 8015e98 <prvProcessReceivedCommands+0x78>)
 8015e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e96:	bf00      	nop
 8015e98:	08015ec1 	.word	0x08015ec1
 8015e9c:	08015ec1 	.word	0x08015ec1
 8015ea0:	08015ec1 	.word	0x08015ec1
 8015ea4:	08015f35 	.word	0x08015f35
 8015ea8:	08015f49 	.word	0x08015f49
 8015eac:	08015f93 	.word	0x08015f93
 8015eb0:	08015ec1 	.word	0x08015ec1
 8015eb4:	08015ec1 	.word	0x08015ec1
 8015eb8:	08015f35 	.word	0x08015f35
 8015ebc:	08015f49 	.word	0x08015f49
 8015ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ec6:	f043 0301 	orr.w	r3, r3, #1
 8015eca:	b2da      	uxtb	r2, r3
 8015ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015ed2:	68ba      	ldr	r2, [r7, #8]
 8015ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed6:	699b      	ldr	r3, [r3, #24]
 8015ed8:	18d1      	adds	r1, r2, r3
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ee0:	f7ff ff5c 	bl	8015d9c <prvInsertTimerInActiveList>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d069      	beq.n	8015fbe <prvProcessReceivedCommands+0x19e>
 8015eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eec:	6a1b      	ldr	r3, [r3, #32]
 8015eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ef0:	4798      	blx	r3
 8015ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ef8:	f003 0304 	and.w	r3, r3, #4
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d05e      	beq.n	8015fbe <prvProcessReceivedCommands+0x19e>
 8015f00:	68ba      	ldr	r2, [r7, #8]
 8015f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f04:	699b      	ldr	r3, [r3, #24]
 8015f06:	441a      	add	r2, r3
 8015f08:	2300      	movs	r3, #0
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	2100      	movs	r1, #0
 8015f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f12:	f7ff fe05 	bl	8015b20 <xTimerGenericCommand>
 8015f16:	6238      	str	r0, [r7, #32]
 8015f18:	6a3b      	ldr	r3, [r7, #32]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d14f      	bne.n	8015fbe <prvProcessReceivedCommands+0x19e>
 8015f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f22:	f383 8811 	msr	BASEPRI, r3
 8015f26:	f3bf 8f6f 	isb	sy
 8015f2a:	f3bf 8f4f 	dsb	sy
 8015f2e:	61bb      	str	r3, [r7, #24]
 8015f30:	bf00      	nop
 8015f32:	e7fe      	b.n	8015f32 <prvProcessReceivedCommands+0x112>
 8015f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f3a:	f023 0301 	bic.w	r3, r3, #1
 8015f3e:	b2da      	uxtb	r2, r3
 8015f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015f46:	e03a      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>
 8015f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f4e:	f043 0301 	orr.w	r3, r3, #1
 8015f52:	b2da      	uxtb	r2, r3
 8015f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015f5a:	68ba      	ldr	r2, [r7, #8]
 8015f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5e:	619a      	str	r2, [r3, #24]
 8015f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f62:	699b      	ldr	r3, [r3, #24]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d10a      	bne.n	8015f7e <prvProcessReceivedCommands+0x15e>
 8015f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f6c:	f383 8811 	msr	BASEPRI, r3
 8015f70:	f3bf 8f6f 	isb	sy
 8015f74:	f3bf 8f4f 	dsb	sy
 8015f78:	617b      	str	r3, [r7, #20]
 8015f7a:	bf00      	nop
 8015f7c:	e7fe      	b.n	8015f7c <prvProcessReceivedCommands+0x15c>
 8015f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f80:	699a      	ldr	r2, [r3, #24]
 8015f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f84:	18d1      	adds	r1, r2, r3
 8015f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f8c:	f7ff ff06 	bl	8015d9c <prvInsertTimerInActiveList>
 8015f90:	e015      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>
 8015f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f98:	f003 0302 	and.w	r3, r3, #2
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d103      	bne.n	8015fa8 <prvProcessReceivedCommands+0x188>
 8015fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fa2:	f000 fbfd 	bl	80167a0 <vPortFree>
 8015fa6:	e00a      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>
 8015fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fae:	f023 0301 	bic.w	r3, r3, #1
 8015fb2:	b2da      	uxtb	r2, r3
 8015fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015fba:	e000      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>
 8015fbc:	bf00      	nop
 8015fbe:	4b08      	ldr	r3, [pc, #32]	; (8015fe0 <prvProcessReceivedCommands+0x1c0>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	1d39      	adds	r1, r7, #4
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fe f9be 	bl	8014348 <xQueueReceive>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	f47f af2a 	bne.w	8015e28 <prvProcessReceivedCommands+0x8>
 8015fd4:	bf00      	nop
 8015fd6:	bf00      	nop
 8015fd8:	3730      	adds	r7, #48	; 0x30
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	24001d5c 	.word	0x24001d5c

08015fe4 <prvSwitchTimerLists>:
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b088      	sub	sp, #32
 8015fe8:	af02      	add	r7, sp, #8
 8015fea:	e048      	b.n	801607e <prvSwitchTimerLists+0x9a>
 8015fec:	4b2d      	ldr	r3, [pc, #180]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	68db      	ldr	r3, [r3, #12]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	613b      	str	r3, [r7, #16]
 8015ff6:	4b2b      	ldr	r3, [pc, #172]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	68db      	ldr	r3, [r3, #12]
 8015ffc:	68db      	ldr	r3, [r3, #12]
 8015ffe:	60fb      	str	r3, [r7, #12]
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	3304      	adds	r3, #4
 8016004:	4618      	mov	r0, r3
 8016006:	f7fd fe9d 	bl	8013d44 <uxListRemove>
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	6a1b      	ldr	r3, [r3, #32]
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	4798      	blx	r3
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016018:	f003 0304 	and.w	r3, r3, #4
 801601c:	2b00      	cmp	r3, #0
 801601e:	d02e      	beq.n	801607e <prvSwitchTimerLists+0x9a>
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	699b      	ldr	r3, [r3, #24]
 8016024:	693a      	ldr	r2, [r7, #16]
 8016026:	4413      	add	r3, r2
 8016028:	60bb      	str	r3, [r7, #8]
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	429a      	cmp	r2, r3
 8016030:	d90e      	bls.n	8016050 <prvSwitchTimerLists+0x6c>
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	68ba      	ldr	r2, [r7, #8]
 8016036:	605a      	str	r2, [r3, #4]
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	611a      	str	r2, [r3, #16]
 801603e:	4b19      	ldr	r3, [pc, #100]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8016040:	681a      	ldr	r2, [r3, #0]
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	3304      	adds	r3, #4
 8016046:	4619      	mov	r1, r3
 8016048:	4610      	mov	r0, r2
 801604a:	f7fd fe42 	bl	8013cd2 <vListInsert>
 801604e:	e016      	b.n	801607e <prvSwitchTimerLists+0x9a>
 8016050:	2300      	movs	r3, #0
 8016052:	9300      	str	r3, [sp, #0]
 8016054:	2300      	movs	r3, #0
 8016056:	693a      	ldr	r2, [r7, #16]
 8016058:	2100      	movs	r1, #0
 801605a:	68f8      	ldr	r0, [r7, #12]
 801605c:	f7ff fd60 	bl	8015b20 <xTimerGenericCommand>
 8016060:	6078      	str	r0, [r7, #4]
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d10a      	bne.n	801607e <prvSwitchTimerLists+0x9a>
 8016068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801606c:	f383 8811 	msr	BASEPRI, r3
 8016070:	f3bf 8f6f 	isb	sy
 8016074:	f3bf 8f4f 	dsb	sy
 8016078:	603b      	str	r3, [r7, #0]
 801607a:	bf00      	nop
 801607c:	e7fe      	b.n	801607c <prvSwitchTimerLists+0x98>
 801607e:	4b09      	ldr	r3, [pc, #36]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d1b1      	bne.n	8015fec <prvSwitchTimerLists+0x8>
 8016088:	4b06      	ldr	r3, [pc, #24]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	617b      	str	r3, [r7, #20]
 801608e:	4b06      	ldr	r3, [pc, #24]	; (80160a8 <prvSwitchTimerLists+0xc4>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	4a04      	ldr	r2, [pc, #16]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8016094:	6013      	str	r3, [r2, #0]
 8016096:	4a04      	ldr	r2, [pc, #16]	; (80160a8 <prvSwitchTimerLists+0xc4>)
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	6013      	str	r3, [r2, #0]
 801609c:	bf00      	nop
 801609e:	3718      	adds	r7, #24
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}
 80160a4:	24001d54 	.word	0x24001d54
 80160a8:	24001d58 	.word	0x24001d58

080160ac <prvCheckForValidListAndQueue>:
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af02      	add	r7, sp, #8
 80160b2:	f000 f987 	bl	80163c4 <vPortEnterCritical>
 80160b6:	4b15      	ldr	r3, [pc, #84]	; (801610c <prvCheckForValidListAndQueue+0x60>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d120      	bne.n	8016100 <prvCheckForValidListAndQueue+0x54>
 80160be:	4814      	ldr	r0, [pc, #80]	; (8016110 <prvCheckForValidListAndQueue+0x64>)
 80160c0:	f7fd fdb6 	bl	8013c30 <vListInitialise>
 80160c4:	4813      	ldr	r0, [pc, #76]	; (8016114 <prvCheckForValidListAndQueue+0x68>)
 80160c6:	f7fd fdb3 	bl	8013c30 <vListInitialise>
 80160ca:	4b13      	ldr	r3, [pc, #76]	; (8016118 <prvCheckForValidListAndQueue+0x6c>)
 80160cc:	4a10      	ldr	r2, [pc, #64]	; (8016110 <prvCheckForValidListAndQueue+0x64>)
 80160ce:	601a      	str	r2, [r3, #0]
 80160d0:	4b12      	ldr	r3, [pc, #72]	; (801611c <prvCheckForValidListAndQueue+0x70>)
 80160d2:	4a10      	ldr	r2, [pc, #64]	; (8016114 <prvCheckForValidListAndQueue+0x68>)
 80160d4:	601a      	str	r2, [r3, #0]
 80160d6:	2300      	movs	r3, #0
 80160d8:	9300      	str	r3, [sp, #0]
 80160da:	4b11      	ldr	r3, [pc, #68]	; (8016120 <prvCheckForValidListAndQueue+0x74>)
 80160dc:	4a11      	ldr	r2, [pc, #68]	; (8016124 <prvCheckForValidListAndQueue+0x78>)
 80160de:	2110      	movs	r1, #16
 80160e0:	200a      	movs	r0, #10
 80160e2:	f7fd fec1 	bl	8013e68 <xQueueGenericCreateStatic>
 80160e6:	4603      	mov	r3, r0
 80160e8:	4a08      	ldr	r2, [pc, #32]	; (801610c <prvCheckForValidListAndQueue+0x60>)
 80160ea:	6013      	str	r3, [r2, #0]
 80160ec:	4b07      	ldr	r3, [pc, #28]	; (801610c <prvCheckForValidListAndQueue+0x60>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d005      	beq.n	8016100 <prvCheckForValidListAndQueue+0x54>
 80160f4:	4b05      	ldr	r3, [pc, #20]	; (801610c <prvCheckForValidListAndQueue+0x60>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	490b      	ldr	r1, [pc, #44]	; (8016128 <prvCheckForValidListAndQueue+0x7c>)
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7fe fb94 	bl	8014828 <vQueueAddToRegistry>
 8016100:	f000 f990 	bl	8016424 <vPortExitCritical>
 8016104:	bf00      	nop
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
 801610a:	bf00      	nop
 801610c:	24001d5c 	.word	0x24001d5c
 8016110:	24001d2c 	.word	0x24001d2c
 8016114:	24001d40 	.word	0x24001d40
 8016118:	24001d54 	.word	0x24001d54
 801611c:	24001d58 	.word	0x24001d58
 8016120:	24001e08 	.word	0x24001e08
 8016124:	24001d68 	.word	0x24001d68
 8016128:	080176f8 	.word	0x080176f8

0801612c <xTimerPendFunctionCallFromISR>:
 801612c:	b580      	push	{r7, lr}
 801612e:	b08a      	sub	sp, #40	; 0x28
 8016130:	af00      	add	r7, sp, #0
 8016132:	60f8      	str	r0, [r7, #12]
 8016134:	60b9      	str	r1, [r7, #8]
 8016136:	607a      	str	r2, [r7, #4]
 8016138:	603b      	str	r3, [r7, #0]
 801613a:	f06f 0301 	mvn.w	r3, #1
 801613e:	617b      	str	r3, [r7, #20]
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	61bb      	str	r3, [r7, #24]
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	61fb      	str	r3, [r7, #28]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	623b      	str	r3, [r7, #32]
 801614c:	4b06      	ldr	r3, [pc, #24]	; (8016168 <xTimerPendFunctionCallFromISR+0x3c>)
 801614e:	6818      	ldr	r0, [r3, #0]
 8016150:	f107 0114 	add.w	r1, r7, #20
 8016154:	2300      	movs	r3, #0
 8016156:	683a      	ldr	r2, [r7, #0]
 8016158:	f7fe f85a 	bl	8014210 <xQueueGenericSendFromISR>
 801615c:	6278      	str	r0, [r7, #36]	; 0x24
 801615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016160:	4618      	mov	r0, r3
 8016162:	3728      	adds	r7, #40	; 0x28
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}
 8016168:	24001d5c 	.word	0x24001d5c

0801616c <pxPortInitialiseStack>:
 801616c:	b480      	push	{r7}
 801616e:	b085      	sub	sp, #20
 8016170:	af00      	add	r7, sp, #0
 8016172:	60f8      	str	r0, [r7, #12]
 8016174:	60b9      	str	r1, [r7, #8]
 8016176:	607a      	str	r2, [r7, #4]
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	3b04      	subs	r3, #4
 801617c:	60fb      	str	r3, [r7, #12]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016184:	601a      	str	r2, [r3, #0]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	3b04      	subs	r3, #4
 801618a:	60fb      	str	r3, [r7, #12]
 801618c:	68bb      	ldr	r3, [r7, #8]
 801618e:	f023 0201 	bic.w	r2, r3, #1
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	601a      	str	r2, [r3, #0]
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	3b04      	subs	r3, #4
 801619a:	60fb      	str	r3, [r7, #12]
 801619c:	4a0c      	ldr	r2, [pc, #48]	; (80161d0 <pxPortInitialiseStack+0x64>)
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	601a      	str	r2, [r3, #0]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	3b14      	subs	r3, #20
 80161a6:	60fb      	str	r3, [r7, #12]
 80161a8:	687a      	ldr	r2, [r7, #4]
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	601a      	str	r2, [r3, #0]
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	3b04      	subs	r3, #4
 80161b2:	60fb      	str	r3, [r7, #12]
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	f06f 0202 	mvn.w	r2, #2
 80161ba:	601a      	str	r2, [r3, #0]
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	3b20      	subs	r3, #32
 80161c0:	60fb      	str	r3, [r7, #12]
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	4618      	mov	r0, r3
 80161c6:	3714      	adds	r7, #20
 80161c8:	46bd      	mov	sp, r7
 80161ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ce:	4770      	bx	lr
 80161d0:	080161d5 	.word	0x080161d5

080161d4 <prvTaskExitError>:
 80161d4:	b480      	push	{r7}
 80161d6:	b085      	sub	sp, #20
 80161d8:	af00      	add	r7, sp, #0
 80161da:	2300      	movs	r3, #0
 80161dc:	607b      	str	r3, [r7, #4]
 80161de:	4b12      	ldr	r3, [pc, #72]	; (8016228 <prvTaskExitError+0x54>)
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80161e6:	d00a      	beq.n	80161fe <prvTaskExitError+0x2a>
 80161e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ec:	f383 8811 	msr	BASEPRI, r3
 80161f0:	f3bf 8f6f 	isb	sy
 80161f4:	f3bf 8f4f 	dsb	sy
 80161f8:	60fb      	str	r3, [r7, #12]
 80161fa:	bf00      	nop
 80161fc:	e7fe      	b.n	80161fc <prvTaskExitError+0x28>
 80161fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016202:	f383 8811 	msr	BASEPRI, r3
 8016206:	f3bf 8f6f 	isb	sy
 801620a:	f3bf 8f4f 	dsb	sy
 801620e:	60bb      	str	r3, [r7, #8]
 8016210:	bf00      	nop
 8016212:	bf00      	nop
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d0fc      	beq.n	8016214 <prvTaskExitError+0x40>
 801621a:	bf00      	nop
 801621c:	bf00      	nop
 801621e:	3714      	adds	r7, #20
 8016220:	46bd      	mov	sp, r7
 8016222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016226:	4770      	bx	lr
 8016228:	240000a0 	.word	0x240000a0
 801622c:	00000000 	.word	0x00000000

08016230 <SVC_Handler>:
 8016230:	4b07      	ldr	r3, [pc, #28]	; (8016250 <pxCurrentTCBConst2>)
 8016232:	6819      	ldr	r1, [r3, #0]
 8016234:	6808      	ldr	r0, [r1, #0]
 8016236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801623a:	f380 8809 	msr	PSP, r0
 801623e:	f3bf 8f6f 	isb	sy
 8016242:	f04f 0000 	mov.w	r0, #0
 8016246:	f380 8811 	msr	BASEPRI, r0
 801624a:	4770      	bx	lr
 801624c:	f3af 8000 	nop.w

08016250 <pxCurrentTCBConst2>:
 8016250:	2400182c 	.word	0x2400182c
 8016254:	bf00      	nop
 8016256:	bf00      	nop

08016258 <prvPortStartFirstTask>:
 8016258:	4808      	ldr	r0, [pc, #32]	; (801627c <prvPortStartFirstTask+0x24>)
 801625a:	6800      	ldr	r0, [r0, #0]
 801625c:	6800      	ldr	r0, [r0, #0]
 801625e:	f380 8808 	msr	MSP, r0
 8016262:	f04f 0000 	mov.w	r0, #0
 8016266:	f380 8814 	msr	CONTROL, r0
 801626a:	b662      	cpsie	i
 801626c:	b661      	cpsie	f
 801626e:	f3bf 8f4f 	dsb	sy
 8016272:	f3bf 8f6f 	isb	sy
 8016276:	df00      	svc	0
 8016278:	bf00      	nop
 801627a:	bf00      	nop
 801627c:	e000ed08 	.word	0xe000ed08

08016280 <xPortStartScheduler>:
 8016280:	b580      	push	{r7, lr}
 8016282:	b086      	sub	sp, #24
 8016284:	af00      	add	r7, sp, #0
 8016286:	4b46      	ldr	r3, [pc, #280]	; (80163a0 <xPortStartScheduler+0x120>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	4a46      	ldr	r2, [pc, #280]	; (80163a4 <xPortStartScheduler+0x124>)
 801628c:	4293      	cmp	r3, r2
 801628e:	d10a      	bne.n	80162a6 <xPortStartScheduler+0x26>
 8016290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016294:	f383 8811 	msr	BASEPRI, r3
 8016298:	f3bf 8f6f 	isb	sy
 801629c:	f3bf 8f4f 	dsb	sy
 80162a0:	613b      	str	r3, [r7, #16]
 80162a2:	bf00      	nop
 80162a4:	e7fe      	b.n	80162a4 <xPortStartScheduler+0x24>
 80162a6:	4b3e      	ldr	r3, [pc, #248]	; (80163a0 <xPortStartScheduler+0x120>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	4a3f      	ldr	r2, [pc, #252]	; (80163a8 <xPortStartScheduler+0x128>)
 80162ac:	4293      	cmp	r3, r2
 80162ae:	d10a      	bne.n	80162c6 <xPortStartScheduler+0x46>
 80162b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b4:	f383 8811 	msr	BASEPRI, r3
 80162b8:	f3bf 8f6f 	isb	sy
 80162bc:	f3bf 8f4f 	dsb	sy
 80162c0:	60fb      	str	r3, [r7, #12]
 80162c2:	bf00      	nop
 80162c4:	e7fe      	b.n	80162c4 <xPortStartScheduler+0x44>
 80162c6:	4b39      	ldr	r3, [pc, #228]	; (80163ac <xPortStartScheduler+0x12c>)
 80162c8:	617b      	str	r3, [r7, #20]
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	607b      	str	r3, [r7, #4]
 80162d2:	697b      	ldr	r3, [r7, #20]
 80162d4:	22ff      	movs	r2, #255	; 0xff
 80162d6:	701a      	strb	r2, [r3, #0]
 80162d8:	697b      	ldr	r3, [r7, #20]
 80162da:	781b      	ldrb	r3, [r3, #0]
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	70fb      	strb	r3, [r7, #3]
 80162e0:	78fb      	ldrb	r3, [r7, #3]
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80162e8:	b2da      	uxtb	r2, r3
 80162ea:	4b31      	ldr	r3, [pc, #196]	; (80163b0 <xPortStartScheduler+0x130>)
 80162ec:	701a      	strb	r2, [r3, #0]
 80162ee:	4b31      	ldr	r3, [pc, #196]	; (80163b4 <xPortStartScheduler+0x134>)
 80162f0:	2207      	movs	r2, #7
 80162f2:	601a      	str	r2, [r3, #0]
 80162f4:	e009      	b.n	801630a <xPortStartScheduler+0x8a>
 80162f6:	4b2f      	ldr	r3, [pc, #188]	; (80163b4 <xPortStartScheduler+0x134>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	3b01      	subs	r3, #1
 80162fc:	4a2d      	ldr	r2, [pc, #180]	; (80163b4 <xPortStartScheduler+0x134>)
 80162fe:	6013      	str	r3, [r2, #0]
 8016300:	78fb      	ldrb	r3, [r7, #3]
 8016302:	b2db      	uxtb	r3, r3
 8016304:	005b      	lsls	r3, r3, #1
 8016306:	b2db      	uxtb	r3, r3
 8016308:	70fb      	strb	r3, [r7, #3]
 801630a:	78fb      	ldrb	r3, [r7, #3]
 801630c:	b2db      	uxtb	r3, r3
 801630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016312:	2b80      	cmp	r3, #128	; 0x80
 8016314:	d0ef      	beq.n	80162f6 <xPortStartScheduler+0x76>
 8016316:	4b27      	ldr	r3, [pc, #156]	; (80163b4 <xPortStartScheduler+0x134>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	f1c3 0307 	rsb	r3, r3, #7
 801631e:	2b04      	cmp	r3, #4
 8016320:	d00a      	beq.n	8016338 <xPortStartScheduler+0xb8>
 8016322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016326:	f383 8811 	msr	BASEPRI, r3
 801632a:	f3bf 8f6f 	isb	sy
 801632e:	f3bf 8f4f 	dsb	sy
 8016332:	60bb      	str	r3, [r7, #8]
 8016334:	bf00      	nop
 8016336:	e7fe      	b.n	8016336 <xPortStartScheduler+0xb6>
 8016338:	4b1e      	ldr	r3, [pc, #120]	; (80163b4 <xPortStartScheduler+0x134>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	021b      	lsls	r3, r3, #8
 801633e:	4a1d      	ldr	r2, [pc, #116]	; (80163b4 <xPortStartScheduler+0x134>)
 8016340:	6013      	str	r3, [r2, #0]
 8016342:	4b1c      	ldr	r3, [pc, #112]	; (80163b4 <xPortStartScheduler+0x134>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801634a:	4a1a      	ldr	r2, [pc, #104]	; (80163b4 <xPortStartScheduler+0x134>)
 801634c:	6013      	str	r3, [r2, #0]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	b2da      	uxtb	r2, r3
 8016352:	697b      	ldr	r3, [r7, #20]
 8016354:	701a      	strb	r2, [r3, #0]
 8016356:	4b18      	ldr	r3, [pc, #96]	; (80163b8 <xPortStartScheduler+0x138>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	4a17      	ldr	r2, [pc, #92]	; (80163b8 <xPortStartScheduler+0x138>)
 801635c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016360:	6013      	str	r3, [r2, #0]
 8016362:	4b15      	ldr	r3, [pc, #84]	; (80163b8 <xPortStartScheduler+0x138>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4a14      	ldr	r2, [pc, #80]	; (80163b8 <xPortStartScheduler+0x138>)
 8016368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801636c:	6013      	str	r3, [r2, #0]
 801636e:	f000 f8dd 	bl	801652c <vPortSetupTimerInterrupt>
 8016372:	4b12      	ldr	r3, [pc, #72]	; (80163bc <xPortStartScheduler+0x13c>)
 8016374:	2200      	movs	r2, #0
 8016376:	601a      	str	r2, [r3, #0]
 8016378:	f000 f8fc 	bl	8016574 <vPortEnableVFP>
 801637c:	4b10      	ldr	r3, [pc, #64]	; (80163c0 <xPortStartScheduler+0x140>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	4a0f      	ldr	r2, [pc, #60]	; (80163c0 <xPortStartScheduler+0x140>)
 8016382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016386:	6013      	str	r3, [r2, #0]
 8016388:	f7ff ff66 	bl	8016258 <prvPortStartFirstTask>
 801638c:	f7fe ff7e 	bl	801528c <vTaskSwitchContext>
 8016390:	f7ff ff20 	bl	80161d4 <prvTaskExitError>
 8016394:	2300      	movs	r3, #0
 8016396:	4618      	mov	r0, r3
 8016398:	3718      	adds	r7, #24
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}
 801639e:	bf00      	nop
 80163a0:	e000ed00 	.word	0xe000ed00
 80163a4:	410fc271 	.word	0x410fc271
 80163a8:	410fc270 	.word	0x410fc270
 80163ac:	e000e400 	.word	0xe000e400
 80163b0:	24001e58 	.word	0x24001e58
 80163b4:	24001e5c 	.word	0x24001e5c
 80163b8:	e000ed20 	.word	0xe000ed20
 80163bc:	240000a0 	.word	0x240000a0
 80163c0:	e000ef34 	.word	0xe000ef34

080163c4 <vPortEnterCritical>:
 80163c4:	b480      	push	{r7}
 80163c6:	b083      	sub	sp, #12
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ce:	f383 8811 	msr	BASEPRI, r3
 80163d2:	f3bf 8f6f 	isb	sy
 80163d6:	f3bf 8f4f 	dsb	sy
 80163da:	607b      	str	r3, [r7, #4]
 80163dc:	bf00      	nop
 80163de:	4b0f      	ldr	r3, [pc, #60]	; (801641c <vPortEnterCritical+0x58>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	3301      	adds	r3, #1
 80163e4:	4a0d      	ldr	r2, [pc, #52]	; (801641c <vPortEnterCritical+0x58>)
 80163e6:	6013      	str	r3, [r2, #0]
 80163e8:	4b0c      	ldr	r3, [pc, #48]	; (801641c <vPortEnterCritical+0x58>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	d10f      	bne.n	8016410 <vPortEnterCritical+0x4c>
 80163f0:	4b0b      	ldr	r3, [pc, #44]	; (8016420 <vPortEnterCritical+0x5c>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	b2db      	uxtb	r3, r3
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d00a      	beq.n	8016410 <vPortEnterCritical+0x4c>
 80163fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163fe:	f383 8811 	msr	BASEPRI, r3
 8016402:	f3bf 8f6f 	isb	sy
 8016406:	f3bf 8f4f 	dsb	sy
 801640a:	603b      	str	r3, [r7, #0]
 801640c:	bf00      	nop
 801640e:	e7fe      	b.n	801640e <vPortEnterCritical+0x4a>
 8016410:	bf00      	nop
 8016412:	370c      	adds	r7, #12
 8016414:	46bd      	mov	sp, r7
 8016416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641a:	4770      	bx	lr
 801641c:	240000a0 	.word	0x240000a0
 8016420:	e000ed04 	.word	0xe000ed04

08016424 <vPortExitCritical>:
 8016424:	b480      	push	{r7}
 8016426:	b083      	sub	sp, #12
 8016428:	af00      	add	r7, sp, #0
 801642a:	4b12      	ldr	r3, [pc, #72]	; (8016474 <vPortExitCritical+0x50>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d10a      	bne.n	8016448 <vPortExitCritical+0x24>
 8016432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016436:	f383 8811 	msr	BASEPRI, r3
 801643a:	f3bf 8f6f 	isb	sy
 801643e:	f3bf 8f4f 	dsb	sy
 8016442:	607b      	str	r3, [r7, #4]
 8016444:	bf00      	nop
 8016446:	e7fe      	b.n	8016446 <vPortExitCritical+0x22>
 8016448:	4b0a      	ldr	r3, [pc, #40]	; (8016474 <vPortExitCritical+0x50>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	3b01      	subs	r3, #1
 801644e:	4a09      	ldr	r2, [pc, #36]	; (8016474 <vPortExitCritical+0x50>)
 8016450:	6013      	str	r3, [r2, #0]
 8016452:	4b08      	ldr	r3, [pc, #32]	; (8016474 <vPortExitCritical+0x50>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d105      	bne.n	8016466 <vPortExitCritical+0x42>
 801645a:	2300      	movs	r3, #0
 801645c:	603b      	str	r3, [r7, #0]
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	f383 8811 	msr	BASEPRI, r3
 8016464:	bf00      	nop
 8016466:	bf00      	nop
 8016468:	370c      	adds	r7, #12
 801646a:	46bd      	mov	sp, r7
 801646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016470:	4770      	bx	lr
 8016472:	bf00      	nop
 8016474:	240000a0 	.word	0x240000a0
	...

08016480 <PendSV_Handler>:
 8016480:	f3ef 8009 	mrs	r0, PSP
 8016484:	f3bf 8f6f 	isb	sy
 8016488:	4b15      	ldr	r3, [pc, #84]	; (80164e0 <pxCurrentTCBConst>)
 801648a:	681a      	ldr	r2, [r3, #0]
 801648c:	f01e 0f10 	tst.w	lr, #16
 8016490:	bf08      	it	eq
 8016492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801649a:	6010      	str	r0, [r2, #0]
 801649c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80164a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80164a4:	f380 8811 	msr	BASEPRI, r0
 80164a8:	f3bf 8f4f 	dsb	sy
 80164ac:	f3bf 8f6f 	isb	sy
 80164b0:	f7fe feec 	bl	801528c <vTaskSwitchContext>
 80164b4:	f04f 0000 	mov.w	r0, #0
 80164b8:	f380 8811 	msr	BASEPRI, r0
 80164bc:	bc09      	pop	{r0, r3}
 80164be:	6819      	ldr	r1, [r3, #0]
 80164c0:	6808      	ldr	r0, [r1, #0]
 80164c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c6:	f01e 0f10 	tst.w	lr, #16
 80164ca:	bf08      	it	eq
 80164cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80164d0:	f380 8809 	msr	PSP, r0
 80164d4:	f3bf 8f6f 	isb	sy
 80164d8:	4770      	bx	lr
 80164da:	bf00      	nop
 80164dc:	f3af 8000 	nop.w

080164e0 <pxCurrentTCBConst>:
 80164e0:	2400182c 	.word	0x2400182c
 80164e4:	bf00      	nop
 80164e6:	bf00      	nop

080164e8 <xPortSysTickHandler>:
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f2:	f383 8811 	msr	BASEPRI, r3
 80164f6:	f3bf 8f6f 	isb	sy
 80164fa:	f3bf 8f4f 	dsb	sy
 80164fe:	607b      	str	r3, [r7, #4]
 8016500:	bf00      	nop
 8016502:	f7fe fe01 	bl	8015108 <xTaskIncrementTick>
 8016506:	4603      	mov	r3, r0
 8016508:	2b00      	cmp	r3, #0
 801650a:	d003      	beq.n	8016514 <xPortSysTickHandler+0x2c>
 801650c:	4b06      	ldr	r3, [pc, #24]	; (8016528 <xPortSysTickHandler+0x40>)
 801650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016512:	601a      	str	r2, [r3, #0]
 8016514:	2300      	movs	r3, #0
 8016516:	603b      	str	r3, [r7, #0]
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	f383 8811 	msr	BASEPRI, r3
 801651e:	bf00      	nop
 8016520:	bf00      	nop
 8016522:	3708      	adds	r7, #8
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}
 8016528:	e000ed04 	.word	0xe000ed04

0801652c <vPortSetupTimerInterrupt>:
 801652c:	b480      	push	{r7}
 801652e:	af00      	add	r7, sp, #0
 8016530:	4b0b      	ldr	r3, [pc, #44]	; (8016560 <vPortSetupTimerInterrupt+0x34>)
 8016532:	2200      	movs	r2, #0
 8016534:	601a      	str	r2, [r3, #0]
 8016536:	4b0b      	ldr	r3, [pc, #44]	; (8016564 <vPortSetupTimerInterrupt+0x38>)
 8016538:	2200      	movs	r2, #0
 801653a:	601a      	str	r2, [r3, #0]
 801653c:	4b0a      	ldr	r3, [pc, #40]	; (8016568 <vPortSetupTimerInterrupt+0x3c>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	4a0a      	ldr	r2, [pc, #40]	; (801656c <vPortSetupTimerInterrupt+0x40>)
 8016542:	fba2 2303 	umull	r2, r3, r2, r3
 8016546:	099b      	lsrs	r3, r3, #6
 8016548:	4a09      	ldr	r2, [pc, #36]	; (8016570 <vPortSetupTimerInterrupt+0x44>)
 801654a:	3b01      	subs	r3, #1
 801654c:	6013      	str	r3, [r2, #0]
 801654e:	4b04      	ldr	r3, [pc, #16]	; (8016560 <vPortSetupTimerInterrupt+0x34>)
 8016550:	2207      	movs	r2, #7
 8016552:	601a      	str	r2, [r3, #0]
 8016554:	bf00      	nop
 8016556:	46bd      	mov	sp, r7
 8016558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655c:	4770      	bx	lr
 801655e:	bf00      	nop
 8016560:	e000e010 	.word	0xe000e010
 8016564:	e000e018 	.word	0xe000e018
 8016568:	24000090 	.word	0x24000090
 801656c:	10624dd3 	.word	0x10624dd3
 8016570:	e000e014 	.word	0xe000e014

08016574 <vPortEnableVFP>:
 8016574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016584 <vPortEnableVFP+0x10>
 8016578:	6801      	ldr	r1, [r0, #0]
 801657a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801657e:	6001      	str	r1, [r0, #0]
 8016580:	4770      	bx	lr
 8016582:	bf00      	nop
 8016584:	e000ed88 	.word	0xe000ed88

08016588 <vPortValidateInterruptPriority>:
 8016588:	b480      	push	{r7}
 801658a:	b085      	sub	sp, #20
 801658c:	af00      	add	r7, sp, #0
 801658e:	f3ef 8305 	mrs	r3, IPSR
 8016592:	60fb      	str	r3, [r7, #12]
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	2b0f      	cmp	r3, #15
 8016598:	d914      	bls.n	80165c4 <vPortValidateInterruptPriority+0x3c>
 801659a:	4a17      	ldr	r2, [pc, #92]	; (80165f8 <vPortValidateInterruptPriority+0x70>)
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	4413      	add	r3, r2
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	72fb      	strb	r3, [r7, #11]
 80165a4:	4b15      	ldr	r3, [pc, #84]	; (80165fc <vPortValidateInterruptPriority+0x74>)
 80165a6:	781b      	ldrb	r3, [r3, #0]
 80165a8:	7afa      	ldrb	r2, [r7, #11]
 80165aa:	429a      	cmp	r2, r3
 80165ac:	d20a      	bcs.n	80165c4 <vPortValidateInterruptPriority+0x3c>
 80165ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165b2:	f383 8811 	msr	BASEPRI, r3
 80165b6:	f3bf 8f6f 	isb	sy
 80165ba:	f3bf 8f4f 	dsb	sy
 80165be:	607b      	str	r3, [r7, #4]
 80165c0:	bf00      	nop
 80165c2:	e7fe      	b.n	80165c2 <vPortValidateInterruptPriority+0x3a>
 80165c4:	4b0e      	ldr	r3, [pc, #56]	; (8016600 <vPortValidateInterruptPriority+0x78>)
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80165cc:	4b0d      	ldr	r3, [pc, #52]	; (8016604 <vPortValidateInterruptPriority+0x7c>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d90a      	bls.n	80165ea <vPortValidateInterruptPriority+0x62>
 80165d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165d8:	f383 8811 	msr	BASEPRI, r3
 80165dc:	f3bf 8f6f 	isb	sy
 80165e0:	f3bf 8f4f 	dsb	sy
 80165e4:	603b      	str	r3, [r7, #0]
 80165e6:	bf00      	nop
 80165e8:	e7fe      	b.n	80165e8 <vPortValidateInterruptPriority+0x60>
 80165ea:	bf00      	nop
 80165ec:	3714      	adds	r7, #20
 80165ee:	46bd      	mov	sp, r7
 80165f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f4:	4770      	bx	lr
 80165f6:	bf00      	nop
 80165f8:	e000e3f0 	.word	0xe000e3f0
 80165fc:	24001e58 	.word	0x24001e58
 8016600:	e000ed0c 	.word	0xe000ed0c
 8016604:	24001e5c 	.word	0x24001e5c

08016608 <pvPortMalloc>:
 8016608:	b580      	push	{r7, lr}
 801660a:	b08a      	sub	sp, #40	; 0x28
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	2300      	movs	r3, #0
 8016612:	61fb      	str	r3, [r7, #28]
 8016614:	f7fe fcbc 	bl	8014f90 <vTaskSuspendAll>
 8016618:	4b5b      	ldr	r3, [pc, #364]	; (8016788 <pvPortMalloc+0x180>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d101      	bne.n	8016624 <pvPortMalloc+0x1c>
 8016620:	f000 f920 	bl	8016864 <prvHeapInit>
 8016624:	4b59      	ldr	r3, [pc, #356]	; (801678c <pvPortMalloc+0x184>)
 8016626:	681a      	ldr	r2, [r3, #0]
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	4013      	ands	r3, r2
 801662c:	2b00      	cmp	r3, #0
 801662e:	f040 8093 	bne.w	8016758 <pvPortMalloc+0x150>
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d01d      	beq.n	8016674 <pvPortMalloc+0x6c>
 8016638:	2208      	movs	r2, #8
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	4413      	add	r3, r2
 801663e:	607b      	str	r3, [r7, #4]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f003 0307 	and.w	r3, r3, #7
 8016646:	2b00      	cmp	r3, #0
 8016648:	d014      	beq.n	8016674 <pvPortMalloc+0x6c>
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	f023 0307 	bic.w	r3, r3, #7
 8016650:	3308      	adds	r3, #8
 8016652:	607b      	str	r3, [r7, #4]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f003 0307 	and.w	r3, r3, #7
 801665a:	2b00      	cmp	r3, #0
 801665c:	d00a      	beq.n	8016674 <pvPortMalloc+0x6c>
 801665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016662:	f383 8811 	msr	BASEPRI, r3
 8016666:	f3bf 8f6f 	isb	sy
 801666a:	f3bf 8f4f 	dsb	sy
 801666e:	617b      	str	r3, [r7, #20]
 8016670:	bf00      	nop
 8016672:	e7fe      	b.n	8016672 <pvPortMalloc+0x6a>
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d06e      	beq.n	8016758 <pvPortMalloc+0x150>
 801667a:	4b45      	ldr	r3, [pc, #276]	; (8016790 <pvPortMalloc+0x188>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	687a      	ldr	r2, [r7, #4]
 8016680:	429a      	cmp	r2, r3
 8016682:	d869      	bhi.n	8016758 <pvPortMalloc+0x150>
 8016684:	4b43      	ldr	r3, [pc, #268]	; (8016794 <pvPortMalloc+0x18c>)
 8016686:	623b      	str	r3, [r7, #32]
 8016688:	4b42      	ldr	r3, [pc, #264]	; (8016794 <pvPortMalloc+0x18c>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	627b      	str	r3, [r7, #36]	; 0x24
 801668e:	e004      	b.n	801669a <pvPortMalloc+0x92>
 8016690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016692:	623b      	str	r3, [r7, #32]
 8016694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	627b      	str	r3, [r7, #36]	; 0x24
 801669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d903      	bls.n	80166ac <pvPortMalloc+0xa4>
 80166a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d1f1      	bne.n	8016690 <pvPortMalloc+0x88>
 80166ac:	4b36      	ldr	r3, [pc, #216]	; (8016788 <pvPortMalloc+0x180>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166b2:	429a      	cmp	r2, r3
 80166b4:	d050      	beq.n	8016758 <pvPortMalloc+0x150>
 80166b6:	6a3b      	ldr	r3, [r7, #32]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	2208      	movs	r2, #8
 80166bc:	4413      	add	r3, r2
 80166be:	61fb      	str	r3, [r7, #28]
 80166c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c2:	681a      	ldr	r2, [r3, #0]
 80166c4:	6a3b      	ldr	r3, [r7, #32]
 80166c6:	601a      	str	r2, [r3, #0]
 80166c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ca:	685a      	ldr	r2, [r3, #4]
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	1ad2      	subs	r2, r2, r3
 80166d0:	2308      	movs	r3, #8
 80166d2:	005b      	lsls	r3, r3, #1
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d91f      	bls.n	8016718 <pvPortMalloc+0x110>
 80166d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	4413      	add	r3, r2
 80166de:	61bb      	str	r3, [r7, #24]
 80166e0:	69bb      	ldr	r3, [r7, #24]
 80166e2:	f003 0307 	and.w	r3, r3, #7
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d00a      	beq.n	8016700 <pvPortMalloc+0xf8>
 80166ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ee:	f383 8811 	msr	BASEPRI, r3
 80166f2:	f3bf 8f6f 	isb	sy
 80166f6:	f3bf 8f4f 	dsb	sy
 80166fa:	613b      	str	r3, [r7, #16]
 80166fc:	bf00      	nop
 80166fe:	e7fe      	b.n	80166fe <pvPortMalloc+0xf6>
 8016700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016702:	685a      	ldr	r2, [r3, #4]
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	1ad2      	subs	r2, r2, r3
 8016708:	69bb      	ldr	r3, [r7, #24]
 801670a:	605a      	str	r2, [r3, #4]
 801670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	605a      	str	r2, [r3, #4]
 8016712:	69b8      	ldr	r0, [r7, #24]
 8016714:	f000 f908 	bl	8016928 <prvInsertBlockIntoFreeList>
 8016718:	4b1d      	ldr	r3, [pc, #116]	; (8016790 <pvPortMalloc+0x188>)
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671e:	685b      	ldr	r3, [r3, #4]
 8016720:	1ad3      	subs	r3, r2, r3
 8016722:	4a1b      	ldr	r2, [pc, #108]	; (8016790 <pvPortMalloc+0x188>)
 8016724:	6013      	str	r3, [r2, #0]
 8016726:	4b1a      	ldr	r3, [pc, #104]	; (8016790 <pvPortMalloc+0x188>)
 8016728:	681a      	ldr	r2, [r3, #0]
 801672a:	4b1b      	ldr	r3, [pc, #108]	; (8016798 <pvPortMalloc+0x190>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	429a      	cmp	r2, r3
 8016730:	d203      	bcs.n	801673a <pvPortMalloc+0x132>
 8016732:	4b17      	ldr	r3, [pc, #92]	; (8016790 <pvPortMalloc+0x188>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	4a18      	ldr	r2, [pc, #96]	; (8016798 <pvPortMalloc+0x190>)
 8016738:	6013      	str	r3, [r2, #0]
 801673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801673c:	685a      	ldr	r2, [r3, #4]
 801673e:	4b13      	ldr	r3, [pc, #76]	; (801678c <pvPortMalloc+0x184>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	431a      	orrs	r2, r3
 8016744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016746:	605a      	str	r2, [r3, #4]
 8016748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674a:	2200      	movs	r2, #0
 801674c:	601a      	str	r2, [r3, #0]
 801674e:	4b13      	ldr	r3, [pc, #76]	; (801679c <pvPortMalloc+0x194>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	3301      	adds	r3, #1
 8016754:	4a11      	ldr	r2, [pc, #68]	; (801679c <pvPortMalloc+0x194>)
 8016756:	6013      	str	r3, [r2, #0]
 8016758:	f7fe fc28 	bl	8014fac <xTaskResumeAll>
 801675c:	69fb      	ldr	r3, [r7, #28]
 801675e:	f003 0307 	and.w	r3, r3, #7
 8016762:	2b00      	cmp	r3, #0
 8016764:	d00a      	beq.n	801677c <pvPortMalloc+0x174>
 8016766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801676a:	f383 8811 	msr	BASEPRI, r3
 801676e:	f3bf 8f6f 	isb	sy
 8016772:	f3bf 8f4f 	dsb	sy
 8016776:	60fb      	str	r3, [r7, #12]
 8016778:	bf00      	nop
 801677a:	e7fe      	b.n	801677a <pvPortMalloc+0x172>
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	4618      	mov	r0, r3
 8016780:	3728      	adds	r7, #40	; 0x28
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	24005a68 	.word	0x24005a68
 801678c:	24005a7c 	.word	0x24005a7c
 8016790:	24005a6c 	.word	0x24005a6c
 8016794:	24005a60 	.word	0x24005a60
 8016798:	24005a70 	.word	0x24005a70
 801679c:	24005a74 	.word	0x24005a74

080167a0 <vPortFree>:
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b086      	sub	sp, #24
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	617b      	str	r3, [r7, #20]
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d04d      	beq.n	801684e <vPortFree+0xae>
 80167b2:	2308      	movs	r3, #8
 80167b4:	425b      	negs	r3, r3
 80167b6:	697a      	ldr	r2, [r7, #20]
 80167b8:	4413      	add	r3, r2
 80167ba:	617b      	str	r3, [r7, #20]
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	613b      	str	r3, [r7, #16]
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	685a      	ldr	r2, [r3, #4]
 80167c4:	4b24      	ldr	r3, [pc, #144]	; (8016858 <vPortFree+0xb8>)
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	4013      	ands	r3, r2
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d10a      	bne.n	80167e4 <vPortFree+0x44>
 80167ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167d2:	f383 8811 	msr	BASEPRI, r3
 80167d6:	f3bf 8f6f 	isb	sy
 80167da:	f3bf 8f4f 	dsb	sy
 80167de:	60fb      	str	r3, [r7, #12]
 80167e0:	bf00      	nop
 80167e2:	e7fe      	b.n	80167e2 <vPortFree+0x42>
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d00a      	beq.n	8016802 <vPortFree+0x62>
 80167ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167f0:	f383 8811 	msr	BASEPRI, r3
 80167f4:	f3bf 8f6f 	isb	sy
 80167f8:	f3bf 8f4f 	dsb	sy
 80167fc:	60bb      	str	r3, [r7, #8]
 80167fe:	bf00      	nop
 8016800:	e7fe      	b.n	8016800 <vPortFree+0x60>
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	685a      	ldr	r2, [r3, #4]
 8016806:	4b14      	ldr	r3, [pc, #80]	; (8016858 <vPortFree+0xb8>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	4013      	ands	r3, r2
 801680c:	2b00      	cmp	r3, #0
 801680e:	d01e      	beq.n	801684e <vPortFree+0xae>
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d11a      	bne.n	801684e <vPortFree+0xae>
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	685a      	ldr	r2, [r3, #4]
 801681c:	4b0e      	ldr	r3, [pc, #56]	; (8016858 <vPortFree+0xb8>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	43db      	mvns	r3, r3
 8016822:	401a      	ands	r2, r3
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	605a      	str	r2, [r3, #4]
 8016828:	f7fe fbb2 	bl	8014f90 <vTaskSuspendAll>
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	685a      	ldr	r2, [r3, #4]
 8016830:	4b0a      	ldr	r3, [pc, #40]	; (801685c <vPortFree+0xbc>)
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	4413      	add	r3, r2
 8016836:	4a09      	ldr	r2, [pc, #36]	; (801685c <vPortFree+0xbc>)
 8016838:	6013      	str	r3, [r2, #0]
 801683a:	6938      	ldr	r0, [r7, #16]
 801683c:	f000 f874 	bl	8016928 <prvInsertBlockIntoFreeList>
 8016840:	4b07      	ldr	r3, [pc, #28]	; (8016860 <vPortFree+0xc0>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	3301      	adds	r3, #1
 8016846:	4a06      	ldr	r2, [pc, #24]	; (8016860 <vPortFree+0xc0>)
 8016848:	6013      	str	r3, [r2, #0]
 801684a:	f7fe fbaf 	bl	8014fac <xTaskResumeAll>
 801684e:	bf00      	nop
 8016850:	3718      	adds	r7, #24
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	24005a7c 	.word	0x24005a7c
 801685c:	24005a6c 	.word	0x24005a6c
 8016860:	24005a78 	.word	0x24005a78

08016864 <prvHeapInit>:
 8016864:	b480      	push	{r7}
 8016866:	b085      	sub	sp, #20
 8016868:	af00      	add	r7, sp, #0
 801686a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801686e:	60bb      	str	r3, [r7, #8]
 8016870:	4b27      	ldr	r3, [pc, #156]	; (8016910 <prvHeapInit+0xac>)
 8016872:	60fb      	str	r3, [r7, #12]
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	f003 0307 	and.w	r3, r3, #7
 801687a:	2b00      	cmp	r3, #0
 801687c:	d00c      	beq.n	8016898 <prvHeapInit+0x34>
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	3307      	adds	r3, #7
 8016882:	60fb      	str	r3, [r7, #12]
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f023 0307 	bic.w	r3, r3, #7
 801688a:	60fb      	str	r3, [r7, #12]
 801688c:	68ba      	ldr	r2, [r7, #8]
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	1ad3      	subs	r3, r2, r3
 8016892:	4a1f      	ldr	r2, [pc, #124]	; (8016910 <prvHeapInit+0xac>)
 8016894:	4413      	add	r3, r2
 8016896:	60bb      	str	r3, [r7, #8]
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	607b      	str	r3, [r7, #4]
 801689c:	4a1d      	ldr	r2, [pc, #116]	; (8016914 <prvHeapInit+0xb0>)
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	6013      	str	r3, [r2, #0]
 80168a2:	4b1c      	ldr	r3, [pc, #112]	; (8016914 <prvHeapInit+0xb0>)
 80168a4:	2200      	movs	r2, #0
 80168a6:	605a      	str	r2, [r3, #4]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	68ba      	ldr	r2, [r7, #8]
 80168ac:	4413      	add	r3, r2
 80168ae:	60fb      	str	r3, [r7, #12]
 80168b0:	2208      	movs	r2, #8
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	1a9b      	subs	r3, r3, r2
 80168b6:	60fb      	str	r3, [r7, #12]
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	f023 0307 	bic.w	r3, r3, #7
 80168be:	60fb      	str	r3, [r7, #12]
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	4a15      	ldr	r2, [pc, #84]	; (8016918 <prvHeapInit+0xb4>)
 80168c4:	6013      	str	r3, [r2, #0]
 80168c6:	4b14      	ldr	r3, [pc, #80]	; (8016918 <prvHeapInit+0xb4>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	2200      	movs	r2, #0
 80168cc:	605a      	str	r2, [r3, #4]
 80168ce:	4b12      	ldr	r3, [pc, #72]	; (8016918 <prvHeapInit+0xb4>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	2200      	movs	r2, #0
 80168d4:	601a      	str	r2, [r3, #0]
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	603b      	str	r3, [r7, #0]
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	68fa      	ldr	r2, [r7, #12]
 80168de:	1ad2      	subs	r2, r2, r3
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	605a      	str	r2, [r3, #4]
 80168e4:	4b0c      	ldr	r3, [pc, #48]	; (8016918 <prvHeapInit+0xb4>)
 80168e6:	681a      	ldr	r2, [r3, #0]
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	601a      	str	r2, [r3, #0]
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	4a0a      	ldr	r2, [pc, #40]	; (801691c <prvHeapInit+0xb8>)
 80168f2:	6013      	str	r3, [r2, #0]
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	4a09      	ldr	r2, [pc, #36]	; (8016920 <prvHeapInit+0xbc>)
 80168fa:	6013      	str	r3, [r2, #0]
 80168fc:	4b09      	ldr	r3, [pc, #36]	; (8016924 <prvHeapInit+0xc0>)
 80168fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016902:	601a      	str	r2, [r3, #0]
 8016904:	bf00      	nop
 8016906:	3714      	adds	r7, #20
 8016908:	46bd      	mov	sp, r7
 801690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690e:	4770      	bx	lr
 8016910:	24001e60 	.word	0x24001e60
 8016914:	24005a60 	.word	0x24005a60
 8016918:	24005a68 	.word	0x24005a68
 801691c:	24005a70 	.word	0x24005a70
 8016920:	24005a6c 	.word	0x24005a6c
 8016924:	24005a7c 	.word	0x24005a7c

08016928 <prvInsertBlockIntoFreeList>:
 8016928:	b480      	push	{r7}
 801692a:	b085      	sub	sp, #20
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
 8016930:	4b28      	ldr	r3, [pc, #160]	; (80169d4 <prvInsertBlockIntoFreeList+0xac>)
 8016932:	60fb      	str	r3, [r7, #12]
 8016934:	e002      	b.n	801693c <prvInsertBlockIntoFreeList+0x14>
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	60fb      	str	r3, [r7, #12]
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	687a      	ldr	r2, [r7, #4]
 8016942:	429a      	cmp	r2, r3
 8016944:	d8f7      	bhi.n	8016936 <prvInsertBlockIntoFreeList+0xe>
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	60bb      	str	r3, [r7, #8]
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	685b      	ldr	r3, [r3, #4]
 801694e:	68ba      	ldr	r2, [r7, #8]
 8016950:	4413      	add	r3, r2
 8016952:	687a      	ldr	r2, [r7, #4]
 8016954:	429a      	cmp	r2, r3
 8016956:	d108      	bne.n	801696a <prvInsertBlockIntoFreeList+0x42>
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	685a      	ldr	r2, [r3, #4]
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	685b      	ldr	r3, [r3, #4]
 8016960:	441a      	add	r2, r3
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	605a      	str	r2, [r3, #4]
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	607b      	str	r3, [r7, #4]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	60bb      	str	r3, [r7, #8]
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	685b      	ldr	r3, [r3, #4]
 8016972:	68ba      	ldr	r2, [r7, #8]
 8016974:	441a      	add	r2, r3
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	429a      	cmp	r2, r3
 801697c:	d118      	bne.n	80169b0 <prvInsertBlockIntoFreeList+0x88>
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	681a      	ldr	r2, [r3, #0]
 8016982:	4b15      	ldr	r3, [pc, #84]	; (80169d8 <prvInsertBlockIntoFreeList+0xb0>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	429a      	cmp	r2, r3
 8016988:	d00d      	beq.n	80169a6 <prvInsertBlockIntoFreeList+0x7e>
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	685a      	ldr	r2, [r3, #4]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	685b      	ldr	r3, [r3, #4]
 8016994:	441a      	add	r2, r3
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	605a      	str	r2, [r3, #4]
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	681a      	ldr	r2, [r3, #0]
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	601a      	str	r2, [r3, #0]
 80169a4:	e008      	b.n	80169b8 <prvInsertBlockIntoFreeList+0x90>
 80169a6:	4b0c      	ldr	r3, [pc, #48]	; (80169d8 <prvInsertBlockIntoFreeList+0xb0>)
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	601a      	str	r2, [r3, #0]
 80169ae:	e003      	b.n	80169b8 <prvInsertBlockIntoFreeList+0x90>
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	681a      	ldr	r2, [r3, #0]
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	601a      	str	r2, [r3, #0]
 80169b8:	68fa      	ldr	r2, [r7, #12]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	429a      	cmp	r2, r3
 80169be:	d002      	beq.n	80169c6 <prvInsertBlockIntoFreeList+0x9e>
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	687a      	ldr	r2, [r7, #4]
 80169c4:	601a      	str	r2, [r3, #0]
 80169c6:	bf00      	nop
 80169c8:	3714      	adds	r7, #20
 80169ca:	46bd      	mov	sp, r7
 80169cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d0:	4770      	bx	lr
 80169d2:	bf00      	nop
 80169d4:	24005a60 	.word	0x24005a60
 80169d8:	24005a68 	.word	0x24005a68

080169dc <__errno>:
 80169dc:	4b01      	ldr	r3, [pc, #4]	; (80169e4 <__errno+0x8>)
 80169de:	6818      	ldr	r0, [r3, #0]
 80169e0:	4770      	bx	lr
 80169e2:	bf00      	nop
 80169e4:	240000a4 	.word	0x240000a4

080169e8 <__libc_init_array>:
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	4d0d      	ldr	r5, [pc, #52]	; (8016a20 <__libc_init_array+0x38>)
 80169ec:	4c0d      	ldr	r4, [pc, #52]	; (8016a24 <__libc_init_array+0x3c>)
 80169ee:	1b64      	subs	r4, r4, r5
 80169f0:	10a4      	asrs	r4, r4, #2
 80169f2:	2600      	movs	r6, #0
 80169f4:	42a6      	cmp	r6, r4
 80169f6:	d109      	bne.n	8016a0c <__libc_init_array+0x24>
 80169f8:	4d0b      	ldr	r5, [pc, #44]	; (8016a28 <__libc_init_array+0x40>)
 80169fa:	4c0c      	ldr	r4, [pc, #48]	; (8016a2c <__libc_init_array+0x44>)
 80169fc:	f000 fd3c 	bl	8017478 <_init>
 8016a00:	1b64      	subs	r4, r4, r5
 8016a02:	10a4      	asrs	r4, r4, #2
 8016a04:	2600      	movs	r6, #0
 8016a06:	42a6      	cmp	r6, r4
 8016a08:	d105      	bne.n	8016a16 <__libc_init_array+0x2e>
 8016a0a:	bd70      	pop	{r4, r5, r6, pc}
 8016a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a10:	4798      	blx	r3
 8016a12:	3601      	adds	r6, #1
 8016a14:	e7ee      	b.n	80169f4 <__libc_init_array+0xc>
 8016a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a1a:	4798      	blx	r3
 8016a1c:	3601      	adds	r6, #1
 8016a1e:	e7f2      	b.n	8016a06 <__libc_init_array+0x1e>
 8016a20:	080178cc 	.word	0x080178cc
 8016a24:	080178cc 	.word	0x080178cc
 8016a28:	080178cc 	.word	0x080178cc
 8016a2c:	080178d0 	.word	0x080178d0

08016a30 <malloc>:
 8016a30:	4b02      	ldr	r3, [pc, #8]	; (8016a3c <malloc+0xc>)
 8016a32:	4601      	mov	r1, r0
 8016a34:	6818      	ldr	r0, [r3, #0]
 8016a36:	f000 b88d 	b.w	8016b54 <_malloc_r>
 8016a3a:	bf00      	nop
 8016a3c:	240000a4 	.word	0x240000a4

08016a40 <free>:
 8016a40:	4b02      	ldr	r3, [pc, #8]	; (8016a4c <free+0xc>)
 8016a42:	4601      	mov	r1, r0
 8016a44:	6818      	ldr	r0, [r3, #0]
 8016a46:	f000 b819 	b.w	8016a7c <_free_r>
 8016a4a:	bf00      	nop
 8016a4c:	240000a4 	.word	0x240000a4

08016a50 <memcpy>:
 8016a50:	440a      	add	r2, r1
 8016a52:	4291      	cmp	r1, r2
 8016a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016a58:	d100      	bne.n	8016a5c <memcpy+0xc>
 8016a5a:	4770      	bx	lr
 8016a5c:	b510      	push	{r4, lr}
 8016a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a66:	4291      	cmp	r1, r2
 8016a68:	d1f9      	bne.n	8016a5e <memcpy+0xe>
 8016a6a:	bd10      	pop	{r4, pc}

08016a6c <memset>:
 8016a6c:	4402      	add	r2, r0
 8016a6e:	4603      	mov	r3, r0
 8016a70:	4293      	cmp	r3, r2
 8016a72:	d100      	bne.n	8016a76 <memset+0xa>
 8016a74:	4770      	bx	lr
 8016a76:	f803 1b01 	strb.w	r1, [r3], #1
 8016a7a:	e7f9      	b.n	8016a70 <memset+0x4>

08016a7c <_free_r>:
 8016a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a7e:	2900      	cmp	r1, #0
 8016a80:	d044      	beq.n	8016b0c <_free_r+0x90>
 8016a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a86:	9001      	str	r0, [sp, #4]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8016a8e:	bfb8      	it	lt
 8016a90:	18e4      	addlt	r4, r4, r3
 8016a92:	f000 fc39 	bl	8017308 <__malloc_lock>
 8016a96:	4a1e      	ldr	r2, [pc, #120]	; (8016b10 <_free_r+0x94>)
 8016a98:	9801      	ldr	r0, [sp, #4]
 8016a9a:	6813      	ldr	r3, [r2, #0]
 8016a9c:	b933      	cbnz	r3, 8016aac <_free_r+0x30>
 8016a9e:	6063      	str	r3, [r4, #4]
 8016aa0:	6014      	str	r4, [r2, #0]
 8016aa2:	b003      	add	sp, #12
 8016aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016aa8:	f000 bc34 	b.w	8017314 <__malloc_unlock>
 8016aac:	42a3      	cmp	r3, r4
 8016aae:	d908      	bls.n	8016ac2 <_free_r+0x46>
 8016ab0:	6825      	ldr	r5, [r4, #0]
 8016ab2:	1961      	adds	r1, r4, r5
 8016ab4:	428b      	cmp	r3, r1
 8016ab6:	bf01      	itttt	eq
 8016ab8:	6819      	ldreq	r1, [r3, #0]
 8016aba:	685b      	ldreq	r3, [r3, #4]
 8016abc:	1949      	addeq	r1, r1, r5
 8016abe:	6021      	streq	r1, [r4, #0]
 8016ac0:	e7ed      	b.n	8016a9e <_free_r+0x22>
 8016ac2:	461a      	mov	r2, r3
 8016ac4:	685b      	ldr	r3, [r3, #4]
 8016ac6:	b10b      	cbz	r3, 8016acc <_free_r+0x50>
 8016ac8:	42a3      	cmp	r3, r4
 8016aca:	d9fa      	bls.n	8016ac2 <_free_r+0x46>
 8016acc:	6811      	ldr	r1, [r2, #0]
 8016ace:	1855      	adds	r5, r2, r1
 8016ad0:	42a5      	cmp	r5, r4
 8016ad2:	d10b      	bne.n	8016aec <_free_r+0x70>
 8016ad4:	6824      	ldr	r4, [r4, #0]
 8016ad6:	4421      	add	r1, r4
 8016ad8:	1854      	adds	r4, r2, r1
 8016ada:	42a3      	cmp	r3, r4
 8016adc:	6011      	str	r1, [r2, #0]
 8016ade:	d1e0      	bne.n	8016aa2 <_free_r+0x26>
 8016ae0:	681c      	ldr	r4, [r3, #0]
 8016ae2:	685b      	ldr	r3, [r3, #4]
 8016ae4:	6053      	str	r3, [r2, #4]
 8016ae6:	4421      	add	r1, r4
 8016ae8:	6011      	str	r1, [r2, #0]
 8016aea:	e7da      	b.n	8016aa2 <_free_r+0x26>
 8016aec:	d902      	bls.n	8016af4 <_free_r+0x78>
 8016aee:	230c      	movs	r3, #12
 8016af0:	6003      	str	r3, [r0, #0]
 8016af2:	e7d6      	b.n	8016aa2 <_free_r+0x26>
 8016af4:	6825      	ldr	r5, [r4, #0]
 8016af6:	1961      	adds	r1, r4, r5
 8016af8:	428b      	cmp	r3, r1
 8016afa:	bf04      	itt	eq
 8016afc:	6819      	ldreq	r1, [r3, #0]
 8016afe:	685b      	ldreq	r3, [r3, #4]
 8016b00:	6063      	str	r3, [r4, #4]
 8016b02:	bf04      	itt	eq
 8016b04:	1949      	addeq	r1, r1, r5
 8016b06:	6021      	streq	r1, [r4, #0]
 8016b08:	6054      	str	r4, [r2, #4]
 8016b0a:	e7ca      	b.n	8016aa2 <_free_r+0x26>
 8016b0c:	b003      	add	sp, #12
 8016b0e:	bd30      	pop	{r4, r5, pc}
 8016b10:	24005a80 	.word	0x24005a80

08016b14 <sbrk_aligned>:
 8016b14:	b570      	push	{r4, r5, r6, lr}
 8016b16:	4e0e      	ldr	r6, [pc, #56]	; (8016b50 <sbrk_aligned+0x3c>)
 8016b18:	460c      	mov	r4, r1
 8016b1a:	6831      	ldr	r1, [r6, #0]
 8016b1c:	4605      	mov	r5, r0
 8016b1e:	b911      	cbnz	r1, 8016b26 <sbrk_aligned+0x12>
 8016b20:	f000 f902 	bl	8016d28 <_sbrk_r>
 8016b24:	6030      	str	r0, [r6, #0]
 8016b26:	4621      	mov	r1, r4
 8016b28:	4628      	mov	r0, r5
 8016b2a:	f000 f8fd 	bl	8016d28 <_sbrk_r>
 8016b2e:	1c43      	adds	r3, r0, #1
 8016b30:	d00a      	beq.n	8016b48 <sbrk_aligned+0x34>
 8016b32:	1cc4      	adds	r4, r0, #3
 8016b34:	f024 0403 	bic.w	r4, r4, #3
 8016b38:	42a0      	cmp	r0, r4
 8016b3a:	d007      	beq.n	8016b4c <sbrk_aligned+0x38>
 8016b3c:	1a21      	subs	r1, r4, r0
 8016b3e:	4628      	mov	r0, r5
 8016b40:	f000 f8f2 	bl	8016d28 <_sbrk_r>
 8016b44:	3001      	adds	r0, #1
 8016b46:	d101      	bne.n	8016b4c <sbrk_aligned+0x38>
 8016b48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016b4c:	4620      	mov	r0, r4
 8016b4e:	bd70      	pop	{r4, r5, r6, pc}
 8016b50:	24005a84 	.word	0x24005a84

08016b54 <_malloc_r>:
 8016b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b58:	1ccd      	adds	r5, r1, #3
 8016b5a:	f025 0503 	bic.w	r5, r5, #3
 8016b5e:	3508      	adds	r5, #8
 8016b60:	2d0c      	cmp	r5, #12
 8016b62:	bf38      	it	cc
 8016b64:	250c      	movcc	r5, #12
 8016b66:	2d00      	cmp	r5, #0
 8016b68:	4607      	mov	r7, r0
 8016b6a:	db01      	blt.n	8016b70 <_malloc_r+0x1c>
 8016b6c:	42a9      	cmp	r1, r5
 8016b6e:	d905      	bls.n	8016b7c <_malloc_r+0x28>
 8016b70:	230c      	movs	r3, #12
 8016b72:	603b      	str	r3, [r7, #0]
 8016b74:	2600      	movs	r6, #0
 8016b76:	4630      	mov	r0, r6
 8016b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b7c:	4e2e      	ldr	r6, [pc, #184]	; (8016c38 <_malloc_r+0xe4>)
 8016b7e:	f000 fbc3 	bl	8017308 <__malloc_lock>
 8016b82:	6833      	ldr	r3, [r6, #0]
 8016b84:	461c      	mov	r4, r3
 8016b86:	bb34      	cbnz	r4, 8016bd6 <_malloc_r+0x82>
 8016b88:	4629      	mov	r1, r5
 8016b8a:	4638      	mov	r0, r7
 8016b8c:	f7ff ffc2 	bl	8016b14 <sbrk_aligned>
 8016b90:	1c43      	adds	r3, r0, #1
 8016b92:	4604      	mov	r4, r0
 8016b94:	d14d      	bne.n	8016c32 <_malloc_r+0xde>
 8016b96:	6834      	ldr	r4, [r6, #0]
 8016b98:	4626      	mov	r6, r4
 8016b9a:	2e00      	cmp	r6, #0
 8016b9c:	d140      	bne.n	8016c20 <_malloc_r+0xcc>
 8016b9e:	6823      	ldr	r3, [r4, #0]
 8016ba0:	4631      	mov	r1, r6
 8016ba2:	4638      	mov	r0, r7
 8016ba4:	eb04 0803 	add.w	r8, r4, r3
 8016ba8:	f000 f8be 	bl	8016d28 <_sbrk_r>
 8016bac:	4580      	cmp	r8, r0
 8016bae:	d13a      	bne.n	8016c26 <_malloc_r+0xd2>
 8016bb0:	6821      	ldr	r1, [r4, #0]
 8016bb2:	3503      	adds	r5, #3
 8016bb4:	1a6d      	subs	r5, r5, r1
 8016bb6:	f025 0503 	bic.w	r5, r5, #3
 8016bba:	3508      	adds	r5, #8
 8016bbc:	2d0c      	cmp	r5, #12
 8016bbe:	bf38      	it	cc
 8016bc0:	250c      	movcc	r5, #12
 8016bc2:	4629      	mov	r1, r5
 8016bc4:	4638      	mov	r0, r7
 8016bc6:	f7ff ffa5 	bl	8016b14 <sbrk_aligned>
 8016bca:	3001      	adds	r0, #1
 8016bcc:	d02b      	beq.n	8016c26 <_malloc_r+0xd2>
 8016bce:	6823      	ldr	r3, [r4, #0]
 8016bd0:	442b      	add	r3, r5
 8016bd2:	6023      	str	r3, [r4, #0]
 8016bd4:	e00e      	b.n	8016bf4 <_malloc_r+0xa0>
 8016bd6:	6822      	ldr	r2, [r4, #0]
 8016bd8:	1b52      	subs	r2, r2, r5
 8016bda:	d41e      	bmi.n	8016c1a <_malloc_r+0xc6>
 8016bdc:	2a0b      	cmp	r2, #11
 8016bde:	d916      	bls.n	8016c0e <_malloc_r+0xba>
 8016be0:	1961      	adds	r1, r4, r5
 8016be2:	42a3      	cmp	r3, r4
 8016be4:	6025      	str	r5, [r4, #0]
 8016be6:	bf18      	it	ne
 8016be8:	6059      	strne	r1, [r3, #4]
 8016bea:	6863      	ldr	r3, [r4, #4]
 8016bec:	bf08      	it	eq
 8016bee:	6031      	streq	r1, [r6, #0]
 8016bf0:	5162      	str	r2, [r4, r5]
 8016bf2:	604b      	str	r3, [r1, #4]
 8016bf4:	4638      	mov	r0, r7
 8016bf6:	f104 060b 	add.w	r6, r4, #11
 8016bfa:	f000 fb8b 	bl	8017314 <__malloc_unlock>
 8016bfe:	f026 0607 	bic.w	r6, r6, #7
 8016c02:	1d23      	adds	r3, r4, #4
 8016c04:	1af2      	subs	r2, r6, r3
 8016c06:	d0b6      	beq.n	8016b76 <_malloc_r+0x22>
 8016c08:	1b9b      	subs	r3, r3, r6
 8016c0a:	50a3      	str	r3, [r4, r2]
 8016c0c:	e7b3      	b.n	8016b76 <_malloc_r+0x22>
 8016c0e:	6862      	ldr	r2, [r4, #4]
 8016c10:	42a3      	cmp	r3, r4
 8016c12:	bf0c      	ite	eq
 8016c14:	6032      	streq	r2, [r6, #0]
 8016c16:	605a      	strne	r2, [r3, #4]
 8016c18:	e7ec      	b.n	8016bf4 <_malloc_r+0xa0>
 8016c1a:	4623      	mov	r3, r4
 8016c1c:	6864      	ldr	r4, [r4, #4]
 8016c1e:	e7b2      	b.n	8016b86 <_malloc_r+0x32>
 8016c20:	4634      	mov	r4, r6
 8016c22:	6876      	ldr	r6, [r6, #4]
 8016c24:	e7b9      	b.n	8016b9a <_malloc_r+0x46>
 8016c26:	230c      	movs	r3, #12
 8016c28:	603b      	str	r3, [r7, #0]
 8016c2a:	4638      	mov	r0, r7
 8016c2c:	f000 fb72 	bl	8017314 <__malloc_unlock>
 8016c30:	e7a1      	b.n	8016b76 <_malloc_r+0x22>
 8016c32:	6025      	str	r5, [r4, #0]
 8016c34:	e7de      	b.n	8016bf4 <_malloc_r+0xa0>
 8016c36:	bf00      	nop
 8016c38:	24005a80 	.word	0x24005a80

08016c3c <_puts_r>:
 8016c3c:	b570      	push	{r4, r5, r6, lr}
 8016c3e:	460e      	mov	r6, r1
 8016c40:	4605      	mov	r5, r0
 8016c42:	b118      	cbz	r0, 8016c4c <_puts_r+0x10>
 8016c44:	6983      	ldr	r3, [r0, #24]
 8016c46:	b90b      	cbnz	r3, 8016c4c <_puts_r+0x10>
 8016c48:	f000 fa58 	bl	80170fc <__sinit>
 8016c4c:	69ab      	ldr	r3, [r5, #24]
 8016c4e:	68ac      	ldr	r4, [r5, #8]
 8016c50:	b913      	cbnz	r3, 8016c58 <_puts_r+0x1c>
 8016c52:	4628      	mov	r0, r5
 8016c54:	f000 fa52 	bl	80170fc <__sinit>
 8016c58:	4b2c      	ldr	r3, [pc, #176]	; (8016d0c <_puts_r+0xd0>)
 8016c5a:	429c      	cmp	r4, r3
 8016c5c:	d120      	bne.n	8016ca0 <_puts_r+0x64>
 8016c5e:	686c      	ldr	r4, [r5, #4]
 8016c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c62:	07db      	lsls	r3, r3, #31
 8016c64:	d405      	bmi.n	8016c72 <_puts_r+0x36>
 8016c66:	89a3      	ldrh	r3, [r4, #12]
 8016c68:	0598      	lsls	r0, r3, #22
 8016c6a:	d402      	bmi.n	8016c72 <_puts_r+0x36>
 8016c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c6e:	f000 fae3 	bl	8017238 <__retarget_lock_acquire_recursive>
 8016c72:	89a3      	ldrh	r3, [r4, #12]
 8016c74:	0719      	lsls	r1, r3, #28
 8016c76:	d51d      	bpl.n	8016cb4 <_puts_r+0x78>
 8016c78:	6923      	ldr	r3, [r4, #16]
 8016c7a:	b1db      	cbz	r3, 8016cb4 <_puts_r+0x78>
 8016c7c:	3e01      	subs	r6, #1
 8016c7e:	68a3      	ldr	r3, [r4, #8]
 8016c80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016c84:	3b01      	subs	r3, #1
 8016c86:	60a3      	str	r3, [r4, #8]
 8016c88:	bb39      	cbnz	r1, 8016cda <_puts_r+0x9e>
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	da38      	bge.n	8016d00 <_puts_r+0xc4>
 8016c8e:	4622      	mov	r2, r4
 8016c90:	210a      	movs	r1, #10
 8016c92:	4628      	mov	r0, r5
 8016c94:	f000 f858 	bl	8016d48 <__swbuf_r>
 8016c98:	3001      	adds	r0, #1
 8016c9a:	d011      	beq.n	8016cc0 <_puts_r+0x84>
 8016c9c:	250a      	movs	r5, #10
 8016c9e:	e011      	b.n	8016cc4 <_puts_r+0x88>
 8016ca0:	4b1b      	ldr	r3, [pc, #108]	; (8016d10 <_puts_r+0xd4>)
 8016ca2:	429c      	cmp	r4, r3
 8016ca4:	d101      	bne.n	8016caa <_puts_r+0x6e>
 8016ca6:	68ac      	ldr	r4, [r5, #8]
 8016ca8:	e7da      	b.n	8016c60 <_puts_r+0x24>
 8016caa:	4b1a      	ldr	r3, [pc, #104]	; (8016d14 <_puts_r+0xd8>)
 8016cac:	429c      	cmp	r4, r3
 8016cae:	bf08      	it	eq
 8016cb0:	68ec      	ldreq	r4, [r5, #12]
 8016cb2:	e7d5      	b.n	8016c60 <_puts_r+0x24>
 8016cb4:	4621      	mov	r1, r4
 8016cb6:	4628      	mov	r0, r5
 8016cb8:	f000 f898 	bl	8016dec <__swsetup_r>
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	d0dd      	beq.n	8016c7c <_puts_r+0x40>
 8016cc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016cc6:	07da      	lsls	r2, r3, #31
 8016cc8:	d405      	bmi.n	8016cd6 <_puts_r+0x9a>
 8016cca:	89a3      	ldrh	r3, [r4, #12]
 8016ccc:	059b      	lsls	r3, r3, #22
 8016cce:	d402      	bmi.n	8016cd6 <_puts_r+0x9a>
 8016cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cd2:	f000 fab2 	bl	801723a <__retarget_lock_release_recursive>
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	bd70      	pop	{r4, r5, r6, pc}
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	da04      	bge.n	8016ce8 <_puts_r+0xac>
 8016cde:	69a2      	ldr	r2, [r4, #24]
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	dc06      	bgt.n	8016cf2 <_puts_r+0xb6>
 8016ce4:	290a      	cmp	r1, #10
 8016ce6:	d004      	beq.n	8016cf2 <_puts_r+0xb6>
 8016ce8:	6823      	ldr	r3, [r4, #0]
 8016cea:	1c5a      	adds	r2, r3, #1
 8016cec:	6022      	str	r2, [r4, #0]
 8016cee:	7019      	strb	r1, [r3, #0]
 8016cf0:	e7c5      	b.n	8016c7e <_puts_r+0x42>
 8016cf2:	4622      	mov	r2, r4
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	f000 f827 	bl	8016d48 <__swbuf_r>
 8016cfa:	3001      	adds	r0, #1
 8016cfc:	d1bf      	bne.n	8016c7e <_puts_r+0x42>
 8016cfe:	e7df      	b.n	8016cc0 <_puts_r+0x84>
 8016d00:	6823      	ldr	r3, [r4, #0]
 8016d02:	250a      	movs	r5, #10
 8016d04:	1c5a      	adds	r2, r3, #1
 8016d06:	6022      	str	r2, [r4, #0]
 8016d08:	701d      	strb	r5, [r3, #0]
 8016d0a:	e7db      	b.n	8016cc4 <_puts_r+0x88>
 8016d0c:	08017884 	.word	0x08017884
 8016d10:	080178a4 	.word	0x080178a4
 8016d14:	08017864 	.word	0x08017864

08016d18 <puts>:
 8016d18:	4b02      	ldr	r3, [pc, #8]	; (8016d24 <puts+0xc>)
 8016d1a:	4601      	mov	r1, r0
 8016d1c:	6818      	ldr	r0, [r3, #0]
 8016d1e:	f7ff bf8d 	b.w	8016c3c <_puts_r>
 8016d22:	bf00      	nop
 8016d24:	240000a4 	.word	0x240000a4

08016d28 <_sbrk_r>:
 8016d28:	b538      	push	{r3, r4, r5, lr}
 8016d2a:	4d06      	ldr	r5, [pc, #24]	; (8016d44 <_sbrk_r+0x1c>)
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	4604      	mov	r4, r0
 8016d30:	4608      	mov	r0, r1
 8016d32:	602b      	str	r3, [r5, #0]
 8016d34:	f7ec ffd0 	bl	8003cd8 <_sbrk>
 8016d38:	1c43      	adds	r3, r0, #1
 8016d3a:	d102      	bne.n	8016d42 <_sbrk_r+0x1a>
 8016d3c:	682b      	ldr	r3, [r5, #0]
 8016d3e:	b103      	cbz	r3, 8016d42 <_sbrk_r+0x1a>
 8016d40:	6023      	str	r3, [r4, #0]
 8016d42:	bd38      	pop	{r3, r4, r5, pc}
 8016d44:	24005a8c 	.word	0x24005a8c

08016d48 <__swbuf_r>:
 8016d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d4a:	460e      	mov	r6, r1
 8016d4c:	4614      	mov	r4, r2
 8016d4e:	4605      	mov	r5, r0
 8016d50:	b118      	cbz	r0, 8016d5a <__swbuf_r+0x12>
 8016d52:	6983      	ldr	r3, [r0, #24]
 8016d54:	b90b      	cbnz	r3, 8016d5a <__swbuf_r+0x12>
 8016d56:	f000 f9d1 	bl	80170fc <__sinit>
 8016d5a:	4b21      	ldr	r3, [pc, #132]	; (8016de0 <__swbuf_r+0x98>)
 8016d5c:	429c      	cmp	r4, r3
 8016d5e:	d12b      	bne.n	8016db8 <__swbuf_r+0x70>
 8016d60:	686c      	ldr	r4, [r5, #4]
 8016d62:	69a3      	ldr	r3, [r4, #24]
 8016d64:	60a3      	str	r3, [r4, #8]
 8016d66:	89a3      	ldrh	r3, [r4, #12]
 8016d68:	071a      	lsls	r2, r3, #28
 8016d6a:	d52f      	bpl.n	8016dcc <__swbuf_r+0x84>
 8016d6c:	6923      	ldr	r3, [r4, #16]
 8016d6e:	b36b      	cbz	r3, 8016dcc <__swbuf_r+0x84>
 8016d70:	6923      	ldr	r3, [r4, #16]
 8016d72:	6820      	ldr	r0, [r4, #0]
 8016d74:	1ac0      	subs	r0, r0, r3
 8016d76:	6963      	ldr	r3, [r4, #20]
 8016d78:	b2f6      	uxtb	r6, r6
 8016d7a:	4283      	cmp	r3, r0
 8016d7c:	4637      	mov	r7, r6
 8016d7e:	dc04      	bgt.n	8016d8a <__swbuf_r+0x42>
 8016d80:	4621      	mov	r1, r4
 8016d82:	4628      	mov	r0, r5
 8016d84:	f000 f926 	bl	8016fd4 <_fflush_r>
 8016d88:	bb30      	cbnz	r0, 8016dd8 <__swbuf_r+0x90>
 8016d8a:	68a3      	ldr	r3, [r4, #8]
 8016d8c:	3b01      	subs	r3, #1
 8016d8e:	60a3      	str	r3, [r4, #8]
 8016d90:	6823      	ldr	r3, [r4, #0]
 8016d92:	1c5a      	adds	r2, r3, #1
 8016d94:	6022      	str	r2, [r4, #0]
 8016d96:	701e      	strb	r6, [r3, #0]
 8016d98:	6963      	ldr	r3, [r4, #20]
 8016d9a:	3001      	adds	r0, #1
 8016d9c:	4283      	cmp	r3, r0
 8016d9e:	d004      	beq.n	8016daa <__swbuf_r+0x62>
 8016da0:	89a3      	ldrh	r3, [r4, #12]
 8016da2:	07db      	lsls	r3, r3, #31
 8016da4:	d506      	bpl.n	8016db4 <__swbuf_r+0x6c>
 8016da6:	2e0a      	cmp	r6, #10
 8016da8:	d104      	bne.n	8016db4 <__swbuf_r+0x6c>
 8016daa:	4621      	mov	r1, r4
 8016dac:	4628      	mov	r0, r5
 8016dae:	f000 f911 	bl	8016fd4 <_fflush_r>
 8016db2:	b988      	cbnz	r0, 8016dd8 <__swbuf_r+0x90>
 8016db4:	4638      	mov	r0, r7
 8016db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016db8:	4b0a      	ldr	r3, [pc, #40]	; (8016de4 <__swbuf_r+0x9c>)
 8016dba:	429c      	cmp	r4, r3
 8016dbc:	d101      	bne.n	8016dc2 <__swbuf_r+0x7a>
 8016dbe:	68ac      	ldr	r4, [r5, #8]
 8016dc0:	e7cf      	b.n	8016d62 <__swbuf_r+0x1a>
 8016dc2:	4b09      	ldr	r3, [pc, #36]	; (8016de8 <__swbuf_r+0xa0>)
 8016dc4:	429c      	cmp	r4, r3
 8016dc6:	bf08      	it	eq
 8016dc8:	68ec      	ldreq	r4, [r5, #12]
 8016dca:	e7ca      	b.n	8016d62 <__swbuf_r+0x1a>
 8016dcc:	4621      	mov	r1, r4
 8016dce:	4628      	mov	r0, r5
 8016dd0:	f000 f80c 	bl	8016dec <__swsetup_r>
 8016dd4:	2800      	cmp	r0, #0
 8016dd6:	d0cb      	beq.n	8016d70 <__swbuf_r+0x28>
 8016dd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016ddc:	e7ea      	b.n	8016db4 <__swbuf_r+0x6c>
 8016dde:	bf00      	nop
 8016de0:	08017884 	.word	0x08017884
 8016de4:	080178a4 	.word	0x080178a4
 8016de8:	08017864 	.word	0x08017864

08016dec <__swsetup_r>:
 8016dec:	4b32      	ldr	r3, [pc, #200]	; (8016eb8 <__swsetup_r+0xcc>)
 8016dee:	b570      	push	{r4, r5, r6, lr}
 8016df0:	681d      	ldr	r5, [r3, #0]
 8016df2:	4606      	mov	r6, r0
 8016df4:	460c      	mov	r4, r1
 8016df6:	b125      	cbz	r5, 8016e02 <__swsetup_r+0x16>
 8016df8:	69ab      	ldr	r3, [r5, #24]
 8016dfa:	b913      	cbnz	r3, 8016e02 <__swsetup_r+0x16>
 8016dfc:	4628      	mov	r0, r5
 8016dfe:	f000 f97d 	bl	80170fc <__sinit>
 8016e02:	4b2e      	ldr	r3, [pc, #184]	; (8016ebc <__swsetup_r+0xd0>)
 8016e04:	429c      	cmp	r4, r3
 8016e06:	d10f      	bne.n	8016e28 <__swsetup_r+0x3c>
 8016e08:	686c      	ldr	r4, [r5, #4]
 8016e0a:	89a3      	ldrh	r3, [r4, #12]
 8016e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e10:	0719      	lsls	r1, r3, #28
 8016e12:	d42c      	bmi.n	8016e6e <__swsetup_r+0x82>
 8016e14:	06dd      	lsls	r5, r3, #27
 8016e16:	d411      	bmi.n	8016e3c <__swsetup_r+0x50>
 8016e18:	2309      	movs	r3, #9
 8016e1a:	6033      	str	r3, [r6, #0]
 8016e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e20:	81a3      	strh	r3, [r4, #12]
 8016e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e26:	e03e      	b.n	8016ea6 <__swsetup_r+0xba>
 8016e28:	4b25      	ldr	r3, [pc, #148]	; (8016ec0 <__swsetup_r+0xd4>)
 8016e2a:	429c      	cmp	r4, r3
 8016e2c:	d101      	bne.n	8016e32 <__swsetup_r+0x46>
 8016e2e:	68ac      	ldr	r4, [r5, #8]
 8016e30:	e7eb      	b.n	8016e0a <__swsetup_r+0x1e>
 8016e32:	4b24      	ldr	r3, [pc, #144]	; (8016ec4 <__swsetup_r+0xd8>)
 8016e34:	429c      	cmp	r4, r3
 8016e36:	bf08      	it	eq
 8016e38:	68ec      	ldreq	r4, [r5, #12]
 8016e3a:	e7e6      	b.n	8016e0a <__swsetup_r+0x1e>
 8016e3c:	0758      	lsls	r0, r3, #29
 8016e3e:	d512      	bpl.n	8016e66 <__swsetup_r+0x7a>
 8016e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e42:	b141      	cbz	r1, 8016e56 <__swsetup_r+0x6a>
 8016e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e48:	4299      	cmp	r1, r3
 8016e4a:	d002      	beq.n	8016e52 <__swsetup_r+0x66>
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	f7ff fe15 	bl	8016a7c <_free_r>
 8016e52:	2300      	movs	r3, #0
 8016e54:	6363      	str	r3, [r4, #52]	; 0x34
 8016e56:	89a3      	ldrh	r3, [r4, #12]
 8016e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e5c:	81a3      	strh	r3, [r4, #12]
 8016e5e:	2300      	movs	r3, #0
 8016e60:	6063      	str	r3, [r4, #4]
 8016e62:	6923      	ldr	r3, [r4, #16]
 8016e64:	6023      	str	r3, [r4, #0]
 8016e66:	89a3      	ldrh	r3, [r4, #12]
 8016e68:	f043 0308 	orr.w	r3, r3, #8
 8016e6c:	81a3      	strh	r3, [r4, #12]
 8016e6e:	6923      	ldr	r3, [r4, #16]
 8016e70:	b94b      	cbnz	r3, 8016e86 <__swsetup_r+0x9a>
 8016e72:	89a3      	ldrh	r3, [r4, #12]
 8016e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e7c:	d003      	beq.n	8016e86 <__swsetup_r+0x9a>
 8016e7e:	4621      	mov	r1, r4
 8016e80:	4630      	mov	r0, r6
 8016e82:	f000 fa01 	bl	8017288 <__smakebuf_r>
 8016e86:	89a0      	ldrh	r0, [r4, #12]
 8016e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e8c:	f010 0301 	ands.w	r3, r0, #1
 8016e90:	d00a      	beq.n	8016ea8 <__swsetup_r+0xbc>
 8016e92:	2300      	movs	r3, #0
 8016e94:	60a3      	str	r3, [r4, #8]
 8016e96:	6963      	ldr	r3, [r4, #20]
 8016e98:	425b      	negs	r3, r3
 8016e9a:	61a3      	str	r3, [r4, #24]
 8016e9c:	6923      	ldr	r3, [r4, #16]
 8016e9e:	b943      	cbnz	r3, 8016eb2 <__swsetup_r+0xc6>
 8016ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ea4:	d1ba      	bne.n	8016e1c <__swsetup_r+0x30>
 8016ea6:	bd70      	pop	{r4, r5, r6, pc}
 8016ea8:	0781      	lsls	r1, r0, #30
 8016eaa:	bf58      	it	pl
 8016eac:	6963      	ldrpl	r3, [r4, #20]
 8016eae:	60a3      	str	r3, [r4, #8]
 8016eb0:	e7f4      	b.n	8016e9c <__swsetup_r+0xb0>
 8016eb2:	2000      	movs	r0, #0
 8016eb4:	e7f7      	b.n	8016ea6 <__swsetup_r+0xba>
 8016eb6:	bf00      	nop
 8016eb8:	240000a4 	.word	0x240000a4
 8016ebc:	08017884 	.word	0x08017884
 8016ec0:	080178a4 	.word	0x080178a4
 8016ec4:	08017864 	.word	0x08017864

08016ec8 <__sflush_r>:
 8016ec8:	898a      	ldrh	r2, [r1, #12]
 8016eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ece:	4605      	mov	r5, r0
 8016ed0:	0710      	lsls	r0, r2, #28
 8016ed2:	460c      	mov	r4, r1
 8016ed4:	d458      	bmi.n	8016f88 <__sflush_r+0xc0>
 8016ed6:	684b      	ldr	r3, [r1, #4]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	dc05      	bgt.n	8016ee8 <__sflush_r+0x20>
 8016edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	dc02      	bgt.n	8016ee8 <__sflush_r+0x20>
 8016ee2:	2000      	movs	r0, #0
 8016ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016eea:	2e00      	cmp	r6, #0
 8016eec:	d0f9      	beq.n	8016ee2 <__sflush_r+0x1a>
 8016eee:	2300      	movs	r3, #0
 8016ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ef4:	682f      	ldr	r7, [r5, #0]
 8016ef6:	602b      	str	r3, [r5, #0]
 8016ef8:	d032      	beq.n	8016f60 <__sflush_r+0x98>
 8016efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016efc:	89a3      	ldrh	r3, [r4, #12]
 8016efe:	075a      	lsls	r2, r3, #29
 8016f00:	d505      	bpl.n	8016f0e <__sflush_r+0x46>
 8016f02:	6863      	ldr	r3, [r4, #4]
 8016f04:	1ac0      	subs	r0, r0, r3
 8016f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f08:	b10b      	cbz	r3, 8016f0e <__sflush_r+0x46>
 8016f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f0c:	1ac0      	subs	r0, r0, r3
 8016f0e:	2300      	movs	r3, #0
 8016f10:	4602      	mov	r2, r0
 8016f12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f14:	6a21      	ldr	r1, [r4, #32]
 8016f16:	4628      	mov	r0, r5
 8016f18:	47b0      	blx	r6
 8016f1a:	1c43      	adds	r3, r0, #1
 8016f1c:	89a3      	ldrh	r3, [r4, #12]
 8016f1e:	d106      	bne.n	8016f2e <__sflush_r+0x66>
 8016f20:	6829      	ldr	r1, [r5, #0]
 8016f22:	291d      	cmp	r1, #29
 8016f24:	d82c      	bhi.n	8016f80 <__sflush_r+0xb8>
 8016f26:	4a2a      	ldr	r2, [pc, #168]	; (8016fd0 <__sflush_r+0x108>)
 8016f28:	40ca      	lsrs	r2, r1
 8016f2a:	07d6      	lsls	r6, r2, #31
 8016f2c:	d528      	bpl.n	8016f80 <__sflush_r+0xb8>
 8016f2e:	2200      	movs	r2, #0
 8016f30:	6062      	str	r2, [r4, #4]
 8016f32:	04d9      	lsls	r1, r3, #19
 8016f34:	6922      	ldr	r2, [r4, #16]
 8016f36:	6022      	str	r2, [r4, #0]
 8016f38:	d504      	bpl.n	8016f44 <__sflush_r+0x7c>
 8016f3a:	1c42      	adds	r2, r0, #1
 8016f3c:	d101      	bne.n	8016f42 <__sflush_r+0x7a>
 8016f3e:	682b      	ldr	r3, [r5, #0]
 8016f40:	b903      	cbnz	r3, 8016f44 <__sflush_r+0x7c>
 8016f42:	6560      	str	r0, [r4, #84]	; 0x54
 8016f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f46:	602f      	str	r7, [r5, #0]
 8016f48:	2900      	cmp	r1, #0
 8016f4a:	d0ca      	beq.n	8016ee2 <__sflush_r+0x1a>
 8016f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f50:	4299      	cmp	r1, r3
 8016f52:	d002      	beq.n	8016f5a <__sflush_r+0x92>
 8016f54:	4628      	mov	r0, r5
 8016f56:	f7ff fd91 	bl	8016a7c <_free_r>
 8016f5a:	2000      	movs	r0, #0
 8016f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8016f5e:	e7c1      	b.n	8016ee4 <__sflush_r+0x1c>
 8016f60:	6a21      	ldr	r1, [r4, #32]
 8016f62:	2301      	movs	r3, #1
 8016f64:	4628      	mov	r0, r5
 8016f66:	47b0      	blx	r6
 8016f68:	1c41      	adds	r1, r0, #1
 8016f6a:	d1c7      	bne.n	8016efc <__sflush_r+0x34>
 8016f6c:	682b      	ldr	r3, [r5, #0]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d0c4      	beq.n	8016efc <__sflush_r+0x34>
 8016f72:	2b1d      	cmp	r3, #29
 8016f74:	d001      	beq.n	8016f7a <__sflush_r+0xb2>
 8016f76:	2b16      	cmp	r3, #22
 8016f78:	d101      	bne.n	8016f7e <__sflush_r+0xb6>
 8016f7a:	602f      	str	r7, [r5, #0]
 8016f7c:	e7b1      	b.n	8016ee2 <__sflush_r+0x1a>
 8016f7e:	89a3      	ldrh	r3, [r4, #12]
 8016f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f84:	81a3      	strh	r3, [r4, #12]
 8016f86:	e7ad      	b.n	8016ee4 <__sflush_r+0x1c>
 8016f88:	690f      	ldr	r7, [r1, #16]
 8016f8a:	2f00      	cmp	r7, #0
 8016f8c:	d0a9      	beq.n	8016ee2 <__sflush_r+0x1a>
 8016f8e:	0793      	lsls	r3, r2, #30
 8016f90:	680e      	ldr	r6, [r1, #0]
 8016f92:	bf08      	it	eq
 8016f94:	694b      	ldreq	r3, [r1, #20]
 8016f96:	600f      	str	r7, [r1, #0]
 8016f98:	bf18      	it	ne
 8016f9a:	2300      	movne	r3, #0
 8016f9c:	eba6 0807 	sub.w	r8, r6, r7
 8016fa0:	608b      	str	r3, [r1, #8]
 8016fa2:	f1b8 0f00 	cmp.w	r8, #0
 8016fa6:	dd9c      	ble.n	8016ee2 <__sflush_r+0x1a>
 8016fa8:	6a21      	ldr	r1, [r4, #32]
 8016faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016fac:	4643      	mov	r3, r8
 8016fae:	463a      	mov	r2, r7
 8016fb0:	4628      	mov	r0, r5
 8016fb2:	47b0      	blx	r6
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	dc06      	bgt.n	8016fc6 <__sflush_r+0xfe>
 8016fb8:	89a3      	ldrh	r3, [r4, #12]
 8016fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fbe:	81a3      	strh	r3, [r4, #12]
 8016fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fc4:	e78e      	b.n	8016ee4 <__sflush_r+0x1c>
 8016fc6:	4407      	add	r7, r0
 8016fc8:	eba8 0800 	sub.w	r8, r8, r0
 8016fcc:	e7e9      	b.n	8016fa2 <__sflush_r+0xda>
 8016fce:	bf00      	nop
 8016fd0:	20400001 	.word	0x20400001

08016fd4 <_fflush_r>:
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	690b      	ldr	r3, [r1, #16]
 8016fd8:	4605      	mov	r5, r0
 8016fda:	460c      	mov	r4, r1
 8016fdc:	b913      	cbnz	r3, 8016fe4 <_fflush_r+0x10>
 8016fde:	2500      	movs	r5, #0
 8016fe0:	4628      	mov	r0, r5
 8016fe2:	bd38      	pop	{r3, r4, r5, pc}
 8016fe4:	b118      	cbz	r0, 8016fee <_fflush_r+0x1a>
 8016fe6:	6983      	ldr	r3, [r0, #24]
 8016fe8:	b90b      	cbnz	r3, 8016fee <_fflush_r+0x1a>
 8016fea:	f000 f887 	bl	80170fc <__sinit>
 8016fee:	4b14      	ldr	r3, [pc, #80]	; (8017040 <_fflush_r+0x6c>)
 8016ff0:	429c      	cmp	r4, r3
 8016ff2:	d11b      	bne.n	801702c <_fflush_r+0x58>
 8016ff4:	686c      	ldr	r4, [r5, #4]
 8016ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d0ef      	beq.n	8016fde <_fflush_r+0xa>
 8016ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017000:	07d0      	lsls	r0, r2, #31
 8017002:	d404      	bmi.n	801700e <_fflush_r+0x3a>
 8017004:	0599      	lsls	r1, r3, #22
 8017006:	d402      	bmi.n	801700e <_fflush_r+0x3a>
 8017008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801700a:	f000 f915 	bl	8017238 <__retarget_lock_acquire_recursive>
 801700e:	4628      	mov	r0, r5
 8017010:	4621      	mov	r1, r4
 8017012:	f7ff ff59 	bl	8016ec8 <__sflush_r>
 8017016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017018:	07da      	lsls	r2, r3, #31
 801701a:	4605      	mov	r5, r0
 801701c:	d4e0      	bmi.n	8016fe0 <_fflush_r+0xc>
 801701e:	89a3      	ldrh	r3, [r4, #12]
 8017020:	059b      	lsls	r3, r3, #22
 8017022:	d4dd      	bmi.n	8016fe0 <_fflush_r+0xc>
 8017024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017026:	f000 f908 	bl	801723a <__retarget_lock_release_recursive>
 801702a:	e7d9      	b.n	8016fe0 <_fflush_r+0xc>
 801702c:	4b05      	ldr	r3, [pc, #20]	; (8017044 <_fflush_r+0x70>)
 801702e:	429c      	cmp	r4, r3
 8017030:	d101      	bne.n	8017036 <_fflush_r+0x62>
 8017032:	68ac      	ldr	r4, [r5, #8]
 8017034:	e7df      	b.n	8016ff6 <_fflush_r+0x22>
 8017036:	4b04      	ldr	r3, [pc, #16]	; (8017048 <_fflush_r+0x74>)
 8017038:	429c      	cmp	r4, r3
 801703a:	bf08      	it	eq
 801703c:	68ec      	ldreq	r4, [r5, #12]
 801703e:	e7da      	b.n	8016ff6 <_fflush_r+0x22>
 8017040:	08017884 	.word	0x08017884
 8017044:	080178a4 	.word	0x080178a4
 8017048:	08017864 	.word	0x08017864

0801704c <std>:
 801704c:	2300      	movs	r3, #0
 801704e:	b510      	push	{r4, lr}
 8017050:	4604      	mov	r4, r0
 8017052:	e9c0 3300 	strd	r3, r3, [r0]
 8017056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801705a:	6083      	str	r3, [r0, #8]
 801705c:	8181      	strh	r1, [r0, #12]
 801705e:	6643      	str	r3, [r0, #100]	; 0x64
 8017060:	81c2      	strh	r2, [r0, #14]
 8017062:	6183      	str	r3, [r0, #24]
 8017064:	4619      	mov	r1, r3
 8017066:	2208      	movs	r2, #8
 8017068:	305c      	adds	r0, #92	; 0x5c
 801706a:	f7ff fcff 	bl	8016a6c <memset>
 801706e:	4b05      	ldr	r3, [pc, #20]	; (8017084 <std+0x38>)
 8017070:	6263      	str	r3, [r4, #36]	; 0x24
 8017072:	4b05      	ldr	r3, [pc, #20]	; (8017088 <std+0x3c>)
 8017074:	62a3      	str	r3, [r4, #40]	; 0x28
 8017076:	4b05      	ldr	r3, [pc, #20]	; (801708c <std+0x40>)
 8017078:	62e3      	str	r3, [r4, #44]	; 0x2c
 801707a:	4b05      	ldr	r3, [pc, #20]	; (8017090 <std+0x44>)
 801707c:	6224      	str	r4, [r4, #32]
 801707e:	6323      	str	r3, [r4, #48]	; 0x30
 8017080:	bd10      	pop	{r4, pc}
 8017082:	bf00      	nop
 8017084:	08017321 	.word	0x08017321
 8017088:	08017343 	.word	0x08017343
 801708c:	0801737b 	.word	0x0801737b
 8017090:	0801739f 	.word	0x0801739f

08017094 <_cleanup_r>:
 8017094:	4901      	ldr	r1, [pc, #4]	; (801709c <_cleanup_r+0x8>)
 8017096:	f000 b8af 	b.w	80171f8 <_fwalk_reent>
 801709a:	bf00      	nop
 801709c:	08016fd5 	.word	0x08016fd5

080170a0 <__sfmoreglue>:
 80170a0:	b570      	push	{r4, r5, r6, lr}
 80170a2:	2268      	movs	r2, #104	; 0x68
 80170a4:	1e4d      	subs	r5, r1, #1
 80170a6:	4355      	muls	r5, r2
 80170a8:	460e      	mov	r6, r1
 80170aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80170ae:	f7ff fd51 	bl	8016b54 <_malloc_r>
 80170b2:	4604      	mov	r4, r0
 80170b4:	b140      	cbz	r0, 80170c8 <__sfmoreglue+0x28>
 80170b6:	2100      	movs	r1, #0
 80170b8:	e9c0 1600 	strd	r1, r6, [r0]
 80170bc:	300c      	adds	r0, #12
 80170be:	60a0      	str	r0, [r4, #8]
 80170c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80170c4:	f7ff fcd2 	bl	8016a6c <memset>
 80170c8:	4620      	mov	r0, r4
 80170ca:	bd70      	pop	{r4, r5, r6, pc}

080170cc <__sfp_lock_acquire>:
 80170cc:	4801      	ldr	r0, [pc, #4]	; (80170d4 <__sfp_lock_acquire+0x8>)
 80170ce:	f000 b8b3 	b.w	8017238 <__retarget_lock_acquire_recursive>
 80170d2:	bf00      	nop
 80170d4:	24005a89 	.word	0x24005a89

080170d8 <__sfp_lock_release>:
 80170d8:	4801      	ldr	r0, [pc, #4]	; (80170e0 <__sfp_lock_release+0x8>)
 80170da:	f000 b8ae 	b.w	801723a <__retarget_lock_release_recursive>
 80170de:	bf00      	nop
 80170e0:	24005a89 	.word	0x24005a89

080170e4 <__sinit_lock_acquire>:
 80170e4:	4801      	ldr	r0, [pc, #4]	; (80170ec <__sinit_lock_acquire+0x8>)
 80170e6:	f000 b8a7 	b.w	8017238 <__retarget_lock_acquire_recursive>
 80170ea:	bf00      	nop
 80170ec:	24005a8a 	.word	0x24005a8a

080170f0 <__sinit_lock_release>:
 80170f0:	4801      	ldr	r0, [pc, #4]	; (80170f8 <__sinit_lock_release+0x8>)
 80170f2:	f000 b8a2 	b.w	801723a <__retarget_lock_release_recursive>
 80170f6:	bf00      	nop
 80170f8:	24005a8a 	.word	0x24005a8a

080170fc <__sinit>:
 80170fc:	b510      	push	{r4, lr}
 80170fe:	4604      	mov	r4, r0
 8017100:	f7ff fff0 	bl	80170e4 <__sinit_lock_acquire>
 8017104:	69a3      	ldr	r3, [r4, #24]
 8017106:	b11b      	cbz	r3, 8017110 <__sinit+0x14>
 8017108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801710c:	f7ff bff0 	b.w	80170f0 <__sinit_lock_release>
 8017110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017114:	6523      	str	r3, [r4, #80]	; 0x50
 8017116:	4b13      	ldr	r3, [pc, #76]	; (8017164 <__sinit+0x68>)
 8017118:	4a13      	ldr	r2, [pc, #76]	; (8017168 <__sinit+0x6c>)
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	62a2      	str	r2, [r4, #40]	; 0x28
 801711e:	42a3      	cmp	r3, r4
 8017120:	bf04      	itt	eq
 8017122:	2301      	moveq	r3, #1
 8017124:	61a3      	streq	r3, [r4, #24]
 8017126:	4620      	mov	r0, r4
 8017128:	f000 f820 	bl	801716c <__sfp>
 801712c:	6060      	str	r0, [r4, #4]
 801712e:	4620      	mov	r0, r4
 8017130:	f000 f81c 	bl	801716c <__sfp>
 8017134:	60a0      	str	r0, [r4, #8]
 8017136:	4620      	mov	r0, r4
 8017138:	f000 f818 	bl	801716c <__sfp>
 801713c:	2200      	movs	r2, #0
 801713e:	60e0      	str	r0, [r4, #12]
 8017140:	2104      	movs	r1, #4
 8017142:	6860      	ldr	r0, [r4, #4]
 8017144:	f7ff ff82 	bl	801704c <std>
 8017148:	68a0      	ldr	r0, [r4, #8]
 801714a:	2201      	movs	r2, #1
 801714c:	2109      	movs	r1, #9
 801714e:	f7ff ff7d 	bl	801704c <std>
 8017152:	68e0      	ldr	r0, [r4, #12]
 8017154:	2202      	movs	r2, #2
 8017156:	2112      	movs	r1, #18
 8017158:	f7ff ff78 	bl	801704c <std>
 801715c:	2301      	movs	r3, #1
 801715e:	61a3      	str	r3, [r4, #24]
 8017160:	e7d2      	b.n	8017108 <__sinit+0xc>
 8017162:	bf00      	nop
 8017164:	08017860 	.word	0x08017860
 8017168:	08017095 	.word	0x08017095

0801716c <__sfp>:
 801716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801716e:	4607      	mov	r7, r0
 8017170:	f7ff ffac 	bl	80170cc <__sfp_lock_acquire>
 8017174:	4b1e      	ldr	r3, [pc, #120]	; (80171f0 <__sfp+0x84>)
 8017176:	681e      	ldr	r6, [r3, #0]
 8017178:	69b3      	ldr	r3, [r6, #24]
 801717a:	b913      	cbnz	r3, 8017182 <__sfp+0x16>
 801717c:	4630      	mov	r0, r6
 801717e:	f7ff ffbd 	bl	80170fc <__sinit>
 8017182:	3648      	adds	r6, #72	; 0x48
 8017184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017188:	3b01      	subs	r3, #1
 801718a:	d503      	bpl.n	8017194 <__sfp+0x28>
 801718c:	6833      	ldr	r3, [r6, #0]
 801718e:	b30b      	cbz	r3, 80171d4 <__sfp+0x68>
 8017190:	6836      	ldr	r6, [r6, #0]
 8017192:	e7f7      	b.n	8017184 <__sfp+0x18>
 8017194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017198:	b9d5      	cbnz	r5, 80171d0 <__sfp+0x64>
 801719a:	4b16      	ldr	r3, [pc, #88]	; (80171f4 <__sfp+0x88>)
 801719c:	60e3      	str	r3, [r4, #12]
 801719e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80171a2:	6665      	str	r5, [r4, #100]	; 0x64
 80171a4:	f000 f847 	bl	8017236 <__retarget_lock_init_recursive>
 80171a8:	f7ff ff96 	bl	80170d8 <__sfp_lock_release>
 80171ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80171b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80171b4:	6025      	str	r5, [r4, #0]
 80171b6:	61a5      	str	r5, [r4, #24]
 80171b8:	2208      	movs	r2, #8
 80171ba:	4629      	mov	r1, r5
 80171bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80171c0:	f7ff fc54 	bl	8016a6c <memset>
 80171c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80171c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80171cc:	4620      	mov	r0, r4
 80171ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171d0:	3468      	adds	r4, #104	; 0x68
 80171d2:	e7d9      	b.n	8017188 <__sfp+0x1c>
 80171d4:	2104      	movs	r1, #4
 80171d6:	4638      	mov	r0, r7
 80171d8:	f7ff ff62 	bl	80170a0 <__sfmoreglue>
 80171dc:	4604      	mov	r4, r0
 80171de:	6030      	str	r0, [r6, #0]
 80171e0:	2800      	cmp	r0, #0
 80171e2:	d1d5      	bne.n	8017190 <__sfp+0x24>
 80171e4:	f7ff ff78 	bl	80170d8 <__sfp_lock_release>
 80171e8:	230c      	movs	r3, #12
 80171ea:	603b      	str	r3, [r7, #0]
 80171ec:	e7ee      	b.n	80171cc <__sfp+0x60>
 80171ee:	bf00      	nop
 80171f0:	08017860 	.word	0x08017860
 80171f4:	ffff0001 	.word	0xffff0001

080171f8 <_fwalk_reent>:
 80171f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171fc:	4606      	mov	r6, r0
 80171fe:	4688      	mov	r8, r1
 8017200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017204:	2700      	movs	r7, #0
 8017206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801720a:	f1b9 0901 	subs.w	r9, r9, #1
 801720e:	d505      	bpl.n	801721c <_fwalk_reent+0x24>
 8017210:	6824      	ldr	r4, [r4, #0]
 8017212:	2c00      	cmp	r4, #0
 8017214:	d1f7      	bne.n	8017206 <_fwalk_reent+0xe>
 8017216:	4638      	mov	r0, r7
 8017218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801721c:	89ab      	ldrh	r3, [r5, #12]
 801721e:	2b01      	cmp	r3, #1
 8017220:	d907      	bls.n	8017232 <_fwalk_reent+0x3a>
 8017222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017226:	3301      	adds	r3, #1
 8017228:	d003      	beq.n	8017232 <_fwalk_reent+0x3a>
 801722a:	4629      	mov	r1, r5
 801722c:	4630      	mov	r0, r6
 801722e:	47c0      	blx	r8
 8017230:	4307      	orrs	r7, r0
 8017232:	3568      	adds	r5, #104	; 0x68
 8017234:	e7e9      	b.n	801720a <_fwalk_reent+0x12>

08017236 <__retarget_lock_init_recursive>:
 8017236:	4770      	bx	lr

08017238 <__retarget_lock_acquire_recursive>:
 8017238:	4770      	bx	lr

0801723a <__retarget_lock_release_recursive>:
 801723a:	4770      	bx	lr

0801723c <__swhatbuf_r>:
 801723c:	b570      	push	{r4, r5, r6, lr}
 801723e:	460e      	mov	r6, r1
 8017240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017244:	2900      	cmp	r1, #0
 8017246:	b096      	sub	sp, #88	; 0x58
 8017248:	4614      	mov	r4, r2
 801724a:	461d      	mov	r5, r3
 801724c:	da08      	bge.n	8017260 <__swhatbuf_r+0x24>
 801724e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017252:	2200      	movs	r2, #0
 8017254:	602a      	str	r2, [r5, #0]
 8017256:	061a      	lsls	r2, r3, #24
 8017258:	d410      	bmi.n	801727c <__swhatbuf_r+0x40>
 801725a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801725e:	e00e      	b.n	801727e <__swhatbuf_r+0x42>
 8017260:	466a      	mov	r2, sp
 8017262:	f000 f8c3 	bl	80173ec <_fstat_r>
 8017266:	2800      	cmp	r0, #0
 8017268:	dbf1      	blt.n	801724e <__swhatbuf_r+0x12>
 801726a:	9a01      	ldr	r2, [sp, #4]
 801726c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017274:	425a      	negs	r2, r3
 8017276:	415a      	adcs	r2, r3
 8017278:	602a      	str	r2, [r5, #0]
 801727a:	e7ee      	b.n	801725a <__swhatbuf_r+0x1e>
 801727c:	2340      	movs	r3, #64	; 0x40
 801727e:	2000      	movs	r0, #0
 8017280:	6023      	str	r3, [r4, #0]
 8017282:	b016      	add	sp, #88	; 0x58
 8017284:	bd70      	pop	{r4, r5, r6, pc}
	...

08017288 <__smakebuf_r>:
 8017288:	898b      	ldrh	r3, [r1, #12]
 801728a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801728c:	079d      	lsls	r5, r3, #30
 801728e:	4606      	mov	r6, r0
 8017290:	460c      	mov	r4, r1
 8017292:	d507      	bpl.n	80172a4 <__smakebuf_r+0x1c>
 8017294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017298:	6023      	str	r3, [r4, #0]
 801729a:	6123      	str	r3, [r4, #16]
 801729c:	2301      	movs	r3, #1
 801729e:	6163      	str	r3, [r4, #20]
 80172a0:	b002      	add	sp, #8
 80172a2:	bd70      	pop	{r4, r5, r6, pc}
 80172a4:	ab01      	add	r3, sp, #4
 80172a6:	466a      	mov	r2, sp
 80172a8:	f7ff ffc8 	bl	801723c <__swhatbuf_r>
 80172ac:	9900      	ldr	r1, [sp, #0]
 80172ae:	4605      	mov	r5, r0
 80172b0:	4630      	mov	r0, r6
 80172b2:	f7ff fc4f 	bl	8016b54 <_malloc_r>
 80172b6:	b948      	cbnz	r0, 80172cc <__smakebuf_r+0x44>
 80172b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172bc:	059a      	lsls	r2, r3, #22
 80172be:	d4ef      	bmi.n	80172a0 <__smakebuf_r+0x18>
 80172c0:	f023 0303 	bic.w	r3, r3, #3
 80172c4:	f043 0302 	orr.w	r3, r3, #2
 80172c8:	81a3      	strh	r3, [r4, #12]
 80172ca:	e7e3      	b.n	8017294 <__smakebuf_r+0xc>
 80172cc:	4b0d      	ldr	r3, [pc, #52]	; (8017304 <__smakebuf_r+0x7c>)
 80172ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80172d0:	89a3      	ldrh	r3, [r4, #12]
 80172d2:	6020      	str	r0, [r4, #0]
 80172d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172d8:	81a3      	strh	r3, [r4, #12]
 80172da:	9b00      	ldr	r3, [sp, #0]
 80172dc:	6163      	str	r3, [r4, #20]
 80172de:	9b01      	ldr	r3, [sp, #4]
 80172e0:	6120      	str	r0, [r4, #16]
 80172e2:	b15b      	cbz	r3, 80172fc <__smakebuf_r+0x74>
 80172e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172e8:	4630      	mov	r0, r6
 80172ea:	f000 f891 	bl	8017410 <_isatty_r>
 80172ee:	b128      	cbz	r0, 80172fc <__smakebuf_r+0x74>
 80172f0:	89a3      	ldrh	r3, [r4, #12]
 80172f2:	f023 0303 	bic.w	r3, r3, #3
 80172f6:	f043 0301 	orr.w	r3, r3, #1
 80172fa:	81a3      	strh	r3, [r4, #12]
 80172fc:	89a0      	ldrh	r0, [r4, #12]
 80172fe:	4305      	orrs	r5, r0
 8017300:	81a5      	strh	r5, [r4, #12]
 8017302:	e7cd      	b.n	80172a0 <__smakebuf_r+0x18>
 8017304:	08017095 	.word	0x08017095

08017308 <__malloc_lock>:
 8017308:	4801      	ldr	r0, [pc, #4]	; (8017310 <__malloc_lock+0x8>)
 801730a:	f7ff bf95 	b.w	8017238 <__retarget_lock_acquire_recursive>
 801730e:	bf00      	nop
 8017310:	24005a88 	.word	0x24005a88

08017314 <__malloc_unlock>:
 8017314:	4801      	ldr	r0, [pc, #4]	; (801731c <__malloc_unlock+0x8>)
 8017316:	f7ff bf90 	b.w	801723a <__retarget_lock_release_recursive>
 801731a:	bf00      	nop
 801731c:	24005a88 	.word	0x24005a88

08017320 <__sread>:
 8017320:	b510      	push	{r4, lr}
 8017322:	460c      	mov	r4, r1
 8017324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017328:	f000 f894 	bl	8017454 <_read_r>
 801732c:	2800      	cmp	r0, #0
 801732e:	bfab      	itete	ge
 8017330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017332:	89a3      	ldrhlt	r3, [r4, #12]
 8017334:	181b      	addge	r3, r3, r0
 8017336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801733a:	bfac      	ite	ge
 801733c:	6563      	strge	r3, [r4, #84]	; 0x54
 801733e:	81a3      	strhlt	r3, [r4, #12]
 8017340:	bd10      	pop	{r4, pc}

08017342 <__swrite>:
 8017342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017346:	461f      	mov	r7, r3
 8017348:	898b      	ldrh	r3, [r1, #12]
 801734a:	05db      	lsls	r3, r3, #23
 801734c:	4605      	mov	r5, r0
 801734e:	460c      	mov	r4, r1
 8017350:	4616      	mov	r6, r2
 8017352:	d505      	bpl.n	8017360 <__swrite+0x1e>
 8017354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017358:	2302      	movs	r3, #2
 801735a:	2200      	movs	r2, #0
 801735c:	f000 f868 	bl	8017430 <_lseek_r>
 8017360:	89a3      	ldrh	r3, [r4, #12]
 8017362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801736a:	81a3      	strh	r3, [r4, #12]
 801736c:	4632      	mov	r2, r6
 801736e:	463b      	mov	r3, r7
 8017370:	4628      	mov	r0, r5
 8017372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017376:	f000 b817 	b.w	80173a8 <_write_r>

0801737a <__sseek>:
 801737a:	b510      	push	{r4, lr}
 801737c:	460c      	mov	r4, r1
 801737e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017382:	f000 f855 	bl	8017430 <_lseek_r>
 8017386:	1c43      	adds	r3, r0, #1
 8017388:	89a3      	ldrh	r3, [r4, #12]
 801738a:	bf15      	itete	ne
 801738c:	6560      	strne	r0, [r4, #84]	; 0x54
 801738e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017396:	81a3      	strheq	r3, [r4, #12]
 8017398:	bf18      	it	ne
 801739a:	81a3      	strhne	r3, [r4, #12]
 801739c:	bd10      	pop	{r4, pc}

0801739e <__sclose>:
 801739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173a2:	f000 b813 	b.w	80173cc <_close_r>
	...

080173a8 <_write_r>:
 80173a8:	b538      	push	{r3, r4, r5, lr}
 80173aa:	4d07      	ldr	r5, [pc, #28]	; (80173c8 <_write_r+0x20>)
 80173ac:	4604      	mov	r4, r0
 80173ae:	4608      	mov	r0, r1
 80173b0:	4611      	mov	r1, r2
 80173b2:	2200      	movs	r2, #0
 80173b4:	602a      	str	r2, [r5, #0]
 80173b6:	461a      	mov	r2, r3
 80173b8:	f7ec fc3d 	bl	8003c36 <_write>
 80173bc:	1c43      	adds	r3, r0, #1
 80173be:	d102      	bne.n	80173c6 <_write_r+0x1e>
 80173c0:	682b      	ldr	r3, [r5, #0]
 80173c2:	b103      	cbz	r3, 80173c6 <_write_r+0x1e>
 80173c4:	6023      	str	r3, [r4, #0]
 80173c6:	bd38      	pop	{r3, r4, r5, pc}
 80173c8:	24005a8c 	.word	0x24005a8c

080173cc <_close_r>:
 80173cc:	b538      	push	{r3, r4, r5, lr}
 80173ce:	4d06      	ldr	r5, [pc, #24]	; (80173e8 <_close_r+0x1c>)
 80173d0:	2300      	movs	r3, #0
 80173d2:	4604      	mov	r4, r0
 80173d4:	4608      	mov	r0, r1
 80173d6:	602b      	str	r3, [r5, #0]
 80173d8:	f7ec fc49 	bl	8003c6e <_close>
 80173dc:	1c43      	adds	r3, r0, #1
 80173de:	d102      	bne.n	80173e6 <_close_r+0x1a>
 80173e0:	682b      	ldr	r3, [r5, #0]
 80173e2:	b103      	cbz	r3, 80173e6 <_close_r+0x1a>
 80173e4:	6023      	str	r3, [r4, #0]
 80173e6:	bd38      	pop	{r3, r4, r5, pc}
 80173e8:	24005a8c 	.word	0x24005a8c

080173ec <_fstat_r>:
 80173ec:	b538      	push	{r3, r4, r5, lr}
 80173ee:	4d07      	ldr	r5, [pc, #28]	; (801740c <_fstat_r+0x20>)
 80173f0:	2300      	movs	r3, #0
 80173f2:	4604      	mov	r4, r0
 80173f4:	4608      	mov	r0, r1
 80173f6:	4611      	mov	r1, r2
 80173f8:	602b      	str	r3, [r5, #0]
 80173fa:	f7ec fc44 	bl	8003c86 <_fstat>
 80173fe:	1c43      	adds	r3, r0, #1
 8017400:	d102      	bne.n	8017408 <_fstat_r+0x1c>
 8017402:	682b      	ldr	r3, [r5, #0]
 8017404:	b103      	cbz	r3, 8017408 <_fstat_r+0x1c>
 8017406:	6023      	str	r3, [r4, #0]
 8017408:	bd38      	pop	{r3, r4, r5, pc}
 801740a:	bf00      	nop
 801740c:	24005a8c 	.word	0x24005a8c

08017410 <_isatty_r>:
 8017410:	b538      	push	{r3, r4, r5, lr}
 8017412:	4d06      	ldr	r5, [pc, #24]	; (801742c <_isatty_r+0x1c>)
 8017414:	2300      	movs	r3, #0
 8017416:	4604      	mov	r4, r0
 8017418:	4608      	mov	r0, r1
 801741a:	602b      	str	r3, [r5, #0]
 801741c:	f7ec fc43 	bl	8003ca6 <_isatty>
 8017420:	1c43      	adds	r3, r0, #1
 8017422:	d102      	bne.n	801742a <_isatty_r+0x1a>
 8017424:	682b      	ldr	r3, [r5, #0]
 8017426:	b103      	cbz	r3, 801742a <_isatty_r+0x1a>
 8017428:	6023      	str	r3, [r4, #0]
 801742a:	bd38      	pop	{r3, r4, r5, pc}
 801742c:	24005a8c 	.word	0x24005a8c

08017430 <_lseek_r>:
 8017430:	b538      	push	{r3, r4, r5, lr}
 8017432:	4d07      	ldr	r5, [pc, #28]	; (8017450 <_lseek_r+0x20>)
 8017434:	4604      	mov	r4, r0
 8017436:	4608      	mov	r0, r1
 8017438:	4611      	mov	r1, r2
 801743a:	2200      	movs	r2, #0
 801743c:	602a      	str	r2, [r5, #0]
 801743e:	461a      	mov	r2, r3
 8017440:	f7ec fc3c 	bl	8003cbc <_lseek>
 8017444:	1c43      	adds	r3, r0, #1
 8017446:	d102      	bne.n	801744e <_lseek_r+0x1e>
 8017448:	682b      	ldr	r3, [r5, #0]
 801744a:	b103      	cbz	r3, 801744e <_lseek_r+0x1e>
 801744c:	6023      	str	r3, [r4, #0]
 801744e:	bd38      	pop	{r3, r4, r5, pc}
 8017450:	24005a8c 	.word	0x24005a8c

08017454 <_read_r>:
 8017454:	b538      	push	{r3, r4, r5, lr}
 8017456:	4d07      	ldr	r5, [pc, #28]	; (8017474 <_read_r+0x20>)
 8017458:	4604      	mov	r4, r0
 801745a:	4608      	mov	r0, r1
 801745c:	4611      	mov	r1, r2
 801745e:	2200      	movs	r2, #0
 8017460:	602a      	str	r2, [r5, #0]
 8017462:	461a      	mov	r2, r3
 8017464:	f7ec fbca 	bl	8003bfc <_read>
 8017468:	1c43      	adds	r3, r0, #1
 801746a:	d102      	bne.n	8017472 <_read_r+0x1e>
 801746c:	682b      	ldr	r3, [r5, #0]
 801746e:	b103      	cbz	r3, 8017472 <_read_r+0x1e>
 8017470:	6023      	str	r3, [r4, #0]
 8017472:	bd38      	pop	{r3, r4, r5, pc}
 8017474:	24005a8c 	.word	0x24005a8c

08017478 <_init>:
 8017478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801747a:	bf00      	nop
 801747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801747e:	bc08      	pop	{r3}
 8017480:	469e      	mov	lr, r3
 8017482:	4770      	bx	lr

08017484 <_fini>:
 8017484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017486:	bf00      	nop
 8017488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801748a:	bc08      	pop	{r3}
 801748c:	469e      	mov	lr, r3
 801748e:	4770      	bx	lr
