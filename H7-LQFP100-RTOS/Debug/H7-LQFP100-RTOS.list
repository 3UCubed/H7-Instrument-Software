
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08017580  08017580  00027580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080179b4  080179b4  000279b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080179bc  080179bc  000279bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080179c0  080179c0  000279c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  080179c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005970  24000120  08017acc  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a90  08017acc  00035a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033b81  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005705  00000000  00000000  00063cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002780  00000000  00000000  000693c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002568  00000000  00000000  0006bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032426  00000000  00000000  000ae1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b67  00000000  00000000  000e05d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027513b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0f0  00000000  00000000  0027518c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017568 	.word	0x08017568

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017568 	.word	0x08017568

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c44 	.word	0x24000c44

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 feb0 	bl	801337c <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fea5 	bl	801337c <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fe9a 	bl	801337c <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fe8f 	bl	801337c <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fbd1 	bl	8016e08 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c64 	.word	0x24000c64
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	080175ec 	.word	0x080175ec

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fee7 	bl	8010468 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 8454 	bhi.w	8000f50 <HAL_UART_RxCpltCallback+0x8c8>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cfd 	.word	0x08000cfd
 80006dc:	08000d3b 	.word	0x08000d3b
 80006e0:	08000e31 	.word	0x08000e31
 80006e4:	08000e83 	.word	0x08000e83
 80006e8:	08000ee5 	.word	0x08000ee5
 80006ec:	08000f0d 	.word	0x08000f0d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d13 	.word	0x08000d13
 8000720:	08000d51 	.word	0x08000d51
 8000724:	08000e47 	.word	0x08000e47
 8000728:	08000ebd 	.word	0x08000ebd
 800072c:	08000f51 	.word	0x08000f51
 8000730:	08000f51 	.word	0x08000f51
 8000734:	08000f51 	.word	0x08000f51
 8000738:	08000f51 	.word	0x08000f51
 800073c:	08000f51 	.word	0x08000f51
 8000740:	08000f51 	.word	0x08000f51
 8000744:	08000f51 	.word	0x08000f51
 8000748:	08000f51 	.word	0x08000f51
 800074c:	08000f51 	.word	0x08000f51
 8000750:	08000f51 	.word	0x08000f51
 8000754:	08000f51 	.word	0x08000f51
 8000758:	08000f51 	.word	0x08000f51
 800075c:	08000f51 	.word	0x08000f51
 8000760:	08000f51 	.word	0x08000f51
 8000764:	08000f51 	.word	0x08000f51
 8000768:	08000f51 	.word	0x08000f51
 800076c:	08000f51 	.word	0x08000f51
 8000770:	08000f51 	.word	0x08000f51
 8000774:	08000f51 	.word	0x08000f51
 8000778:	08000f51 	.word	0x08000f51
 800077c:	08000f51 	.word	0x08000f51
 8000780:	08000f51 	.word	0x08000f51
 8000784:	08000f51 	.word	0x08000f51
 8000788:	08000f51 	.word	0x08000f51
 800078c:	08000f51 	.word	0x08000f51
 8000790:	08000f51 	.word	0x08000f51
 8000794:	08000f51 	.word	0x08000f51
 8000798:	08000f51 	.word	0x08000f51
 800079c:	08000f51 	.word	0x08000f51
 80007a0:	08000f51 	.word	0x08000f51
 80007a4:	08000f51 	.word	0x08000f51
 80007a8:	08000f51 	.word	0x08000f51
 80007ac:	08000f51 	.word	0x08000f51
 80007b0:	08000f51 	.word	0x08000f51
 80007b4:	08000f51 	.word	0x08000f51
 80007b8:	08000f51 	.word	0x08000f51
 80007bc:	08000f51 	.word	0x08000f51
 80007c0:	08000f51 	.word	0x08000f51
 80007c4:	08000f51 	.word	0x08000f51
 80007c8:	08000f51 	.word	0x08000f51
 80007cc:	08000f51 	.word	0x08000f51
 80007d0:	08000f51 	.word	0x08000f51
 80007d4:	08000f51 	.word	0x08000f51
 80007d8:	08000f51 	.word	0x08000f51
 80007dc:	08000f51 	.word	0x08000f51
 80007e0:	08000f51 	.word	0x08000f51
 80007e4:	08000f51 	.word	0x08000f51
 80007e8:	08000f51 	.word	0x08000f51
 80007ec:	08000f51 	.word	0x08000f51
 80007f0:	08000f51 	.word	0x08000f51
 80007f4:	08000f51 	.word	0x08000f51
 80007f8:	08000f51 	.word	0x08000f51
 80007fc:	08000f51 	.word	0x08000f51
 8000800:	08000f51 	.word	0x08000f51
 8000804:	08000f51 	.word	0x08000f51
 8000808:	08000f51 	.word	0x08000f51
 800080c:	08000f51 	.word	0x08000f51
 8000810:	08000f51 	.word	0x08000f51
 8000814:	08000f51 	.word	0x08000f51
 8000818:	08000f51 	.word	0x08000f51
 800081c:	08000f51 	.word	0x08000f51
 8000820:	08000f51 	.word	0x08000f51
 8000824:	08000f51 	.word	0x08000f51
 8000828:	08000f51 	.word	0x08000f51
 800082c:	08000f51 	.word	0x08000f51
 8000830:	08000f51 	.word	0x08000f51
 8000834:	08000f51 	.word	0x08000f51
 8000838:	08000f51 	.word	0x08000f51
 800083c:	08000f51 	.word	0x08000f51
 8000840:	08000f51 	.word	0x08000f51
 8000844:	08000f51 	.word	0x08000f51
 8000848:	08000f51 	.word	0x08000f51
 800084c:	08000f51 	.word	0x08000f51
 8000850:	08000f51 	.word	0x08000f51
 8000854:	08000f51 	.word	0x08000f51
 8000858:	08000f51 	.word	0x08000f51
 800085c:	08000f51 	.word	0x08000f51
 8000860:	08000f51 	.word	0x08000f51
 8000864:	08000f51 	.word	0x08000f51
 8000868:	08000f51 	.word	0x08000f51
 800086c:	08000f51 	.word	0x08000f51
 8000870:	08000f51 	.word	0x08000f51
 8000874:	08000f51 	.word	0x08000f51
 8000878:	08000f51 	.word	0x08000f51
 800087c:	08000f51 	.word	0x08000f51
 8000880:	08000f51 	.word	0x08000f51
 8000884:	08000f51 	.word	0x08000f51
 8000888:	08000f51 	.word	0x08000f51
 800088c:	08000f51 	.word	0x08000f51
 8000890:	08000f51 	.word	0x08000f51
 8000894:	08000f51 	.word	0x08000f51
 8000898:	08000f51 	.word	0x08000f51
 800089c:	08000f51 	.word	0x08000f51
 80008a0:	08000f51 	.word	0x08000f51
 80008a4:	08000f51 	.word	0x08000f51
 80008a8:	08000f51 	.word	0x08000f51
 80008ac:	08000f51 	.word	0x08000f51
 80008b0:	08000f51 	.word	0x08000f51
 80008b4:	08000f51 	.word	0x08000f51
 80008b8:	08000f51 	.word	0x08000f51
 80008bc:	08000f51 	.word	0x08000f51
 80008c0:	08000f51 	.word	0x08000f51
 80008c4:	08000f51 	.word	0x08000f51
 80008c8:	08000f51 	.word	0x08000f51
 80008cc:	08000f51 	.word	0x08000f51
 80008d0:	08000f51 	.word	0x08000f51
 80008d4:	08000f51 	.word	0x08000f51
 80008d8:	08000f51 	.word	0x08000f51
 80008dc:	08000f51 	.word	0x08000f51
 80008e0:	08000f51 	.word	0x08000f51
 80008e4:	08000f51 	.word	0x08000f51
 80008e8:	08000f51 	.word	0x08000f51
 80008ec:	08000f51 	.word	0x08000f51
 80008f0:	08000f51 	.word	0x08000f51
 80008f4:	08000f51 	.word	0x08000f51
 80008f8:	08000f51 	.word	0x08000f51
 80008fc:	08000f51 	.word	0x08000f51
 8000900:	08000f51 	.word	0x08000f51
 8000904:	08000f51 	.word	0x08000f51
 8000908:	08000f51 	.word	0x08000f51
 800090c:	08000f51 	.word	0x08000f51
 8000910:	08000f51 	.word	0x08000f51
 8000914:	08000f51 	.word	0x08000f51
 8000918:	08000f51 	.word	0x08000f51
 800091c:	08000f51 	.word	0x08000f51
 8000920:	08000f51 	.word	0x08000f51
 8000924:	08000f51 	.word	0x08000f51
 8000928:	08000f51 	.word	0x08000f51
 800092c:	08000f51 	.word	0x08000f51
 8000930:	08000f51 	.word	0x08000f51
 8000934:	08000f51 	.word	0x08000f51
 8000938:	08000f51 	.word	0x08000f51
 800093c:	08000f51 	.word	0x08000f51
 8000940:	08000f51 	.word	0x08000f51
 8000944:	08000f51 	.word	0x08000f51
 8000948:	08000f51 	.word	0x08000f51
 800094c:	08000f51 	.word	0x08000f51
 8000950:	08000f51 	.word	0x08000f51
 8000954:	08000f51 	.word	0x08000f51
 8000958:	08000f51 	.word	0x08000f51
 800095c:	08000f51 	.word	0x08000f51
 8000960:	08000f51 	.word	0x08000f51
 8000964:	08000f51 	.word	0x08000f51
 8000968:	08000f51 	.word	0x08000f51
 800096c:	08000f45 	.word	0x08000f45
 8000970:	08000f51 	.word	0x08000f51
 8000974:	08000f51 	.word	0x08000f51
 8000978:	08000f51 	.word	0x08000f51
 800097c:	08000f51 	.word	0x08000f51
 8000980:	08000f51 	.word	0x08000f51
 8000984:	08000f51 	.word	0x08000f51
 8000988:	08000f51 	.word	0x08000f51
 800098c:	08000f51 	.word	0x08000f51
 8000990:	08000f51 	.word	0x08000f51
 8000994:	08000f51 	.word	0x08000f51
 8000998:	08000f51 	.word	0x08000f51
 800099c:	08000f51 	.word	0x08000f51
 80009a0:	08000f51 	.word	0x08000f51
 80009a4:	08000f51 	.word	0x08000f51
 80009a8:	08000f51 	.word	0x08000f51
 80009ac:	08000f4b 	.word	0x08000f4b
 80009b0:	08000f51 	.word	0x08000f51
 80009b4:	08000f51 	.word	0x08000f51
 80009b8:	08000f51 	.word	0x08000f51
 80009bc:	08000f51 	.word	0x08000f51
 80009c0:	08000f51 	.word	0x08000f51
 80009c4:	08000f51 	.word	0x08000f51
 80009c8:	08000f51 	.word	0x08000f51
 80009cc:	08000f51 	.word	0x08000f51
 80009d0:	08000f51 	.word	0x08000f51
 80009d4:	08000f51 	.word	0x08000f51
 80009d8:	08000f51 	.word	0x08000f51
 80009dc:	08000f51 	.word	0x08000f51
 80009e0:	08000f51 	.word	0x08000f51
 80009e4:	08000f51 	.word	0x08000f51
 80009e8:	08000f51 	.word	0x08000f51
 80009ec:	08000f51 	.word	0x08000f51
 80009f0:	08000f33 	.word	0x08000f33
 80009f4:	08000f51 	.word	0x08000f51
 80009f8:	08000f51 	.word	0x08000f51
 80009fc:	08000f51 	.word	0x08000f51
 8000a00:	08000f51 	.word	0x08000f51
 8000a04:	08000f51 	.word	0x08000f51
 8000a08:	08000f51 	.word	0x08000f51
 8000a0c:	08000f51 	.word	0x08000f51
 8000a10:	08000f51 	.word	0x08000f51
 8000a14:	08000f51 	.word	0x08000f51
 8000a18:	08000f51 	.word	0x08000f51
 8000a1c:	08000f51 	.word	0x08000f51
 8000a20:	08000f51 	.word	0x08000f51
 8000a24:	08000f51 	.word	0x08000f51
 8000a28:	08000f51 	.word	0x08000f51
 8000a2c:	08000f51 	.word	0x08000f51
 8000a30:	08000f21 	.word	0x08000f21
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f9e7 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fc2d 	bl	80092a0 <HAL_GPIO_WritePin>
		break;
 8000a46:	e28e      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f9dd 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fc23 	bl	80092a0 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e284      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
 8000a5c:	24000c68 	.word	0x24000c68
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017604 	.word	0x08017604
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	0801760c 	.word	0x0801760c
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48c1      	ldr	r0, [pc, #772]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a72:	f016 f9c9 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bc1      	ldr	r3, [pc, #772]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fc0f 	bl	80092a0 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbf      	ldr	r3, [pc, #764]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e26d      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48be      	ldr	r0, [pc, #760]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000a8c:	f016 f9bc 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bba      	ldr	r3, [pc, #744]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fc02 	bl	80092a0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb7      	ldr	r3, [pc, #732]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fbfc 	bl	80092a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb7      	ldr	r3, [pc, #732]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fbf5 	bl	80092a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb4      	ldr	r3, [pc, #720]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fbee 	bl	80092a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bb0      	ldr	r3, [pc, #704]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 fbe7 	bl	80092a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4bad      	ldr	r3, [pc, #692]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fbe1 	bl	80092a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4baa      	ldr	r3, [pc, #680]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fbdb 	bl	80092a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba7      	ldr	r3, [pc, #668]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fbd4 	bl	80092a0 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4ba1      	ldr	r3, [pc, #644]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba3      	ldr	r3, [pc, #652]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4ba2      	ldr	r3, [pc, #648]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4ba2      	ldr	r3, [pc, #648]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4ba0      	ldr	r3, [pc, #640]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9f      	ldr	r3, [pc, #636]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e21a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489e      	ldr	r0, [pc, #632]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b32:	f016 f969 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b94      	ldr	r3, [pc, #592]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fbae 	bl	80092a0 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b91      	ldr	r3, [pc, #580]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e20c      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4898      	ldr	r0, [pc, #608]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b4e:	f016 f95b 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8d      	ldr	r3, [pc, #564]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fba0 	bl	80092a0 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1fe      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	4892      	ldr	r0, [pc, #584]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000b6a:	f016 f94d 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fb93 	bl	80092a0 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b85      	ldr	r3, [pc, #532]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1f1      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488d      	ldr	r0, [pc, #564]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000b84:	f016 f940 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fb86 	bl	80092a0 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1e4      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4887      	ldr	r0, [pc, #540]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000b9e:	f016 f933 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b79      	ldr	r3, [pc, #484]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fb79 	bl	80092a0 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1d7      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	4882      	ldr	r0, [pc, #520]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000bb8:	f016 f926 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fb6c 	bl	80092a0 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b72      	ldr	r3, [pc, #456]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1ca      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	487c      	ldr	r0, [pc, #496]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000bd2:	f016 f919 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fb5e 	bl	80092a0 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1bc      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4876      	ldr	r0, [pc, #472]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000bee:	f016 f90b 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fb50 	bl	80092a0 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e1ae      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c0a:	f016 f8fd 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fb42 	bl	80092a0 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e1a0      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	486a      	ldr	r0, [pc, #424]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c26:	f016 f8ef 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fb34 	bl	80092a0 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e192      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4864      	ldr	r0, [pc, #400]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c42:	f016 f8e1 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fb26 	bl	80092a0 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e184      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485e      	ldr	r0, [pc, #376]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000c5e:	f016 f8d3 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fb18 	bl	80092a0 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e176      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4858      	ldr	r0, [pc, #352]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000c7a:	f016 f8c5 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fb0b 	bl	80092a0 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e169      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4853      	ldr	r0, [pc, #332]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000c94:	f016 f8b8 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 fafe 	bl	80092a0 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e15c      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484d      	ldr	r0, [pc, #308]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cae:	f016 f8ab 	bl	8016e08 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a4b      	ldr	r2, [pc, #300]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	484b      	ldr	r0, [pc, #300]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cbe:	f004 ff53 	bl	8005b68 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e150      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	484a      	ldr	r0, [pc, #296]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000cc6:	f016 f89f 	bl	8016e08 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4847      	ldr	r0, [pc, #284]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cce:	f005 f80b 	bl	8005ce8 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e148      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cd6:	f016 f897 	bl	8016e08 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4846      	ldr	r0, [pc, #280]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cde:	f00d fee3 	bl	800eaa8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f012 fb47 	bl	801337c <osEventFlagsSet>
		ERPA_ON = 1;
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
		break;
 8000cfa:	e134      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cfc:	4842      	ldr	r0, [pc, #264]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000cfe:	f016 f883 	bl	8016e08 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000d02:	210c      	movs	r1, #12
 8000d04:	483c      	ldr	r0, [pc, #240]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000d06:	f00e f829 	bl	800ed5c <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
		break;
 8000d10:	e129      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d12:	483e      	ldr	r0, [pc, #248]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d14:	f016 f878 	bl	8016e08 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	483d      	ldr	r0, [pc, #244]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d1c:	f00d fec4 	bl	800eaa8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f012 fb28 	bl	801337c <osEventFlagsSet>
		PMT_ON = 1;
 8000d2c:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	801a      	strh	r2, [r3, #0]
		break;
 8000d38:	e115      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d3a:	4838      	ldr	r0, [pc, #224]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d3c:	f016 f864 	bl	8016e08 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d44:	f00e f80a 	bl	800ed5c <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		break;
 8000d4e:	e10a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d50:	4833      	ldr	r0, [pc, #204]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d52:	f016 f859 	bl	8016e08 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4832      	ldr	r0, [pc, #200]	; (8000e24 <HAL_UART_RxCpltCallback+0x79c>)
 8000d5a:	f00d fea5 	bl	800eaa8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2104      	movs	r1, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f012 fb09 	bl	801337c <osEventFlagsSet>
		HK_ON = 1;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_UART_RxCpltCallback+0x7a0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <HAL_UART_RxCpltCallback+0x7a4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	801a      	strh	r2, [r3, #0]
		break;
 8000d76:	e0f6      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
 8000d78:	08017618 	.word	0x08017618
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	24000c1c 	.word	0x24000c1c
 8000d84:	08017624 	.word	0x08017624
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	24000c1d 	.word	0x24000c1d
 8000d90:	24000c1e 	.word	0x24000c1e
 8000d94:	24000c1f 	.word	0x24000c1f
 8000d98:	24000c20 	.word	0x24000c20
 8000d9c:	24000c21 	.word	0x24000c21
 8000da0:	24000c22 	.word	0x24000c22
 8000da4:	24000c23 	.word	0x24000c23
 8000da8:	24000c24 	.word	0x24000c24
 8000dac:	08017630 	.word	0x08017630
 8000db0:	0801763c 	.word	0x0801763c
 8000db4:	0801764c 	.word	0x0801764c
 8000db8:	08017658 	.word	0x08017658
 8000dbc:	08017664 	.word	0x08017664
 8000dc0:	08017670 	.word	0x08017670
 8000dc4:	08017680 	.word	0x08017680
 8000dc8:	0801768c 	.word	0x0801768c
 8000dcc:	08017698 	.word	0x08017698
 8000dd0:	080176a4 	.word	0x080176a4
 8000dd4:	080176b0 	.word	0x080176b0
 8000dd8:	080176c0 	.word	0x080176c0
 8000ddc:	080176d0 	.word	0x080176d0
 8000de0:	080176dc 	.word	0x080176dc
 8000de4:	080176ec 	.word	0x080176ec
 8000de8:	24000010 	.word	0x24000010
 8000dec:	240002f4 	.word	0x240002f4
 8000df0:	080176fc 	.word	0x080176fc
 8000df4:	0801770c 	.word	0x0801770c
 8000df8:	24000554 	.word	0x24000554
 8000dfc:	24000c64 	.word	0x24000c64
 8000e00:	24000c5f 	.word	0x24000c5f
 8000e04:	24000c58 	.word	0x24000c58
 8000e08:	08017714 	.word	0x08017714
 8000e0c:	08017720 	.word	0x08017720
 8000e10:	24000508 	.word	0x24000508
 8000e14:	24000c5e 	.word	0x24000c5e
 8000e18:	24000c54 	.word	0x24000c54
 8000e1c:	08017728 	.word	0x08017728
 8000e20:	08017730 	.word	0x08017730
 8000e24:	240005a0 	.word	0x240005a0
 8000e28:	24000c60 	.word	0x24000c60
 8000e2c:	24000c5c 	.word	0x24000c5c
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000e30:	484f      	ldr	r0, [pc, #316]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000e32:	f015 ffe9 	bl	8016e08 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	484e      	ldr	r0, [pc, #312]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000e3a:	f00d ff8f 	bl	800ed5c <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
		break;
 8000e44:	e08f      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e46:	484d      	ldr	r0, [pc, #308]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000e48:	f015 ffde 	bl	8016e08 <puts>
		if (step < 17) {
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b10      	cmp	r3, #16
 8000e52:	f200 8081 	bhi.w	8000f58 <HAL_UART_RxCpltCallback+0x8d0>
			step += 2;
 8000e56:	4b4a      	ldr	r3, [pc, #296]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e62:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	4845      	ldr	r0, [pc, #276]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000e74:	f004 ffdb 	bl	8005e2e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4843      	ldr	r0, [pc, #268]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000e7c:	f004 fe1c 	bl	8005ab8 <HAL_DAC_Start>
		}
		break;
 8000e80:	e06a      	b.n	8000f58 <HAL_UART_RxCpltCallback+0x8d0>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e82:	4842      	ldr	r0, [pc, #264]	; (8000f8c <HAL_UART_RxCpltCallback+0x904>)
 8000e84:	f015 ffc0 	bl	8016e08 <puts>
		if (step > 3) {
 8000e88:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d965      	bls.n	8000f5c <HAL_UART_RxCpltCallback+0x8d4>
			step -= 2;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3b02      	subs	r3, #2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e9a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e9c:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4836      	ldr	r0, [pc, #216]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000eae:	f004 ffbe 	bl	8005e2e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4834      	ldr	r0, [pc, #208]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000eb6:	f004 fdff 	bl	8005ab8 <HAL_DAC_Start>
		}
		break;
 8000eba:	e04f      	b.n	8000f5c <HAL_UART_RxCpltCallback+0x8d4>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ebc:	4834      	ldr	r0, [pc, #208]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000ebe:	f015 ffa3 	bl	8016e08 <puts>
		if (cadence <= 50000) {
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d848      	bhi.n	8000f60 <HAL_UART_RxCpltCallback+0x8d8>
			cadence *= 2;
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ed6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee2:	e03d      	b.n	8000f60 <HAL_UART_RxCpltCallback+0x8d8>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ee4:	482c      	ldr	r0, [pc, #176]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000ee6:	f015 ff8f 	bl	8016e08 <puts>
		if (cadence >= 6250) {
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d936      	bls.n	8000f64 <HAL_UART_RxCpltCallback+0x8dc>
			cadence /= 2;
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000efe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000f0a:	e02b      	b.n	8000f64 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000f0c:	4823      	ldr	r0, [pc, #140]	; (8000f9c <HAL_UART_RxCpltCallback+0x914>)
 8000f0e:	f015 ff7b 	bl	8016e08 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_UART_RxCpltCallback+0x918>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2116      	movs	r1, #22
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f012 fa2f 	bl	801337c <osEventFlagsSet>
		break;
 8000f1e:	e022      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000f22:	f015 ff71 	bl	8016e08 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_UART_RxCpltCallback+0x920>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f013 ffcc 	bl	8014ec8 <xTaskResumeFromISR>
		break;
 8000f30:	e019      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f32:	481e      	ldr	r0, [pc, #120]	; (8000fac <HAL_UART_RxCpltCallback+0x924>)
 8000f34:	f015 ff68 	bl	8016e08 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_UART_RxCpltCallback+0x928>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f013 ffc3 	bl	8014ec8 <xTaskResumeFromISR>
		break;
 8000f42:	e010      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xAF: {
		sync();
 8000f44:	f001 fa82 	bl	800244c <sync>
		break;
 8000f48:	e00d      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xBF: {
		enter_flight_mode();
 8000f4a:	f001 f8ed 	bl	8002128 <enter_flight_mode>
		break;
 8000f4e:	e00a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	default: {
		printf("Unknown Command\n");
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <HAL_UART_RxCpltCallback+0x92c>)
 8000f52:	f015 ff59 	bl	8016e08 <puts>
		break;
 8000f56:	e006      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f58:	bf00      	nop
 8000f5a:	e004      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f5c:	bf00      	nop
 8000f5e:	e002      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f60:	bf00      	nop
 8000f62:	e000      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f64:	bf00      	nop
	}
	}
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08017738 	.word	0x08017738
 8000f74:	240005a0 	.word	0x240005a0
 8000f78:	24000c60 	.word	0x24000c60
 8000f7c:	08017740 	.word	0x08017740
 8000f80:	2400000c 	.word	0x2400000c
 8000f84:	24000010 	.word	0x24000010
 8000f88:	240002f4 	.word	0x240002f4
 8000f8c:	08017748 	.word	0x08017748
 8000f90:	08017754 	.word	0x08017754
 8000f94:	24000008 	.word	0x24000008
 8000f98:	08017760 	.word	0x08017760
 8000f9c:	0801776c 	.word	0x0801776c
 8000fa0:	24000c64 	.word	0x24000c64
 8000fa4:	0801777c 	.word	0x0801777c
 8000fa8:	24000750 	.word	0x24000750
 8000fac:	08017788 	.word	0x08017788
 8000fb0:	240009b0 	.word	0x240009b0
 8000fb4:	08017794 	.word	0x08017794

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f002 ffe8 	bl	8003f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f8ac 	bl	800111c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fc4:	f000 f92a 	bl	800121c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc8:	f000 feec 	bl	8001da4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fcc:	f000 feb2 	bl	8001d34 <MX_DMA_Init>
  MX_TIM3_Init();
 8000fd0:	f000 fdac 	bl	8001b2c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fd4:	f000 fe46 	bl	8001c64 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fd8:	f000 fb36 	bl	8001648 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fdc:	f000 fc2c 	bl	8001838 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fe0:	f000 fd2e 	bl	8001a40 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fe4:	f000 fc80 	bl	80018e8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fe8:	f000 fa6a 	bl	80014c0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fec:	f000 f946 	bl	800127c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ff0:	f000 faf8 	bl	80015e4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000ff4:	f000 fbc8 	bl	8001788 <MX_SPI1_Init>
  MX_RTC_Init();
 8000ff8:	f000 fb68 	bl	80016cc <MX_RTC_Init>
  MX_TIM4_Init();
 8000ffc:	f000 fde4 	bl	8001bc8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001000:	f012 f844 	bl	801308c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8001004:	2200      	movs	r2, #0
 8001006:	2108      	movs	r1, #8
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	f012 fab4 	bl	8013576 <osMessageQueueNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <main+0xf8>)
 8001012:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <main+0xfc>)
 8001016:	2100      	movs	r1, #0
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0x100>)
 800101a:	f012 f881 	bl	8013120 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a26      	ldr	r2, [pc, #152]	; (80010bc <main+0x104>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <main+0x108>)
 8001026:	2100      	movs	r1, #0
 8001028:	4826      	ldr	r0, [pc, #152]	; (80010c4 <main+0x10c>)
 800102a:	f012 f879 	bl	8013120 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <main+0x110>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001034:	4a25      	ldr	r2, [pc, #148]	; (80010cc <main+0x114>)
 8001036:	2100      	movs	r1, #0
 8001038:	4825      	ldr	r0, [pc, #148]	; (80010d0 <main+0x118>)
 800103a:	f012 f871 	bl	8013120 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <main+0x11c>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8001044:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <main+0x120>)
 8001046:	2100      	movs	r1, #0
 8001048:	4824      	ldr	r0, [pc, #144]	; (80010dc <main+0x124>)
 800104a:	f012 f869 	bl	8013120 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <main+0x128>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8001054:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <main+0x12c>)
 8001056:	2100      	movs	r1, #0
 8001058:	4823      	ldr	r0, [pc, #140]	; (80010e8 <main+0x130>)
 800105a:	f012 f861 	bl	8013120 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <main+0x134>)
 8001062:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <main+0x138>)
 8001066:	2100      	movs	r1, #0
 8001068:	4822      	ldr	r0, [pc, #136]	; (80010f4 <main+0x13c>)
 800106a:	f012 f859 	bl	8013120 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <main+0x140>)
 8001072:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <main+0x144>)
 8001076:	2100      	movs	r1, #0
 8001078:	4821      	ldr	r0, [pc, #132]	; (8001100 <main+0x148>)
 800107a:	f012 f851 	bl	8013120 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a20      	ldr	r2, [pc, #128]	; (8001104 <main+0x14c>)
 8001082:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <main+0x150>)
 8001086:	2100      	movs	r1, #0
 8001088:	4820      	ldr	r0, [pc, #128]	; (800110c <main+0x154>)
 800108a:	f012 f849 	bl	8013120 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <main+0x158>)
 8001092:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001094:	2000      	movs	r0, #0
 8001096:	f012 f931 	bl	80132fc <osEventFlagsNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <main+0x15c>)
 800109e:	6013      	str	r3, [r2, #0]
	system_setup();
 80010a0:	f001 fa3e 	bl	8002520 <system_setup>
	printf("Starting kernal...\n");
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <main+0x160>)
 80010a6:	f015 feaf 	bl	8016e08 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010aa:	f012 f813 	bl	80130d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010ae:	e7fe      	b.n	80010ae <main+0xf6>
 80010b0:	24000c48 	.word	0x24000c48
 80010b4:	080177f0 	.word	0x080177f0
 80010b8:	08002ce5 	.word	0x08002ce5
 80010bc:	24000744 	.word	0x24000744
 80010c0:	08017814 	.word	0x08017814
 80010c4:	08002d29 	.word	0x08002d29
 80010c8:	24000748 	.word	0x24000748
 80010cc:	08017838 	.word	0x08017838
 80010d0:	08002d69 	.word	0x08002d69
 80010d4:	2400074c 	.word	0x2400074c
 80010d8:	0801785c 	.word	0x0801785c
 80010dc:	08002dad 	.word	0x08002dad
 80010e0:	24000750 	.word	0x24000750
 80010e4:	08017880 	.word	0x08017880
 80010e8:	08002e55 	.word	0x08002e55
 80010ec:	240009b0 	.word	0x240009b0
 80010f0:	080178a4 	.word	0x080178a4
 80010f4:	08002efd 	.word	0x08002efd
 80010f8:	24000c10 	.word	0x24000c10
 80010fc:	080178c8 	.word	0x080178c8
 8001100:	08002fb5 	.word	0x08002fb5
 8001104:	24000c14 	.word	0x24000c14
 8001108:	080178ec 	.word	0x080178ec
 800110c:	080030ad 	.word	0x080030ad
 8001110:	24000c18 	.word	0x24000c18
 8001114:	24000c64 	.word	0x24000c64
 8001118:	080177a4 	.word	0x080177a4

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	; 0x70
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	224c      	movs	r2, #76	; 0x4c
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f015 fd16 	bl	8016b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2220      	movs	r2, #32
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f015 fd10 	bl	8016b5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800113c:	2002      	movs	r0, #2
 800113e:	f008 ff11 	bl	8009f64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <SystemClock_Config+0xf8>)
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <SystemClock_Config+0xf8>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <SystemClock_Config+0xf8>)
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <SystemClock_Config+0xfc>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001164:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <SystemClock_Config+0xfc>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <SystemClock_Config+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001178:	bf00      	nop
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <SystemClock_Config+0xfc>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001186:	d1f8      	bne.n	800117a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001188:	2303      	movs	r3, #3
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001192:	2309      	movs	r3, #9
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	2302      	movs	r3, #2
 80011a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011a6:	2320      	movs	r3, #32
 80011a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011ae:	2304      	movs	r3, #4
 80011b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011b6:	2308      	movs	r3, #8
 80011b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 ff06 	bl	8009fd8 <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011d2:	f001 ff9b 	bl	800310c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	233f      	movs	r3, #63	; 0x3f
 80011d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2303      	movs	r3, #3
 80011dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 fb46 	bl	800a88c <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001206:	f001 ff81 	bl	800310c <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3770      	adds	r7, #112	; 0x70
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	58000400 	.word	0x58000400
 8001218:	58024800 	.word	0x58024800

0800121c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0b0      	sub	sp, #192	; 0xc0
 8001220:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	22c0      	movs	r2, #192	; 0xc0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f015 fc97 	bl	8016b5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800123e:	2320      	movs	r3, #32
 8001240:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001242:	2308      	movs	r3, #8
 8001244:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001246:	2304      	movs	r3, #4
 8001248:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4618      	mov	r0, r3
 8001264:	f009 fee0 	bl	800b028 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800126e:	f001 ff4d 	bl	800310c <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	37c0      	adds	r7, #192	; 0xc0
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <MX_ADC1_Init+0x210>)
 80012a2:	4a7b      	ldr	r2, [pc, #492]	; (8001490 <MX_ADC1_Init+0x214>)
 80012a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <MX_ADC1_Init+0x210>)
 80012a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <MX_ADC1_Init+0x210>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <MX_ADC1_Init+0x210>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <MX_ADC1_Init+0x210>)
 80012bc:	2204      	movs	r2, #4
 80012be:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c0:	4b72      	ldr	r3, [pc, #456]	; (800148c <MX_ADC1_Init+0x210>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <MX_ADC1_Init+0x210>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012cc:	4b6f      	ldr	r3, [pc, #444]	; (800148c <MX_ADC1_Init+0x210>)
 80012ce:	220b      	movs	r2, #11
 80012d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b6e      	ldr	r3, [pc, #440]	; (800148c <MX_ADC1_Init+0x210>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <MX_ADC1_Init+0x210>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <MX_ADC1_Init+0x210>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <MX_ADC1_Init+0x210>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <MX_ADC1_Init+0x210>)
 80012ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012f2:	4b66      	ldr	r3, [pc, #408]	; (800148c <MX_ADC1_Init+0x210>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012f8:	4b64      	ldr	r3, [pc, #400]	; (800148c <MX_ADC1_Init+0x210>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001300:	4862      	ldr	r0, [pc, #392]	; (800148c <MX_ADC1_Init+0x210>)
 8001302:	f003 f8d1 	bl	80044a8 <HAL_ADC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800130c:	f001 fefe 	bl	800310c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	485c      	ldr	r0, [pc, #368]	; (800148c <MX_ADC1_Init+0x210>)
 800131c:	f004 f9ec 	bl	80056f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001326:	f001 fef1 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <MX_ADC1_Init+0x218>)
 800132c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132e:	2306      	movs	r3, #6
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001332:	2307      	movs	r3, #7
 8001334:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001336:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800133a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800133c:	2304      	movs	r3, #4
 800133e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	484f      	ldr	r0, [pc, #316]	; (800148c <MX_ADC1_Init+0x210>)
 800134e:	f003 fb2f 	bl	80049b0 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001358:	f001 fed8 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <MX_ADC1_Init+0x21c>)
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001360:	230c      	movs	r3, #12
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4848      	ldr	r0, [pc, #288]	; (800148c <MX_ADC1_Init+0x210>)
 800136a:	f003 fb21 	bl	80049b0 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001374:	f001 feca 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <MX_ADC1_Init+0x220>)
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800137c:	2312      	movs	r3, #18
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4841      	ldr	r0, [pc, #260]	; (800148c <MX_ADC1_Init+0x210>)
 8001386:	f003 fb13 	bl	80049b0 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001390:	f001 febc 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001394:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <MX_ADC1_Init+0x224>)
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001398:	2318      	movs	r3, #24
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	483a      	ldr	r0, [pc, #232]	; (800148c <MX_ADC1_Init+0x210>)
 80013a2:	f003 fb05 	bl	80049b0 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013ac:	f001 feae 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_ADC1_Init+0x228>)
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4833      	ldr	r0, [pc, #204]	; (800148c <MX_ADC1_Init+0x210>)
 80013c0:	f003 faf6 	bl	80049b0 <HAL_ADC_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013ca:	f001 fe9f 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <MX_ADC1_Init+0x22c>)
 80013d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013d2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	482b      	ldr	r0, [pc, #172]	; (800148c <MX_ADC1_Init+0x210>)
 80013de:	f003 fae7 	bl	80049b0 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013e8:	f001 fe90 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <MX_ADC1_Init+0x230>)
 80013ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013f0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4824      	ldr	r0, [pc, #144]	; (800148c <MX_ADC1_Init+0x210>)
 80013fc:	f003 fad8 	bl	80049b0 <HAL_ADC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001406:	f001 fe81 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <MX_ADC1_Init+0x234>)
 800140c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800140e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <MX_ADC1_Init+0x210>)
 800141a:	f003 fac9 	bl	80049b0 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001424:	f001 fe72 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_ADC1_Init+0x238>)
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800142c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001430:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <MX_ADC1_Init+0x210>)
 8001438:	f003 faba 	bl	80049b0 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001442:	f001 fe63 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_ADC1_Init+0x23c>)
 8001448:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800144a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_ADC1_Init+0x210>)
 8001456:	f003 faab 	bl	80049b0 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001460:	f001 fe54 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_ADC1_Init+0x240>)
 8001466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001468:	f240 2306 	movw	r3, #518	; 0x206
 800146c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_ADC1_Init+0x210>)
 8001474:	f003 fa9c 	bl	80049b0 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800147e:	f001 fe45 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2400013c 	.word	0x2400013c
 8001490:	40022000 	.word	0x40022000
 8001494:	0c900008 	.word	0x0c900008
 8001498:	10c00010 	.word	0x10c00010
 800149c:	14f00020 	.word	0x14f00020
 80014a0:	1d500080 	.word	0x1d500080
 80014a4:	21800100 	.word	0x21800100
 80014a8:	25b00200 	.word	0x25b00200
 80014ac:	2a000400 	.word	0x2a000400
 80014b0:	2e300800 	.word	0x2e300800
 80014b4:	3ac04000 	.word	0x3ac04000
 80014b8:	3ef08000 	.word	0x3ef08000
 80014bc:	47520000 	.word	0x47520000

080014c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014da:	4a3e      	ldr	r2, [pc, #248]	; (80015d4 <MX_ADC3_Init+0x114>)
 80014dc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014e0:	2208      	movs	r2, #8
 80014e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014fe:	2204      	movs	r2, #4
 8001500:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001504:	2200      	movs	r2, #0
 8001506:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_ADC3_Init+0x110>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001516:	2203      	movs	r2, #3
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_ADC3_Init+0x110>)
 800151c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC3_Init+0x110>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001532:	f002 ffb9 	bl	80044a8 <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800153c:	f001 fde6 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_ADC3_Init+0x118>)
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001544:	2306      	movs	r3, #6
 8001546:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001548:	2307      	movs	r3, #7
 800154a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001550:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001552:	2304      	movs	r3, #4
 8001554:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	481b      	ldr	r0, [pc, #108]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001564:	f003 fa24 	bl	80049b0 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800156e:	f001 fdcd 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_ADC3_Init+0x11c>)
 8001574:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001576:	230c      	movs	r3, #12
 8001578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4814      	ldr	r0, [pc, #80]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001580:	f003 fa16 	bl	80049b0 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800158a:	f001 fdbf 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800158e:	2301      	movs	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001592:	2312      	movs	r3, #18
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC3_Init+0x110>)
 800159c:	f003 fa08 	bl	80049b0 <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015a6:	f001 fdb1 	bl	800310c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_ADC3_Init+0x120>)
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015ae:	2318      	movs	r3, #24
 80015b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC3_Init+0x110>)
 80015b8:	f003 f9fa 	bl	80049b0 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80015c2:	f001 fda3 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	240001a0 	.word	0x240001a0
 80015d4:	58026000 	.word	0x58026000
 80015d8:	cb840000 	.word	0xcb840000
 80015dc:	cfb80000 	.word	0xcfb80000
 80015e0:	04300002 	.word	0x04300002

080015e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2224      	movs	r2, #36	; 0x24
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f015 fab3 	bl	8016b5c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_DAC1_Init+0x60>)
 80015fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015fe:	f004 fa39 	bl	8005a74 <HAL_DAC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001608:	f001 fd80 	bl	800310c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001610:	230a      	movs	r3, #10
 8001612:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_DAC1_Init+0x5c>)
 8001628:	f004 fc54 	bl	8005ed4 <HAL_DAC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001632:	f001 fd6b 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	240002f4 	.word	0x240002f4
 8001644:	40007400 	.word	0x40007400

08001648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_I2C1_Init+0x78>)
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <MX_I2C1_Init+0x7c>)
 8001650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <MX_I2C1_Init+0x80>)
 8001656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_I2C1_Init+0x78>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001660:	2201      	movs	r2, #1
 8001662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_I2C1_Init+0x78>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_I2C1_Init+0x78>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001684:	f007 fe26 	bl	80092d4 <HAL_I2C_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800168e:	f001 fd3d 	bl	800310c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001692:	2100      	movs	r1, #0
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001696:	f008 fb6d 	bl	8009d74 <HAL_I2CEx_ConfigAnalogFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a0:	f001 fd34 	bl	800310c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a4:	2100      	movs	r1, #0
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_I2C1_Init+0x78>)
 80016a8:	f008 fbaf 	bl	8009e0a <HAL_I2CEx_ConfigDigitalFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f001 fd2b 	bl	800310c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f008 fbf4 	bl	8009ea4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	24000380 	.word	0x24000380
 80016c4:	40005400 	.word	0x40005400
 80016c8:	0020081f 	.word	0x0020081f

080016cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016e0:	2300      	movs	r3, #0
 80016e2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_RTC_Init+0xb4>)
 80016e6:	4a27      	ldr	r2, [pc, #156]	; (8001784 <MX_RTC_Init+0xb8>)
 80016e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <MX_RTC_Init+0xb4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_RTC_Init+0xb4>)
 80016f2:	2263      	movs	r2, #99	; 0x63
 80016f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_RTC_Init+0xb4>)
 80016f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_RTC_Init+0xb4>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_RTC_Init+0xb4>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_RTC_Init+0xb4>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_RTC_Init+0xb4>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001716:	481a      	ldr	r0, [pc, #104]	; (8001780 <MX_RTC_Init+0xb4>)
 8001718:	f00c f984 	bl	800da24 <HAL_RTC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001722:	f001 fcf3 	bl	800310c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001726:	2300      	movs	r3, #0
 8001728:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800172a:	2300      	movs	r3, #0
 800172c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800172e:	2300      	movs	r3, #0
 8001730:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <MX_RTC_Init+0xb4>)
 8001742:	f00c f9f1 	bl	800db28 <HAL_RTC_SetTime>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800174c:	f001 fcde 	bl	800310c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001750:	2301      	movs	r3, #1
 8001752:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001754:	2301      	movs	r3, #1
 8001756:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001758:	2301      	movs	r3, #1
 800175a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800175c:	2300      	movs	r3, #0
 800175e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	2201      	movs	r2, #1
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_RTC_Init+0xb4>)
 8001768:	f00c fad8 	bl	800dd1c <HAL_RTC_SetDate>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001772:	f001 fccb 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	240003d4 	.word	0x240003d4
 8001784:	58004000 	.word	0x58004000

08001788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <MX_SPI1_Init+0xa8>)
 800178e:	4a29      	ldr	r2, [pc, #164]	; (8001834 <MX_SPI1_Init+0xac>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001794:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <MX_SPI1_Init+0xa8>)
 800179c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017a4:	220f      	movs	r2, #15
 80017a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017be:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_SPI1_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001816:	2200      	movs	r2, #0
 8001818:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_SPI1_Init+0xa8>)
 800181c:	f00c fc24 	bl	800e068 <HAL_SPI_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001826:	f001 fc71 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240003f8 	.word	0x240003f8
 8001834:	40013000 	.word	0x40013000

08001838 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <MX_SPI2_Init+0xac>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001844:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001848:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800184c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001850:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001854:	220f      	movs	r2, #15
 8001856:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001866:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800186a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800186e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001872:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001888:	2200      	movs	r2, #0
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800188e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800189c:	2200      	movs	r2, #0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018cc:	f00c fbcc 	bl	800e068 <HAL_SPI_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018d6:	f001 fc19 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	24000480 	.word	0x24000480
 80018e4:	40003800 	.word	0x40003800

080018e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b09a      	sub	sp, #104	; 0x68
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	222c      	movs	r2, #44	; 0x2c
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f015 f91a 	bl	8016b5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001928:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <MX_TIM1_Init+0x150>)
 800192a:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <MX_TIM1_Init+0x154>)
 800192c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001930:	2231      	movs	r2, #49	; 0x31
 8001932:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_TIM1_Init+0x150>)
 800193c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001940:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <MX_TIM1_Init+0x150>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001954:	4838      	ldr	r0, [pc, #224]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001956:	f00c ffd8 	bl	800e90a <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001960:	f001 fbd4 	bl	800310c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800196a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800196e:	4619      	mov	r1, r3
 8001970:	4831      	ldr	r0, [pc, #196]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001972:	f00d fd53 	bl	800f41c <HAL_TIM_ConfigClockSource>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800197c:	f001 fbc6 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001980:	482d      	ldr	r0, [pc, #180]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001982:	f00d facf 	bl	800ef24 <HAL_TIM_PWM_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800198c:	f001 fbbe 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800199c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019a0:	4619      	mov	r1, r3
 80019a2:	4825      	ldr	r0, [pc, #148]	; (8001a38 <MX_TIM1_Init+0x150>)
 80019a4:	f00e fa90 	bl	800fec8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019ae:	f001 fbad 	bl	800310c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b2:	2360      	movs	r3, #96	; 0x60
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM1_Init+0x150>)
 80019d8:	f00d fc0c 	bl	800f1f4 <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019e2:	f001 fb93 	bl	800310c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001a1c:	f00e fae2 	bl	800ffe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001a26:	f001 fb71 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001a2c:	f001 ff1e 	bl	800386c <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3768      	adds	r7, #104	; 0x68
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000508 	.word	0x24000508
 8001a3c:	40010000 	.word	0x40010000

08001a40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a60:	463b      	mov	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a7c:	2231      	movs	r2, #49	; 0x31
 8001a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a88:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a9c:	f00c ff35 	bl	800e90a <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001aa6:	f001 fb31 	bl	800310c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481c      	ldr	r0, [pc, #112]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ab8:	f00d fcb0 	bl	800f41c <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ac2:	f001 fb23 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ac6:	4818      	ldr	r0, [pc, #96]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ac8:	f00d fa2c 	bl	800ef24 <HAL_TIM_PWM_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ad2:	f001 fb1b 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ae6:	f00e f9ef 	bl	800fec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001af0:	f001 fb0c 	bl	800310c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af4:	2360      	movs	r3, #96	; 0x60
 8001af6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	220c      	movs	r2, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001b0c:	f00d fb72 	bl	800f1f4 <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b16:	f001 faf9 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001b1c:	f001 fea6 	bl	800386c <HAL_TIM_MspPostInit>

}
 8001b20:	bf00      	nop
 8001b22:	3738      	adds	r7, #56	; 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	24000554 	.word	0x24000554

08001b2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b52:	2209      	movs	r2, #9
 8001b54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b5e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b70:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b72:	f00c feca 	bl	800e90a <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b7c:	f001 fac6 	bl	800310c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001b8e:	f00d fc45 	bl	800f41c <HAL_TIM_ConfigClockSource>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b98:	f001 fab8 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_TIM3_Init+0x94>)
 8001baa:	f00e f98d 	bl	800fec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bb4:	f001 faaa 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	240005a0 	.word	0x240005a0
 8001bc4:	40000400 	.word	0x40000400

08001bc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001be8:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <MX_TIM4_Init+0x98>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001bee:	2209      	movs	r2, #9
 8001bf0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001bfa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bfe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c0c:	4813      	ldr	r0, [pc, #76]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c0e:	f00c fe7c 	bl	800e90a <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001c18:	f001 fa78 	bl	800310c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4619      	mov	r1, r3
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c2a:	f00d fbf7 	bl	800f41c <HAL_TIM_ConfigClockSource>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c34:	f001 fa6a 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c46:	f00e f93f 	bl	800fec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c50:	f001 fa5c 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	3720      	adds	r7, #32
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	240005ec 	.word	0x240005ec
 8001c60:	40000800 	.word	0x40000800

08001c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c6a:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <MX_USART1_UART_Init+0xcc>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c70:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cac:	481f      	ldr	r0, [pc, #124]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001cae:	f00e fa35 	bl	801011c <HAL_UART_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cb8:	f001 fa28 	bl	800310c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	481b      	ldr	r0, [pc, #108]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001cc0:	f011 f8d5 	bl	8012e6e <HAL_UARTEx_SetTxFifoThreshold>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cca:	f001 fa1f 	bl	800310c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4816      	ldr	r0, [pc, #88]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001cd2:	f011 f90a 	bl	8012eea <HAL_UARTEx_SetRxFifoThreshold>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cdc:	f001 fa16 	bl	800310c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001ce2:	f011 f88b 	bl	8012dfc <HAL_UARTEx_DisableFifoMode>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cec:	f001 fa0e 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001cf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001cf6:	f011 f8f8 	bl	8012eea <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cfa:	480c      	ldr	r0, [pc, #48]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001cfc:	f011 f843 	bl	8012d86 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001d00:	480a      	ldr	r0, [pc, #40]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001d02:	f011 f80d 	bl	8012d20 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d14:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <MX_USART1_UART_Init+0xc8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d24:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	24000638 	.word	0x24000638
 8001d30:	40011000 	.word	0x40011000

08001d34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <MX_DMA_Init+0x6c>)
 8001d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d40:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <MX_DMA_Init+0x6c>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_DMA_Init+0x6c>)
 8001d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2105      	movs	r1, #5
 8001d5c:	200b      	movs	r0, #11
 8001d5e:	f003 fe61 	bl	8005a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d62:	200b      	movs	r0, #11
 8001d64:	f003 fe78 	bl	8005a58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2105      	movs	r1, #5
 8001d6c:	200c      	movs	r0, #12
 8001d6e:	f003 fe59 	bl	8005a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d72:	200c      	movs	r0, #12
 8001d74:	f003 fe70 	bl	8005a58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2105      	movs	r1, #5
 8001d7c:	200d      	movs	r0, #13
 8001d7e:	f003 fe51 	bl	8005a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d82:	200d      	movs	r0, #13
 8001d84:	f003 fe68 	bl	8005a58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2105      	movs	r1, #5
 8001d8c:	2010      	movs	r0, #16
 8001d8e:	f003 fe49 	bl	8005a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d92:	2010      	movs	r0, #16
 8001d94:	f003 fe60 	bl	8005a58 <HAL_NVIC_EnableIRQ>

}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58024400 	.word	0x58024400

08001da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc0:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dde:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de8:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <MX_GPIO_Init+0xe8>)
 8001e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e38:	4815      	ldr	r0, [pc, #84]	; (8001e90 <MX_GPIO_Init+0xec>)
 8001e3a:	f007 fa31 	bl	80092a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2164      	movs	r1, #100	; 0x64
 8001e42:	4814      	ldr	r0, [pc, #80]	; (8001e94 <MX_GPIO_Init+0xf0>)
 8001e44:	f007 fa2c 	bl	80092a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e48:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e4c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480b      	ldr	r0, [pc, #44]	; (8001e90 <MX_GPIO_Init+0xec>)
 8001e62:	f007 f855 	bl	8008f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e66:	2364      	movs	r3, #100	; 0x64
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_GPIO_Init+0xf0>)
 8001e7e:	f007 f847 	bl	8008f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58020800 	.word	0x58020800
 8001e94:	58020400 	.word	0x58020400

08001e98 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	b299      	uxth	r1, r3
 8001eaa:	f107 0208 	add.w	r2, r7, #8
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	4817      	ldr	r0, [pc, #92]	; (8001f14 <poll_i2c_sensor+0x7c>)
 8001eb8:	f007 faa8 	bl	800940c <HAL_I2C_Master_Transmit>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001ec6:	4814      	ldr	r0, [pc, #80]	; (8001f18 <poll_i2c_sensor+0x80>)
 8001ec8:	f014 ff9e 	bl	8016e08 <puts>
 8001ecc:	e01c      	b.n	8001f08 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	f107 0208 	add.w	r2, r7, #8
 8001ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2302      	movs	r3, #2
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <poll_i2c_sensor+0x7c>)
 8001ee0:	f007 fbac 	bl	800963c <HAL_I2C_Master_Receive>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001ee8:	7b7b      	ldrb	r3, [r7, #13]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001eee:	480b      	ldr	r0, [pc, #44]	; (8001f1c <poll_i2c_sensor+0x84>)
 8001ef0:	f014 ff8a 	bl	8016e08 <puts>
 8001ef4:	e008      	b.n	8001f08 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001ef6:	7a3b      	ldrb	r3, [r7, #8]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001efc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f00:	7a7a      	ldrb	r2, [r7, #9]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	10db      	asrs	r3, r3, #3
 8001f06:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001f08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	24000380 	.word	0x24000380
 8001f18:	080177b8 	.word	0x080177b8
 8001f1c:	080177c8 	.word	0x080177c8

08001f20 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001f28:	f107 010c 	add.w	r1, r7, #12
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	2201      	movs	r2, #1
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <receive_pmt_spi+0x44>)
 8001f32:	f00c f9bd 	bl	800e2b0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f3a:	7b7b      	ldrb	r3, [r7, #13]
 8001f3c:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <receive_pmt_spi+0x44>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <receive_pmt_spi+0x44>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f4c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7bba      	ldrb	r2, [r7, #14]
 8001f52:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3301      	adds	r3, #1
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	701a      	strb	r2, [r3, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	240003f8 	.word	0x240003f8

08001f68 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f70:	f107 010c 	add.w	r1, r7, #12
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	2201      	movs	r2, #1
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <receive_erpa_spi+0x44>)
 8001f7a:	f00c f999 	bl	800e2b0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f82:	7b7b      	ldrb	r3, [r7, #13]
 8001f84:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <receive_erpa_spi+0x44>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <receive_erpa_spi+0x44>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f94:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7bba      	ldrb	r2, [r7, #14]
 8001f9a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	701a      	strb	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	24000480 	.word	0x24000480

08001fb0 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <receive_erpa_adc+0x20>)
 8001fba:	885b      	ldrh	r3, [r3, #2]
 8001fbc:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	89fa      	ldrh	r2, [r7, #14]
 8001fc2:	801a      	strh	r2, [r3, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	24000cc0 	.word	0x24000cc0

08001fd4 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fdc:	2390      	movs	r3, #144	; 0x90
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff5a 	bl	8001e98 <poll_i2c_sensor>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fe8:	2394      	movs	r3, #148	; 0x94
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff54 	bl	8001e98 <poll_i2c_sensor>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001ff4:	2392      	movs	r3, #146	; 0x92
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff4e 	bl	8001e98 <poll_i2c_sensor>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002000:	2396      	movs	r3, #150	; 0x96
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff48 	bl	8001e98 <poll_i2c_sensor>
 8002008:	4603      	mov	r3, r0
 800200a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	89fa      	ldrh	r2, [r7, #14]
 8002010:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3302      	adds	r3, #2
 8002016:	89ba      	ldrh	r2, [r7, #12]
 8002018:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	897a      	ldrh	r2, [r7, #10]
 8002020:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3306      	adds	r3, #6
 8002026:	893a      	ldrh	r2, [r7, #8]
 8002028:	801a      	strh	r2, [r3, #0]
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <receive_hk_adc1+0xa0>)
 800203e:	8a9b      	ldrh	r3, [r3, #20]
 8002040:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <receive_hk_adc1+0xa0>)
 8002044:	8a1b      	ldrh	r3, [r3, #16]
 8002046:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <receive_hk_adc1+0xa0>)
 800204a:	899b      	ldrh	r3, [r3, #12]
 800204c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800204e:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <receive_hk_adc1+0xa0>)
 8002050:	8a5b      	ldrh	r3, [r3, #18]
 8002052:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <receive_hk_adc1+0xa0>)
 8002056:	889b      	ldrh	r3, [r3, #4]
 8002058:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <receive_hk_adc1+0xa0>)
 800205c:	88db      	ldrh	r3, [r3, #6]
 800205e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <receive_hk_adc1+0xa0>)
 8002062:	89db      	ldrh	r3, [r3, #14]
 8002064:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <receive_hk_adc1+0xa0>)
 8002068:	891b      	ldrh	r3, [r3, #8]
 800206a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <receive_hk_adc1+0xa0>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <receive_hk_adc1+0xa0>)
 8002074:	895b      	ldrh	r3, [r3, #10]
 8002076:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8bfa      	ldrh	r2, [r7, #30]
 800207c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3302      	adds	r3, #2
 8002082:	8bba      	ldrh	r2, [r7, #28]
 8002084:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	8b7a      	ldrh	r2, [r7, #26]
 800208c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3306      	adds	r3, #6
 8002092:	8b3a      	ldrh	r2, [r7, #24]
 8002094:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3308      	adds	r3, #8
 800209a:	8afa      	ldrh	r2, [r7, #22]
 800209c:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	330a      	adds	r3, #10
 80020a2:	8aba      	ldrh	r2, [r7, #20]
 80020a4:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	330c      	adds	r3, #12
 80020aa:	8a7a      	ldrh	r2, [r7, #18]
 80020ac:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	330e      	adds	r3, #14
 80020b2:	8a3a      	ldrh	r2, [r7, #16]
 80020b4:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3310      	adds	r3, #16
 80020ba:	89fa      	ldrh	r2, [r7, #14]
 80020bc:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3312      	adds	r3, #18
 80020c2:	89ba      	ldrh	r2, [r7, #12]
 80020c4:	801a      	strh	r2, [r3, #0]
}
 80020c6:	bf00      	nop
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	24000cc0 	.word	0x24000cc0

080020d8 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <receive_hk_adc3+0x4c>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <receive_hk_adc3+0x4c>)
 80020e8:	885b      	ldrh	r3, [r3, #2]
 80020ea:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <receive_hk_adc3+0x4c>)
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <receive_hk_adc3+0x4c>)
 80020f4:	88db      	ldrh	r3, [r3, #6]
 80020f6:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	89fa      	ldrh	r2, [r7, #14]
 80020fc:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3302      	adds	r3, #2
 8002102:	89ba      	ldrh	r2, [r7, #12]
 8002104:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	897a      	ldrh	r2, [r7, #10]
 800210c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3306      	adds	r3, #6
 8002112:	893a      	ldrh	r2, [r7, #8]
 8002114:	801a      	strh	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	24000ce0 	.word	0x24000ce0

08002128 <enter_flight_mode>:
 *
 * This function resumes the GPIO task, enables voltage rails, starts the DAC
 * in DMA mode, and starts various timers for packet transmission. It also sets
 * the relevant status flags.
 */
void enter_flight_mode() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af02      	add	r7, sp, #8
	xTaskResumeFromISR(GPIO_on_taskHandle);										// Auto Init
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <enter_flight_mode+0x90>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f012 fec8 	bl	8014ec8 <xTaskResumeFromISR>
	HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);				// Enable n200v
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <enter_flight_mode+0x94>)
 800213a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213e:	2201      	movs	r2, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f007 f8ad 	bl	80092a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);				// Enable n800v
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <enter_flight_mode+0x98>)
 8002148:	2140      	movs	r1, #64	; 0x40
 800214a:	2201      	movs	r2, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f007 f8a7 	bl	80092a0 <HAL_GPIO_WritePin>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);		// Enable auto sweep (doesn't start until ERPA timer is started)
 8002152:	2300      	movs	r3, #0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2320      	movs	r3, #32
 8002158:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <enter_flight_mode+0x9c>)
 800215a:	2100      	movs	r1, #0
 800215c:	481a      	ldr	r0, [pc, #104]	; (80021c8 <enter_flight_mode+0xa0>)
 800215e:	f003 fd03 	bl	8005b68 <HAL_DAC_Start_DMA>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);									// ERPA packet on
 8002162:	210c      	movs	r1, #12
 8002164:	4819      	ldr	r0, [pc, #100]	; (80021cc <enter_flight_mode+0xa4>)
 8002166:	f00c fc9f 	bl	800eaa8 <HAL_TIM_OC_Start_IT>
	ERPA_ON = 1;
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <enter_flight_mode+0xa8>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <enter_flight_mode+0xac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2102      	movs	r1, #2
 8002176:	4618      	mov	r0, r3
 8002178:	f011 f900 	bl	801337c <osEventFlagsSet>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);									// PMT packet on
 800217c:	2100      	movs	r1, #0
 800217e:	4816      	ldr	r0, [pc, #88]	; (80021d8 <enter_flight_mode+0xb0>)
 8002180:	f00c fc92 	bl	800eaa8 <HAL_TIM_OC_Start_IT>
	PMT_ON = 1;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <enter_flight_mode+0xb4>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, PMT_FLAG_ID);
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <enter_flight_mode+0xac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f011 f8f3 	bl	801337c <osEventFlagsSet>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);									// HK packet on
 8002196:	2100      	movs	r1, #0
 8002198:	4811      	ldr	r0, [pc, #68]	; (80021e0 <enter_flight_mode+0xb8>)
 800219a:	f00c fc85 	bl	800eaa8 <HAL_TIM_OC_Start_IT>
	HK_ON = 1;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <enter_flight_mode+0xbc>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, HK_FLAG_ID);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <enter_flight_mode+0xac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2104      	movs	r1, #4
 80021aa:	4618      	mov	r0, r3
 80021ac:	f011 f8e6 	bl	801337c <osEventFlagsSet>

}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	24000750 	.word	0x24000750
 80021bc:	58020800 	.word	0x58020800
 80021c0:	58020400 	.word	0x58020400
 80021c4:	24000010 	.word	0x24000010
 80021c8:	240002f4 	.word	0x240002f4
 80021cc:	24000554 	.word	0x24000554
 80021d0:	24000c5f 	.word	0x24000c5f
 80021d4:	24000c64 	.word	0x24000c64
 80021d8:	24000508 	.word	0x24000508
 80021dc:	24000c5e 	.word	0x24000c5e
 80021e0:	240005a0 	.word	0x240005a0
 80021e4:	24000c60 	.word	0x24000c60

080021e8 <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <get_current_step+0xc0>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d04a      	beq.n	8002294 <get_current_step+0xac>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002204:	da48      	bge.n	8002298 <get_current_step+0xb0>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f640 628b 	movw	r2, #3723	; 0xe8b
 800220c:	4293      	cmp	r3, r2
 800220e:	d03f      	beq.n	8002290 <get_current_step+0xa8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002216:	4293      	cmp	r3, r2
 8002218:	dc3e      	bgt.n	8002298 <get_current_step+0xb0>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002220:	4293      	cmp	r3, r2
 8002222:	d033      	beq.n	800228c <get_current_step+0xa4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800222a:	da35      	bge.n	8002298 <get_current_step+0xb0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002232:	4293      	cmp	r3, r2
 8002234:	d028      	beq.n	8002288 <get_current_step+0xa0>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800223c:	4293      	cmp	r3, r2
 800223e:	dc2b      	bgt.n	8002298 <get_current_step+0xb0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f240 7245 	movw	r2, #1861	; 0x745
 8002246:	4293      	cmp	r3, r2
 8002248:	d01c      	beq.n	8002284 <get_current_step+0x9c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f240 7245 	movw	r2, #1861	; 0x745
 8002250:	4293      	cmp	r3, r2
 8002252:	dc21      	bgt.n	8002298 <get_current_step+0xb0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800225a:	4293      	cmp	r3, r2
 800225c:	d010      	beq.n	8002280 <get_current_step+0x98>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002264:	4293      	cmp	r3, r2
 8002266:	dc17      	bgt.n	8002298 <get_current_step+0xb0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <get_current_step+0x90>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002274:	d002      	beq.n	800227c <get_current_step+0x94>
 8002276:	e00f      	b.n	8002298 <get_current_step+0xb0>
	case 0:
		return 0;
 8002278:	2300      	movs	r3, #0
 800227a:	e00e      	b.n	800229a <get_current_step+0xb2>
	case 620:
		return 1;
 800227c:	2301      	movs	r3, #1
 800227e:	e00c      	b.n	800229a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002280:	2302      	movs	r3, #2
 8002282:	e00a      	b.n	800229a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002284:	2303      	movs	r3, #3
 8002286:	e008      	b.n	800229a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002288:	2304      	movs	r3, #4
 800228a:	e006      	b.n	800229a <get_current_step+0xb2>
	case 3103:
		return 5;
 800228c:	2305      	movs	r3, #5
 800228e:	e004      	b.n	800229a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002290:	2306      	movs	r3, #6
 8002292:	e002      	b.n	800229a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002294:	2307      	movs	r3, #7
 8002296:	e000      	b.n	800229a <get_current_step+0xb2>
	default:
		return -1;
 8002298:	23ff      	movs	r3, #255	; 0xff
	}
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007400 	.word	0x40007400

080022ac <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 80022b0:	f000 f8f2 	bl	8002498 <send_ACK>

	vTaskSuspendAll();
 80022b4:	f012 fee0 	bl	8015078 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80022b8:	2101      	movs	r1, #1
 80022ba:	2001      	movs	r0, #1
 80022bc:	f007 fe16 	bl	8009eec <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 80022c0:	f012 fee8 	bl	8015094 <xTaskResumeAll>
	SystemClock_Config();
 80022c4:	f7fe ff2a 	bl	800111c <SystemClock_Config>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <RTC_SetTime>:
void RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format) {
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d051      	beq.n	8002386 <RTC_SetTime+0xba>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	22ca      	movs	r2, #202	; 0xca
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2253      	movs	r2, #83	; 0x53
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f00b fe04 	bl	800df10 <RTC_EnterInitMode>
 8002308:	4603      	mov	r3, r0
 800230a:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d129      	bne.n	8002366 <RTC_SetTime+0x9a>
	{

		sTime->TimeFormat = 0x00U;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f00b fe69 	bl	800dff4 <RTC_ByteToBcd2>
 8002322:	4603      	mov	r3, r0
 8002324:	041c      	lsls	r4, r3, #16
				((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	4618      	mov	r0, r3
 800232c:	f00b fe62 	bl	800dff4 <RTC_ByteToBcd2>
 8002330:	4603      	mov	r3, r0
 8002332:	021b      	lsls	r3, r3, #8
		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002334:	431c      	orrs	r4, r3
				((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	789b      	ldrb	r3, [r3, #2]
 800233a:	4618      	mov	r0, r3
 800233c:	f00b fe5a 	bl	800dff4 <RTC_ByteToBcd2>
 8002340:	4603      	mov	r3, r0
				((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002342:	ea44 0203 	orr.w	r2, r4, r3
				(((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	78db      	ldrb	r3, [r3, #3]
 800234a:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]


		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	6939      	ldr	r1, [r7, #16]
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <RTC_SetTime+0xc4>)
 8002358:	400b      	ands	r3, r1
 800235a:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f00b fe0b 	bl	800df78 <RTC_ExitInitMode>
 8002362:	4603      	mov	r3, r0
 8002364:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	22ff      	movs	r2, #255	; 0xff
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK)
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <RTC_SetTime+0xb0>
	{
		hrtc->State = HAL_RTC_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2020 	strb.w	r2, [r3, #32]
 8002384:	e000      	b.n	8002388 <RTC_SetTime+0xbc>
	__HAL_LOCK(hrtc);
 8002386:	bf00      	nop

}
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd90      	pop	{r4, r7, pc}
 800238e:	bf00      	nop
 8002390:	007f7f7f 	.word	0x007f7f7f

08002394 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	78db      	ldrb	r3, [r3, #3]
 80023b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	791b      	ldrb	r3, [r3, #4]
 80023b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	795b      	ldrb	r3, [r3, #5]
 80023c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	799b      	ldrb	r3, [r3, #6]
 80023c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3307      	adds	r3, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3308      	adds	r3, #8
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80023e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80023ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80023f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80023fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002400:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8002402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002406:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8002408:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800240c:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800240e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002410:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8002412:	f107 0320 	add.w	r3, r7, #32
 8002416:	2200      	movs	r2, #0
 8002418:	4619      	mov	r1, r3
 800241a:	480b      	ldr	r0, [pc, #44]	; (8002448 <calibrateRTC+0xb4>)
 800241c:	f00b fc7e 	bl	800dd1c <HAL_RTC_SetDate>
 8002420:	4603      	mov	r3, r0
 8002422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8002426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <calibrateRTC+0x9e>
		Error_Handler();
 800242e:	f000 fe6d 	bl	800310c <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	2200      	movs	r2, #0
 8002438:	4619      	mov	r1, r3
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <calibrateRTC+0xb4>)
 800243c:	f7ff ff46 	bl	80022cc <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 8002440:	bf00      	nop
 8002442:	3730      	adds	r7, #48	; 0x30
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	240003d4 	.word	0x240003d4

0800244c <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
	send_ACK();
 8002452:	f000 f821 	bl	8002498 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002456:	480e      	ldr	r0, [pc, #56]	; (8002490 <sync+0x44>)
 8002458:	f00e f8d2 	bl	8010600 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 800245c:	2364      	movs	r3, #100	; 0x64
 800245e:	2209      	movs	r2, #9
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <sync+0x48>)
 8002462:	480b      	ldr	r0, [pc, #44]	; (8002490 <sync+0x44>)
 8002464:	f00d ff38 	bl	80102d8 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <sync+0x48>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2bff      	cmp	r3, #255	; 0xff
 8002472:	d1f3      	bne.n	800245c <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 8002474:	4807      	ldr	r0, [pc, #28]	; (8002494 <sync+0x48>)
 8002476:	f7ff ff8d 	bl	8002394 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800247a:	2201      	movs	r2, #1
 800247c:	4905      	ldr	r1, [pc, #20]	; (8002494 <sync+0x48>)
 800247e:	4804      	ldr	r0, [pc, #16]	; (8002490 <sync+0x44>)
 8002480:	f00d fff2 	bl	8010468 <HAL_UART_Receive_IT>

	send_ACK();
 8002484:	f000 f808 	bl	8002498 <send_ACK>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	24000638 	.word	0x24000638
 8002494:	24000c68 	.word	0x24000c68

08002498 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <send_ACK+0x1c>)
 800249e:	22ff      	movs	r2, #255	; 0xff
 80024a0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80024a2:	2364      	movs	r3, #100	; 0x64
 80024a4:	2201      	movs	r2, #1
 80024a6:	4903      	ldr	r1, [pc, #12]	; (80024b4 <send_ACK+0x1c>)
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <send_ACK+0x20>)
 80024aa:	f00d fe87 	bl	80101bc <HAL_UART_Transmit>
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	24000ce8 	.word	0x24000ce8
 80024b8:	24000638 	.word	0x24000638

080024bc <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_UART_TxCpltCallback+0x1c>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	24000000 	.word	0x24000000

080024dc <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f014 fb17 	bl	8016b20 <malloc>
 80024f2:	4603      	mov	r3, r0
 80024f4:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f014 fb1f 	bl	8016b40 <memcpy>
	packet.size = size;
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	82bb      	strh	r3, [r7, #20]
	return packet;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	461a      	mov	r2, r3
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002512:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002524:	2100      	movs	r1, #0
 8002526:	481d      	ldr	r0, [pc, #116]	; (800259c <system_setup+0x7c>)
 8002528:	f00c fabe 	bl	800eaa8 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 800252c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002530:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002536:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800253a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800253e:	4818      	ldr	r0, [pc, #96]	; (80025a0 <system_setup+0x80>)
 8002540:	f003 f876 	bl	8005630 <HAL_ADCEx_Calibration_Start>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800254a:	f000 fddf 	bl	800310c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800254e:	220b      	movs	r2, #11
 8002550:	4914      	ldr	r1, [pc, #80]	; (80025a4 <system_setup+0x84>)
 8002552:	4813      	ldr	r0, [pc, #76]	; (80025a0 <system_setup+0x80>)
 8002554:	f002 f94a 	bl	80047ec <HAL_ADC_Start_DMA>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800255e:	f000 fdd5 	bl	800310c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002562:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002566:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800256a:	480f      	ldr	r0, [pc, #60]	; (80025a8 <system_setup+0x88>)
 800256c:	f003 f860 	bl	8005630 <HAL_ADCEx_Calibration_Start>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002576:	f000 fdc9 	bl	800310c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800257a:	2204      	movs	r2, #4
 800257c:	490b      	ldr	r1, [pc, #44]	; (80025ac <system_setup+0x8c>)
 800257e:	480a      	ldr	r0, [pc, #40]	; (80025a8 <system_setup+0x88>)
 8002580:	f002 f934 	bl	80047ec <HAL_ADC_Start_DMA>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800258a:	f000 fdbf 	bl	800310c <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800258e:	2201      	movs	r2, #1
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <system_setup+0x90>)
 8002592:	4808      	ldr	r0, [pc, #32]	; (80025b4 <system_setup+0x94>)
 8002594:	f00d ff68 	bl	8010468 <HAL_UART_Receive_IT>
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	240005ec 	.word	0x240005ec
 80025a0:	2400013c 	.word	0x2400013c
 80025a4:	24000cc0 	.word	0x24000cc0
 80025a8:	240001a0 	.word	0x240001a0
 80025ac:	24000ce0 	.word	0x24000ce0
 80025b0:	24000c68 	.word	0x24000c68
 80025b4:	24000638 	.word	0x24000638

080025b8 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 80025c4:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <get_uptime+0x88>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <get_uptime+0x8c>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <get_uptime+0x88>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d005      	beq.n	80025e6 <get_uptime+0x2e>
		ms = uptime_millis;
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <get_uptime+0x88>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <get_uptime+0x8c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025ec:	fb03 f202 	mul.w	r2, r3, r2
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <get_uptime+0x8c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4914      	ldr	r1, [pc, #80]	; (8002648 <get_uptime+0x90>)
 80025f8:	fba1 1303 	umull	r1, r3, r1, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	6939      	ldr	r1, [r7, #16]
 8002600:	fbb1 f3f3 	udiv	r3, r1, r3
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	0e1b      	lsrs	r3, r3, #24
 800260c:	b2da      	uxtb	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	0c1a      	lsrs	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3301      	adds	r3, #1
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	0a1a      	lsrs	r2, r3, #8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3302      	adds	r3, #2
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3303      	adds	r3, #3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	24000c44 	.word	0x24000c44
 8002644:	e000e010 	.word	0xe000e010
 8002648:	10624dd3 	.word	0x10624dd3

0800264c <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	2200      	movs	r2, #0
 800265a:	4619      	mov	r1, r3
 800265c:	4821      	ldr	r0, [pc, #132]	; (80026e4 <getTimestamp+0x98>)
 800265e:	f00b fb01 	bl	800dc64 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	2200      	movs	r2, #0
 8002668:	4619      	mov	r1, r3
 800266a:	481e      	ldr	r0, [pc, #120]	; (80026e4 <getTimestamp+0x98>)
 800266c:	f00b fbde 	bl	800de2c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2264      	movs	r2, #100	; 0x64
 8002674:	fb03 f202 	mul.w	r2, r3, r2
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <getTimestamp+0x9c>)
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3301      	adds	r3, #1
 8002688:	7b7a      	ldrb	r2, [r7, #13]
 800268a:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3302      	adds	r3, #2
 8002690:	7bba      	ldrb	r2, [r7, #14]
 8002692:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3303      	adds	r3, #3
 8002698:	7c3a      	ldrb	r2, [r7, #16]
 800269a:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	7c7a      	ldrb	r2, [r7, #17]
 80026a2:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3305      	adds	r3, #5
 80026a8:	7cba      	ldrb	r2, [r7, #18]
 80026aa:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	0e1a      	lsrs	r2, r3, #24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3306      	adds	r3, #6
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	0c1a      	lsrs	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3307      	adds	r3, #7
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	0a1a      	lsrs	r2, r3, #8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3308      	adds	r3, #8
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3309      	adds	r3, #9
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	240003d4 	.word	0x240003d4
 80026e8:	000f4240 	.word	0x000f4240

080026ec <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80026f2:	bf00      	nop
 80026f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f8:	4833      	ldr	r0, [pc, #204]	; (80027c8 <sample_pmt+0xdc>)
 80026fa:	f006 fdb9 	bl	8009270 <HAL_GPIO_ReadPin>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f7      	bne.n	80026f4 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002704:	200a      	movs	r0, #10
 8002706:	f014 fa0b 	bl	8016b20 <malloc>
 800270a:	4603      	mov	r3, r0
 800270c:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800270e:	2002      	movs	r0, #2
 8002710:	f014 fa06 	bl	8016b20 <malloc>
 8002714:	4603      	mov	r3, r0
 8002716:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002718:	2004      	movs	r0, #4
 800271a:	f014 fa01 	bl	8016b20 <malloc>
 800271e:	4603      	mov	r3, r0
 8002720:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f7ff ff48 	bl	80025b8 <get_uptime>

	receive_pmt_spi(pmt_spi);
 8002728:	6938      	ldr	r0, [r7, #16]
 800272a:	f7ff fbf9 	bl	8001f20 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	22bb      	movs	r2, #187	; 0xbb
 8002732:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	22bb      	movs	r2, #187	; 0xbb
 800273a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <sample_pmt+0xe0>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	b29a      	uxth	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3302      	adds	r3, #2
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <sample_pmt+0xe0>)
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3303      	adds	r3, #3
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3304      	adds	r3, #4
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3305      	adds	r3, #5
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	7852      	ldrb	r2, [r2, #1]
 800276a:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3306      	adds	r3, #6
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3307      	adds	r3, #7
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	7852      	ldrb	r2, [r2, #1]
 800277e:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3308      	adds	r3, #8
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	7892      	ldrb	r2, [r2, #2]
 8002788:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3309      	adds	r3, #9
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	78d2      	ldrb	r2, [r2, #3]
 8002792:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	220a      	movs	r2, #10
 8002798:	6979      	ldr	r1, [r7, #20]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe9e 	bl	80024dc <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <sample_pmt+0xe4>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	1d39      	adds	r1, r7, #4
 80027a6:	2300      	movs	r3, #0
 80027a8:	2200      	movs	r2, #0
 80027aa:	f010 ff57 	bl	801365c <osMessageQueuePut>
	free(buffer);
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f014 f9be 	bl	8016b30 <free>
	free(pmt_spi);
 80027b4:	6938      	ldr	r0, [r7, #16]
 80027b6:	f014 f9bb 	bl	8016b30 <free>
	free(uptime);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f014 f9b8 	bl	8016b30 <free>
}
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	58020000 	.word	0x58020000
 80027cc:	24000c54 	.word	0x24000c54
 80027d0:	24000c48 	.word	0x24000c48

080027d4 <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80027da:	bf00      	nop
 80027dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027e0:	4848      	ldr	r0, [pc, #288]	; (8002904 <sample_erpa+0x130>)
 80027e2:	f006 fd45 	bl	8009270 <HAL_GPIO_ReadPin>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f7      	bne.n	80027dc <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80027ec:	200e      	movs	r0, #14
 80027ee:	f014 f997 	bl	8016b20 <malloc>
 80027f2:	4603      	mov	r3, r0
 80027f4:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80027f6:	2002      	movs	r0, #2
 80027f8:	f014 f992 	bl	8016b20 <malloc>
 80027fc:	4603      	mov	r3, r0
 80027fe:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002800:	2002      	movs	r0, #2
 8002802:	f014 f98d 	bl	8016b20 <malloc>
 8002806:	4603      	mov	r3, r0
 8002808:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800280a:	2004      	movs	r0, #4
 800280c:	f014 f988 	bl	8016b20 <malloc>
 8002810:	4603      	mov	r3, r0
 8002812:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002814:	23ff      	movs	r3, #255	; 0xff
 8002816:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002818:	6938      	ldr	r0, [r7, #16]
 800281a:	f7ff fecd 	bl	80025b8 <get_uptime>
	sweep_step = get_current_step();
 800281e:	f7ff fce3 	bl	80021e8 <get_current_step>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 8002826:	69b8      	ldr	r0, [r7, #24]
 8002828:	f7ff fb9e 	bl	8001f68 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f7ff fbbf 	bl	8001fb0 <receive_erpa_adc>


	buffer[0] = ERPA_SYNC;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	22aa      	movs	r2, #170	; 0xaa
 8002836:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	3301      	adds	r3, #1
 800283c:	22aa      	movs	r2, #170	; 0xaa
 800283e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002840:	4b31      	ldr	r3, [pc, #196]	; (8002908 <sample_erpa+0x134>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0c1a      	lsrs	r2, r3, #16
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3302      	adds	r3, #2
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <sample_erpa+0x134>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0a1a      	lsrs	r2, r3, #8
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3303      	adds	r3, #3
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 800285c:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <sample_erpa+0x134>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	3304      	adds	r3, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	3305      	adds	r3, #5
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	b29a      	uxth	r2, r3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3306      	adds	r3, #6
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3307      	adds	r3, #7
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	3308      	adds	r3, #8
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	7812      	ldrb	r2, [r2, #0]
 8002894:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3309      	adds	r3, #9
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	7852      	ldrb	r2, [r2, #1]
 800289e:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	330a      	adds	r3, #10
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	330b      	adds	r3, #11
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	7852      	ldrb	r2, [r2, #1]
 80028b2:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	330c      	adds	r3, #12
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	7892      	ldrb	r2, [r2, #2]
 80028bc:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	330d      	adds	r3, #13
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	78d2      	ldrb	r2, [r2, #3]
 80028c6:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	220e      	movs	r2, #14
 80028cc:	69f9      	ldr	r1, [r7, #28]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fe04 	bl	80024dc <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <sample_erpa+0x138>)
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	1d39      	adds	r1, r7, #4
 80028da:	2300      	movs	r3, #0
 80028dc:	2200      	movs	r2, #0
 80028de:	f010 febd 	bl	801365c <osMessageQueuePut>
	free(buffer);
 80028e2:	69f8      	ldr	r0, [r7, #28]
 80028e4:	f014 f924 	bl	8016b30 <free>
	free(erpa_spi);
 80028e8:	69b8      	ldr	r0, [r7, #24]
 80028ea:	f014 f921 	bl	8016b30 <free>
	free(erpa_adc);
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f014 f91e 	bl	8016b30 <free>
	free(uptime);
 80028f4:	6938      	ldr	r0, [r7, #16]
 80028f6:	f014 f91b 	bl	8016b30 <free>
}
 80028fa:	bf00      	nop
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	58020400 	.word	0x58020400
 8002908:	24000c58 	.word	0x24000c58
 800290c:	24000c48 	.word	0x24000c48

08002910 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002916:	2032      	movs	r0, #50	; 0x32
 8002918:	f014 f902 	bl	8016b20 <malloc>
 800291c:	4603      	mov	r3, r0
 800291e:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002920:	2008      	movs	r0, #8
 8002922:	f014 f8fd 	bl	8016b20 <malloc>
 8002926:	4603      	mov	r3, r0
 8002928:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 800292a:	200a      	movs	r0, #10
 800292c:	f014 f8f8 	bl	8016b20 <malloc>
 8002930:	4603      	mov	r3, r0
 8002932:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff fe89 	bl	800264c <getTimestamp>


	if (TEMPERATURE_COUNTER > 999) {
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <sample_hk+0x78>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002942:	db25      	blt.n	8002990 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002944:	6938      	ldr	r0, [r7, #16]
 8002946:	f7ff fb45 	bl	8001fd4 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002950:	b29a      	uxth	r2, r3
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <sample_hk+0x7c>)
 8002954:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	3302      	adds	r3, #2
 800295a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <sample_hk+0x7c>)
 8002962:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	3304      	adds	r3, #4
 8002968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <sample_hk+0x7c>)
 8002970:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	3306      	adds	r3, #6
 8002976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297a:	b29a      	uxth	r2, r3
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <sample_hk+0x7c>)
 800297e:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002980:	4b01      	ldr	r3, [pc, #4]	; (8002988 <sample_hk+0x78>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e01f      	b.n	80029c8 <sample_hk+0xb8>
 8002988:	24000004 	.word	0x24000004
 800298c:	24000cec 	.word	0x24000cec
	} else {
		TEMPERATURE_COUNTER++;
 8002990:	4b9f      	ldr	r3, [pc, #636]	; (8002c10 <sample_hk+0x300>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	4a9e      	ldr	r2, [pc, #632]	; (8002c10 <sample_hk+0x300>)
 8002998:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800299a:	4b9e      	ldr	r3, [pc, #632]	; (8002c14 <sample_hk+0x304>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b21a      	sxth	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80029a4:	4b9b      	ldr	r3, [pc, #620]	; (8002c14 <sample_hk+0x304>)
 80029a6:	885a      	ldrh	r2, [r3, #2]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	3302      	adds	r3, #2
 80029ac:	b212      	sxth	r2, r2
 80029ae:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80029b0:	4b98      	ldr	r3, [pc, #608]	; (8002c14 <sample_hk+0x304>)
 80029b2:	889a      	ldrh	r2, [r3, #4]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	3304      	adds	r3, #4
 80029b8:	b212      	sxth	r2, r2
 80029ba:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80029bc:	4b95      	ldr	r3, [pc, #596]	; (8002c14 <sample_hk+0x304>)
 80029be:	88da      	ldrh	r2, [r3, #6]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	3306      	adds	r3, #6
 80029c4:	b212      	sxth	r2, r2
 80029c6:	801a      	strh	r2, [r3, #0]
	}

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	22cc      	movs	r2, #204	; 0xcc
 80029cc:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	22cc      	movs	r2, #204	; 0xcc
 80029d4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80029d6:	4b90      	ldr	r3, [pc, #576]	; (8002c18 <sample_hk+0x308>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	b29a      	uxth	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3302      	adds	r3, #2
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80029e6:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <sample_hk+0x308>)
 80029e8:	881a      	ldrh	r2, [r3, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3303      	adds	r3, #3
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 80029f2:	4b8a      	ldr	r3, [pc, #552]	; (8002c1c <sample_hk+0x30c>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3304      	adds	r3, #4
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002a02:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <sample_hk+0x30c>)
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3305      	adds	r3, #5
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 8002a0e:	4b84      	ldr	r3, [pc, #528]	; (8002c20 <sample_hk+0x310>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3306      	adds	r3, #6
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 8002a1e:	4b80      	ldr	r3, [pc, #512]	; (8002c20 <sample_hk+0x310>)
 8002a20:	881a      	ldrh	r2, [r3, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3307      	adds	r3, #7
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a30:	121a      	asrs	r2, r3, #8
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3308      	adds	r3, #8
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3309      	adds	r3, #9
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a50:	121a      	asrs	r2, r3, #8
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	330a      	adds	r3, #10
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	330b      	adds	r3, #11
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a72:	121a      	asrs	r2, r3, #8
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	330c      	adds	r3, #12
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	330d      	adds	r3, #13
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	3306      	adds	r3, #6
 8002a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a94:	121a      	asrs	r2, r3, #8
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	330e      	adds	r3, #14
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3306      	adds	r3, #6
 8002aa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	330f      	adds	r3, #15
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002aae:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <sample_hk+0x314>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3310      	adds	r3, #16
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002abe:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <sample_hk+0x314>)
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3311      	adds	r3, #17
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 8002aca:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <sample_hk+0x318>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3312      	adds	r3, #18
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002ada:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <sample_hk+0x318>)
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3313      	adds	r3, #19
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002ae6:	4b51      	ldr	r3, [pc, #324]	; (8002c2c <sample_hk+0x31c>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3314      	adds	r3, #20
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002af6:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <sample_hk+0x31c>)
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3315      	adds	r3, #21
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002b02:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <sample_hk+0x320>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3316      	adds	r3, #22
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <sample_hk+0x320>)
 8002b14:	881a      	ldrh	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3317      	adds	r3, #23
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002b1e:	4b45      	ldr	r3, [pc, #276]	; (8002c34 <sample_hk+0x324>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002b2e:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <sample_hk+0x324>)
 8002b30:	881a      	ldrh	r2, [r3, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3319      	adds	r3, #25
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <sample_hk+0x328>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	331a      	adds	r3, #26
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <sample_hk+0x328>)
 8002b4c:	881a      	ldrh	r2, [r3, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	331b      	adds	r3, #27
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002b56:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <sample_hk+0x32c>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	331c      	adds	r3, #28
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002b66:	4b35      	ldr	r3, [pc, #212]	; (8002c3c <sample_hk+0x32c>)
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	331d      	adds	r3, #29
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <sample_hk+0x330>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	331e      	adds	r3, #30
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <sample_hk+0x330>)
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	331f      	adds	r3, #31
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <sample_hk+0x334>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3320      	adds	r3, #32
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002b9e:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <sample_hk+0x334>)
 8002ba0:	881a      	ldrh	r2, [r3, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3321      	adds	r3, #33	; 0x21
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <sample_hk+0x338>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	3322      	adds	r3, #34	; 0x22
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002bba:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <sample_hk+0x338>)
 8002bbc:	881a      	ldrh	r2, [r3, #0]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3323      	adds	r3, #35	; 0x23
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002bc6:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <sample_hk+0x33c>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3324      	adds	r3, #36	; 0x24
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <sample_hk+0x33c>)
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3325      	adds	r3, #37	; 0x25
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <sample_hk+0x340>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3326      	adds	r3, #38	; 0x26
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <sample_hk+0x340>)
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3327      	adds	r3, #39	; 0x27
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

	buffer[40] = timestamp[0];
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3328      	adds	r3, #40	; 0x28
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	3329      	adds	r3, #41	; 0x29
 8002c0c:	e022      	b.n	8002c54 <sample_hk+0x344>
 8002c0e:	bf00      	nop
 8002c10:	24000004 	.word	0x24000004
 8002c14:	24000cec 	.word	0x24000cec
 8002c18:	24000c5c 	.word	0x24000c5c
 8002c1c:	24000c26 	.word	0x24000c26
 8002c20:	24000c28 	.word	0x24000c28
 8002c24:	24000c2a 	.word	0x24000c2a
 8002c28:	24000c2c 	.word	0x24000c2c
 8002c2c:	24000c2e 	.word	0x24000c2e
 8002c30:	24000c30 	.word	0x24000c30
 8002c34:	24000c32 	.word	0x24000c32
 8002c38:	24000c34 	.word	0x24000c34
 8002c3c:	24000c36 	.word	0x24000c36
 8002c40:	24000c38 	.word	0x24000c38
 8002c44:	24000c3a 	.word	0x24000c3a
 8002c48:	24000c3c 	.word	0x24000c3c
 8002c4c:	24000c3e 	.word	0x24000c3e
 8002c50:	24000c40 	.word	0x24000c40
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	7852      	ldrb	r2, [r2, #1]
 8002c58:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	332a      	adds	r3, #42	; 0x2a
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	7892      	ldrb	r2, [r2, #2]
 8002c62:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	332b      	adds	r3, #43	; 0x2b
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	78d2      	ldrb	r2, [r2, #3]
 8002c6c:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	332c      	adds	r3, #44	; 0x2c
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	7912      	ldrb	r2, [r2, #4]
 8002c76:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	332d      	adds	r3, #45	; 0x2d
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	7952      	ldrb	r2, [r2, #5]
 8002c80:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	332e      	adds	r3, #46	; 0x2e
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	7992      	ldrb	r2, [r2, #6]
 8002c8a:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	332f      	adds	r3, #47	; 0x2f
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	79d2      	ldrb	r2, [r2, #7]
 8002c94:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3330      	adds	r3, #48	; 0x30
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	7a12      	ldrb	r2, [r2, #8]
 8002c9e:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3331      	adds	r3, #49	; 0x31
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	7a52      	ldrb	r2, [r2, #9]
 8002ca8:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2232      	movs	r2, #50	; 0x32
 8002cae:	6979      	ldr	r1, [r7, #20]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fc13 	bl	80024dc <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <sample_hk+0x3d0>)
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	1d39      	adds	r1, r7, #4
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f010 fccc 	bl	801365c <osMessageQueuePut>

	free(buffer);
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f013 ff33 	bl	8016b30 <free>
	free(hk_i2c);
 8002cca:	6938      	ldr	r0, [r7, #16]
 8002ccc:	f013 ff30 	bl	8016b30 <free>
	free(timestamp);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f013 ff2d 	bl	8016b30 <free>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	24000c48 	.word	0x24000c48

08002ce4 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <PMT_init+0x38>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	f010 fbd7 	bl	80134aa <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <PMT_init+0x3c>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <PMT_init+0x30>
			sample_pmt();
 8002d04:	f7ff fcf2 	bl	80026ec <sample_pmt>
			pmt_seq++;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <PMT_init+0x40>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <PMT_init+0x40>)
 8002d12:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002d14:	f010 fa96 	bl	8013244 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002d18:	e7e8      	b.n	8002cec <PMT_init+0x8>
 8002d1a:	bf00      	nop
 8002d1c:	24000c64 	.word	0x24000c64
 8002d20:	24000c5e 	.word	0x24000c5e
 8002d24:	24000c54 	.word	0x24000c54

08002d28 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <ERPA_init+0x34>)
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	f010 fbb5 	bl	80134aa <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <ERPA_init+0x38>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <ERPA_init+0x2e>
			sample_erpa();
 8002d48:	f7ff fd44 	bl	80027d4 <sample_erpa>
			erpa_seq++;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <ERPA_init+0x3c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <ERPA_init+0x3c>)
 8002d54:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002d56:	f010 fa75 	bl	8013244 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002d5a:	e7e9      	b.n	8002d30 <ERPA_init+0x8>
 8002d5c:	24000c64 	.word	0x24000c64
 8002d60:	24000c5f 	.word	0x24000c5f
 8002d64:	24000c58 	.word	0x24000c58

08002d68 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HK_init+0x38>)
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	f010 fb95 	bl	80134aa <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HK_init+0x3c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <HK_init+0x30>
			sample_hk();
 8002d88:	f7ff fdc2 	bl	8002910 <sample_hk>
			hk_seq++;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HK_init+0x40>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <HK_init+0x40>)
 8002d96:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002d98:	f010 fa54 	bl	8013244 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002d9c:	e7e8      	b.n	8002d70 <HK_init+0x8>
 8002d9e:	bf00      	nop
 8002da0:	24000c64 	.word	0x24000c64
 8002da4:	24000c60 	.word	0x24000c60
 8002da8:	24000c5c 	.word	0x24000c5c

08002dac <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <GPIO_on_init+0x9c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f010 fa63 	bl	8013284 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <GPIO_on_init+0xa0>)
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f006 fa6b 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dca:	2064      	movs	r0, #100	; 0x64
 8002dcc:	f010 fa7b 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <GPIO_on_init+0xa0>)
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f006 fa62 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ddc:	2064      	movs	r0, #100	; 0x64
 8002dde:	f010 fa72 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <GPIO_on_init+0xa4>)
 8002de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002de8:	2201      	movs	r2, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f006 fa58 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002df0:	2064      	movs	r0, #100	; 0x64
 8002df2:	f010 fa68 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <GPIO_on_init+0xa4>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f006 fa4f 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e02:	2064      	movs	r0, #100	; 0x64
 8002e04:	f010 fa5f 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <GPIO_on_init+0xa4>)
 8002e0a:	2140      	movs	r1, #64	; 0x40
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f006 fa46 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e14:	2064      	movs	r0, #100	; 0x64
 8002e16:	f010 fa56 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <GPIO_on_init+0xa4>)
 8002e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e20:	2201      	movs	r2, #1
 8002e22:	4618      	mov	r0, r3
 8002e24:	f006 fa3c 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e28:	2064      	movs	r0, #100	; 0x64
 8002e2a:	f010 fa4c 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <GPIO_on_init+0xa4>)
 8002e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e34:	2201      	movs	r2, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f006 fa32 	bl	80092a0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <GPIO_on_init+0x9c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f010 fa1f 	bl	8013284 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002e46:	e7ba      	b.n	8002dbe <GPIO_on_init+0x12>
 8002e48:	24000750 	.word	0x24000750
 8002e4c:	58020400 	.word	0x58020400
 8002e50:	58020800 	.word	0x58020800

08002e54 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <GPIO_off_init+0x9c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f010 fa0f 	bl	8013284 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <GPIO_off_init+0xa0>)
 8002e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f006 fa16 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e74:	2064      	movs	r0, #100	; 0x64
 8002e76:	f010 fa26 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <GPIO_off_init+0xa0>)
 8002e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e80:	2200      	movs	r2, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f006 fa0c 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e88:	2064      	movs	r0, #100	; 0x64
 8002e8a:	f010 fa1c 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002e8e:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <GPIO_off_init+0xa0>)
 8002e90:	2140      	movs	r1, #64	; 0x40
 8002e92:	2200      	movs	r2, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f006 fa03 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e9a:	2064      	movs	r0, #100	; 0x64
 8002e9c:	f010 fa13 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <GPIO_off_init+0xa0>)
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f006 f9fa 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002eac:	2064      	movs	r0, #100	; 0x64
 8002eae:	f010 fa0a 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <GPIO_off_init+0xa0>)
 8002eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f006 f9f0 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ec0:	2064      	movs	r0, #100	; 0x64
 8002ec2:	f010 fa00 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <GPIO_off_init+0xa4>)
 8002ec8:	2120      	movs	r1, #32
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f006 f9e7 	bl	80092a0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ed2:	2064      	movs	r0, #100	; 0x64
 8002ed4:	f010 f9f7 	bl	80132c6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002ed8:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <GPIO_off_init+0xa4>)
 8002eda:	2104      	movs	r1, #4
 8002edc:	2200      	movs	r2, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f006 f9de 	bl	80092a0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <GPIO_off_init+0x9c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f010 f9cb 	bl	8013284 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002eee:	e7ba      	b.n	8002e66 <GPIO_off_init+0x12>
 8002ef0:	240009b0 	.word	0x240009b0
 8002ef4:	58020800 	.word	0x58020800
 8002ef8:	58020400 	.word	0x58020400

08002efc <UART_TX_init>:
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002f0c:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <UART_TX_init+0xa4>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f14:	2200      	movs	r2, #0
 8002f16:	4923      	ldr	r1, [pc, #140]	; (8002fa4 <UART_TX_init+0xa8>)
 8002f18:	f010 fc00 	bl	801371c <osMessageQueueGet>
 8002f1c:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d121      	bne.n	8002f68 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002f24:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <UART_TX_init+0xa8>)
 8002f26:	889b      	ldrh	r3, [r3, #4]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f32:	d219      	bcs.n	8002f68 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <UART_TX_init+0xac>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <UART_TX_init+0xa8>)
 8002f3c:	6811      	ldr	r1, [r2, #0]
 8002f3e:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <UART_TX_init+0xa8>)
 8002f40:	8892      	ldrh	r2, [r2, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f013 fdfc 	bl	8016b40 <memcpy>
					free(msg.array);
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <UART_TX_init+0xa8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f013 fdef 	bl	8016b30 <free>
					total_size += msg.size;
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <UART_TX_init+0xa8>)
 8002f54:	889b      	ldrh	r3, [r3, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f240 32b5 	movw	r2, #949	; 0x3b5
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d803      	bhi.n	8002f70 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ce      	beq.n	8002f0c <UART_TX_init+0x10>
 8002f6e:	e000      	b.n	8002f72 <UART_TX_init+0x76>
						break;
 8002f70:	bf00      	nop

		if (total_size > 0) {
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <UART_TX_init+0xac>)
 8002f80:	480a      	ldr	r0, [pc, #40]	; (8002fac <UART_TX_init+0xb0>)
 8002f82:	f00d fabd 	bl	8010500 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002f86:	e001      	b.n	8002f8c <UART_TX_init+0x90>
				osThreadYield();
 8002f88:	f010 f95c 	bl	8013244 <osThreadYield>
			while (tx_flag == 0) {
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <UART_TX_init+0xb4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f9      	beq.n	8002f88 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <UART_TX_init+0xb4>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002f9a:	f010 f953 	bl	8013244 <osThreadYield>
		total_size = 0;
 8002f9e:	e7b3      	b.n	8002f08 <UART_TX_init+0xc>
 8002fa0:	24000c48 	.word	0x24000c48
 8002fa4:	24000c4c 	.word	0x24000c4c
 8002fa8:	24000cf4 	.word	0x24000cf4
 8002fac:	24000638 	.word	0x24000638
 8002fb0:	24000000 	.word	0x24000000

08002fb4 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <Voltage_Monitor_init+0xbc>)
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2108      	movs	r1, #8
 8002fc8:	f010 fa6f 	bl	80134aa <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002fcc:	2014      	movs	r0, #20
 8002fce:	f013 fda7 	bl	8016b20 <malloc>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002fd6:	2008      	movs	r0, #8
 8002fd8:	f013 fda2 	bl	8016b20 <malloc>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff f827 	bl	8002034 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002fe6:	68b8      	ldr	r0, [r7, #8]
 8002fe8:	f7ff f876 	bl	80020d8 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	885a      	ldrh	r2, [r3, #2]
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <Voltage_Monitor_init+0xc0>)
 8002ff2:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <Voltage_Monitor_init+0xc4>)
 8002ffa:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	4b1e      	ldr	r3, [pc, #120]	; (800307c <Voltage_Monitor_init+0xc8>)
 8003002:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	885a      	ldrh	r2, [r3, #2]
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <Voltage_Monitor_init+0xcc>)
 800300a:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	889a      	ldrh	r2, [r3, #4]
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <Voltage_Monitor_init+0xd0>)
 8003012:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	88da      	ldrh	r2, [r3, #6]
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <Voltage_Monitor_init+0xd4>)
 800301a:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	899a      	ldrh	r2, [r3, #12]
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <Voltage_Monitor_init+0xd8>)
 8003022:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	88da      	ldrh	r2, [r3, #6]
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <Voltage_Monitor_init+0xdc>)
 800302a:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	889a      	ldrh	r2, [r3, #4]
 8003030:	4b18      	ldr	r3, [pc, #96]	; (8003094 <Voltage_Monitor_init+0xe0>)
 8003032:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	89da      	ldrh	r2, [r3, #14]
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <Voltage_Monitor_init+0xe4>)
 800303a:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8a1a      	ldrh	r2, [r3, #16]
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <Voltage_Monitor_init+0xe8>)
 8003042:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	891a      	ldrh	r2, [r3, #8]
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <Voltage_Monitor_init+0xec>)
 800304a:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	895a      	ldrh	r2, [r3, #10]
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <Voltage_Monitor_init+0xf0>)
 8003052:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8a5a      	ldrh	r2, [r3, #18]
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <Voltage_Monitor_init+0xf4>)
 800305a:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f013 fd67 	bl	8016b30 <free>
		free(hk_adc3);
 8003062:	68b8      	ldr	r0, [r7, #8]
 8003064:	f013 fd64 	bl	8016b30 <free>

		osThreadYield();
 8003068:	f010 f8ec 	bl	8013244 <osThreadYield>
	for (;;) {
 800306c:	e7a6      	b.n	8002fbc <Voltage_Monitor_init+0x8>
 800306e:	bf00      	nop
 8003070:	24000c64 	.word	0x24000c64
 8003074:	24000c26 	.word	0x24000c26
 8003078:	24000c28 	.word	0x24000c28
 800307c:	24000c2a 	.word	0x24000c2a
 8003080:	24000c2c 	.word	0x24000c2c
 8003084:	24000c2e 	.word	0x24000c2e
 8003088:	24000c30 	.word	0x24000c30
 800308c:	24000c32 	.word	0x24000c32
 8003090:	24000c34 	.word	0x24000c34
 8003094:	24000c36 	.word	0x24000c36
 8003098:	24000c38 	.word	0x24000c38
 800309c:	24000c3a 	.word	0x24000c3a
 80030a0:	24000c3c 	.word	0x24000c3c
 80030a4:	24000c3e 	.word	0x24000c3e
 80030a8:	24000c40 	.word	0x24000c40

080030ac <FLAG_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <FLAG_init+0x38>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f010 f9d5 	bl	8013468 <osEventFlagsGet>
 80030be:	4603      	mov	r3, r0
 80030c0:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0316 	and.w	r3, r3, #22
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <FLAG_init+0x38>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2116      	movs	r1, #22
 80030d2:	4618      	mov	r0, r3
 80030d4:	f010 f996 	bl	8013404 <osEventFlagsClear>
			enter_stop();
 80030d8:	f7ff f8e8 	bl	80022ac <enter_stop>
		}
		osDelay(1);
 80030dc:	2001      	movs	r0, #1
 80030de:	f010 f8f2 	bl	80132c6 <osDelay>
	for (;;) {
 80030e2:	e7e7      	b.n	80030b4 <FLAG_init+0x8>
 80030e4:	24000c64 	.word	0x24000c64

080030e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030fa:	f000 ff85 	bl	8004008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40001000 	.word	0x40001000

0800310c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003110:	b672      	cpsid	i
}
 8003112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003114:	e7fe      	b.n	8003114 <Error_Handler+0x8>
	...

08003118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_MspInit+0x38>)
 8003120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_MspInit+0x38>)
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_MspInit+0x38>)
 8003130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800313c:	2200      	movs	r2, #0
 800313e:	210f      	movs	r1, #15
 8003140:	f06f 0001 	mvn.w	r0, #1
 8003144:	f002 fc6e 	bl	8005a24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	58024400 	.word	0x58024400

08003154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a7b      	ldr	r2, [pc, #492]	; (8003360 <HAL_ADC_MspInit+0x20c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	f040 8091 	bne.w	800329a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003178:	4b7a      	ldr	r3, [pc, #488]	; (8003364 <HAL_ADC_MspInit+0x210>)
 800317a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800317e:	4a79      	ldr	r2, [pc, #484]	; (8003364 <HAL_ADC_MspInit+0x210>)
 8003180:	f043 0320 	orr.w	r3, r3, #32
 8003184:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003188:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_ADC_MspInit+0x210>)
 800318a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003196:	4b73      	ldr	r3, [pc, #460]	; (8003364 <HAL_ADC_MspInit+0x210>)
 8003198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319c:	4a71      	ldr	r2, [pc, #452]	; (8003364 <HAL_ADC_MspInit+0x210>)
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a6:	4b6f      	ldr	r3, [pc, #444]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80031a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b4:	4b6b      	ldr	r3, [pc, #428]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ba:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c4:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	4b64      	ldr	r3, [pc, #400]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	4a62      	ldr	r2, [pc, #392]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e2:	4b60      	ldr	r3, [pc, #384]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80031f0:	2333      	movs	r3, #51	; 0x33
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031f4:	2303      	movs	r3, #3
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003200:	4619      	mov	r1, r3
 8003202:	4859      	ldr	r0, [pc, #356]	; (8003368 <HAL_ADC_MspInit+0x214>)
 8003204:	f005 fe84 	bl	8008f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8003208:	23ce      	movs	r3, #206	; 0xce
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800320c:	2303      	movs	r3, #3
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003218:	4619      	mov	r1, r3
 800321a:	4854      	ldr	r0, [pc, #336]	; (800336c <HAL_ADC_MspInit+0x218>)
 800321c:	f005 fe78 	bl	8008f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003220:	2303      	movs	r3, #3
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003224:	2303      	movs	r3, #3
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003230:	4619      	mov	r1, r3
 8003232:	484f      	ldr	r0, [pc, #316]	; (8003370 <HAL_ADC_MspInit+0x21c>)
 8003234:	f005 fe6c 	bl	8008f10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003238:	4b4e      	ldr	r3, [pc, #312]	; (8003374 <HAL_ADC_MspInit+0x220>)
 800323a:	4a4f      	ldr	r2, [pc, #316]	; (8003378 <HAL_ADC_MspInit+0x224>)
 800323c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800323e:	4b4d      	ldr	r3, [pc, #308]	; (8003374 <HAL_ADC_MspInit+0x220>)
 8003240:	2209      	movs	r2, #9
 8003242:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_ADC_MspInit+0x220>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800324a:	4b4a      	ldr	r3, [pc, #296]	; (8003374 <HAL_ADC_MspInit+0x220>)
 800324c:	2200      	movs	r2, #0
 800324e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003250:	4b48      	ldr	r3, [pc, #288]	; (8003374 <HAL_ADC_MspInit+0x220>)
 8003252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003256:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003258:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_ADC_MspInit+0x220>)
 800325a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800325e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003260:	4b44      	ldr	r3, [pc, #272]	; (8003374 <HAL_ADC_MspInit+0x220>)
 8003262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003266:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003268:	4b42      	ldr	r3, [pc, #264]	; (8003374 <HAL_ADC_MspInit+0x220>)
 800326a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800326e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003270:	4b40      	ldr	r3, [pc, #256]	; (8003374 <HAL_ADC_MspInit+0x220>)
 8003272:	2200      	movs	r2, #0
 8003274:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003276:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <HAL_ADC_MspInit+0x220>)
 8003278:	2200      	movs	r2, #0
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800327c:	483d      	ldr	r0, [pc, #244]	; (8003374 <HAL_ADC_MspInit+0x220>)
 800327e:	f002 ffff 	bl	8006280 <HAL_DMA_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003288:	f7ff ff40 	bl	800310c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a39      	ldr	r2, [pc, #228]	; (8003374 <HAL_ADC_MspInit+0x220>)
 8003290:	64da      	str	r2, [r3, #76]	; 0x4c
 8003292:	4a38      	ldr	r2, [pc, #224]	; (8003374 <HAL_ADC_MspInit+0x220>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003298:	e05e      	b.n	8003358 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a37      	ldr	r2, [pc, #220]	; (800337c <HAL_ADC_MspInit+0x228>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d159      	bne.n	8003358 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80032a4:	4b2f      	ldr	r3, [pc, #188]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80032a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032aa:	4a2e      	ldr	r2, [pc, #184]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80032ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80032b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c2:	4b28      	ldr	r3, [pc, #160]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80032c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c8:	4a26      	ldr	r2, [pc, #152]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_ADC_MspInit+0x210>)
 80032d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80032e0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80032e4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80032e8:	f000 feba 	bl	8004060 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80032ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80032f0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80032f4:	f000 feb4 	bl	8004060 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_ADC_MspInit+0x230>)
 80032fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 8003300:	2273      	movs	r2, #115	; 0x73
 8003302:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 800331a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800331e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 8003322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003326:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 800332a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800332e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 8003338:	2200      	movs	r2, #0
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800333c:	4810      	ldr	r0, [pc, #64]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 800333e:	f002 ff9f 	bl	8006280 <HAL_DMA_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003348:	f7ff fee0 	bl	800310c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 8003350:	64da      	str	r2, [r3, #76]	; 0x4c
 8003352:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_ADC_MspInit+0x22c>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003358:	bf00      	nop
 800335a:	3738      	adds	r7, #56	; 0x38
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40022000 	.word	0x40022000
 8003364:	58024400 	.word	0x58024400
 8003368:	58020800 	.word	0x58020800
 800336c:	58020000 	.word	0x58020000
 8003370:	58020400 	.word	0x58020400
 8003374:	24000204 	.word	0x24000204
 8003378:	40020010 	.word	0x40020010
 800337c:	58026000 	.word	0x58026000
 8003380:	2400027c 	.word	0x2400027c
 8003384:	40020028 	.word	0x40020028

08003388 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003390:	f107 0314 	add.w	r3, r7, #20
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a34      	ldr	r2, [pc, #208]	; (8003478 <HAL_DAC_MspInit+0xf0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d161      	bne.n	800346e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_DAC_MspInit+0xf4>)
 80033ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b0:	4a32      	ldr	r2, [pc, #200]	; (800347c <HAL_DAC_MspInit+0xf4>)
 80033b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033ba:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_DAC_MspInit+0xf4>)
 80033bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <HAL_DAC_MspInit+0xf4>)
 80033ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ce:	4a2b      	ldr	r2, [pc, #172]	; (800347c <HAL_DAC_MspInit+0xf4>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_DAC_MspInit+0xf4>)
 80033da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033e6:	2310      	movs	r3, #16
 80033e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ea:	2303      	movs	r3, #3
 80033ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	4619      	mov	r1, r3
 80033f8:	4821      	ldr	r0, [pc, #132]	; (8003480 <HAL_DAC_MspInit+0xf8>)
 80033fa:	f005 fd89 	bl	8008f10 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80033fe:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003400:	4a21      	ldr	r2, [pc, #132]	; (8003488 <HAL_DAC_MspInit+0x100>)
 8003402:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003406:	2243      	movs	r2, #67	; 0x43
 8003408:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800340a:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 800340c:	2240      	movs	r2, #64	; 0x40
 800340e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003410:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800341c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003424:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800342c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003434:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 800343e:	2200      	movs	r2, #0
 8003440:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003442:	4810      	ldr	r0, [pc, #64]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003444:	f002 ff1c 	bl	8006280 <HAL_DMA_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800344e:	f7ff fe5d 	bl	800310c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_DAC_MspInit+0xfc>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800345e:	2200      	movs	r2, #0
 8003460:	2105      	movs	r1, #5
 8003462:	2036      	movs	r0, #54	; 0x36
 8003464:	f002 fade 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003468:	2036      	movs	r0, #54	; 0x36
 800346a:	f002 faf5 	bl	8005a58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800346e:	bf00      	nop
 8003470:	3728      	adds	r7, #40	; 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40007400 	.word	0x40007400
 800347c:	58024400 	.word	0x58024400
 8003480:	58020000 	.word	0x58020000
 8003484:	24000308 	.word	0x24000308
 8003488:	40020088 	.word	0x40020088

0800348c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b0ba      	sub	sp, #232	; 0xe8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034a4:	f107 0310 	add.w	r3, r7, #16
 80034a8:	22c0      	movs	r2, #192	; 0xc0
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f013 fb55 	bl	8016b5c <memset>
  if(hi2c->Instance==I2C1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a27      	ldr	r2, [pc, #156]	; (8003554 <HAL_I2C_MspInit+0xc8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d146      	bne.n	800354a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034bc:	f04f 0208 	mov.w	r2, #8
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ce:	f107 0310 	add.w	r3, r7, #16
 80034d2:	4618      	mov	r0, r3
 80034d4:	f007 fda8 	bl	800b028 <HAL_RCCEx_PeriphCLKConfig>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80034de:	f7ff fe15 	bl	800310c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_I2C_MspInit+0xcc>)
 80034e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_I2C_MspInit+0xcc>)
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f2:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_I2C_MspInit+0xcc>)
 80034f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003500:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003508:	2312      	movs	r3, #18
 800350a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800351a:	2304      	movs	r3, #4
 800351c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003524:	4619      	mov	r1, r3
 8003526:	480d      	ldr	r0, [pc, #52]	; (800355c <HAL_I2C_MspInit+0xd0>)
 8003528:	f005 fcf2 	bl	8008f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_I2C_MspInit+0xcc>)
 800352e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_I2C_MspInit+0xcc>)
 8003534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003538:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_I2C_MspInit+0xcc>)
 800353e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800354a:	bf00      	nop
 800354c:	37e8      	adds	r7, #232	; 0xe8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40005400 	.word	0x40005400
 8003558:	58024400 	.word	0x58024400
 800355c:	58020400 	.word	0x58020400

08003560 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b0b2      	sub	sp, #200	; 0xc8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	22c0      	movs	r2, #192	; 0xc0
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f013 faf3 	bl	8016b5c <memset>
  if(hrtc->Instance==RTC)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a10      	ldr	r2, [pc, #64]	; (80035bc <HAL_RTC_MspInit+0x5c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d118      	bne.n	80035b2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003580:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_RTC_MspInit+0x60>)
 800358e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003592:	f107 0308 	add.w	r3, r7, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f007 fd46 	bl	800b028 <HAL_RCCEx_PeriphCLKConfig>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80035a2:	f7ff fdb3 	bl	800310c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RTC_MspInit+0x64>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_RTC_MspInit+0x64>)
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80035b2:	bf00      	nop
 80035b4:	37c8      	adds	r7, #200	; 0xc8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	58004000 	.word	0x58004000
 80035c0:	00019300 	.word	0x00019300
 80035c4:	58024400 	.word	0x58024400

080035c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b0bc      	sub	sp, #240	; 0xf0
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e0:	f107 0318 	add.w	r3, r7, #24
 80035e4:	22c0      	movs	r2, #192	; 0xc0
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f013 fab7 	bl	8016b5c <memset>
  if(hspi->Instance==SPI1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a4c      	ldr	r2, [pc, #304]	; (8003724 <HAL_SPI_MspInit+0x15c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d145      	bne.n	8003684 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80035f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003604:	2300      	movs	r3, #0
 8003606:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003608:	f107 0318 	add.w	r3, r7, #24
 800360c:	4618      	mov	r0, r3
 800360e:	f007 fd0b 	bl	800b028 <HAL_RCCEx_PeriphCLKConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003618:	f7ff fd78 	bl	800310c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800361c:	4b42      	ldr	r3, [pc, #264]	; (8003728 <HAL_SPI_MspInit+0x160>)
 800361e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003622:	4a41      	ldr	r2, [pc, #260]	; (8003728 <HAL_SPI_MspInit+0x160>)
 8003624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003628:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800362c:	4b3e      	ldr	r3, [pc, #248]	; (8003728 <HAL_SPI_MspInit+0x160>)
 800362e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363a:	4b3b      	ldr	r3, [pc, #236]	; (8003728 <HAL_SPI_MspInit+0x160>)
 800363c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003640:	4a39      	ldr	r2, [pc, #228]	; (8003728 <HAL_SPI_MspInit+0x160>)
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_SPI_MspInit+0x160>)
 800364c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003658:	2318      	movs	r3, #24
 800365a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003670:	2305      	movs	r3, #5
 8003672:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003676:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800367a:	4619      	mov	r1, r3
 800367c:	482b      	ldr	r0, [pc, #172]	; (800372c <HAL_SPI_MspInit+0x164>)
 800367e:	f005 fc47 	bl	8008f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003682:	e04a      	b.n	800371a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a29      	ldr	r2, [pc, #164]	; (8003730 <HAL_SPI_MspInit+0x168>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d145      	bne.n	800371a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800368e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800369a:	2300      	movs	r3, #0
 800369c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800369e:	f107 0318 	add.w	r3, r7, #24
 80036a2:	4618      	mov	r0, r3
 80036a4:	f007 fcc0 	bl	800b028 <HAL_RCCEx_PeriphCLKConfig>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80036ae:	f7ff fd2d 	bl	800310c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036b2:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_SPI_MspInit+0x160>)
 80036b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_SPI_MspInit+0x160>)
 80036ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_SPI_MspInit+0x160>)
 80036c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_SPI_MspInit+0x160>)
 80036d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d6:	4a14      	ldr	r2, [pc, #80]	; (8003728 <HAL_SPI_MspInit+0x160>)
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_SPI_MspInit+0x160>)
 80036e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80036ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80036f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003708:	2305      	movs	r3, #5
 800370a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003712:	4619      	mov	r1, r3
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <HAL_SPI_MspInit+0x164>)
 8003716:	f005 fbfb 	bl	8008f10 <HAL_GPIO_Init>
}
 800371a:	bf00      	nop
 800371c:	37f0      	adds	r7, #240	; 0xf0
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40013000 	.word	0x40013000
 8003728:	58024400 	.word	0x58024400
 800372c:	58020400 	.word	0x58020400
 8003730:	40003800 	.word	0x40003800

08003734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a46      	ldr	r2, [pc, #280]	; (800385c <HAL_TIM_Base_MspInit+0x128>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d12f      	bne.n	80037a6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003746:	4b46      	ldr	r3, [pc, #280]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 8003748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003756:	4b42      	ldr	r3, [pc, #264]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 8003758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003764:	2200      	movs	r2, #0
 8003766:	2105      	movs	r1, #5
 8003768:	2018      	movs	r0, #24
 800376a:	f002 f95b 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800376e:	2018      	movs	r0, #24
 8003770:	f002 f972 	bl	8005a58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003774:	2200      	movs	r2, #0
 8003776:	2105      	movs	r1, #5
 8003778:	2019      	movs	r0, #25
 800377a:	f002 f953 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800377e:	2019      	movs	r0, #25
 8003780:	f002 f96a 	bl	8005a58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003784:	2200      	movs	r2, #0
 8003786:	2105      	movs	r1, #5
 8003788:	201a      	movs	r0, #26
 800378a:	f002 f94b 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800378e:	201a      	movs	r0, #26
 8003790:	f002 f962 	bl	8005a58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003794:	2200      	movs	r2, #0
 8003796:	2105      	movs	r1, #5
 8003798:	201b      	movs	r0, #27
 800379a:	f002 f943 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800379e:	201b      	movs	r0, #27
 80037a0:	f002 f95a 	bl	8005a58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037a4:	e055      	b.n	8003852 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d117      	bne.n	80037e0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037b0:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 80037b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b6:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 80037c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2105      	movs	r1, #5
 80037d2:	201c      	movs	r0, #28
 80037d4:	f002 f926 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037d8:	201c      	movs	r0, #28
 80037da:	f002 f93d 	bl	8005a58 <HAL_NVIC_EnableIRQ>
}
 80037de:	e038      	b.n	8003852 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_TIM_Base_MspInit+0x130>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d117      	bne.n	800381a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 80037ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 80037fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003808:	2200      	movs	r2, #0
 800380a:	2105      	movs	r1, #5
 800380c:	201d      	movs	r0, #29
 800380e:	f002 f909 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003812:	201d      	movs	r0, #29
 8003814:	f002 f920 	bl	8005a58 <HAL_NVIC_EnableIRQ>
}
 8003818:	e01b      	b.n	8003852 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <HAL_TIM_Base_MspInit+0x134>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d116      	bne.n	8003852 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 8003826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382a:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_TIM_Base_MspInit+0x12c>)
 8003836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	2105      	movs	r1, #5
 8003846:	201e      	movs	r0, #30
 8003848:	f002 f8ec 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800384c:	201e      	movs	r0, #30
 800384e:	f002 f903 	bl	8005a58 <HAL_NVIC_EnableIRQ>
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40010000 	.word	0x40010000
 8003860:	58024400 	.word	0x58024400
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800

0800386c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a26      	ldr	r2, [pc, #152]	; (8003924 <HAL_TIM_MspPostInit+0xb8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d120      	bne.n	80038d0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_TIM_MspPostInit+0xbc>)
 8003890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <HAL_TIM_MspPostInit+0xbc>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_TIM_MspPostInit+0xbc>)
 80038a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	2302      	movs	r3, #2
 80038b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	2300      	movs	r3, #0
 80038bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038be:	2301      	movs	r3, #1
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c2:	f107 0314 	add.w	r3, r7, #20
 80038c6:	4619      	mov	r1, r3
 80038c8:	4818      	ldr	r0, [pc, #96]	; (800392c <HAL_TIM_MspPostInit+0xc0>)
 80038ca:	f005 fb21 	bl	8008f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038ce:	e024      	b.n	800391a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d11f      	bne.n	800391a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_TIM_MspPostInit+0xbc>)
 80038dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e0:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_TIM_MspPostInit+0xbc>)
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_TIM_MspPostInit+0xbc>)
 80038ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800390a:	2301      	movs	r3, #1
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	4619      	mov	r1, r3
 8003914:	4806      	ldr	r0, [pc, #24]	; (8003930 <HAL_TIM_MspPostInit+0xc4>)
 8003916:	f005 fafb 	bl	8008f10 <HAL_GPIO_Init>
}
 800391a:	bf00      	nop
 800391c:	3728      	adds	r7, #40	; 0x28
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000
 8003928:	58024400 	.word	0x58024400
 800392c:	58020000 	.word	0x58020000
 8003930:	58020400 	.word	0x58020400

08003934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b0ba      	sub	sp, #232	; 0xe8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	22c0      	movs	r2, #192	; 0xc0
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f013 f901 	bl	8016b5c <memset>
  if(huart->Instance==USART1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a41      	ldr	r2, [pc, #260]	; (8003a64 <HAL_UART_MspInit+0x130>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d17b      	bne.n	8003a5c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003964:	f04f 0201 	mov.w	r2, #1
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003970:	2318      	movs	r3, #24
 8003972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003976:	f107 0310 	add.w	r3, r7, #16
 800397a:	4618      	mov	r0, r3
 800397c:	f007 fb54 	bl	800b028 <HAL_RCCEx_PeriphCLKConfig>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003986:	f7ff fbc1 	bl	800310c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_UART_MspInit+0x134>)
 800398c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003990:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <HAL_UART_MspInit+0x134>)
 8003992:	f043 0310 	orr.w	r3, r3, #16
 8003996:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800399a:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <HAL_UART_MspInit+0x134>)
 800399c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a8:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_UART_MspInit+0x134>)
 80039aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ae:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <HAL_UART_MspInit+0x134>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039b8:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_UART_MspInit+0x134>)
 80039ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ce:	2302      	movs	r3, #2
 80039d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039e0:	2307      	movs	r3, #7
 80039e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ea:	4619      	mov	r1, r3
 80039ec:	481f      	ldr	r0, [pc, #124]	; (8003a6c <HAL_UART_MspInit+0x138>)
 80039ee:	f005 fa8f 	bl	8008f10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80039f2:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 80039f4:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_UART_MspInit+0x140>)
 80039f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 80039fa:	222a      	movs	r2, #42	; 0x2a
 80039fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039fe:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0a:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a10:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a30:	480f      	ldr	r0, [pc, #60]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a32:	f002 fc25 	bl	8006280 <HAL_DMA_Init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003a3c:	f7ff fb66 	bl	800310c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a44:	67da      	str	r2, [r3, #124]	; 0x7c
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <HAL_UART_MspInit+0x13c>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2105      	movs	r1, #5
 8003a50:	2025      	movs	r0, #37	; 0x25
 8003a52:	f001 ffe7 	bl	8005a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a56:	2025      	movs	r0, #37	; 0x25
 8003a58:	f001 fffe 	bl	8005a58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a5c:	bf00      	nop
 8003a5e:	37e8      	adds	r7, #232	; 0xe8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40011000 	.word	0x40011000
 8003a68:	58024400 	.word	0x58024400
 8003a6c:	58020000 	.word	0x58020000
 8003a70:	240006cc 	.word	0x240006cc
 8003a74:	40020040 	.word	0x40020040

08003a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	; 0x40
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	d827      	bhi.n	8003ad6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003a86:	2200      	movs	r2, #0
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	2036      	movs	r0, #54	; 0x36
 8003a8c:	f001 ffca 	bl	8005a24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a90:	2036      	movs	r0, #54	; 0x36
 8003a92:	f001 ffe1 	bl	8005a58 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003a96:	4a29      	ldr	r2, [pc, #164]	; (8003b3c <HAL_InitTick+0xc4>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_InitTick+0xc8>)
 8003a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa2:	4a27      	ldr	r2, [pc, #156]	; (8003b40 <HAL_InitTick+0xc8>)
 8003aa4:	f043 0310 	orr.w	r3, r3, #16
 8003aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_InitTick+0xc8>)
 8003aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aba:	f107 0210 	add.w	r2, r7, #16
 8003abe:	f107 0314 	add.w	r3, r7, #20
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f007 fa6d 	bl	800afa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <HAL_InitTick+0x6a>
 8003ad4:	e001      	b.n	8003ada <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e02b      	b.n	8003b32 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ada:	f007 fa37 	bl	800af4c <HAL_RCC_GetPCLK1Freq>
 8003ade:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003ae0:	e004      	b.n	8003aec <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ae2:	f007 fa33 	bl	800af4c <HAL_RCC_GetPCLK1Freq>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <HAL_InitTick+0xcc>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	0c9b      	lsrs	r3, r3, #18
 8003af6:	3b01      	subs	r3, #1
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_InitTick+0xd0>)
 8003afc:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <HAL_InitTick+0xd4>)
 8003afe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_InitTick+0xd0>)
 8003b02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b08:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <HAL_InitTick+0xd0>)
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_InitTick+0xd0>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <HAL_InitTick+0xd0>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b1a:	480b      	ldr	r0, [pc, #44]	; (8003b48 <HAL_InitTick+0xd0>)
 8003b1c:	f00a fef5 	bl	800e90a <HAL_TIM_Base_Init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d104      	bne.n	8003b30 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b26:	4808      	ldr	r0, [pc, #32]	; (8003b48 <HAL_InitTick+0xd0>)
 8003b28:	f00a ff46 	bl	800e9b8 <HAL_TIM_Base_Start_IT>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	e000      	b.n	8003b32 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3740      	adds	r7, #64	; 0x40
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	24000098 	.word	0x24000098
 8003b40:	58024400 	.word	0x58024400
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	240010dc 	.word	0x240010dc
 8003b4c:	40001000 	.word	0x40001000

08003b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003b54:	e7fe      	b.n	8003b54 <NMI_Handler+0x4>

08003b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5a:	e7fe      	b.n	8003b5a <HardFault_Handler+0x4>

08003b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b60:	e7fe      	b.n	8003b60 <MemManage_Handler+0x4>

08003b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b66:	e7fe      	b.n	8003b66 <BusFault_Handler+0x4>

08003b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <UsageFault_Handler+0x4>

08003b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <DMA1_Stream0_IRQHandler+0x10>)
 8003b82:	f003 fea7 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	24000204 	.word	0x24000204

08003b90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <DMA1_Stream1_IRQHandler+0x10>)
 8003b96:	f003 fe9d 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2400027c 	.word	0x2400027c

08003ba4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <DMA1_Stream2_IRQHandler+0x10>)
 8003baa:	f003 fe93 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	240006cc 	.word	0x240006cc

08003bb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <DMA1_Stream5_IRQHandler+0x10>)
 8003bbe:	f003 fe89 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	24000308 	.word	0x24000308

08003bcc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <TIM1_BRK_IRQHandler+0x10>)
 8003bd2:	f00b fa08 	bl	800efe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	24000508 	.word	0x24000508

08003be0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <TIM1_UP_IRQHandler+0x10>)
 8003be6:	f00b f9fe 	bl	800efe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	24000508 	.word	0x24000508

08003bf4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003bfa:	f00b f9f4 	bl	800efe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	24000508 	.word	0x24000508

08003c08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <TIM1_CC_IRQHandler+0x10>)
 8003c0e:	f00b f9ea 	bl	800efe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	24000508 	.word	0x24000508

08003c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <TIM2_IRQHandler+0x10>)
 8003c22:	f00b f9e0 	bl	800efe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	24000554 	.word	0x24000554

08003c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <TIM3_IRQHandler+0x10>)
 8003c36:	f00b f9d6 	bl	800efe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	240005a0 	.word	0x240005a0

08003c44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <TIM4_IRQHandler+0x10>)
 8003c4a:	f00b f9cc 	bl	800efe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	240005ec 	.word	0x240005ec

08003c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <USART1_IRQHandler+0x10>)
 8003c5e:	f00c fd85 	bl	801076c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	24000638 	.word	0x24000638

08003c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <TIM6_DAC_IRQHandler+0x20>)
 8003c72:	791b      	ldrb	r3, [r3, #4]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003c7a:	4804      	ldr	r0, [pc, #16]	; (8003c8c <TIM6_DAC_IRQHandler+0x20>)
 8003c7c:	f002 f881 	bl	8005d82 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003c80:	4803      	ldr	r0, [pc, #12]	; (8003c90 <TIM6_DAC_IRQHandler+0x24>)
 8003c82:	f00b f9b0 	bl	800efe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	240002f4 	.word	0x240002f4
 8003c90:	240010dc 	.word	0x240010dc

08003c94 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <ITM_SendChar+0x48>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <ITM_SendChar+0x48>)
 8003ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <ITM_SendChar+0x4c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a0c      	ldr	r2, [pc, #48]	; (8003ce0 <ITM_SendChar+0x4c>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003cb6:	bf00      	nop
 8003cb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f8      	beq.n	8003cb8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003cc6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	6013      	str	r3, [r2, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000edfc 	.word	0xe000edfc
 8003ce0:	e0000e00 	.word	0xe0000e00

08003ce4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e00a      	b.n	8003d0c <_read+0x28>
		*ptr++ = __io_getchar();
 8003cf6:	f3af 8000 	nop.w
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	60ba      	str	r2, [r7, #8]
 8003d02:	b2ca      	uxtb	r2, r1
 8003d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	dbf0      	blt.n	8003cf6 <_read+0x12>
	}

	return len;
 8003d14:	687b      	ldr	r3, [r7, #4]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e009      	b.n	8003d44 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	60ba      	str	r2, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ffab 	bl	8003c94 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	dbf1      	blt.n	8003d30 <_write+0x12>
	}
	return len;
 8003d4c:	687b      	ldr	r3, [r7, #4]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_close>:

int _close(int file) {
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_fstat>:

int _fstat(int file, struct stat *st) {
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <_isatty>:

int _isatty(int file) {
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003d96:	2301      	movs	r3, #1
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003dc8:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <_sbrk+0x64>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <_sbrk+0x64>)
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <_sbrk+0x68>)
 8003de0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <_sbrk+0x64>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d207      	bcs.n	8003e00 <_sbrk+0x40>
		errno = ENOMEM;
 8003df0:	f012 fe6c 	bl	8016acc <__errno>
 8003df4:	4603      	mov	r3, r0
 8003df6:	220c      	movs	r2, #12
 8003df8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dfe:	e009      	b.n	8003e14 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <_sbrk+0x64>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003e06:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <_sbrk+0x64>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <_sbrk+0x64>)
 8003e10:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003e12:	68fb      	ldr	r3, [r7, #12]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	24080000 	.word	0x24080000
 8003e20:	00000400 	.word	0x00000400
 8003e24:	24001128 	.word	0x24001128
 8003e28:	24005a90 	.word	0x24005a90

08003e2c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003e30:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <SystemInit+0xe4>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	4a36      	ldr	r2, [pc, #216]	; (8003f10 <SystemInit+0xe4>)
 8003e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003e40:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <SystemInit+0xe8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2b06      	cmp	r3, #6
 8003e4a:	d807      	bhi.n	8003e5c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003e4c:	4b31      	ldr	r3, [pc, #196]	; (8003f14 <SystemInit+0xe8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 030f 	bic.w	r3, r3, #15
 8003e54:	4a2f      	ldr	r2, [pc, #188]	; (8003f14 <SystemInit+0xe8>)
 8003e56:	f043 0307 	orr.w	r3, r3, #7
 8003e5a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <SystemInit+0xec>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2d      	ldr	r2, [pc, #180]	; (8003f18 <SystemInit+0xec>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <SystemInit+0xec>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003e6e:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <SystemInit+0xec>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4929      	ldr	r1, [pc, #164]	; (8003f18 <SystemInit+0xec>)
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <SystemInit+0xf0>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003e7a:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <SystemInit+0xe8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003e86:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <SystemInit+0xe8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 030f 	bic.w	r3, r3, #15
 8003e8e:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <SystemInit+0xe8>)
 8003e90:	f043 0307 	orr.w	r3, r3, #7
 8003e94:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <SystemInit+0xec>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003e9c:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <SystemInit+0xec>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <SystemInit+0xec>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <SystemInit+0xec>)
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <SystemInit+0xf4>)
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <SystemInit+0xec>)
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <SystemInit+0xf8>)
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003eb4:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <SystemInit+0xec>)
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <SystemInit+0xfc>)
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <SystemInit+0xec>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <SystemInit+0xec>)
 8003ec2:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <SystemInit+0xfc>)
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <SystemInit+0xec>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003ecc:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <SystemInit+0xec>)
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <SystemInit+0xfc>)
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <SystemInit+0xec>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <SystemInit+0xec>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <SystemInit+0xec>)
 8003ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <SystemInit+0xec>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <SystemInit+0x100>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <SystemInit+0x104>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef6:	d202      	bcs.n	8003efe <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <SystemInit+0x108>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <SystemInit+0x10c>)
 8003f00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f04:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000ed00 	.word	0xe000ed00
 8003f14:	52002000 	.word	0x52002000
 8003f18:	58024400 	.word	0x58024400
 8003f1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f20:	02020200 	.word	0x02020200
 8003f24:	01ff0000 	.word	0x01ff0000
 8003f28:	01010280 	.word	0x01010280
 8003f2c:	5c001000 	.word	0x5c001000
 8003f30:	ffff0000 	.word	0xffff0000
 8003f34:	51008108 	.word	0x51008108
 8003f38:	52004000 	.word	0x52004000

08003f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f40:	f7ff ff74 	bl	8003e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f44:	480c      	ldr	r0, [pc, #48]	; (8003f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f46:	490d      	ldr	r1, [pc, #52]	; (8003f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f4c:	e002      	b.n	8003f54 <LoopCopyDataInit>

08003f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f52:	3304      	adds	r3, #4

08003f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f58:	d3f9      	bcc.n	8003f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f5c:	4c0a      	ldr	r4, [pc, #40]	; (8003f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f60:	e001      	b.n	8003f66 <LoopFillZerobss>

08003f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f64:	3204      	adds	r2, #4

08003f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f68:	d3fb      	bcc.n	8003f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f6a:	f012 fdb5 	bl	8016ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f6e:	f7fd f823 	bl	8000fb8 <main>
  bx  lr
 8003f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f7c:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8003f80:	080179c4 	.word	0x080179c4
  ldr r2, =_sbss
 8003f84:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8003f88:	24005a90 	.word	0x24005a90

08003f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC3_IRQHandler>
	...

08003f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f96:	2003      	movs	r0, #3
 8003f98:	f001 fd39 	bl	8005a0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f9c:	f006 fe2c 	bl	800abf8 <HAL_RCC_GetSysClockFreq>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <HAL_Init+0x68>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	4913      	ldr	r1, [pc, #76]	; (8003ffc <HAL_Init+0x6c>)
 8003fae:	5ccb      	ldrb	r3, [r1, r3]
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_Init+0x68>)
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <HAL_Init+0x6c>)
 8003fc4:	5cd3      	ldrb	r3, [r2, r3]
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <HAL_Init+0x70>)
 8003fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <HAL_Init+0x74>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fda:	2005      	movs	r0, #5
 8003fdc:	f7ff fd4c 	bl	8003a78 <HAL_InitTick>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e002      	b.n	8003ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fea:	f7ff f895 	bl	8003118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	08017910 	.word	0x08017910
 8004000:	24000094 	.word	0x24000094
 8004004:	24000090 	.word	0x24000090

08004008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x20>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_IncTick+0x24>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4413      	add	r3, r2
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <HAL_IncTick+0x24>)
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2400009c 	.word	0x2400009c
 800402c:	2400112c 	.word	0x2400112c

08004030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return uwTick;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_GetTick+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2400112c 	.word	0x2400112c

08004048 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_GetREVID+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	0c1b      	lsrs	r3, r3, #16
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	5c001000 	.word	0x5c001000

08004060 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	43db      	mvns	r3, r3
 8004072:	401a      	ands	r2, r3
 8004074:	4904      	ldr	r1, [pc, #16]	; (8004088 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	58000400 	.word	0x58000400

0800408c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	609a      	str	r2, [r3, #8]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3360      	adds	r3, #96	; 0x60
 8004106:	461a      	mov	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	431a      	orrs	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	611a      	str	r2, [r3, #16]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004166:	b480      	push	{r7}
 8004168:	b087      	sub	sp, #28
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3360      	adds	r3, #96	; 0x60
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	431a      	orrs	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	601a      	str	r2, [r3, #0]
  }
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3330      	adds	r3, #48	; 0x30
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	4413      	add	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	211f      	movs	r1, #31
 80041ee:	fa01 f303 	lsl.w	r3, r1, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	401a      	ands	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	0e9b      	lsrs	r3, r3, #26
 80041fa:	f003 011f 	and.w	r1, r3, #31
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	431a      	orrs	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f023 0203 	bic.w	r2, r3, #3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3314      	adds	r3, #20
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	0e5b      	lsrs	r3, r3, #25
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	4413      	add	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	0d1b      	lsrs	r3, r3, #20
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2107      	movs	r1, #7
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	401a      	ands	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	0d1b      	lsrs	r3, r3, #20
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	431a      	orrs	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b0:	43db      	mvns	r3, r3
 80042b2:	401a      	ands	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f003 0318 	and.w	r3, r3, #24
 80042ba:	4908      	ldr	r1, [pc, #32]	; (80042dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80042bc:	40d9      	lsrs	r1, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	400b      	ands	r3, r1
 80042c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	000fffff 	.word	0x000fffff

080042e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 031f 	and.w	r3, r3, #31
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <LL_ADC_DisableDeepPowerDown+0x20>)
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6093      	str	r3, [r2, #8]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	5fffffc0 	.word	0x5fffffc0

08004320 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004334:	d101      	bne.n	800433a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <LL_ADC_EnableInternalRegulator+0x24>)
 8004356:	4013      	ands	r3, r2
 8004358:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	6fffffc0 	.word	0x6fffffc0

08004370 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004384:	d101      	bne.n	800438a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <LL_ADC_Enable+0x24>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	f043 0201 	orr.w	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	7fffffc0 	.word	0x7fffffc0

080043c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <LL_ADC_Disable+0x24>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	f043 0202 	orr.w	r2, r3, #2
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	7fffffc0 	.word	0x7fffffc0

080043e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <LL_ADC_IsEnabled+0x18>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <LL_ADC_IsEnabled+0x1a>
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d101      	bne.n	8004426 <LL_ADC_IsDisableOngoing+0x18>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <LL_ADC_IsDisableOngoing+0x1a>
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <LL_ADC_REG_StartConversion+0x24>)
 8004442:	4013      	ands	r3, r2
 8004444:	f043 0204 	orr.w	r2, r3, #4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	7fffffc0 	.word	0x7fffffc0

0800445c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d101      	bne.n	8004474 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b08      	cmp	r3, #8
 8004494:	d101      	bne.n	800449a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e18f      	b.n	80047e2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fe fe3f 	bl	8003154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ff19 	bl	8004320 <LL_ADC_IsDeepPowerDownEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff feff 	bl	80042fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff34 	bl	8004370 <LL_ADC_IsInternalRegulatorEnabled>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d114      	bne.n	8004538 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff18 	bl	8004348 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004518:	4b87      	ldr	r3, [pc, #540]	; (8004738 <HAL_ADC_Init+0x290>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	4a87      	ldr	r2, [pc, #540]	; (800473c <HAL_ADC_Init+0x294>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	3301      	adds	r3, #1
 8004528:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800452a:	e002      	b.n	8004532 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3b01      	subs	r3, #1
 8004530:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f9      	bne.n	800452c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff ff17 	bl	8004370 <LL_ADC_IsInternalRegulatorEnabled>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10d      	bne.n	8004564 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff77 	bl	800445c <LL_ADC_REG_IsConversionOngoing>
 800456e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	f040 8129 	bne.w	80047d0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 8125 	bne.w	80047d0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800458e:	f043 0202 	orr.w	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ff24 	bl	80043e8 <LL_ADC_IsEnabled>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d136      	bne.n	8004614 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a65      	ldr	r2, [pc, #404]	; (8004740 <HAL_ADC_Init+0x298>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_ADC_Init+0x112>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a63      	ldr	r2, [pc, #396]	; (8004744 <HAL_ADC_Init+0x29c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10e      	bne.n	80045d8 <HAL_ADC_Init+0x130>
 80045ba:	4861      	ldr	r0, [pc, #388]	; (8004740 <HAL_ADC_Init+0x298>)
 80045bc:	f7ff ff14 	bl	80043e8 <LL_ADC_IsEnabled>
 80045c0:	4604      	mov	r4, r0
 80045c2:	4860      	ldr	r0, [pc, #384]	; (8004744 <HAL_ADC_Init+0x29c>)
 80045c4:	f7ff ff10 	bl	80043e8 <LL_ADC_IsEnabled>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4323      	orrs	r3, r4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e008      	b.n	80045ea <HAL_ADC_Init+0x142>
 80045d8:	485b      	ldr	r0, [pc, #364]	; (8004748 <HAL_ADC_Init+0x2a0>)
 80045da:	f7ff ff05 	bl	80043e8 <LL_ADC_IsEnabled>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d012      	beq.n	8004614 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a53      	ldr	r2, [pc, #332]	; (8004740 <HAL_ADC_Init+0x298>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_ADC_Init+0x15a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a51      	ldr	r2, [pc, #324]	; (8004744 <HAL_ADC_Init+0x29c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_ADC_Init+0x15e>
 8004602:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_ADC_Init+0x2a4>)
 8004604:	e000      	b.n	8004608 <HAL_ADC_Init+0x160>
 8004606:	4a52      	ldr	r2, [pc, #328]	; (8004750 <HAL_ADC_Init+0x2a8>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f7ff fd3c 	bl	800408c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004614:	f7ff fd18 	bl	8004048 <HAL_GetREVID>
 8004618:	4603      	mov	r3, r0
 800461a:	f241 0203 	movw	r2, #4099	; 0x1003
 800461e:	4293      	cmp	r3, r2
 8004620:	d914      	bls.n	800464c <HAL_ADC_Init+0x1a4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b10      	cmp	r3, #16
 8004628:	d110      	bne.n	800464c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	7d5b      	ldrb	r3, [r3, #21]
 800462e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004634:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800463a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7f1b      	ldrb	r3, [r3, #28]
 8004640:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004642:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004644:	f043 030c 	orr.w	r3, r3, #12
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e00d      	b.n	8004668 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	7d5b      	ldrb	r3, [r3, #21]
 8004650:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004656:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800465c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	7f1b      	ldrb	r3, [r3, #28]
 8004662:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004664:	4313      	orrs	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7f1b      	ldrb	r3, [r3, #28]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	3b01      	subs	r3, #1
 8004676:	045b      	lsls	r3, r3, #17
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_ADC_Init+0x2ac>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	430b      	orrs	r3, r1
 80046ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fed2 	bl	800445c <LL_ADC_REG_IsConversionOngoing>
 80046b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fedf 	bl	8004482 <LL_ADC_INJ_IsConversionOngoing>
 80046c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d15f      	bne.n	800478c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d15c      	bne.n	800478c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7d1b      	ldrb	r3, [r3, #20]
 80046d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <HAL_ADC_Init+0x2b0>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	69b9      	ldr	r1, [r7, #24]
 80046f0:	430b      	orrs	r3, r1
 80046f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d130      	bne.n	8004760 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_ADC_Init+0x2b4>)
 800470c:	4013      	ands	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004712:	3a01      	subs	r2, #1
 8004714:	0411      	lsls	r1, r2, #16
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004726:	430a      	orrs	r2, r1
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	611a      	str	r2, [r3, #16]
 8004734:	e01c      	b.n	8004770 <HAL_ADC_Init+0x2c8>
 8004736:	bf00      	nop
 8004738:	24000090 	.word	0x24000090
 800473c:	053e2d63 	.word	0x053e2d63
 8004740:	40022000 	.word	0x40022000
 8004744:	40022100 	.word	0x40022100
 8004748:	58026000 	.word	0x58026000
 800474c:	40022300 	.word	0x40022300
 8004750:	58026300 	.word	0x58026300
 8004754:	fff0c003 	.word	0xfff0c003
 8004758:	ffffbffc 	.word	0xffffbffc
 800475c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fdec 	bl	8005364 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d10c      	bne.n	80047ae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f023 010f 	bic.w	r1, r3, #15
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	1e5a      	subs	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
 80047ac:	e007      	b.n	80047be <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 020f 	bic.w	r2, r2, #15
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
 80047ce:	e007      	b.n	80047e0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f043 0210 	orr.w	r2, r3, #16
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3724      	adds	r7, #36	; 0x24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}
 80047ea:	bf00      	nop

080047ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a55      	ldr	r2, [pc, #340]	; (8004954 <HAL_ADC_Start_DMA+0x168>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_ADC_Start_DMA+0x20>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a54      	ldr	r2, [pc, #336]	; (8004958 <HAL_ADC_Start_DMA+0x16c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_ADC_Start_DMA+0x24>
 800480c:	4b53      	ldr	r3, [pc, #332]	; (800495c <HAL_ADC_Start_DMA+0x170>)
 800480e:	e000      	b.n	8004812 <HAL_ADC_Start_DMA+0x26>
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_ADC_Start_DMA+0x174>)
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fd64 	bl	80042e0 <LL_ADC_GetMultimode>
 8004818:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fe1c 	bl	800445c <LL_ADC_REG_IsConversionOngoing>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 808c 	bne.w	8004944 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_ADC_Start_DMA+0x4e>
 8004836:	2302      	movs	r3, #2
 8004838:	e087      	b.n	800494a <HAL_ADC_Start_DMA+0x15e>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b05      	cmp	r3, #5
 800484c:	d002      	beq.n	8004854 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b09      	cmp	r3, #9
 8004852:	d170      	bne.n	8004936 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fc07 	bl	8005068 <ADC_Enable>
 800485a:	4603      	mov	r3, r0
 800485c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d163      	bne.n	800492c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004868:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <HAL_ADC_Start_DMA+0x178>)
 800486a:	4013      	ands	r3, r2
 800486c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a37      	ldr	r2, [pc, #220]	; (8004958 <HAL_ADC_Start_DMA+0x16c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d002      	beq.n	8004884 <HAL_ADC_Start_DMA+0x98>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	e000      	b.n	8004886 <HAL_ADC_Start_DMA+0x9a>
 8004884:	4b33      	ldr	r3, [pc, #204]	; (8004954 <HAL_ADC_Start_DMA+0x168>)
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	4293      	cmp	r3, r2
 800488c:	d002      	beq.n	8004894 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b0:	f023 0206 	bic.w	r2, r3, #6
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	659a      	str	r2, [r3, #88]	; 0x58
 80048b8:	e002      	b.n	80048c0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c4:	4a28      	ldr	r2, [pc, #160]	; (8004968 <HAL_ADC_Start_DMA+0x17c>)
 80048c6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <HAL_ADC_Start_DMA+0x180>)
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	4a26      	ldr	r2, [pc, #152]	; (8004970 <HAL_ADC_Start_DMA+0x184>)
 80048d6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	221c      	movs	r2, #28
 80048de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0210 	orr.w	r2, r2, #16
 80048f6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7ff fc89 	bl	800421a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3340      	adds	r3, #64	; 0x40
 8004912:	4619      	mov	r1, r3
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f002 f80e 	bl	8006938 <HAL_DMA_Start_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fd85 	bl	8004434 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800492a:	e00d      	b.n	8004948 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004934:	e008      	b.n	8004948 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004942:	e001      	b.n	8004948 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004944:	2302      	movs	r3, #2
 8004946:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004948:	7dfb      	ldrb	r3, [r7, #23]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40022000 	.word	0x40022000
 8004958:	40022100 	.word	0x40022100
 800495c:	40022300 	.word	0x40022300
 8004960:	58026300 	.word	0x58026300
 8004964:	fffff0fe 	.word	0xfffff0fe
 8004968:	0800523b 	.word	0x0800523b
 800496c:	08005313 	.word	0x08005313
 8004970:	0800532f 	.word	0x0800532f

08004974 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b0a1      	sub	sp, #132	; 0x84
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4a65      	ldr	r2, [pc, #404]	; (8004b60 <HAL_ADC_ConfigChannel+0x1b0>)
 80049ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_ADC_ConfigChannel+0x2a>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e32e      	b.n	8005038 <HAL_ADC_ConfigChannel+0x688>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fd38 	bl	800445c <LL_ADC_REG_IsConversionOngoing>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 8313 	bne.w	800501a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db2c      	blt.n	8004a56 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d108      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x6a>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	2201      	movs	r2, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	e016      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x98>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a2a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004a32:	2320      	movs	r3, #32
 8004a34:	e003      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a38:	fab3 f383 	clz	r3, r3
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2201      	movs	r2, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	69d1      	ldr	r1, [r2, #28]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	430b      	orrs	r3, r1
 8004a54:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f7ff fbad 	bl	80041c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fcf5 	bl	800445c <LL_ADC_REG_IsConversionOngoing>
 8004a72:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fd02 	bl	8004482 <LL_ADC_INJ_IsConversionOngoing>
 8004a7e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 80b8 	bne.w	8004bf8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 80b4 	bne.w	8004bf8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6819      	ldr	r1, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f7ff fbcf 	bl	8004240 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <HAL_ADC_ConfigChannel+0x1b4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aae:	d10b      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x118>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695a      	ldr	r2, [r3, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	089b      	lsrs	r3, r3, #2
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	e01d      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x154>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x13e>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	089b      	lsrs	r3, r3, #2
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	e00a      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x154>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d02c      	beq.n	8004b68 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6919      	ldr	r1, [r3, #16]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b1c:	f7ff faea 	bl	80040f4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6919      	ldr	r1, [r3, #16]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	7e5b      	ldrb	r3, [r3, #25]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d102      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x186>
 8004b30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b34:	e000      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x188>
 8004b36:	2300      	movs	r3, #0
 8004b38:	461a      	mov	r2, r3
 8004b3a:	f7ff fb14 	bl	8004166 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6919      	ldr	r1, [r3, #16]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	7e1b      	ldrb	r3, [r3, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d102      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x1a4>
 8004b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b52:	e000      	b.n	8004b56 <HAL_ADC_ConfigChannel+0x1a6>
 8004b54:	2300      	movs	r3, #0
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7ff faec 	bl	8004134 <LL_ADC_SetDataRightShift>
 8004b5c:	e04c      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x248>
 8004b5e:	bf00      	nop
 8004b60:	47ff0000 	.word	0x47ff0000
 8004b64:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	069b      	lsls	r3, r3, #26
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d107      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	069b      	lsls	r3, r3, #26
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d107      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	069b      	lsls	r3, r3, #26
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d107      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bd2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	069b      	lsls	r3, r3, #26
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d107      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bf6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fbf3 	bl	80043e8 <LL_ADC_IsEnabled>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 8211 	bne.w	800502c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6819      	ldr	r1, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f7ff fb3e 	bl	8004298 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4aa1      	ldr	r2, [pc, #644]	; (8004ea8 <HAL_ADC_ConfigChannel+0x4f8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f040 812e 	bne.w	8004e84 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x2a0>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0e9b      	lsrs	r3, r3, #26
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	2b09      	cmp	r3, #9
 8004c46:	bf94      	ite	ls
 8004c48:	2301      	movls	r3, #1
 8004c4a:	2300      	movhi	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e019      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x2d4>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	e003      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	2b09      	cmp	r3, #9
 8004c7c:	bf94      	ite	ls
 8004c7e:	2301      	movls	r3, #1
 8004c80:	2300      	movhi	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d079      	beq.n	8004d7c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x2f4>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0e9b      	lsrs	r3, r3, #26
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	069b      	lsls	r3, r3, #26
 8004c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca2:	e015      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x320>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cac:	fa93 f3a3 	rbit	r3, r3
 8004cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004cbc:	2320      	movs	r3, #32
 8004cbe:	e003      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	069b      	lsls	r3, r3, #26
 8004ccc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x340>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0e9b      	lsrs	r3, r3, #26
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2101      	movs	r1, #1
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	e017      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x370>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004d08:	2320      	movs	r3, #32
 8004d0a:	e003      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	ea42 0103 	orr.w	r1, r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <HAL_ADC_ConfigChannel+0x396>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	0e9b      	lsrs	r3, r3, #26
 8004d36:	3301      	adds	r3, #1
 8004d38:	f003 021f 	and.w	r2, r3, #31
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	051b      	lsls	r3, r3, #20
 8004d44:	e018      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x3c8>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004d5e:	2320      	movs	r3, #32
 8004d60:	e003      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	fab3 f383 	clz	r3, r3
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f003 021f 	and.w	r2, r3, #31
 8004d70:	4613      	mov	r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	4413      	add	r3, r2
 8004d76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	e07e      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d107      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x3e8>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0e9b      	lsrs	r3, r3, #26
 8004d8e:	3301      	adds	r3, #1
 8004d90:	069b      	lsls	r3, r3, #26
 8004d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d96:	e015      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x414>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004db0:	2320      	movs	r3, #32
 8004db2:	e003      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	fab3 f383 	clz	r3, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	069b      	lsls	r3, r3, #26
 8004dc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x434>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	0e9b      	lsrs	r3, r3, #26
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	e017      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x464>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa93 f3a3 	rbit	r3, r3
 8004df0:	61bb      	str	r3, [r7, #24]
  return result;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	e003      	b.n	8004e08 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	fab3 f383 	clz	r3, r3
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	3301      	adds	r3, #1
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2101      	movs	r1, #1
 8004e10:	fa01 f303 	lsl.w	r3, r1, r3
 8004e14:	ea42 0103 	orr.w	r1, r2, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10d      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x490>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	0e9b      	lsrs	r3, r3, #26
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f003 021f 	and.w	r2, r3, #31
 8004e30:	4613      	mov	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4413      	add	r3, r2
 8004e36:	3b1e      	subs	r3, #30
 8004e38:	051b      	lsls	r3, r3, #20
 8004e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	e01b      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x4c8>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	fa93 f3a3 	rbit	r3, r3
 8004e4c:	60fb      	str	r3, [r7, #12]
  return result;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004e58:	2320      	movs	r3, #32
 8004e5a:	e003      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3301      	adds	r3, #1
 8004e66:	f003 021f 	and.w	r2, r3, #31
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	4413      	add	r3, r2
 8004e70:	3b1e      	subs	r3, #30
 8004e72:	051b      	lsls	r3, r3, #20
 8004e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	6892      	ldr	r2, [r2, #8]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f7ff f9de 	bl	8004240 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f280 80cf 	bge.w	800502c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a06      	ldr	r2, [pc, #24]	; (8004eac <HAL_ADC_ConfigChannel+0x4fc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_ADC_ConfigChannel+0x4f2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <HAL_ADC_ConfigChannel+0x500>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x508>
 8004ea2:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <HAL_ADC_ConfigChannel+0x504>)
 8004ea4:	e009      	b.n	8004eba <HAL_ADC_ConfigChannel+0x50a>
 8004ea6:	bf00      	nop
 8004ea8:	47ff0000 	.word	0x47ff0000
 8004eac:	40022000 	.word	0x40022000
 8004eb0:	40022100 	.word	0x40022100
 8004eb4:	40022300 	.word	0x40022300
 8004eb8:	4b61      	ldr	r3, [pc, #388]	; (8005040 <HAL_ADC_ConfigChannel+0x690>)
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff f90c 	bl	80040d8 <LL_ADC_GetCommonPathInternalCh>
 8004ec0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a5f      	ldr	r2, [pc, #380]	; (8005044 <HAL_ADC_ConfigChannel+0x694>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_ADC_ConfigChannel+0x526>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a5d      	ldr	r2, [pc, #372]	; (8005048 <HAL_ADC_ConfigChannel+0x698>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10e      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x544>
 8004ed6:	485b      	ldr	r0, [pc, #364]	; (8005044 <HAL_ADC_ConfigChannel+0x694>)
 8004ed8:	f7ff fa86 	bl	80043e8 <LL_ADC_IsEnabled>
 8004edc:	4604      	mov	r4, r0
 8004ede:	485a      	ldr	r0, [pc, #360]	; (8005048 <HAL_ADC_ConfigChannel+0x698>)
 8004ee0:	f7ff fa82 	bl	80043e8 <LL_ADC_IsEnabled>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4323      	orrs	r3, r4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e008      	b.n	8004f06 <HAL_ADC_ConfigChannel+0x556>
 8004ef4:	4855      	ldr	r0, [pc, #340]	; (800504c <HAL_ADC_ConfigChannel+0x69c>)
 8004ef6:	f7ff fa77 	bl	80043e8 <LL_ADC_IsEnabled>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d07d      	beq.n	8005006 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a50      	ldr	r2, [pc, #320]	; (8005050 <HAL_ADC_ConfigChannel+0x6a0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d130      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x5c6>
 8004f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d12b      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a4a      	ldr	r2, [pc, #296]	; (800504c <HAL_ADC_ConfigChannel+0x69c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	f040 8081 	bne.w	800502c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a45      	ldr	r2, [pc, #276]	; (8005044 <HAL_ADC_ConfigChannel+0x694>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_ADC_ConfigChannel+0x58e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a43      	ldr	r2, [pc, #268]	; (8005048 <HAL_ADC_ConfigChannel+0x698>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d101      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x592>
 8004f3e:	4a45      	ldr	r2, [pc, #276]	; (8005054 <HAL_ADC_ConfigChannel+0x6a4>)
 8004f40:	e000      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x594>
 8004f42:	4a3f      	ldr	r2, [pc, #252]	; (8005040 <HAL_ADC_ConfigChannel+0x690>)
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f7ff f8b0 	bl	80040b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f52:	4b41      	ldr	r3, [pc, #260]	; (8005058 <HAL_ADC_ConfigChannel+0x6a8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	4a40      	ldr	r2, [pc, #256]	; (800505c <HAL_ADC_ConfigChannel+0x6ac>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	099b      	lsrs	r3, r3, #6
 8004f60:	3301      	adds	r3, #1
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f66:	e002      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f9      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f74:	e05a      	b.n	800502c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a39      	ldr	r2, [pc, #228]	; (8005060 <HAL_ADC_ConfigChannel+0x6b0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d11e      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x60e>
 8004f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d119      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2f      	ldr	r2, [pc, #188]	; (800504c <HAL_ADC_ConfigChannel+0x69c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d14b      	bne.n	800502c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <HAL_ADC_ConfigChannel+0x694>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_ADC_ConfigChannel+0x5f8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a29      	ldr	r2, [pc, #164]	; (8005048 <HAL_ADC_ConfigChannel+0x698>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x5fc>
 8004fa8:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <HAL_ADC_ConfigChannel+0x6a4>)
 8004faa:	e000      	b.n	8004fae <HAL_ADC_ConfigChannel+0x5fe>
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <HAL_ADC_ConfigChannel+0x690>)
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f7ff f87b 	bl	80040b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fbc:	e036      	b.n	800502c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a28      	ldr	r2, [pc, #160]	; (8005064 <HAL_ADC_ConfigChannel+0x6b4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d131      	bne.n	800502c <HAL_ADC_ConfigChannel+0x67c>
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d12c      	bne.n	800502c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1d      	ldr	r2, [pc, #116]	; (800504c <HAL_ADC_ConfigChannel+0x69c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d127      	bne.n	800502c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	; (8005044 <HAL_ADC_ConfigChannel+0x694>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_ADC_ConfigChannel+0x640>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <HAL_ADC_ConfigChannel+0x698>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x644>
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <HAL_ADC_ConfigChannel+0x6a4>)
 8004ff2:	e000      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x646>
 8004ff4:	4a12      	ldr	r2, [pc, #72]	; (8005040 <HAL_ADC_ConfigChannel+0x690>)
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7ff f857 	bl	80040b2 <LL_ADC_SetCommonPathInternalCh>
 8005004:	e012      	b.n	800502c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005018:	e008      	b.n	800502c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	f043 0220 	orr.w	r2, r3, #32
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005034:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005038:	4618      	mov	r0, r3
 800503a:	3784      	adds	r7, #132	; 0x84
 800503c:	46bd      	mov	sp, r7
 800503e:	bd90      	pop	{r4, r7, pc}
 8005040:	58026300 	.word	0x58026300
 8005044:	40022000 	.word	0x40022000
 8005048:	40022100 	.word	0x40022100
 800504c:	58026000 	.word	0x58026000
 8005050:	cb840000 	.word	0xcb840000
 8005054:	40022300 	.word	0x40022300
 8005058:	24000090 	.word	0x24000090
 800505c:	053e2d63 	.word	0x053e2d63
 8005060:	c7520000 	.word	0xc7520000
 8005064:	cfb80000 	.word	0xcfb80000

08005068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff f9b7 	bl	80043e8 <LL_ADC_IsEnabled>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d16e      	bne.n	800515e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	4b38      	ldr	r3, [pc, #224]	; (8005168 <ADC_Enable+0x100>)
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	f043 0210 	orr.w	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e05a      	b.n	8005160 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff f972 	bl	8004398 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050b4:	f7fe ffbc 	bl	8004030 <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2b      	ldr	r2, [pc, #172]	; (800516c <ADC_Enable+0x104>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <ADC_Enable+0x66>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a29      	ldr	r2, [pc, #164]	; (8005170 <ADC_Enable+0x108>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <ADC_Enable+0x6a>
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <ADC_Enable+0x10c>)
 80050d0:	e000      	b.n	80050d4 <ADC_Enable+0x6c>
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <ADC_Enable+0x110>)
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff f903 	bl	80042e0 <LL_ADC_GetMultimode>
 80050da:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <ADC_Enable+0x108>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d002      	beq.n	80050ec <ADC_Enable+0x84>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	e000      	b.n	80050ee <ADC_Enable+0x86>
 80050ec:	4b1f      	ldr	r3, [pc, #124]	; (800516c <ADC_Enable+0x104>)
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02c      	beq.n	8005150 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d130      	bne.n	800515e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050fc:	e028      	b.n	8005150 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff f970 	bl	80043e8 <LL_ADC_IsEnabled>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d104      	bne.n	8005118 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff f940 	bl	8004398 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005118:	f7fe ff8a 	bl	8004030 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d914      	bls.n	8005150 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b01      	cmp	r3, #1
 8005132:	d00d      	beq.n	8005150 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	f043 0210 	orr.w	r2, r3, #16
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	f043 0201 	orr.w	r2, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e007      	b.n	8005160 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b01      	cmp	r3, #1
 800515c:	d1cf      	bne.n	80050fe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	8000003f 	.word	0x8000003f
 800516c:	40022000 	.word	0x40022000
 8005170:	40022100 	.word	0x40022100
 8005174:	40022300 	.word	0x40022300
 8005178:	58026300 	.word	0x58026300

0800517c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff f940 	bl	800440e <LL_ADC_IsDisableOngoing>
 800518e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff f927 	bl	80043e8 <LL_ADC_IsEnabled>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d047      	beq.n	8005230 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d144      	bne.n	8005230 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030d 	and.w	r3, r3, #13
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10c      	bne.n	80051ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f901 	bl	80043c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2203      	movs	r2, #3
 80051c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051c6:	f7fe ff33 	bl	8004030 <HAL_GetTick>
 80051ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051cc:	e029      	b.n	8005222 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	f043 0210 	orr.w	r2, r3, #16
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051de:	f043 0201 	orr.w	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e023      	b.n	8005232 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051ea:	f7fe ff21 	bl	8004030 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d914      	bls.n	8005222 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00d      	beq.n	8005222 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f043 0210 	orr.w	r2, r3, #16
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	f043 0201 	orr.w	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e007      	b.n	8005232 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1dc      	bne.n	80051ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005250:	2b00      	cmp	r3, #0
 8005252:	d14b      	bne.n	80052ec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d021      	beq.n	80052b2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe ff92 	bl	800419c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d032      	beq.n	80052e4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d12b      	bne.n	80052e4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11f      	bne.n	80052e4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f043 0201 	orr.w	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
 80052b0:	e018      	b.n	80052e4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d111      	bne.n	80052e4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	f043 0201 	orr.w	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff fb45 	bl	8004974 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052ea:	e00e      	b.n	800530a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7ff fb4f 	bl	800499c <HAL_ADC_ErrorCallback>
}
 80052fe:	e004      	b.n	800530a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff fb31 	bl	8004988 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534c:	f043 0204 	orr.w	r2, r3, #4
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff fb21 	bl	800499c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a7a      	ldr	r2, [pc, #488]	; (800555c <ADC_ConfigureBoostMode+0x1f8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <ADC_ConfigureBoostMode+0x1c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a79      	ldr	r2, [pc, #484]	; (8005560 <ADC_ConfigureBoostMode+0x1fc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d109      	bne.n	8005394 <ADC_ConfigureBoostMode+0x30>
 8005380:	4b78      	ldr	r3, [pc, #480]	; (8005564 <ADC_ConfigureBoostMode+0x200>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e008      	b.n	80053a6 <ADC_ConfigureBoostMode+0x42>
 8005394:	4b74      	ldr	r3, [pc, #464]	; (8005568 <ADC_ConfigureBoostMode+0x204>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01c      	beq.n	80053e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80053aa:	f005 fd9f 	bl	800aeec <HAL_RCC_GetHCLKFreq>
 80053ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053b8:	d010      	beq.n	80053dc <ADC_ConfigureBoostMode+0x78>
 80053ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053be:	d873      	bhi.n	80054a8 <ADC_ConfigureBoostMode+0x144>
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c4:	d002      	beq.n	80053cc <ADC_ConfigureBoostMode+0x68>
 80053c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ca:	d16d      	bne.n	80054a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	60fb      	str	r3, [r7, #12]
        break;
 80053da:	e068      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	089b      	lsrs	r3, r3, #2
 80053e0:	60fb      	str	r3, [r7, #12]
        break;
 80053e2:	e064      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80053e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	f007 f826 	bl	800c43c <HAL_RCCEx_GetPeriphCLKFreq>
 80053f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80053fa:	d051      	beq.n	80054a0 <ADC_ConfigureBoostMode+0x13c>
 80053fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005400:	d854      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005402:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005406:	d047      	beq.n	8005498 <ADC_ConfigureBoostMode+0x134>
 8005408:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800540c:	d84e      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 800540e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005412:	d03d      	beq.n	8005490 <ADC_ConfigureBoostMode+0x12c>
 8005414:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005418:	d848      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 800541a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541e:	d033      	beq.n	8005488 <ADC_ConfigureBoostMode+0x124>
 8005420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005424:	d842      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005426:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800542a:	d029      	beq.n	8005480 <ADC_ConfigureBoostMode+0x11c>
 800542c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005430:	d83c      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005432:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005436:	d01a      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 8005438:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800543c:	d836      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 800543e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005442:	d014      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 8005444:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005448:	d830      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 800544a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544e:	d00e      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 8005450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005454:	d82a      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005456:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800545a:	d008      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 800545c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005460:	d824      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005466:	d002      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 8005468:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800546c:	d11e      	bne.n	80054ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	0c9b      	lsrs	r3, r3, #18
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	60fb      	str	r3, [r7, #12]
        break;
 800547e:	e016      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	60fb      	str	r3, [r7, #12]
        break;
 8005486:	e012      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	60fb      	str	r3, [r7, #12]
        break;
 800548e:	e00e      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	099b      	lsrs	r3, r3, #6
 8005494:	60fb      	str	r3, [r7, #12]
        break;
 8005496:	e00a      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]
        break;
 800549e:	e006      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	60fb      	str	r3, [r7, #12]
        break;
 80054a6:	e002      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80054a8:	bf00      	nop
 80054aa:	e000      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80054ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80054ae:	f7fe fdcb 	bl	8004048 <HAL_GetREVID>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d815      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a2b      	ldr	r2, [pc, #172]	; (800556c <ADC_ConfigureBoostMode+0x208>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d908      	bls.n	80054d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80054d4:	e03e      	b.n	8005554 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e4:	609a      	str	r2, [r3, #8]
}
 80054e6:	e035      	b.n	8005554 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <ADC_ConfigureBoostMode+0x20c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d808      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005504:	609a      	str	r2, [r3, #8]
}
 8005506:	e025      	b.n	8005554 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <ADC_ConfigureBoostMode+0x210>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d80a      	bhi.n	8005526 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005522:	609a      	str	r2, [r3, #8]
}
 8005524:	e016      	b.n	8005554 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a13      	ldr	r2, [pc, #76]	; (8005578 <ADC_ConfigureBoostMode+0x214>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d80a      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	e007      	b.n	8005554 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40022000 	.word	0x40022000
 8005560:	40022100 	.word	0x40022100
 8005564:	40022300 	.word	0x40022300
 8005568:	58026300 	.word	0x58026300
 800556c:	01312d00 	.word	0x01312d00
 8005570:	005f5e10 	.word	0x005f5e10
 8005574:	00bebc20 	.word	0x00bebc20
 8005578:	017d7840 	.word	0x017d7840

0800557c <LL_ADC_IsEnabled>:
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <LL_ADC_IsEnabled+0x18>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <LL_ADC_IsEnabled+0x1a>
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <LL_ADC_StartCalibration>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <LL_ADC_StartCalibration+0x38>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055c4:	430a      	orrs	r2, r1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	3ffeffc0 	.word	0x3ffeffc0

080055e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f4:	d101      	bne.n	80055fa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <LL_ADC_REG_IsConversionOngoing>:
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d101      	bne.n	8005620 <LL_ADC_REG_IsConversionOngoing+0x18>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_ADCEx_Calibration_Start+0x1e>
 800564a:	2302      	movs	r3, #2
 800564c:	e04c      	b.n	80056e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff fd90 	bl	800517c <ADC_Disable>
 800565c:	4603      	mov	r3, r0
 800565e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d135      	bne.n	80056d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800566a:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800566c:	4013      	ands	r3, r2
 800566e:	f043 0202 	orr.w	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff ff90 	bl	80055a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005684:	e014      	b.n	80056b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	3301      	adds	r3, #1
 800568a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d30d      	bcc.n	80056b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005698:	f023 0312 	bic.w	r3, r3, #18
 800569c:	f043 0210 	orr.w	r2, r3, #16
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e01b      	b.n	80056e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff ff93 	bl	80055e0 <LL_ADC_IsCalibrationOnGoing>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e2      	bne.n	8005686 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	f023 0303 	bic.w	r3, r3, #3
 80056c8:	f043 0201 	orr.w	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
 80056d0:	e005      	b.n	80056de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f043 0210 	orr.w	r2, r3, #16
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	ffffeefd 	.word	0xffffeefd
 80056f4:	25c3f800 	.word	0x25c3f800

080056f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056f8:	b590      	push	{r4, r7, lr}
 80056fa:	b09f      	sub	sp, #124	; 0x7c
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005712:	2302      	movs	r3, #2
 8005714:	e0be      	b.n	8005894 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800571e:	2300      	movs	r3, #0
 8005720:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005722:	2300      	movs	r3, #0
 8005724:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a5c      	ldr	r2, [pc, #368]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d102      	bne.n	8005736 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005730:	4b5b      	ldr	r3, [pc, #364]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	e001      	b.n	800573a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e09d      	b.n	8005894 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff ff54 	bl	8005608 <LL_ADC_REG_IsConversionOngoing>
 8005760:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff ff4e 	bl	8005608 <LL_ADC_REG_IsConversionOngoing>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d17f      	bne.n	8005872 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005774:	2b00      	cmp	r3, #0
 8005776:	d17c      	bne.n	8005872 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a47      	ldr	r2, [pc, #284]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a46      	ldr	r2, [pc, #280]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d101      	bne.n	8005790 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800578c:	4b45      	ldr	r3, [pc, #276]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800578e:	e000      	b.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005790:	4b45      	ldr	r3, [pc, #276]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005792:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d039      	beq.n	8005810 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800579c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a3a      	ldr	r2, [pc, #232]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a38      	ldr	r2, [pc, #224]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10e      	bne.n	80057e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80057c2:	4836      	ldr	r0, [pc, #216]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057c4:	f7ff feda 	bl	800557c <LL_ADC_IsEnabled>
 80057c8:	4604      	mov	r4, r0
 80057ca:	4835      	ldr	r0, [pc, #212]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057cc:	f7ff fed6 	bl	800557c <LL_ADC_IsEnabled>
 80057d0:	4603      	mov	r3, r0
 80057d2:	4323      	orrs	r3, r4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bf0c      	ite	eq
 80057d8:	2301      	moveq	r3, #1
 80057da:	2300      	movne	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	e008      	b.n	80057f2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80057e0:	4832      	ldr	r0, [pc, #200]	; (80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80057e2:	f7ff fecb 	bl	800557c <LL_ADC_IsEnabled>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d047      	beq.n	8005886 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80057f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	4b2d      	ldr	r3, [pc, #180]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	6892      	ldr	r2, [r2, #8]
 8005806:	430a      	orrs	r2, r1
 8005808:	431a      	orrs	r2, r3
 800580a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800580e:	e03a      	b.n	8005886 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1e      	ldr	r2, [pc, #120]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10e      	bne.n	800584e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005830:	481a      	ldr	r0, [pc, #104]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005832:	f7ff fea3 	bl	800557c <LL_ADC_IsEnabled>
 8005836:	4604      	mov	r4, r0
 8005838:	4819      	ldr	r0, [pc, #100]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800583a:	f7ff fe9f 	bl	800557c <LL_ADC_IsEnabled>
 800583e:	4603      	mov	r3, r0
 8005840:	4323      	orrs	r3, r4
 8005842:	2b00      	cmp	r3, #0
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	e008      	b.n	8005860 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800584e:	4817      	ldr	r0, [pc, #92]	; (80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005850:	f7ff fe94 	bl	800557c <LL_ADC_IsEnabled>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf0c      	ite	eq
 800585a:	2301      	moveq	r3, #1
 800585c:	2300      	movne	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d010      	beq.n	8005886 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800586a:	4013      	ands	r3, r2
 800586c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800586e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005870:	e009      	b.n	8005886 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005884:	e000      	b.n	8005888 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005886:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005890:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005894:	4618      	mov	r0, r3
 8005896:	377c      	adds	r7, #124	; 0x7c
 8005898:	46bd      	mov	sp, r7
 800589a:	bd90      	pop	{r4, r7, pc}
 800589c:	40022000 	.word	0x40022000
 80058a0:	40022100 	.word	0x40022100
 80058a4:	40022300 	.word	0x40022300
 80058a8:	58026300 	.word	0x58026300
 80058ac:	58026000 	.word	0x58026000
 80058b0:	fffff0e0 	.word	0xfffff0e0

080058b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <__NVIC_SetPriorityGrouping+0x40>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058d0:	4013      	ands	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <__NVIC_SetPriorityGrouping+0x44>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <__NVIC_SetPriorityGrouping+0x40>)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	60d3      	str	r3, [r2, #12]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000ed00 	.word	0xe000ed00
 80058f8:	05fa0000 	.word	0x05fa0000

080058fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005900:	4b04      	ldr	r3, [pc, #16]	; (8005914 <__NVIC_GetPriorityGrouping+0x18>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	f003 0307 	and.w	r3, r3, #7
}
 800590a:	4618      	mov	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	e000ed00 	.word	0xe000ed00

08005918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005926:	2b00      	cmp	r3, #0
 8005928:	db0b      	blt.n	8005942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	f003 021f 	and.w	r2, r3, #31
 8005930:	4907      	ldr	r1, [pc, #28]	; (8005950 <__NVIC_EnableIRQ+0x38>)
 8005932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	2001      	movs	r0, #1
 800593a:	fa00 f202 	lsl.w	r2, r0, r2
 800593e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000e100 	.word	0xe000e100

08005954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	6039      	str	r1, [r7, #0]
 800595e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	db0a      	blt.n	800597e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	490c      	ldr	r1, [pc, #48]	; (80059a0 <__NVIC_SetPriority+0x4c>)
 800596e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005972:	0112      	lsls	r2, r2, #4
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	440b      	add	r3, r1
 8005978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800597c:	e00a      	b.n	8005994 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	4908      	ldr	r1, [pc, #32]	; (80059a4 <__NVIC_SetPriority+0x50>)
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	3b04      	subs	r3, #4
 800598c:	0112      	lsls	r2, r2, #4
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	440b      	add	r3, r1
 8005992:	761a      	strb	r2, [r3, #24]
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	e000e100 	.word	0xe000e100
 80059a4:	e000ed00 	.word	0xe000ed00

080059a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b089      	sub	sp, #36	; 0x24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f1c3 0307 	rsb	r3, r3, #7
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	bf28      	it	cs
 80059c6:	2304      	movcs	r3, #4
 80059c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	3304      	adds	r3, #4
 80059ce:	2b06      	cmp	r3, #6
 80059d0:	d902      	bls.n	80059d8 <NVIC_EncodePriority+0x30>
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3b03      	subs	r3, #3
 80059d6:	e000      	b.n	80059da <NVIC_EncodePriority+0x32>
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43da      	mvns	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	401a      	ands	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	fa01 f303 	lsl.w	r3, r1, r3
 80059fa:	43d9      	mvns	r1, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a00:	4313      	orrs	r3, r2
         );
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3724      	adds	r7, #36	; 0x24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff ff4c 	bl	80058b4 <__NVIC_SetPriorityGrouping>
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a32:	f7ff ff63 	bl	80058fc <__NVIC_GetPriorityGrouping>
 8005a36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	6978      	ldr	r0, [r7, #20]
 8005a3e:	f7ff ffb3 	bl	80059a8 <NVIC_EncodePriority>
 8005a42:	4602      	mov	r2, r0
 8005a44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ff82 	bl	8005954 <__NVIC_SetPriority>
}
 8005a50:	bf00      	nop
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff56 	bl	8005918 <__NVIC_EnableIRQ>
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e014      	b.n	8005ab0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	791b      	ldrb	r3, [r3, #4]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fd fc76 	bl	8003388 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e046      	b.n	8005b5a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	795b      	ldrb	r3, [r3, #5]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_DAC_Start+0x20>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e040      	b.n	8005b5a <HAL_DAC_Start+0xa2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2201      	movs	r2, #1
 8005af2:	409a      	lsls	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10f      	bne.n	8005b22 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d11d      	bne.n	8005b4c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	e014      	b.n	8005b4c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2102      	movs	r1, #2
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d107      	bne.n	8005b4c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0202 	orr.w	r2, r2, #2
 8005b4a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0a2      	b.n	8005cc6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	795b      	ldrb	r3, [r3, #5]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_DAC_Start_DMA+0x24>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e09c      	b.n	8005cc6 <HAL_DAC_Start_DMA+0x15e>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2202      	movs	r2, #2
 8005b96:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d129      	bne.n	8005bf2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	4a4b      	ldr	r2, [pc, #300]	; (8005cd0 <HAL_DAC_Start_DMA+0x168>)
 8005ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4a4a      	ldr	r2, [pc, #296]	; (8005cd4 <HAL_DAC_Start_DMA+0x16c>)
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	4a49      	ldr	r2, [pc, #292]	; (8005cd8 <HAL_DAC_Start_DMA+0x170>)
 8005bb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bc4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_DAC_Start_DMA+0x6c>
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d005      	beq.n	8005bde <HAL_DAC_Start_DMA+0x76>
 8005bd2:	e009      	b.n	8005be8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	613b      	str	r3, [r7, #16]
        break;
 8005bdc:	e033      	b.n	8005c46 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	330c      	adds	r3, #12
 8005be4:	613b      	str	r3, [r7, #16]
        break;
 8005be6:	e02e      	b.n	8005c46 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3310      	adds	r3, #16
 8005bee:	613b      	str	r3, [r7, #16]
        break;
 8005bf0:	e029      	b.n	8005c46 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	4a39      	ldr	r2, [pc, #228]	; (8005cdc <HAL_DAC_Start_DMA+0x174>)
 8005bf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	4a38      	ldr	r2, [pc, #224]	; (8005ce0 <HAL_DAC_Start_DMA+0x178>)
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	4a37      	ldr	r2, [pc, #220]	; (8005ce4 <HAL_DAC_Start_DMA+0x17c>)
 8005c08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c18:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_DAC_Start_DMA+0xc0>
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d005      	beq.n	8005c32 <HAL_DAC_Start_DMA+0xca>
 8005c26:	e009      	b.n	8005c3c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3314      	adds	r3, #20
 8005c2e:	613b      	str	r3, [r7, #16]
        break;
 8005c30:	e009      	b.n	8005c46 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3318      	adds	r3, #24
 8005c38:	613b      	str	r3, [r7, #16]
        break;
 8005c3a:	e004      	b.n	8005c46 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	331c      	adds	r3, #28
 8005c42:	613b      	str	r3, [r7, #16]
        break;
 8005c44:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d111      	bne.n	8005c70 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6898      	ldr	r0, [r3, #8]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	f000 fe67 	bl	8006938 <HAL_DMA_Start_IT>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]
 8005c6e:	e010      	b.n	8005c92 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005c7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68d8      	ldr	r0, [r3, #12]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	f000 fe55 	bl	8006938 <HAL_DMA_Start_IT>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2201      	movs	r2, #1
 8005cac:	409a      	lsls	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e005      	b.n	8005cc4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f043 0204 	orr.w	r2, r3, #4
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	08006159 	.word	0x08006159
 8005cd4:	0800617b 	.word	0x0800617b
 8005cd8:	08006197 	.word	0x08006197
 8005cdc:	08006215 	.word	0x08006215
 8005ce0:	08006237 	.word	0x08006237
 8005ce4:	08006253 	.word	0x08006253

08005ce8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e03e      	b.n	8005d7a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6819      	ldr	r1, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43da      	mvns	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	400a      	ands	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2201      	movs	r2, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	43da      	mvns	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	400a      	ands	r2, r1
 8005d34:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10d      	bne.n	8005d58 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 f863 	bl	8006e0c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e00c      	b.n	8005d72 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 f855 	bl	8006e0c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005d70:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01d      	beq.n	8005de0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d018      	beq.n	8005de0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2204      	movs	r2, #4
 8005db2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f043 0201 	orr.w	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dd8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f86f 	bl	8005ebe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01d      	beq.n	8005e26 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d018      	beq.n	8005e26 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2204      	movs	r2, #4
 8005df8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f043 0202 	orr.w	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f9ed 	bl	8006200 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005e26:	bf00      	nop
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b087      	sub	sp, #28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e015      	b.n	8005e76 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d105      	bne.n	8005e62 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e004      	b.n	8005e6c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	3314      	adds	r3, #20
 8005e6a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
	...

08005ed4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	; 0x28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <HAL_DAC_ConfigChannel+0x1e>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e12a      	b.n	800614c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	795b      	ldrb	r3, [r3, #5]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_DAC_ConfigChannel+0x2e>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e124      	b.n	800614c <HAL_DAC_ConfigChannel+0x278>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d17a      	bne.n	800600c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005f16:	f7fe f88b 	bl	8004030 <HAL_GetTick>
 8005f1a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d13d      	bne.n	8005f9e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f22:	e018      	b.n	8005f56 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f24:	f7fe f884 	bl	8004030 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d911      	bls.n	8005f56 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f38:	4b86      	ldr	r3, [pc, #536]	; (8006154 <HAL_DAC_ConfigChannel+0x280>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f043 0208 	orr.w	r2, r3, #8
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0fa      	b.n	800614c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5c:	4b7d      	ldr	r3, [pc, #500]	; (8006154 <HAL_DAC_ConfigChannel+0x280>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1df      	bne.n	8005f24 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	6992      	ldr	r2, [r2, #24]
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8005f6e:	e020      	b.n	8005fb2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f70:	f7fe f85e 	bl	8004030 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d90f      	bls.n	8005f9e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da0a      	bge.n	8005f9e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f043 0208 	orr.w	r2, r3, #8
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2203      	movs	r2, #3
 8005f98:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e0d6      	b.n	800614c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	dbe3      	blt.n	8005f70 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	6992      	ldr	r2, [r2, #24]
 8005fb0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f003 0310 	and.w	r3, r3, #16
 8005fbe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	ea02 0103 	and.w	r1, r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	21ff      	movs	r1, #255	; 0xff
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	ea02 0103 	and.w	r1, r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6a1a      	ldr	r2, [r3, #32]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	409a      	lsls	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d11d      	bne.n	8006050 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0310 	and.w	r3, r3, #16
 8006022:	221f      	movs	r2, #31
 8006024:	fa02 f303 	lsl.w	r3, r2, r3
 8006028:	43db      	mvns	r3, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4013      	ands	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4313      	orrs	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2207      	movs	r2, #7
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4013      	ands	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d102      	bne.n	800607a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006074:	2300      	movs	r3, #0
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
 8006078:	e00f      	b.n	800609a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d102      	bne.n	8006088 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006082:	2301      	movs	r3, #1
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
 8006086:	e008      	b.n	800609a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006090:	2301      	movs	r3, #1
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
 8006094:	e001      	b.n	800609a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	43da      	mvns	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	400a      	ands	r2, r1
 80060e0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6819      	ldr	r1, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	22c0      	movs	r2, #192	; 0xc0
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	43da      	mvns	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	400a      	ands	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800614c:	4618      	mov	r0, r3
 800614e:	3728      	adds	r7, #40	; 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20008000 	.word	0x20008000

08006158 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fe8b 	bl	8005e82 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	711a      	strb	r2, [r3, #4]
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff fe84 	bl	8005e96 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f043 0204 	orr.w	r2, r3, #4
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff fe7a 	bl	8005eaa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	711a      	strb	r2, [r3, #4]
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff ffce 	bl	80061c4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	711a      	strb	r2, [r3, #4]
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff ffc7 	bl	80061d8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f043 0204 	orr.w	r2, r3, #4
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff ffbd 	bl	80061ec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	711a      	strb	r2, [r3, #4]
}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006288:	f7fd fed2 	bl	8004030 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e316      	b.n	80068c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a66      	ldr	r2, [pc, #408]	; (8006438 <HAL_DMA_Init+0x1b8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04a      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a65      	ldr	r2, [pc, #404]	; (800643c <HAL_DMA_Init+0x1bc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d045      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a63      	ldr	r2, [pc, #396]	; (8006440 <HAL_DMA_Init+0x1c0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d040      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a62      	ldr	r2, [pc, #392]	; (8006444 <HAL_DMA_Init+0x1c4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d03b      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a60      	ldr	r2, [pc, #384]	; (8006448 <HAL_DMA_Init+0x1c8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d036      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a5f      	ldr	r2, [pc, #380]	; (800644c <HAL_DMA_Init+0x1cc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d031      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a5d      	ldr	r2, [pc, #372]	; (8006450 <HAL_DMA_Init+0x1d0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02c      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a5c      	ldr	r2, [pc, #368]	; (8006454 <HAL_DMA_Init+0x1d4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d027      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a5a      	ldr	r2, [pc, #360]	; (8006458 <HAL_DMA_Init+0x1d8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d022      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a59      	ldr	r2, [pc, #356]	; (800645c <HAL_DMA_Init+0x1dc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d01d      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a57      	ldr	r2, [pc, #348]	; (8006460 <HAL_DMA_Init+0x1e0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d018      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a56      	ldr	r2, [pc, #344]	; (8006464 <HAL_DMA_Init+0x1e4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a54      	ldr	r2, [pc, #336]	; (8006468 <HAL_DMA_Init+0x1e8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00e      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a53      	ldr	r2, [pc, #332]	; (800646c <HAL_DMA_Init+0x1ec>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d009      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a51      	ldr	r2, [pc, #324]	; (8006470 <HAL_DMA_Init+0x1f0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_DMA_Init+0xb8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a50      	ldr	r2, [pc, #320]	; (8006474 <HAL_DMA_Init+0x1f4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d101      	bne.n	800633c <HAL_DMA_Init+0xbc>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <HAL_DMA_Init+0xbe>
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 813b 	beq.w	80065ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a37      	ldr	r2, [pc, #220]	; (8006438 <HAL_DMA_Init+0x1b8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d04a      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a36      	ldr	r2, [pc, #216]	; (800643c <HAL_DMA_Init+0x1bc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d045      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a34      	ldr	r2, [pc, #208]	; (8006440 <HAL_DMA_Init+0x1c0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d040      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a33      	ldr	r2, [pc, #204]	; (8006444 <HAL_DMA_Init+0x1c4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d03b      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a31      	ldr	r2, [pc, #196]	; (8006448 <HAL_DMA_Init+0x1c8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d036      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a30      	ldr	r2, [pc, #192]	; (800644c <HAL_DMA_Init+0x1cc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d031      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2e      	ldr	r2, [pc, #184]	; (8006450 <HAL_DMA_Init+0x1d0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d02c      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a2d      	ldr	r2, [pc, #180]	; (8006454 <HAL_DMA_Init+0x1d4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d027      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a2b      	ldr	r2, [pc, #172]	; (8006458 <HAL_DMA_Init+0x1d8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d022      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a2a      	ldr	r2, [pc, #168]	; (800645c <HAL_DMA_Init+0x1dc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d01d      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a28      	ldr	r2, [pc, #160]	; (8006460 <HAL_DMA_Init+0x1e0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a27      	ldr	r2, [pc, #156]	; (8006464 <HAL_DMA_Init+0x1e4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a25      	ldr	r2, [pc, #148]	; (8006468 <HAL_DMA_Init+0x1e8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a24      	ldr	r2, [pc, #144]	; (800646c <HAL_DMA_Init+0x1ec>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a22      	ldr	r2, [pc, #136]	; (8006470 <HAL_DMA_Init+0x1f0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_DMA_Init+0x174>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a21      	ldr	r2, [pc, #132]	; (8006474 <HAL_DMA_Init+0x1f4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d108      	bne.n	8006406 <HAL_DMA_Init+0x186>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e007      	b.n	8006416 <HAL_DMA_Init+0x196>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0201 	bic.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006416:	e02f      	b.n	8006478 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006418:	f7fd fe0a 	bl	8004030 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b05      	cmp	r3, #5
 8006424:	d928      	bls.n	8006478 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2203      	movs	r2, #3
 8006430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e246      	b.n	80068c6 <HAL_DMA_Init+0x646>
 8006438:	40020010 	.word	0x40020010
 800643c:	40020028 	.word	0x40020028
 8006440:	40020040 	.word	0x40020040
 8006444:	40020058 	.word	0x40020058
 8006448:	40020070 	.word	0x40020070
 800644c:	40020088 	.word	0x40020088
 8006450:	400200a0 	.word	0x400200a0
 8006454:	400200b8 	.word	0x400200b8
 8006458:	40020410 	.word	0x40020410
 800645c:	40020428 	.word	0x40020428
 8006460:	40020440 	.word	0x40020440
 8006464:	40020458 	.word	0x40020458
 8006468:	40020470 	.word	0x40020470
 800646c:	40020488 	.word	0x40020488
 8006470:	400204a0 	.word	0x400204a0
 8006474:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1c8      	bne.n	8006418 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4b83      	ldr	r3, [pc, #524]	; (80066a0 <HAL_DMA_Init+0x420>)
 8006492:	4013      	ands	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800649e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d107      	bne.n	80064dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	4313      	orrs	r3, r2
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80064dc:	4b71      	ldr	r3, [pc, #452]	; (80066a4 <HAL_DMA_Init+0x424>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	4b71      	ldr	r3, [pc, #452]	; (80066a8 <HAL_DMA_Init+0x428>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e8:	d328      	bcc.n	800653c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b28      	cmp	r3, #40	; 0x28
 80064f0:	d903      	bls.n	80064fa <HAL_DMA_Init+0x27a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b2e      	cmp	r3, #46	; 0x2e
 80064f8:	d917      	bls.n	800652a <HAL_DMA_Init+0x2aa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006500:	d903      	bls.n	800650a <HAL_DMA_Init+0x28a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b42      	cmp	r3, #66	; 0x42
 8006508:	d90f      	bls.n	800652a <HAL_DMA_Init+0x2aa>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b46      	cmp	r3, #70	; 0x46
 8006510:	d903      	bls.n	800651a <HAL_DMA_Init+0x29a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b48      	cmp	r3, #72	; 0x48
 8006518:	d907      	bls.n	800652a <HAL_DMA_Init+0x2aa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b4e      	cmp	r3, #78	; 0x4e
 8006520:	d905      	bls.n	800652e <HAL_DMA_Init+0x2ae>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2b52      	cmp	r3, #82	; 0x52
 8006528:	d801      	bhi.n	800652e <HAL_DMA_Init+0x2ae>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <HAL_DMA_Init+0x2b0>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800653a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0307 	bic.w	r3, r3, #7
 8006552:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b04      	cmp	r3, #4
 8006564:	d117      	bne.n	8006596 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00e      	beq.n	8006596 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f002 fb3f 	bl	8008bfc <DMA_CheckFifoParam>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2240      	movs	r2, #64	; 0x40
 8006588:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e197      	b.n	80068c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f002 fa7a 	bl	8008a98 <DMA_CalcBaseAndBitshift>
 80065a4:	4603      	mov	r3, r0
 80065a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	223f      	movs	r2, #63	; 0x3f
 80065b2:	409a      	lsls	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	609a      	str	r2, [r3, #8]
 80065b8:	e0cd      	b.n	8006756 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a3b      	ldr	r2, [pc, #236]	; (80066ac <HAL_DMA_Init+0x42c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d022      	beq.n	800660a <HAL_DMA_Init+0x38a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a39      	ldr	r2, [pc, #228]	; (80066b0 <HAL_DMA_Init+0x430>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01d      	beq.n	800660a <HAL_DMA_Init+0x38a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a38      	ldr	r2, [pc, #224]	; (80066b4 <HAL_DMA_Init+0x434>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d018      	beq.n	800660a <HAL_DMA_Init+0x38a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a36      	ldr	r2, [pc, #216]	; (80066b8 <HAL_DMA_Init+0x438>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <HAL_DMA_Init+0x38a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a35      	ldr	r2, [pc, #212]	; (80066bc <HAL_DMA_Init+0x43c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00e      	beq.n	800660a <HAL_DMA_Init+0x38a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a33      	ldr	r2, [pc, #204]	; (80066c0 <HAL_DMA_Init+0x440>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_DMA_Init+0x38a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a32      	ldr	r2, [pc, #200]	; (80066c4 <HAL_DMA_Init+0x444>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_DMA_Init+0x38a>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a30      	ldr	r2, [pc, #192]	; (80066c8 <HAL_DMA_Init+0x448>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d101      	bne.n	800660e <HAL_DMA_Init+0x38e>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_DMA_Init+0x390>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8097 	beq.w	8006744 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a24      	ldr	r2, [pc, #144]	; (80066ac <HAL_DMA_Init+0x42c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d021      	beq.n	8006664 <HAL_DMA_Init+0x3e4>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_DMA_Init+0x430>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01c      	beq.n	8006664 <HAL_DMA_Init+0x3e4>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <HAL_DMA_Init+0x434>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d017      	beq.n	8006664 <HAL_DMA_Init+0x3e4>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <HAL_DMA_Init+0x438>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d012      	beq.n	8006664 <HAL_DMA_Init+0x3e4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1e      	ldr	r2, [pc, #120]	; (80066bc <HAL_DMA_Init+0x43c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00d      	beq.n	8006664 <HAL_DMA_Init+0x3e4>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_DMA_Init+0x440>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d008      	beq.n	8006664 <HAL_DMA_Init+0x3e4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <HAL_DMA_Init+0x444>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <HAL_DMA_Init+0x3e4>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <HAL_DMA_Init+0x448>)
 8006662:	4293      	cmp	r3, r2
 8006664:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_DMA_Init+0x44c>)
 8006682:	4013      	ands	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b40      	cmp	r3, #64	; 0x40
 800668c:	d020      	beq.n	80066d0 <HAL_DMA_Init+0x450>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d102      	bne.n	800669c <HAL_DMA_Init+0x41c>
 8006696:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800669a:	e01a      	b.n	80066d2 <HAL_DMA_Init+0x452>
 800669c:	2300      	movs	r3, #0
 800669e:	e018      	b.n	80066d2 <HAL_DMA_Init+0x452>
 80066a0:	fe10803f 	.word	0xfe10803f
 80066a4:	5c001000 	.word	0x5c001000
 80066a8:	ffff0000 	.word	0xffff0000
 80066ac:	58025408 	.word	0x58025408
 80066b0:	5802541c 	.word	0x5802541c
 80066b4:	58025430 	.word	0x58025430
 80066b8:	58025444 	.word	0x58025444
 80066bc:	58025458 	.word	0x58025458
 80066c0:	5802546c 	.word	0x5802546c
 80066c4:	58025480 	.word	0x58025480
 80066c8:	58025494 	.word	0x58025494
 80066cc:	fffe000f 	.word	0xfffe000f
 80066d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68d2      	ldr	r2, [r2, #12]
 80066d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006700:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	4b6e      	ldr	r3, [pc, #440]	; (80068d0 <HAL_DMA_Init+0x650>)
 8006718:	4413      	add	r3, r2
 800671a:	4a6e      	ldr	r2, [pc, #440]	; (80068d4 <HAL_DMA_Init+0x654>)
 800671c:	fba2 2303 	umull	r2, r3, r2, r3
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	009a      	lsls	r2, r3, #2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f002 f9b5 	bl	8008a98 <DMA_CalcBaseAndBitshift>
 800672e:	4603      	mov	r3, r0
 8006730:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	f003 031f 	and.w	r3, r3, #31
 800673a:	2201      	movs	r2, #1
 800673c:	409a      	lsls	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	e008      	b.n	8006756 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2240      	movs	r2, #64	; 0x40
 8006748:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2203      	movs	r2, #3
 800674e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e0b7      	b.n	80068c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a5f      	ldr	r2, [pc, #380]	; (80068d8 <HAL_DMA_Init+0x658>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d072      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a5d      	ldr	r2, [pc, #372]	; (80068dc <HAL_DMA_Init+0x65c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d06d      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a5c      	ldr	r2, [pc, #368]	; (80068e0 <HAL_DMA_Init+0x660>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d068      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a5a      	ldr	r2, [pc, #360]	; (80068e4 <HAL_DMA_Init+0x664>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d063      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a59      	ldr	r2, [pc, #356]	; (80068e8 <HAL_DMA_Init+0x668>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d05e      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a57      	ldr	r2, [pc, #348]	; (80068ec <HAL_DMA_Init+0x66c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d059      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a56      	ldr	r2, [pc, #344]	; (80068f0 <HAL_DMA_Init+0x670>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d054      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a54      	ldr	r2, [pc, #336]	; (80068f4 <HAL_DMA_Init+0x674>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d04f      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a53      	ldr	r2, [pc, #332]	; (80068f8 <HAL_DMA_Init+0x678>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d04a      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a51      	ldr	r2, [pc, #324]	; (80068fc <HAL_DMA_Init+0x67c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d045      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a50      	ldr	r2, [pc, #320]	; (8006900 <HAL_DMA_Init+0x680>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d040      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a4e      	ldr	r2, [pc, #312]	; (8006904 <HAL_DMA_Init+0x684>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d03b      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a4d      	ldr	r2, [pc, #308]	; (8006908 <HAL_DMA_Init+0x688>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d036      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a4b      	ldr	r2, [pc, #300]	; (800690c <HAL_DMA_Init+0x68c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d031      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a4a      	ldr	r2, [pc, #296]	; (8006910 <HAL_DMA_Init+0x690>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d02c      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a48      	ldr	r2, [pc, #288]	; (8006914 <HAL_DMA_Init+0x694>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d027      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a47      	ldr	r2, [pc, #284]	; (8006918 <HAL_DMA_Init+0x698>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d022      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a45      	ldr	r2, [pc, #276]	; (800691c <HAL_DMA_Init+0x69c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01d      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a44      	ldr	r2, [pc, #272]	; (8006920 <HAL_DMA_Init+0x6a0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a42      	ldr	r2, [pc, #264]	; (8006924 <HAL_DMA_Init+0x6a4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a41      	ldr	r2, [pc, #260]	; (8006928 <HAL_DMA_Init+0x6a8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a3f      	ldr	r2, [pc, #252]	; (800692c <HAL_DMA_Init+0x6ac>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3e      	ldr	r2, [pc, #248]	; (8006930 <HAL_DMA_Init+0x6b0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_DMA_Init+0x5c6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a3c      	ldr	r2, [pc, #240]	; (8006934 <HAL_DMA_Init+0x6b4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <HAL_DMA_Init+0x5ca>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <HAL_DMA_Init+0x5cc>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d032      	beq.n	80068b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f002 fa4f 	bl	8008cf4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d102      	bne.n	8006864 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006878:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d010      	beq.n	80068a4 <HAL_DMA_Init+0x624>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b08      	cmp	r3, #8
 8006888:	d80c      	bhi.n	80068a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f002 facc 	bl	8008e28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068a0:	605a      	str	r2, [r3, #4]
 80068a2:	e008      	b.n	80068b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	a7fdabf8 	.word	0xa7fdabf8
 80068d4:	cccccccd 	.word	0xcccccccd
 80068d8:	40020010 	.word	0x40020010
 80068dc:	40020028 	.word	0x40020028
 80068e0:	40020040 	.word	0x40020040
 80068e4:	40020058 	.word	0x40020058
 80068e8:	40020070 	.word	0x40020070
 80068ec:	40020088 	.word	0x40020088
 80068f0:	400200a0 	.word	0x400200a0
 80068f4:	400200b8 	.word	0x400200b8
 80068f8:	40020410 	.word	0x40020410
 80068fc:	40020428 	.word	0x40020428
 8006900:	40020440 	.word	0x40020440
 8006904:	40020458 	.word	0x40020458
 8006908:	40020470 	.word	0x40020470
 800690c:	40020488 	.word	0x40020488
 8006910:	400204a0 	.word	0x400204a0
 8006914:	400204b8 	.word	0x400204b8
 8006918:	58025408 	.word	0x58025408
 800691c:	5802541c 	.word	0x5802541c
 8006920:	58025430 	.word	0x58025430
 8006924:	58025444 	.word	0x58025444
 8006928:	58025458 	.word	0x58025458
 800692c:	5802546c 	.word	0x5802546c
 8006930:	58025480 	.word	0x58025480
 8006934:	58025494 	.word	0x58025494

08006938 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e226      	b.n	8006da2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_DMA_Start_IT+0x2a>
 800695e:	2302      	movs	r3, #2
 8006960:	e21f      	b.n	8006da2 <HAL_DMA_Start_IT+0x46a>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	f040 820a 	bne.w	8006d8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a68      	ldr	r2, [pc, #416]	; (8006b2c <HAL_DMA_Start_IT+0x1f4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d04a      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a66      	ldr	r2, [pc, #408]	; (8006b30 <HAL_DMA_Start_IT+0x1f8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d045      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a65      	ldr	r2, [pc, #404]	; (8006b34 <HAL_DMA_Start_IT+0x1fc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d040      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a63      	ldr	r2, [pc, #396]	; (8006b38 <HAL_DMA_Start_IT+0x200>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d03b      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a62      	ldr	r2, [pc, #392]	; (8006b3c <HAL_DMA_Start_IT+0x204>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d036      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a60      	ldr	r2, [pc, #384]	; (8006b40 <HAL_DMA_Start_IT+0x208>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d031      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a5f      	ldr	r2, [pc, #380]	; (8006b44 <HAL_DMA_Start_IT+0x20c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d02c      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a5d      	ldr	r2, [pc, #372]	; (8006b48 <HAL_DMA_Start_IT+0x210>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d027      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a5c      	ldr	r2, [pc, #368]	; (8006b4c <HAL_DMA_Start_IT+0x214>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d022      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5a      	ldr	r2, [pc, #360]	; (8006b50 <HAL_DMA_Start_IT+0x218>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d01d      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a59      	ldr	r2, [pc, #356]	; (8006b54 <HAL_DMA_Start_IT+0x21c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d018      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a57      	ldr	r2, [pc, #348]	; (8006b58 <HAL_DMA_Start_IT+0x220>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d013      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a56      	ldr	r2, [pc, #344]	; (8006b5c <HAL_DMA_Start_IT+0x224>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00e      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a54      	ldr	r2, [pc, #336]	; (8006b60 <HAL_DMA_Start_IT+0x228>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d009      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a53      	ldr	r2, [pc, #332]	; (8006b64 <HAL_DMA_Start_IT+0x22c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d004      	beq.n	8006a26 <HAL_DMA_Start_IT+0xee>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a51      	ldr	r2, [pc, #324]	; (8006b68 <HAL_DMA_Start_IT+0x230>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d108      	bne.n	8006a38 <HAL_DMA_Start_IT+0x100>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e007      	b.n	8006a48 <HAL_DMA_Start_IT+0x110>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0201 	bic.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f001 fe76 	bl	8008740 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a34      	ldr	r2, [pc, #208]	; (8006b2c <HAL_DMA_Start_IT+0x1f4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d04a      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a33      	ldr	r2, [pc, #204]	; (8006b30 <HAL_DMA_Start_IT+0x1f8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d045      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a31      	ldr	r2, [pc, #196]	; (8006b34 <HAL_DMA_Start_IT+0x1fc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d040      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a30      	ldr	r2, [pc, #192]	; (8006b38 <HAL_DMA_Start_IT+0x200>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d03b      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a2e      	ldr	r2, [pc, #184]	; (8006b3c <HAL_DMA_Start_IT+0x204>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d036      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a2d      	ldr	r2, [pc, #180]	; (8006b40 <HAL_DMA_Start_IT+0x208>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d031      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a2b      	ldr	r2, [pc, #172]	; (8006b44 <HAL_DMA_Start_IT+0x20c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d02c      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a2a      	ldr	r2, [pc, #168]	; (8006b48 <HAL_DMA_Start_IT+0x210>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d027      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a28      	ldr	r2, [pc, #160]	; (8006b4c <HAL_DMA_Start_IT+0x214>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d022      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a27      	ldr	r2, [pc, #156]	; (8006b50 <HAL_DMA_Start_IT+0x218>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d01d      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a25      	ldr	r2, [pc, #148]	; (8006b54 <HAL_DMA_Start_IT+0x21c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d018      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a24      	ldr	r2, [pc, #144]	; (8006b58 <HAL_DMA_Start_IT+0x220>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a22      	ldr	r2, [pc, #136]	; (8006b5c <HAL_DMA_Start_IT+0x224>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00e      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a21      	ldr	r2, [pc, #132]	; (8006b60 <HAL_DMA_Start_IT+0x228>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d009      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <HAL_DMA_Start_IT+0x22c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <HAL_DMA_Start_IT+0x1bc>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <HAL_DMA_Start_IT+0x230>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d101      	bne.n	8006af8 <HAL_DMA_Start_IT+0x1c0>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <HAL_DMA_Start_IT+0x1c2>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d036      	beq.n	8006b6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f023 021e 	bic.w	r2, r3, #30
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0216 	orr.w	r2, r2, #22
 8006b10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d03e      	beq.n	8006b98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0208 	orr.w	r2, r2, #8
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e035      	b.n	8006b98 <HAL_DMA_Start_IT+0x260>
 8006b2c:	40020010 	.word	0x40020010
 8006b30:	40020028 	.word	0x40020028
 8006b34:	40020040 	.word	0x40020040
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	40020070 	.word	0x40020070
 8006b40:	40020088 	.word	0x40020088
 8006b44:	400200a0 	.word	0x400200a0
 8006b48:	400200b8 	.word	0x400200b8
 8006b4c:	40020410 	.word	0x40020410
 8006b50:	40020428 	.word	0x40020428
 8006b54:	40020440 	.word	0x40020440
 8006b58:	40020458 	.word	0x40020458
 8006b5c:	40020470 	.word	0x40020470
 8006b60:	40020488 	.word	0x40020488
 8006b64:	400204a0 	.word	0x400204a0
 8006b68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f023 020e 	bic.w	r2, r3, #14
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 020a 	orr.w	r2, r2, #10
 8006b7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0204 	orr.w	r2, r2, #4
 8006b96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a83      	ldr	r2, [pc, #524]	; (8006dac <HAL_DMA_Start_IT+0x474>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d072      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a82      	ldr	r2, [pc, #520]	; (8006db0 <HAL_DMA_Start_IT+0x478>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d06d      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a80      	ldr	r2, [pc, #512]	; (8006db4 <HAL_DMA_Start_IT+0x47c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d068      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a7f      	ldr	r2, [pc, #508]	; (8006db8 <HAL_DMA_Start_IT+0x480>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d063      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a7d      	ldr	r2, [pc, #500]	; (8006dbc <HAL_DMA_Start_IT+0x484>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d05e      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a7c      	ldr	r2, [pc, #496]	; (8006dc0 <HAL_DMA_Start_IT+0x488>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d059      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a7a      	ldr	r2, [pc, #488]	; (8006dc4 <HAL_DMA_Start_IT+0x48c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d054      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a79      	ldr	r2, [pc, #484]	; (8006dc8 <HAL_DMA_Start_IT+0x490>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d04f      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a77      	ldr	r2, [pc, #476]	; (8006dcc <HAL_DMA_Start_IT+0x494>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d04a      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a76      	ldr	r2, [pc, #472]	; (8006dd0 <HAL_DMA_Start_IT+0x498>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d045      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a74      	ldr	r2, [pc, #464]	; (8006dd4 <HAL_DMA_Start_IT+0x49c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d040      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a73      	ldr	r2, [pc, #460]	; (8006dd8 <HAL_DMA_Start_IT+0x4a0>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d03b      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a71      	ldr	r2, [pc, #452]	; (8006ddc <HAL_DMA_Start_IT+0x4a4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d036      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a70      	ldr	r2, [pc, #448]	; (8006de0 <HAL_DMA_Start_IT+0x4a8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d031      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6e      	ldr	r2, [pc, #440]	; (8006de4 <HAL_DMA_Start_IT+0x4ac>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d02c      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6d      	ldr	r2, [pc, #436]	; (8006de8 <HAL_DMA_Start_IT+0x4b0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d027      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a6b      	ldr	r2, [pc, #428]	; (8006dec <HAL_DMA_Start_IT+0x4b4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d022      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a6a      	ldr	r2, [pc, #424]	; (8006df0 <HAL_DMA_Start_IT+0x4b8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d01d      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a68      	ldr	r2, [pc, #416]	; (8006df4 <HAL_DMA_Start_IT+0x4bc>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d018      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a67      	ldr	r2, [pc, #412]	; (8006df8 <HAL_DMA_Start_IT+0x4c0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d013      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a65      	ldr	r2, [pc, #404]	; (8006dfc <HAL_DMA_Start_IT+0x4c4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00e      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a64      	ldr	r2, [pc, #400]	; (8006e00 <HAL_DMA_Start_IT+0x4c8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a62      	ldr	r2, [pc, #392]	; (8006e04 <HAL_DMA_Start_IT+0x4cc>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <HAL_DMA_Start_IT+0x350>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a61      	ldr	r2, [pc, #388]	; (8006e08 <HAL_DMA_Start_IT+0x4d0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d101      	bne.n	8006c8c <HAL_DMA_Start_IT+0x354>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <HAL_DMA_Start_IT+0x356>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d01a      	beq.n	8006cc8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d007      	beq.n	8006cc8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a37      	ldr	r2, [pc, #220]	; (8006dac <HAL_DMA_Start_IT+0x474>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d04a      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a36      	ldr	r2, [pc, #216]	; (8006db0 <HAL_DMA_Start_IT+0x478>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d045      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a34      	ldr	r2, [pc, #208]	; (8006db4 <HAL_DMA_Start_IT+0x47c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d040      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a33      	ldr	r2, [pc, #204]	; (8006db8 <HAL_DMA_Start_IT+0x480>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d03b      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a31      	ldr	r2, [pc, #196]	; (8006dbc <HAL_DMA_Start_IT+0x484>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d036      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a30      	ldr	r2, [pc, #192]	; (8006dc0 <HAL_DMA_Start_IT+0x488>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d031      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a2e      	ldr	r2, [pc, #184]	; (8006dc4 <HAL_DMA_Start_IT+0x48c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d02c      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a2d      	ldr	r2, [pc, #180]	; (8006dc8 <HAL_DMA_Start_IT+0x490>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d027      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a2b      	ldr	r2, [pc, #172]	; (8006dcc <HAL_DMA_Start_IT+0x494>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d022      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <HAL_DMA_Start_IT+0x498>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d01d      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a28      	ldr	r2, [pc, #160]	; (8006dd4 <HAL_DMA_Start_IT+0x49c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d018      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a27      	ldr	r2, [pc, #156]	; (8006dd8 <HAL_DMA_Start_IT+0x4a0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <HAL_DMA_Start_IT+0x4a4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00e      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a24      	ldr	r2, [pc, #144]	; (8006de0 <HAL_DMA_Start_IT+0x4a8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a22      	ldr	r2, [pc, #136]	; (8006de4 <HAL_DMA_Start_IT+0x4ac>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_DMA_Start_IT+0x430>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a21      	ldr	r2, [pc, #132]	; (8006de8 <HAL_DMA_Start_IT+0x4b0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d108      	bne.n	8006d7a <HAL_DMA_Start_IT+0x442>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	e012      	b.n	8006da0 <HAL_DMA_Start_IT+0x468>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0201 	orr.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e009      	b.n	8006da0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40020010 	.word	0x40020010
 8006db0:	40020028 	.word	0x40020028
 8006db4:	40020040 	.word	0x40020040
 8006db8:	40020058 	.word	0x40020058
 8006dbc:	40020070 	.word	0x40020070
 8006dc0:	40020088 	.word	0x40020088
 8006dc4:	400200a0 	.word	0x400200a0
 8006dc8:	400200b8 	.word	0x400200b8
 8006dcc:	40020410 	.word	0x40020410
 8006dd0:	40020428 	.word	0x40020428
 8006dd4:	40020440 	.word	0x40020440
 8006dd8:	40020458 	.word	0x40020458
 8006ddc:	40020470 	.word	0x40020470
 8006de0:	40020488 	.word	0x40020488
 8006de4:	400204a0 	.word	0x400204a0
 8006de8:	400204b8 	.word	0x400204b8
 8006dec:	58025408 	.word	0x58025408
 8006df0:	5802541c 	.word	0x5802541c
 8006df4:	58025430 	.word	0x58025430
 8006df8:	58025444 	.word	0x58025444
 8006dfc:	58025458 	.word	0x58025458
 8006e00:	5802546c 	.word	0x5802546c
 8006e04:	58025480 	.word	0x58025480
 8006e08:	58025494 	.word	0x58025494

08006e0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e14:	f7fd f90c 	bl	8004030 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e2dc      	b.n	80073de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d008      	beq.n	8006e42 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e2cd      	b.n	80073de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a76      	ldr	r2, [pc, #472]	; (8007020 <HAL_DMA_Abort+0x214>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d04a      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a74      	ldr	r2, [pc, #464]	; (8007024 <HAL_DMA_Abort+0x218>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d045      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a73      	ldr	r2, [pc, #460]	; (8007028 <HAL_DMA_Abort+0x21c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d040      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a71      	ldr	r2, [pc, #452]	; (800702c <HAL_DMA_Abort+0x220>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d03b      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a70      	ldr	r2, [pc, #448]	; (8007030 <HAL_DMA_Abort+0x224>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d036      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a6e      	ldr	r2, [pc, #440]	; (8007034 <HAL_DMA_Abort+0x228>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d031      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a6d      	ldr	r2, [pc, #436]	; (8007038 <HAL_DMA_Abort+0x22c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d02c      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a6b      	ldr	r2, [pc, #428]	; (800703c <HAL_DMA_Abort+0x230>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d027      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a6a      	ldr	r2, [pc, #424]	; (8007040 <HAL_DMA_Abort+0x234>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d022      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a68      	ldr	r2, [pc, #416]	; (8007044 <HAL_DMA_Abort+0x238>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01d      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a67      	ldr	r2, [pc, #412]	; (8007048 <HAL_DMA_Abort+0x23c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d018      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a65      	ldr	r2, [pc, #404]	; (800704c <HAL_DMA_Abort+0x240>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d013      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a64      	ldr	r2, [pc, #400]	; (8007050 <HAL_DMA_Abort+0x244>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00e      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a62      	ldr	r2, [pc, #392]	; (8007054 <HAL_DMA_Abort+0x248>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d009      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a61      	ldr	r2, [pc, #388]	; (8007058 <HAL_DMA_Abort+0x24c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <HAL_DMA_Abort+0xd6>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5f      	ldr	r2, [pc, #380]	; (800705c <HAL_DMA_Abort+0x250>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d101      	bne.n	8006ee6 <HAL_DMA_Abort+0xda>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <HAL_DMA_Abort+0xdc>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d013      	beq.n	8006f14 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 021e 	bic.w	r2, r2, #30
 8006efa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695a      	ldr	r2, [r3, #20]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f0a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	e00a      	b.n	8006f2a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 020e 	bic.w	r2, r2, #14
 8006f22:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a3c      	ldr	r2, [pc, #240]	; (8007020 <HAL_DMA_Abort+0x214>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d072      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a3a      	ldr	r2, [pc, #232]	; (8007024 <HAL_DMA_Abort+0x218>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d06d      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a39      	ldr	r2, [pc, #228]	; (8007028 <HAL_DMA_Abort+0x21c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d068      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a37      	ldr	r2, [pc, #220]	; (800702c <HAL_DMA_Abort+0x220>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d063      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a36      	ldr	r2, [pc, #216]	; (8007030 <HAL_DMA_Abort+0x224>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d05e      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a34      	ldr	r2, [pc, #208]	; (8007034 <HAL_DMA_Abort+0x228>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d059      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a33      	ldr	r2, [pc, #204]	; (8007038 <HAL_DMA_Abort+0x22c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d054      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a31      	ldr	r2, [pc, #196]	; (800703c <HAL_DMA_Abort+0x230>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d04f      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a30      	ldr	r2, [pc, #192]	; (8007040 <HAL_DMA_Abort+0x234>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d04a      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2e      	ldr	r2, [pc, #184]	; (8007044 <HAL_DMA_Abort+0x238>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d045      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2d      	ldr	r2, [pc, #180]	; (8007048 <HAL_DMA_Abort+0x23c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d040      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2b      	ldr	r2, [pc, #172]	; (800704c <HAL_DMA_Abort+0x240>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d03b      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2a      	ldr	r2, [pc, #168]	; (8007050 <HAL_DMA_Abort+0x244>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d036      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a28      	ldr	r2, [pc, #160]	; (8007054 <HAL_DMA_Abort+0x248>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d031      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a27      	ldr	r2, [pc, #156]	; (8007058 <HAL_DMA_Abort+0x24c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d02c      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a25      	ldr	r2, [pc, #148]	; (800705c <HAL_DMA_Abort+0x250>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d027      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a24      	ldr	r2, [pc, #144]	; (8007060 <HAL_DMA_Abort+0x254>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a22      	ldr	r2, [pc, #136]	; (8007064 <HAL_DMA_Abort+0x258>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01d      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a21      	ldr	r2, [pc, #132]	; (8007068 <HAL_DMA_Abort+0x25c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d018      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1f      	ldr	r2, [pc, #124]	; (800706c <HAL_DMA_Abort+0x260>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1e      	ldr	r2, [pc, #120]	; (8007070 <HAL_DMA_Abort+0x264>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <HAL_DMA_Abort+0x268>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1b      	ldr	r2, [pc, #108]	; (8007078 <HAL_DMA_Abort+0x26c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_DMA_Abort+0x20e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a19      	ldr	r2, [pc, #100]	; (800707c <HAL_DMA_Abort+0x270>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d132      	bne.n	8007080 <HAL_DMA_Abort+0x274>
 800701a:	2301      	movs	r3, #1
 800701c:	e031      	b.n	8007082 <HAL_DMA_Abort+0x276>
 800701e:	bf00      	nop
 8007020:	40020010 	.word	0x40020010
 8007024:	40020028 	.word	0x40020028
 8007028:	40020040 	.word	0x40020040
 800702c:	40020058 	.word	0x40020058
 8007030:	40020070 	.word	0x40020070
 8007034:	40020088 	.word	0x40020088
 8007038:	400200a0 	.word	0x400200a0
 800703c:	400200b8 	.word	0x400200b8
 8007040:	40020410 	.word	0x40020410
 8007044:	40020428 	.word	0x40020428
 8007048:	40020440 	.word	0x40020440
 800704c:	40020458 	.word	0x40020458
 8007050:	40020470 	.word	0x40020470
 8007054:	40020488 	.word	0x40020488
 8007058:	400204a0 	.word	0x400204a0
 800705c:	400204b8 	.word	0x400204b8
 8007060:	58025408 	.word	0x58025408
 8007064:	5802541c 	.word	0x5802541c
 8007068:	58025430 	.word	0x58025430
 800706c:	58025444 	.word	0x58025444
 8007070:	58025458 	.word	0x58025458
 8007074:	5802546c 	.word	0x5802546c
 8007078:	58025480 	.word	0x58025480
 800707c:	58025494 	.word	0x58025494
 8007080:	2300      	movs	r3, #0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007094:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a6d      	ldr	r2, [pc, #436]	; (8007250 <HAL_DMA_Abort+0x444>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d04a      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a6b      	ldr	r2, [pc, #428]	; (8007254 <HAL_DMA_Abort+0x448>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d045      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a6a      	ldr	r2, [pc, #424]	; (8007258 <HAL_DMA_Abort+0x44c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d040      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a68      	ldr	r2, [pc, #416]	; (800725c <HAL_DMA_Abort+0x450>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d03b      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a67      	ldr	r2, [pc, #412]	; (8007260 <HAL_DMA_Abort+0x454>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d036      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a65      	ldr	r2, [pc, #404]	; (8007264 <HAL_DMA_Abort+0x458>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d031      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a64      	ldr	r2, [pc, #400]	; (8007268 <HAL_DMA_Abort+0x45c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d02c      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a62      	ldr	r2, [pc, #392]	; (800726c <HAL_DMA_Abort+0x460>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d027      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a61      	ldr	r2, [pc, #388]	; (8007270 <HAL_DMA_Abort+0x464>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a5f      	ldr	r2, [pc, #380]	; (8007274 <HAL_DMA_Abort+0x468>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a5e      	ldr	r2, [pc, #376]	; (8007278 <HAL_DMA_Abort+0x46c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a5c      	ldr	r2, [pc, #368]	; (800727c <HAL_DMA_Abort+0x470>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a5b      	ldr	r2, [pc, #364]	; (8007280 <HAL_DMA_Abort+0x474>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a59      	ldr	r2, [pc, #356]	; (8007284 <HAL_DMA_Abort+0x478>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a58      	ldr	r2, [pc, #352]	; (8007288 <HAL_DMA_Abort+0x47c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_DMA_Abort+0x32a>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a56      	ldr	r2, [pc, #344]	; (800728c <HAL_DMA_Abort+0x480>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <HAL_DMA_Abort+0x33c>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e007      	b.n	8007158 <HAL_DMA_Abort+0x34c>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0201 	bic.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007158:	e013      	b.n	8007182 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800715a:	f7fc ff69 	bl	8004030 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b05      	cmp	r3, #5
 8007166:	d90c      	bls.n	8007182 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2203      	movs	r2, #3
 8007172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e12d      	b.n	80073de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e5      	bne.n	800715a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2f      	ldr	r2, [pc, #188]	; (8007250 <HAL_DMA_Abort+0x444>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d04a      	beq.n	800722e <HAL_DMA_Abort+0x422>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a2d      	ldr	r2, [pc, #180]	; (8007254 <HAL_DMA_Abort+0x448>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d045      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a2c      	ldr	r2, [pc, #176]	; (8007258 <HAL_DMA_Abort+0x44c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d040      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	; (800725c <HAL_DMA_Abort+0x450>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d03b      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a29      	ldr	r2, [pc, #164]	; (8007260 <HAL_DMA_Abort+0x454>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d036      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a27      	ldr	r2, [pc, #156]	; (8007264 <HAL_DMA_Abort+0x458>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d031      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a26      	ldr	r2, [pc, #152]	; (8007268 <HAL_DMA_Abort+0x45c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d02c      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a24      	ldr	r2, [pc, #144]	; (800726c <HAL_DMA_Abort+0x460>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d027      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a23      	ldr	r2, [pc, #140]	; (8007270 <HAL_DMA_Abort+0x464>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d022      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a21      	ldr	r2, [pc, #132]	; (8007274 <HAL_DMA_Abort+0x468>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d01d      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a20      	ldr	r2, [pc, #128]	; (8007278 <HAL_DMA_Abort+0x46c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d018      	beq.n	800722e <HAL_DMA_Abort+0x422>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1e      	ldr	r2, [pc, #120]	; (800727c <HAL_DMA_Abort+0x470>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <HAL_DMA_Abort+0x422>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <HAL_DMA_Abort+0x474>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00e      	beq.n	800722e <HAL_DMA_Abort+0x422>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1b      	ldr	r2, [pc, #108]	; (8007284 <HAL_DMA_Abort+0x478>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d009      	beq.n	800722e <HAL_DMA_Abort+0x422>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <HAL_DMA_Abort+0x47c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d004      	beq.n	800722e <HAL_DMA_Abort+0x422>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a18      	ldr	r2, [pc, #96]	; (800728c <HAL_DMA_Abort+0x480>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d101      	bne.n	8007232 <HAL_DMA_Abort+0x426>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <HAL_DMA_Abort+0x428>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02b      	beq.n	8007290 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	223f      	movs	r2, #63	; 0x3f
 8007248:	409a      	lsls	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	609a      	str	r2, [r3, #8]
 800724e:	e02a      	b.n	80072a6 <HAL_DMA_Abort+0x49a>
 8007250:	40020010 	.word	0x40020010
 8007254:	40020028 	.word	0x40020028
 8007258:	40020040 	.word	0x40020040
 800725c:	40020058 	.word	0x40020058
 8007260:	40020070 	.word	0x40020070
 8007264:	40020088 	.word	0x40020088
 8007268:	400200a0 	.word	0x400200a0
 800726c:	400200b8 	.word	0x400200b8
 8007270:	40020410 	.word	0x40020410
 8007274:	40020428 	.word	0x40020428
 8007278:	40020440 	.word	0x40020440
 800727c:	40020458 	.word	0x40020458
 8007280:	40020470 	.word	0x40020470
 8007284:	40020488 	.word	0x40020488
 8007288:	400204a0 	.word	0x400204a0
 800728c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007294:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729a:	f003 031f 	and.w	r3, r3, #31
 800729e:	2201      	movs	r2, #1
 80072a0:	409a      	lsls	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a4f      	ldr	r2, [pc, #316]	; (80073e8 <HAL_DMA_Abort+0x5dc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d072      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a4d      	ldr	r2, [pc, #308]	; (80073ec <HAL_DMA_Abort+0x5e0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d06d      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a4c      	ldr	r2, [pc, #304]	; (80073f0 <HAL_DMA_Abort+0x5e4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d068      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a4a      	ldr	r2, [pc, #296]	; (80073f4 <HAL_DMA_Abort+0x5e8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d063      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a49      	ldr	r2, [pc, #292]	; (80073f8 <HAL_DMA_Abort+0x5ec>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d05e      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a47      	ldr	r2, [pc, #284]	; (80073fc <HAL_DMA_Abort+0x5f0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d059      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a46      	ldr	r2, [pc, #280]	; (8007400 <HAL_DMA_Abort+0x5f4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d054      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a44      	ldr	r2, [pc, #272]	; (8007404 <HAL_DMA_Abort+0x5f8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d04f      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a43      	ldr	r2, [pc, #268]	; (8007408 <HAL_DMA_Abort+0x5fc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d04a      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a41      	ldr	r2, [pc, #260]	; (800740c <HAL_DMA_Abort+0x600>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d045      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a40      	ldr	r2, [pc, #256]	; (8007410 <HAL_DMA_Abort+0x604>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d040      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a3e      	ldr	r2, [pc, #248]	; (8007414 <HAL_DMA_Abort+0x608>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d03b      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a3d      	ldr	r2, [pc, #244]	; (8007418 <HAL_DMA_Abort+0x60c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d036      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a3b      	ldr	r2, [pc, #236]	; (800741c <HAL_DMA_Abort+0x610>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d031      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a3a      	ldr	r2, [pc, #232]	; (8007420 <HAL_DMA_Abort+0x614>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d02c      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a38      	ldr	r2, [pc, #224]	; (8007424 <HAL_DMA_Abort+0x618>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d027      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a37      	ldr	r2, [pc, #220]	; (8007428 <HAL_DMA_Abort+0x61c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d022      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a35      	ldr	r2, [pc, #212]	; (800742c <HAL_DMA_Abort+0x620>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01d      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a34      	ldr	r2, [pc, #208]	; (8007430 <HAL_DMA_Abort+0x624>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d018      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a32      	ldr	r2, [pc, #200]	; (8007434 <HAL_DMA_Abort+0x628>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a31      	ldr	r2, [pc, #196]	; (8007438 <HAL_DMA_Abort+0x62c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00e      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a2f      	ldr	r2, [pc, #188]	; (800743c <HAL_DMA_Abort+0x630>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a2e      	ldr	r2, [pc, #184]	; (8007440 <HAL_DMA_Abort+0x634>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <HAL_DMA_Abort+0x58a>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2c      	ldr	r2, [pc, #176]	; (8007444 <HAL_DMA_Abort+0x638>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <HAL_DMA_Abort+0x58e>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <HAL_DMA_Abort+0x590>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d015      	beq.n	80073cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00c      	beq.n	80073cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	40020010 	.word	0x40020010
 80073ec:	40020028 	.word	0x40020028
 80073f0:	40020040 	.word	0x40020040
 80073f4:	40020058 	.word	0x40020058
 80073f8:	40020070 	.word	0x40020070
 80073fc:	40020088 	.word	0x40020088
 8007400:	400200a0 	.word	0x400200a0
 8007404:	400200b8 	.word	0x400200b8
 8007408:	40020410 	.word	0x40020410
 800740c:	40020428 	.word	0x40020428
 8007410:	40020440 	.word	0x40020440
 8007414:	40020458 	.word	0x40020458
 8007418:	40020470 	.word	0x40020470
 800741c:	40020488 	.word	0x40020488
 8007420:	400204a0 	.word	0x400204a0
 8007424:	400204b8 	.word	0x400204b8
 8007428:	58025408 	.word	0x58025408
 800742c:	5802541c 	.word	0x5802541c
 8007430:	58025430 	.word	0x58025430
 8007434:	58025444 	.word	0x58025444
 8007438:	58025458 	.word	0x58025458
 800743c:	5802546c 	.word	0x5802546c
 8007440:	58025480 	.word	0x58025480
 8007444:	58025494 	.word	0x58025494

08007448 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e237      	b.n	80078ca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d004      	beq.n	8007470 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2280      	movs	r2, #128	; 0x80
 800746a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e22c      	b.n	80078ca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a5c      	ldr	r2, [pc, #368]	; (80075e8 <HAL_DMA_Abort_IT+0x1a0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d04a      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a5b      	ldr	r2, [pc, #364]	; (80075ec <HAL_DMA_Abort_IT+0x1a4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d045      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a59      	ldr	r2, [pc, #356]	; (80075f0 <HAL_DMA_Abort_IT+0x1a8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d040      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a58      	ldr	r2, [pc, #352]	; (80075f4 <HAL_DMA_Abort_IT+0x1ac>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d03b      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a56      	ldr	r2, [pc, #344]	; (80075f8 <HAL_DMA_Abort_IT+0x1b0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d036      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a55      	ldr	r2, [pc, #340]	; (80075fc <HAL_DMA_Abort_IT+0x1b4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d031      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a53      	ldr	r2, [pc, #332]	; (8007600 <HAL_DMA_Abort_IT+0x1b8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d02c      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a52      	ldr	r2, [pc, #328]	; (8007604 <HAL_DMA_Abort_IT+0x1bc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d027      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a50      	ldr	r2, [pc, #320]	; (8007608 <HAL_DMA_Abort_IT+0x1c0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d022      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a4f      	ldr	r2, [pc, #316]	; (800760c <HAL_DMA_Abort_IT+0x1c4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d01d      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a4d      	ldr	r2, [pc, #308]	; (8007610 <HAL_DMA_Abort_IT+0x1c8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d018      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a4c      	ldr	r2, [pc, #304]	; (8007614 <HAL_DMA_Abort_IT+0x1cc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d013      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a4a      	ldr	r2, [pc, #296]	; (8007618 <HAL_DMA_Abort_IT+0x1d0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00e      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a49      	ldr	r2, [pc, #292]	; (800761c <HAL_DMA_Abort_IT+0x1d4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d009      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a47      	ldr	r2, [pc, #284]	; (8007620 <HAL_DMA_Abort_IT+0x1d8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d004      	beq.n	8007510 <HAL_DMA_Abort_IT+0xc8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a46      	ldr	r2, [pc, #280]	; (8007624 <HAL_DMA_Abort_IT+0x1dc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d101      	bne.n	8007514 <HAL_DMA_Abort_IT+0xcc>
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <HAL_DMA_Abort_IT+0xce>
 8007514:	2300      	movs	r3, #0
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 8086 	beq.w	8007628 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2204      	movs	r2, #4
 8007520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a2f      	ldr	r2, [pc, #188]	; (80075e8 <HAL_DMA_Abort_IT+0x1a0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d04a      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2e      	ldr	r2, [pc, #184]	; (80075ec <HAL_DMA_Abort_IT+0x1a4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d045      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2c      	ldr	r2, [pc, #176]	; (80075f0 <HAL_DMA_Abort_IT+0x1a8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d040      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2b      	ldr	r2, [pc, #172]	; (80075f4 <HAL_DMA_Abort_IT+0x1ac>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d03b      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <HAL_DMA_Abort_IT+0x1b0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d036      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a28      	ldr	r2, [pc, #160]	; (80075fc <HAL_DMA_Abort_IT+0x1b4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d031      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a26      	ldr	r2, [pc, #152]	; (8007600 <HAL_DMA_Abort_IT+0x1b8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d02c      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a25      	ldr	r2, [pc, #148]	; (8007604 <HAL_DMA_Abort_IT+0x1bc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d027      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a23      	ldr	r2, [pc, #140]	; (8007608 <HAL_DMA_Abort_IT+0x1c0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d022      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a22      	ldr	r2, [pc, #136]	; (800760c <HAL_DMA_Abort_IT+0x1c4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d01d      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a20      	ldr	r2, [pc, #128]	; (8007610 <HAL_DMA_Abort_IT+0x1c8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d018      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <HAL_DMA_Abort_IT+0x1cc>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d013      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1d      	ldr	r2, [pc, #116]	; (8007618 <HAL_DMA_Abort_IT+0x1d0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00e      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a1c      	ldr	r2, [pc, #112]	; (800761c <HAL_DMA_Abort_IT+0x1d4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d009      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a1a      	ldr	r2, [pc, #104]	; (8007620 <HAL_DMA_Abort_IT+0x1d8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d004      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x17c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a19      	ldr	r2, [pc, #100]	; (8007624 <HAL_DMA_Abort_IT+0x1dc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d108      	bne.n	80075d6 <HAL_DMA_Abort_IT+0x18e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0201 	bic.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	e178      	b.n	80078c8 <HAL_DMA_Abort_IT+0x480>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0201 	bic.w	r2, r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	e16f      	b.n	80078c8 <HAL_DMA_Abort_IT+0x480>
 80075e8:	40020010 	.word	0x40020010
 80075ec:	40020028 	.word	0x40020028
 80075f0:	40020040 	.word	0x40020040
 80075f4:	40020058 	.word	0x40020058
 80075f8:	40020070 	.word	0x40020070
 80075fc:	40020088 	.word	0x40020088
 8007600:	400200a0 	.word	0x400200a0
 8007604:	400200b8 	.word	0x400200b8
 8007608:	40020410 	.word	0x40020410
 800760c:	40020428 	.word	0x40020428
 8007610:	40020440 	.word	0x40020440
 8007614:	40020458 	.word	0x40020458
 8007618:	40020470 	.word	0x40020470
 800761c:	40020488 	.word	0x40020488
 8007620:	400204a0 	.word	0x400204a0
 8007624:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 020e 	bic.w	r2, r2, #14
 8007636:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a6c      	ldr	r2, [pc, #432]	; (80077f0 <HAL_DMA_Abort_IT+0x3a8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d04a      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a6b      	ldr	r2, [pc, #428]	; (80077f4 <HAL_DMA_Abort_IT+0x3ac>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d045      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a69      	ldr	r2, [pc, #420]	; (80077f8 <HAL_DMA_Abort_IT+0x3b0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d040      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a68      	ldr	r2, [pc, #416]	; (80077fc <HAL_DMA_Abort_IT+0x3b4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d03b      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a66      	ldr	r2, [pc, #408]	; (8007800 <HAL_DMA_Abort_IT+0x3b8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d036      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a65      	ldr	r2, [pc, #404]	; (8007804 <HAL_DMA_Abort_IT+0x3bc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d031      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a63      	ldr	r2, [pc, #396]	; (8007808 <HAL_DMA_Abort_IT+0x3c0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d02c      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a62      	ldr	r2, [pc, #392]	; (800780c <HAL_DMA_Abort_IT+0x3c4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d027      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a60      	ldr	r2, [pc, #384]	; (8007810 <HAL_DMA_Abort_IT+0x3c8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d022      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a5f      	ldr	r2, [pc, #380]	; (8007814 <HAL_DMA_Abort_IT+0x3cc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d01d      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a5d      	ldr	r2, [pc, #372]	; (8007818 <HAL_DMA_Abort_IT+0x3d0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d018      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a5c      	ldr	r2, [pc, #368]	; (800781c <HAL_DMA_Abort_IT+0x3d4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a5a      	ldr	r2, [pc, #360]	; (8007820 <HAL_DMA_Abort_IT+0x3d8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00e      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a59      	ldr	r2, [pc, #356]	; (8007824 <HAL_DMA_Abort_IT+0x3dc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d009      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a57      	ldr	r2, [pc, #348]	; (8007828 <HAL_DMA_Abort_IT+0x3e0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d004      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x290>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a56      	ldr	r2, [pc, #344]	; (800782c <HAL_DMA_Abort_IT+0x3e4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d108      	bne.n	80076ea <HAL_DMA_Abort_IT+0x2a2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0201 	bic.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	e007      	b.n	80076fa <HAL_DMA_Abort_IT+0x2b2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a3c      	ldr	r2, [pc, #240]	; (80077f0 <HAL_DMA_Abort_IT+0x3a8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d072      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a3a      	ldr	r2, [pc, #232]	; (80077f4 <HAL_DMA_Abort_IT+0x3ac>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d06d      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a39      	ldr	r2, [pc, #228]	; (80077f8 <HAL_DMA_Abort_IT+0x3b0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d068      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a37      	ldr	r2, [pc, #220]	; (80077fc <HAL_DMA_Abort_IT+0x3b4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d063      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a36      	ldr	r2, [pc, #216]	; (8007800 <HAL_DMA_Abort_IT+0x3b8>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d05e      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a34      	ldr	r2, [pc, #208]	; (8007804 <HAL_DMA_Abort_IT+0x3bc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d059      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a33      	ldr	r2, [pc, #204]	; (8007808 <HAL_DMA_Abort_IT+0x3c0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d054      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a31      	ldr	r2, [pc, #196]	; (800780c <HAL_DMA_Abort_IT+0x3c4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d04f      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a30      	ldr	r2, [pc, #192]	; (8007810 <HAL_DMA_Abort_IT+0x3c8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d04a      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a2e      	ldr	r2, [pc, #184]	; (8007814 <HAL_DMA_Abort_IT+0x3cc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d045      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a2d      	ldr	r2, [pc, #180]	; (8007818 <HAL_DMA_Abort_IT+0x3d0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d040      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a2b      	ldr	r2, [pc, #172]	; (800781c <HAL_DMA_Abort_IT+0x3d4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d03b      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <HAL_DMA_Abort_IT+0x3d8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d036      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a28      	ldr	r2, [pc, #160]	; (8007824 <HAL_DMA_Abort_IT+0x3dc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d031      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a27      	ldr	r2, [pc, #156]	; (8007828 <HAL_DMA_Abort_IT+0x3e0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d02c      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a25      	ldr	r2, [pc, #148]	; (800782c <HAL_DMA_Abort_IT+0x3e4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d027      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a24      	ldr	r2, [pc, #144]	; (8007830 <HAL_DMA_Abort_IT+0x3e8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d022      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a22      	ldr	r2, [pc, #136]	; (8007834 <HAL_DMA_Abort_IT+0x3ec>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d01d      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a21      	ldr	r2, [pc, #132]	; (8007838 <HAL_DMA_Abort_IT+0x3f0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d018      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1f      	ldr	r2, [pc, #124]	; (800783c <HAL_DMA_Abort_IT+0x3f4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a1e      	ldr	r2, [pc, #120]	; (8007840 <HAL_DMA_Abort_IT+0x3f8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00e      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a1c      	ldr	r2, [pc, #112]	; (8007844 <HAL_DMA_Abort_IT+0x3fc>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d009      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1b      	ldr	r2, [pc, #108]	; (8007848 <HAL_DMA_Abort_IT+0x400>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d004      	beq.n	80077ea <HAL_DMA_Abort_IT+0x3a2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a19      	ldr	r2, [pc, #100]	; (800784c <HAL_DMA_Abort_IT+0x404>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d132      	bne.n	8007850 <HAL_DMA_Abort_IT+0x408>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e031      	b.n	8007852 <HAL_DMA_Abort_IT+0x40a>
 80077ee:	bf00      	nop
 80077f0:	40020010 	.word	0x40020010
 80077f4:	40020028 	.word	0x40020028
 80077f8:	40020040 	.word	0x40020040
 80077fc:	40020058 	.word	0x40020058
 8007800:	40020070 	.word	0x40020070
 8007804:	40020088 	.word	0x40020088
 8007808:	400200a0 	.word	0x400200a0
 800780c:	400200b8 	.word	0x400200b8
 8007810:	40020410 	.word	0x40020410
 8007814:	40020428 	.word	0x40020428
 8007818:	40020440 	.word	0x40020440
 800781c:	40020458 	.word	0x40020458
 8007820:	40020470 	.word	0x40020470
 8007824:	40020488 	.word	0x40020488
 8007828:	400204a0 	.word	0x400204a0
 800782c:	400204b8 	.word	0x400204b8
 8007830:	58025408 	.word	0x58025408
 8007834:	5802541c 	.word	0x5802541c
 8007838:	58025430 	.word	0x58025430
 800783c:	58025444 	.word	0x58025444
 8007840:	58025458 	.word	0x58025458
 8007844:	5802546c 	.word	0x5802546c
 8007848:	58025480 	.word	0x58025480
 800784c:	58025494 	.word	0x58025494
 8007850:	2300      	movs	r3, #0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d028      	beq.n	80078a8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007864:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2201      	movs	r2, #1
 8007876:	409a      	lsls	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007884:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00c      	beq.n	80078a8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800789c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop

080078d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078e0:	4b67      	ldr	r3, [pc, #412]	; (8007a80 <HAL_DMA_IRQHandler+0x1ac>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a67      	ldr	r2, [pc, #412]	; (8007a84 <HAL_DMA_IRQHandler+0x1b0>)
 80078e6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ea:	0a9b      	lsrs	r3, r3, #10
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a5f      	ldr	r2, [pc, #380]	; (8007a88 <HAL_DMA_IRQHandler+0x1b4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d04a      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5d      	ldr	r2, [pc, #372]	; (8007a8c <HAL_DMA_IRQHandler+0x1b8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d045      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a5c      	ldr	r2, [pc, #368]	; (8007a90 <HAL_DMA_IRQHandler+0x1bc>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d040      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a5a      	ldr	r2, [pc, #360]	; (8007a94 <HAL_DMA_IRQHandler+0x1c0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d03b      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a59      	ldr	r2, [pc, #356]	; (8007a98 <HAL_DMA_IRQHandler+0x1c4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d036      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a57      	ldr	r2, [pc, #348]	; (8007a9c <HAL_DMA_IRQHandler+0x1c8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d031      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a56      	ldr	r2, [pc, #344]	; (8007aa0 <HAL_DMA_IRQHandler+0x1cc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d02c      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a54      	ldr	r2, [pc, #336]	; (8007aa4 <HAL_DMA_IRQHandler+0x1d0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d027      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a53      	ldr	r2, [pc, #332]	; (8007aa8 <HAL_DMA_IRQHandler+0x1d4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d022      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a51      	ldr	r2, [pc, #324]	; (8007aac <HAL_DMA_IRQHandler+0x1d8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01d      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a50      	ldr	r2, [pc, #320]	; (8007ab0 <HAL_DMA_IRQHandler+0x1dc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d018      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a4e      	ldr	r2, [pc, #312]	; (8007ab4 <HAL_DMA_IRQHandler+0x1e0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a4d      	ldr	r2, [pc, #308]	; (8007ab8 <HAL_DMA_IRQHandler+0x1e4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00e      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a4b      	ldr	r2, [pc, #300]	; (8007abc <HAL_DMA_IRQHandler+0x1e8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a4a      	ldr	r2, [pc, #296]	; (8007ac0 <HAL_DMA_IRQHandler+0x1ec>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xd2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a48      	ldr	r2, [pc, #288]	; (8007ac4 <HAL_DMA_IRQHandler+0x1f0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d101      	bne.n	80079aa <HAL_DMA_IRQHandler+0xd6>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <HAL_DMA_IRQHandler+0xd8>
 80079aa:	2300      	movs	r3, #0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 842b 	beq.w	8008208 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	2208      	movs	r2, #8
 80079bc:	409a      	lsls	r2, r3
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	4013      	ands	r3, r2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80a2 	beq.w	8007b0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a2e      	ldr	r2, [pc, #184]	; (8007a88 <HAL_DMA_IRQHandler+0x1b4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d04a      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a2d      	ldr	r2, [pc, #180]	; (8007a8c <HAL_DMA_IRQHandler+0x1b8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d045      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a2b      	ldr	r2, [pc, #172]	; (8007a90 <HAL_DMA_IRQHandler+0x1bc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d040      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a2a      	ldr	r2, [pc, #168]	; (8007a94 <HAL_DMA_IRQHandler+0x1c0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d03b      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a28      	ldr	r2, [pc, #160]	; (8007a98 <HAL_DMA_IRQHandler+0x1c4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d036      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a27      	ldr	r2, [pc, #156]	; (8007a9c <HAL_DMA_IRQHandler+0x1c8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d031      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <HAL_DMA_IRQHandler+0x1cc>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d02c      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a24      	ldr	r2, [pc, #144]	; (8007aa4 <HAL_DMA_IRQHandler+0x1d0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d027      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a22      	ldr	r2, [pc, #136]	; (8007aa8 <HAL_DMA_IRQHandler+0x1d4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d022      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a21      	ldr	r2, [pc, #132]	; (8007aac <HAL_DMA_IRQHandler+0x1d8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d01d      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a1f      	ldr	r2, [pc, #124]	; (8007ab0 <HAL_DMA_IRQHandler+0x1dc>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d018      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <HAL_DMA_IRQHandler+0x1e0>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d013      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1c      	ldr	r2, [pc, #112]	; (8007ab8 <HAL_DMA_IRQHandler+0x1e4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00e      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a1b      	ldr	r2, [pc, #108]	; (8007abc <HAL_DMA_IRQHandler+0x1e8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d009      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a19      	ldr	r2, [pc, #100]	; (8007ac0 <HAL_DMA_IRQHandler+0x1ec>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x194>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a18      	ldr	r2, [pc, #96]	; (8007ac4 <HAL_DMA_IRQHandler+0x1f0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d12f      	bne.n	8007ac8 <HAL_DMA_IRQHandler+0x1f4>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bf14      	ite	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	2300      	moveq	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	e02e      	b.n	8007adc <HAL_DMA_IRQHandler+0x208>
 8007a7e:	bf00      	nop
 8007a80:	24000090 	.word	0x24000090
 8007a84:	1b4e81b5 	.word	0x1b4e81b5
 8007a88:	40020010 	.word	0x40020010
 8007a8c:	40020028 	.word	0x40020028
 8007a90:	40020040 	.word	0x40020040
 8007a94:	40020058 	.word	0x40020058
 8007a98:	40020070 	.word	0x40020070
 8007a9c:	40020088 	.word	0x40020088
 8007aa0:	400200a0 	.word	0x400200a0
 8007aa4:	400200b8 	.word	0x400200b8
 8007aa8:	40020410 	.word	0x40020410
 8007aac:	40020428 	.word	0x40020428
 8007ab0:	40020440 	.word	0x40020440
 8007ab4:	40020458 	.word	0x40020458
 8007ab8:	40020470 	.word	0x40020470
 8007abc:	40020488 	.word	0x40020488
 8007ac0:	400204a0 	.word	0x400204a0
 8007ac4:	400204b8 	.word	0x400204b8
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf14      	ite	ne
 8007ad6:	2301      	movne	r3, #1
 8007ad8:	2300      	moveq	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d015      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0204 	bic.w	r2, r2, #4
 8007aee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	2208      	movs	r2, #8
 8007afa:	409a      	lsls	r2, r3
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b04:	f043 0201 	orr.w	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b10:	f003 031f 	and.w	r3, r3, #31
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d06e      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a69      	ldr	r2, [pc, #420]	; (8007ccc <HAL_DMA_IRQHandler+0x3f8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d04a      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a67      	ldr	r2, [pc, #412]	; (8007cd0 <HAL_DMA_IRQHandler+0x3fc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d045      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a66      	ldr	r2, [pc, #408]	; (8007cd4 <HAL_DMA_IRQHandler+0x400>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d040      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a64      	ldr	r2, [pc, #400]	; (8007cd8 <HAL_DMA_IRQHandler+0x404>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d03b      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a63      	ldr	r2, [pc, #396]	; (8007cdc <HAL_DMA_IRQHandler+0x408>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d036      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a61      	ldr	r2, [pc, #388]	; (8007ce0 <HAL_DMA_IRQHandler+0x40c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d031      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a60      	ldr	r2, [pc, #384]	; (8007ce4 <HAL_DMA_IRQHandler+0x410>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d02c      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a5e      	ldr	r2, [pc, #376]	; (8007ce8 <HAL_DMA_IRQHandler+0x414>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d027      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a5d      	ldr	r2, [pc, #372]	; (8007cec <HAL_DMA_IRQHandler+0x418>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d022      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a5b      	ldr	r2, [pc, #364]	; (8007cf0 <HAL_DMA_IRQHandler+0x41c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01d      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a5a      	ldr	r2, [pc, #360]	; (8007cf4 <HAL_DMA_IRQHandler+0x420>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d018      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a58      	ldr	r2, [pc, #352]	; (8007cf8 <HAL_DMA_IRQHandler+0x424>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a57      	ldr	r2, [pc, #348]	; (8007cfc <HAL_DMA_IRQHandler+0x428>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a55      	ldr	r2, [pc, #340]	; (8007d00 <HAL_DMA_IRQHandler+0x42c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a54      	ldr	r2, [pc, #336]	; (8007d04 <HAL_DMA_IRQHandler+0x430>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x2ee>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a52      	ldr	r2, [pc, #328]	; (8007d08 <HAL_DMA_IRQHandler+0x434>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d10a      	bne.n	8007bd8 <HAL_DMA_IRQHandler+0x304>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bf14      	ite	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	2300      	moveq	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	e003      	b.n	8007be0 <HAL_DMA_IRQHandler+0x30c>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2300      	movs	r3, #0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00d      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	2201      	movs	r2, #1
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f043 0202 	orr.w	r2, r3, #2
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c04:	f003 031f 	and.w	r3, r3, #31
 8007c08:	2204      	movs	r2, #4
 8007c0a:	409a      	lsls	r2, r3
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 808f 	beq.w	8007d34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2c      	ldr	r2, [pc, #176]	; (8007ccc <HAL_DMA_IRQHandler+0x3f8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d04a      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2a      	ldr	r2, [pc, #168]	; (8007cd0 <HAL_DMA_IRQHandler+0x3fc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d045      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <HAL_DMA_IRQHandler+0x400>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d040      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a27      	ldr	r2, [pc, #156]	; (8007cd8 <HAL_DMA_IRQHandler+0x404>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d03b      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a26      	ldr	r2, [pc, #152]	; (8007cdc <HAL_DMA_IRQHandler+0x408>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d036      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a24      	ldr	r2, [pc, #144]	; (8007ce0 <HAL_DMA_IRQHandler+0x40c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d031      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a23      	ldr	r2, [pc, #140]	; (8007ce4 <HAL_DMA_IRQHandler+0x410>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d02c      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <HAL_DMA_IRQHandler+0x414>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d027      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a20      	ldr	r2, [pc, #128]	; (8007cec <HAL_DMA_IRQHandler+0x418>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d022      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1e      	ldr	r2, [pc, #120]	; (8007cf0 <HAL_DMA_IRQHandler+0x41c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01d      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <HAL_DMA_IRQHandler+0x420>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d018      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1b      	ldr	r2, [pc, #108]	; (8007cf8 <HAL_DMA_IRQHandler+0x424>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1a      	ldr	r2, [pc, #104]	; (8007cfc <HAL_DMA_IRQHandler+0x428>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a18      	ldr	r2, [pc, #96]	; (8007d00 <HAL_DMA_IRQHandler+0x42c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d009      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a17      	ldr	r2, [pc, #92]	; (8007d04 <HAL_DMA_IRQHandler+0x430>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x3e2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <HAL_DMA_IRQHandler+0x434>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d12a      	bne.n	8007d0c <HAL_DMA_IRQHandler+0x438>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	e023      	b.n	8007d14 <HAL_DMA_IRQHandler+0x440>
 8007ccc:	40020010 	.word	0x40020010
 8007cd0:	40020028 	.word	0x40020028
 8007cd4:	40020040 	.word	0x40020040
 8007cd8:	40020058 	.word	0x40020058
 8007cdc:	40020070 	.word	0x40020070
 8007ce0:	40020088 	.word	0x40020088
 8007ce4:	400200a0 	.word	0x400200a0
 8007ce8:	400200b8 	.word	0x400200b8
 8007cec:	40020410 	.word	0x40020410
 8007cf0:	40020428 	.word	0x40020428
 8007cf4:	40020440 	.word	0x40020440
 8007cf8:	40020458 	.word	0x40020458
 8007cfc:	40020470 	.word	0x40020470
 8007d00:	40020488 	.word	0x40020488
 8007d04:	400204a0 	.word	0x400204a0
 8007d08:	400204b8 	.word	0x400204b8
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2300      	movs	r3, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00d      	beq.n	8007d34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	2204      	movs	r2, #4
 8007d22:	409a      	lsls	r2, r3
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2c:	f043 0204 	orr.w	r2, r3, #4
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	409a      	lsls	r2, r3
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	4013      	ands	r3, r2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80a6 	beq.w	8007e96 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a85      	ldr	r2, [pc, #532]	; (8007f64 <HAL_DMA_IRQHandler+0x690>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d04a      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a83      	ldr	r2, [pc, #524]	; (8007f68 <HAL_DMA_IRQHandler+0x694>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d045      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a82      	ldr	r2, [pc, #520]	; (8007f6c <HAL_DMA_IRQHandler+0x698>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d040      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a80      	ldr	r2, [pc, #512]	; (8007f70 <HAL_DMA_IRQHandler+0x69c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d03b      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a7f      	ldr	r2, [pc, #508]	; (8007f74 <HAL_DMA_IRQHandler+0x6a0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d036      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a7d      	ldr	r2, [pc, #500]	; (8007f78 <HAL_DMA_IRQHandler+0x6a4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d031      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a7c      	ldr	r2, [pc, #496]	; (8007f7c <HAL_DMA_IRQHandler+0x6a8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d02c      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7a      	ldr	r2, [pc, #488]	; (8007f80 <HAL_DMA_IRQHandler+0x6ac>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d027      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a79      	ldr	r2, [pc, #484]	; (8007f84 <HAL_DMA_IRQHandler+0x6b0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a77      	ldr	r2, [pc, #476]	; (8007f88 <HAL_DMA_IRQHandler+0x6b4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01d      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a76      	ldr	r2, [pc, #472]	; (8007f8c <HAL_DMA_IRQHandler+0x6b8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a74      	ldr	r2, [pc, #464]	; (8007f90 <HAL_DMA_IRQHandler+0x6bc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a73      	ldr	r2, [pc, #460]	; (8007f94 <HAL_DMA_IRQHandler+0x6c0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a71      	ldr	r2, [pc, #452]	; (8007f98 <HAL_DMA_IRQHandler+0x6c4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a70      	ldr	r2, [pc, #448]	; (8007f9c <HAL_DMA_IRQHandler+0x6c8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_DMA_IRQHandler+0x516>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a6e      	ldr	r2, [pc, #440]	; (8007fa0 <HAL_DMA_IRQHandler+0x6cc>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d10a      	bne.n	8007e00 <HAL_DMA_IRQHandler+0x52c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf14      	ite	ne
 8007df8:	2301      	movne	r3, #1
 8007dfa:	2300      	moveq	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	e009      	b.n	8007e14 <HAL_DMA_IRQHandler+0x540>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf14      	ite	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	2300      	moveq	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d03e      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e1c:	f003 031f 	and.w	r3, r3, #31
 8007e20:	2210      	movs	r2, #16
 8007e22:	409a      	lsls	r2, r3
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d018      	beq.n	8007e68 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d108      	bne.n	8007e56 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d024      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4798      	blx	r3
 8007e54:	e01f      	b.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01b      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
 8007e66:	e016      	b.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d107      	bne.n	8007e86 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0208 	bic.w	r2, r2, #8
 8007e84:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	409a      	lsls	r2, r3
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8110 	beq.w	80080cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a2c      	ldr	r2, [pc, #176]	; (8007f64 <HAL_DMA_IRQHandler+0x690>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d04a      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a2b      	ldr	r2, [pc, #172]	; (8007f68 <HAL_DMA_IRQHandler+0x694>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d045      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a29      	ldr	r2, [pc, #164]	; (8007f6c <HAL_DMA_IRQHandler+0x698>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d040      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a28      	ldr	r2, [pc, #160]	; (8007f70 <HAL_DMA_IRQHandler+0x69c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d03b      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a26      	ldr	r2, [pc, #152]	; (8007f74 <HAL_DMA_IRQHandler+0x6a0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d036      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a25      	ldr	r2, [pc, #148]	; (8007f78 <HAL_DMA_IRQHandler+0x6a4>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d031      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a23      	ldr	r2, [pc, #140]	; (8007f7c <HAL_DMA_IRQHandler+0x6a8>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d02c      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a22      	ldr	r2, [pc, #136]	; (8007f80 <HAL_DMA_IRQHandler+0x6ac>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d027      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a20      	ldr	r2, [pc, #128]	; (8007f84 <HAL_DMA_IRQHandler+0x6b0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d022      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a1f      	ldr	r2, [pc, #124]	; (8007f88 <HAL_DMA_IRQHandler+0x6b4>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d01d      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1d      	ldr	r2, [pc, #116]	; (8007f8c <HAL_DMA_IRQHandler+0x6b8>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d018      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1c      	ldr	r2, [pc, #112]	; (8007f90 <HAL_DMA_IRQHandler+0x6bc>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <HAL_DMA_IRQHandler+0x6c0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00e      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a19      	ldr	r2, [pc, #100]	; (8007f98 <HAL_DMA_IRQHandler+0x6c4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d009      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a17      	ldr	r2, [pc, #92]	; (8007f9c <HAL_DMA_IRQHandler+0x6c8>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d004      	beq.n	8007f4c <HAL_DMA_IRQHandler+0x678>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a16      	ldr	r2, [pc, #88]	; (8007fa0 <HAL_DMA_IRQHandler+0x6cc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d12b      	bne.n	8007fa4 <HAL_DMA_IRQHandler+0x6d0>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bf14      	ite	ne
 8007f5a:	2301      	movne	r3, #1
 8007f5c:	2300      	moveq	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	e02a      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x6e4>
 8007f62:	bf00      	nop
 8007f64:	40020010 	.word	0x40020010
 8007f68:	40020028 	.word	0x40020028
 8007f6c:	40020040 	.word	0x40020040
 8007f70:	40020058 	.word	0x40020058
 8007f74:	40020070 	.word	0x40020070
 8007f78:	40020088 	.word	0x40020088
 8007f7c:	400200a0 	.word	0x400200a0
 8007f80:	400200b8 	.word	0x400200b8
 8007f84:	40020410 	.word	0x40020410
 8007f88:	40020428 	.word	0x40020428
 8007f8c:	40020440 	.word	0x40020440
 8007f90:	40020458 	.word	0x40020458
 8007f94:	40020470 	.word	0x40020470
 8007f98:	40020488 	.word	0x40020488
 8007f9c:	400204a0 	.word	0x400204a0
 8007fa0:	400204b8 	.word	0x400204b8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bf14      	ite	ne
 8007fb2:	2301      	movne	r3, #1
 8007fb4:	2300      	moveq	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8087 	beq.w	80080cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	409a      	lsls	r2, r3
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d139      	bne.n	800804e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0216 	bic.w	r2, r2, #22
 8007fe8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	695a      	ldr	r2, [r3, #20]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ff8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <HAL_DMA_IRQHandler+0x736>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008006:	2b00      	cmp	r3, #0
 8008008:	d007      	beq.n	800801a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0208 	bic.w	r2, r2, #8
 8008018:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	223f      	movs	r2, #63	; 0x3f
 8008024:	409a      	lsls	r2, r3
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 834a 	beq.w	80086d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
          }
          return;
 800804c:	e344      	b.n	80086d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d018      	beq.n	800808e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d108      	bne.n	800807c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02c      	beq.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
 800807a:	e027      	b.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d023      	beq.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
 800808c:	e01e      	b.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10f      	bne.n	80080bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0210 	bic.w	r2, r2, #16
 80080aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8306 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 8088 	beq.w	80081f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2204      	movs	r2, #4
 80080e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a7a      	ldr	r2, [pc, #488]	; (80082dc <HAL_DMA_IRQHandler+0xa08>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d04a      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a79      	ldr	r2, [pc, #484]	; (80082e0 <HAL_DMA_IRQHandler+0xa0c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d045      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a77      	ldr	r2, [pc, #476]	; (80082e4 <HAL_DMA_IRQHandler+0xa10>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d040      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a76      	ldr	r2, [pc, #472]	; (80082e8 <HAL_DMA_IRQHandler+0xa14>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d03b      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a74      	ldr	r2, [pc, #464]	; (80082ec <HAL_DMA_IRQHandler+0xa18>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d036      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a73      	ldr	r2, [pc, #460]	; (80082f0 <HAL_DMA_IRQHandler+0xa1c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d031      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a71      	ldr	r2, [pc, #452]	; (80082f4 <HAL_DMA_IRQHandler+0xa20>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d02c      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a70      	ldr	r2, [pc, #448]	; (80082f8 <HAL_DMA_IRQHandler+0xa24>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d027      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a6e      	ldr	r2, [pc, #440]	; (80082fc <HAL_DMA_IRQHandler+0xa28>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d022      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a6d      	ldr	r2, [pc, #436]	; (8008300 <HAL_DMA_IRQHandler+0xa2c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d01d      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a6b      	ldr	r2, [pc, #428]	; (8008304 <HAL_DMA_IRQHandler+0xa30>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d018      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a6a      	ldr	r2, [pc, #424]	; (8008308 <HAL_DMA_IRQHandler+0xa34>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d013      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a68      	ldr	r2, [pc, #416]	; (800830c <HAL_DMA_IRQHandler+0xa38>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00e      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a67      	ldr	r2, [pc, #412]	; (8008310 <HAL_DMA_IRQHandler+0xa3c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d009      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a65      	ldr	r2, [pc, #404]	; (8008314 <HAL_DMA_IRQHandler+0xa40>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d004      	beq.n	800818c <HAL_DMA_IRQHandler+0x8b8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a64      	ldr	r2, [pc, #400]	; (8008318 <HAL_DMA_IRQHandler+0xa44>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d108      	bne.n	800819e <HAL_DMA_IRQHandler+0x8ca>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	e007      	b.n	80081ae <HAL_DMA_IRQHandler+0x8da>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3301      	adds	r3, #1
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d307      	bcc.n	80081ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f2      	bne.n	80081ae <HAL_DMA_IRQHandler+0x8da>
 80081c8:	e000      	b.n	80081cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80081ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2203      	movs	r2, #3
 80081de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80081e2:	e003      	b.n	80081ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8272 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
 8008206:	e26c      	b.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a43      	ldr	r2, [pc, #268]	; (800831c <HAL_DMA_IRQHandler+0xa48>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d022      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a42      	ldr	r2, [pc, #264]	; (8008320 <HAL_DMA_IRQHandler+0xa4c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d01d      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a40      	ldr	r2, [pc, #256]	; (8008324 <HAL_DMA_IRQHandler+0xa50>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d018      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <HAL_DMA_IRQHandler+0xa54>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d013      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a3d      	ldr	r2, [pc, #244]	; (800832c <HAL_DMA_IRQHandler+0xa58>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00e      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a3c      	ldr	r2, [pc, #240]	; (8008330 <HAL_DMA_IRQHandler+0xa5c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d009      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a3a      	ldr	r2, [pc, #232]	; (8008334 <HAL_DMA_IRQHandler+0xa60>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d004      	beq.n	8008258 <HAL_DMA_IRQHandler+0x984>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a39      	ldr	r2, [pc, #228]	; (8008338 <HAL_DMA_IRQHandler+0xa64>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d101      	bne.n	800825c <HAL_DMA_IRQHandler+0x988>
 8008258:	2301      	movs	r3, #1
 800825a:	e000      	b.n	800825e <HAL_DMA_IRQHandler+0x98a>
 800825c:	2300      	movs	r3, #0
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 823f 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2204      	movs	r2, #4
 8008276:	409a      	lsls	r2, r3
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	4013      	ands	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80cd 	beq.w	800841c <HAL_DMA_IRQHandler+0xb48>
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 80c7 	beq.w	800841c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008292:	f003 031f 	and.w	r3, r3, #31
 8008296:	2204      	movs	r2, #4
 8008298:	409a      	lsls	r2, r3
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d049      	beq.n	800833c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d109      	bne.n	80082c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 8210 	beq.w	80086dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082c4:	e20a      	b.n	80086dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8206 	beq.w	80086dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082d8:	e200      	b.n	80086dc <HAL_DMA_IRQHandler+0xe08>
 80082da:	bf00      	nop
 80082dc:	40020010 	.word	0x40020010
 80082e0:	40020028 	.word	0x40020028
 80082e4:	40020040 	.word	0x40020040
 80082e8:	40020058 	.word	0x40020058
 80082ec:	40020070 	.word	0x40020070
 80082f0:	40020088 	.word	0x40020088
 80082f4:	400200a0 	.word	0x400200a0
 80082f8:	400200b8 	.word	0x400200b8
 80082fc:	40020410 	.word	0x40020410
 8008300:	40020428 	.word	0x40020428
 8008304:	40020440 	.word	0x40020440
 8008308:	40020458 	.word	0x40020458
 800830c:	40020470 	.word	0x40020470
 8008310:	40020488 	.word	0x40020488
 8008314:	400204a0 	.word	0x400204a0
 8008318:	400204b8 	.word	0x400204b8
 800831c:	58025408 	.word	0x58025408
 8008320:	5802541c 	.word	0x5802541c
 8008324:	58025430 	.word	0x58025430
 8008328:	58025444 	.word	0x58025444
 800832c:	58025458 	.word	0x58025458
 8008330:	5802546c 	.word	0x5802546c
 8008334:	58025480 	.word	0x58025480
 8008338:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f003 0320 	and.w	r3, r3, #32
 8008342:	2b00      	cmp	r3, #0
 8008344:	d160      	bne.n	8008408 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a7f      	ldr	r2, [pc, #508]	; (8008548 <HAL_DMA_IRQHandler+0xc74>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d04a      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a7d      	ldr	r2, [pc, #500]	; (800854c <HAL_DMA_IRQHandler+0xc78>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d045      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a7c      	ldr	r2, [pc, #496]	; (8008550 <HAL_DMA_IRQHandler+0xc7c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d040      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a7a      	ldr	r2, [pc, #488]	; (8008554 <HAL_DMA_IRQHandler+0xc80>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d03b      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a79      	ldr	r2, [pc, #484]	; (8008558 <HAL_DMA_IRQHandler+0xc84>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d036      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a77      	ldr	r2, [pc, #476]	; (800855c <HAL_DMA_IRQHandler+0xc88>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d031      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a76      	ldr	r2, [pc, #472]	; (8008560 <HAL_DMA_IRQHandler+0xc8c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d02c      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a74      	ldr	r2, [pc, #464]	; (8008564 <HAL_DMA_IRQHandler+0xc90>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d027      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a73      	ldr	r2, [pc, #460]	; (8008568 <HAL_DMA_IRQHandler+0xc94>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d022      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a71      	ldr	r2, [pc, #452]	; (800856c <HAL_DMA_IRQHandler+0xc98>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d01d      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a70      	ldr	r2, [pc, #448]	; (8008570 <HAL_DMA_IRQHandler+0xc9c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d018      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a6e      	ldr	r2, [pc, #440]	; (8008574 <HAL_DMA_IRQHandler+0xca0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d013      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a6d      	ldr	r2, [pc, #436]	; (8008578 <HAL_DMA_IRQHandler+0xca4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a6b      	ldr	r2, [pc, #428]	; (800857c <HAL_DMA_IRQHandler+0xca8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d009      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a6a      	ldr	r2, [pc, #424]	; (8008580 <HAL_DMA_IRQHandler+0xcac>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xb12>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a68      	ldr	r2, [pc, #416]	; (8008584 <HAL_DMA_IRQHandler+0xcb0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d108      	bne.n	80083f8 <HAL_DMA_IRQHandler+0xb24>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0208 	bic.w	r2, r2, #8
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	e007      	b.n	8008408 <HAL_DMA_IRQHandler+0xb34>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0204 	bic.w	r2, r2, #4
 8008406:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 8165 	beq.w	80086dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800841a:	e15f      	b.n	80086dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008420:	f003 031f 	and.w	r3, r3, #31
 8008424:	2202      	movs	r2, #2
 8008426:	409a      	lsls	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 80c5 	beq.w	80085bc <HAL_DMA_IRQHandler+0xce8>
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80bf 	beq.w	80085bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008442:	f003 031f 	and.w	r3, r3, #31
 8008446:	2202      	movs	r2, #2
 8008448:	409a      	lsls	r2, r3
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d018      	beq.n	800848a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 813a 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008474:	e134      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 8130 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008488:	e12a      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	f040 8089 	bne.w	80085a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a2b      	ldr	r2, [pc, #172]	; (8008548 <HAL_DMA_IRQHandler+0xc74>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d04a      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a29      	ldr	r2, [pc, #164]	; (800854c <HAL_DMA_IRQHandler+0xc78>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d045      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a28      	ldr	r2, [pc, #160]	; (8008550 <HAL_DMA_IRQHandler+0xc7c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d040      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a26      	ldr	r2, [pc, #152]	; (8008554 <HAL_DMA_IRQHandler+0xc80>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d03b      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a25      	ldr	r2, [pc, #148]	; (8008558 <HAL_DMA_IRQHandler+0xc84>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d036      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a23      	ldr	r2, [pc, #140]	; (800855c <HAL_DMA_IRQHandler+0xc88>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d031      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a22      	ldr	r2, [pc, #136]	; (8008560 <HAL_DMA_IRQHandler+0xc8c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d02c      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a20      	ldr	r2, [pc, #128]	; (8008564 <HAL_DMA_IRQHandler+0xc90>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d027      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1f      	ldr	r2, [pc, #124]	; (8008568 <HAL_DMA_IRQHandler+0xc94>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d022      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a1d      	ldr	r2, [pc, #116]	; (800856c <HAL_DMA_IRQHandler+0xc98>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d01d      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a1c      	ldr	r2, [pc, #112]	; (8008570 <HAL_DMA_IRQHandler+0xc9c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d018      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <HAL_DMA_IRQHandler+0xca0>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d013      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a19      	ldr	r2, [pc, #100]	; (8008578 <HAL_DMA_IRQHandler+0xca4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d00e      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a17      	ldr	r2, [pc, #92]	; (800857c <HAL_DMA_IRQHandler+0xca8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d009      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a16      	ldr	r2, [pc, #88]	; (8008580 <HAL_DMA_IRQHandler+0xcac>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d004      	beq.n	8008536 <HAL_DMA_IRQHandler+0xc62>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a14      	ldr	r2, [pc, #80]	; (8008584 <HAL_DMA_IRQHandler+0xcb0>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d128      	bne.n	8008588 <HAL_DMA_IRQHandler+0xcb4>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0214 	bic.w	r2, r2, #20
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	e027      	b.n	8008598 <HAL_DMA_IRQHandler+0xcc4>
 8008548:	40020010 	.word	0x40020010
 800854c:	40020028 	.word	0x40020028
 8008550:	40020040 	.word	0x40020040
 8008554:	40020058 	.word	0x40020058
 8008558:	40020070 	.word	0x40020070
 800855c:	40020088 	.word	0x40020088
 8008560:	400200a0 	.word	0x400200a0
 8008564:	400200b8 	.word	0x400200b8
 8008568:	40020410 	.word	0x40020410
 800856c:	40020428 	.word	0x40020428
 8008570:	40020440 	.word	0x40020440
 8008574:	40020458 	.word	0x40020458
 8008578:	40020470 	.word	0x40020470
 800857c:	40020488 	.word	0x40020488
 8008580:	400204a0 	.word	0x400204a0
 8008584:	400204b8 	.word	0x400204b8
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 020a 	bic.w	r2, r2, #10
 8008596:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8097 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085ba:	e091      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c0:	f003 031f 	and.w	r3, r3, #31
 80085c4:	2208      	movs	r2, #8
 80085c6:	409a      	lsls	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	4013      	ands	r3, r2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 8088 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8082 	beq.w	80086e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a41      	ldr	r2, [pc, #260]	; (80086e8 <HAL_DMA_IRQHandler+0xe14>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d04a      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a3f      	ldr	r2, [pc, #252]	; (80086ec <HAL_DMA_IRQHandler+0xe18>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d045      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a3e      	ldr	r2, [pc, #248]	; (80086f0 <HAL_DMA_IRQHandler+0xe1c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d040      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a3c      	ldr	r2, [pc, #240]	; (80086f4 <HAL_DMA_IRQHandler+0xe20>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d03b      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a3b      	ldr	r2, [pc, #236]	; (80086f8 <HAL_DMA_IRQHandler+0xe24>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d036      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a39      	ldr	r2, [pc, #228]	; (80086fc <HAL_DMA_IRQHandler+0xe28>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d031      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a38      	ldr	r2, [pc, #224]	; (8008700 <HAL_DMA_IRQHandler+0xe2c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d02c      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a36      	ldr	r2, [pc, #216]	; (8008704 <HAL_DMA_IRQHandler+0xe30>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d027      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a35      	ldr	r2, [pc, #212]	; (8008708 <HAL_DMA_IRQHandler+0xe34>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d022      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a33      	ldr	r2, [pc, #204]	; (800870c <HAL_DMA_IRQHandler+0xe38>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d01d      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a32      	ldr	r2, [pc, #200]	; (8008710 <HAL_DMA_IRQHandler+0xe3c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d018      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a30      	ldr	r2, [pc, #192]	; (8008714 <HAL_DMA_IRQHandler+0xe40>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d013      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a2f      	ldr	r2, [pc, #188]	; (8008718 <HAL_DMA_IRQHandler+0xe44>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00e      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a2d      	ldr	r2, [pc, #180]	; (800871c <HAL_DMA_IRQHandler+0xe48>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d009      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a2c      	ldr	r2, [pc, #176]	; (8008720 <HAL_DMA_IRQHandler+0xe4c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d004      	beq.n	800867e <HAL_DMA_IRQHandler+0xdaa>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a2a      	ldr	r2, [pc, #168]	; (8008724 <HAL_DMA_IRQHandler+0xe50>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d108      	bne.n	8008690 <HAL_DMA_IRQHandler+0xdbc>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 021c 	bic.w	r2, r2, #28
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e007      	b.n	80086a0 <HAL_DMA_IRQHandler+0xdcc>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 020e 	bic.w	r2, r2, #14
 800869e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	2201      	movs	r2, #1
 80086aa:	409a      	lsls	r2, r3
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
 80086d6:	e004      	b.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80086d8:	bf00      	nop
 80086da:	e002      	b.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086dc:	bf00      	nop
 80086de:	e000      	b.n	80086e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80086e2:	3728      	adds	r7, #40	; 0x28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40020010 	.word	0x40020010
 80086ec:	40020028 	.word	0x40020028
 80086f0:	40020040 	.word	0x40020040
 80086f4:	40020058 	.word	0x40020058
 80086f8:	40020070 	.word	0x40020070
 80086fc:	40020088 	.word	0x40020088
 8008700:	400200a0 	.word	0x400200a0
 8008704:	400200b8 	.word	0x400200b8
 8008708:	40020410 	.word	0x40020410
 800870c:	40020428 	.word	0x40020428
 8008710:	40020440 	.word	0x40020440
 8008714:	40020458 	.word	0x40020458
 8008718:	40020470 	.word	0x40020470
 800871c:	40020488 	.word	0x40020488
 8008720:	400204a0 	.word	0x400204a0
 8008724:	400204b8 	.word	0x400204b8

08008728 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008734:	4618      	mov	r0, r3
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008752:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008758:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a7f      	ldr	r2, [pc, #508]	; (800895c <DMA_SetConfig+0x21c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d072      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a7d      	ldr	r2, [pc, #500]	; (8008960 <DMA_SetConfig+0x220>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d06d      	beq.n	800884a <DMA_SetConfig+0x10a>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a7c      	ldr	r2, [pc, #496]	; (8008964 <DMA_SetConfig+0x224>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d068      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a7a      	ldr	r2, [pc, #488]	; (8008968 <DMA_SetConfig+0x228>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d063      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a79      	ldr	r2, [pc, #484]	; (800896c <DMA_SetConfig+0x22c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d05e      	beq.n	800884a <DMA_SetConfig+0x10a>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a77      	ldr	r2, [pc, #476]	; (8008970 <DMA_SetConfig+0x230>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d059      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a76      	ldr	r2, [pc, #472]	; (8008974 <DMA_SetConfig+0x234>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d054      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a74      	ldr	r2, [pc, #464]	; (8008978 <DMA_SetConfig+0x238>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d04f      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a73      	ldr	r2, [pc, #460]	; (800897c <DMA_SetConfig+0x23c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d04a      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a71      	ldr	r2, [pc, #452]	; (8008980 <DMA_SetConfig+0x240>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d045      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a70      	ldr	r2, [pc, #448]	; (8008984 <DMA_SetConfig+0x244>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d040      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a6e      	ldr	r2, [pc, #440]	; (8008988 <DMA_SetConfig+0x248>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d03b      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a6d      	ldr	r2, [pc, #436]	; (800898c <DMA_SetConfig+0x24c>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d036      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a6b      	ldr	r2, [pc, #428]	; (8008990 <DMA_SetConfig+0x250>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d031      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a6a      	ldr	r2, [pc, #424]	; (8008994 <DMA_SetConfig+0x254>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d02c      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a68      	ldr	r2, [pc, #416]	; (8008998 <DMA_SetConfig+0x258>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d027      	beq.n	800884a <DMA_SetConfig+0x10a>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a67      	ldr	r2, [pc, #412]	; (800899c <DMA_SetConfig+0x25c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d022      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a65      	ldr	r2, [pc, #404]	; (80089a0 <DMA_SetConfig+0x260>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d01d      	beq.n	800884a <DMA_SetConfig+0x10a>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a64      	ldr	r2, [pc, #400]	; (80089a4 <DMA_SetConfig+0x264>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d018      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a62      	ldr	r2, [pc, #392]	; (80089a8 <DMA_SetConfig+0x268>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d013      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a61      	ldr	r2, [pc, #388]	; (80089ac <DMA_SetConfig+0x26c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00e      	beq.n	800884a <DMA_SetConfig+0x10a>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a5f      	ldr	r2, [pc, #380]	; (80089b0 <DMA_SetConfig+0x270>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d009      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a5e      	ldr	r2, [pc, #376]	; (80089b4 <DMA_SetConfig+0x274>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d004      	beq.n	800884a <DMA_SetConfig+0x10a>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a5c      	ldr	r2, [pc, #368]	; (80089b8 <DMA_SetConfig+0x278>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d101      	bne.n	800884e <DMA_SetConfig+0x10e>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <DMA_SetConfig+0x110>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00d      	beq.n	8008870 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800885c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800886e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a39      	ldr	r2, [pc, #228]	; (800895c <DMA_SetConfig+0x21c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d04a      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a38      	ldr	r2, [pc, #224]	; (8008960 <DMA_SetConfig+0x220>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d045      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a36      	ldr	r2, [pc, #216]	; (8008964 <DMA_SetConfig+0x224>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d040      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a35      	ldr	r2, [pc, #212]	; (8008968 <DMA_SetConfig+0x228>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d03b      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a33      	ldr	r2, [pc, #204]	; (800896c <DMA_SetConfig+0x22c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d036      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a32      	ldr	r2, [pc, #200]	; (8008970 <DMA_SetConfig+0x230>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d031      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a30      	ldr	r2, [pc, #192]	; (8008974 <DMA_SetConfig+0x234>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d02c      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a2f      	ldr	r2, [pc, #188]	; (8008978 <DMA_SetConfig+0x238>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d027      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a2d      	ldr	r2, [pc, #180]	; (800897c <DMA_SetConfig+0x23c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d022      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a2c      	ldr	r2, [pc, #176]	; (8008980 <DMA_SetConfig+0x240>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d01d      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a2a      	ldr	r2, [pc, #168]	; (8008984 <DMA_SetConfig+0x244>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d018      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a29      	ldr	r2, [pc, #164]	; (8008988 <DMA_SetConfig+0x248>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d013      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a27      	ldr	r2, [pc, #156]	; (800898c <DMA_SetConfig+0x24c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00e      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a26      	ldr	r2, [pc, #152]	; (8008990 <DMA_SetConfig+0x250>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d009      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a24      	ldr	r2, [pc, #144]	; (8008994 <DMA_SetConfig+0x254>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d004      	beq.n	8008910 <DMA_SetConfig+0x1d0>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a23      	ldr	r2, [pc, #140]	; (8008998 <DMA_SetConfig+0x258>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d101      	bne.n	8008914 <DMA_SetConfig+0x1d4>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <DMA_SetConfig+0x1d6>
 8008914:	2300      	movs	r3, #0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d059      	beq.n	80089ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800891e:	f003 031f 	and.w	r3, r3, #31
 8008922:	223f      	movs	r2, #63	; 0x3f
 8008924:	409a      	lsls	r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008938:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d138      	bne.n	80089bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800895a:	e086      	b.n	8008a6a <DMA_SetConfig+0x32a>
 800895c:	40020010 	.word	0x40020010
 8008960:	40020028 	.word	0x40020028
 8008964:	40020040 	.word	0x40020040
 8008968:	40020058 	.word	0x40020058
 800896c:	40020070 	.word	0x40020070
 8008970:	40020088 	.word	0x40020088
 8008974:	400200a0 	.word	0x400200a0
 8008978:	400200b8 	.word	0x400200b8
 800897c:	40020410 	.word	0x40020410
 8008980:	40020428 	.word	0x40020428
 8008984:	40020440 	.word	0x40020440
 8008988:	40020458 	.word	0x40020458
 800898c:	40020470 	.word	0x40020470
 8008990:	40020488 	.word	0x40020488
 8008994:	400204a0 	.word	0x400204a0
 8008998:	400204b8 	.word	0x400204b8
 800899c:	58025408 	.word	0x58025408
 80089a0:	5802541c 	.word	0x5802541c
 80089a4:	58025430 	.word	0x58025430
 80089a8:	58025444 	.word	0x58025444
 80089ac:	58025458 	.word	0x58025458
 80089b0:	5802546c 	.word	0x5802546c
 80089b4:	58025480 	.word	0x58025480
 80089b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	60da      	str	r2, [r3, #12]
}
 80089cc:	e04d      	b.n	8008a6a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a29      	ldr	r2, [pc, #164]	; (8008a78 <DMA_SetConfig+0x338>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d022      	beq.n	8008a1e <DMA_SetConfig+0x2de>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a27      	ldr	r2, [pc, #156]	; (8008a7c <DMA_SetConfig+0x33c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d01d      	beq.n	8008a1e <DMA_SetConfig+0x2de>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a26      	ldr	r2, [pc, #152]	; (8008a80 <DMA_SetConfig+0x340>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d018      	beq.n	8008a1e <DMA_SetConfig+0x2de>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a24      	ldr	r2, [pc, #144]	; (8008a84 <DMA_SetConfig+0x344>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <DMA_SetConfig+0x2de>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a23      	ldr	r2, [pc, #140]	; (8008a88 <DMA_SetConfig+0x348>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00e      	beq.n	8008a1e <DMA_SetConfig+0x2de>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a21      	ldr	r2, [pc, #132]	; (8008a8c <DMA_SetConfig+0x34c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d009      	beq.n	8008a1e <DMA_SetConfig+0x2de>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a20      	ldr	r2, [pc, #128]	; (8008a90 <DMA_SetConfig+0x350>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d004      	beq.n	8008a1e <DMA_SetConfig+0x2de>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a1e      	ldr	r2, [pc, #120]	; (8008a94 <DMA_SetConfig+0x354>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d101      	bne.n	8008a22 <DMA_SetConfig+0x2e2>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e000      	b.n	8008a24 <DMA_SetConfig+0x2e4>
 8008a22:	2300      	movs	r3, #0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d020      	beq.n	8008a6a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a2c:	f003 031f 	and.w	r3, r3, #31
 8008a30:	2201      	movs	r2, #1
 8008a32:	409a      	lsls	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b40      	cmp	r3, #64	; 0x40
 8008a46:	d108      	bne.n	8008a5a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	60da      	str	r2, [r3, #12]
}
 8008a58:	e007      	b.n	8008a6a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	60da      	str	r2, [r3, #12]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	58025408 	.word	0x58025408
 8008a7c:	5802541c 	.word	0x5802541c
 8008a80:	58025430 	.word	0x58025430
 8008a84:	58025444 	.word	0x58025444
 8008a88:	58025458 	.word	0x58025458
 8008a8c:	5802546c 	.word	0x5802546c
 8008a90:	58025480 	.word	0x58025480
 8008a94:	58025494 	.word	0x58025494

08008a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a42      	ldr	r2, [pc, #264]	; (8008bb0 <DMA_CalcBaseAndBitshift+0x118>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d04a      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a41      	ldr	r2, [pc, #260]	; (8008bb4 <DMA_CalcBaseAndBitshift+0x11c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d045      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a3f      	ldr	r2, [pc, #252]	; (8008bb8 <DMA_CalcBaseAndBitshift+0x120>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d040      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a3e      	ldr	r2, [pc, #248]	; (8008bbc <DMA_CalcBaseAndBitshift+0x124>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d03b      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a3c      	ldr	r2, [pc, #240]	; (8008bc0 <DMA_CalcBaseAndBitshift+0x128>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d036      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a3b      	ldr	r2, [pc, #236]	; (8008bc4 <DMA_CalcBaseAndBitshift+0x12c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d031      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a39      	ldr	r2, [pc, #228]	; (8008bc8 <DMA_CalcBaseAndBitshift+0x130>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d02c      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a38      	ldr	r2, [pc, #224]	; (8008bcc <DMA_CalcBaseAndBitshift+0x134>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d027      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a36      	ldr	r2, [pc, #216]	; (8008bd0 <DMA_CalcBaseAndBitshift+0x138>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d022      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a35      	ldr	r2, [pc, #212]	; (8008bd4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d01d      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a33      	ldr	r2, [pc, #204]	; (8008bd8 <DMA_CalcBaseAndBitshift+0x140>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d018      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a32      	ldr	r2, [pc, #200]	; (8008bdc <DMA_CalcBaseAndBitshift+0x144>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d013      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a30      	ldr	r2, [pc, #192]	; (8008be0 <DMA_CalcBaseAndBitshift+0x148>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00e      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a2f      	ldr	r2, [pc, #188]	; (8008be4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d009      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a2d      	ldr	r2, [pc, #180]	; (8008be8 <DMA_CalcBaseAndBitshift+0x150>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d004      	beq.n	8008b40 <DMA_CalcBaseAndBitshift+0xa8>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a2c      	ldr	r2, [pc, #176]	; (8008bec <DMA_CalcBaseAndBitshift+0x154>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d101      	bne.n	8008b44 <DMA_CalcBaseAndBitshift+0xac>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e000      	b.n	8008b46 <DMA_CalcBaseAndBitshift+0xae>
 8008b44:	2300      	movs	r3, #0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d024      	beq.n	8008b94 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	3b10      	subs	r3, #16
 8008b52:	4a27      	ldr	r2, [pc, #156]	; (8008bf0 <DMA_CalcBaseAndBitshift+0x158>)
 8008b54:	fba2 2303 	umull	r2, r3, r2, r3
 8008b58:	091b      	lsrs	r3, r3, #4
 8008b5a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	4a24      	ldr	r2, [pc, #144]	; (8008bf4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008b64:	5cd3      	ldrb	r3, [r2, r3]
 8008b66:	461a      	mov	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d908      	bls.n	8008b84 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	4b1f      	ldr	r3, [pc, #124]	; (8008bf8 <DMA_CalcBaseAndBitshift+0x160>)
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	1d1a      	adds	r2, r3, #4
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	659a      	str	r2, [r3, #88]	; 0x58
 8008b82:	e00d      	b.n	8008ba0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b1b      	ldr	r3, [pc, #108]	; (8008bf8 <DMA_CalcBaseAndBitshift+0x160>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6593      	str	r3, [r2, #88]	; 0x58
 8008b92:	e005      	b.n	8008ba0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40020010 	.word	0x40020010
 8008bb4:	40020028 	.word	0x40020028
 8008bb8:	40020040 	.word	0x40020040
 8008bbc:	40020058 	.word	0x40020058
 8008bc0:	40020070 	.word	0x40020070
 8008bc4:	40020088 	.word	0x40020088
 8008bc8:	400200a0 	.word	0x400200a0
 8008bcc:	400200b8 	.word	0x400200b8
 8008bd0:	40020410 	.word	0x40020410
 8008bd4:	40020428 	.word	0x40020428
 8008bd8:	40020440 	.word	0x40020440
 8008bdc:	40020458 	.word	0x40020458
 8008be0:	40020470 	.word	0x40020470
 8008be4:	40020488 	.word	0x40020488
 8008be8:	400204a0 	.word	0x400204a0
 8008bec:	400204b8 	.word	0x400204b8
 8008bf0:	aaaaaaab 	.word	0xaaaaaaab
 8008bf4:	08017920 	.word	0x08017920
 8008bf8:	fffffc00 	.word	0xfffffc00

08008bfc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d120      	bne.n	8008c52 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d858      	bhi.n	8008cca <DMA_CheckFifoParam+0xce>
 8008c18:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <DMA_CheckFifoParam+0x24>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008c31 	.word	0x08008c31
 8008c24:	08008c43 	.word	0x08008c43
 8008c28:	08008c31 	.word	0x08008c31
 8008c2c:	08008ccb 	.word	0x08008ccb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d048      	beq.n	8008cce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c40:	e045      	b.n	8008cce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c4a:	d142      	bne.n	8008cd2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c50:	e03f      	b.n	8008cd2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c5a:	d123      	bne.n	8008ca4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d838      	bhi.n	8008cd6 <DMA_CheckFifoParam+0xda>
 8008c64:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <DMA_CheckFifoParam+0x70>)
 8008c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6a:	bf00      	nop
 8008c6c:	08008c7d 	.word	0x08008c7d
 8008c70:	08008c83 	.word	0x08008c83
 8008c74:	08008c7d 	.word	0x08008c7d
 8008c78:	08008c95 	.word	0x08008c95
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
        break;
 8008c80:	e030      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d025      	beq.n	8008cda <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c92:	e022      	b.n	8008cda <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c9c:	d11f      	bne.n	8008cde <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ca2:	e01c      	b.n	8008cde <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d902      	bls.n	8008cb2 <DMA_CheckFifoParam+0xb6>
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d003      	beq.n	8008cb8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008cb0:	e018      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	73fb      	strb	r3, [r7, #15]
        break;
 8008cb6:	e015      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00e      	beq.n	8008ce2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc8:	e00b      	b.n	8008ce2 <DMA_CheckFifoParam+0xe6>
        break;
 8008cca:	bf00      	nop
 8008ccc:	e00a      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cce:	bf00      	nop
 8008cd0:	e008      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cd2:	bf00      	nop
 8008cd4:	e006      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cd6:	bf00      	nop
 8008cd8:	e004      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cda:	bf00      	nop
 8008cdc:	e002      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cde:	bf00      	nop
 8008ce0:	e000      	b.n	8008ce4 <DMA_CheckFifoParam+0xe8>
    break;
 8008ce2:	bf00      	nop
    }
  }

  return status;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop

08008cf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a38      	ldr	r2, [pc, #224]	; (8008de8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d022      	beq.n	8008d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a36      	ldr	r2, [pc, #216]	; (8008dec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d01d      	beq.n	8008d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a35      	ldr	r2, [pc, #212]	; (8008df0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d018      	beq.n	8008d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a33      	ldr	r2, [pc, #204]	; (8008df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d013      	beq.n	8008d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a32      	ldr	r2, [pc, #200]	; (8008df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00e      	beq.n	8008d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a30      	ldr	r2, [pc, #192]	; (8008dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d009      	beq.n	8008d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a2f      	ldr	r2, [pc, #188]	; (8008e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d004      	beq.n	8008d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2d      	ldr	r2, [pc, #180]	; (8008e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d101      	bne.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008d56:	2300      	movs	r3, #0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01a      	beq.n	8008d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	3b08      	subs	r3, #8
 8008d64:	4a28      	ldr	r2, [pc, #160]	; (8008e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008d66:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6a:	091b      	lsrs	r3, r3, #4
 8008d6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4b26      	ldr	r3, [pc, #152]	; (8008e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	461a      	mov	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a24      	ldr	r2, [pc, #144]	; (8008e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008d80:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f003 031f 	and.w	r3, r3, #31
 8008d88:	2201      	movs	r2, #1
 8008d8a:	409a      	lsls	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008d90:	e024      	b.n	8008ddc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	3b10      	subs	r3, #16
 8008d9a:	4a1e      	ldr	r2, [pc, #120]	; (8008e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008da0:	091b      	lsrs	r3, r3, #4
 8008da2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4a1c      	ldr	r2, [pc, #112]	; (8008e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d806      	bhi.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	4a1b      	ldr	r2, [pc, #108]	; (8008e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d902      	bls.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3308      	adds	r3, #8
 8008db8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	4b18      	ldr	r3, [pc, #96]	; (8008e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008dbe:	4413      	add	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a16      	ldr	r2, [pc, #88]	; (8008e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008dcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f003 031f 	and.w	r3, r3, #31
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	409a      	lsls	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	58025408 	.word	0x58025408
 8008dec:	5802541c 	.word	0x5802541c
 8008df0:	58025430 	.word	0x58025430
 8008df4:	58025444 	.word	0x58025444
 8008df8:	58025458 	.word	0x58025458
 8008dfc:	5802546c 	.word	0x5802546c
 8008e00:	58025480 	.word	0x58025480
 8008e04:	58025494 	.word	0x58025494
 8008e08:	cccccccd 	.word	0xcccccccd
 8008e0c:	16009600 	.word	0x16009600
 8008e10:	58025880 	.word	0x58025880
 8008e14:	aaaaaaab 	.word	0xaaaaaaab
 8008e18:	400204b8 	.word	0x400204b8
 8008e1c:	4002040f 	.word	0x4002040f
 8008e20:	10008200 	.word	0x10008200
 8008e24:	40020880 	.word	0x40020880

08008e28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d04a      	beq.n	8008ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d847      	bhi.n	8008ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a25      	ldr	r2, [pc, #148]	; (8008ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d022      	beq.n	8008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a24      	ldr	r2, [pc, #144]	; (8008ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d01d      	beq.n	8008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a22      	ldr	r2, [pc, #136]	; (8008ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d018      	beq.n	8008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a21      	ldr	r2, [pc, #132]	; (8008eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d013      	beq.n	8008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a1f      	ldr	r2, [pc, #124]	; (8008ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00e      	beq.n	8008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a1e      	ldr	r2, [pc, #120]	; (8008ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d009      	beq.n	8008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1c      	ldr	r2, [pc, #112]	; (8008ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d004      	beq.n	8008e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d101      	bne.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00a      	beq.n	8008eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a15      	ldr	r2, [pc, #84]	; (8008f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008eb0:	671a      	str	r2, [r3, #112]	; 0x70
 8008eb2:	e009      	b.n	8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a11      	ldr	r2, [pc, #68]	; (8008f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008ec6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	2201      	movs	r2, #1
 8008ece:	409a      	lsls	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	58025408 	.word	0x58025408
 8008ee4:	5802541c 	.word	0x5802541c
 8008ee8:	58025430 	.word	0x58025430
 8008eec:	58025444 	.word	0x58025444
 8008ef0:	58025458 	.word	0x58025458
 8008ef4:	5802546c 	.word	0x5802546c
 8008ef8:	58025480 	.word	0x58025480
 8008efc:	58025494 	.word	0x58025494
 8008f00:	1600963f 	.word	0x1600963f
 8008f04:	58025940 	.word	0x58025940
 8008f08:	1000823f 	.word	0x1000823f
 8008f0c:	40020940 	.word	0x40020940

08008f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b089      	sub	sp, #36	; 0x24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f1e:	4b89      	ldr	r3, [pc, #548]	; (8009144 <HAL_GPIO_Init+0x234>)
 8008f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f22:	e194      	b.n	800924e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	2101      	movs	r1, #1
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f30:	4013      	ands	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8186 	beq.w	8009248 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d005      	beq.n	8008f54 <HAL_GPIO_Init+0x44>
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d130      	bne.n	8008fb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	2203      	movs	r2, #3
 8008f60:	fa02 f303 	lsl.w	r3, r2, r3
 8008f64:	43db      	mvns	r3, r3
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	fa02 f303 	lsl.w	r3, r2, r3
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f92:	43db      	mvns	r3, r3
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	4013      	ands	r3, r2
 8008f98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	091b      	lsrs	r3, r3, #4
 8008fa0:	f003 0201 	and.w	r2, r3, #1
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d017      	beq.n	8008ff2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	2203      	movs	r2, #3
 8008fce:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d123      	bne.n	8009046 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	08da      	lsrs	r2, r3, #3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3208      	adds	r2, #8
 8009006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	220f      	movs	r2, #15
 8009016:	fa02 f303 	lsl.w	r3, r2, r3
 800901a:	43db      	mvns	r3, r3
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	4013      	ands	r3, r2
 8009020:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	691a      	ldr	r2, [r3, #16]
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	fa02 f303 	lsl.w	r3, r2, r3
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	4313      	orrs	r3, r2
 8009036:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	08da      	lsrs	r2, r3, #3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3208      	adds	r2, #8
 8009040:	69b9      	ldr	r1, [r7, #24]
 8009042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	2203      	movs	r2, #3
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	43db      	mvns	r3, r3
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	4013      	ands	r3, r2
 800905c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f003 0203 	and.w	r2, r3, #3
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	fa02 f303 	lsl.w	r3, r2, r3
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	4313      	orrs	r3, r2
 8009072:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 80e0 	beq.w	8009248 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009088:	4b2f      	ldr	r3, [pc, #188]	; (8009148 <HAL_GPIO_Init+0x238>)
 800908a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800908e:	4a2e      	ldr	r2, [pc, #184]	; (8009148 <HAL_GPIO_Init+0x238>)
 8009090:	f043 0302 	orr.w	r3, r3, #2
 8009094:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009098:	4b2b      	ldr	r3, [pc, #172]	; (8009148 <HAL_GPIO_Init+0x238>)
 800909a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090a6:	4a29      	ldr	r2, [pc, #164]	; (800914c <HAL_GPIO_Init+0x23c>)
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	089b      	lsrs	r3, r3, #2
 80090ac:	3302      	adds	r3, #2
 80090ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	220f      	movs	r2, #15
 80090be:	fa02 f303 	lsl.w	r3, r2, r3
 80090c2:	43db      	mvns	r3, r3
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	4013      	ands	r3, r2
 80090c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a20      	ldr	r2, [pc, #128]	; (8009150 <HAL_GPIO_Init+0x240>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d052      	beq.n	8009178 <HAL_GPIO_Init+0x268>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a1f      	ldr	r2, [pc, #124]	; (8009154 <HAL_GPIO_Init+0x244>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d031      	beq.n	800913e <HAL_GPIO_Init+0x22e>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a1e      	ldr	r2, [pc, #120]	; (8009158 <HAL_GPIO_Init+0x248>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d02b      	beq.n	800913a <HAL_GPIO_Init+0x22a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a1d      	ldr	r2, [pc, #116]	; (800915c <HAL_GPIO_Init+0x24c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d025      	beq.n	8009136 <HAL_GPIO_Init+0x226>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a1c      	ldr	r2, [pc, #112]	; (8009160 <HAL_GPIO_Init+0x250>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d01f      	beq.n	8009132 <HAL_GPIO_Init+0x222>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <HAL_GPIO_Init+0x254>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d019      	beq.n	800912e <HAL_GPIO_Init+0x21e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1a      	ldr	r2, [pc, #104]	; (8009168 <HAL_GPIO_Init+0x258>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d013      	beq.n	800912a <HAL_GPIO_Init+0x21a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a19      	ldr	r2, [pc, #100]	; (800916c <HAL_GPIO_Init+0x25c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d00d      	beq.n	8009126 <HAL_GPIO_Init+0x216>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a18      	ldr	r2, [pc, #96]	; (8009170 <HAL_GPIO_Init+0x260>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d007      	beq.n	8009122 <HAL_GPIO_Init+0x212>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a17      	ldr	r2, [pc, #92]	; (8009174 <HAL_GPIO_Init+0x264>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d101      	bne.n	800911e <HAL_GPIO_Init+0x20e>
 800911a:	2309      	movs	r3, #9
 800911c:	e02d      	b.n	800917a <HAL_GPIO_Init+0x26a>
 800911e:	230a      	movs	r3, #10
 8009120:	e02b      	b.n	800917a <HAL_GPIO_Init+0x26a>
 8009122:	2308      	movs	r3, #8
 8009124:	e029      	b.n	800917a <HAL_GPIO_Init+0x26a>
 8009126:	2307      	movs	r3, #7
 8009128:	e027      	b.n	800917a <HAL_GPIO_Init+0x26a>
 800912a:	2306      	movs	r3, #6
 800912c:	e025      	b.n	800917a <HAL_GPIO_Init+0x26a>
 800912e:	2305      	movs	r3, #5
 8009130:	e023      	b.n	800917a <HAL_GPIO_Init+0x26a>
 8009132:	2304      	movs	r3, #4
 8009134:	e021      	b.n	800917a <HAL_GPIO_Init+0x26a>
 8009136:	2303      	movs	r3, #3
 8009138:	e01f      	b.n	800917a <HAL_GPIO_Init+0x26a>
 800913a:	2302      	movs	r3, #2
 800913c:	e01d      	b.n	800917a <HAL_GPIO_Init+0x26a>
 800913e:	2301      	movs	r3, #1
 8009140:	e01b      	b.n	800917a <HAL_GPIO_Init+0x26a>
 8009142:	bf00      	nop
 8009144:	58000080 	.word	0x58000080
 8009148:	58024400 	.word	0x58024400
 800914c:	58000400 	.word	0x58000400
 8009150:	58020000 	.word	0x58020000
 8009154:	58020400 	.word	0x58020400
 8009158:	58020800 	.word	0x58020800
 800915c:	58020c00 	.word	0x58020c00
 8009160:	58021000 	.word	0x58021000
 8009164:	58021400 	.word	0x58021400
 8009168:	58021800 	.word	0x58021800
 800916c:	58021c00 	.word	0x58021c00
 8009170:	58022000 	.word	0x58022000
 8009174:	58022400 	.word	0x58022400
 8009178:	2300      	movs	r3, #0
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	f002 0203 	and.w	r2, r2, #3
 8009180:	0092      	lsls	r2, r2, #2
 8009182:	4093      	lsls	r3, r2
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	4313      	orrs	r3, r2
 8009188:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800918a:	4938      	ldr	r1, [pc, #224]	; (800926c <HAL_GPIO_Init+0x35c>)
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	089b      	lsrs	r3, r3, #2
 8009190:	3302      	adds	r3, #2
 8009192:	69ba      	ldr	r2, [r7, #24]
 8009194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	43db      	mvns	r3, r3
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	4013      	ands	r3, r2
 80091a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80091be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80091c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	43db      	mvns	r3, r3
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	4013      	ands	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80091ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	43db      	mvns	r3, r3
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	4013      	ands	r3, r2
 8009202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	4313      	orrs	r3, r2
 8009216:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	43db      	mvns	r3, r3
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	4013      	ands	r3, r2
 800922c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	3301      	adds	r3, #1
 800924c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	fa22 f303 	lsr.w	r3, r2, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	f47f ae63 	bne.w	8008f24 <HAL_GPIO_Init+0x14>
  }
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	3724      	adds	r7, #36	; 0x24
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	58000400 	.word	0x58000400

08009270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	887b      	ldrh	r3, [r7, #2]
 8009282:	4013      	ands	r3, r2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009288:	2301      	movs	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
 800928c:	e001      	b.n	8009292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	807b      	strh	r3, [r7, #2]
 80092ac:	4613      	mov	r3, r2
 80092ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092b0:	787b      	ldrb	r3, [r7, #1]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092b6:	887a      	ldrh	r2, [r7, #2]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80092bc:	e003      	b.n	80092c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80092be:	887b      	ldrh	r3, [r7, #2]
 80092c0:	041a      	lsls	r2, r3, #16
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	619a      	str	r2, [r3, #24]
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
	...

080092d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e08b      	b.n	80093fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fa f8c6 	bl	800348c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2224      	movs	r2, #36	; 0x24
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 0201 	bic.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009324:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009334:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d107      	bne.n	800934e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800934a:	609a      	str	r2, [r3, #8]
 800934c:	e006      	b.n	800935c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689a      	ldr	r2, [r3, #8]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800935a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	2b02      	cmp	r3, #2
 8009362:	d108      	bne.n	8009376 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009372:	605a      	str	r2, [r3, #4]
 8009374:	e007      	b.n	8009386 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009384:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6859      	ldr	r1, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4b1d      	ldr	r3, [pc, #116]	; (8009408 <HAL_I2C_Init+0x134>)
 8009392:	430b      	orrs	r3, r1
 8009394:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	69d9      	ldr	r1, [r3, #28]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1a      	ldr	r2, [r3, #32]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0201 	orr.w	r2, r2, #1
 80093de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2220      	movs	r2, #32
 80093ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	02008000 	.word	0x02008000

0800940c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af02      	add	r7, sp, #8
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	607a      	str	r2, [r7, #4]
 8009416:	461a      	mov	r2, r3
 8009418:	460b      	mov	r3, r1
 800941a:	817b      	strh	r3, [r7, #10]
 800941c:	4613      	mov	r3, r2
 800941e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b20      	cmp	r3, #32
 800942a:	f040 80fd 	bne.w	8009628 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009434:	2b01      	cmp	r3, #1
 8009436:	d101      	bne.n	800943c <HAL_I2C_Master_Transmit+0x30>
 8009438:	2302      	movs	r3, #2
 800943a:	e0f6      	b.n	800962a <HAL_I2C_Master_Transmit+0x21e>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009444:	f7fa fdf4 	bl	8004030 <HAL_GetTick>
 8009448:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	2319      	movs	r3, #25
 8009450:	2201      	movs	r2, #1
 8009452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fa0a 	bl	8009870 <I2C_WaitOnFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e0e1      	b.n	800962a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2221      	movs	r2, #33	; 0x21
 800946a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2210      	movs	r2, #16
 8009472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	893a      	ldrh	r2, [r7, #8]
 8009486:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009492:	b29b      	uxth	r3, r3
 8009494:	2bff      	cmp	r3, #255	; 0xff
 8009496:	d906      	bls.n	80094a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	22ff      	movs	r2, #255	; 0xff
 800949c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800949e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	e007      	b.n	80094b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80094b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d024      	beq.n	8009508 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	781a      	ldrb	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e6:	3b01      	subs	r3, #1
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	3301      	adds	r3, #1
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	8979      	ldrh	r1, [r7, #10]
 80094fa:	4b4e      	ldr	r3, [pc, #312]	; (8009634 <HAL_I2C_Master_Transmit+0x228>)
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fc05 	bl	8009d10 <I2C_TransferConfig>
 8009506:	e066      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	b2da      	uxtb	r2, r3
 800950e:	8979      	ldrh	r1, [r7, #10]
 8009510:	4b48      	ldr	r3, [pc, #288]	; (8009634 <HAL_I2C_Master_Transmit+0x228>)
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 fbfa 	bl	8009d10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800951c:	e05b      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	6a39      	ldr	r1, [r7, #32]
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 f9fd 	bl	8009922 <I2C_WaitOnTXISFlagUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e07b      	b.n	800962a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	781a      	ldrb	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954c:	b29b      	uxth	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	b29a      	uxth	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800955a:	3b01      	subs	r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009566:	b29b      	uxth	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d034      	beq.n	80095d6 <HAL_I2C_Master_Transmit+0x1ca>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009570:	2b00      	cmp	r3, #0
 8009572:	d130      	bne.n	80095d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	2200      	movs	r2, #0
 800957c:	2180      	movs	r1, #128	; 0x80
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f976 	bl	8009870 <I2C_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e04d      	b.n	800962a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009592:	b29b      	uxth	r3, r3
 8009594:	2bff      	cmp	r3, #255	; 0xff
 8009596:	d90e      	bls.n	80095b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	22ff      	movs	r2, #255	; 0xff
 800959c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	8979      	ldrh	r1, [r7, #10]
 80095a6:	2300      	movs	r3, #0
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 fbae 	bl	8009d10 <I2C_TransferConfig>
 80095b4:	e00f      	b.n	80095d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	8979      	ldrh	r1, [r7, #10]
 80095c8:	2300      	movs	r3, #0
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 fb9d 	bl	8009d10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095da:	b29b      	uxth	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d19e      	bne.n	800951e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	6a39      	ldr	r1, [r7, #32]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f9e3 	bl	80099b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e01a      	b.n	800962a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2220      	movs	r2, #32
 80095fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6859      	ldr	r1, [r3, #4]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <HAL_I2C_Master_Transmit+0x22c>)
 8009608:	400b      	ands	r3, r1
 800960a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2220      	movs	r2, #32
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e000      	b.n	800962a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009628:	2302      	movs	r3, #2
  }
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	80002000 	.word	0x80002000
 8009638:	fe00e800 	.word	0xfe00e800

0800963c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af02      	add	r7, sp, #8
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	607a      	str	r2, [r7, #4]
 8009646:	461a      	mov	r2, r3
 8009648:	460b      	mov	r3, r1
 800964a:	817b      	strh	r3, [r7, #10]
 800964c:	4613      	mov	r3, r2
 800964e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b20      	cmp	r3, #32
 800965a:	f040 80db 	bne.w	8009814 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <HAL_I2C_Master_Receive+0x30>
 8009668:	2302      	movs	r3, #2
 800966a:	e0d4      	b.n	8009816 <HAL_I2C_Master_Receive+0x1da>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009674:	f7fa fcdc 	bl	8004030 <HAL_GetTick>
 8009678:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	2319      	movs	r3, #25
 8009680:	2201      	movs	r2, #1
 8009682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 f8f2 	bl	8009870 <I2C_WaitOnFlagUntilTimeout>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e0bf      	b.n	8009816 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2222      	movs	r2, #34	; 0x22
 800969a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2210      	movs	r2, #16
 80096a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	893a      	ldrh	r2, [r7, #8]
 80096b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	2bff      	cmp	r3, #255	; 0xff
 80096c6:	d90e      	bls.n	80096e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	22ff      	movs	r2, #255	; 0xff
 80096cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	8979      	ldrh	r1, [r7, #10]
 80096d6:	4b52      	ldr	r3, [pc, #328]	; (8009820 <HAL_I2C_Master_Receive+0x1e4>)
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fb16 	bl	8009d10 <I2C_TransferConfig>
 80096e4:	e06d      	b.n	80097c2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	8979      	ldrh	r1, [r7, #10]
 80096f8:	4b49      	ldr	r3, [pc, #292]	; (8009820 <HAL_I2C_Master_Receive+0x1e4>)
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 fb05 	bl	8009d10 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009706:	e05c      	b.n	80097c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	6a39      	ldr	r1, [r7, #32]
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f993 	bl	8009a38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e07c      	b.n	8009816 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	b2d2      	uxtb	r2, r2
 8009728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009738:	3b01      	subs	r3, #1
 800973a:	b29a      	uxth	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009752:	b29b      	uxth	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d034      	beq.n	80097c2 <HAL_I2C_Master_Receive+0x186>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975c:	2b00      	cmp	r3, #0
 800975e:	d130      	bne.n	80097c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	2200      	movs	r2, #0
 8009768:	2180      	movs	r1, #128	; 0x80
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 f880 	bl	8009870 <I2C_WaitOnFlagUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e04d      	b.n	8009816 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977e:	b29b      	uxth	r3, r3
 8009780:	2bff      	cmp	r3, #255	; 0xff
 8009782:	d90e      	bls.n	80097a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	22ff      	movs	r2, #255	; 0xff
 8009788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978e:	b2da      	uxtb	r2, r3
 8009790:	8979      	ldrh	r1, [r7, #10]
 8009792:	2300      	movs	r3, #0
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fab8 	bl	8009d10 <I2C_TransferConfig>
 80097a0:	e00f      	b.n	80097c2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	8979      	ldrh	r1, [r7, #10]
 80097b4:	2300      	movs	r3, #0
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 faa7 	bl	8009d10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d19d      	bne.n	8009708 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	6a39      	ldr	r1, [r7, #32]
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 f8ed 	bl	80099b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e01a      	b.n	8009816 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2220      	movs	r2, #32
 80097e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6859      	ldr	r1, [r3, #4]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <HAL_I2C_Master_Receive+0x1e8>)
 80097f4:	400b      	ands	r3, r1
 80097f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	e000      	b.n	8009816 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009814:	2302      	movs	r3, #2
  }
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	80002400 	.word	0x80002400
 8009824:	fe00e800 	.word	0xfe00e800

08009828 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b02      	cmp	r3, #2
 800983c:	d103      	bne.n	8009846 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2200      	movs	r2, #0
 8009844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b01      	cmp	r3, #1
 8009852:	d007      	beq.n	8009864 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0201 	orr.w	r2, r2, #1
 8009862:	619a      	str	r2, [r3, #24]
  }
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	4613      	mov	r3, r2
 800987e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009880:	e03b      	b.n	80098fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f962 	bl	8009b50 <I2C_IsErrorOccurred>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e041      	b.n	800991a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989c:	d02d      	beq.n	80098fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800989e:	f7fa fbc7 	bl	8004030 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d302      	bcc.n	80098b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d122      	bne.n	80098fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699a      	ldr	r2, [r3, #24]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	4013      	ands	r3, r2
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	bf0c      	ite	eq
 80098c4:	2301      	moveq	r3, #1
 80098c6:	2300      	movne	r3, #0
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	461a      	mov	r2, r3
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d113      	bne.n	80098fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d6:	f043 0220 	orr.w	r2, r3, #32
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e00f      	b.n	800991a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	699a      	ldr	r2, [r3, #24]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4013      	ands	r3, r2
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	429a      	cmp	r2, r3
 8009908:	bf0c      	ite	eq
 800990a:	2301      	moveq	r3, #1
 800990c:	2300      	movne	r3, #0
 800990e:	b2db      	uxtb	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	429a      	cmp	r2, r3
 8009916:	d0b4      	beq.n	8009882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800992e:	e033      	b.n	8009998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	68b9      	ldr	r1, [r7, #8]
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 f90b 	bl	8009b50 <I2C_IsErrorOccurred>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e031      	b.n	80099a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800994a:	d025      	beq.n	8009998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800994c:	f7fa fb70 	bl	8004030 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	429a      	cmp	r2, r3
 800995a:	d302      	bcc.n	8009962 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d11a      	bne.n	8009998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	f003 0302 	and.w	r3, r3, #2
 800996c:	2b02      	cmp	r3, #2
 800996e:	d013      	beq.n	8009998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009974:	f043 0220 	orr.w	r2, r3, #32
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2220      	movs	r2, #32
 8009980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e007      	b.n	80099a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d1c4      	bne.n	8009930 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099bc:	e02f      	b.n	8009a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 f8c4 	bl	8009b50 <I2C_IsErrorOccurred>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e02d      	b.n	8009a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d2:	f7fa fb2d 	bl	8004030 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d302      	bcc.n	80099e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d11a      	bne.n	8009a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d013      	beq.n	8009a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fa:	f043 0220 	orr.w	r2, r3, #32
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e007      	b.n	8009a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d1c8      	bne.n	80099be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009a48:	e071      	b.n	8009b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f87e 	bl	8009b50 <I2C_IsErrorOccurred>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b20      	cmp	r3, #32
 8009a6a:	d13b      	bne.n	8009ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d138      	bne.n	8009ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	d105      	bne.n	8009a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d121      	bne.n	8009ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2210      	movs	r2, #16
 8009aa0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2204      	movs	r2, #4
 8009aa6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2220      	movs	r2, #32
 8009aae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6859      	ldr	r1, [r3, #4]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009abc:	400b      	ands	r3, r1
 8009abe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	75fb      	strb	r3, [r7, #23]
 8009adc:	e002      	b.n	8009ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009ae4:	f7fa faa4 	bl	8004030 <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d302      	bcc.n	8009afa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d119      	bne.n	8009b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d116      	bne.n	8009b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	f003 0304 	and.w	r3, r3, #4
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	d00f      	beq.n	8009b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b12:	f043 0220 	orr.w	r2, r3, #32
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	d002      	beq.n	8009b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d083      	beq.n	8009a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	fe00e800 	.word	0xfe00e800

08009b50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08a      	sub	sp, #40	; 0x28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d068      	beq.n	8009c4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2210      	movs	r2, #16
 8009b82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b84:	e049      	b.n	8009c1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b8c:	d045      	beq.n	8009c1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b8e:	f7fa fa4f 	bl	8004030 <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d302      	bcc.n	8009ba4 <I2C_IsErrorOccurred+0x54>
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d13a      	bne.n	8009c1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc6:	d121      	bne.n	8009c0c <I2C_IsErrorOccurred+0xbc>
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bce:	d01d      	beq.n	8009c0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009bd0:	7cfb      	ldrb	r3, [r7, #19]
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	d01a      	beq.n	8009c0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009be4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009be6:	f7fa fa23 	bl	8004030 <HAL_GetTick>
 8009bea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bec:	e00e      	b.n	8009c0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009bee:	f7fa fa1f 	bl	8004030 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	2b19      	cmp	r3, #25
 8009bfa:	d907      	bls.n	8009c0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	f043 0320 	orr.w	r3, r3, #32
 8009c02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c0a:	e006      	b.n	8009c1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	f003 0320 	and.w	r3, r3, #32
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	d1e9      	bne.n	8009bee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d003      	beq.n	8009c30 <I2C_IsErrorOccurred+0xe0>
 8009c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0aa      	beq.n	8009b86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	f043 0304 	orr.w	r3, r3, #4
 8009c46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00b      	beq.n	8009c78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	f043 0301 	orr.w	r3, r3, #1
 8009c66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00b      	beq.n	8009c9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	f043 0308 	orr.w	r3, r3, #8
 8009c88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	f043 0302 	orr.w	r3, r3, #2
 8009caa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d01c      	beq.n	8009cfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff fdaf 	bl	8009828 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6859      	ldr	r1, [r3, #4]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <I2C_IsErrorOccurred+0x1bc>)
 8009cd6:	400b      	ands	r3, r1
 8009cd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3728      	adds	r7, #40	; 0x28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	fe00e800 	.word	0xfe00e800

08009d10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	607b      	str	r3, [r7, #4]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	817b      	strh	r3, [r7, #10]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d22:	897b      	ldrh	r3, [r7, #10]
 8009d24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d28:	7a7b      	ldrb	r3, [r7, #9]
 8009d2a:	041b      	lsls	r3, r3, #16
 8009d2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	0d5b      	lsrs	r3, r3, #21
 8009d4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d4e:	4b08      	ldr	r3, [pc, #32]	; (8009d70 <I2C_TransferConfig+0x60>)
 8009d50:	430b      	orrs	r3, r1
 8009d52:	43db      	mvns	r3, r3
 8009d54:	ea02 0103 	and.w	r1, r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d62:	bf00      	nop
 8009d64:	371c      	adds	r7, #28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	03ff63ff 	.word	0x03ff63ff

08009d74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	d138      	bne.n	8009dfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e032      	b.n	8009dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2224      	movs	r2, #36	; 0x24
 8009da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0201 	bic.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f042 0201 	orr.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2220      	movs	r2, #32
 8009dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e000      	b.n	8009dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009dfc:	2302      	movs	r3, #2
  }
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d139      	bne.n	8009e94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d101      	bne.n	8009e2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e033      	b.n	8009e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2224      	movs	r2, #36	; 0x24
 8009e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0201 	bic.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0201 	orr.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	e000      	b.n	8009e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e94:	2302      	movs	r3, #2
  }
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
	...

08009ea4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009eac:	4b0d      	ldr	r3, [pc, #52]	; (8009ee4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009eb2:	4a0c      	ldr	r2, [pc, #48]	; (8009ee4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009eb4:	f043 0302 	orr.w	r3, r3, #2
 8009eb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009ebc:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009eca:	4b07      	ldr	r3, [pc, #28]	; (8009ee8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	4906      	ldr	r1, [pc, #24]	; (8009ee8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	604b      	str	r3, [r1, #4]
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	58024400 	.word	0x58024400
 8009ee8:	58000400 	.word	0x58000400

08009eec <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009ef8:	4b18      	ldr	r3, [pc, #96]	; (8009f5c <HAL_PWR_EnterSTOPMode+0x70>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f023 0201 	bic.w	r2, r3, #1
 8009f00:	4916      	ldr	r1, [pc, #88]	; (8009f5c <HAL_PWR_EnterSTOPMode+0x70>)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009f08:	4b14      	ldr	r3, [pc, #80]	; (8009f5c <HAL_PWR_EnterSTOPMode+0x70>)
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	4a13      	ldr	r2, [pc, #76]	; (8009f5c <HAL_PWR_EnterSTOPMode+0x70>)
 8009f0e:	f023 0305 	bic.w	r3, r3, #5
 8009f12:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009f14:	4b11      	ldr	r3, [pc, #68]	; (8009f5c <HAL_PWR_EnterSTOPMode+0x70>)
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	4a10      	ldr	r2, [pc, #64]	; (8009f5c <HAL_PWR_EnterSTOPMode+0x70>)
 8009f1a:	f023 0302 	bic.w	r3, r3, #2
 8009f1e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009f20:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	4a0e      	ldr	r2, [pc, #56]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f26:	f043 0304 	orr.w	r3, r3, #4
 8009f2a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f2c:	f3bf 8f4f 	dsb	sy
}
 8009f30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f32:	f3bf 8f6f 	isb	sy
}
 8009f36:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d101      	bne.n	8009f42 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009f3e:	bf30      	wfi
 8009f40:	e000      	b.n	8009f44 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009f42:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009f44:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	4a05      	ldr	r2, [pc, #20]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f4a:	f023 0304 	bic.w	r3, r3, #4
 8009f4e:	6113      	str	r3, [r2, #16]
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	58024800 	.word	0x58024800
 8009f60:	e000ed00 	.word	0xe000ed00

08009f64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f6c:	4b19      	ldr	r3, [pc, #100]	; (8009fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d00a      	beq.n	8009f8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f78:	4b16      	ldr	r3, [pc, #88]	; (8009fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f003 0307 	and.w	r3, r3, #7
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d001      	beq.n	8009f8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e01f      	b.n	8009fca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e01d      	b.n	8009fca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f8e:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f023 0207 	bic.w	r2, r3, #7
 8009f96:	490f      	ldr	r1, [pc, #60]	; (8009fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009f9e:	f7fa f847 	bl	8004030 <HAL_GetTick>
 8009fa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fa4:	e009      	b.n	8009fba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009fa6:	f7fa f843 	bl	8004030 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fb4:	d901      	bls.n	8009fba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e007      	b.n	8009fca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fba:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc6:	d1ee      	bne.n	8009fa6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	58024800 	.word	0x58024800

08009fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08c      	sub	sp, #48	; 0x30
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d102      	bne.n	8009fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f000 bc48 	b.w	800a87c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 8088 	beq.w	800a10a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ffa:	4b99      	ldr	r3, [pc, #612]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a002:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a004:	4b96      	ldr	r3, [pc, #600]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a008:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	2b10      	cmp	r3, #16
 800a00e:	d007      	beq.n	800a020 <HAL_RCC_OscConfig+0x48>
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	2b18      	cmp	r3, #24
 800a014:	d111      	bne.n	800a03a <HAL_RCC_OscConfig+0x62>
 800a016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a018:	f003 0303 	and.w	r3, r3, #3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d10c      	bne.n	800a03a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a020:	4b8f      	ldr	r3, [pc, #572]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d06d      	beq.n	800a108 <HAL_RCC_OscConfig+0x130>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d169      	bne.n	800a108 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	f000 bc21 	b.w	800a87c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a042:	d106      	bne.n	800a052 <HAL_RCC_OscConfig+0x7a>
 800a044:	4b86      	ldr	r3, [pc, #536]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a85      	ldr	r2, [pc, #532]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a04a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	e02e      	b.n	800a0b0 <HAL_RCC_OscConfig+0xd8>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10c      	bne.n	800a074 <HAL_RCC_OscConfig+0x9c>
 800a05a:	4b81      	ldr	r3, [pc, #516]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a80      	ldr	r2, [pc, #512]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	4b7e      	ldr	r3, [pc, #504]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a7d      	ldr	r2, [pc, #500]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a06c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e01d      	b.n	800a0b0 <HAL_RCC_OscConfig+0xd8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a07c:	d10c      	bne.n	800a098 <HAL_RCC_OscConfig+0xc0>
 800a07e:	4b78      	ldr	r3, [pc, #480]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a77      	ldr	r2, [pc, #476]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	4b75      	ldr	r3, [pc, #468]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a74      	ldr	r2, [pc, #464]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	e00b      	b.n	800a0b0 <HAL_RCC_OscConfig+0xd8>
 800a098:	4b71      	ldr	r3, [pc, #452]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a70      	ldr	r2, [pc, #448]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a09e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	4b6e      	ldr	r3, [pc, #440]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a6d      	ldr	r2, [pc, #436]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a0aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d013      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b8:	f7f9 ffba 	bl	8004030 <HAL_GetTick>
 800a0bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0be:	e008      	b.n	800a0d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0c0:	f7f9 ffb6 	bl	8004030 <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b64      	cmp	r3, #100	; 0x64
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e3d4      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0d2:	4b63      	ldr	r3, [pc, #396]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0f0      	beq.n	800a0c0 <HAL_RCC_OscConfig+0xe8>
 800a0de:	e014      	b.n	800a10a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e0:	f7f9 ffa6 	bl	8004030 <HAL_GetTick>
 800a0e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0e8:	f7f9 ffa2 	bl	8004030 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b64      	cmp	r3, #100	; 0x64
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e3c0      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0fa:	4b59      	ldr	r3, [pc, #356]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x110>
 800a106:	e000      	b.n	800a10a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80ca 	beq.w	800a2ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a118:	4b51      	ldr	r3, [pc, #324]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a120:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a122:	4b4f      	ldr	r3, [pc, #316]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d007      	beq.n	800a13e <HAL_RCC_OscConfig+0x166>
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	2b18      	cmp	r3, #24
 800a132:	d156      	bne.n	800a1e2 <HAL_RCC_OscConfig+0x20a>
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	f003 0303 	and.w	r3, r3, #3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d151      	bne.n	800a1e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a13e:	4b48      	ldr	r3, [pc, #288]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0304 	and.w	r3, r3, #4
 800a146:	2b00      	cmp	r3, #0
 800a148:	d005      	beq.n	800a156 <HAL_RCC_OscConfig+0x17e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e392      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a156:	4b42      	ldr	r3, [pc, #264]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f023 0219 	bic.w	r2, r3, #25
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	493f      	ldr	r1, [pc, #252]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a164:	4313      	orrs	r3, r2
 800a166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a168:	f7f9 ff62 	bl	8004030 <HAL_GetTick>
 800a16c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a16e:	e008      	b.n	800a182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a170:	f7f9 ff5e 	bl	8004030 <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d901      	bls.n	800a182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e37c      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a182:	4b37      	ldr	r3, [pc, #220]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 0304 	and.w	r3, r3, #4
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0f0      	beq.n	800a170 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a18e:	f7f9 ff5b 	bl	8004048 <HAL_GetREVID>
 800a192:	4603      	mov	r3, r0
 800a194:	f241 0203 	movw	r2, #4099	; 0x1003
 800a198:	4293      	cmp	r3, r2
 800a19a:	d817      	bhi.n	800a1cc <HAL_RCC_OscConfig+0x1f4>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	2b40      	cmp	r3, #64	; 0x40
 800a1a2:	d108      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x1de>
 800a1a4:	4b2e      	ldr	r3, [pc, #184]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1ac:	4a2c      	ldr	r2, [pc, #176]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a1ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1b4:	e07a      	b.n	800a2ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1b6:	4b2a      	ldr	r3, [pc, #168]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	031b      	lsls	r3, r3, #12
 800a1c4:	4926      	ldr	r1, [pc, #152]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1ca:	e06f      	b.n	800a2ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1cc:	4b24      	ldr	r3, [pc, #144]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	061b      	lsls	r3, r3, #24
 800a1da:	4921      	ldr	r1, [pc, #132]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1e0:	e064      	b.n	800a2ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d047      	beq.n	800a27a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1ea:	4b1d      	ldr	r3, [pc, #116]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f023 0219 	bic.w	r2, r3, #25
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	491a      	ldr	r1, [pc, #104]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1fc:	f7f9 ff18 	bl	8004030 <HAL_GetTick>
 800a200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a202:	e008      	b.n	800a216 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a204:	f7f9 ff14 	bl	8004030 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d901      	bls.n	800a216 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e332      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a216:	4b12      	ldr	r3, [pc, #72]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0304 	and.w	r3, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0f0      	beq.n	800a204 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a222:	f7f9 ff11 	bl	8004048 <HAL_GetREVID>
 800a226:	4603      	mov	r3, r0
 800a228:	f241 0203 	movw	r2, #4099	; 0x1003
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d819      	bhi.n	800a264 <HAL_RCC_OscConfig+0x28c>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	2b40      	cmp	r3, #64	; 0x40
 800a236:	d108      	bne.n	800a24a <HAL_RCC_OscConfig+0x272>
 800a238:	4b09      	ldr	r3, [pc, #36]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a240:	4a07      	ldr	r2, [pc, #28]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a246:	6053      	str	r3, [r2, #4]
 800a248:	e030      	b.n	800a2ac <HAL_RCC_OscConfig+0x2d4>
 800a24a:	4b05      	ldr	r3, [pc, #20]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	031b      	lsls	r3, r3, #12
 800a258:	4901      	ldr	r1, [pc, #4]	; (800a260 <HAL_RCC_OscConfig+0x288>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	604b      	str	r3, [r1, #4]
 800a25e:	e025      	b.n	800a2ac <HAL_RCC_OscConfig+0x2d4>
 800a260:	58024400 	.word	0x58024400
 800a264:	4b9a      	ldr	r3, [pc, #616]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	061b      	lsls	r3, r3, #24
 800a272:	4997      	ldr	r1, [pc, #604]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a274:	4313      	orrs	r3, r2
 800a276:	604b      	str	r3, [r1, #4]
 800a278:	e018      	b.n	800a2ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a27a:	4b95      	ldr	r3, [pc, #596]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a94      	ldr	r2, [pc, #592]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a280:	f023 0301 	bic.w	r3, r3, #1
 800a284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a286:	f7f9 fed3 	bl	8004030 <HAL_GetTick>
 800a28a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a28c:	e008      	b.n	800a2a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a28e:	f7f9 fecf 	bl	8004030 <HAL_GetTick>
 800a292:	4602      	mov	r2, r0
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d901      	bls.n	800a2a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e2ed      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a2a0:	4b8b      	ldr	r3, [pc, #556]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1f0      	bne.n	800a28e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0310 	and.w	r3, r3, #16
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 80a9 	beq.w	800a40c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2ba:	4b85      	ldr	r3, [pc, #532]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2c4:	4b82      	ldr	r3, [pc, #520]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d007      	beq.n	800a2e0 <HAL_RCC_OscConfig+0x308>
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	2b18      	cmp	r3, #24
 800a2d4:	d13a      	bne.n	800a34c <HAL_RCC_OscConfig+0x374>
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f003 0303 	and.w	r3, r3, #3
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d135      	bne.n	800a34c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2e0:	4b7b      	ldr	r3, [pc, #492]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d005      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x320>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	2b80      	cmp	r3, #128	; 0x80
 800a2f2:	d001      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e2c1      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2f8:	f7f9 fea6 	bl	8004048 <HAL_GetREVID>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f241 0203 	movw	r2, #4099	; 0x1003
 800a302:	4293      	cmp	r3, r2
 800a304:	d817      	bhi.n	800a336 <HAL_RCC_OscConfig+0x35e>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	2b20      	cmp	r3, #32
 800a30c:	d108      	bne.n	800a320 <HAL_RCC_OscConfig+0x348>
 800a30e:	4b70      	ldr	r3, [pc, #448]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a316:	4a6e      	ldr	r2, [pc, #440]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a31c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a31e:	e075      	b.n	800a40c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a320:	4b6b      	ldr	r3, [pc, #428]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	069b      	lsls	r3, r3, #26
 800a32e:	4968      	ldr	r1, [pc, #416]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a330:	4313      	orrs	r3, r2
 800a332:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a334:	e06a      	b.n	800a40c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a336:	4b66      	ldr	r3, [pc, #408]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	061b      	lsls	r3, r3, #24
 800a344:	4962      	ldr	r1, [pc, #392]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a346:	4313      	orrs	r3, r2
 800a348:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a34a:	e05f      	b.n	800a40c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d042      	beq.n	800a3da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a354:	4b5e      	ldr	r3, [pc, #376]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a5d      	ldr	r2, [pc, #372]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a360:	f7f9 fe66 	bl	8004030 <HAL_GetTick>
 800a364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a366:	e008      	b.n	800a37a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a368:	f7f9 fe62 	bl	8004030 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b02      	cmp	r3, #2
 800a374:	d901      	bls.n	800a37a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e280      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a37a:	4b55      	ldr	r3, [pc, #340]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0f0      	beq.n	800a368 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a386:	f7f9 fe5f 	bl	8004048 <HAL_GetREVID>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a390:	4293      	cmp	r3, r2
 800a392:	d817      	bhi.n	800a3c4 <HAL_RCC_OscConfig+0x3ec>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	2b20      	cmp	r3, #32
 800a39a:	d108      	bne.n	800a3ae <HAL_RCC_OscConfig+0x3d6>
 800a39c:	4b4c      	ldr	r3, [pc, #304]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3a4:	4a4a      	ldr	r2, [pc, #296]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a3a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3aa:	6053      	str	r3, [r2, #4]
 800a3ac:	e02e      	b.n	800a40c <HAL_RCC_OscConfig+0x434>
 800a3ae:	4b48      	ldr	r3, [pc, #288]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	069b      	lsls	r3, r3, #26
 800a3bc:	4944      	ldr	r1, [pc, #272]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	604b      	str	r3, [r1, #4]
 800a3c2:	e023      	b.n	800a40c <HAL_RCC_OscConfig+0x434>
 800a3c4:	4b42      	ldr	r3, [pc, #264]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	061b      	lsls	r3, r3, #24
 800a3d2:	493f      	ldr	r1, [pc, #252]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60cb      	str	r3, [r1, #12]
 800a3d8:	e018      	b.n	800a40c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a3da:	4b3d      	ldr	r3, [pc, #244]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a3c      	ldr	r2, [pc, #240]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a3e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e6:	f7f9 fe23 	bl	8004030 <HAL_GetTick>
 800a3ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3ec:	e008      	b.n	800a400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3ee:	f7f9 fe1f 	bl	8004030 <HAL_GetTick>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d901      	bls.n	800a400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e23d      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a400:	4b33      	ldr	r3, [pc, #204]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1f0      	bne.n	800a3ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	2b00      	cmp	r3, #0
 800a416:	d036      	beq.n	800a486 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d019      	beq.n	800a454 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a420:	4b2b      	ldr	r3, [pc, #172]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a424:	4a2a      	ldr	r2, [pc, #168]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a426:	f043 0301 	orr.w	r3, r3, #1
 800a42a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a42c:	f7f9 fe00 	bl	8004030 <HAL_GetTick>
 800a430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a432:	e008      	b.n	800a446 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a434:	f7f9 fdfc 	bl	8004030 <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d901      	bls.n	800a446 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e21a      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a446:	4b22      	ldr	r3, [pc, #136]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0f0      	beq.n	800a434 <HAL_RCC_OscConfig+0x45c>
 800a452:	e018      	b.n	800a486 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a454:	4b1e      	ldr	r3, [pc, #120]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a458:	4a1d      	ldr	r2, [pc, #116]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a45a:	f023 0301 	bic.w	r3, r3, #1
 800a45e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a460:	f7f9 fde6 	bl	8004030 <HAL_GetTick>
 800a464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a466:	e008      	b.n	800a47a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a468:	f7f9 fde2 	bl	8004030 <HAL_GetTick>
 800a46c:	4602      	mov	r2, r0
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	2b02      	cmp	r3, #2
 800a474:	d901      	bls.n	800a47a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e200      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a47a:	4b15      	ldr	r3, [pc, #84]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1f0      	bne.n	800a468 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0320 	and.w	r3, r3, #32
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d039      	beq.n	800a506 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d01c      	beq.n	800a4d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a49a:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a0c      	ldr	r2, [pc, #48]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a4a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4a6:	f7f9 fdc3 	bl	8004030 <HAL_GetTick>
 800a4aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4ac:	e008      	b.n	800a4c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4ae:	f7f9 fdbf 	bl	8004030 <HAL_GetTick>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d901      	bls.n	800a4c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e1dd      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4c0:	4b03      	ldr	r3, [pc, #12]	; (800a4d0 <HAL_RCC_OscConfig+0x4f8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0f0      	beq.n	800a4ae <HAL_RCC_OscConfig+0x4d6>
 800a4cc:	e01b      	b.n	800a506 <HAL_RCC_OscConfig+0x52e>
 800a4ce:	bf00      	nop
 800a4d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a4d4:	4b9b      	ldr	r3, [pc, #620]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a9a      	ldr	r2, [pc, #616]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a4da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4e0:	f7f9 fda6 	bl	8004030 <HAL_GetTick>
 800a4e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4e6:	e008      	b.n	800a4fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4e8:	f7f9 fda2 	bl	8004030 <HAL_GetTick>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d901      	bls.n	800a4fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e1c0      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4fa:	4b92      	ldr	r3, [pc, #584]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1f0      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 8081 	beq.w	800a616 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a514:	4b8c      	ldr	r3, [pc, #560]	; (800a748 <HAL_RCC_OscConfig+0x770>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a8b      	ldr	r2, [pc, #556]	; (800a748 <HAL_RCC_OscConfig+0x770>)
 800a51a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a51e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a520:	f7f9 fd86 	bl	8004030 <HAL_GetTick>
 800a524:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a526:	e008      	b.n	800a53a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a528:	f7f9 fd82 	bl	8004030 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b64      	cmp	r3, #100	; 0x64
 800a534:	d901      	bls.n	800a53a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e1a0      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a53a:	4b83      	ldr	r3, [pc, #524]	; (800a748 <HAL_RCC_OscConfig+0x770>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0f0      	beq.n	800a528 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d106      	bne.n	800a55c <HAL_RCC_OscConfig+0x584>
 800a54e:	4b7d      	ldr	r3, [pc, #500]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	4a7c      	ldr	r2, [pc, #496]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a554:	f043 0301 	orr.w	r3, r3, #1
 800a558:	6713      	str	r3, [r2, #112]	; 0x70
 800a55a:	e02d      	b.n	800a5b8 <HAL_RCC_OscConfig+0x5e0>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10c      	bne.n	800a57e <HAL_RCC_OscConfig+0x5a6>
 800a564:	4b77      	ldr	r3, [pc, #476]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a568:	4a76      	ldr	r2, [pc, #472]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a56a:	f023 0301 	bic.w	r3, r3, #1
 800a56e:	6713      	str	r3, [r2, #112]	; 0x70
 800a570:	4b74      	ldr	r3, [pc, #464]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a574:	4a73      	ldr	r2, [pc, #460]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a576:	f023 0304 	bic.w	r3, r3, #4
 800a57a:	6713      	str	r3, [r2, #112]	; 0x70
 800a57c:	e01c      	b.n	800a5b8 <HAL_RCC_OscConfig+0x5e0>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	2b05      	cmp	r3, #5
 800a584:	d10c      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x5c8>
 800a586:	4b6f      	ldr	r3, [pc, #444]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a58a:	4a6e      	ldr	r2, [pc, #440]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a58c:	f043 0304 	orr.w	r3, r3, #4
 800a590:	6713      	str	r3, [r2, #112]	; 0x70
 800a592:	4b6c      	ldr	r3, [pc, #432]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a596:	4a6b      	ldr	r2, [pc, #428]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a598:	f043 0301 	orr.w	r3, r3, #1
 800a59c:	6713      	str	r3, [r2, #112]	; 0x70
 800a59e:	e00b      	b.n	800a5b8 <HAL_RCC_OscConfig+0x5e0>
 800a5a0:	4b68      	ldr	r3, [pc, #416]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a4:	4a67      	ldr	r2, [pc, #412]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	6713      	str	r3, [r2, #112]	; 0x70
 800a5ac:	4b65      	ldr	r3, [pc, #404]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b0:	4a64      	ldr	r2, [pc, #400]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a5b2:	f023 0304 	bic.w	r3, r3, #4
 800a5b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d015      	beq.n	800a5ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c0:	f7f9 fd36 	bl	8004030 <HAL_GetTick>
 800a5c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5c6:	e00a      	b.n	800a5de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5c8:	f7f9 fd32 	bl	8004030 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d901      	bls.n	800a5de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e14e      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5de:	4b59      	ldr	r3, [pc, #356]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0ee      	beq.n	800a5c8 <HAL_RCC_OscConfig+0x5f0>
 800a5ea:	e014      	b.n	800a616 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5ec:	f7f9 fd20 	bl	8004030 <HAL_GetTick>
 800a5f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5f2:	e00a      	b.n	800a60a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5f4:	f7f9 fd1c 	bl	8004030 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a602:	4293      	cmp	r3, r2
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e138      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a60a:	4b4e      	ldr	r3, [pc, #312]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1ee      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 812d 	beq.w	800a87a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a620:	4b48      	ldr	r3, [pc, #288]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a628:	2b18      	cmp	r3, #24
 800a62a:	f000 80bd 	beq.w	800a7a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	2b02      	cmp	r3, #2
 800a634:	f040 809e 	bne.w	800a774 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a638:	4b42      	ldr	r3, [pc, #264]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a41      	ldr	r2, [pc, #260]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a63e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a644:	f7f9 fcf4 	bl	8004030 <HAL_GetTick>
 800a648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a64a:	e008      	b.n	800a65e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a64c:	f7f9 fcf0 	bl	8004030 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	2b02      	cmp	r3, #2
 800a658:	d901      	bls.n	800a65e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e10e      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a65e:	4b39      	ldr	r3, [pc, #228]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1f0      	bne.n	800a64c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a66a:	4b36      	ldr	r3, [pc, #216]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a66c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a66e:	4b37      	ldr	r3, [pc, #220]	; (800a74c <HAL_RCC_OscConfig+0x774>)
 800a670:	4013      	ands	r3, r2
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a67a:	0112      	lsls	r2, r2, #4
 800a67c:	430a      	orrs	r2, r1
 800a67e:	4931      	ldr	r1, [pc, #196]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a680:	4313      	orrs	r3, r2
 800a682:	628b      	str	r3, [r1, #40]	; 0x28
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a688:	3b01      	subs	r3, #1
 800a68a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a692:	3b01      	subs	r3, #1
 800a694:	025b      	lsls	r3, r3, #9
 800a696:	b29b      	uxth	r3, r3
 800a698:	431a      	orrs	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	041b      	lsls	r3, r3, #16
 800a6a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	061b      	lsls	r3, r3, #24
 800a6b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6b4:	4923      	ldr	r1, [pc, #140]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a6ba:	4b22      	ldr	r3, [pc, #136]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	4a21      	ldr	r2, [pc, #132]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6c0:	f023 0301 	bic.w	r3, r3, #1
 800a6c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6c6:	4b1f      	ldr	r3, [pc, #124]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6ca:	4b21      	ldr	r3, [pc, #132]	; (800a750 <HAL_RCC_OscConfig+0x778>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a6d2:	00d2      	lsls	r2, r2, #3
 800a6d4:	491b      	ldr	r1, [pc, #108]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a6da:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	f023 020c 	bic.w	r2, r3, #12
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e6:	4917      	ldr	r1, [pc, #92]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a6ec:	4b15      	ldr	r3, [pc, #84]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	f023 0202 	bic.w	r2, r3, #2
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f8:	4912      	ldr	r1, [pc, #72]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a6fe:	4b11      	ldr	r3, [pc, #68]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a702:	4a10      	ldr	r2, [pc, #64]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a70a:	4b0e      	ldr	r3, [pc, #56]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70e:	4a0d      	ldr	r2, [pc, #52]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a716:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71a:	4a0a      	ldr	r2, [pc, #40]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a71c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a722:	4b08      	ldr	r3, [pc, #32]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a726:	4a07      	ldr	r2, [pc, #28]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a728:	f043 0301 	orr.w	r3, r3, #1
 800a72c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a72e:	4b05      	ldr	r3, [pc, #20]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a04      	ldr	r2, [pc, #16]	; (800a744 <HAL_RCC_OscConfig+0x76c>)
 800a734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a73a:	f7f9 fc79 	bl	8004030 <HAL_GetTick>
 800a73e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a740:	e011      	b.n	800a766 <HAL_RCC_OscConfig+0x78e>
 800a742:	bf00      	nop
 800a744:	58024400 	.word	0x58024400
 800a748:	58024800 	.word	0x58024800
 800a74c:	fffffc0c 	.word	0xfffffc0c
 800a750:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a754:	f7f9 fc6c 	bl	8004030 <HAL_GetTick>
 800a758:	4602      	mov	r2, r0
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d901      	bls.n	800a766 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e08a      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a766:	4b47      	ldr	r3, [pc, #284]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0f0      	beq.n	800a754 <HAL_RCC_OscConfig+0x77c>
 800a772:	e082      	b.n	800a87a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a774:	4b43      	ldr	r3, [pc, #268]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a42      	ldr	r2, [pc, #264]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a77a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a77e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a780:	f7f9 fc56 	bl	8004030 <HAL_GetTick>
 800a784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a786:	e008      	b.n	800a79a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a788:	f7f9 fc52 	bl	8004030 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	2b02      	cmp	r3, #2
 800a794:	d901      	bls.n	800a79a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e070      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a79a:	4b3a      	ldr	r3, [pc, #232]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1f0      	bne.n	800a788 <HAL_RCC_OscConfig+0x7b0>
 800a7a6:	e068      	b.n	800a87a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a7a8:	4b36      	ldr	r3, [pc, #216]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a7ae:	4b35      	ldr	r3, [pc, #212]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d031      	beq.n	800a820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f003 0203 	and.w	r2, r3, #3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d12a      	bne.n	800a820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	091b      	lsrs	r3, r3, #4
 800a7ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d122      	bne.n	800a820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d11a      	bne.n	800a820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	0a5b      	lsrs	r3, r3, #9
 800a7ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d111      	bne.n	800a820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	0c1b      	lsrs	r3, r3, #16
 800a800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a808:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d108      	bne.n	800a820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	0e1b      	lsrs	r3, r3, #24
 800a812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d001      	beq.n	800a824 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	e02b      	b.n	800a87c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a824:	4b17      	ldr	r3, [pc, #92]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a828:	08db      	lsrs	r3, r3, #3
 800a82a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a82e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	429a      	cmp	r2, r3
 800a838:	d01f      	beq.n	800a87a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a83a:	4b12      	ldr	r3, [pc, #72]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83e:	4a11      	ldr	r2, [pc, #68]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a840:	f023 0301 	bic.w	r3, r3, #1
 800a844:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a846:	f7f9 fbf3 	bl	8004030 <HAL_GetTick>
 800a84a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a84c:	bf00      	nop
 800a84e:	f7f9 fbef 	bl	8004030 <HAL_GetTick>
 800a852:	4602      	mov	r2, r0
 800a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a856:	4293      	cmp	r3, r2
 800a858:	d0f9      	beq.n	800a84e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a85a:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a85c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a85e:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <HAL_RCC_OscConfig+0x8b0>)
 800a860:	4013      	ands	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a866:	00d2      	lsls	r2, r2, #3
 800a868:	4906      	ldr	r1, [pc, #24]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a86a:	4313      	orrs	r3, r2
 800a86c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a872:	4a04      	ldr	r2, [pc, #16]	; (800a884 <HAL_RCC_OscConfig+0x8ac>)
 800a874:	f043 0301 	orr.w	r3, r3, #1
 800a878:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3730      	adds	r7, #48	; 0x30
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	58024400 	.word	0x58024400
 800a888:	ffff0007 	.word	0xffff0007

0800a88c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e19c      	b.n	800abda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8a0:	4b8a      	ldr	r3, [pc, #552]	; (800aacc <HAL_RCC_ClockConfig+0x240>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 030f 	and.w	r3, r3, #15
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d910      	bls.n	800a8d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8ae:	4b87      	ldr	r3, [pc, #540]	; (800aacc <HAL_RCC_ClockConfig+0x240>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f023 020f 	bic.w	r2, r3, #15
 800a8b6:	4985      	ldr	r1, [pc, #532]	; (800aacc <HAL_RCC_ClockConfig+0x240>)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8be:	4b83      	ldr	r3, [pc, #524]	; (800aacc <HAL_RCC_ClockConfig+0x240>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 030f 	and.w	r3, r3, #15
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d001      	beq.n	800a8d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e184      	b.n	800abda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d010      	beq.n	800a8fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	691a      	ldr	r2, [r3, #16]
 800a8e0:	4b7b      	ldr	r3, [pc, #492]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d908      	bls.n	800a8fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8ec:	4b78      	ldr	r3, [pc, #480]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	4975      	ldr	r1, [pc, #468]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0308 	and.w	r3, r3, #8
 800a906:	2b00      	cmp	r3, #0
 800a908:	d010      	beq.n	800a92c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	695a      	ldr	r2, [r3, #20]
 800a90e:	4b70      	ldr	r3, [pc, #448]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a916:	429a      	cmp	r2, r3
 800a918:	d908      	bls.n	800a92c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a91a:	4b6d      	ldr	r3, [pc, #436]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	496a      	ldr	r1, [pc, #424]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a928:	4313      	orrs	r3, r2
 800a92a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0310 	and.w	r3, r3, #16
 800a934:	2b00      	cmp	r3, #0
 800a936:	d010      	beq.n	800a95a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699a      	ldr	r2, [r3, #24]
 800a93c:	4b64      	ldr	r3, [pc, #400]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a944:	429a      	cmp	r2, r3
 800a946:	d908      	bls.n	800a95a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a948:	4b61      	ldr	r3, [pc, #388]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	495e      	ldr	r1, [pc, #376]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a956:	4313      	orrs	r3, r2
 800a958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0320 	and.w	r3, r3, #32
 800a962:	2b00      	cmp	r3, #0
 800a964:	d010      	beq.n	800a988 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	69da      	ldr	r2, [r3, #28]
 800a96a:	4b59      	ldr	r3, [pc, #356]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a972:	429a      	cmp	r2, r3
 800a974:	d908      	bls.n	800a988 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a976:	4b56      	ldr	r3, [pc, #344]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	4953      	ldr	r1, [pc, #332]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a984:	4313      	orrs	r3, r2
 800a986:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0302 	and.w	r3, r3, #2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d010      	beq.n	800a9b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	4b4d      	ldr	r3, [pc, #308]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	f003 030f 	and.w	r3, r3, #15
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d908      	bls.n	800a9b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9a4:	4b4a      	ldr	r3, [pc, #296]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	f023 020f 	bic.w	r2, r3, #15
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	4947      	ldr	r1, [pc, #284]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d055      	beq.n	800aa6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a9c2:	4b43      	ldr	r3, [pc, #268]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	4940      	ldr	r1, [pc, #256]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d107      	bne.n	800a9ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9dc:	4b3c      	ldr	r3, [pc, #240]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d121      	bne.n	800aa2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e0f6      	b.n	800abda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d107      	bne.n	800aa04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9f4:	4b36      	ldr	r3, [pc, #216]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d115      	bne.n	800aa2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e0ea      	b.n	800abda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d107      	bne.n	800aa1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa0c:	4b30      	ldr	r3, [pc, #192]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d109      	bne.n	800aa2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e0de      	b.n	800abda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa1c:	4b2c      	ldr	r3, [pc, #176]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e0d6      	b.n	800abda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa2c:	4b28      	ldr	r3, [pc, #160]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	f023 0207 	bic.w	r2, r3, #7
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	4925      	ldr	r1, [pc, #148]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa3e:	f7f9 faf7 	bl	8004030 <HAL_GetTick>
 800aa42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa44:	e00a      	b.n	800aa5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa46:	f7f9 faf3 	bl	8004030 <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d901      	bls.n	800aa5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e0be      	b.n	800abda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa5c:	4b1c      	ldr	r3, [pc, #112]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d1eb      	bne.n	800aa46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d010      	beq.n	800aa9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	4b14      	ldr	r3, [pc, #80]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	f003 030f 	and.w	r3, r3, #15
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d208      	bcs.n	800aa9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa8a:	4b11      	ldr	r3, [pc, #68]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	f023 020f 	bic.w	r2, r3, #15
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	490e      	ldr	r1, [pc, #56]	; (800aad0 <HAL_RCC_ClockConfig+0x244>)
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa9c:	4b0b      	ldr	r3, [pc, #44]	; (800aacc <HAL_RCC_ClockConfig+0x240>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 030f 	and.w	r3, r3, #15
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d214      	bcs.n	800aad4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaaa:	4b08      	ldr	r3, [pc, #32]	; (800aacc <HAL_RCC_ClockConfig+0x240>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f023 020f 	bic.w	r2, r3, #15
 800aab2:	4906      	ldr	r1, [pc, #24]	; (800aacc <HAL_RCC_ClockConfig+0x240>)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaba:	4b04      	ldr	r3, [pc, #16]	; (800aacc <HAL_RCC_ClockConfig+0x240>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 030f 	and.w	r3, r3, #15
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d005      	beq.n	800aad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e086      	b.n	800abda <HAL_RCC_ClockConfig+0x34e>
 800aacc:	52002000 	.word	0x52002000
 800aad0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0304 	and.w	r3, r3, #4
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d010      	beq.n	800ab02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	691a      	ldr	r2, [r3, #16]
 800aae4:	4b3f      	ldr	r3, [pc, #252]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d208      	bcs.n	800ab02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aaf0:	4b3c      	ldr	r3, [pc, #240]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	4939      	ldr	r1, [pc, #228]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 0308 	and.w	r3, r3, #8
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d010      	beq.n	800ab30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	695a      	ldr	r2, [r3, #20]
 800ab12:	4b34      	ldr	r3, [pc, #208]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d208      	bcs.n	800ab30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab1e:	4b31      	ldr	r3, [pc, #196]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	492e      	ldr	r1, [pc, #184]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0310 	and.w	r3, r3, #16
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d010      	beq.n	800ab5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	699a      	ldr	r2, [r3, #24]
 800ab40:	4b28      	ldr	r3, [pc, #160]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d208      	bcs.n	800ab5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab4c:	4b25      	ldr	r3, [pc, #148]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	4922      	ldr	r1, [pc, #136]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d010      	beq.n	800ab8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	69da      	ldr	r2, [r3, #28]
 800ab6e:	4b1d      	ldr	r3, [pc, #116]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d208      	bcs.n	800ab8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab7a:	4b1a      	ldr	r3, [pc, #104]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	4917      	ldr	r1, [pc, #92]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab8c:	f000 f834 	bl	800abf8 <HAL_RCC_GetSysClockFreq>
 800ab90:	4602      	mov	r2, r0
 800ab92:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	0a1b      	lsrs	r3, r3, #8
 800ab98:	f003 030f 	and.w	r3, r3, #15
 800ab9c:	4912      	ldr	r1, [pc, #72]	; (800abe8 <HAL_RCC_ClockConfig+0x35c>)
 800ab9e:	5ccb      	ldrb	r3, [r1, r3]
 800aba0:	f003 031f 	and.w	r3, r3, #31
 800aba4:	fa22 f303 	lsr.w	r3, r2, r3
 800aba8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abaa:	4b0e      	ldr	r3, [pc, #56]	; (800abe4 <HAL_RCC_ClockConfig+0x358>)
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	4a0d      	ldr	r2, [pc, #52]	; (800abe8 <HAL_RCC_ClockConfig+0x35c>)
 800abb4:	5cd3      	ldrb	r3, [r2, r3]
 800abb6:	f003 031f 	and.w	r3, r3, #31
 800abba:	693a      	ldr	r2, [r7, #16]
 800abbc:	fa22 f303 	lsr.w	r3, r2, r3
 800abc0:	4a0a      	ldr	r2, [pc, #40]	; (800abec <HAL_RCC_ClockConfig+0x360>)
 800abc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abc4:	4a0a      	ldr	r2, [pc, #40]	; (800abf0 <HAL_RCC_ClockConfig+0x364>)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800abca:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <HAL_RCC_ClockConfig+0x368>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7f8 ff52 	bl	8003a78 <HAL_InitTick>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	58024400 	.word	0x58024400
 800abe8:	08017910 	.word	0x08017910
 800abec:	24000094 	.word	0x24000094
 800abf0:	24000090 	.word	0x24000090
 800abf4:	24000098 	.word	0x24000098

0800abf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b089      	sub	sp, #36	; 0x24
 800abfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abfe:	4bb3      	ldr	r3, [pc, #716]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac06:	2b18      	cmp	r3, #24
 800ac08:	f200 8155 	bhi.w	800aeb6 <HAL_RCC_GetSysClockFreq+0x2be>
 800ac0c:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac12:	bf00      	nop
 800ac14:	0800ac79 	.word	0x0800ac79
 800ac18:	0800aeb7 	.word	0x0800aeb7
 800ac1c:	0800aeb7 	.word	0x0800aeb7
 800ac20:	0800aeb7 	.word	0x0800aeb7
 800ac24:	0800aeb7 	.word	0x0800aeb7
 800ac28:	0800aeb7 	.word	0x0800aeb7
 800ac2c:	0800aeb7 	.word	0x0800aeb7
 800ac30:	0800aeb7 	.word	0x0800aeb7
 800ac34:	0800ac9f 	.word	0x0800ac9f
 800ac38:	0800aeb7 	.word	0x0800aeb7
 800ac3c:	0800aeb7 	.word	0x0800aeb7
 800ac40:	0800aeb7 	.word	0x0800aeb7
 800ac44:	0800aeb7 	.word	0x0800aeb7
 800ac48:	0800aeb7 	.word	0x0800aeb7
 800ac4c:	0800aeb7 	.word	0x0800aeb7
 800ac50:	0800aeb7 	.word	0x0800aeb7
 800ac54:	0800aca5 	.word	0x0800aca5
 800ac58:	0800aeb7 	.word	0x0800aeb7
 800ac5c:	0800aeb7 	.word	0x0800aeb7
 800ac60:	0800aeb7 	.word	0x0800aeb7
 800ac64:	0800aeb7 	.word	0x0800aeb7
 800ac68:	0800aeb7 	.word	0x0800aeb7
 800ac6c:	0800aeb7 	.word	0x0800aeb7
 800ac70:	0800aeb7 	.word	0x0800aeb7
 800ac74:	0800acab 	.word	0x0800acab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac78:	4b94      	ldr	r3, [pc, #592]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d009      	beq.n	800ac98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac84:	4b91      	ldr	r3, [pc, #580]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	08db      	lsrs	r3, r3, #3
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	4a90      	ldr	r2, [pc, #576]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac90:	fa22 f303 	lsr.w	r3, r2, r3
 800ac94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ac96:	e111      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac98:	4b8d      	ldr	r3, [pc, #564]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac9a:	61bb      	str	r3, [r7, #24]
      break;
 800ac9c:	e10e      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ac9e:	4b8d      	ldr	r3, [pc, #564]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aca0:	61bb      	str	r3, [r7, #24]
      break;
 800aca2:	e10b      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aca4:	4b8c      	ldr	r3, [pc, #560]	; (800aed8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aca6:	61bb      	str	r3, [r7, #24]
      break;
 800aca8:	e108      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acaa:	4b88      	ldr	r3, [pc, #544]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acae:	f003 0303 	and.w	r3, r3, #3
 800acb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800acb4:	4b85      	ldr	r3, [pc, #532]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb8:	091b      	lsrs	r3, r3, #4
 800acba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800acc0:	4b82      	ldr	r3, [pc, #520]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800acca:	4b80      	ldr	r3, [pc, #512]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800accc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acce:	08db      	lsrs	r3, r3, #3
 800acd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	fb02 f303 	mul.w	r3, r2, r3
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 80e1 	beq.w	800aeb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	f000 8083 	beq.w	800adfc <HAL_RCC_GetSysClockFreq+0x204>
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	f200 80a1 	bhi.w	800ae40 <HAL_RCC_GetSysClockFreq+0x248>
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d003      	beq.n	800ad0c <HAL_RCC_GetSysClockFreq+0x114>
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d056      	beq.n	800adb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ad0a:	e099      	b.n	800ae40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad0c:	4b6f      	ldr	r3, [pc, #444]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0320 	and.w	r3, r3, #32
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d02d      	beq.n	800ad74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad18:	4b6c      	ldr	r3, [pc, #432]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	08db      	lsrs	r3, r3, #3
 800ad1e:	f003 0303 	and.w	r3, r3, #3
 800ad22:	4a6b      	ldr	r2, [pc, #428]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad24:	fa22 f303 	lsr.w	r3, r2, r3
 800ad28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b62      	ldr	r3, [pc, #392]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad56:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aedc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ad72:	e087      	b.n	800ae84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad86:	4b51      	ldr	r3, [pc, #324]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad96:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aedc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adb6:	e065      	b.n	800ae84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800adc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adca:	4b40      	ldr	r3, [pc, #256]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adda:	ed97 6a02 	vldr	s12, [r7, #8]
 800adde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aedc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ade2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adfa:	e043      	b.n	800ae84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae06:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aee8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ae0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0e:	4b2f      	ldr	r3, [pc, #188]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aedc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae3e:	e021      	b.n	800ae84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae52:	4b1e      	ldr	r3, [pc, #120]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae62:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aedc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ae84:	4b11      	ldr	r3, [pc, #68]	; (800aecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae88:	0a5b      	lsrs	r3, r3, #9
 800ae8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae8e:	3301      	adds	r3, #1
 800ae90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	ee07 3a90 	vmov	s15, r3
 800ae98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea8:	ee17 3a90 	vmov	r3, s15
 800aeac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aeae:	e005      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61bb      	str	r3, [r7, #24]
      break;
 800aeb4:	e002      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aeb6:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aeb8:	61bb      	str	r3, [r7, #24]
      break;
 800aeba:	bf00      	nop
  }

  return sysclockfreq;
 800aebc:	69bb      	ldr	r3, [r7, #24]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3724      	adds	r7, #36	; 0x24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	58024400 	.word	0x58024400
 800aed0:	03d09000 	.word	0x03d09000
 800aed4:	003d0900 	.word	0x003d0900
 800aed8:	017d7840 	.word	0x017d7840
 800aedc:	46000000 	.word	0x46000000
 800aee0:	4c742400 	.word	0x4c742400
 800aee4:	4a742400 	.word	0x4a742400
 800aee8:	4bbebc20 	.word	0x4bbebc20

0800aeec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aef2:	f7ff fe81 	bl	800abf8 <HAL_RCC_GetSysClockFreq>
 800aef6:	4602      	mov	r2, r0
 800aef8:	4b10      	ldr	r3, [pc, #64]	; (800af3c <HAL_RCC_GetHCLKFreq+0x50>)
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	0a1b      	lsrs	r3, r3, #8
 800aefe:	f003 030f 	and.w	r3, r3, #15
 800af02:	490f      	ldr	r1, [pc, #60]	; (800af40 <HAL_RCC_GetHCLKFreq+0x54>)
 800af04:	5ccb      	ldrb	r3, [r1, r3]
 800af06:	f003 031f 	and.w	r3, r3, #31
 800af0a:	fa22 f303 	lsr.w	r3, r2, r3
 800af0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af10:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <HAL_RCC_GetHCLKFreq+0x50>)
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	f003 030f 	and.w	r3, r3, #15
 800af18:	4a09      	ldr	r2, [pc, #36]	; (800af40 <HAL_RCC_GetHCLKFreq+0x54>)
 800af1a:	5cd3      	ldrb	r3, [r2, r3]
 800af1c:	f003 031f 	and.w	r3, r3, #31
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	fa22 f303 	lsr.w	r3, r2, r3
 800af26:	4a07      	ldr	r2, [pc, #28]	; (800af44 <HAL_RCC_GetHCLKFreq+0x58>)
 800af28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af2a:	4a07      	ldr	r2, [pc, #28]	; (800af48 <HAL_RCC_GetHCLKFreq+0x5c>)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800af30:	4b04      	ldr	r3, [pc, #16]	; (800af44 <HAL_RCC_GetHCLKFreq+0x58>)
 800af32:	681b      	ldr	r3, [r3, #0]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	58024400 	.word	0x58024400
 800af40:	08017910 	.word	0x08017910
 800af44:	24000094 	.word	0x24000094
 800af48:	24000090 	.word	0x24000090

0800af4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af50:	f7ff ffcc 	bl	800aeec <HAL_RCC_GetHCLKFreq>
 800af54:	4602      	mov	r2, r0
 800af56:	4b06      	ldr	r3, [pc, #24]	; (800af70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	091b      	lsrs	r3, r3, #4
 800af5c:	f003 0307 	and.w	r3, r3, #7
 800af60:	4904      	ldr	r1, [pc, #16]	; (800af74 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af62:	5ccb      	ldrb	r3, [r1, r3]
 800af64:	f003 031f 	and.w	r3, r3, #31
 800af68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	58024400 	.word	0x58024400
 800af74:	08017910 	.word	0x08017910

0800af78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af7c:	f7ff ffb6 	bl	800aeec <HAL_RCC_GetHCLKFreq>
 800af80:	4602      	mov	r2, r0
 800af82:	4b06      	ldr	r3, [pc, #24]	; (800af9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	0a1b      	lsrs	r3, r3, #8
 800af88:	f003 0307 	and.w	r3, r3, #7
 800af8c:	4904      	ldr	r1, [pc, #16]	; (800afa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af8e:	5ccb      	ldrb	r3, [r1, r3]
 800af90:	f003 031f 	and.w	r3, r3, #31
 800af94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af98:	4618      	mov	r0, r3
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	58024400 	.word	0x58024400
 800afa0:	08017910 	.word	0x08017910

0800afa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	223f      	movs	r2, #63	; 0x3f
 800afb2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800afb4:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <HAL_RCC_GetClockConfig+0x7c>)
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	f003 0207 	and.w	r2, r3, #7
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800afc0:	4b17      	ldr	r3, [pc, #92]	; (800b020 <HAL_RCC_GetClockConfig+0x7c>)
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800afcc:	4b14      	ldr	r3, [pc, #80]	; (800b020 <HAL_RCC_GetClockConfig+0x7c>)
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	f003 020f 	and.w	r2, r3, #15
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800afd8:	4b11      	ldr	r3, [pc, #68]	; (800b020 <HAL_RCC_GetClockConfig+0x7c>)
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800afe4:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <HAL_RCC_GetClockConfig+0x7c>)
 800afe6:	69db      	ldr	r3, [r3, #28]
 800afe8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800aff0:	4b0b      	ldr	r3, [pc, #44]	; (800b020 <HAL_RCC_GetClockConfig+0x7c>)
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800affc:	4b08      	ldr	r3, [pc, #32]	; (800b020 <HAL_RCC_GetClockConfig+0x7c>)
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b008:	4b06      	ldr	r3, [pc, #24]	; (800b024 <HAL_RCC_GetClockConfig+0x80>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 020f 	and.w	r2, r3, #15
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	601a      	str	r2, [r3, #0]
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	58024400 	.word	0x58024400
 800b024:	52002000 	.word	0x52002000

0800b028 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b02c:	b0ca      	sub	sp, #296	; 0x128
 800b02e:	af00      	add	r7, sp, #0
 800b030:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b034:	2300      	movs	r3, #0
 800b036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b03a:	2300      	movs	r3, #0
 800b03c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b04c:	2500      	movs	r5, #0
 800b04e:	ea54 0305 	orrs.w	r3, r4, r5
 800b052:	d049      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b05a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b05e:	d02f      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b060:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b064:	d828      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b06a:	d01a      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b06c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b070:	d822      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b07a:	d007      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b07c:	e01c      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b07e:	4bb8      	ldr	r3, [pc, #736]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	4ab7      	ldr	r2, [pc, #732]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b088:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b08a:	e01a      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b090:	3308      	adds	r3, #8
 800b092:	2102      	movs	r1, #2
 800b094:	4618      	mov	r0, r3
 800b096:	f002 fb61 	bl	800d75c <RCCEx_PLL2_Config>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b0a0:	e00f      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a6:	3328      	adds	r3, #40	; 0x28
 800b0a8:	2102      	movs	r1, #2
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f002 fc08 	bl	800d8c0 <RCCEx_PLL3_Config>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b0b6:	e004      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0be:	e000      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b0c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b0ca:	4ba5      	ldr	r3, [pc, #660]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0d8:	4aa1      	ldr	r2, [pc, #644]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0da:	430b      	orrs	r3, r1
 800b0dc:	6513      	str	r3, [r2, #80]	; 0x50
 800b0de:	e003      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b0f4:	f04f 0900 	mov.w	r9, #0
 800b0f8:	ea58 0309 	orrs.w	r3, r8, r9
 800b0fc:	d047      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b104:	2b04      	cmp	r3, #4
 800b106:	d82a      	bhi.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b108:	a201      	add	r2, pc, #4	; (adr r2, 800b110 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b125 	.word	0x0800b125
 800b114:	0800b133 	.word	0x0800b133
 800b118:	0800b149 	.word	0x0800b149
 800b11c:	0800b167 	.word	0x0800b167
 800b120:	0800b167 	.word	0x0800b167
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b124:	4b8e      	ldr	r3, [pc, #568]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b128:	4a8d      	ldr	r2, [pc, #564]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b12a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b12e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b130:	e01a      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b136:	3308      	adds	r3, #8
 800b138:	2100      	movs	r1, #0
 800b13a:	4618      	mov	r0, r3
 800b13c:	f002 fb0e 	bl	800d75c <RCCEx_PLL2_Config>
 800b140:	4603      	mov	r3, r0
 800b142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b146:	e00f      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14c:	3328      	adds	r3, #40	; 0x28
 800b14e:	2100      	movs	r1, #0
 800b150:	4618      	mov	r0, r3
 800b152:	f002 fbb5 	bl	800d8c0 <RCCEx_PLL3_Config>
 800b156:	4603      	mov	r3, r0
 800b158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b15c:	e004      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b164:	e000      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b166:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b170:	4b7b      	ldr	r3, [pc, #492]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b174:	f023 0107 	bic.w	r1, r3, #7
 800b178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b17e:	4a78      	ldr	r2, [pc, #480]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b180:	430b      	orrs	r3, r1
 800b182:	6513      	str	r3, [r2, #80]	; 0x50
 800b184:	e003      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b18a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b19a:	f04f 0b00 	mov.w	fp, #0
 800b19e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b1a2:	d04c      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ae:	d030      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b1b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1b4:	d829      	bhi.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b1b6:	2bc0      	cmp	r3, #192	; 0xc0
 800b1b8:	d02d      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b1ba:	2bc0      	cmp	r3, #192	; 0xc0
 800b1bc:	d825      	bhi.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b1be:	2b80      	cmp	r3, #128	; 0x80
 800b1c0:	d018      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b1c2:	2b80      	cmp	r3, #128	; 0x80
 800b1c4:	d821      	bhi.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b1ca:	2b40      	cmp	r3, #64	; 0x40
 800b1cc:	d007      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b1ce:	e01c      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1d0:	4b63      	ldr	r3, [pc, #396]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	4a62      	ldr	r2, [pc, #392]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1dc:	e01c      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f002 fab8 	bl	800d75c <RCCEx_PLL2_Config>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1f2:	e011      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f8:	3328      	adds	r3, #40	; 0x28
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f002 fb5f 	bl	800d8c0 <RCCEx_PLL3_Config>
 800b202:	4603      	mov	r3, r0
 800b204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b208:	e006      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b210:	e002      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b212:	bf00      	nop
 800b214:	e000      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b216:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10a      	bne.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b220:	4b4f      	ldr	r3, [pc, #316]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b224:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b22e:	4a4c      	ldr	r2, [pc, #304]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b230:	430b      	orrs	r3, r1
 800b232:	6513      	str	r3, [r2, #80]	; 0x50
 800b234:	e003      	b.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b23a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b24a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b24e:	2300      	movs	r3, #0
 800b250:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b254:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b258:	460b      	mov	r3, r1
 800b25a:	4313      	orrs	r3, r2
 800b25c:	d053      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b262:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b26a:	d035      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b26c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b270:	d82e      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b272:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b276:	d031      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b278:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b27c:	d828      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b27e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b282:	d01a      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b288:	d822      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b28e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b292:	d007      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b294:	e01c      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b296:	4b32      	ldr	r3, [pc, #200]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	4a31      	ldr	r2, [pc, #196]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b29c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2a2:	e01c      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a8:	3308      	adds	r3, #8
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f002 fa55 	bl	800d75c <RCCEx_PLL2_Config>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b2b8:	e011      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2be:	3328      	adds	r3, #40	; 0x28
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f002 fafc 	bl	800d8c0 <RCCEx_PLL3_Config>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2ce:	e006      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2d6:	e002      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b2d8:	bf00      	nop
 800b2da:	e000      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b2dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10b      	bne.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b2e6:	4b1e      	ldr	r3, [pc, #120]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2f6:	4a1a      	ldr	r2, [pc, #104]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	6593      	str	r3, [r2, #88]	; 0x58
 800b2fc:	e003      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b312:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b316:	2300      	movs	r3, #0
 800b318:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b31c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b320:	460b      	mov	r3, r1
 800b322:	4313      	orrs	r3, r2
 800b324:	d056      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b32e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b332:	d038      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b338:	d831      	bhi.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b33a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b33e:	d034      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b340:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b344:	d82b      	bhi.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b34a:	d01d      	beq.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b34c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b350:	d825      	bhi.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d006      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b356:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b35a:	d00a      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b35c:	e01f      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b35e:	bf00      	nop
 800b360:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b364:	4ba2      	ldr	r3, [pc, #648]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	4aa1      	ldr	r2, [pc, #644]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b36e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b370:	e01c      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b376:	3308      	adds	r3, #8
 800b378:	2100      	movs	r1, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f002 f9ee 	bl	800d75c <RCCEx_PLL2_Config>
 800b380:	4603      	mov	r3, r0
 800b382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b386:	e011      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38c:	3328      	adds	r3, #40	; 0x28
 800b38e:	2100      	movs	r1, #0
 800b390:	4618      	mov	r0, r3
 800b392:	f002 fa95 	bl	800d8c0 <RCCEx_PLL3_Config>
 800b396:	4603      	mov	r3, r0
 800b398:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b39c:	e006      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3a4:	e002      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b3a6:	bf00      	nop
 800b3a8:	e000      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b3aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10b      	bne.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b3b4:	4b8e      	ldr	r3, [pc, #568]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3c4:	4a8a      	ldr	r2, [pc, #552]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	6593      	str	r3, [r2, #88]	; 0x58
 800b3ca:	e003      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b3e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	d03a      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3fa:	2b30      	cmp	r3, #48	; 0x30
 800b3fc:	d01f      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b3fe:	2b30      	cmp	r3, #48	; 0x30
 800b400:	d819      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b402:	2b20      	cmp	r3, #32
 800b404:	d00c      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b406:	2b20      	cmp	r3, #32
 800b408:	d815      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d019      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b40e:	2b10      	cmp	r3, #16
 800b410:	d111      	bne.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b412:	4b77      	ldr	r3, [pc, #476]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b416:	4a76      	ldr	r2, [pc, #472]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b41c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b41e:	e011      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b424:	3308      	adds	r3, #8
 800b426:	2102      	movs	r1, #2
 800b428:	4618      	mov	r0, r3
 800b42a:	f002 f997 	bl	800d75c <RCCEx_PLL2_Config>
 800b42e:	4603      	mov	r3, r0
 800b430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b434:	e006      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b43c:	e002      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b43e:	bf00      	nop
 800b440:	e000      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b442:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b44c:	4b68      	ldr	r3, [pc, #416]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b450:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45a:	4a65      	ldr	r2, [pc, #404]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b45c:	430b      	orrs	r3, r1
 800b45e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b460:	e003      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b476:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b47a:	2300      	movs	r3, #0
 800b47c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b480:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b484:	460b      	mov	r3, r1
 800b486:	4313      	orrs	r3, r2
 800b488:	d051      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b494:	d035      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b49a:	d82e      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b49c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4a0:	d031      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b4a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4a6:	d828      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ac:	d01a      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b4ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4b2:	d822      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b4b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4bc:	d007      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b4be:	e01c      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4c0:	4b4b      	ldr	r3, [pc, #300]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c4:	4a4a      	ldr	r2, [pc, #296]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4cc:	e01c      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d2:	3308      	adds	r3, #8
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f002 f940 	bl	800d75c <RCCEx_PLL2_Config>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4e2:	e011      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e8:	3328      	adds	r3, #40	; 0x28
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f002 f9e7 	bl	800d8c0 <RCCEx_PLL3_Config>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4f8:	e006      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b500:	e002      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b502:	bf00      	nop
 800b504:	e000      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b506:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b510:	4b37      	ldr	r3, [pc, #220]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b514:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b51e:	4a34      	ldr	r2, [pc, #208]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b520:	430b      	orrs	r3, r1
 800b522:	6513      	str	r3, [r2, #80]	; 0x50
 800b524:	e003      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b52a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b53a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b53e:	2300      	movs	r3, #0
 800b540:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b544:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b548:	460b      	mov	r3, r1
 800b54a:	4313      	orrs	r3, r2
 800b54c:	d056      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b558:	d033      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b55a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b55e:	d82c      	bhi.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b560:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b564:	d02f      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b56a:	d826      	bhi.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b56c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b570:	d02b      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b576:	d820      	bhi.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b57c:	d012      	beq.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b57e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b582:	d81a      	bhi.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d022      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b58c:	d115      	bne.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b592:	3308      	adds	r3, #8
 800b594:	2101      	movs	r1, #1
 800b596:	4618      	mov	r0, r3
 800b598:	f002 f8e0 	bl	800d75c <RCCEx_PLL2_Config>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b5a2:	e015      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a8:	3328      	adds	r3, #40	; 0x28
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f002 f987 	bl	800d8c0 <RCCEx_PLL3_Config>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b5b8:	e00a      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5c0:	e006      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b5c2:	bf00      	nop
 800b5c4:	e004      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b5c6:	bf00      	nop
 800b5c8:	e002      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b5ca:	bf00      	nop
 800b5cc:	e000      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b5ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10d      	bne.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b5d8:	4b05      	ldr	r3, [pc, #20]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5dc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e6:	4a02      	ldr	r2, [pc, #8]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5e8:	430b      	orrs	r3, r1
 800b5ea:	6513      	str	r3, [r2, #80]	; 0x50
 800b5ec:	e006      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b5ee:	bf00      	nop
 800b5f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b60c:	2300      	movs	r3, #0
 800b60e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b612:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b616:	460b      	mov	r3, r1
 800b618:	4313      	orrs	r3, r2
 800b61a:	d055      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b628:	d033      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b62a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b62e:	d82c      	bhi.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b634:	d02f      	beq.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63a:	d826      	bhi.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b63c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b640:	d02b      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b642:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b646:	d820      	bhi.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b64c:	d012      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b64e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b652:	d81a      	bhi.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d022      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b65c:	d115      	bne.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b662:	3308      	adds	r3, #8
 800b664:	2101      	movs	r1, #1
 800b666:	4618      	mov	r0, r3
 800b668:	f002 f878 	bl	800d75c <RCCEx_PLL2_Config>
 800b66c:	4603      	mov	r3, r0
 800b66e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b672:	e015      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b678:	3328      	adds	r3, #40	; 0x28
 800b67a:	2101      	movs	r1, #1
 800b67c:	4618      	mov	r0, r3
 800b67e:	f002 f91f 	bl	800d8c0 <RCCEx_PLL3_Config>
 800b682:	4603      	mov	r3, r0
 800b684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b688:	e00a      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b690:	e006      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b692:	bf00      	nop
 800b694:	e004      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b696:	bf00      	nop
 800b698:	e002      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b69a:	bf00      	nop
 800b69c:	e000      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b69e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10b      	bne.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b6a8:	4ba3      	ldr	r3, [pc, #652]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6b8:	4a9f      	ldr	r2, [pc, #636]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ba:	430b      	orrs	r3, r1
 800b6bc:	6593      	str	r3, [r2, #88]	; 0x58
 800b6be:	e003      	b.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b6d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b6de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	d037      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f2:	d00e      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b6f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f8:	d816      	bhi.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d018      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b6fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b702:	d111      	bne.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b704:	4b8c      	ldr	r3, [pc, #560]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	4a8b      	ldr	r2, [pc, #556]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b70a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b70e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b710:	e00f      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b716:	3308      	adds	r3, #8
 800b718:	2101      	movs	r1, #1
 800b71a:	4618      	mov	r0, r3
 800b71c:	f002 f81e 	bl	800d75c <RCCEx_PLL2_Config>
 800b720:	4603      	mov	r3, r0
 800b722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b726:	e004      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b72e:	e000      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b730:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10a      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b73a:	4b7f      	ldr	r3, [pc, #508]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b73e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b748:	4a7b      	ldr	r2, [pc, #492]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b74a:	430b      	orrs	r3, r1
 800b74c:	6513      	str	r3, [r2, #80]	; 0x50
 800b74e:	e003      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b768:	2300      	movs	r3, #0
 800b76a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b76e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b772:	460b      	mov	r3, r1
 800b774:	4313      	orrs	r3, r2
 800b776:	d039      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d81c      	bhi.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b782:	a201      	add	r2, pc, #4	; (adr r2, 800b788 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b788:	0800b7c5 	.word	0x0800b7c5
 800b78c:	0800b799 	.word	0x0800b799
 800b790:	0800b7a7 	.word	0x0800b7a7
 800b794:	0800b7c5 	.word	0x0800b7c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b798:	4b67      	ldr	r3, [pc, #412]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	4a66      	ldr	r2, [pc, #408]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b7a4:	e00f      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	2102      	movs	r1, #2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f001 ffd4 	bl	800d75c <RCCEx_PLL2_Config>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b7ba:	e004      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7c2:	e000      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b7c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b7ce:	4b5a      	ldr	r3, [pc, #360]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d2:	f023 0103 	bic.w	r1, r3, #3
 800b7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7dc:	4a56      	ldr	r2, [pc, #344]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7de:	430b      	orrs	r3, r1
 800b7e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7e2:	e003      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b7f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b802:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b806:	460b      	mov	r3, r1
 800b808:	4313      	orrs	r3, r2
 800b80a:	f000 809f 	beq.w	800b94c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b80e:	4b4b      	ldr	r3, [pc, #300]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a4a      	ldr	r2, [pc, #296]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b81a:	f7f8 fc09 	bl	8004030 <HAL_GetTick>
 800b81e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b822:	e00b      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b824:	f7f8 fc04 	bl	8004030 <HAL_GetTick>
 800b828:	4602      	mov	r2, r0
 800b82a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	2b64      	cmp	r3, #100	; 0x64
 800b832:	d903      	bls.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b83a:	e005      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b83c:	4b3f      	ldr	r3, [pc, #252]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0ed      	beq.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d179      	bne.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b850:	4b39      	ldr	r3, [pc, #228]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b85c:	4053      	eors	r3, r2
 800b85e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b862:	2b00      	cmp	r3, #0
 800b864:	d015      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b866:	4b34      	ldr	r3, [pc, #208]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b86e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b872:	4b31      	ldr	r3, [pc, #196]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b876:	4a30      	ldr	r2, [pc, #192]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b87c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b87e:	4b2e      	ldr	r3, [pc, #184]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b882:	4a2d      	ldr	r2, [pc, #180]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b888:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b88a:	4a2b      	ldr	r2, [pc, #172]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b88c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b890:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b896:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b89e:	d118      	bne.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a0:	f7f8 fbc6 	bl	8004030 <HAL_GetTick>
 800b8a4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8a8:	e00d      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8aa:	f7f8 fbc1 	bl	8004030 <HAL_GetTick>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8b4:	1ad2      	subs	r2, r2, r3
 800b8b6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d903      	bls.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b8c4:	e005      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8c6:	4b1c      	ldr	r3, [pc, #112]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ca:	f003 0302 	and.w	r3, r3, #2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d0eb      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d129      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8ea:	d10e      	bne.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b8ec:	4b12      	ldr	r3, [pc, #72]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8fc:	091a      	lsrs	r2, r3, #4
 800b8fe:	4b10      	ldr	r3, [pc, #64]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b900:	4013      	ands	r3, r2
 800b902:	4a0d      	ldr	r2, [pc, #52]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b904:	430b      	orrs	r3, r1
 800b906:	6113      	str	r3, [r2, #16]
 800b908:	e005      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b90a:	4b0b      	ldr	r3, [pc, #44]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	4a0a      	ldr	r2, [pc, #40]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b910:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b914:	6113      	str	r3, [r2, #16]
 800b916:	4b08      	ldr	r3, [pc, #32]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b918:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b926:	4a04      	ldr	r2, [pc, #16]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b928:	430b      	orrs	r3, r1
 800b92a:	6713      	str	r3, [r2, #112]	; 0x70
 800b92c:	e00e      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b92e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b936:	e009      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b938:	58024400 	.word	0x58024400
 800b93c:	58024800 	.word	0x58024800
 800b940:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f002 0301 	and.w	r3, r2, #1
 800b958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b95c:	2300      	movs	r3, #0
 800b95e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b962:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b966:	460b      	mov	r3, r1
 800b968:	4313      	orrs	r3, r2
 800b96a:	f000 8089 	beq.w	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b974:	2b28      	cmp	r3, #40	; 0x28
 800b976:	d86b      	bhi.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b978:	a201      	add	r2, pc, #4	; (adr r2, 800b980 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97e:	bf00      	nop
 800b980:	0800ba59 	.word	0x0800ba59
 800b984:	0800ba51 	.word	0x0800ba51
 800b988:	0800ba51 	.word	0x0800ba51
 800b98c:	0800ba51 	.word	0x0800ba51
 800b990:	0800ba51 	.word	0x0800ba51
 800b994:	0800ba51 	.word	0x0800ba51
 800b998:	0800ba51 	.word	0x0800ba51
 800b99c:	0800ba51 	.word	0x0800ba51
 800b9a0:	0800ba25 	.word	0x0800ba25
 800b9a4:	0800ba51 	.word	0x0800ba51
 800b9a8:	0800ba51 	.word	0x0800ba51
 800b9ac:	0800ba51 	.word	0x0800ba51
 800b9b0:	0800ba51 	.word	0x0800ba51
 800b9b4:	0800ba51 	.word	0x0800ba51
 800b9b8:	0800ba51 	.word	0x0800ba51
 800b9bc:	0800ba51 	.word	0x0800ba51
 800b9c0:	0800ba3b 	.word	0x0800ba3b
 800b9c4:	0800ba51 	.word	0x0800ba51
 800b9c8:	0800ba51 	.word	0x0800ba51
 800b9cc:	0800ba51 	.word	0x0800ba51
 800b9d0:	0800ba51 	.word	0x0800ba51
 800b9d4:	0800ba51 	.word	0x0800ba51
 800b9d8:	0800ba51 	.word	0x0800ba51
 800b9dc:	0800ba51 	.word	0x0800ba51
 800b9e0:	0800ba59 	.word	0x0800ba59
 800b9e4:	0800ba51 	.word	0x0800ba51
 800b9e8:	0800ba51 	.word	0x0800ba51
 800b9ec:	0800ba51 	.word	0x0800ba51
 800b9f0:	0800ba51 	.word	0x0800ba51
 800b9f4:	0800ba51 	.word	0x0800ba51
 800b9f8:	0800ba51 	.word	0x0800ba51
 800b9fc:	0800ba51 	.word	0x0800ba51
 800ba00:	0800ba59 	.word	0x0800ba59
 800ba04:	0800ba51 	.word	0x0800ba51
 800ba08:	0800ba51 	.word	0x0800ba51
 800ba0c:	0800ba51 	.word	0x0800ba51
 800ba10:	0800ba51 	.word	0x0800ba51
 800ba14:	0800ba51 	.word	0x0800ba51
 800ba18:	0800ba51 	.word	0x0800ba51
 800ba1c:	0800ba51 	.word	0x0800ba51
 800ba20:	0800ba59 	.word	0x0800ba59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba28:	3308      	adds	r3, #8
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 fe95 	bl	800d75c <RCCEx_PLL2_Config>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba38:	e00f      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3e:	3328      	adds	r3, #40	; 0x28
 800ba40:	2101      	movs	r1, #1
 800ba42:	4618      	mov	r0, r3
 800ba44:	f001 ff3c 	bl	800d8c0 <RCCEx_PLL3_Config>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba4e:	e004      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba56:	e000      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ba58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10a      	bne.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba62:	4bbf      	ldr	r3, [pc, #764]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba66:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ba6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba70:	4abb      	ldr	r2, [pc, #748]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba72:	430b      	orrs	r3, r1
 800ba74:	6553      	str	r3, [r2, #84]	; 0x54
 800ba76:	e003      	b.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f002 0302 	and.w	r3, r2, #2
 800ba8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba90:	2300      	movs	r3, #0
 800ba92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	d041      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800baa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baa6:	2b05      	cmp	r3, #5
 800baa8:	d824      	bhi.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800baaa:	a201      	add	r2, pc, #4	; (adr r2, 800bab0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800baac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab0:	0800bafd 	.word	0x0800bafd
 800bab4:	0800bac9 	.word	0x0800bac9
 800bab8:	0800badf 	.word	0x0800badf
 800babc:	0800bafd 	.word	0x0800bafd
 800bac0:	0800bafd 	.word	0x0800bafd
 800bac4:	0800bafd 	.word	0x0800bafd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bacc:	3308      	adds	r3, #8
 800bace:	2101      	movs	r1, #1
 800bad0:	4618      	mov	r0, r3
 800bad2:	f001 fe43 	bl	800d75c <RCCEx_PLL2_Config>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800badc:	e00f      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae2:	3328      	adds	r3, #40	; 0x28
 800bae4:	2101      	movs	r1, #1
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 feea 	bl	800d8c0 <RCCEx_PLL3_Config>
 800baec:	4603      	mov	r3, r0
 800baee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800baf2:	e004      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bafa:	e000      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bafe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10a      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb06:	4b96      	ldr	r3, [pc, #600]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb0a:	f023 0107 	bic.w	r1, r3, #7
 800bb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb14:	4a92      	ldr	r2, [pc, #584]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb16:	430b      	orrs	r3, r1
 800bb18:	6553      	str	r3, [r2, #84]	; 0x54
 800bb1a:	e003      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	f002 0304 	and.w	r3, r2, #4
 800bb30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb34:	2300      	movs	r3, #0
 800bb36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4313      	orrs	r3, r2
 800bb42:	d044      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb4c:	2b05      	cmp	r3, #5
 800bb4e:	d825      	bhi.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bb50:	a201      	add	r2, pc, #4	; (adr r2, 800bb58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb56:	bf00      	nop
 800bb58:	0800bba5 	.word	0x0800bba5
 800bb5c:	0800bb71 	.word	0x0800bb71
 800bb60:	0800bb87 	.word	0x0800bb87
 800bb64:	0800bba5 	.word	0x0800bba5
 800bb68:	0800bba5 	.word	0x0800bba5
 800bb6c:	0800bba5 	.word	0x0800bba5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb74:	3308      	adds	r3, #8
 800bb76:	2101      	movs	r1, #1
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f001 fdef 	bl	800d75c <RCCEx_PLL2_Config>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb84:	e00f      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8a:	3328      	adds	r3, #40	; 0x28
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 fe96 	bl	800d8c0 <RCCEx_PLL3_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb9a:	e004      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bba2:	e000      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10b      	bne.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bbae:	4b6c      	ldr	r3, [pc, #432]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb2:	f023 0107 	bic.w	r1, r3, #7
 800bbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbbe:	4a68      	ldr	r2, [pc, #416]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbc0:	430b      	orrs	r3, r1
 800bbc2:	6593      	str	r3, [r2, #88]	; 0x58
 800bbc4:	e003      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	f002 0320 	and.w	r3, r2, #32
 800bbda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4313      	orrs	r3, r2
 800bbec:	d055      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbfa:	d033      	beq.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bbfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc00:	d82c      	bhi.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc06:	d02f      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bc08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0c:	d826      	bhi.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc12:	d02b      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bc14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc18:	d820      	bhi.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc1e:	d012      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bc20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc24:	d81a      	bhi.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d022      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bc2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc2e:	d115      	bne.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc34:	3308      	adds	r3, #8
 800bc36:	2100      	movs	r1, #0
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f001 fd8f 	bl	800d75c <RCCEx_PLL2_Config>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc44:	e015      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4a:	3328      	adds	r3, #40	; 0x28
 800bc4c:	2102      	movs	r1, #2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f001 fe36 	bl	800d8c0 <RCCEx_PLL3_Config>
 800bc54:	4603      	mov	r3, r0
 800bc56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc5a:	e00a      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc62:	e006      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc64:	bf00      	nop
 800bc66:	e004      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc68:	bf00      	nop
 800bc6a:	e002      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc6c:	bf00      	nop
 800bc6e:	e000      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10b      	bne.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc7a:	4b39      	ldr	r3, [pc, #228]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc7e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8a:	4a35      	ldr	r2, [pc, #212]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc8c:	430b      	orrs	r3, r1
 800bc8e:	6553      	str	r3, [r2, #84]	; 0x54
 800bc90:	e003      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bcb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	d058      	beq.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bcc6:	d033      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bcc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bccc:	d82c      	bhi.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcd2:	d02f      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bcd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcd8:	d826      	bhi.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bcde:	d02b      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bce0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bce4:	d820      	bhi.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcea:	d012      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bcec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf0:	d81a      	bhi.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d022      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bcf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcfa:	d115      	bne.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd00:	3308      	adds	r3, #8
 800bd02:	2100      	movs	r1, #0
 800bd04:	4618      	mov	r0, r3
 800bd06:	f001 fd29 	bl	800d75c <RCCEx_PLL2_Config>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd10:	e015      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd16:	3328      	adds	r3, #40	; 0x28
 800bd18:	2102      	movs	r1, #2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 fdd0 	bl	800d8c0 <RCCEx_PLL3_Config>
 800bd20:	4603      	mov	r3, r0
 800bd22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd26:	e00a      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd2e:	e006      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bd30:	bf00      	nop
 800bd32:	e004      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bd34:	bf00      	nop
 800bd36:	e002      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bd38:	bf00      	nop
 800bd3a:	e000      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bd3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10e      	bne.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd46:	4b06      	ldr	r3, [pc, #24]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd56:	4a02      	ldr	r2, [pc, #8]	; (800bd60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd58:	430b      	orrs	r3, r1
 800bd5a:	6593      	str	r3, [r2, #88]	; 0x58
 800bd5c:	e006      	b.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bd5e:	bf00      	nop
 800bd60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bd78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bd86:	460b      	mov	r3, r1
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	d055      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd98:	d033      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bd9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd9e:	d82c      	bhi.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bda0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bda4:	d02f      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bda6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdaa:	d826      	bhi.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bdac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bdb0:	d02b      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bdb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bdb6:	d820      	bhi.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bdb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdbc:	d012      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bdbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdc2:	d81a      	bhi.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d022      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bdc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdcc:	d115      	bne.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd2:	3308      	adds	r3, #8
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f001 fcc0 	bl	800d75c <RCCEx_PLL2_Config>
 800bddc:	4603      	mov	r3, r0
 800bdde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bde2:	e015      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bde4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde8:	3328      	adds	r3, #40	; 0x28
 800bdea:	2102      	movs	r1, #2
 800bdec:	4618      	mov	r0, r3
 800bdee:	f001 fd67 	bl	800d8c0 <RCCEx_PLL3_Config>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bdf8:	e00a      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be00:	e006      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be02:	bf00      	nop
 800be04:	e004      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be06:	bf00      	nop
 800be08:	e002      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be0a:	bf00      	nop
 800be0c:	e000      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10b      	bne.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be18:	4ba1      	ldr	r3, [pc, #644]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be1c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800be20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be28:	4a9d      	ldr	r2, [pc, #628]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be2a:	430b      	orrs	r3, r1
 800be2c:	6593      	str	r3, [r2, #88]	; 0x58
 800be2e:	e003      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	f002 0308 	and.w	r3, r2, #8
 800be44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be48:	2300      	movs	r3, #0
 800be4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800be52:	460b      	mov	r3, r1
 800be54:	4313      	orrs	r3, r2
 800be56:	d01e      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800be58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be64:	d10c      	bne.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6a:	3328      	adds	r3, #40	; 0x28
 800be6c:	2102      	movs	r1, #2
 800be6e:	4618      	mov	r0, r3
 800be70:	f001 fd26 	bl	800d8c0 <RCCEx_PLL3_Config>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d002      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be80:	4b87      	ldr	r3, [pc, #540]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be90:	4a83      	ldr	r2, [pc, #524]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be92:	430b      	orrs	r3, r1
 800be94:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	f002 0310 	and.w	r3, r2, #16
 800bea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bea6:	2300      	movs	r3, #0
 800bea8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800beac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800beb0:	460b      	mov	r3, r1
 800beb2:	4313      	orrs	r3, r2
 800beb4:	d01e      	beq.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800beb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec2:	d10c      	bne.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bec8:	3328      	adds	r3, #40	; 0x28
 800beca:	2102      	movs	r1, #2
 800becc:	4618      	mov	r0, r3
 800bece:	f001 fcf7 	bl	800d8c0 <RCCEx_PLL3_Config>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bed8:	2301      	movs	r3, #1
 800beda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bede:	4b70      	ldr	r3, [pc, #448]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800beee:	4a6c      	ldr	r2, [pc, #432]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bef0:	430b      	orrs	r3, r1
 800bef2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf04:	2300      	movs	r3, #0
 800bf06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bf0e:	460b      	mov	r3, r1
 800bf10:	4313      	orrs	r3, r2
 800bf12:	d03e      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bf14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf20:	d022      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bf22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf26:	d81b      	bhi.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d003      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bf2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf30:	d00b      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bf32:	e015      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf38:	3308      	adds	r3, #8
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f001 fc0d 	bl	800d75c <RCCEx_PLL2_Config>
 800bf42:	4603      	mov	r3, r0
 800bf44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf48:	e00f      	b.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4e:	3328      	adds	r3, #40	; 0x28
 800bf50:	2102      	movs	r1, #2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 fcb4 	bl	800d8c0 <RCCEx_PLL3_Config>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf5e:	e004      	b.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf66:	e000      	b.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bf68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10b      	bne.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf72:	4b4b      	ldr	r3, [pc, #300]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf82:	4a47      	ldr	r2, [pc, #284]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf84:	430b      	orrs	r3, r1
 800bf86:	6593      	str	r3, [r2, #88]	; 0x58
 800bf88:	e003      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bf9e:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bfa4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	d03b      	beq.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bfae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfba:	d01f      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bfbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfc0:	d818      	bhi.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bfc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfc6:	d003      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bfc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfcc:	d007      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bfce:	e011      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfd0:	4b33      	ldr	r3, [pc, #204]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd4:	4a32      	ldr	r2, [pc, #200]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bfdc:	e00f      	b.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe2:	3328      	adds	r3, #40	; 0x28
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f001 fc6a 	bl	800d8c0 <RCCEx_PLL3_Config>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bff2:	e004      	b.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bffa:	e000      	b.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10b      	bne.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c006:	4b26      	ldr	r3, [pc, #152]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c016:	4a22      	ldr	r2, [pc, #136]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c018:	430b      	orrs	r3, r1
 800c01a:	6553      	str	r3, [r2, #84]	; 0x54
 800c01c:	e003      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c01e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c032:	673b      	str	r3, [r7, #112]	; 0x70
 800c034:	2300      	movs	r3, #0
 800c036:	677b      	str	r3, [r7, #116]	; 0x74
 800c038:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c03c:	460b      	mov	r3, r1
 800c03e:	4313      	orrs	r3, r2
 800c040:	d034      	beq.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c050:	d007      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c052:	e011      	b.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c054:	4b12      	ldr	r3, [pc, #72]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	4a11      	ldr	r2, [pc, #68]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c05a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c05e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c060:	e00e      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c066:	3308      	adds	r3, #8
 800c068:	2102      	movs	r1, #2
 800c06a:	4618      	mov	r0, r3
 800c06c:	f001 fb76 	bl	800d75c <RCCEx_PLL2_Config>
 800c070:	4603      	mov	r3, r0
 800c072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c076:	e003      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c07e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10d      	bne.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c088:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c08a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c08c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c096:	4a02      	ldr	r2, [pc, #8]	; (800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c098:	430b      	orrs	r3, r1
 800c09a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c09c:	e006      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c09e:	bf00      	nop
 800c0a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c0b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	d00c      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0cc:	3328      	adds	r3, #40	; 0x28
 800c0ce:	2102      	movs	r1, #2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f001 fbf5 	bl	800d8c0 <RCCEx_PLL3_Config>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d002      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c0ee:	663b      	str	r3, [r7, #96]	; 0x60
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	667b      	str	r3, [r7, #100]	; 0x64
 800c0f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	d038      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c10a:	d018      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c10c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c110:	d811      	bhi.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c116:	d014      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c11c:	d80b      	bhi.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d011      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c126:	d106      	bne.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c128:	4bc3      	ldr	r3, [pc, #780]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12c:	4ac2      	ldr	r2, [pc, #776]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c12e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c134:	e008      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c13c:	e004      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c13e:	bf00      	nop
 800c140:	e002      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c142:	bf00      	nop
 800c144:	e000      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c146:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10b      	bne.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c150:	4bb9      	ldr	r3, [pc, #740]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c154:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c160:	4ab5      	ldr	r2, [pc, #724]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c162:	430b      	orrs	r3, r1
 800c164:	6553      	str	r3, [r2, #84]	; 0x54
 800c166:	e003      	b.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c16c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c17c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c17e:	2300      	movs	r3, #0
 800c180:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c182:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c186:	460b      	mov	r3, r1
 800c188:	4313      	orrs	r3, r2
 800c18a:	d009      	beq.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c18c:	4baa      	ldr	r3, [pc, #680]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c18e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c190:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c19a:	4aa7      	ldr	r2, [pc, #668]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c19c:	430b      	orrs	r3, r1
 800c19e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c1ac:	653b      	str	r3, [r7, #80]	; 0x50
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	657b      	str	r3, [r7, #84]	; 0x54
 800c1b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	d00a      	beq.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c1bc:	4b9e      	ldr	r3, [pc, #632]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c1cc:	4a9a      	ldr	r2, [pc, #616]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ce:	430b      	orrs	r3, r1
 800c1d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c1de:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	d009      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c1ee:	4b92      	ldr	r3, [pc, #584]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1fc:	4a8e      	ldr	r2, [pc, #568]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1fe:	430b      	orrs	r3, r1
 800c200:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c20e:	643b      	str	r3, [r7, #64]	; 0x40
 800c210:	2300      	movs	r3, #0
 800c212:	647b      	str	r3, [r7, #68]	; 0x44
 800c214:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c218:	460b      	mov	r3, r1
 800c21a:	4313      	orrs	r3, r2
 800c21c:	d00e      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c21e:	4b86      	ldr	r3, [pc, #536]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	4a85      	ldr	r2, [pc, #532]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c228:	6113      	str	r3, [r2, #16]
 800c22a:	4b83      	ldr	r3, [pc, #524]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c22c:	6919      	ldr	r1, [r3, #16]
 800c22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c232:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c236:	4a80      	ldr	r2, [pc, #512]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c238:	430b      	orrs	r3, r1
 800c23a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c248:	63bb      	str	r3, [r7, #56]	; 0x38
 800c24a:	2300      	movs	r3, #0
 800c24c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c24e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c252:	460b      	mov	r3, r1
 800c254:	4313      	orrs	r3, r2
 800c256:	d009      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c258:	4b77      	ldr	r3, [pc, #476]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c25a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c25c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c266:	4a74      	ldr	r2, [pc, #464]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c268:	430b      	orrs	r3, r1
 800c26a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c278:	633b      	str	r3, [r7, #48]	; 0x30
 800c27a:	2300      	movs	r3, #0
 800c27c:	637b      	str	r3, [r7, #52]	; 0x34
 800c27e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c282:	460b      	mov	r3, r1
 800c284:	4313      	orrs	r3, r2
 800c286:	d00a      	beq.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c288:	4b6b      	ldr	r3, [pc, #428]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c28a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c28c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c298:	4a67      	ldr	r2, [pc, #412]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c29a:	430b      	orrs	r3, r1
 800c29c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	62b9      	str	r1, [r7, #40]	; 0x28
 800c2aa:	f003 0301 	and.w	r3, r3, #1
 800c2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	d011      	beq.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2be:	3308      	adds	r3, #8
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f001 fa4a 	bl	800d75c <RCCEx_PLL2_Config>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	6239      	str	r1, [r7, #32]
 800c2ea:	f003 0302 	and.w	r3, r3, #2
 800c2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	d011      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2fe:	3308      	adds	r3, #8
 800c300:	2101      	movs	r1, #1
 800c302:	4618      	mov	r0, r3
 800c304:	f001 fa2a 	bl	800d75c <RCCEx_PLL2_Config>
 800c308:	4603      	mov	r3, r0
 800c30a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c30e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c31a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	2100      	movs	r1, #0
 800c328:	61b9      	str	r1, [r7, #24]
 800c32a:	f003 0304 	and.w	r3, r3, #4
 800c32e:	61fb      	str	r3, [r7, #28]
 800c330:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c334:	460b      	mov	r3, r1
 800c336:	4313      	orrs	r3, r2
 800c338:	d011      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33e:	3308      	adds	r3, #8
 800c340:	2102      	movs	r1, #2
 800c342:	4618      	mov	r0, r3
 800c344:	f001 fa0a 	bl	800d75c <RCCEx_PLL2_Config>
 800c348:	4603      	mov	r3, r0
 800c34a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c34e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c352:	2b00      	cmp	r3, #0
 800c354:	d003      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c35a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c366:	2100      	movs	r1, #0
 800c368:	6139      	str	r1, [r7, #16]
 800c36a:	f003 0308 	and.w	r3, r3, #8
 800c36e:	617b      	str	r3, [r7, #20]
 800c370:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c374:	460b      	mov	r3, r1
 800c376:	4313      	orrs	r3, r2
 800c378:	d011      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37e:	3328      	adds	r3, #40	; 0x28
 800c380:	2100      	movs	r1, #0
 800c382:	4618      	mov	r0, r3
 800c384:	f001 fa9c 	bl	800d8c0 <RCCEx_PLL3_Config>
 800c388:	4603      	mov	r3, r0
 800c38a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c38e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c39a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	f003 0310 	and.w	r3, r3, #16
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	d011      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3be:	3328      	adds	r3, #40	; 0x28
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f001 fa7c 	bl	800d8c0 <RCCEx_PLL3_Config>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d003      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	6039      	str	r1, [r7, #0]
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	607b      	str	r3, [r7, #4]
 800c3f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	d011      	beq.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3fe:	3328      	adds	r3, #40	; 0x28
 800c400:	2102      	movs	r1, #2
 800c402:	4618      	mov	r0, r3
 800c404:	f001 fa5c 	bl	800d8c0 <RCCEx_PLL3_Config>
 800c408:	4603      	mov	r3, r0
 800c40a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c40e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c41a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c41e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	e000      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c432:	46bd      	mov	sp, r7
 800c434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c438:	58024400 	.word	0x58024400

0800c43c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b090      	sub	sp, #64	; 0x40
 800c440:	af00      	add	r7, sp, #0
 800c442:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c44a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c44e:	430b      	orrs	r3, r1
 800c450:	f040 8094 	bne.w	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c454:	4b9e      	ldr	r3, [pc, #632]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c458:	f003 0307 	and.w	r3, r3, #7
 800c45c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	2b04      	cmp	r3, #4
 800c462:	f200 8087 	bhi.w	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c466:	a201      	add	r2, pc, #4	; (adr r2, 800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46c:	0800c481 	.word	0x0800c481
 800c470:	0800c4a9 	.word	0x0800c4a9
 800c474:	0800c4d1 	.word	0x0800c4d1
 800c478:	0800c56d 	.word	0x0800c56d
 800c47c:	0800c4f9 	.word	0x0800c4f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c480:	4b93      	ldr	r3, [pc, #588]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c48c:	d108      	bne.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c48e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c492:	4618      	mov	r0, r3
 800c494:	f001 f810 	bl	800d4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c49c:	f000 bd45 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a4:	f000 bd41 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4a8:	4b89      	ldr	r3, [pc, #548]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4b4:	d108      	bne.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4b6:	f107 0318 	add.w	r3, r7, #24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fd54 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c4:	f000 bd31 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4cc:	f000 bd2d 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4d0:	4b7f      	ldr	r3, [pc, #508]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4dc:	d108      	bne.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4de:	f107 030c 	add.w	r3, r7, #12
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 fe94 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ec:	f000 bd1d 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f4:	f000 bd19 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4f8:	4b75      	ldr	r3, [pc, #468]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c500:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c502:	4b73      	ldr	r3, [pc, #460]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 0304 	and.w	r3, r3, #4
 800c50a:	2b04      	cmp	r3, #4
 800c50c:	d10c      	bne.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	2b00      	cmp	r3, #0
 800c512:	d109      	bne.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c514:	4b6e      	ldr	r3, [pc, #440]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	08db      	lsrs	r3, r3, #3
 800c51a:	f003 0303 	and.w	r3, r3, #3
 800c51e:	4a6d      	ldr	r2, [pc, #436]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c520:	fa22 f303 	lsr.w	r3, r2, r3
 800c524:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c526:	e01f      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c528:	4b69      	ldr	r3, [pc, #420]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c534:	d106      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c53c:	d102      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c53e:	4b66      	ldr	r3, [pc, #408]	; (800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c542:	e011      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c544:	4b62      	ldr	r3, [pc, #392]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c54c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c550:	d106      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c558:	d102      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c55a:	4b60      	ldr	r3, [pc, #384]	; (800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c55e:	e003      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c564:	f000 bce1 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c568:	f000 bcdf 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c56c:	4b5c      	ldr	r3, [pc, #368]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c570:	f000 bcdb 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c578:	f000 bcd7 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c580:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c584:	430b      	orrs	r3, r1
 800c586:	f040 80ad 	bne.w	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c58a:	4b51      	ldr	r3, [pc, #324]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c58e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c592:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59a:	d056      	beq.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5a2:	f200 8090 	bhi.w	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	2bc0      	cmp	r3, #192	; 0xc0
 800c5aa:	f000 8088 	beq.w	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	2bc0      	cmp	r3, #192	; 0xc0
 800c5b2:	f200 8088 	bhi.w	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b8:	2b80      	cmp	r3, #128	; 0x80
 800c5ba:	d032      	beq.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	2b80      	cmp	r3, #128	; 0x80
 800c5c0:	f200 8081 	bhi.w	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	2b40      	cmp	r3, #64	; 0x40
 800c5ce:	d014      	beq.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c5d0:	e079      	b.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5d2:	4b3f      	ldr	r3, [pc, #252]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5de:	d108      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 ff67 	bl	800d4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ee:	f000 bc9c 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f6:	f000 bc98 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5fa:	4b35      	ldr	r3, [pc, #212]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c606:	d108      	bne.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c608:	f107 0318 	add.w	r3, r7, #24
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 fcab 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c616:	f000 bc88 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c61a:	2300      	movs	r3, #0
 800c61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61e:	f000 bc84 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c622:	4b2b      	ldr	r3, [pc, #172]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c62a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c62e:	d108      	bne.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c630:	f107 030c 	add.w	r3, r7, #12
 800c634:	4618      	mov	r0, r3
 800c636:	f000 fdeb 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c63e:	f000 bc74 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c646:	f000 bc70 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c64a:	4b21      	ldr	r3, [pc, #132]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c64c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c64e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c652:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c654:	4b1e      	ldr	r3, [pc, #120]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 0304 	and.w	r3, r3, #4
 800c65c:	2b04      	cmp	r3, #4
 800c65e:	d10c      	bne.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c662:	2b00      	cmp	r3, #0
 800c664:	d109      	bne.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c666:	4b1a      	ldr	r3, [pc, #104]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	08db      	lsrs	r3, r3, #3
 800c66c:	f003 0303 	and.w	r3, r3, #3
 800c670:	4a18      	ldr	r2, [pc, #96]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c672:	fa22 f303 	lsr.w	r3, r2, r3
 800c676:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c678:	e01f      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c67a:	4b15      	ldr	r3, [pc, #84]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c686:	d106      	bne.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c68e:	d102      	bne.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c690:	4b11      	ldr	r3, [pc, #68]	; (800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c694:	e011      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c696:	4b0e      	ldr	r3, [pc, #56]	; (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c69e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6a2:	d106      	bne.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6aa:	d102      	bne.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6ac:	4b0b      	ldr	r3, [pc, #44]	; (800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6b0:	e003      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6b6:	f000 bc38 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6ba:	f000 bc36 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6be:	4b08      	ldr	r3, [pc, #32]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c2:	f000 bc32 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ca:	f000 bc2e 	b.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6ce:	bf00      	nop
 800c6d0:	58024400 	.word	0x58024400
 800c6d4:	03d09000 	.word	0x03d09000
 800c6d8:	003d0900 	.word	0x003d0900
 800c6dc:	017d7840 	.word	0x017d7840
 800c6e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6e8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c6ec:	430b      	orrs	r3, r1
 800c6ee:	f040 809c 	bne.w	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c6f2:	4b9e      	ldr	r3, [pc, #632]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6f6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c6fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c702:	d054      	beq.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c706:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c70a:	f200 808b 	bhi.w	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c714:	f000 8083 	beq.w	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c71e:	f200 8081 	bhi.w	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c728:	d02f      	beq.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c730:	d878      	bhi.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	2b00      	cmp	r3, #0
 800c736:	d004      	beq.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c73e:	d012      	beq.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c740:	e070      	b.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c742:	4b8a      	ldr	r3, [pc, #552]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c74a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c74e:	d107      	bne.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c754:	4618      	mov	r0, r3
 800c756:	f000 feaf 	bl	800d4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c75e:	e3e4      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c764:	e3e1      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c766:	4b81      	ldr	r3, [pc, #516]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c76e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c772:	d107      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c774:	f107 0318 	add.w	r3, r7, #24
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 fbf5 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c782:	e3d2      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c788:	e3cf      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c78a:	4b78      	ldr	r3, [pc, #480]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c796:	d107      	bne.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c798:	f107 030c 	add.w	r3, r7, #12
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 fd37 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a6:	e3c0      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ac:	e3bd      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7ae:	4b6f      	ldr	r3, [pc, #444]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7b8:	4b6c      	ldr	r3, [pc, #432]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 0304 	and.w	r3, r3, #4
 800c7c0:	2b04      	cmp	r3, #4
 800c7c2:	d10c      	bne.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d109      	bne.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7ca:	4b68      	ldr	r3, [pc, #416]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	08db      	lsrs	r3, r3, #3
 800c7d0:	f003 0303 	and.w	r3, r3, #3
 800c7d4:	4a66      	ldr	r2, [pc, #408]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7dc:	e01e      	b.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7de:	4b63      	ldr	r3, [pc, #396]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ea:	d106      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7f2:	d102      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7f4:	4b5f      	ldr	r3, [pc, #380]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7f8:	e010      	b.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7fa:	4b5c      	ldr	r3, [pc, #368]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c806:	d106      	bne.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c80a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c80e:	d102      	bne.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c810:	4b59      	ldr	r3, [pc, #356]	; (800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c812:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c814:	e002      	b.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c81a:	e386      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c81c:	e385      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c81e:	4b57      	ldr	r3, [pc, #348]	; (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c822:	e382      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c828:	e37f      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c82a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c82e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c832:	430b      	orrs	r3, r1
 800c834:	f040 80a7 	bne.w	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c838:	4b4c      	ldr	r3, [pc, #304]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c83a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c83c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c840:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c848:	d055      	beq.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c850:	f200 8096 	bhi.w	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c856:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c85a:	f000 8084 	beq.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c864:	f200 808c 	bhi.w	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c86e:	d030      	beq.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c876:	f200 8083 	bhi.w	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d004      	beq.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c882:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c886:	d012      	beq.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c888:	e07a      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c88a:	4b38      	ldr	r3, [pc, #224]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c896:	d107      	bne.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 fe0b 	bl	800d4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a6:	e340      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ac:	e33d      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8ae:	4b2f      	ldr	r3, [pc, #188]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8ba:	d107      	bne.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8bc:	f107 0318 	add.w	r3, r7, #24
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 fb51 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ca:	e32e      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d0:	e32b      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8d2:	4b26      	ldr	r3, [pc, #152]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8de:	d107      	bne.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8e0:	f107 030c 	add.w	r3, r7, #12
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 fc93 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ee:	e31c      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f4:	e319      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8f6:	4b1d      	ldr	r3, [pc, #116]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c900:	4b1a      	ldr	r3, [pc, #104]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0304 	and.w	r3, r3, #4
 800c908:	2b04      	cmp	r3, #4
 800c90a:	d10c      	bne.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d109      	bne.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c912:	4b16      	ldr	r3, [pc, #88]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	08db      	lsrs	r3, r3, #3
 800c918:	f003 0303 	and.w	r3, r3, #3
 800c91c:	4a14      	ldr	r2, [pc, #80]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c91e:	fa22 f303 	lsr.w	r3, r2, r3
 800c922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c924:	e01e      	b.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c926:	4b11      	ldr	r3, [pc, #68]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c932:	d106      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c93a:	d102      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c93c:	4b0d      	ldr	r3, [pc, #52]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c940:	e010      	b.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c942:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c94a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c94e:	d106      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c956:	d102      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c958:	4b07      	ldr	r3, [pc, #28]	; (800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c95a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c95c:	e002      	b.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c962:	e2e2      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c964:	e2e1      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c966:	4b05      	ldr	r3, [pc, #20]	; (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96a:	e2de      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c96c:	58024400 	.word	0x58024400
 800c970:	03d09000 	.word	0x03d09000
 800c974:	003d0900 	.word	0x003d0900
 800c978:	017d7840 	.word	0x017d7840
 800c97c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c980:	2300      	movs	r3, #0
 800c982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c984:	e2d1      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c98a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c98e:	430b      	orrs	r3, r1
 800c990:	f040 809c 	bne.w	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c994:	4b93      	ldr	r3, [pc, #588]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c998:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c99c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9a4:	d054      	beq.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9ac:	f200 808b 	bhi.w	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c9b6:	f000 8083 	beq.w	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c9c0:	f200 8081 	bhi.w	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9ca:	d02f      	beq.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9d2:	d878      	bhi.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d004      	beq.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9e0:	d012      	beq.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c9e2:	e070      	b.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9e4:	4b7f      	ldr	r3, [pc, #508]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9f0:	d107      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fd5e 	bl	800d4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca00:	e293      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca06:	e290      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca08:	4b76      	ldr	r3, [pc, #472]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca14:	d107      	bne.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca16:	f107 0318 	add.w	r3, r7, #24
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 faa4 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca24:	e281      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca2a:	e27e      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca2c:	4b6d      	ldr	r3, [pc, #436]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca38:	d107      	bne.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca3a:	f107 030c 	add.w	r3, r7, #12
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 fbe6 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca48:	e26f      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca4e:	e26c      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca50:	4b64      	ldr	r3, [pc, #400]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca58:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca5a:	4b62      	ldr	r3, [pc, #392]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f003 0304 	and.w	r3, r3, #4
 800ca62:	2b04      	cmp	r3, #4
 800ca64:	d10c      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ca66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d109      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca6c:	4b5d      	ldr	r3, [pc, #372]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	08db      	lsrs	r3, r3, #3
 800ca72:	f003 0303 	and.w	r3, r3, #3
 800ca76:	4a5c      	ldr	r2, [pc, #368]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca78:	fa22 f303 	lsr.w	r3, r2, r3
 800ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca7e:	e01e      	b.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca80:	4b58      	ldr	r3, [pc, #352]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca8c:	d106      	bne.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ca8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca94:	d102      	bne.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca96:	4b55      	ldr	r3, [pc, #340]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca9a:	e010      	b.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca9c:	4b51      	ldr	r3, [pc, #324]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caa8:	d106      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800caaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab0:	d102      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cab2:	4b4f      	ldr	r3, [pc, #316]	; (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab6:	e002      	b.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cabc:	e235      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cabe:	e234      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cac0:	4b4c      	ldr	r3, [pc, #304]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac4:	e231      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caca:	e22e      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cacc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cad4:	430b      	orrs	r3, r1
 800cad6:	f040 808f 	bne.w	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cada:	4b42      	ldr	r3, [pc, #264]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cadc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cade:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cae2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caea:	d06b      	beq.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caf2:	d874      	bhi.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cafa:	d056      	beq.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb02:	d86c      	bhi.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb0a:	d03b      	beq.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb12:	d864      	bhi.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb1a:	d021      	beq.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb22:	d85c      	bhi.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d004      	beq.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb30:	d004      	beq.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cb32:	e054      	b.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cb34:	f7fe fa0a 	bl	800af4c <HAL_RCC_GetPCLK1Freq>
 800cb38:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb3a:	e1f6      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb3c:	4b29      	ldr	r3, [pc, #164]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb48:	d107      	bne.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb4a:	f107 0318 	add.w	r3, r7, #24
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 fa0a 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb58:	e1e7      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb5e:	e1e4      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb60:	4b20      	ldr	r3, [pc, #128]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb6c:	d107      	bne.n	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb6e:	f107 030c 	add.w	r3, r7, #12
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 fb4c 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb7c:	e1d5      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb82:	e1d2      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb84:	4b17      	ldr	r3, [pc, #92]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0304 	and.w	r3, r3, #4
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	d109      	bne.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb90:	4b14      	ldr	r3, [pc, #80]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	08db      	lsrs	r3, r3, #3
 800cb96:	f003 0303 	and.w	r3, r3, #3
 800cb9a:	4a13      	ldr	r2, [pc, #76]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cba2:	e1c2      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba8:	e1bf      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cbaa:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbb6:	d102      	bne.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cbb8:	4b0c      	ldr	r3, [pc, #48]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbbc:	e1b5      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc2:	e1b2      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cbc4:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd0:	d102      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cbd2:	4b07      	ldr	r3, [pc, #28]	; (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd6:	e1a8      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbdc:	e1a5      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe2:	e1a2      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cbe4:	58024400 	.word	0x58024400
 800cbe8:	03d09000 	.word	0x03d09000
 800cbec:	003d0900 	.word	0x003d0900
 800cbf0:	017d7840 	.word	0x017d7840
 800cbf4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cbf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbfc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc00:	430b      	orrs	r3, r1
 800cc02:	d173      	bne.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc04:	4b9c      	ldr	r3, [pc, #624]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc0c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc14:	d02f      	beq.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc1c:	d863      	bhi.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d004      	beq.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc2a:	d012      	beq.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cc2c:	e05b      	b.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc2e:	4b92      	ldr	r3, [pc, #584]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc3a:	d107      	bne.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc3c:	f107 0318 	add.w	r3, r7, #24
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 f991 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4a:	e16e      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc50:	e16b      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc52:	4b89      	ldr	r3, [pc, #548]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc5e:	d107      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc60:	f107 030c 	add.w	r3, r7, #12
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 fad3 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6e:	e15c      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc74:	e159      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc76:	4b80      	ldr	r3, [pc, #512]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc80:	4b7d      	ldr	r3, [pc, #500]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	2b04      	cmp	r3, #4
 800cc8a:	d10c      	bne.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d109      	bne.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc92:	4b79      	ldr	r3, [pc, #484]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	08db      	lsrs	r3, r3, #3
 800cc98:	f003 0303 	and.w	r3, r3, #3
 800cc9c:	4a77      	ldr	r2, [pc, #476]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc9e:	fa22 f303 	lsr.w	r3, r2, r3
 800cca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca4:	e01e      	b.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cca6:	4b74      	ldr	r3, [pc, #464]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccb2:	d106      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ccb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccba:	d102      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ccbc:	4b70      	ldr	r3, [pc, #448]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ccbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccc0:	e010      	b.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccc2:	4b6d      	ldr	r3, [pc, #436]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccce:	d106      	bne.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ccd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccd6:	d102      	bne.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccd8:	4b6a      	ldr	r3, [pc, #424]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccdc:	e002      	b.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cce2:	e122      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cce4:	e121      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccea:	e11e      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ccec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ccf4:	430b      	orrs	r3, r1
 800ccf6:	d133      	bne.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ccf8:	4b5f      	ldr	r3, [pc, #380]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd00:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d004      	beq.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd0e:	d012      	beq.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cd10:	e023      	b.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd12:	4b59      	ldr	r3, [pc, #356]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd1e:	d107      	bne.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 fbc7 	bl	800d4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd2e:	e0fc      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd34:	e0f9      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd36:	4b50      	ldr	r3, [pc, #320]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd42:	d107      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd44:	f107 0318 	add.w	r3, r7, #24
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 f90d 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd52:	e0ea      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd58:	e0e7      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd5e:	e0e4      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd64:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cd68:	430b      	orrs	r3, r1
 800cd6a:	f040 808d 	bne.w	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cd6e:	4b42      	ldr	r3, [pc, #264]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd72:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cd76:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd7e:	d06b      	beq.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd86:	d874      	bhi.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd8e:	d056      	beq.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd96:	d86c      	bhi.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd9e:	d03b      	beq.n	800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cda6:	d864      	bhi.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdae:	d021      	beq.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdb6:	d85c      	bhi.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d004      	beq.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdc4:	d004      	beq.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cdc6:	e054      	b.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cdc8:	f000 f8b8 	bl	800cf3c <HAL_RCCEx_GetD3PCLK1Freq>
 800cdcc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cdce:	e0ac      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdd0:	4b29      	ldr	r3, [pc, #164]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cddc:	d107      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdde:	f107 0318 	add.w	r3, r7, #24
 800cde2:	4618      	mov	r0, r3
 800cde4:	f000 f8c0 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdec:	e09d      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf2:	e09a      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdf4:	4b20      	ldr	r3, [pc, #128]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce00:	d107      	bne.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce02:	f107 030c 	add.w	r3, r7, #12
 800ce06:	4618      	mov	r0, r3
 800ce08:	f000 fa02 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce10:	e08b      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce16:	e088      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce18:	4b17      	ldr	r3, [pc, #92]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b04      	cmp	r3, #4
 800ce22:	d109      	bne.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce24:	4b14      	ldr	r3, [pc, #80]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	08db      	lsrs	r3, r3, #3
 800ce2a:	f003 0303 	and.w	r3, r3, #3
 800ce2e:	4a13      	ldr	r2, [pc, #76]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ce30:	fa22 f303 	lsr.w	r3, r2, r3
 800ce34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce36:	e078      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce3c:	e075      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ce3e:	4b0e      	ldr	r3, [pc, #56]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce4a:	d102      	bne.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ce4c:	4b0c      	ldr	r3, [pc, #48]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce50:	e06b      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce56:	e068      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce58:	4b07      	ldr	r3, [pc, #28]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce64:	d102      	bne.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ce66:	4b07      	ldr	r3, [pc, #28]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ce68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce6a:	e05e      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce70:	e05b      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce76:	e058      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce78:	58024400 	.word	0x58024400
 800ce7c:	03d09000 	.word	0x03d09000
 800ce80:	003d0900 	.word	0x003d0900
 800ce84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ce88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce8c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ce90:	430b      	orrs	r3, r1
 800ce92:	d148      	bne.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ce94:	4b27      	ldr	r3, [pc, #156]	; (800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea4:	d02a      	beq.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceac:	d838      	bhi.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ceae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d004      	beq.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceba:	d00d      	beq.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cebc:	e030      	b.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cebe:	4b1d      	ldr	r3, [pc, #116]	; (800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceca:	d102      	bne.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cecc:	4b1a      	ldr	r3, [pc, #104]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced0:	e02b      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced6:	e028      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ced8:	4b16      	ldr	r3, [pc, #88]	; (800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cee4:	d107      	bne.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 fae4 	bl	800d4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cef4:	e019      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cefa:	e016      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cefc:	4b0d      	ldr	r3, [pc, #52]	; (800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf08:	d107      	bne.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf0a:	f107 0318 	add.w	r3, r7, #24
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 f82a 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf18:	e007      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf1e:	e004      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf24:	e001      	b.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cf2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3740      	adds	r7, #64	; 0x40
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	58024400 	.word	0x58024400
 800cf38:	017d7840 	.word	0x017d7840

0800cf3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cf40:	f7fd ffd4 	bl	800aeec <HAL_RCC_GetHCLKFreq>
 800cf44:	4602      	mov	r2, r0
 800cf46:	4b06      	ldr	r3, [pc, #24]	; (800cf60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cf48:	6a1b      	ldr	r3, [r3, #32]
 800cf4a:	091b      	lsrs	r3, r3, #4
 800cf4c:	f003 0307 	and.w	r3, r3, #7
 800cf50:	4904      	ldr	r1, [pc, #16]	; (800cf64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cf52:	5ccb      	ldrb	r3, [r1, r3]
 800cf54:	f003 031f 	and.w	r3, r3, #31
 800cf58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	58024400 	.word	0x58024400
 800cf64:	08017910 	.word	0x08017910

0800cf68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b089      	sub	sp, #36	; 0x24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf70:	4ba1      	ldr	r3, [pc, #644]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf74:	f003 0303 	and.w	r3, r3, #3
 800cf78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cf7a:	4b9f      	ldr	r3, [pc, #636]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7e:	0b1b      	lsrs	r3, r3, #12
 800cf80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf86:	4b9c      	ldr	r3, [pc, #624]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8a:	091b      	lsrs	r3, r3, #4
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf92:	4b99      	ldr	r3, [pc, #612]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf96:	08db      	lsrs	r3, r3, #3
 800cf98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	fb02 f303 	mul.w	r3, r2, r3
 800cfa2:	ee07 3a90 	vmov	s15, r3
 800cfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 8111 	beq.w	800d1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	f000 8083 	beq.w	800d0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	f200 80a1 	bhi.w	800d108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d003      	beq.n	800cfd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d056      	beq.n	800d080 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cfd2:	e099      	b.n	800d108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfd4:	4b88      	ldr	r3, [pc, #544]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 0320 	and.w	r3, r3, #32
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d02d      	beq.n	800d03c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfe0:	4b85      	ldr	r3, [pc, #532]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	08db      	lsrs	r3, r3, #3
 800cfe6:	f003 0303 	and.w	r3, r3, #3
 800cfea:	4a84      	ldr	r2, [pc, #528]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cfec:	fa22 f303 	lsr.w	r3, r2, r3
 800cff0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	ee07 3a90 	vmov	s15, r3
 800cff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	ee07 3a90 	vmov	s15, r3
 800d002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d00a:	4b7b      	ldr	r3, [pc, #492]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d012:	ee07 3a90 	vmov	s15, r3
 800d016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d01a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d01e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d03a:	e087      	b.n	800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d046:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d204 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d04e:	4b6a      	ldr	r3, [pc, #424]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d056:	ee07 3a90 	vmov	s15, r3
 800d05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d05e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d062:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d06e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d07a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d07e:	e065      	b.n	800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	ee07 3a90 	vmov	s15, r3
 800d086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d08a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d092:	4b59      	ldr	r3, [pc, #356]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09a:	ee07 3a90 	vmov	s15, r3
 800d09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0c2:	e043      	b.n	800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	ee07 3a90 	vmov	s15, r3
 800d0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d6:	4b48      	ldr	r3, [pc, #288]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0de:	ee07 3a90 	vmov	s15, r3
 800d0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d106:	e021      	b.n	800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	ee07 3a90 	vmov	s15, r3
 800d10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d112:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d11a:	4b37      	ldr	r3, [pc, #220]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d122:	ee07 3a90 	vmov	s15, r3
 800d126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d12e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d14a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d14c:	4b2a      	ldr	r3, [pc, #168]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d150:	0a5b      	lsrs	r3, r3, #9
 800d152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d156:	ee07 3a90 	vmov	s15, r3
 800d15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d166:	edd7 6a07 	vldr	s13, [r7, #28]
 800d16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d172:	ee17 2a90 	vmov	r2, s15
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d17a:	4b1f      	ldr	r3, [pc, #124]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d17e:	0c1b      	lsrs	r3, r3, #16
 800d180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d184:	ee07 3a90 	vmov	s15, r3
 800d188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d190:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d194:	edd7 6a07 	vldr	s13, [r7, #28]
 800d198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d19c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1a0:	ee17 2a90 	vmov	r2, s15
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d1a8:	4b13      	ldr	r3, [pc, #76]	; (800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ac:	0e1b      	lsrs	r3, r3, #24
 800d1ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1b2:	ee07 3a90 	vmov	s15, r3
 800d1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1ce:	ee17 2a90 	vmov	r2, s15
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d1d6:	e008      	b.n	800d1ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	609a      	str	r2, [r3, #8]
}
 800d1ea:	bf00      	nop
 800d1ec:	3724      	adds	r7, #36	; 0x24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	58024400 	.word	0x58024400
 800d1fc:	03d09000 	.word	0x03d09000
 800d200:	46000000 	.word	0x46000000
 800d204:	4c742400 	.word	0x4c742400
 800d208:	4a742400 	.word	0x4a742400
 800d20c:	4bbebc20 	.word	0x4bbebc20

0800d210 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d210:	b480      	push	{r7}
 800d212:	b089      	sub	sp, #36	; 0x24
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d218:	4ba1      	ldr	r3, [pc, #644]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21c:	f003 0303 	and.w	r3, r3, #3
 800d220:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d222:	4b9f      	ldr	r3, [pc, #636]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d226:	0d1b      	lsrs	r3, r3, #20
 800d228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d22c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d22e:	4b9c      	ldr	r3, [pc, #624]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d232:	0a1b      	lsrs	r3, r3, #8
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d23a:	4b99      	ldr	r3, [pc, #612]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d23e:	08db      	lsrs	r3, r3, #3
 800d240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	fb02 f303 	mul.w	r3, r2, r3
 800d24a:	ee07 3a90 	vmov	s15, r3
 800d24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d252:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 8111 	beq.w	800d480 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	2b02      	cmp	r3, #2
 800d262:	f000 8083 	beq.w	800d36c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	f200 80a1 	bhi.w	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d003      	beq.n	800d27c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d056      	beq.n	800d328 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d27a:	e099      	b.n	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d27c:	4b88      	ldr	r3, [pc, #544]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f003 0320 	and.w	r3, r3, #32
 800d284:	2b00      	cmp	r3, #0
 800d286:	d02d      	beq.n	800d2e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d288:	4b85      	ldr	r3, [pc, #532]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	08db      	lsrs	r3, r3, #3
 800d28e:	f003 0303 	and.w	r3, r3, #3
 800d292:	4a84      	ldr	r2, [pc, #528]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d294:	fa22 f303 	lsr.w	r3, r2, r3
 800d298:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	ee07 3a90 	vmov	s15, r3
 800d2a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	ee07 3a90 	vmov	s15, r3
 800d2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2b2:	4b7b      	ldr	r3, [pc, #492]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ba:	ee07 3a90 	vmov	s15, r3
 800d2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d2e2:	e087      	b.n	800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	ee07 3a90 	vmov	s15, r3
 800d2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d4ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d2f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2f6:	4b6a      	ldr	r3, [pc, #424]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2fe:	ee07 3a90 	vmov	s15, r3
 800d302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d306:	ed97 6a03 	vldr	s12, [r7, #12]
 800d30a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d30e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d31a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d326:	e065      	b.n	800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	ee07 3a90 	vmov	s15, r3
 800d32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d332:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d33a:	4b59      	ldr	r3, [pc, #356]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d342:	ee07 3a90 	vmov	s15, r3
 800d346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d34a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d34e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d35a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d35e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d362:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d36a:	e043      	b.n	800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d376:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d37e:	4b48      	ldr	r3, [pc, #288]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d386:	ee07 3a90 	vmov	s15, r3
 800d38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d38e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d392:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d39e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3ae:	e021      	b.n	800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3c2:	4b37      	ldr	r3, [pc, #220]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ca:	ee07 3a90 	vmov	s15, r3
 800d3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d3f4:	4b2a      	ldr	r3, [pc, #168]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f8:	0a5b      	lsrs	r3, r3, #9
 800d3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3fe:	ee07 3a90 	vmov	s15, r3
 800d402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d40a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d40e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d41a:	ee17 2a90 	vmov	r2, s15
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d422:	4b1f      	ldr	r3, [pc, #124]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d426:	0c1b      	lsrs	r3, r3, #16
 800d428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d42c:	ee07 3a90 	vmov	s15, r3
 800d430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d43c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d448:	ee17 2a90 	vmov	r2, s15
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d450:	4b13      	ldr	r3, [pc, #76]	; (800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d454:	0e1b      	lsrs	r3, r3, #24
 800d456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d46a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d46e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d476:	ee17 2a90 	vmov	r2, s15
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d47e:	e008      	b.n	800d492 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	609a      	str	r2, [r3, #8]
}
 800d492:	bf00      	nop
 800d494:	3724      	adds	r7, #36	; 0x24
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	58024400 	.word	0x58024400
 800d4a4:	03d09000 	.word	0x03d09000
 800d4a8:	46000000 	.word	0x46000000
 800d4ac:	4c742400 	.word	0x4c742400
 800d4b0:	4a742400 	.word	0x4a742400
 800d4b4:	4bbebc20 	.word	0x4bbebc20

0800d4b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b089      	sub	sp, #36	; 0x24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d4c0:	4ba0      	ldr	r3, [pc, #640]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c4:	f003 0303 	and.w	r3, r3, #3
 800d4c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d4ca:	4b9e      	ldr	r3, [pc, #632]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ce:	091b      	lsrs	r3, r3, #4
 800d4d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d4d6:	4b9b      	ldr	r3, [pc, #620]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4da:	f003 0301 	and.w	r3, r3, #1
 800d4de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d4e0:	4b98      	ldr	r3, [pc, #608]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e4:	08db      	lsrs	r3, r3, #3
 800d4e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4ea:	693a      	ldr	r2, [r7, #16]
 800d4ec:	fb02 f303 	mul.w	r3, r2, r3
 800d4f0:	ee07 3a90 	vmov	s15, r3
 800d4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f000 8111 	beq.w	800d726 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	2b02      	cmp	r3, #2
 800d508:	f000 8083 	beq.w	800d612 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	2b02      	cmp	r3, #2
 800d510:	f200 80a1 	bhi.w	800d656 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d003      	beq.n	800d522 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d056      	beq.n	800d5ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d520:	e099      	b.n	800d656 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d522:	4b88      	ldr	r3, [pc, #544]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f003 0320 	and.w	r3, r3, #32
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d02d      	beq.n	800d58a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d52e:	4b85      	ldr	r3, [pc, #532]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	08db      	lsrs	r3, r3, #3
 800d534:	f003 0303 	and.w	r3, r3, #3
 800d538:	4a83      	ldr	r2, [pc, #524]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d53a:	fa22 f303 	lsr.w	r3, r2, r3
 800d53e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	ee07 3a90 	vmov	s15, r3
 800d546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	ee07 3a90 	vmov	s15, r3
 800d550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d558:	4b7a      	ldr	r3, [pc, #488]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d560:	ee07 3a90 	vmov	s15, r3
 800d564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d568:	ed97 6a03 	vldr	s12, [r7, #12]
 800d56c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d57c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d580:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d584:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d588:	e087      	b.n	800d69a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	ee07 3a90 	vmov	s15, r3
 800d590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d594:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d750 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d59c:	4b69      	ldr	r3, [pc, #420]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5a4:	ee07 3a90 	vmov	s15, r3
 800d5a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5cc:	e065      	b.n	800d69a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	ee07 3a90 	vmov	s15, r3
 800d5d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d754 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d5dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5e0:	4b58      	ldr	r3, [pc, #352]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e8:	ee07 3a90 	vmov	s15, r3
 800d5ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d60c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d610:	e043      	b.n	800d69a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	ee07 3a90 	vmov	s15, r3
 800d618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d61c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d758 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d624:	4b47      	ldr	r3, [pc, #284]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d62c:	ee07 3a90 	vmov	s15, r3
 800d630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d634:	ed97 6a03 	vldr	s12, [r7, #12]
 800d638:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d63c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d64c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d654:	e021      	b.n	800d69a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	ee07 3a90 	vmov	s15, r3
 800d65c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d660:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d750 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d668:	4b36      	ldr	r3, [pc, #216]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d670:	ee07 3a90 	vmov	s15, r3
 800d674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d678:	ed97 6a03 	vldr	s12, [r7, #12]
 800d67c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d68c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d690:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d698:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d69a:	4b2a      	ldr	r3, [pc, #168]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69e:	0a5b      	lsrs	r3, r3, #9
 800d6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6a4:	ee07 3a90 	vmov	s15, r3
 800d6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6c0:	ee17 2a90 	vmov	r2, s15
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d6c8:	4b1e      	ldr	r3, [pc, #120]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6cc:	0c1b      	lsrs	r3, r3, #16
 800d6ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6d2:	ee07 3a90 	vmov	s15, r3
 800d6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6ee:	ee17 2a90 	vmov	r2, s15
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d6f6:	4b13      	ldr	r3, [pc, #76]	; (800d744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6fa:	0e1b      	lsrs	r3, r3, #24
 800d6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d700:	ee07 3a90 	vmov	s15, r3
 800d704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d70c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d710:	edd7 6a07 	vldr	s13, [r7, #28]
 800d714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d71c:	ee17 2a90 	vmov	r2, s15
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d724:	e008      	b.n	800d738 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	609a      	str	r2, [r3, #8]
}
 800d738:	bf00      	nop
 800d73a:	3724      	adds	r7, #36	; 0x24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr
 800d744:	58024400 	.word	0x58024400
 800d748:	03d09000 	.word	0x03d09000
 800d74c:	46000000 	.word	0x46000000
 800d750:	4c742400 	.word	0x4c742400
 800d754:	4a742400 	.word	0x4a742400
 800d758:	4bbebc20 	.word	0x4bbebc20

0800d75c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d766:	2300      	movs	r3, #0
 800d768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d76a:	4b53      	ldr	r3, [pc, #332]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76e:	f003 0303 	and.w	r3, r3, #3
 800d772:	2b03      	cmp	r3, #3
 800d774:	d101      	bne.n	800d77a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	e099      	b.n	800d8ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d77a:	4b4f      	ldr	r3, [pc, #316]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a4e      	ldr	r2, [pc, #312]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d780:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d786:	f7f6 fc53 	bl	8004030 <HAL_GetTick>
 800d78a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d78c:	e008      	b.n	800d7a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d78e:	f7f6 fc4f 	bl	8004030 <HAL_GetTick>
 800d792:	4602      	mov	r2, r0
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d901      	bls.n	800d7a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d79c:	2303      	movs	r3, #3
 800d79e:	e086      	b.n	800d8ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d7a0:	4b45      	ldr	r3, [pc, #276]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d1f0      	bne.n	800d78e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d7ac:	4b42      	ldr	r3, [pc, #264]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	031b      	lsls	r3, r3, #12
 800d7ba:	493f      	ldr	r1, [pc, #252]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	628b      	str	r3, [r1, #40]	; 0x28
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	025b      	lsls	r3, r3, #9
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	431a      	orrs	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	041b      	lsls	r3, r3, #16
 800d7de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	061b      	lsls	r3, r3, #24
 800d7ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7f0:	4931      	ldr	r1, [pc, #196]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d7f6:	4b30      	ldr	r3, [pc, #192]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	492d      	ldr	r1, [pc, #180]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d804:	4313      	orrs	r3, r2
 800d806:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d808:	4b2b      	ldr	r3, [pc, #172]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	f023 0220 	bic.w	r2, r3, #32
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	4928      	ldr	r1, [pc, #160]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d816:	4313      	orrs	r3, r2
 800d818:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d81a:	4b27      	ldr	r3, [pc, #156]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81e:	4a26      	ldr	r2, [pc, #152]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d820:	f023 0310 	bic.w	r3, r3, #16
 800d824:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d826:	4b24      	ldr	r3, [pc, #144]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d82a:	4b24      	ldr	r3, [pc, #144]	; (800d8bc <RCCEx_PLL2_Config+0x160>)
 800d82c:	4013      	ands	r3, r2
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	69d2      	ldr	r2, [r2, #28]
 800d832:	00d2      	lsls	r2, r2, #3
 800d834:	4920      	ldr	r1, [pc, #128]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d836:	4313      	orrs	r3, r2
 800d838:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d83a:	4b1f      	ldr	r3, [pc, #124]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83e:	4a1e      	ldr	r2, [pc, #120]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d840:	f043 0310 	orr.w	r3, r3, #16
 800d844:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d106      	bne.n	800d85a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d84c:	4b1a      	ldr	r3, [pc, #104]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d850:	4a19      	ldr	r2, [pc, #100]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d856:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d858:	e00f      	b.n	800d87a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d106      	bne.n	800d86e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d860:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d864:	4a14      	ldr	r2, [pc, #80]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d86a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d86c:	e005      	b.n	800d87a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d86e:	4b12      	ldr	r3, [pc, #72]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d872:	4a11      	ldr	r2, [pc, #68]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d878:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d87a:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a0e      	ldr	r2, [pc, #56]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d880:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d886:	f7f6 fbd3 	bl	8004030 <HAL_GetTick>
 800d88a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d88c:	e008      	b.n	800d8a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d88e:	f7f6 fbcf 	bl	8004030 <HAL_GetTick>
 800d892:	4602      	mov	r2, r0
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	1ad3      	subs	r3, r2, r3
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d901      	bls.n	800d8a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d89c:	2303      	movs	r3, #3
 800d89e:	e006      	b.n	800d8ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d8a0:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <RCCEx_PLL2_Config+0x15c>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d0f0      	beq.n	800d88e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	58024400 	.word	0x58024400
 800d8bc:	ffff0007 	.word	0xffff0007

0800d8c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d8ce:	4b53      	ldr	r3, [pc, #332]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d2:	f003 0303 	and.w	r3, r3, #3
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d101      	bne.n	800d8de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e099      	b.n	800da12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d8de:	4b4f      	ldr	r3, [pc, #316]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a4e      	ldr	r2, [pc, #312]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d8e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8ea:	f7f6 fba1 	bl	8004030 <HAL_GetTick>
 800d8ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8f0:	e008      	b.n	800d904 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d8f2:	f7f6 fb9d 	bl	8004030 <HAL_GetTick>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d901      	bls.n	800d904 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d900:	2303      	movs	r3, #3
 800d902:	e086      	b.n	800da12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d904:	4b45      	ldr	r3, [pc, #276]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1f0      	bne.n	800d8f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d910:	4b42      	ldr	r3, [pc, #264]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d914:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	051b      	lsls	r3, r3, #20
 800d91e:	493f      	ldr	r1, [pc, #252]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d920:	4313      	orrs	r3, r2
 800d922:	628b      	str	r3, [r1, #40]	; 0x28
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	3b01      	subs	r3, #1
 800d92a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	3b01      	subs	r3, #1
 800d934:	025b      	lsls	r3, r3, #9
 800d936:	b29b      	uxth	r3, r3
 800d938:	431a      	orrs	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	3b01      	subs	r3, #1
 800d940:	041b      	lsls	r3, r3, #16
 800d942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d946:	431a      	orrs	r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	3b01      	subs	r3, #1
 800d94e:	061b      	lsls	r3, r3, #24
 800d950:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d954:	4931      	ldr	r1, [pc, #196]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d956:	4313      	orrs	r3, r2
 800d958:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d95a:	4b30      	ldr	r3, [pc, #192]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	492d      	ldr	r1, [pc, #180]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d968:	4313      	orrs	r3, r2
 800d96a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d96c:	4b2b      	ldr	r3, [pc, #172]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	4928      	ldr	r1, [pc, #160]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d97a:	4313      	orrs	r3, r2
 800d97c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d97e:	4b27      	ldr	r3, [pc, #156]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d982:	4a26      	ldr	r2, [pc, #152]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d98a:	4b24      	ldr	r3, [pc, #144]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d98c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d98e:	4b24      	ldr	r3, [pc, #144]	; (800da20 <RCCEx_PLL3_Config+0x160>)
 800d990:	4013      	ands	r3, r2
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	69d2      	ldr	r2, [r2, #28]
 800d996:	00d2      	lsls	r2, r2, #3
 800d998:	4920      	ldr	r1, [pc, #128]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d99a:	4313      	orrs	r3, r2
 800d99c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d99e:	4b1f      	ldr	r3, [pc, #124]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a2:	4a1e      	ldr	r2, [pc, #120]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d106      	bne.n	800d9be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d9b0:	4b1a      	ldr	r3, [pc, #104]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b4:	4a19      	ldr	r2, [pc, #100]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d9ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9bc:	e00f      	b.n	800d9de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d106      	bne.n	800d9d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d9c4:	4b15      	ldr	r3, [pc, #84]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	4a14      	ldr	r2, [pc, #80]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9d0:	e005      	b.n	800d9de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d9d2:	4b12      	ldr	r3, [pc, #72]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d6:	4a11      	ldr	r2, [pc, #68]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d9de:	4b0f      	ldr	r3, [pc, #60]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a0e      	ldr	r2, [pc, #56]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800d9e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9ea:	f7f6 fb21 	bl	8004030 <HAL_GetTick>
 800d9ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9f0:	e008      	b.n	800da04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9f2:	f7f6 fb1d 	bl	8004030 <HAL_GetTick>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d901      	bls.n	800da04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da00:	2303      	movs	r3, #3
 800da02:	e006      	b.n	800da12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da04:	4b05      	ldr	r3, [pc, #20]	; (800da1c <RCCEx_PLL3_Config+0x15c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d0f0      	beq.n	800d9f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da10:	7bfb      	ldrb	r3, [r7, #15]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	58024400 	.word	0x58024400
 800da20:	ffff0007 	.word	0xffff0007

0800da24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800da2c:	2301      	movs	r3, #1
 800da2e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d071      	beq.n	800db1a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d106      	bne.n	800da50 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7f5 fd88 	bl	8003560 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2202      	movs	r2, #2
 800da54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	f003 0310 	and.w	r3, r3, #16
 800da62:	2b10      	cmp	r3, #16
 800da64:	d050      	beq.n	800db08 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	22ca      	movs	r2, #202	; 0xca
 800da6c:	625a      	str	r2, [r3, #36]	; 0x24
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2253      	movs	r2, #83	; 0x53
 800da74:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fa4a 	bl	800df10 <RTC_EnterInitMode>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800da80:	7bfb      	ldrb	r3, [r7, #15]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d124      	bne.n	800dad0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6899      	ldr	r1, [r3, #8]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	4b24      	ldr	r3, [pc, #144]	; (800db24 <HAL_RTC_Init+0x100>)
 800da92:	400b      	ands	r3, r1
 800da94:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6899      	ldr	r1, [r3, #8]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	431a      	orrs	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	431a      	orrs	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	430a      	orrs	r2, r1
 800dab2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	0419      	lsls	r1, r3, #16
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	430a      	orrs	r2, r1
 800dac4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fa56 	bl	800df78 <RTC_ExitInitMode>
 800dacc:	4603      	mov	r3, r0
 800dace:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d113      	bne.n	800dafe <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f022 0203 	bic.w	r2, r2, #3
 800dae4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	69da      	ldr	r2, [r3, #28]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	695b      	ldr	r3, [r3, #20]
 800daf4:	431a      	orrs	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	430a      	orrs	r2, r1
 800dafc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	22ff      	movs	r2, #255	; 0xff
 800db04:	625a      	str	r2, [r3, #36]	; 0x24
 800db06:	e001      	b.n	800db0c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800db08:	2300      	movs	r3, #0
 800db0a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d103      	bne.n	800db1a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	ff8fffbf 	.word	0xff8fffbf

0800db28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800db28:	b590      	push	{r4, r7, lr}
 800db2a:	b087      	sub	sp, #28
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d101      	bne.n	800db42 <HAL_RTC_SetTime+0x1a>
 800db3e:	2302      	movs	r3, #2
 800db40:	e089      	b.n	800dc56 <HAL_RTC_SetTime+0x12e>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2201      	movs	r2, #1
 800db46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2202      	movs	r2, #2
 800db4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	22ca      	movs	r2, #202	; 0xca
 800db58:	625a      	str	r2, [r3, #36]	; 0x24
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2253      	movs	r2, #83	; 0x53
 800db60:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f000 f9d4 	bl	800df10 <RTC_EnterInitMode>
 800db68:	4603      	mov	r3, r0
 800db6a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800db6c:	7cfb      	ldrb	r3, [r7, #19]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d161      	bne.n	800dc36 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d126      	bne.n	800dbc6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db82:	2b00      	cmp	r3, #0
 800db84:	d102      	bne.n	800db8c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2200      	movs	r2, #0
 800db8a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	4618      	mov	r0, r3
 800db92:	f000 fa2f 	bl	800dff4 <RTC_ByteToBcd2>
 800db96:	4603      	mov	r3, r0
 800db98:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	785b      	ldrb	r3, [r3, #1]
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 fa28 	bl	800dff4 <RTC_ByteToBcd2>
 800dba4:	4603      	mov	r3, r0
 800dba6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dba8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	789b      	ldrb	r3, [r3, #2]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f000 fa20 	bl	800dff4 <RTC_ByteToBcd2>
 800dbb4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dbb6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	78db      	ldrb	r3, [r3, #3]
 800dbbe:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	e018      	b.n	800dbf8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d102      	bne.n	800dbda <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	785b      	ldrb	r3, [r3, #1]
 800dbe4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbe6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dbe8:	68ba      	ldr	r2, [r7, #8]
 800dbea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dbec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	78db      	ldrb	r3, [r3, #3]
 800dbf2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	6979      	ldr	r1, [r7, #20]
 800dbfe:	4b18      	ldr	r3, [pc, #96]	; (800dc60 <HAL_RTC_SetTime+0x138>)
 800dc00:	400b      	ands	r3, r1
 800dc02:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	689a      	ldr	r2, [r3, #8]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dc12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	6899      	ldr	r1, [r3, #8]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	68da      	ldr	r2, [r3, #12]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	691b      	ldr	r3, [r3, #16]
 800dc22:	431a      	orrs	r2, r3
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	430a      	orrs	r2, r1
 800dc2a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 f9a3 	bl	800df78 <RTC_ExitInitMode>
 800dc32:	4603      	mov	r3, r0
 800dc34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	22ff      	movs	r2, #255	; 0xff
 800dc3c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dc3e:	7cfb      	ldrb	r3, [r7, #19]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d103      	bne.n	800dc4c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dc54:	7cfb      	ldrb	r3, [r7, #19]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	371c      	adds	r7, #28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd90      	pop	{r4, r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	007f7f7f 	.word	0x007f7f7f

0800dc64 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	4b22      	ldr	r3, [pc, #136]	; (800dd18 <HAL_RTC_GetTime+0xb4>)
 800dc90:	4013      	ands	r3, r2
 800dc92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	0c1b      	lsrs	r3, r3, #16
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	0a1b      	lsrs	r3, r3, #8
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	0d9b      	lsrs	r3, r3, #22
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d11a      	bne.n	800dd0e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 f9a9 	bl	800e034 <RTC_Bcd2ToByte>
 800dce2:	4603      	mov	r3, r0
 800dce4:	461a      	mov	r2, r3
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	785b      	ldrb	r3, [r3, #1]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f000 f9a0 	bl	800e034 <RTC_Bcd2ToByte>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	789b      	ldrb	r3, [r3, #2]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 f997 	bl	800e034 <RTC_Bcd2ToByte>
 800dd06:	4603      	mov	r3, r0
 800dd08:	461a      	mov	r2, r3
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	007f7f7f 	.word	0x007f7f7f

0800dd1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dd1c:	b590      	push	{r4, r7, lr}
 800dd1e:	b087      	sub	sp, #28
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d101      	bne.n	800dd36 <HAL_RTC_SetDate+0x1a>
 800dd32:	2302      	movs	r3, #2
 800dd34:	e073      	b.n	800de1e <HAL_RTC_SetDate+0x102>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2202      	movs	r2, #2
 800dd42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10e      	bne.n	800dd6a <HAL_RTC_SetDate+0x4e>
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	785b      	ldrb	r3, [r3, #1]
 800dd50:	f003 0310 	and.w	r3, r3, #16
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d008      	beq.n	800dd6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	785b      	ldrb	r3, [r3, #1]
 800dd5c:	f023 0310 	bic.w	r3, r3, #16
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	330a      	adds	r3, #10
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d11c      	bne.n	800ddaa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	78db      	ldrb	r3, [r3, #3]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f000 f93d 	bl	800dff4 <RTC_ByteToBcd2>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	785b      	ldrb	r3, [r3, #1]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 f936 	bl	800dff4 <RTC_ByteToBcd2>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	789b      	ldrb	r3, [r3, #2]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f000 f92e 	bl	800dff4 <RTC_ByteToBcd2>
 800dd98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dd9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dda4:	4313      	orrs	r3, r2
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	e00e      	b.n	800ddc8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	78db      	ldrb	r3, [r3, #3]
 800ddae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	785b      	ldrb	r3, [r3, #1]
 800ddb4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ddb6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ddbc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	22ca      	movs	r2, #202	; 0xca
 800ddce:	625a      	str	r2, [r3, #36]	; 0x24
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2253      	movs	r2, #83	; 0x53
 800ddd6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f000 f899 	bl	800df10 <RTC_EnterInitMode>
 800ddde:	4603      	mov	r3, r0
 800dde0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dde2:	7cfb      	ldrb	r3, [r7, #19]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	6979      	ldr	r1, [r7, #20]
 800ddee:	4b0e      	ldr	r3, [pc, #56]	; (800de28 <HAL_RTC_SetDate+0x10c>)
 800ddf0:	400b      	ands	r3, r1
 800ddf2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f000 f8bf 	bl	800df78 <RTC_ExitInitMode>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	22ff      	movs	r2, #255	; 0xff
 800de04:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de06:	7cfb      	ldrb	r3, [r7, #19]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d103      	bne.n	800de14 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2201      	movs	r2, #1
 800de10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2200      	movs	r2, #0
 800de18:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800de1c:	7cfb      	ldrb	r3, [r7, #19]


}
 800de1e:	4618      	mov	r0, r3
 800de20:	371c      	adds	r7, #28
 800de22:	46bd      	mov	sp, r7
 800de24:	bd90      	pop	{r4, r7, pc}
 800de26:	bf00      	nop
 800de28:	00ffff3f 	.word	0x00ffff3f

0800de2c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	685a      	ldr	r2, [r3, #4]
 800de3e:	4b21      	ldr	r3, [pc, #132]	; (800dec4 <HAL_RTC_GetDate+0x98>)
 800de40:	4013      	ands	r3, r2
 800de42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	0c1b      	lsrs	r3, r3, #16
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	0a1b      	lsrs	r3, r3, #8
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f003 031f 	and.w	r3, r3, #31
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	b2db      	uxtb	r3, r3
 800de62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de66:	b2da      	uxtb	r2, r3
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	0b5b      	lsrs	r3, r3, #13
 800de70:	b2db      	uxtb	r3, r3
 800de72:	f003 0307 	and.w	r3, r3, #7
 800de76:	b2da      	uxtb	r2, r3
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d11a      	bne.n	800deb8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	78db      	ldrb	r3, [r3, #3]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 f8d4 	bl	800e034 <RTC_Bcd2ToByte>
 800de8c:	4603      	mov	r3, r0
 800de8e:	461a      	mov	r2, r3
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	785b      	ldrb	r3, [r3, #1]
 800de98:	4618      	mov	r0, r3
 800de9a:	f000 f8cb 	bl	800e034 <RTC_Bcd2ToByte>
 800de9e:	4603      	mov	r3, r0
 800dea0:	461a      	mov	r2, r3
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	789b      	ldrb	r3, [r3, #2]
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 f8c2 	bl	800e034 <RTC_Bcd2ToByte>
 800deb0:	4603      	mov	r3, r0
 800deb2:	461a      	mov	r2, r3
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	00ffff3f 	.word	0x00ffff3f

0800dec8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a0d      	ldr	r2, [pc, #52]	; (800df0c <HAL_RTC_WaitForSynchro+0x44>)
 800ded6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800ded8:	f7f6 f8aa 	bl	8004030 <HAL_GetTick>
 800dedc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dede:	e009      	b.n	800def4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dee0:	f7f6 f8a6 	bl	8004030 <HAL_GetTick>
 800dee4:	4602      	mov	r2, r0
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800deee:	d901      	bls.n	800def4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800def0:	2303      	movs	r3, #3
 800def2:	e007      	b.n	800df04 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	f003 0320 	and.w	r3, r3, #32
 800defe:	2b00      	cmp	r3, #0
 800df00:	d0ee      	beq.n	800dee0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800df02:	2300      	movs	r3, #0
}
 800df04:	4618      	mov	r0, r3
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	0003ff5f 	.word	0x0003ff5f

0800df10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df26:	2b00      	cmp	r3, #0
 800df28:	d120      	bne.n	800df6c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df32:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800df34:	f7f6 f87c 	bl	8004030 <HAL_GetTick>
 800df38:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800df3a:	e00d      	b.n	800df58 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800df3c:	f7f6 f878 	bl	8004030 <HAL_GetTick>
 800df40:	4602      	mov	r2, r0
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df4a:	d905      	bls.n	800df58 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800df4c:	2303      	movs	r3, #3
 800df4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2203      	movs	r2, #3
 800df54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df62:	2b00      	cmp	r3, #0
 800df64:	d102      	bne.n	800df6c <RTC_EnterInitMode+0x5c>
 800df66:	7bfb      	ldrb	r3, [r7, #15]
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d1e7      	bne.n	800df3c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
	...

0800df78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df80:	2300      	movs	r3, #0
 800df82:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800df84:	4b1a      	ldr	r3, [pc, #104]	; (800dff0 <RTC_ExitInitMode+0x78>)
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	4a19      	ldr	r2, [pc, #100]	; (800dff0 <RTC_ExitInitMode+0x78>)
 800df8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df8e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800df90:	4b17      	ldr	r3, [pc, #92]	; (800dff0 <RTC_ExitInitMode+0x78>)
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	f003 0320 	and.w	r3, r3, #32
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10c      	bne.n	800dfb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff93 	bl	800dec8 <HAL_RTC_WaitForSynchro>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d01e      	beq.n	800dfe6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2203      	movs	r2, #3
 800dfac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	73fb      	strb	r3, [r7, #15]
 800dfb4:	e017      	b.n	800dfe6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dfb6:	4b0e      	ldr	r3, [pc, #56]	; (800dff0 <RTC_ExitInitMode+0x78>)
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	4a0d      	ldr	r2, [pc, #52]	; (800dff0 <RTC_ExitInitMode+0x78>)
 800dfbc:	f023 0320 	bic.w	r3, r3, #32
 800dfc0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f7ff ff80 	bl	800dec8 <HAL_RTC_WaitForSynchro>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d005      	beq.n	800dfda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2203      	movs	r2, #3
 800dfd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dfda:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <RTC_ExitInitMode+0x78>)
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	4a04      	ldr	r2, [pc, #16]	; (800dff0 <RTC_ExitInitMode+0x78>)
 800dfe0:	f043 0320 	orr.w	r3, r3, #32
 800dfe4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	58004000 	.word	0x58004000

0800dff4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dffe:	2300      	movs	r3, #0
 800e000:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e002:	79fb      	ldrb	r3, [r7, #7]
 800e004:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e006:	e005      	b.n	800e014 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	3301      	adds	r3, #1
 800e00c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e00e:	7afb      	ldrb	r3, [r7, #11]
 800e010:	3b0a      	subs	r3, #10
 800e012:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e014:	7afb      	ldrb	r3, [r7, #11]
 800e016:	2b09      	cmp	r3, #9
 800e018:	d8f6      	bhi.n	800e008 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	b2da      	uxtb	r2, r3
 800e022:	7afb      	ldrb	r3, [r7, #11]
 800e024:	4313      	orrs	r3, r2
 800e026:	b2db      	uxtb	r3, r3
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	4603      	mov	r3, r0
 800e03c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	091b      	lsrs	r3, r3, #4
 800e042:	b2db      	uxtb	r3, r3
 800e044:	461a      	mov	r2, r3
 800e046:	0092      	lsls	r2, r2, #2
 800e048:	4413      	add	r3, r2
 800e04a:	005b      	lsls	r3, r3, #1
 800e04c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e04e:	79fb      	ldrb	r3, [r7, #7]
 800e050:	f003 030f 	and.w	r3, r3, #15
 800e054:	b2da      	uxtb	r2, r3
 800e056:	7bfb      	ldrb	r3, [r7, #15]
 800e058:	4413      	add	r3, r2
 800e05a:	b2db      	uxtb	r3, r3
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d101      	bne.n	800e07a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e10f      	b.n	800e29a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a87      	ldr	r2, [pc, #540]	; (800e2a4 <HAL_SPI_Init+0x23c>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d00f      	beq.n	800e0aa <HAL_SPI_Init+0x42>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a86      	ldr	r2, [pc, #536]	; (800e2a8 <HAL_SPI_Init+0x240>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d00a      	beq.n	800e0aa <HAL_SPI_Init+0x42>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a84      	ldr	r2, [pc, #528]	; (800e2ac <HAL_SPI_Init+0x244>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d005      	beq.n	800e0aa <HAL_SPI_Init+0x42>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	2b0f      	cmp	r3, #15
 800e0a4:	d901      	bls.n	800e0aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e0f7      	b.n	800e29a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fc12 	bl	800e8d4 <SPI_GetPacketSize>
 800e0b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a7b      	ldr	r2, [pc, #492]	; (800e2a4 <HAL_SPI_Init+0x23c>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d00c      	beq.n	800e0d6 <HAL_SPI_Init+0x6e>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a79      	ldr	r2, [pc, #484]	; (800e2a8 <HAL_SPI_Init+0x240>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d007      	beq.n	800e0d6 <HAL_SPI_Init+0x6e>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a78      	ldr	r2, [pc, #480]	; (800e2ac <HAL_SPI_Init+0x244>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d002      	beq.n	800e0d6 <HAL_SPI_Init+0x6e>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b08      	cmp	r3, #8
 800e0d4:	d811      	bhi.n	800e0fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e0da:	4a72      	ldr	r2, [pc, #456]	; (800e2a4 <HAL_SPI_Init+0x23c>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d009      	beq.n	800e0f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a70      	ldr	r2, [pc, #448]	; (800e2a8 <HAL_SPI_Init+0x240>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d004      	beq.n	800e0f4 <HAL_SPI_Init+0x8c>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a6f      	ldr	r2, [pc, #444]	; (800e2ac <HAL_SPI_Init+0x244>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d104      	bne.n	800e0fe <HAL_SPI_Init+0x96>
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b10      	cmp	r3, #16
 800e0f8:	d901      	bls.n	800e0fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e0cd      	b.n	800e29a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	d106      	bne.n	800e118 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7f5 fa58 	bl	80035c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2202      	movs	r2, #2
 800e11c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f022 0201 	bic.w	r2, r2, #1
 800e12e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e13a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e144:	d119      	bne.n	800e17a <HAL_SPI_Init+0x112>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e14e:	d103      	bne.n	800e158 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e154:	2b00      	cmp	r3, #0
 800e156:	d008      	beq.n	800e16a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10c      	bne.n	800e17a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e168:	d107      	bne.n	800e17a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e178:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00f      	beq.n	800e1a6 <HAL_SPI_Init+0x13e>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	2b06      	cmp	r3, #6
 800e18c:	d90b      	bls.n	800e1a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	430a      	orrs	r2, r1
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	e007      	b.n	800e1b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e1b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	69da      	ldr	r2, [r3, #28]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1be:	431a      	orrs	r2, r3
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1c8:	ea42 0103 	orr.w	r1, r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	68da      	ldr	r2, [r3, #12]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	430a      	orrs	r2, r1
 800e1d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e0:	431a      	orrs	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e6:	431a      	orrs	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	699b      	ldr	r3, [r3, #24]
 800e1ec:	431a      	orrs	r2, r3
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	431a      	orrs	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	431a      	orrs	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	431a      	orrs	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e20a:	431a      	orrs	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	431a      	orrs	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e216:	ea42 0103 	orr.w	r1, r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	430a      	orrs	r2, r1
 800e224:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d113      	bne.n	800e256 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	689b      	ldr	r3, [r3, #8]
 800e234:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e240:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e254:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f022 0201 	bic.w	r2, r2, #1
 800e264:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00a      	beq.n	800e288 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	430a      	orrs	r2, r1
 800e286:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	40013000 	.word	0x40013000
 800e2a8:	40003800 	.word	0x40003800
 800e2ac:	40003c00 	.word	0x40003c00

0800e2b0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	603b      	str	r3, [r7, #0]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c4:	095b      	lsrs	r3, r3, #5
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3330      	adds	r3, #48	; 0x30
 800e2d2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2d4:	f7f5 feac 	bl	8004030 <HAL_GetTick>
 800e2d8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d001      	beq.n	800e2ea <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e2e6:	2302      	movs	r3, #2
 800e2e8:	e250      	b.n	800e78c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d002      	beq.n	800e2f6 <HAL_SPI_Receive+0x46>
 800e2f0:	88fb      	ldrh	r3, [r7, #6]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d101      	bne.n	800e2fa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e248      	b.n	800e78c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e300:	2b01      	cmp	r3, #1
 800e302:	d101      	bne.n	800e308 <HAL_SPI_Receive+0x58>
 800e304:	2302      	movs	r3, #2
 800e306:	e241      	b.n	800e78c <HAL_SPI_Receive+0x4dc>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2204      	movs	r2, #4
 800e314:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	88fa      	ldrh	r2, [r7, #6]
 800e32a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	88fa      	ldrh	r2, [r7, #6]
 800e332:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2200      	movs	r2, #0
 800e350:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e360:	d108      	bne.n	800e374 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	e009      	b.n	800e388 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e386:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	4b95      	ldr	r3, [pc, #596]	; (800e5e4 <HAL_SPI_Receive+0x334>)
 800e390:	4013      	ands	r3, r2
 800e392:	88f9      	ldrh	r1, [r7, #6]
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	6812      	ldr	r2, [r2, #0]
 800e398:	430b      	orrs	r3, r1
 800e39a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f042 0201 	orr.w	r2, r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e3b4:	d107      	bne.n	800e3c6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	2b0f      	cmp	r3, #15
 800e3cc:	d96c      	bls.n	800e4a8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e3ce:	e064      	b.n	800e49a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	695b      	ldr	r3, [r3, #20]
 800e3d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	695b      	ldr	r3, [r3, #20]
 800e3de:	f003 0301 	and.w	r3, r3, #1
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d114      	bne.n	800e410 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e3f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3f6:	1d1a      	adds	r2, r3, #4
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e402:	b29b      	uxth	r3, r3
 800e404:	3b01      	subs	r3, #1
 800e406:	b29a      	uxth	r2, r3
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e40e:	e044      	b.n	800e49a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e416:	b29b      	uxth	r3, r3
 800e418:	8bfa      	ldrh	r2, [r7, #30]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d919      	bls.n	800e452 <HAL_SPI_Receive+0x1a2>
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d014      	beq.n	800e452 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e432:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e438:	1d1a      	adds	r2, r3, #4
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e444:	b29b      	uxth	r3, r3
 800e446:	3b01      	subs	r3, #1
 800e448:	b29a      	uxth	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e450:	e023      	b.n	800e49a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e452:	f7f5 fded 	bl	8004030 <HAL_GetTick>
 800e456:	4602      	mov	r2, r0
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d803      	bhi.n	800e46a <HAL_SPI_Receive+0x1ba>
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e468:	d102      	bne.n	800e470 <HAL_SPI_Receive+0x1c0>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d114      	bne.n	800e49a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f000 f98f 	bl	800e794 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e47c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2201      	movs	r2, #1
 800e48a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e178      	b.n	800e78c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d194      	bne.n	800e3d0 <HAL_SPI_Receive+0x120>
 800e4a6:	e15e      	b.n	800e766 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	2b07      	cmp	r3, #7
 800e4ae:	f240 8153 	bls.w	800e758 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e4b2:	e08f      	b.n	800e5d4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	695b      	ldr	r3, [r3, #20]
 800e4ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	f003 0301 	and.w	r3, r3, #1
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d114      	bne.n	800e4f4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ce:	69ba      	ldr	r2, [r7, #24]
 800e4d0:	8812      	ldrh	r2, [r2, #0]
 800e4d2:	b292      	uxth	r2, r2
 800e4d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4da:	1c9a      	adds	r2, r3, #2
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4f2:	e06f      	b.n	800e5d4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	8bfa      	ldrh	r2, [r7, #30]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d924      	bls.n	800e54c <HAL_SPI_Receive+0x29c>
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d01f      	beq.n	800e54c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e510:	69ba      	ldr	r2, [r7, #24]
 800e512:	8812      	ldrh	r2, [r2, #0]
 800e514:	b292      	uxth	r2, r2
 800e516:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e51c:	1c9a      	adds	r2, r3, #2
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e526:	69ba      	ldr	r2, [r7, #24]
 800e528:	8812      	ldrh	r2, [r2, #0]
 800e52a:	b292      	uxth	r2, r2
 800e52c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e532:	1c9a      	adds	r2, r3, #2
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e53e:	b29b      	uxth	r3, r3
 800e540:	3b02      	subs	r3, #2
 800e542:	b29a      	uxth	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e54a:	e043      	b.n	800e5d4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e552:	b29b      	uxth	r3, r3
 800e554:	2b01      	cmp	r3, #1
 800e556:	d119      	bne.n	800e58c <HAL_SPI_Receive+0x2dc>
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d014      	beq.n	800e58c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e566:	69ba      	ldr	r2, [r7, #24]
 800e568:	8812      	ldrh	r2, [r2, #0]
 800e56a:	b292      	uxth	r2, r2
 800e56c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e572:	1c9a      	adds	r2, r3, #2
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e57e:	b29b      	uxth	r3, r3
 800e580:	3b01      	subs	r3, #1
 800e582:	b29a      	uxth	r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e58a:	e023      	b.n	800e5d4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e58c:	f7f5 fd50 	bl	8004030 <HAL_GetTick>
 800e590:	4602      	mov	r2, r0
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d803      	bhi.n	800e5a4 <HAL_SPI_Receive+0x2f4>
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5a2:	d102      	bne.n	800e5aa <HAL_SPI_Receive+0x2fa>
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d114      	bne.n	800e5d4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f000 f8f2 	bl	800e794 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e5d0:	2303      	movs	r3, #3
 800e5d2:	e0db      	b.n	800e78c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f47f af69 	bne.w	800e4b4 <HAL_SPI_Receive+0x204>
 800e5e2:	e0c0      	b.n	800e766 <HAL_SPI_Receive+0x4b6>
 800e5e4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	695b      	ldr	r3, [r3, #20]
 800e5ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	695b      	ldr	r3, [r3, #20]
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d117      	bne.n	800e62e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e60a:	7812      	ldrb	r2, [r2, #0]
 800e60c:	b2d2      	uxtb	r2, r2
 800e60e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e614:	1c5a      	adds	r2, r3, #1
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e620:	b29b      	uxth	r3, r3
 800e622:	3b01      	subs	r3, #1
 800e624:	b29a      	uxth	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e62c:	e094      	b.n	800e758 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e634:	b29b      	uxth	r3, r3
 800e636:	8bfa      	ldrh	r2, [r7, #30]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d946      	bls.n	800e6ca <HAL_SPI_Receive+0x41a>
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e642:	2b00      	cmp	r3, #0
 800e644:	d041      	beq.n	800e6ca <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e652:	7812      	ldrb	r2, [r2, #0]
 800e654:	b2d2      	uxtb	r2, r2
 800e656:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e65c:	1c5a      	adds	r2, r3, #1
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e66e:	7812      	ldrb	r2, [r2, #0]
 800e670:	b2d2      	uxtb	r2, r2
 800e672:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e68a:	7812      	ldrb	r2, [r2, #0]
 800e68c:	b2d2      	uxtb	r2, r2
 800e68e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e694:	1c5a      	adds	r2, r3, #1
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6a6:	7812      	ldrb	r2, [r2, #0]
 800e6a8:	b2d2      	uxtb	r2, r2
 800e6aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6b0:	1c5a      	adds	r2, r3, #1
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	3b04      	subs	r3, #4
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6c8:	e046      	b.n	800e758 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	2b03      	cmp	r3, #3
 800e6d4:	d81c      	bhi.n	800e710 <HAL_SPI_Receive+0x460>
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d017      	beq.n	800e710 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ec:	7812      	ldrb	r2, [r2, #0]
 800e6ee:	b2d2      	uxtb	r2, r2
 800e6f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6f6:	1c5a      	adds	r2, r3, #1
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e702:	b29b      	uxth	r3, r3
 800e704:	3b01      	subs	r3, #1
 800e706:	b29a      	uxth	r2, r3
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e70e:	e023      	b.n	800e758 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e710:	f7f5 fc8e 	bl	8004030 <HAL_GetTick>
 800e714:	4602      	mov	r2, r0
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	1ad3      	subs	r3, r2, r3
 800e71a:	683a      	ldr	r2, [r7, #0]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d803      	bhi.n	800e728 <HAL_SPI_Receive+0x478>
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e726:	d102      	bne.n	800e72e <HAL_SPI_Receive+0x47e>
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d114      	bne.n	800e758 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f000 f830 	bl	800e794 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e73a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e754:	2303      	movs	r3, #3
 800e756:	e019      	b.n	800e78c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e75e:	b29b      	uxth	r3, r3
 800e760:	2b00      	cmp	r3, #0
 800e762:	f47f af41 	bne.w	800e5e8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f000 f814 	bl	800e794 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e782:	2b00      	cmp	r3, #0
 800e784:	d001      	beq.n	800e78a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e786:	2301      	movs	r3, #1
 800e788:	e000      	b.n	800e78c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e78a:	2300      	movs	r3, #0
  }
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3720      	adds	r7, #32
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	695b      	ldr	r3, [r3, #20]
 800e7a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	699a      	ldr	r2, [r3, #24]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f042 0208 	orr.w	r2, r2, #8
 800e7b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	699a      	ldr	r2, [r3, #24]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f042 0210 	orr.w	r2, r2, #16
 800e7c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f022 0201 	bic.w	r2, r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6919      	ldr	r1, [r3, #16]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	4b3c      	ldr	r3, [pc, #240]	; (800e8d0 <SPI_CloseTransfer+0x13c>)
 800e7e0:	400b      	ands	r3, r1
 800e7e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	689a      	ldr	r2, [r3, #8]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e7f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b04      	cmp	r3, #4
 800e7fe:	d014      	beq.n	800e82a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f003 0320 	and.w	r3, r3, #32
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00f      	beq.n	800e82a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e810:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	699a      	ldr	r2, [r3, #24]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f042 0220 	orr.w	r2, r2, #32
 800e828:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e830:	b2db      	uxtb	r3, r3
 800e832:	2b03      	cmp	r3, #3
 800e834:	d014      	beq.n	800e860 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00f      	beq.n	800e860 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e846:	f043 0204 	orr.w	r2, r3, #4
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	699a      	ldr	r2, [r3, #24]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e85e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00f      	beq.n	800e88a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e870:	f043 0201 	orr.w	r2, r3, #1
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	699a      	ldr	r2, [r3, #24]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e888:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00f      	beq.n	800e8b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e89a:	f043 0208 	orr.w	r2, r3, #8
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	699a      	ldr	r2, [r3, #24]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e8b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e8c4:	bf00      	nop
 800e8c6:	3714      	adds	r7, #20
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr
 800e8d0:	fffffc90 	.word	0xfffffc90

0800e8d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8e0:	095b      	lsrs	r3, r3, #5
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	3307      	adds	r3, #7
 800e8f2:	08db      	lsrs	r3, r3, #3
 800e8f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3714      	adds	r7, #20
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr

0800e90a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b082      	sub	sp, #8
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d101      	bne.n	800e91c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	e049      	b.n	800e9b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e922:	b2db      	uxtb	r3, r3
 800e924:	2b00      	cmp	r3, #0
 800e926:	d106      	bne.n	800e936 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7f4 feff 	bl	8003734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2202      	movs	r2, #2
 800e93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	3304      	adds	r3, #4
 800e946:	4619      	mov	r1, r3
 800e948:	4610      	mov	r0, r2
 800e94a:	f000 fe7d 	bl	800f648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2201      	movs	r2, #1
 800e952:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2201      	movs	r2, #1
 800e95a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2201      	movs	r2, #1
 800e96a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2201      	movs	r2, #1
 800e972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2201      	movs	r2, #1
 800e97a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2201      	movs	r2, #1
 800e982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2201      	movs	r2, #1
 800e98a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2201      	movs	r2, #1
 800e992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2201      	movs	r2, #1
 800e99a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b085      	sub	sp, #20
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d001      	beq.n	800e9d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e054      	b.n	800ea7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2202      	movs	r2, #2
 800e9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68da      	ldr	r2, [r3, #12]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f042 0201 	orr.w	r2, r2, #1
 800e9e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a26      	ldr	r2, [pc, #152]	; (800ea88 <HAL_TIM_Base_Start_IT+0xd0>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d022      	beq.n	800ea38 <HAL_TIM_Base_Start_IT+0x80>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9fa:	d01d      	beq.n	800ea38 <HAL_TIM_Base_Start_IT+0x80>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a22      	ldr	r2, [pc, #136]	; (800ea8c <HAL_TIM_Base_Start_IT+0xd4>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d018      	beq.n	800ea38 <HAL_TIM_Base_Start_IT+0x80>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a21      	ldr	r2, [pc, #132]	; (800ea90 <HAL_TIM_Base_Start_IT+0xd8>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d013      	beq.n	800ea38 <HAL_TIM_Base_Start_IT+0x80>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a1f      	ldr	r2, [pc, #124]	; (800ea94 <HAL_TIM_Base_Start_IT+0xdc>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d00e      	beq.n	800ea38 <HAL_TIM_Base_Start_IT+0x80>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a1e      	ldr	r2, [pc, #120]	; (800ea98 <HAL_TIM_Base_Start_IT+0xe0>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d009      	beq.n	800ea38 <HAL_TIM_Base_Start_IT+0x80>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a1c      	ldr	r2, [pc, #112]	; (800ea9c <HAL_TIM_Base_Start_IT+0xe4>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d004      	beq.n	800ea38 <HAL_TIM_Base_Start_IT+0x80>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a1b      	ldr	r2, [pc, #108]	; (800eaa0 <HAL_TIM_Base_Start_IT+0xe8>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d115      	bne.n	800ea64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	689a      	ldr	r2, [r3, #8]
 800ea3e:	4b19      	ldr	r3, [pc, #100]	; (800eaa4 <HAL_TIM_Base_Start_IT+0xec>)
 800ea40:	4013      	ands	r3, r2
 800ea42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2b06      	cmp	r3, #6
 800ea48:	d015      	beq.n	800ea76 <HAL_TIM_Base_Start_IT+0xbe>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea50:	d011      	beq.n	800ea76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f042 0201 	orr.w	r2, r2, #1
 800ea60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea62:	e008      	b.n	800ea76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f042 0201 	orr.w	r2, r2, #1
 800ea72:	601a      	str	r2, [r3, #0]
 800ea74:	e000      	b.n	800ea78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea78:	2300      	movs	r3, #0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3714      	adds	r7, #20
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	40010000 	.word	0x40010000
 800ea8c:	40000400 	.word	0x40000400
 800ea90:	40000800 	.word	0x40000800
 800ea94:	40000c00 	.word	0x40000c00
 800ea98:	40010400 	.word	0x40010400
 800ea9c:	40001800 	.word	0x40001800
 800eaa0:	40014000 	.word	0x40014000
 800eaa4:	00010007 	.word	0x00010007

0800eaa8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eab2:	2300      	movs	r3, #0
 800eab4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d109      	bne.n	800ead0 <HAL_TIM_OC_Start_IT+0x28>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	bf14      	ite	ne
 800eac8:	2301      	movne	r3, #1
 800eaca:	2300      	moveq	r3, #0
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	e03c      	b.n	800eb4a <HAL_TIM_OC_Start_IT+0xa2>
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	2b04      	cmp	r3, #4
 800ead4:	d109      	bne.n	800eaea <HAL_TIM_OC_Start_IT+0x42>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	2b01      	cmp	r3, #1
 800eae0:	bf14      	ite	ne
 800eae2:	2301      	movne	r3, #1
 800eae4:	2300      	moveq	r3, #0
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	e02f      	b.n	800eb4a <HAL_TIM_OC_Start_IT+0xa2>
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	2b08      	cmp	r3, #8
 800eaee:	d109      	bne.n	800eb04 <HAL_TIM_OC_Start_IT+0x5c>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	bf14      	ite	ne
 800eafc:	2301      	movne	r3, #1
 800eafe:	2300      	moveq	r3, #0
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	e022      	b.n	800eb4a <HAL_TIM_OC_Start_IT+0xa2>
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	2b0c      	cmp	r3, #12
 800eb08:	d109      	bne.n	800eb1e <HAL_TIM_OC_Start_IT+0x76>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	bf14      	ite	ne
 800eb16:	2301      	movne	r3, #1
 800eb18:	2300      	moveq	r3, #0
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	e015      	b.n	800eb4a <HAL_TIM_OC_Start_IT+0xa2>
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	2b10      	cmp	r3, #16
 800eb22:	d109      	bne.n	800eb38 <HAL_TIM_OC_Start_IT+0x90>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	bf14      	ite	ne
 800eb30:	2301      	movne	r3, #1
 800eb32:	2300      	moveq	r3, #0
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	e008      	b.n	800eb4a <HAL_TIM_OC_Start_IT+0xa2>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	bf14      	ite	ne
 800eb44:	2301      	movne	r3, #1
 800eb46:	2300      	moveq	r3, #0
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e0ec      	b.n	800ed2c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d104      	bne.n	800eb62 <HAL_TIM_OC_Start_IT+0xba>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2202      	movs	r2, #2
 800eb5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb60:	e023      	b.n	800ebaa <HAL_TIM_OC_Start_IT+0x102>
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b04      	cmp	r3, #4
 800eb66:	d104      	bne.n	800eb72 <HAL_TIM_OC_Start_IT+0xca>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb70:	e01b      	b.n	800ebaa <HAL_TIM_OC_Start_IT+0x102>
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	2b08      	cmp	r3, #8
 800eb76:	d104      	bne.n	800eb82 <HAL_TIM_OC_Start_IT+0xda>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2202      	movs	r2, #2
 800eb7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb80:	e013      	b.n	800ebaa <HAL_TIM_OC_Start_IT+0x102>
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2b0c      	cmp	r3, #12
 800eb86:	d104      	bne.n	800eb92 <HAL_TIM_OC_Start_IT+0xea>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb90:	e00b      	b.n	800ebaa <HAL_TIM_OC_Start_IT+0x102>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b10      	cmp	r3, #16
 800eb96:	d104      	bne.n	800eba2 <HAL_TIM_OC_Start_IT+0xfa>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eba0:	e003      	b.n	800ebaa <HAL_TIM_OC_Start_IT+0x102>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2202      	movs	r2, #2
 800eba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	2b0c      	cmp	r3, #12
 800ebae:	d841      	bhi.n	800ec34 <HAL_TIM_OC_Start_IT+0x18c>
 800ebb0:	a201      	add	r2, pc, #4	; (adr r2, 800ebb8 <HAL_TIM_OC_Start_IT+0x110>)
 800ebb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb6:	bf00      	nop
 800ebb8:	0800ebed 	.word	0x0800ebed
 800ebbc:	0800ec35 	.word	0x0800ec35
 800ebc0:	0800ec35 	.word	0x0800ec35
 800ebc4:	0800ec35 	.word	0x0800ec35
 800ebc8:	0800ebff 	.word	0x0800ebff
 800ebcc:	0800ec35 	.word	0x0800ec35
 800ebd0:	0800ec35 	.word	0x0800ec35
 800ebd4:	0800ec35 	.word	0x0800ec35
 800ebd8:	0800ec11 	.word	0x0800ec11
 800ebdc:	0800ec35 	.word	0x0800ec35
 800ebe0:	0800ec35 	.word	0x0800ec35
 800ebe4:	0800ec35 	.word	0x0800ec35
 800ebe8:	0800ec23 	.word	0x0800ec23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	68da      	ldr	r2, [r3, #12]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f042 0202 	orr.w	r2, r2, #2
 800ebfa:	60da      	str	r2, [r3, #12]
      break;
 800ebfc:	e01d      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	68da      	ldr	r2, [r3, #12]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f042 0204 	orr.w	r2, r2, #4
 800ec0c:	60da      	str	r2, [r3, #12]
      break;
 800ec0e:	e014      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68da      	ldr	r2, [r3, #12]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f042 0208 	orr.w	r2, r2, #8
 800ec1e:	60da      	str	r2, [r3, #12]
      break;
 800ec20:	e00b      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68da      	ldr	r2, [r3, #12]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f042 0210 	orr.w	r2, r2, #16
 800ec30:	60da      	str	r2, [r3, #12]
      break;
 800ec32:	e002      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	73fb      	strb	r3, [r7, #15]
      break;
 800ec38:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec3a:	7bfb      	ldrb	r3, [r7, #15]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d174      	bne.n	800ed2a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2201      	movs	r2, #1
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f001 f917 	bl	800fe7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a38      	ldr	r2, [pc, #224]	; (800ed34 <HAL_TIM_OC_Start_IT+0x28c>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d013      	beq.n	800ec80 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a36      	ldr	r2, [pc, #216]	; (800ed38 <HAL_TIM_OC_Start_IT+0x290>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d00e      	beq.n	800ec80 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a35      	ldr	r2, [pc, #212]	; (800ed3c <HAL_TIM_OC_Start_IT+0x294>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d009      	beq.n	800ec80 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a33      	ldr	r2, [pc, #204]	; (800ed40 <HAL_TIM_OC_Start_IT+0x298>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d004      	beq.n	800ec80 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a32      	ldr	r2, [pc, #200]	; (800ed44 <HAL_TIM_OC_Start_IT+0x29c>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d101      	bne.n	800ec84 <HAL_TIM_OC_Start_IT+0x1dc>
 800ec80:	2301      	movs	r3, #1
 800ec82:	e000      	b.n	800ec86 <HAL_TIM_OC_Start_IT+0x1de>
 800ec84:	2300      	movs	r3, #0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d007      	beq.n	800ec9a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a25      	ldr	r2, [pc, #148]	; (800ed34 <HAL_TIM_OC_Start_IT+0x28c>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d022      	beq.n	800ecea <HAL_TIM_OC_Start_IT+0x242>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecac:	d01d      	beq.n	800ecea <HAL_TIM_OC_Start_IT+0x242>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a25      	ldr	r2, [pc, #148]	; (800ed48 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d018      	beq.n	800ecea <HAL_TIM_OC_Start_IT+0x242>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a23      	ldr	r2, [pc, #140]	; (800ed4c <HAL_TIM_OC_Start_IT+0x2a4>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d013      	beq.n	800ecea <HAL_TIM_OC_Start_IT+0x242>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a22      	ldr	r2, [pc, #136]	; (800ed50 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d00e      	beq.n	800ecea <HAL_TIM_OC_Start_IT+0x242>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4a19      	ldr	r2, [pc, #100]	; (800ed38 <HAL_TIM_OC_Start_IT+0x290>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d009      	beq.n	800ecea <HAL_TIM_OC_Start_IT+0x242>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4a1e      	ldr	r2, [pc, #120]	; (800ed54 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d004      	beq.n	800ecea <HAL_TIM_OC_Start_IT+0x242>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a15      	ldr	r2, [pc, #84]	; (800ed3c <HAL_TIM_OC_Start_IT+0x294>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d115      	bne.n	800ed16 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	689a      	ldr	r2, [r3, #8]
 800ecf0:	4b19      	ldr	r3, [pc, #100]	; (800ed58 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ecf2:	4013      	ands	r3, r2
 800ecf4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2b06      	cmp	r3, #6
 800ecfa:	d015      	beq.n	800ed28 <HAL_TIM_OC_Start_IT+0x280>
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed02:	d011      	beq.n	800ed28 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f042 0201 	orr.w	r2, r2, #1
 800ed12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed14:	e008      	b.n	800ed28 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f042 0201 	orr.w	r2, r2, #1
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	e000      	b.n	800ed2a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed28:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ed2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3710      	adds	r7, #16
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	40010000 	.word	0x40010000
 800ed38:	40010400 	.word	0x40010400
 800ed3c:	40014000 	.word	0x40014000
 800ed40:	40014400 	.word	0x40014400
 800ed44:	40014800 	.word	0x40014800
 800ed48:	40000400 	.word	0x40000400
 800ed4c:	40000800 	.word	0x40000800
 800ed50:	40000c00 	.word	0x40000c00
 800ed54:	40001800 	.word	0x40001800
 800ed58:	00010007 	.word	0x00010007

0800ed5c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed66:	2300      	movs	r3, #0
 800ed68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	2b0c      	cmp	r3, #12
 800ed6e:	d841      	bhi.n	800edf4 <HAL_TIM_OC_Stop_IT+0x98>
 800ed70:	a201      	add	r2, pc, #4	; (adr r2, 800ed78 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ed72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed76:	bf00      	nop
 800ed78:	0800edad 	.word	0x0800edad
 800ed7c:	0800edf5 	.word	0x0800edf5
 800ed80:	0800edf5 	.word	0x0800edf5
 800ed84:	0800edf5 	.word	0x0800edf5
 800ed88:	0800edbf 	.word	0x0800edbf
 800ed8c:	0800edf5 	.word	0x0800edf5
 800ed90:	0800edf5 	.word	0x0800edf5
 800ed94:	0800edf5 	.word	0x0800edf5
 800ed98:	0800edd1 	.word	0x0800edd1
 800ed9c:	0800edf5 	.word	0x0800edf5
 800eda0:	0800edf5 	.word	0x0800edf5
 800eda4:	0800edf5 	.word	0x0800edf5
 800eda8:	0800ede3 	.word	0x0800ede3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	68da      	ldr	r2, [r3, #12]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f022 0202 	bic.w	r2, r2, #2
 800edba:	60da      	str	r2, [r3, #12]
      break;
 800edbc:	e01d      	b.n	800edfa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	68da      	ldr	r2, [r3, #12]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f022 0204 	bic.w	r2, r2, #4
 800edcc:	60da      	str	r2, [r3, #12]
      break;
 800edce:	e014      	b.n	800edfa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	68da      	ldr	r2, [r3, #12]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f022 0208 	bic.w	r2, r2, #8
 800edde:	60da      	str	r2, [r3, #12]
      break;
 800ede0:	e00b      	b.n	800edfa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	68da      	ldr	r2, [r3, #12]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f022 0210 	bic.w	r2, r2, #16
 800edf0:	60da      	str	r2, [r3, #12]
      break;
 800edf2:	e002      	b.n	800edfa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800edf4:	2301      	movs	r3, #1
 800edf6:	73fb      	strb	r3, [r7, #15]
      break;
 800edf8:	bf00      	nop
  }

  if (status == HAL_OK)
 800edfa:	7bfb      	ldrb	r3, [r7, #15]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f040 8081 	bne.w	800ef04 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2200      	movs	r2, #0
 800ee08:	6839      	ldr	r1, [r7, #0]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f001 f836 	bl	800fe7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a3e      	ldr	r2, [pc, #248]	; (800ef10 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d013      	beq.n	800ee42 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a3d      	ldr	r2, [pc, #244]	; (800ef14 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d00e      	beq.n	800ee42 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a3b      	ldr	r2, [pc, #236]	; (800ef18 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d009      	beq.n	800ee42 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4a3a      	ldr	r2, [pc, #232]	; (800ef1c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d004      	beq.n	800ee42 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4a38      	ldr	r2, [pc, #224]	; (800ef20 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d101      	bne.n	800ee46 <HAL_TIM_OC_Stop_IT+0xea>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <HAL_TIM_OC_Stop_IT+0xec>
 800ee46:	2300      	movs	r3, #0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d017      	beq.n	800ee7c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	6a1a      	ldr	r2, [r3, #32]
 800ee52:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee56:	4013      	ands	r3, r2
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d10f      	bne.n	800ee7c <HAL_TIM_OC_Stop_IT+0x120>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	6a1a      	ldr	r2, [r3, #32]
 800ee62:	f240 4344 	movw	r3, #1092	; 0x444
 800ee66:	4013      	ands	r3, r2
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d107      	bne.n	800ee7c <HAL_TIM_OC_Stop_IT+0x120>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ee7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	6a1a      	ldr	r2, [r3, #32]
 800ee82:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee86:	4013      	ands	r3, r2
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10f      	bne.n	800eeac <HAL_TIM_OC_Stop_IT+0x150>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	6a1a      	ldr	r2, [r3, #32]
 800ee92:	f240 4344 	movw	r3, #1092	; 0x444
 800ee96:	4013      	ands	r3, r2
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d107      	bne.n	800eeac <HAL_TIM_OC_Stop_IT+0x150>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f022 0201 	bic.w	r2, r2, #1
 800eeaa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d104      	bne.n	800eebc <HAL_TIM_OC_Stop_IT+0x160>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eeba:	e023      	b.n	800ef04 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2b04      	cmp	r3, #4
 800eec0:	d104      	bne.n	800eecc <HAL_TIM_OC_Stop_IT+0x170>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2201      	movs	r2, #1
 800eec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eeca:	e01b      	b.n	800ef04 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	2b08      	cmp	r3, #8
 800eed0:	d104      	bne.n	800eedc <HAL_TIM_OC_Stop_IT+0x180>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2201      	movs	r2, #1
 800eed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eeda:	e013      	b.n	800ef04 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	2b0c      	cmp	r3, #12
 800eee0:	d104      	bne.n	800eeec <HAL_TIM_OC_Stop_IT+0x190>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2201      	movs	r2, #1
 800eee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eeea:	e00b      	b.n	800ef04 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	2b10      	cmp	r3, #16
 800eef0:	d104      	bne.n	800eefc <HAL_TIM_OC_Stop_IT+0x1a0>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2201      	movs	r2, #1
 800eef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eefa:	e003      	b.n	800ef04 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ef04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	40010000 	.word	0x40010000
 800ef14:	40010400 	.word	0x40010400
 800ef18:	40014000 	.word	0x40014000
 800ef1c:	40014400 	.word	0x40014400
 800ef20:	40014800 	.word	0x40014800

0800ef24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d101      	bne.n	800ef36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e049      	b.n	800efca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d106      	bne.n	800ef50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2200      	movs	r2, #0
 800ef46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 f841 	bl	800efd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2202      	movs	r2, #2
 800ef54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	3304      	adds	r3, #4
 800ef60:	4619      	mov	r1, r3
 800ef62:	4610      	mov	r0, r2
 800ef64:	f000 fb70 	bl	800f648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2201      	movs	r2, #1
 800ef74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2201      	movs	r2, #1
 800ef84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2201      	movs	r2, #1
 800ef94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2201      	movs	r2, #1
 800efa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2201      	movs	r2, #1
 800efac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2201      	movs	r2, #1
 800efbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2201      	movs	r2, #1
 800efc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b083      	sub	sp, #12
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800efda:	bf00      	nop
 800efdc:	370c      	adds	r7, #12
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr

0800efe6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b084      	sub	sp, #16
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	f003 0302 	and.w	r3, r3, #2
 800f004:	2b00      	cmp	r3, #0
 800f006:	d020      	beq.n	800f04a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f003 0302 	and.w	r3, r3, #2
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d01b      	beq.n	800f04a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f06f 0202 	mvn.w	r2, #2
 800f01a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	f003 0303 	and.w	r3, r3, #3
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d003      	beq.n	800f038 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 faeb 	bl	800f60c <HAL_TIM_IC_CaptureCallback>
 800f036:	e005      	b.n	800f044 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7f1 fae1 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 faee 	bl	800f620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	f003 0304 	and.w	r3, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	d020      	beq.n	800f096 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f003 0304 	and.w	r3, r3, #4
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d01b      	beq.n	800f096 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f06f 0204 	mvn.w	r2, #4
 800f066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2202      	movs	r2, #2
 800f06c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	699b      	ldr	r3, [r3, #24]
 800f074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d003      	beq.n	800f084 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f000 fac5 	bl	800f60c <HAL_TIM_IC_CaptureCallback>
 800f082:	e005      	b.n	800f090 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7f1 fabb 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 fac8 	bl	800f620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2200      	movs	r2, #0
 800f094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	f003 0308 	and.w	r3, r3, #8
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d020      	beq.n	800f0e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f003 0308 	and.w	r3, r3, #8
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d01b      	beq.n	800f0e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f06f 0208 	mvn.w	r2, #8
 800f0b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2204      	movs	r2, #4
 800f0b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	69db      	ldr	r3, [r3, #28]
 800f0c0:	f003 0303 	and.w	r3, r3, #3
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d003      	beq.n	800f0d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fa9f 	bl	800f60c <HAL_TIM_IC_CaptureCallback>
 800f0ce:	e005      	b.n	800f0dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f7f1 fa95 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 faa2 	bl	800f620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	f003 0310 	and.w	r3, r3, #16
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d020      	beq.n	800f12e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f003 0310 	and.w	r3, r3, #16
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d01b      	beq.n	800f12e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f06f 0210 	mvn.w	r2, #16
 800f0fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2208      	movs	r2, #8
 800f104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	69db      	ldr	r3, [r3, #28]
 800f10c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f110:	2b00      	cmp	r3, #0
 800f112:	d003      	beq.n	800f11c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 fa79 	bl	800f60c <HAL_TIM_IC_CaptureCallback>
 800f11a:	e005      	b.n	800f128 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7f1 fa6f 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 fa7c 	bl	800f620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	f003 0301 	and.w	r3, r3, #1
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00c      	beq.n	800f152 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f003 0301 	and.w	r3, r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d007      	beq.n	800f152 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f06f 0201 	mvn.w	r2, #1
 800f14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7f3 ffcb 	bl	80030e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d104      	bne.n	800f166 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00c      	beq.n	800f180 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d007      	beq.n	800f180 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 ffba 	bl	80100f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00c      	beq.n	800f1a4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f190:	2b00      	cmp	r3, #0
 800f192:	d007      	beq.n	800f1a4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f19c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 ffb2 	bl	8010108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00c      	beq.n	800f1c8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d007      	beq.n	800f1c8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f1c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 fa36 	bl	800f634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	f003 0320 	and.w	r3, r3, #32
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00c      	beq.n	800f1ec <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f003 0320 	and.w	r3, r3, #32
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d007      	beq.n	800f1ec <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f06f 0220 	mvn.w	r2, #32
 800f1e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 ff7a 	bl	80100e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1ec:	bf00      	nop
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b086      	sub	sp, #24
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f200:	2300      	movs	r3, #0
 800f202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d101      	bne.n	800f212 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f20e:	2302      	movs	r3, #2
 800f210:	e0ff      	b.n	800f412 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2201      	movs	r2, #1
 800f216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b14      	cmp	r3, #20
 800f21e:	f200 80f0 	bhi.w	800f402 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f222:	a201      	add	r2, pc, #4	; (adr r2, 800f228 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f228:	0800f27d 	.word	0x0800f27d
 800f22c:	0800f403 	.word	0x0800f403
 800f230:	0800f403 	.word	0x0800f403
 800f234:	0800f403 	.word	0x0800f403
 800f238:	0800f2bd 	.word	0x0800f2bd
 800f23c:	0800f403 	.word	0x0800f403
 800f240:	0800f403 	.word	0x0800f403
 800f244:	0800f403 	.word	0x0800f403
 800f248:	0800f2ff 	.word	0x0800f2ff
 800f24c:	0800f403 	.word	0x0800f403
 800f250:	0800f403 	.word	0x0800f403
 800f254:	0800f403 	.word	0x0800f403
 800f258:	0800f33f 	.word	0x0800f33f
 800f25c:	0800f403 	.word	0x0800f403
 800f260:	0800f403 	.word	0x0800f403
 800f264:	0800f403 	.word	0x0800f403
 800f268:	0800f381 	.word	0x0800f381
 800f26c:	0800f403 	.word	0x0800f403
 800f270:	0800f403 	.word	0x0800f403
 800f274:	0800f403 	.word	0x0800f403
 800f278:	0800f3c1 	.word	0x0800f3c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	68b9      	ldr	r1, [r7, #8]
 800f282:	4618      	mov	r0, r3
 800f284:	f000 fa86 	bl	800f794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	699a      	ldr	r2, [r3, #24]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f042 0208 	orr.w	r2, r2, #8
 800f296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	699a      	ldr	r2, [r3, #24]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f022 0204 	bic.w	r2, r2, #4
 800f2a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6999      	ldr	r1, [r3, #24]
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	691a      	ldr	r2, [r3, #16]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	430a      	orrs	r2, r1
 800f2b8:	619a      	str	r2, [r3, #24]
      break;
 800f2ba:	e0a5      	b.n	800f408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68b9      	ldr	r1, [r7, #8]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f000 faf6 	bl	800f8b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	699a      	ldr	r2, [r3, #24]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	699a      	ldr	r2, [r3, #24]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	6999      	ldr	r1, [r3, #24]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	021a      	lsls	r2, r3, #8
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	430a      	orrs	r2, r1
 800f2fa:	619a      	str	r2, [r3, #24]
      break;
 800f2fc:	e084      	b.n	800f408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	68b9      	ldr	r1, [r7, #8]
 800f304:	4618      	mov	r0, r3
 800f306:	f000 fb5f 	bl	800f9c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	69da      	ldr	r2, [r3, #28]
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f042 0208 	orr.w	r2, r2, #8
 800f318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	69da      	ldr	r2, [r3, #28]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f022 0204 	bic.w	r2, r2, #4
 800f328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	69d9      	ldr	r1, [r3, #28]
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	691a      	ldr	r2, [r3, #16]
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	430a      	orrs	r2, r1
 800f33a:	61da      	str	r2, [r3, #28]
      break;
 800f33c:	e064      	b.n	800f408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	68b9      	ldr	r1, [r7, #8]
 800f344:	4618      	mov	r0, r3
 800f346:	f000 fbc7 	bl	800fad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	69da      	ldr	r2, [r3, #28]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	69da      	ldr	r2, [r3, #28]
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	69d9      	ldr	r1, [r3, #28]
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	691b      	ldr	r3, [r3, #16]
 800f374:	021a      	lsls	r2, r3, #8
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	430a      	orrs	r2, r1
 800f37c:	61da      	str	r2, [r3, #28]
      break;
 800f37e:	e043      	b.n	800f408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68b9      	ldr	r1, [r7, #8]
 800f386:	4618      	mov	r0, r3
 800f388:	f000 fc10 	bl	800fbac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f042 0208 	orr.w	r2, r2, #8
 800f39a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f022 0204 	bic.w	r2, r2, #4
 800f3aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	691a      	ldr	r2, [r3, #16]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f3be:	e023      	b.n	800f408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68b9      	ldr	r1, [r7, #8]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 fc54 	bl	800fc74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	691b      	ldr	r3, [r3, #16]
 800f3f6:	021a      	lsls	r2, r3, #8
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	430a      	orrs	r2, r1
 800f3fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f400:	e002      	b.n	800f408 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f402:	2301      	movs	r3, #1
 800f404:	75fb      	strb	r3, [r7, #23]
      break;
 800f406:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f410:	7dfb      	ldrb	r3, [r7, #23]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3718      	adds	r7, #24
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop

0800f41c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f426:	2300      	movs	r3, #0
 800f428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f430:	2b01      	cmp	r3, #1
 800f432:	d101      	bne.n	800f438 <HAL_TIM_ConfigClockSource+0x1c>
 800f434:	2302      	movs	r3, #2
 800f436:	e0dc      	b.n	800f5f2 <HAL_TIM_ConfigClockSource+0x1d6>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2202      	movs	r2, #2
 800f444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f450:	68ba      	ldr	r2, [r7, #8]
 800f452:	4b6a      	ldr	r3, [pc, #424]	; (800f5fc <HAL_TIM_ConfigClockSource+0x1e0>)
 800f454:	4013      	ands	r3, r2
 800f456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f45e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	68ba      	ldr	r2, [r7, #8]
 800f466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a64      	ldr	r2, [pc, #400]	; (800f600 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	f000 80a9 	beq.w	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f474:	4a62      	ldr	r2, [pc, #392]	; (800f600 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f476:	4293      	cmp	r3, r2
 800f478:	f200 80ae 	bhi.w	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f47c:	4a61      	ldr	r2, [pc, #388]	; (800f604 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	f000 80a1 	beq.w	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f484:	4a5f      	ldr	r2, [pc, #380]	; (800f604 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f486:	4293      	cmp	r3, r2
 800f488:	f200 80a6 	bhi.w	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f48c:	4a5e      	ldr	r2, [pc, #376]	; (800f608 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	f000 8099 	beq.w	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f494:	4a5c      	ldr	r2, [pc, #368]	; (800f608 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f496:	4293      	cmp	r3, r2
 800f498:	f200 809e 	bhi.w	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f49c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f4a0:	f000 8091 	beq.w	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f4a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f4a8:	f200 8096 	bhi.w	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4b0:	f000 8089 	beq.w	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f4b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4b8:	f200 808e 	bhi.w	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4c0:	d03e      	beq.n	800f540 <HAL_TIM_ConfigClockSource+0x124>
 800f4c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4c6:	f200 8087 	bhi.w	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4ce:	f000 8086 	beq.w	800f5de <HAL_TIM_ConfigClockSource+0x1c2>
 800f4d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4d6:	d87f      	bhi.n	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4d8:	2b70      	cmp	r3, #112	; 0x70
 800f4da:	d01a      	beq.n	800f512 <HAL_TIM_ConfigClockSource+0xf6>
 800f4dc:	2b70      	cmp	r3, #112	; 0x70
 800f4de:	d87b      	bhi.n	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4e0:	2b60      	cmp	r3, #96	; 0x60
 800f4e2:	d050      	beq.n	800f586 <HAL_TIM_ConfigClockSource+0x16a>
 800f4e4:	2b60      	cmp	r3, #96	; 0x60
 800f4e6:	d877      	bhi.n	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4e8:	2b50      	cmp	r3, #80	; 0x50
 800f4ea:	d03c      	beq.n	800f566 <HAL_TIM_ConfigClockSource+0x14a>
 800f4ec:	2b50      	cmp	r3, #80	; 0x50
 800f4ee:	d873      	bhi.n	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4f0:	2b40      	cmp	r3, #64	; 0x40
 800f4f2:	d058      	beq.n	800f5a6 <HAL_TIM_ConfigClockSource+0x18a>
 800f4f4:	2b40      	cmp	r3, #64	; 0x40
 800f4f6:	d86f      	bhi.n	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4f8:	2b30      	cmp	r3, #48	; 0x30
 800f4fa:	d064      	beq.n	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f4fc:	2b30      	cmp	r3, #48	; 0x30
 800f4fe:	d86b      	bhi.n	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f500:	2b20      	cmp	r3, #32
 800f502:	d060      	beq.n	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f504:	2b20      	cmp	r3, #32
 800f506:	d867      	bhi.n	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d05c      	beq.n	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f50c:	2b10      	cmp	r3, #16
 800f50e:	d05a      	beq.n	800f5c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f510:	e062      	b.n	800f5d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6818      	ldr	r0, [r3, #0]
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	6899      	ldr	r1, [r3, #8]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	685a      	ldr	r2, [r3, #4]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	f000 fc8b 	bl	800fe3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	609a      	str	r2, [r3, #8]
      break;
 800f53e:	e04f      	b.n	800f5e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6818      	ldr	r0, [r3, #0]
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	6899      	ldr	r1, [r3, #8]
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	685a      	ldr	r2, [r3, #4]
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	f000 fc74 	bl	800fe3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	689a      	ldr	r2, [r3, #8]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f562:	609a      	str	r2, [r3, #8]
      break;
 800f564:	e03c      	b.n	800f5e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6818      	ldr	r0, [r3, #0]
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	6859      	ldr	r1, [r3, #4]
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	461a      	mov	r2, r3
 800f574:	f000 fbe4 	bl	800fd40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2150      	movs	r1, #80	; 0x50
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 fc3e 	bl	800fe00 <TIM_ITRx_SetConfig>
      break;
 800f584:	e02c      	b.n	800f5e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6818      	ldr	r0, [r3, #0]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	6859      	ldr	r1, [r3, #4]
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	461a      	mov	r2, r3
 800f594:	f000 fc03 	bl	800fd9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2160      	movs	r1, #96	; 0x60
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 fc2e 	bl	800fe00 <TIM_ITRx_SetConfig>
      break;
 800f5a4:	e01c      	b.n	800f5e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6818      	ldr	r0, [r3, #0]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	6859      	ldr	r1, [r3, #4]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	f000 fbc4 	bl	800fd40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2140      	movs	r1, #64	; 0x40
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f000 fc1e 	bl	800fe00 <TIM_ITRx_SetConfig>
      break;
 800f5c4:	e00c      	b.n	800f5e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	f000 fc15 	bl	800fe00 <TIM_ITRx_SetConfig>
      break;
 800f5d6:	e003      	b.n	800f5e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	73fb      	strb	r3, [r7, #15]
      break;
 800f5dc:	e000      	b.n	800f5e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f5de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	ffceff88 	.word	0xffceff88
 800f600:	00100040 	.word	0x00100040
 800f604:	00100030 	.word	0x00100030
 800f608:	00100020 	.word	0x00100020

0800f60c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f614:	bf00      	nop
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f628:	bf00      	nop
 800f62a:	370c      	adds	r7, #12
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f63c:	bf00      	nop
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a46      	ldr	r2, [pc, #280]	; (800f774 <TIM_Base_SetConfig+0x12c>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d013      	beq.n	800f688 <TIM_Base_SetConfig+0x40>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f666:	d00f      	beq.n	800f688 <TIM_Base_SetConfig+0x40>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4a43      	ldr	r2, [pc, #268]	; (800f778 <TIM_Base_SetConfig+0x130>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d00b      	beq.n	800f688 <TIM_Base_SetConfig+0x40>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a42      	ldr	r2, [pc, #264]	; (800f77c <TIM_Base_SetConfig+0x134>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d007      	beq.n	800f688 <TIM_Base_SetConfig+0x40>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a41      	ldr	r2, [pc, #260]	; (800f780 <TIM_Base_SetConfig+0x138>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d003      	beq.n	800f688 <TIM_Base_SetConfig+0x40>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a40      	ldr	r2, [pc, #256]	; (800f784 <TIM_Base_SetConfig+0x13c>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d108      	bne.n	800f69a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f68e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	4313      	orrs	r3, r2
 800f698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4a35      	ldr	r2, [pc, #212]	; (800f774 <TIM_Base_SetConfig+0x12c>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d01f      	beq.n	800f6e2 <TIM_Base_SetConfig+0x9a>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6a8:	d01b      	beq.n	800f6e2 <TIM_Base_SetConfig+0x9a>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4a32      	ldr	r2, [pc, #200]	; (800f778 <TIM_Base_SetConfig+0x130>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d017      	beq.n	800f6e2 <TIM_Base_SetConfig+0x9a>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4a31      	ldr	r2, [pc, #196]	; (800f77c <TIM_Base_SetConfig+0x134>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d013      	beq.n	800f6e2 <TIM_Base_SetConfig+0x9a>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4a30      	ldr	r2, [pc, #192]	; (800f780 <TIM_Base_SetConfig+0x138>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d00f      	beq.n	800f6e2 <TIM_Base_SetConfig+0x9a>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4a2f      	ldr	r2, [pc, #188]	; (800f784 <TIM_Base_SetConfig+0x13c>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d00b      	beq.n	800f6e2 <TIM_Base_SetConfig+0x9a>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4a2e      	ldr	r2, [pc, #184]	; (800f788 <TIM_Base_SetConfig+0x140>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d007      	beq.n	800f6e2 <TIM_Base_SetConfig+0x9a>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4a2d      	ldr	r2, [pc, #180]	; (800f78c <TIM_Base_SetConfig+0x144>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d003      	beq.n	800f6e2 <TIM_Base_SetConfig+0x9a>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4a2c      	ldr	r2, [pc, #176]	; (800f790 <TIM_Base_SetConfig+0x148>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d108      	bne.n	800f6f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	68fa      	ldr	r2, [r7, #12]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	695b      	ldr	r3, [r3, #20]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	689a      	ldr	r2, [r3, #8]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a16      	ldr	r2, [pc, #88]	; (800f774 <TIM_Base_SetConfig+0x12c>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d00f      	beq.n	800f740 <TIM_Base_SetConfig+0xf8>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a18      	ldr	r2, [pc, #96]	; (800f784 <TIM_Base_SetConfig+0x13c>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d00b      	beq.n	800f740 <TIM_Base_SetConfig+0xf8>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a17      	ldr	r2, [pc, #92]	; (800f788 <TIM_Base_SetConfig+0x140>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d007      	beq.n	800f740 <TIM_Base_SetConfig+0xf8>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4a16      	ldr	r2, [pc, #88]	; (800f78c <TIM_Base_SetConfig+0x144>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d003      	beq.n	800f740 <TIM_Base_SetConfig+0xf8>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a15      	ldr	r2, [pc, #84]	; (800f790 <TIM_Base_SetConfig+0x148>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d103      	bne.n	800f748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	691a      	ldr	r2, [r3, #16]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2201      	movs	r2, #1
 800f74c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	691b      	ldr	r3, [r3, #16]
 800f752:	f003 0301 	and.w	r3, r3, #1
 800f756:	2b01      	cmp	r3, #1
 800f758:	d105      	bne.n	800f766 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	f023 0201 	bic.w	r2, r3, #1
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	611a      	str	r2, [r3, #16]
  }
}
 800f766:	bf00      	nop
 800f768:	3714      	adds	r7, #20
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	40010000 	.word	0x40010000
 800f778:	40000400 	.word	0x40000400
 800f77c:	40000800 	.word	0x40000800
 800f780:	40000c00 	.word	0x40000c00
 800f784:	40010400 	.word	0x40010400
 800f788:	40014000 	.word	0x40014000
 800f78c:	40014400 	.word	0x40014400
 800f790:	40014800 	.word	0x40014800

0800f794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f794:	b480      	push	{r7}
 800f796:	b087      	sub	sp, #28
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6a1b      	ldr	r3, [r3, #32]
 800f7a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a1b      	ldr	r3, [r3, #32]
 800f7a8:	f023 0201 	bic.w	r2, r3, #1
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	699b      	ldr	r3, [r3, #24]
 800f7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	4b37      	ldr	r3, [pc, #220]	; (800f89c <TIM_OC1_SetConfig+0x108>)
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f023 0303 	bic.w	r3, r3, #3
 800f7ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	f023 0302 	bic.w	r3, r3, #2
 800f7dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a2d      	ldr	r2, [pc, #180]	; (800f8a0 <TIM_OC1_SetConfig+0x10c>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d00f      	beq.n	800f810 <TIM_OC1_SetConfig+0x7c>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a2c      	ldr	r2, [pc, #176]	; (800f8a4 <TIM_OC1_SetConfig+0x110>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d00b      	beq.n	800f810 <TIM_OC1_SetConfig+0x7c>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4a2b      	ldr	r2, [pc, #172]	; (800f8a8 <TIM_OC1_SetConfig+0x114>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d007      	beq.n	800f810 <TIM_OC1_SetConfig+0x7c>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a2a      	ldr	r2, [pc, #168]	; (800f8ac <TIM_OC1_SetConfig+0x118>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d003      	beq.n	800f810 <TIM_OC1_SetConfig+0x7c>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	4a29      	ldr	r2, [pc, #164]	; (800f8b0 <TIM_OC1_SetConfig+0x11c>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d10c      	bne.n	800f82a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	f023 0308 	bic.w	r3, r3, #8
 800f816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	4313      	orrs	r3, r2
 800f820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	f023 0304 	bic.w	r3, r3, #4
 800f828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a1c      	ldr	r2, [pc, #112]	; (800f8a0 <TIM_OC1_SetConfig+0x10c>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d00f      	beq.n	800f852 <TIM_OC1_SetConfig+0xbe>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4a1b      	ldr	r2, [pc, #108]	; (800f8a4 <TIM_OC1_SetConfig+0x110>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d00b      	beq.n	800f852 <TIM_OC1_SetConfig+0xbe>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a1a      	ldr	r2, [pc, #104]	; (800f8a8 <TIM_OC1_SetConfig+0x114>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d007      	beq.n	800f852 <TIM_OC1_SetConfig+0xbe>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4a19      	ldr	r2, [pc, #100]	; (800f8ac <TIM_OC1_SetConfig+0x118>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d003      	beq.n	800f852 <TIM_OC1_SetConfig+0xbe>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4a18      	ldr	r2, [pc, #96]	; (800f8b0 <TIM_OC1_SetConfig+0x11c>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d111      	bne.n	800f876 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	695b      	ldr	r3, [r3, #20]
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	4313      	orrs	r3, r2
 800f86a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	699b      	ldr	r3, [r3, #24]
 800f870:	693a      	ldr	r2, [r7, #16]
 800f872:	4313      	orrs	r3, r2
 800f874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	685a      	ldr	r2, [r3, #4]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	621a      	str	r2, [r3, #32]
}
 800f890:	bf00      	nop
 800f892:	371c      	adds	r7, #28
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr
 800f89c:	fffeff8f 	.word	0xfffeff8f
 800f8a0:	40010000 	.word	0x40010000
 800f8a4:	40010400 	.word	0x40010400
 800f8a8:	40014000 	.word	0x40014000
 800f8ac:	40014400 	.word	0x40014400
 800f8b0:	40014800 	.word	0x40014800

0800f8b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b087      	sub	sp, #28
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6a1b      	ldr	r3, [r3, #32]
 800f8c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a1b      	ldr	r3, [r3, #32]
 800f8c8:	f023 0210 	bic.w	r2, r3, #16
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	699b      	ldr	r3, [r3, #24]
 800f8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	4b34      	ldr	r3, [pc, #208]	; (800f9b0 <TIM_OC2_SetConfig+0xfc>)
 800f8e0:	4013      	ands	r3, r2
 800f8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	021b      	lsls	r3, r3, #8
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	f023 0320 	bic.w	r3, r3, #32
 800f8fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	011b      	lsls	r3, r3, #4
 800f906:	697a      	ldr	r2, [r7, #20]
 800f908:	4313      	orrs	r3, r2
 800f90a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a29      	ldr	r2, [pc, #164]	; (800f9b4 <TIM_OC2_SetConfig+0x100>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d003      	beq.n	800f91c <TIM_OC2_SetConfig+0x68>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4a28      	ldr	r2, [pc, #160]	; (800f9b8 <TIM_OC2_SetConfig+0x104>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d10d      	bne.n	800f938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	011b      	lsls	r3, r3, #4
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	4a1e      	ldr	r2, [pc, #120]	; (800f9b4 <TIM_OC2_SetConfig+0x100>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d00f      	beq.n	800f960 <TIM_OC2_SetConfig+0xac>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4a1d      	ldr	r2, [pc, #116]	; (800f9b8 <TIM_OC2_SetConfig+0x104>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d00b      	beq.n	800f960 <TIM_OC2_SetConfig+0xac>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	4a1c      	ldr	r2, [pc, #112]	; (800f9bc <TIM_OC2_SetConfig+0x108>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d007      	beq.n	800f960 <TIM_OC2_SetConfig+0xac>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a1b      	ldr	r2, [pc, #108]	; (800f9c0 <TIM_OC2_SetConfig+0x10c>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d003      	beq.n	800f960 <TIM_OC2_SetConfig+0xac>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a1a      	ldr	r2, [pc, #104]	; (800f9c4 <TIM_OC2_SetConfig+0x110>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d113      	bne.n	800f988 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f96e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	693a      	ldr	r2, [r7, #16]
 800f978:	4313      	orrs	r3, r2
 800f97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	693a      	ldr	r2, [r7, #16]
 800f984:	4313      	orrs	r3, r2
 800f986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	693a      	ldr	r2, [r7, #16]
 800f98c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	685a      	ldr	r2, [r3, #4]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	697a      	ldr	r2, [r7, #20]
 800f9a0:	621a      	str	r2, [r3, #32]
}
 800f9a2:	bf00      	nop
 800f9a4:	371c      	adds	r7, #28
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	feff8fff 	.word	0xfeff8fff
 800f9b4:	40010000 	.word	0x40010000
 800f9b8:	40010400 	.word	0x40010400
 800f9bc:	40014000 	.word	0x40014000
 800f9c0:	40014400 	.word	0x40014400
 800f9c4:	40014800 	.word	0x40014800

0800f9c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b087      	sub	sp, #28
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6a1b      	ldr	r3, [r3, #32]
 800f9d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a1b      	ldr	r3, [r3, #32]
 800f9dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	69db      	ldr	r3, [r3, #28]
 800f9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	4b33      	ldr	r3, [pc, #204]	; (800fac0 <TIM_OC3_SetConfig+0xf8>)
 800f9f4:	4013      	ands	r3, r2
 800f9f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	f023 0303 	bic.w	r3, r3, #3
 800f9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	68fa      	ldr	r2, [r7, #12]
 800fa06:	4313      	orrs	r3, r2
 800fa08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	021b      	lsls	r3, r3, #8
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4a28      	ldr	r2, [pc, #160]	; (800fac4 <TIM_OC3_SetConfig+0xfc>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d003      	beq.n	800fa2e <TIM_OC3_SetConfig+0x66>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4a27      	ldr	r2, [pc, #156]	; (800fac8 <TIM_OC3_SetConfig+0x100>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d10d      	bne.n	800fa4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	021b      	lsls	r3, r3, #8
 800fa3c:	697a      	ldr	r2, [r7, #20]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a1d      	ldr	r2, [pc, #116]	; (800fac4 <TIM_OC3_SetConfig+0xfc>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d00f      	beq.n	800fa72 <TIM_OC3_SetConfig+0xaa>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4a1c      	ldr	r2, [pc, #112]	; (800fac8 <TIM_OC3_SetConfig+0x100>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d00b      	beq.n	800fa72 <TIM_OC3_SetConfig+0xaa>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a1b      	ldr	r2, [pc, #108]	; (800facc <TIM_OC3_SetConfig+0x104>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d007      	beq.n	800fa72 <TIM_OC3_SetConfig+0xaa>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a1a      	ldr	r2, [pc, #104]	; (800fad0 <TIM_OC3_SetConfig+0x108>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d003      	beq.n	800fa72 <TIM_OC3_SetConfig+0xaa>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4a19      	ldr	r2, [pc, #100]	; (800fad4 <TIM_OC3_SetConfig+0x10c>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d113      	bne.n	800fa9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	011b      	lsls	r3, r3, #4
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	699b      	ldr	r3, [r3, #24]
 800fa92:	011b      	lsls	r3, r3, #4
 800fa94:	693a      	ldr	r2, [r7, #16]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	693a      	ldr	r2, [r7, #16]
 800fa9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	685a      	ldr	r2, [r3, #4]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	697a      	ldr	r2, [r7, #20]
 800fab2:	621a      	str	r2, [r3, #32]
}
 800fab4:	bf00      	nop
 800fab6:	371c      	adds	r7, #28
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	fffeff8f 	.word	0xfffeff8f
 800fac4:	40010000 	.word	0x40010000
 800fac8:	40010400 	.word	0x40010400
 800facc:	40014000 	.word	0x40014000
 800fad0:	40014400 	.word	0x40014400
 800fad4:	40014800 	.word	0x40014800

0800fad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fad8:	b480      	push	{r7}
 800fada:	b087      	sub	sp, #28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6a1b      	ldr	r3, [r3, #32]
 800faec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	69db      	ldr	r3, [r3, #28]
 800fafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	4b24      	ldr	r3, [pc, #144]	; (800fb94 <TIM_OC4_SetConfig+0xbc>)
 800fb04:	4013      	ands	r3, r2
 800fb06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	021b      	lsls	r3, r3, #8
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	031b      	lsls	r3, r3, #12
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a19      	ldr	r2, [pc, #100]	; (800fb98 <TIM_OC4_SetConfig+0xc0>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d00f      	beq.n	800fb58 <TIM_OC4_SetConfig+0x80>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a18      	ldr	r2, [pc, #96]	; (800fb9c <TIM_OC4_SetConfig+0xc4>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d00b      	beq.n	800fb58 <TIM_OC4_SetConfig+0x80>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a17      	ldr	r2, [pc, #92]	; (800fba0 <TIM_OC4_SetConfig+0xc8>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d007      	beq.n	800fb58 <TIM_OC4_SetConfig+0x80>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a16      	ldr	r2, [pc, #88]	; (800fba4 <TIM_OC4_SetConfig+0xcc>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d003      	beq.n	800fb58 <TIM_OC4_SetConfig+0x80>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a15      	ldr	r2, [pc, #84]	; (800fba8 <TIM_OC4_SetConfig+0xd0>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d109      	bne.n	800fb6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	019b      	lsls	r3, r3, #6
 800fb66:	697a      	ldr	r2, [r7, #20]
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	621a      	str	r2, [r3, #32]
}
 800fb86:	bf00      	nop
 800fb88:	371c      	adds	r7, #28
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	feff8fff 	.word	0xfeff8fff
 800fb98:	40010000 	.word	0x40010000
 800fb9c:	40010400 	.word	0x40010400
 800fba0:	40014000 	.word	0x40014000
 800fba4:	40014400 	.word	0x40014400
 800fba8:	40014800 	.word	0x40014800

0800fbac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b087      	sub	sp, #28
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6a1b      	ldr	r3, [r3, #32]
 800fbc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	4b21      	ldr	r3, [pc, #132]	; (800fc5c <TIM_OC5_SetConfig+0xb0>)
 800fbd8:	4013      	ands	r3, r2
 800fbda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fbec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	689b      	ldr	r3, [r3, #8]
 800fbf2:	041b      	lsls	r3, r3, #16
 800fbf4:	693a      	ldr	r2, [r7, #16]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4a18      	ldr	r2, [pc, #96]	; (800fc60 <TIM_OC5_SetConfig+0xb4>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d00f      	beq.n	800fc22 <TIM_OC5_SetConfig+0x76>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4a17      	ldr	r2, [pc, #92]	; (800fc64 <TIM_OC5_SetConfig+0xb8>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d00b      	beq.n	800fc22 <TIM_OC5_SetConfig+0x76>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4a16      	ldr	r2, [pc, #88]	; (800fc68 <TIM_OC5_SetConfig+0xbc>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d007      	beq.n	800fc22 <TIM_OC5_SetConfig+0x76>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a15      	ldr	r2, [pc, #84]	; (800fc6c <TIM_OC5_SetConfig+0xc0>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d003      	beq.n	800fc22 <TIM_OC5_SetConfig+0x76>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4a14      	ldr	r2, [pc, #80]	; (800fc70 <TIM_OC5_SetConfig+0xc4>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d109      	bne.n	800fc36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	695b      	ldr	r3, [r3, #20]
 800fc2e:	021b      	lsls	r3, r3, #8
 800fc30:	697a      	ldr	r2, [r7, #20]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	697a      	ldr	r2, [r7, #20]
 800fc3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	685a      	ldr	r2, [r3, #4]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	621a      	str	r2, [r3, #32]
}
 800fc50:	bf00      	nop
 800fc52:	371c      	adds	r7, #28
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	fffeff8f 	.word	0xfffeff8f
 800fc60:	40010000 	.word	0x40010000
 800fc64:	40010400 	.word	0x40010400
 800fc68:	40014000 	.word	0x40014000
 800fc6c:	40014400 	.word	0x40014400
 800fc70:	40014800 	.word	0x40014800

0800fc74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b087      	sub	sp, #28
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6a1b      	ldr	r3, [r3, #32]
 800fc82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6a1b      	ldr	r3, [r3, #32]
 800fc88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	4b22      	ldr	r3, [pc, #136]	; (800fd28 <TIM_OC6_SetConfig+0xb4>)
 800fca0:	4013      	ands	r3, r2
 800fca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	021b      	lsls	r3, r3, #8
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	4313      	orrs	r3, r2
 800fcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fcb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	051b      	lsls	r3, r3, #20
 800fcbe:	693a      	ldr	r2, [r7, #16]
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4a19      	ldr	r2, [pc, #100]	; (800fd2c <TIM_OC6_SetConfig+0xb8>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d00f      	beq.n	800fcec <TIM_OC6_SetConfig+0x78>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	4a18      	ldr	r2, [pc, #96]	; (800fd30 <TIM_OC6_SetConfig+0xbc>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d00b      	beq.n	800fcec <TIM_OC6_SetConfig+0x78>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4a17      	ldr	r2, [pc, #92]	; (800fd34 <TIM_OC6_SetConfig+0xc0>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d007      	beq.n	800fcec <TIM_OC6_SetConfig+0x78>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4a16      	ldr	r2, [pc, #88]	; (800fd38 <TIM_OC6_SetConfig+0xc4>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d003      	beq.n	800fcec <TIM_OC6_SetConfig+0x78>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	4a15      	ldr	r2, [pc, #84]	; (800fd3c <TIM_OC6_SetConfig+0xc8>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d109      	bne.n	800fd00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	695b      	ldr	r3, [r3, #20]
 800fcf8:	029b      	lsls	r3, r3, #10
 800fcfa:	697a      	ldr	r2, [r7, #20]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	697a      	ldr	r2, [r7, #20]
 800fd04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	685a      	ldr	r2, [r3, #4]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	693a      	ldr	r2, [r7, #16]
 800fd18:	621a      	str	r2, [r3, #32]
}
 800fd1a:	bf00      	nop
 800fd1c:	371c      	adds	r7, #28
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	feff8fff 	.word	0xfeff8fff
 800fd2c:	40010000 	.word	0x40010000
 800fd30:	40010400 	.word	0x40010400
 800fd34:	40014000 	.word	0x40014000
 800fd38:	40014400 	.word	0x40014400
 800fd3c:	40014800 	.word	0x40014800

0800fd40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b087      	sub	sp, #28
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6a1b      	ldr	r3, [r3, #32]
 800fd50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	6a1b      	ldr	r3, [r3, #32]
 800fd56:	f023 0201 	bic.w	r2, r3, #1
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	699b      	ldr	r3, [r3, #24]
 800fd62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	011b      	lsls	r3, r3, #4
 800fd70:	693a      	ldr	r2, [r7, #16]
 800fd72:	4313      	orrs	r3, r2
 800fd74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	f023 030a 	bic.w	r3, r3, #10
 800fd7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	693a      	ldr	r2, [r7, #16]
 800fd8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	621a      	str	r2, [r3, #32]
}
 800fd92:	bf00      	nop
 800fd94:	371c      	adds	r7, #28
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr

0800fd9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd9e:	b480      	push	{r7}
 800fda0:	b087      	sub	sp, #28
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	60f8      	str	r0, [r7, #12]
 800fda6:	60b9      	str	r1, [r7, #8]
 800fda8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6a1b      	ldr	r3, [r3, #32]
 800fdae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6a1b      	ldr	r3, [r3, #32]
 800fdb4:	f023 0210 	bic.w	r2, r3, #16
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	699b      	ldr	r3, [r3, #24]
 800fdc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fdc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	031b      	lsls	r3, r3, #12
 800fdce:	693a      	ldr	r2, [r7, #16]
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fdda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	011b      	lsls	r3, r3, #4
 800fde0:	697a      	ldr	r2, [r7, #20]
 800fde2:	4313      	orrs	r3, r2
 800fde4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	693a      	ldr	r2, [r7, #16]
 800fdea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	697a      	ldr	r2, [r7, #20]
 800fdf0:	621a      	str	r2, [r3, #32]
}
 800fdf2:	bf00      	nop
 800fdf4:	371c      	adds	r7, #28
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr
	...

0800fe00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b085      	sub	sp, #20
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe10:	68fa      	ldr	r2, [r7, #12]
 800fe12:	4b09      	ldr	r3, [pc, #36]	; (800fe38 <TIM_ITRx_SetConfig+0x38>)
 800fe14:	4013      	ands	r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe18:	683a      	ldr	r2, [r7, #0]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	4313      	orrs	r3, r2
 800fe1e:	f043 0307 	orr.w	r3, r3, #7
 800fe22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	609a      	str	r2, [r3, #8]
}
 800fe2a:	bf00      	nop
 800fe2c:	3714      	adds	r7, #20
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	ffcfff8f 	.word	0xffcfff8f

0800fe3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b087      	sub	sp, #28
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]
 800fe48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	021a      	lsls	r2, r3, #8
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	431a      	orrs	r2, r3
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	4313      	orrs	r3, r2
 800fe64:	697a      	ldr	r2, [r7, #20]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	697a      	ldr	r2, [r7, #20]
 800fe6e:	609a      	str	r2, [r3, #8]
}
 800fe70:	bf00      	nop
 800fe72:	371c      	adds	r7, #28
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b087      	sub	sp, #28
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	f003 031f 	and.w	r3, r3, #31
 800fe8e:	2201      	movs	r2, #1
 800fe90:	fa02 f303 	lsl.w	r3, r2, r3
 800fe94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6a1a      	ldr	r2, [r3, #32]
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	43db      	mvns	r3, r3
 800fe9e:	401a      	ands	r2, r3
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6a1a      	ldr	r2, [r3, #32]
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	f003 031f 	and.w	r3, r3, #31
 800feae:	6879      	ldr	r1, [r7, #4]
 800feb0:	fa01 f303 	lsl.w	r3, r1, r3
 800feb4:	431a      	orrs	r2, r3
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	621a      	str	r2, [r3, #32]
}
 800feba:	bf00      	nop
 800febc:	371c      	adds	r7, #28
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
	...

0800fec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d101      	bne.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fedc:	2302      	movs	r3, #2
 800fede:	e06d      	b.n	800ffbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2202      	movs	r2, #2
 800feec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	689b      	ldr	r3, [r3, #8]
 800fefe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a30      	ldr	r2, [pc, #192]	; (800ffc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d004      	beq.n	800ff14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	4a2f      	ldr	r2, [pc, #188]	; (800ffcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d108      	bne.n	800ff26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ff1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	68fa      	ldr	r2, [r7, #12]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	68fa      	ldr	r2, [r7, #12]
 800ff34:	4313      	orrs	r3, r2
 800ff36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	68fa      	ldr	r2, [r7, #12]
 800ff3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4a20      	ldr	r2, [pc, #128]	; (800ffc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d022      	beq.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff52:	d01d      	beq.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4a1d      	ldr	r2, [pc, #116]	; (800ffd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d018      	beq.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4a1c      	ldr	r2, [pc, #112]	; (800ffd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d013      	beq.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4a1a      	ldr	r2, [pc, #104]	; (800ffd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d00e      	beq.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a15      	ldr	r2, [pc, #84]	; (800ffcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d009      	beq.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a16      	ldr	r2, [pc, #88]	; (800ffdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d004      	beq.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a15      	ldr	r2, [pc, #84]	; (800ffe0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d10c      	bne.n	800ffaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	68ba      	ldr	r2, [r7, #8]
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3714      	adds	r7, #20
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr
 800ffc8:	40010000 	.word	0x40010000
 800ffcc:	40010400 	.word	0x40010400
 800ffd0:	40000400 	.word	0x40000400
 800ffd4:	40000800 	.word	0x40000800
 800ffd8:	40000c00 	.word	0x40000c00
 800ffdc:	40001800 	.word	0x40001800
 800ffe0:	40014000 	.word	0x40014000

0800ffe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b085      	sub	sp, #20
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ffee:	2300      	movs	r3, #0
 800fff0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d101      	bne.n	8010000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fffc:	2302      	movs	r3, #2
 800fffe:	e065      	b.n	80100cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2201      	movs	r2, #1
 8010004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	4313      	orrs	r3, r2
 8010014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	4313      	orrs	r3, r2
 8010022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	4313      	orrs	r3, r2
 8010030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4313      	orrs	r3, r2
 801003e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	691b      	ldr	r3, [r3, #16]
 801004a:	4313      	orrs	r3, r2
 801004c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	695b      	ldr	r3, [r3, #20]
 8010058:	4313      	orrs	r3, r2
 801005a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010066:	4313      	orrs	r3, r2
 8010068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	699b      	ldr	r3, [r3, #24]
 8010074:	041b      	lsls	r3, r3, #16
 8010076:	4313      	orrs	r3, r2
 8010078:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a16      	ldr	r2, [pc, #88]	; (80100d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d004      	beq.n	801008e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a14      	ldr	r2, [pc, #80]	; (80100dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d115      	bne.n	80100ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010098:	051b      	lsls	r3, r3, #20
 801009a:	4313      	orrs	r3, r2
 801009c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	69db      	ldr	r3, [r3, #28]
 80100a8:	4313      	orrs	r3, r2
 80100aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	6a1b      	ldr	r3, [r3, #32]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3714      	adds	r7, #20
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr
 80100d8:	40010000 	.word	0x40010000
 80100dc:	40010400 	.word	0x40010400

080100e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d101      	bne.n	801012e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801012a:	2301      	movs	r3, #1
 801012c:	e042      	b.n	80101b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010134:	2b00      	cmp	r3, #0
 8010136:	d106      	bne.n	8010146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2200      	movs	r2, #0
 801013c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f7f3 fbf7 	bl	8003934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2224      	movs	r2, #36	; 0x24
 801014a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f022 0201 	bic.w	r2, r2, #1
 801015c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010162:	2b00      	cmp	r3, #0
 8010164:	d002      	beq.n	801016c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f001 fc42 	bl	80119f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 fed7 	bl	8010f20 <UART_SetConfig>
 8010172:	4603      	mov	r3, r0
 8010174:	2b01      	cmp	r3, #1
 8010176:	d101      	bne.n	801017c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010178:	2301      	movs	r3, #1
 801017a:	e01b      	b.n	80101b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	685a      	ldr	r2, [r3, #4]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801018a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	689a      	ldr	r2, [r3, #8]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801019a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f042 0201 	orr.w	r2, r2, #1
 80101aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f001 fcc1 	bl	8011b34 <UART_CheckIdleState>
 80101b2:	4603      	mov	r3, r0
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b08a      	sub	sp, #40	; 0x28
 80101c0:	af02      	add	r7, sp, #8
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	603b      	str	r3, [r7, #0]
 80101c8:	4613      	mov	r3, r2
 80101ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101d2:	2b20      	cmp	r3, #32
 80101d4:	d17b      	bne.n	80102ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d002      	beq.n	80101e2 <HAL_UART_Transmit+0x26>
 80101dc:	88fb      	ldrh	r3, [r7, #6]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d101      	bne.n	80101e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80101e2:	2301      	movs	r3, #1
 80101e4:	e074      	b.n	80102d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2200      	movs	r2, #0
 80101ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2221      	movs	r2, #33	; 0x21
 80101f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80101f6:	f7f3 ff1b 	bl	8004030 <HAL_GetTick>
 80101fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	88fa      	ldrh	r2, [r7, #6]
 8010200:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	88fa      	ldrh	r2, [r7, #6]
 8010208:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010214:	d108      	bne.n	8010228 <HAL_UART_Transmit+0x6c>
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d104      	bne.n	8010228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801021e:	2300      	movs	r3, #0
 8010220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	61bb      	str	r3, [r7, #24]
 8010226:	e003      	b.n	8010230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801022c:	2300      	movs	r3, #0
 801022e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010230:	e030      	b.n	8010294 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	2200      	movs	r2, #0
 801023a:	2180      	movs	r1, #128	; 0x80
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f001 fd23 	bl	8011c88 <UART_WaitOnFlagUntilTimeout>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d005      	beq.n	8010254 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2220      	movs	r2, #32
 801024c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010250:	2303      	movs	r3, #3
 8010252:	e03d      	b.n	80102d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d10b      	bne.n	8010272 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	881b      	ldrh	r3, [r3, #0]
 801025e:	461a      	mov	r2, r3
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010268:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	3302      	adds	r3, #2
 801026e:	61bb      	str	r3, [r7, #24]
 8010270:	e007      	b.n	8010282 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	781a      	ldrb	r2, [r3, #0]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	3301      	adds	r3, #1
 8010280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010288:	b29b      	uxth	r3, r3
 801028a:	3b01      	subs	r3, #1
 801028c:	b29a      	uxth	r2, r3
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801029a:	b29b      	uxth	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1c8      	bne.n	8010232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	2200      	movs	r2, #0
 80102a8:	2140      	movs	r1, #64	; 0x40
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f001 fcec 	bl	8011c88 <UART_WaitOnFlagUntilTimeout>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d005      	beq.n	80102c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2220      	movs	r2, #32
 80102ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80102be:	2303      	movs	r3, #3
 80102c0:	e006      	b.n	80102d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2220      	movs	r2, #32
 80102c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80102ca:	2300      	movs	r3, #0
 80102cc:	e000      	b.n	80102d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80102ce:	2302      	movs	r3, #2
  }
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3720      	adds	r7, #32
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b08a      	sub	sp, #40	; 0x28
 80102dc:	af02      	add	r7, sp, #8
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	603b      	str	r3, [r7, #0]
 80102e4:	4613      	mov	r3, r2
 80102e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102ee:	2b20      	cmp	r3, #32
 80102f0:	f040 80b5 	bne.w	801045e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d002      	beq.n	8010300 <HAL_UART_Receive+0x28>
 80102fa:	88fb      	ldrh	r3, [r7, #6]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010300:	2301      	movs	r3, #1
 8010302:	e0ad      	b.n	8010460 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2222      	movs	r2, #34	; 0x22
 8010310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2200      	movs	r2, #0
 8010318:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801031a:	f7f3 fe89 	bl	8004030 <HAL_GetTick>
 801031e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	88fa      	ldrh	r2, [r7, #6]
 8010324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	88fa      	ldrh	r2, [r7, #6]
 801032c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010338:	d10e      	bne.n	8010358 <HAL_UART_Receive+0x80>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d105      	bne.n	801034e <HAL_UART_Receive+0x76>
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010348:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801034c:	e02d      	b.n	80103aa <HAL_UART_Receive+0xd2>
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	22ff      	movs	r2, #255	; 0xff
 8010352:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010356:	e028      	b.n	80103aa <HAL_UART_Receive+0xd2>
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	689b      	ldr	r3, [r3, #8]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d10d      	bne.n	801037c <HAL_UART_Receive+0xa4>
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d104      	bne.n	8010372 <HAL_UART_Receive+0x9a>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	22ff      	movs	r2, #255	; 0xff
 801036c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010370:	e01b      	b.n	80103aa <HAL_UART_Receive+0xd2>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	227f      	movs	r2, #127	; 0x7f
 8010376:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801037a:	e016      	b.n	80103aa <HAL_UART_Receive+0xd2>
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	689b      	ldr	r3, [r3, #8]
 8010380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010384:	d10d      	bne.n	80103a2 <HAL_UART_Receive+0xca>
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	691b      	ldr	r3, [r3, #16]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d104      	bne.n	8010398 <HAL_UART_Receive+0xc0>
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	227f      	movs	r2, #127	; 0x7f
 8010392:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010396:	e008      	b.n	80103aa <HAL_UART_Receive+0xd2>
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	223f      	movs	r2, #63	; 0x3f
 801039c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103a0:	e003      	b.n	80103aa <HAL_UART_Receive+0xd2>
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2200      	movs	r2, #0
 80103a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103ba:	d108      	bne.n	80103ce <HAL_UART_Receive+0xf6>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	691b      	ldr	r3, [r3, #16]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d104      	bne.n	80103ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80103c4:	2300      	movs	r3, #0
 80103c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	61bb      	str	r3, [r7, #24]
 80103cc:	e003      	b.n	80103d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80103d2:	2300      	movs	r3, #0
 80103d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80103d6:	e036      	b.n	8010446 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	2200      	movs	r2, #0
 80103e0:	2120      	movs	r1, #32
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f001 fc50 	bl	8011c88 <UART_WaitOnFlagUntilTimeout>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d005      	beq.n	80103fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2220      	movs	r2, #32
 80103f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80103f6:	2303      	movs	r3, #3
 80103f8:	e032      	b.n	8010460 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d10c      	bne.n	801041a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010406:	b29a      	uxth	r2, r3
 8010408:	8a7b      	ldrh	r3, [r7, #18]
 801040a:	4013      	ands	r3, r2
 801040c:	b29a      	uxth	r2, r3
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	3302      	adds	r3, #2
 8010416:	61bb      	str	r3, [r7, #24]
 8010418:	e00c      	b.n	8010434 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010420:	b2da      	uxtb	r2, r3
 8010422:	8a7b      	ldrh	r3, [r7, #18]
 8010424:	b2db      	uxtb	r3, r3
 8010426:	4013      	ands	r3, r2
 8010428:	b2da      	uxtb	r2, r3
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	3301      	adds	r3, #1
 8010432:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801043a:	b29b      	uxth	r3, r3
 801043c:	3b01      	subs	r3, #1
 801043e:	b29a      	uxth	r2, r3
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801044c:	b29b      	uxth	r3, r3
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1c2      	bne.n	80103d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2220      	movs	r2, #32
 8010456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	e000      	b.n	8010460 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801045e:	2302      	movs	r3, #2
  }
}
 8010460:	4618      	mov	r0, r3
 8010462:	3720      	adds	r7, #32
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b08a      	sub	sp, #40	; 0x28
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	4613      	mov	r3, r2
 8010474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801047c:	2b20      	cmp	r3, #32
 801047e:	d137      	bne.n	80104f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d002      	beq.n	801048c <HAL_UART_Receive_IT+0x24>
 8010486:	88fb      	ldrh	r3, [r7, #6]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d101      	bne.n	8010490 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801048c:	2301      	movs	r3, #1
 801048e:	e030      	b.n	80104f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2200      	movs	r2, #0
 8010494:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a18      	ldr	r2, [pc, #96]	; (80104fc <HAL_UART_Receive_IT+0x94>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d01f      	beq.n	80104e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d018      	beq.n	80104e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	e853 3f00 	ldrex	r3, [r3]
 80104ba:	613b      	str	r3, [r7, #16]
   return(result);
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80104c2:	627b      	str	r3, [r7, #36]	; 0x24
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	461a      	mov	r2, r3
 80104ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104cc:	623b      	str	r3, [r7, #32]
 80104ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d0:	69f9      	ldr	r1, [r7, #28]
 80104d2:	6a3a      	ldr	r2, [r7, #32]
 80104d4:	e841 2300 	strex	r3, r2, [r1]
 80104d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d1e6      	bne.n	80104ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80104e0:	88fb      	ldrh	r3, [r7, #6]
 80104e2:	461a      	mov	r2, r3
 80104e4:	68b9      	ldr	r1, [r7, #8]
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f001 fc3c 	bl	8011d64 <UART_Start_Receive_IT>
 80104ec:	4603      	mov	r3, r0
 80104ee:	e000      	b.n	80104f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80104f0:	2302      	movs	r3, #2
  }
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3728      	adds	r7, #40	; 0x28
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	58000c00 	.word	0x58000c00

08010500 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b08a      	sub	sp, #40	; 0x28
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	4613      	mov	r3, r2
 801050c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010514:	2b20      	cmp	r3, #32
 8010516:	d167      	bne.n	80105e8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d002      	beq.n	8010524 <HAL_UART_Transmit_DMA+0x24>
 801051e:	88fb      	ldrh	r3, [r7, #6]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d101      	bne.n	8010528 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010524:	2301      	movs	r3, #1
 8010526:	e060      	b.n	80105ea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	88fa      	ldrh	r2, [r7, #6]
 8010532:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	88fa      	ldrh	r2, [r7, #6]
 801053a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2200      	movs	r2, #0
 8010542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2221      	movs	r2, #33	; 0x21
 801054a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010552:	2b00      	cmp	r3, #0
 8010554:	d028      	beq.n	80105a8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801055a:	4a26      	ldr	r2, [pc, #152]	; (80105f4 <HAL_UART_Transmit_DMA+0xf4>)
 801055c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010562:	4a25      	ldr	r2, [pc, #148]	; (80105f8 <HAL_UART_Transmit_DMA+0xf8>)
 8010564:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801056a:	4a24      	ldr	r2, [pc, #144]	; (80105fc <HAL_UART_Transmit_DMA+0xfc>)
 801056c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010572:	2200      	movs	r2, #0
 8010574:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801057e:	4619      	mov	r1, r3
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	3328      	adds	r3, #40	; 0x28
 8010586:	461a      	mov	r2, r3
 8010588:	88fb      	ldrh	r3, [r7, #6]
 801058a:	f7f6 f9d5 	bl	8006938 <HAL_DMA_Start_IT>
 801058e:	4603      	mov	r3, r0
 8010590:	2b00      	cmp	r3, #0
 8010592:	d009      	beq.n	80105a8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2210      	movs	r2, #16
 8010598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2220      	movs	r2, #32
 80105a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80105a4:	2301      	movs	r3, #1
 80105a6:	e020      	b.n	80105ea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2240      	movs	r2, #64	; 0x40
 80105ae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3308      	adds	r3, #8
 80105b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	e853 3f00 	ldrex	r3, [r3]
 80105be:	613b      	str	r3, [r7, #16]
   return(result);
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105c6:	627b      	str	r3, [r7, #36]	; 0x24
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	3308      	adds	r3, #8
 80105ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105d0:	623a      	str	r2, [r7, #32]
 80105d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d4:	69f9      	ldr	r1, [r7, #28]
 80105d6:	6a3a      	ldr	r2, [r7, #32]
 80105d8:	e841 2300 	strex	r3, r2, [r1]
 80105dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80105de:	69bb      	ldr	r3, [r7, #24]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d1e5      	bne.n	80105b0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	e000      	b.n	80105ea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80105e8:	2302      	movs	r3, #2
  }
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3728      	adds	r7, #40	; 0x28
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	080120f9 	.word	0x080120f9
 80105f8:	0801218f 	.word	0x0801218f
 80105fc:	080121ab 	.word	0x080121ab

08010600 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b09a      	sub	sp, #104	; 0x68
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010610:	e853 3f00 	ldrex	r3, [r3]
 8010614:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801061c:	667b      	str	r3, [r7, #100]	; 0x64
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010626:	657b      	str	r3, [r7, #84]	; 0x54
 8010628:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801062c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801062e:	e841 2300 	strex	r3, r2, [r1]
 8010632:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1e6      	bne.n	8010608 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3308      	adds	r3, #8
 8010640:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801064a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801064c:	4b46      	ldr	r3, [pc, #280]	; (8010768 <HAL_UART_AbortReceive+0x168>)
 801064e:	4013      	ands	r3, r2
 8010650:	663b      	str	r3, [r7, #96]	; 0x60
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3308      	adds	r3, #8
 8010658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801065a:	643a      	str	r2, [r7, #64]	; 0x40
 801065c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010662:	e841 2300 	strex	r3, r2, [r1]
 8010666:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e5      	bne.n	801063a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010672:	2b01      	cmp	r3, #1
 8010674:	d118      	bne.n	80106a8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801067c:	6a3b      	ldr	r3, [r7, #32]
 801067e:	e853 3f00 	ldrex	r3, [r3]
 8010682:	61fb      	str	r3, [r7, #28]
   return(result);
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	f023 0310 	bic.w	r3, r3, #16
 801068a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	461a      	mov	r2, r3
 8010692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010696:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801069a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801069c:	e841 2300 	strex	r3, r2, [r1]
 80106a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d1e6      	bne.n	8010676 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	689b      	ldr	r3, [r3, #8]
 80106ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106b2:	2b40      	cmp	r3, #64	; 0x40
 80106b4:	d13b      	bne.n	801072e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3308      	adds	r3, #8
 80106bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	e853 3f00 	ldrex	r3, [r3]
 80106c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	3308      	adds	r3, #8
 80106d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106d6:	61ba      	str	r2, [r7, #24]
 80106d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106da:	6979      	ldr	r1, [r7, #20]
 80106dc:	69ba      	ldr	r2, [r7, #24]
 80106de:	e841 2300 	strex	r3, r2, [r1]
 80106e2:	613b      	str	r3, [r7, #16]
   return(result);
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d1e5      	bne.n	80106b6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d01c      	beq.n	801072e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106fa:	2200      	movs	r2, #0
 80106fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010704:	4618      	mov	r0, r3
 8010706:	f7f6 fb81 	bl	8006e0c <HAL_DMA_Abort>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d00e      	beq.n	801072e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010716:	4618      	mov	r0, r3
 8010718:	f7f8 f806 	bl	8008728 <HAL_DMA_GetError>
 801071c:	4603      	mov	r3, r0
 801071e:	2b20      	cmp	r3, #32
 8010720:	d105      	bne.n	801072e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2210      	movs	r2, #16
 8010726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801072a:	2303      	movs	r3, #3
 801072c:	e017      	b.n	801075e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	220f      	movs	r2, #15
 801073c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	699a      	ldr	r2, [r3, #24]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f042 0208 	orr.w	r2, r2, #8
 801074c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2220      	movs	r2, #32
 8010752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2200      	movs	r2, #0
 801075a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 801075c:	2300      	movs	r3, #0
}
 801075e:	4618      	mov	r0, r3
 8010760:	3768      	adds	r7, #104	; 0x68
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	effffffe 	.word	0xeffffffe

0801076c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b0ba      	sub	sp, #232	; 0xe8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	69db      	ldr	r3, [r3, #28]
 801077a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010792:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010796:	f640 030f 	movw	r3, #2063	; 0x80f
 801079a:	4013      	ands	r3, r2
 801079c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80107a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d11b      	bne.n	80107e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80107a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107ac:	f003 0320 	and.w	r3, r3, #32
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d015      	beq.n	80107e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80107b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107b8:	f003 0320 	and.w	r3, r3, #32
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d105      	bne.n	80107cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80107c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d009      	beq.n	80107e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f000 8377 	beq.w	8010ec4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	4798      	blx	r3
      }
      return;
 80107de:	e371      	b.n	8010ec4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80107e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f000 8123 	beq.w	8010a30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80107ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80107ee:	4b8d      	ldr	r3, [pc, #564]	; (8010a24 <HAL_UART_IRQHandler+0x2b8>)
 80107f0:	4013      	ands	r3, r2
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d106      	bne.n	8010804 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80107f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80107fa:	4b8b      	ldr	r3, [pc, #556]	; (8010a28 <HAL_UART_IRQHandler+0x2bc>)
 80107fc:	4013      	ands	r3, r2
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f000 8116 	beq.w	8010a30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010808:	f003 0301 	and.w	r3, r3, #1
 801080c:	2b00      	cmp	r3, #0
 801080e:	d011      	beq.n	8010834 <HAL_UART_IRQHandler+0xc8>
 8010810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00b      	beq.n	8010834 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2201      	movs	r2, #1
 8010822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801082a:	f043 0201 	orr.w	r2, r3, #1
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010838:	f003 0302 	and.w	r3, r3, #2
 801083c:	2b00      	cmp	r3, #0
 801083e:	d011      	beq.n	8010864 <HAL_UART_IRQHandler+0xf8>
 8010840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010844:	f003 0301 	and.w	r3, r3, #1
 8010848:	2b00      	cmp	r3, #0
 801084a:	d00b      	beq.n	8010864 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2202      	movs	r2, #2
 8010852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801085a:	f043 0204 	orr.w	r2, r3, #4
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010868:	f003 0304 	and.w	r3, r3, #4
 801086c:	2b00      	cmp	r3, #0
 801086e:	d011      	beq.n	8010894 <HAL_UART_IRQHandler+0x128>
 8010870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010874:	f003 0301 	and.w	r3, r3, #1
 8010878:	2b00      	cmp	r3, #0
 801087a:	d00b      	beq.n	8010894 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2204      	movs	r2, #4
 8010882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801088a:	f043 0202 	orr.w	r2, r3, #2
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010898:	f003 0308 	and.w	r3, r3, #8
 801089c:	2b00      	cmp	r3, #0
 801089e:	d017      	beq.n	80108d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80108a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108a4:	f003 0320 	and.w	r3, r3, #32
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d105      	bne.n	80108b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80108ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80108b0:	4b5c      	ldr	r3, [pc, #368]	; (8010a24 <HAL_UART_IRQHandler+0x2b8>)
 80108b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00b      	beq.n	80108d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2208      	movs	r2, #8
 80108be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108c6:	f043 0208 	orr.w	r2, r3, #8
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80108d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d012      	beq.n	8010902 <HAL_UART_IRQHandler+0x196>
 80108dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d00c      	beq.n	8010902 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108f8:	f043 0220 	orr.w	r2, r3, #32
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010908:	2b00      	cmp	r3, #0
 801090a:	f000 82dd 	beq.w	8010ec8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801090e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010912:	f003 0320 	and.w	r3, r3, #32
 8010916:	2b00      	cmp	r3, #0
 8010918:	d013      	beq.n	8010942 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801091a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801091e:	f003 0320 	and.w	r3, r3, #32
 8010922:	2b00      	cmp	r3, #0
 8010924:	d105      	bne.n	8010932 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801092e:	2b00      	cmp	r3, #0
 8010930:	d007      	beq.n	8010942 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010936:	2b00      	cmp	r3, #0
 8010938:	d003      	beq.n	8010942 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010956:	2b40      	cmp	r3, #64	; 0x40
 8010958:	d005      	beq.n	8010966 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801095a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801095e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010962:	2b00      	cmp	r3, #0
 8010964:	d054      	beq.n	8010a10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f001 fb60 	bl	801202c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010976:	2b40      	cmp	r3, #64	; 0x40
 8010978:	d146      	bne.n	8010a08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	3308      	adds	r3, #8
 8010980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010988:	e853 3f00 	ldrex	r3, [r3]
 801098c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	3308      	adds	r3, #8
 80109a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80109a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80109aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80109b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80109b6:	e841 2300 	strex	r3, r2, [r1]
 80109ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80109be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1d9      	bne.n	801097a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d017      	beq.n	8010a00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109d6:	4a15      	ldr	r2, [pc, #84]	; (8010a2c <HAL_UART_IRQHandler+0x2c0>)
 80109d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7f6 fd31 	bl	8007448 <HAL_DMA_Abort_IT>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d019      	beq.n	8010a20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80109fa:	4610      	mov	r0, r2
 80109fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109fe:	e00f      	b.n	8010a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 fa77 	bl	8010ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a06:	e00b      	b.n	8010a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f000 fa73 	bl	8010ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a0e:	e007      	b.n	8010a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 fa6f 	bl	8010ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010a1e:	e253      	b.n	8010ec8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a20:	bf00      	nop
    return;
 8010a22:	e251      	b.n	8010ec8 <HAL_UART_IRQHandler+0x75c>
 8010a24:	10000001 	.word	0x10000001
 8010a28:	04000120 	.word	0x04000120
 8010a2c:	0801222b 	.word	0x0801222b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	f040 81e7 	bne.w	8010e08 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a3e:	f003 0310 	and.w	r3, r3, #16
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f000 81e0 	beq.w	8010e08 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a4c:	f003 0310 	and.w	r3, r3, #16
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 81d9 	beq.w	8010e08 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2210      	movs	r2, #16
 8010a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a68:	2b40      	cmp	r3, #64	; 0x40
 8010a6a:	f040 8151 	bne.w	8010d10 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a96      	ldr	r2, [pc, #600]	; (8010cd0 <HAL_UART_IRQHandler+0x564>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d068      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a93      	ldr	r2, [pc, #588]	; (8010cd4 <HAL_UART_IRQHandler+0x568>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d061      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4a91      	ldr	r2, [pc, #580]	; (8010cd8 <HAL_UART_IRQHandler+0x56c>)
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d05a      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a8e      	ldr	r2, [pc, #568]	; (8010cdc <HAL_UART_IRQHandler+0x570>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d053      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	4a8c      	ldr	r2, [pc, #560]	; (8010ce0 <HAL_UART_IRQHandler+0x574>)
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	d04c      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a89      	ldr	r2, [pc, #548]	; (8010ce4 <HAL_UART_IRQHandler+0x578>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d045      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4a87      	ldr	r2, [pc, #540]	; (8010ce8 <HAL_UART_IRQHandler+0x57c>)
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d03e      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4a84      	ldr	r2, [pc, #528]	; (8010cec <HAL_UART_IRQHandler+0x580>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d037      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a82      	ldr	r2, [pc, #520]	; (8010cf0 <HAL_UART_IRQHandler+0x584>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d030      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a7f      	ldr	r2, [pc, #508]	; (8010cf4 <HAL_UART_IRQHandler+0x588>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d029      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4a7d      	ldr	r2, [pc, #500]	; (8010cf8 <HAL_UART_IRQHandler+0x58c>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d022      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4a7a      	ldr	r2, [pc, #488]	; (8010cfc <HAL_UART_IRQHandler+0x590>)
 8010b12:	4293      	cmp	r3, r2
 8010b14:	d01b      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	4a78      	ldr	r2, [pc, #480]	; (8010d00 <HAL_UART_IRQHandler+0x594>)
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d014      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4a75      	ldr	r2, [pc, #468]	; (8010d04 <HAL_UART_IRQHandler+0x598>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d00d      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a73      	ldr	r2, [pc, #460]	; (8010d08 <HAL_UART_IRQHandler+0x59c>)
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d006      	beq.n	8010b4e <HAL_UART_IRQHandler+0x3e2>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	4a70      	ldr	r2, [pc, #448]	; (8010d0c <HAL_UART_IRQHandler+0x5a0>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d106      	bne.n	8010b5c <HAL_UART_IRQHandler+0x3f0>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	e005      	b.n	8010b68 <HAL_UART_IRQHandler+0x3fc>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	f000 81ab 	beq.w	8010ecc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b80:	429a      	cmp	r2, r3
 8010b82:	f080 81a3 	bcs.w	8010ecc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b96:	69db      	ldr	r3, [r3, #28]
 8010b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b9c:	f000 8087 	beq.w	8010cae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bac:	e853 3f00 	ldrex	r3, [r3]
 8010bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010bce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010bda:	e841 2300 	strex	r3, r2, [r1]
 8010bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1da      	bne.n	8010ba0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	3308      	adds	r3, #8
 8010bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bf4:	e853 3f00 	ldrex	r3, [r3]
 8010bf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010bfc:	f023 0301 	bic.w	r3, r3, #1
 8010c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	3308      	adds	r3, #8
 8010c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010c0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010c12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c1a:	e841 2300 	strex	r3, r2, [r1]
 8010c1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1e1      	bne.n	8010bea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	3308      	adds	r3, #8
 8010c2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c30:	e853 3f00 	ldrex	r3, [r3]
 8010c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3308      	adds	r3, #8
 8010c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010c4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010c52:	e841 2300 	strex	r3, r2, [r1]
 8010c56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1e3      	bne.n	8010c26 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2220      	movs	r2, #32
 8010c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c74:	e853 3f00 	ldrex	r3, [r3]
 8010c78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c7c:	f023 0310 	bic.w	r3, r3, #16
 8010c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	461a      	mov	r2, r3
 8010c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c96:	e841 2300 	strex	r3, r2, [r1]
 8010c9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1e4      	bne.n	8010c6c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7f6 f8af 	bl	8006e0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2202      	movs	r2, #2
 8010cb2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f000 f91d 	bl	8010f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010cce:	e0fd      	b.n	8010ecc <HAL_UART_IRQHandler+0x760>
 8010cd0:	40020010 	.word	0x40020010
 8010cd4:	40020028 	.word	0x40020028
 8010cd8:	40020040 	.word	0x40020040
 8010cdc:	40020058 	.word	0x40020058
 8010ce0:	40020070 	.word	0x40020070
 8010ce4:	40020088 	.word	0x40020088
 8010ce8:	400200a0 	.word	0x400200a0
 8010cec:	400200b8 	.word	0x400200b8
 8010cf0:	40020410 	.word	0x40020410
 8010cf4:	40020428 	.word	0x40020428
 8010cf8:	40020440 	.word	0x40020440
 8010cfc:	40020458 	.word	0x40020458
 8010d00:	40020470 	.word	0x40020470
 8010d04:	40020488 	.word	0x40020488
 8010d08:	400204a0 	.word	0x400204a0
 8010d0c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	1ad3      	subs	r3, r2, r3
 8010d20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 80cf 	beq.w	8010ed0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010d32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f000 80ca 	beq.w	8010ed0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d44:	e853 3f00 	ldrex	r3, [r3]
 8010d48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010d50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	461a      	mov	r2, r3
 8010d5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8010d60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d66:	e841 2300 	strex	r3, r2, [r1]
 8010d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d1e4      	bne.n	8010d3c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	3308      	adds	r3, #8
 8010d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7c:	e853 3f00 	ldrex	r3, [r3]
 8010d80:	623b      	str	r3, [r7, #32]
   return(result);
 8010d82:	6a3a      	ldr	r2, [r7, #32]
 8010d84:	4b55      	ldr	r3, [pc, #340]	; (8010edc <HAL_UART_IRQHandler+0x770>)
 8010d86:	4013      	ands	r3, r2
 8010d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	3308      	adds	r3, #8
 8010d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010d96:	633a      	str	r2, [r7, #48]	; 0x30
 8010d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d9e:	e841 2300 	strex	r3, r2, [r1]
 8010da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d1e3      	bne.n	8010d72 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2220      	movs	r2, #32
 8010dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2200      	movs	r2, #0
 8010db6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	e853 3f00 	ldrex	r3, [r3]
 8010dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f023 0310 	bic.w	r3, r3, #16
 8010dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	461a      	mov	r2, r3
 8010ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010de0:	61fb      	str	r3, [r7, #28]
 8010de2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de4:	69b9      	ldr	r1, [r7, #24]
 8010de6:	69fa      	ldr	r2, [r7, #28]
 8010de8:	e841 2300 	strex	r3, r2, [r1]
 8010dec:	617b      	str	r3, [r7, #20]
   return(result);
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d1e4      	bne.n	8010dbe <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2202      	movs	r2, #2
 8010df8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010dfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010dfe:	4619      	mov	r1, r3
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f000 f881 	bl	8010f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e06:	e063      	b.n	8010ed0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00e      	beq.n	8010e32 <HAL_UART_IRQHandler+0x6c6>
 8010e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d008      	beq.n	8010e32 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010e28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f001 ff5a 	bl	8012ce4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e30:	e051      	b.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d014      	beq.n	8010e68 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d105      	bne.n	8010e56 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d008      	beq.n	8010e68 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d03a      	beq.n	8010ed4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	4798      	blx	r3
    }
    return;
 8010e66:	e035      	b.n	8010ed4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d009      	beq.n	8010e88 <HAL_UART_IRQHandler+0x71c>
 8010e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d003      	beq.n	8010e88 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f001 f9e8 	bl	8012256 <UART_EndTransmit_IT>
    return;
 8010e86:	e026      	b.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d009      	beq.n	8010ea8 <HAL_UART_IRQHandler+0x73c>
 8010e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d003      	beq.n	8010ea8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f001 ff33 	bl	8012d0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ea6:	e016      	b.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d010      	beq.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
 8010eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	da0c      	bge.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f001 ff1b 	bl	8012cf8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ec2:	e008      	b.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010ec4:	bf00      	nop
 8010ec6:	e006      	b.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010ec8:	bf00      	nop
 8010eca:	e004      	b.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010ecc:	bf00      	nop
 8010ece:	e002      	b.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010ed0:	bf00      	nop
 8010ed2:	e000      	b.n	8010ed6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010ed4:	bf00      	nop
  }
}
 8010ed6:	37e8      	adds	r7, #232	; 0xe8
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	effffffe 	.word	0xeffffffe

08010ee0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010ee8:	bf00      	nop
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010efc:	bf00      	nop
 8010efe:	370c      	adds	r7, #12
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr

08010f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	460b      	mov	r3, r1
 8010f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f14:	bf00      	nop
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f24:	b092      	sub	sp, #72	; 0x48
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	689a      	ldr	r2, [r3, #8]
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	431a      	orrs	r2, r3
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	695b      	ldr	r3, [r3, #20]
 8010f3e:	431a      	orrs	r2, r3
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	69db      	ldr	r3, [r3, #28]
 8010f44:	4313      	orrs	r3, r2
 8010f46:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	4bbe      	ldr	r3, [pc, #760]	; (8011248 <UART_SetConfig+0x328>)
 8010f50:	4013      	ands	r3, r2
 8010f52:	697a      	ldr	r2, [r7, #20]
 8010f54:	6812      	ldr	r2, [r2, #0]
 8010f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f58:	430b      	orrs	r3, r1
 8010f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	68da      	ldr	r2, [r3, #12]
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	430a      	orrs	r2, r1
 8010f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	699b      	ldr	r3, [r3, #24]
 8010f76:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4ab3      	ldr	r2, [pc, #716]	; (801124c <UART_SetConfig+0x32c>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d004      	beq.n	8010f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	6a1b      	ldr	r3, [r3, #32]
 8010f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	689a      	ldr	r2, [r3, #8]
 8010f92:	4baf      	ldr	r3, [pc, #700]	; (8011250 <UART_SetConfig+0x330>)
 8010f94:	4013      	ands	r3, r2
 8010f96:	697a      	ldr	r2, [r7, #20]
 8010f98:	6812      	ldr	r2, [r2, #0]
 8010f9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f9c:	430b      	orrs	r3, r1
 8010f9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa6:	f023 010f 	bic.w	r1, r3, #15
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	430a      	orrs	r2, r1
 8010fb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4aa6      	ldr	r2, [pc, #664]	; (8011254 <UART_SetConfig+0x334>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d177      	bne.n	80110b0 <UART_SetConfig+0x190>
 8010fc0:	4ba5      	ldr	r3, [pc, #660]	; (8011258 <UART_SetConfig+0x338>)
 8010fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fc8:	2b28      	cmp	r3, #40	; 0x28
 8010fca:	d86d      	bhi.n	80110a8 <UART_SetConfig+0x188>
 8010fcc:	a201      	add	r2, pc, #4	; (adr r2, 8010fd4 <UART_SetConfig+0xb4>)
 8010fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd2:	bf00      	nop
 8010fd4:	08011079 	.word	0x08011079
 8010fd8:	080110a9 	.word	0x080110a9
 8010fdc:	080110a9 	.word	0x080110a9
 8010fe0:	080110a9 	.word	0x080110a9
 8010fe4:	080110a9 	.word	0x080110a9
 8010fe8:	080110a9 	.word	0x080110a9
 8010fec:	080110a9 	.word	0x080110a9
 8010ff0:	080110a9 	.word	0x080110a9
 8010ff4:	08011081 	.word	0x08011081
 8010ff8:	080110a9 	.word	0x080110a9
 8010ffc:	080110a9 	.word	0x080110a9
 8011000:	080110a9 	.word	0x080110a9
 8011004:	080110a9 	.word	0x080110a9
 8011008:	080110a9 	.word	0x080110a9
 801100c:	080110a9 	.word	0x080110a9
 8011010:	080110a9 	.word	0x080110a9
 8011014:	08011089 	.word	0x08011089
 8011018:	080110a9 	.word	0x080110a9
 801101c:	080110a9 	.word	0x080110a9
 8011020:	080110a9 	.word	0x080110a9
 8011024:	080110a9 	.word	0x080110a9
 8011028:	080110a9 	.word	0x080110a9
 801102c:	080110a9 	.word	0x080110a9
 8011030:	080110a9 	.word	0x080110a9
 8011034:	08011091 	.word	0x08011091
 8011038:	080110a9 	.word	0x080110a9
 801103c:	080110a9 	.word	0x080110a9
 8011040:	080110a9 	.word	0x080110a9
 8011044:	080110a9 	.word	0x080110a9
 8011048:	080110a9 	.word	0x080110a9
 801104c:	080110a9 	.word	0x080110a9
 8011050:	080110a9 	.word	0x080110a9
 8011054:	08011099 	.word	0x08011099
 8011058:	080110a9 	.word	0x080110a9
 801105c:	080110a9 	.word	0x080110a9
 8011060:	080110a9 	.word	0x080110a9
 8011064:	080110a9 	.word	0x080110a9
 8011068:	080110a9 	.word	0x080110a9
 801106c:	080110a9 	.word	0x080110a9
 8011070:	080110a9 	.word	0x080110a9
 8011074:	080110a1 	.word	0x080110a1
 8011078:	2301      	movs	r3, #1
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e222      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011080:	2304      	movs	r3, #4
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e21e      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011088:	2308      	movs	r3, #8
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e21a      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011090:	2310      	movs	r3, #16
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011096:	e216      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011098:	2320      	movs	r3, #32
 801109a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109e:	e212      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80110a0:	2340      	movs	r3, #64	; 0x40
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a6:	e20e      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80110a8:	2380      	movs	r3, #128	; 0x80
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e20a      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a69      	ldr	r2, [pc, #420]	; (801125c <UART_SetConfig+0x33c>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d130      	bne.n	801111c <UART_SetConfig+0x1fc>
 80110ba:	4b67      	ldr	r3, [pc, #412]	; (8011258 <UART_SetConfig+0x338>)
 80110bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110be:	f003 0307 	and.w	r3, r3, #7
 80110c2:	2b05      	cmp	r3, #5
 80110c4:	d826      	bhi.n	8011114 <UART_SetConfig+0x1f4>
 80110c6:	a201      	add	r2, pc, #4	; (adr r2, 80110cc <UART_SetConfig+0x1ac>)
 80110c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110cc:	080110e5 	.word	0x080110e5
 80110d0:	080110ed 	.word	0x080110ed
 80110d4:	080110f5 	.word	0x080110f5
 80110d8:	080110fd 	.word	0x080110fd
 80110dc:	08011105 	.word	0x08011105
 80110e0:	0801110d 	.word	0x0801110d
 80110e4:	2300      	movs	r3, #0
 80110e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ea:	e1ec      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80110ec:	2304      	movs	r3, #4
 80110ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f2:	e1e8      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80110f4:	2308      	movs	r3, #8
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fa:	e1e4      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80110fc:	2310      	movs	r3, #16
 80110fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011102:	e1e0      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011104:	2320      	movs	r3, #32
 8011106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110a:	e1dc      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801110c:	2340      	movs	r3, #64	; 0x40
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e1d8      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011114:	2380      	movs	r3, #128	; 0x80
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e1d4      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a4f      	ldr	r2, [pc, #316]	; (8011260 <UART_SetConfig+0x340>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d130      	bne.n	8011188 <UART_SetConfig+0x268>
 8011126:	4b4c      	ldr	r3, [pc, #304]	; (8011258 <UART_SetConfig+0x338>)
 8011128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801112a:	f003 0307 	and.w	r3, r3, #7
 801112e:	2b05      	cmp	r3, #5
 8011130:	d826      	bhi.n	8011180 <UART_SetConfig+0x260>
 8011132:	a201      	add	r2, pc, #4	; (adr r2, 8011138 <UART_SetConfig+0x218>)
 8011134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011138:	08011151 	.word	0x08011151
 801113c:	08011159 	.word	0x08011159
 8011140:	08011161 	.word	0x08011161
 8011144:	08011169 	.word	0x08011169
 8011148:	08011171 	.word	0x08011171
 801114c:	08011179 	.word	0x08011179
 8011150:	2300      	movs	r3, #0
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e1b6      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011158:	2304      	movs	r3, #4
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e1b2      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011160:	2308      	movs	r3, #8
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e1ae      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011168:	2310      	movs	r3, #16
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116e:	e1aa      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011170:	2320      	movs	r3, #32
 8011172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011176:	e1a6      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011178:	2340      	movs	r3, #64	; 0x40
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e1a2      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011180:	2380      	movs	r3, #128	; 0x80
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e19e      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4a35      	ldr	r2, [pc, #212]	; (8011264 <UART_SetConfig+0x344>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d130      	bne.n	80111f4 <UART_SetConfig+0x2d4>
 8011192:	4b31      	ldr	r3, [pc, #196]	; (8011258 <UART_SetConfig+0x338>)
 8011194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011196:	f003 0307 	and.w	r3, r3, #7
 801119a:	2b05      	cmp	r3, #5
 801119c:	d826      	bhi.n	80111ec <UART_SetConfig+0x2cc>
 801119e:	a201      	add	r2, pc, #4	; (adr r2, 80111a4 <UART_SetConfig+0x284>)
 80111a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a4:	080111bd 	.word	0x080111bd
 80111a8:	080111c5 	.word	0x080111c5
 80111ac:	080111cd 	.word	0x080111cd
 80111b0:	080111d5 	.word	0x080111d5
 80111b4:	080111dd 	.word	0x080111dd
 80111b8:	080111e5 	.word	0x080111e5
 80111bc:	2300      	movs	r3, #0
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e180      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80111c4:	2304      	movs	r3, #4
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e17c      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80111cc:	2308      	movs	r3, #8
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e178      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80111d4:	2310      	movs	r3, #16
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e174      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80111dc:	2320      	movs	r3, #32
 80111de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e2:	e170      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80111e4:	2340      	movs	r3, #64	; 0x40
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e16c      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80111ec:	2380      	movs	r3, #128	; 0x80
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e168      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a1b      	ldr	r2, [pc, #108]	; (8011268 <UART_SetConfig+0x348>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d142      	bne.n	8011284 <UART_SetConfig+0x364>
 80111fe:	4b16      	ldr	r3, [pc, #88]	; (8011258 <UART_SetConfig+0x338>)
 8011200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011202:	f003 0307 	and.w	r3, r3, #7
 8011206:	2b05      	cmp	r3, #5
 8011208:	d838      	bhi.n	801127c <UART_SetConfig+0x35c>
 801120a:	a201      	add	r2, pc, #4	; (adr r2, 8011210 <UART_SetConfig+0x2f0>)
 801120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011210:	08011229 	.word	0x08011229
 8011214:	08011231 	.word	0x08011231
 8011218:	08011239 	.word	0x08011239
 801121c:	08011241 	.word	0x08011241
 8011220:	0801126d 	.word	0x0801126d
 8011224:	08011275 	.word	0x08011275
 8011228:	2300      	movs	r3, #0
 801122a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122e:	e14a      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011230:	2304      	movs	r3, #4
 8011232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011236:	e146      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011238:	2308      	movs	r3, #8
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e142      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011240:	2310      	movs	r3, #16
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011246:	e13e      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011248:	cfff69f3 	.word	0xcfff69f3
 801124c:	58000c00 	.word	0x58000c00
 8011250:	11fff4ff 	.word	0x11fff4ff
 8011254:	40011000 	.word	0x40011000
 8011258:	58024400 	.word	0x58024400
 801125c:	40004400 	.word	0x40004400
 8011260:	40004800 	.word	0x40004800
 8011264:	40004c00 	.word	0x40004c00
 8011268:	40005000 	.word	0x40005000
 801126c:	2320      	movs	r3, #32
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e128      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011274:	2340      	movs	r3, #64	; 0x40
 8011276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127a:	e124      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801127c:	2380      	movs	r3, #128	; 0x80
 801127e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011282:	e120      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4acb      	ldr	r2, [pc, #812]	; (80115b8 <UART_SetConfig+0x698>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d176      	bne.n	801137c <UART_SetConfig+0x45c>
 801128e:	4bcb      	ldr	r3, [pc, #812]	; (80115bc <UART_SetConfig+0x69c>)
 8011290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011296:	2b28      	cmp	r3, #40	; 0x28
 8011298:	d86c      	bhi.n	8011374 <UART_SetConfig+0x454>
 801129a:	a201      	add	r2, pc, #4	; (adr r2, 80112a0 <UART_SetConfig+0x380>)
 801129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a0:	08011345 	.word	0x08011345
 80112a4:	08011375 	.word	0x08011375
 80112a8:	08011375 	.word	0x08011375
 80112ac:	08011375 	.word	0x08011375
 80112b0:	08011375 	.word	0x08011375
 80112b4:	08011375 	.word	0x08011375
 80112b8:	08011375 	.word	0x08011375
 80112bc:	08011375 	.word	0x08011375
 80112c0:	0801134d 	.word	0x0801134d
 80112c4:	08011375 	.word	0x08011375
 80112c8:	08011375 	.word	0x08011375
 80112cc:	08011375 	.word	0x08011375
 80112d0:	08011375 	.word	0x08011375
 80112d4:	08011375 	.word	0x08011375
 80112d8:	08011375 	.word	0x08011375
 80112dc:	08011375 	.word	0x08011375
 80112e0:	08011355 	.word	0x08011355
 80112e4:	08011375 	.word	0x08011375
 80112e8:	08011375 	.word	0x08011375
 80112ec:	08011375 	.word	0x08011375
 80112f0:	08011375 	.word	0x08011375
 80112f4:	08011375 	.word	0x08011375
 80112f8:	08011375 	.word	0x08011375
 80112fc:	08011375 	.word	0x08011375
 8011300:	0801135d 	.word	0x0801135d
 8011304:	08011375 	.word	0x08011375
 8011308:	08011375 	.word	0x08011375
 801130c:	08011375 	.word	0x08011375
 8011310:	08011375 	.word	0x08011375
 8011314:	08011375 	.word	0x08011375
 8011318:	08011375 	.word	0x08011375
 801131c:	08011375 	.word	0x08011375
 8011320:	08011365 	.word	0x08011365
 8011324:	08011375 	.word	0x08011375
 8011328:	08011375 	.word	0x08011375
 801132c:	08011375 	.word	0x08011375
 8011330:	08011375 	.word	0x08011375
 8011334:	08011375 	.word	0x08011375
 8011338:	08011375 	.word	0x08011375
 801133c:	08011375 	.word	0x08011375
 8011340:	0801136d 	.word	0x0801136d
 8011344:	2301      	movs	r3, #1
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e0bc      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801134c:	2304      	movs	r3, #4
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e0b8      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011354:	2308      	movs	r3, #8
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e0b4      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801135c:	2310      	movs	r3, #16
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e0b0      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011364:	2320      	movs	r3, #32
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e0ac      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801136c:	2340      	movs	r3, #64	; 0x40
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e0a8      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011374:	2380      	movs	r3, #128	; 0x80
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e0a4      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4a8f      	ldr	r2, [pc, #572]	; (80115c0 <UART_SetConfig+0x6a0>)
 8011382:	4293      	cmp	r3, r2
 8011384:	d130      	bne.n	80113e8 <UART_SetConfig+0x4c8>
 8011386:	4b8d      	ldr	r3, [pc, #564]	; (80115bc <UART_SetConfig+0x69c>)
 8011388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801138a:	f003 0307 	and.w	r3, r3, #7
 801138e:	2b05      	cmp	r3, #5
 8011390:	d826      	bhi.n	80113e0 <UART_SetConfig+0x4c0>
 8011392:	a201      	add	r2, pc, #4	; (adr r2, 8011398 <UART_SetConfig+0x478>)
 8011394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011398:	080113b1 	.word	0x080113b1
 801139c:	080113b9 	.word	0x080113b9
 80113a0:	080113c1 	.word	0x080113c1
 80113a4:	080113c9 	.word	0x080113c9
 80113a8:	080113d1 	.word	0x080113d1
 80113ac:	080113d9 	.word	0x080113d9
 80113b0:	2300      	movs	r3, #0
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e086      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80113b8:	2304      	movs	r3, #4
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e082      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80113c0:	2308      	movs	r3, #8
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e07e      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80113c8:	2310      	movs	r3, #16
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e07a      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80113d0:	2320      	movs	r3, #32
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e076      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80113d8:	2340      	movs	r3, #64	; 0x40
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113de:	e072      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80113e0:	2380      	movs	r3, #128	; 0x80
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e6:	e06e      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4a75      	ldr	r2, [pc, #468]	; (80115c4 <UART_SetConfig+0x6a4>)
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d130      	bne.n	8011454 <UART_SetConfig+0x534>
 80113f2:	4b72      	ldr	r3, [pc, #456]	; (80115bc <UART_SetConfig+0x69c>)
 80113f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113f6:	f003 0307 	and.w	r3, r3, #7
 80113fa:	2b05      	cmp	r3, #5
 80113fc:	d826      	bhi.n	801144c <UART_SetConfig+0x52c>
 80113fe:	a201      	add	r2, pc, #4	; (adr r2, 8011404 <UART_SetConfig+0x4e4>)
 8011400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011404:	0801141d 	.word	0x0801141d
 8011408:	08011425 	.word	0x08011425
 801140c:	0801142d 	.word	0x0801142d
 8011410:	08011435 	.word	0x08011435
 8011414:	0801143d 	.word	0x0801143d
 8011418:	08011445 	.word	0x08011445
 801141c:	2300      	movs	r3, #0
 801141e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011422:	e050      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011424:	2304      	movs	r3, #4
 8011426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142a:	e04c      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801142c:	2308      	movs	r3, #8
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e048      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011434:	2310      	movs	r3, #16
 8011436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143a:	e044      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801143c:	2320      	movs	r3, #32
 801143e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011442:	e040      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011444:	2340      	movs	r3, #64	; 0x40
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144a:	e03c      	b.n	80114c6 <UART_SetConfig+0x5a6>
 801144c:	2380      	movs	r3, #128	; 0x80
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011452:	e038      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4a5b      	ldr	r2, [pc, #364]	; (80115c8 <UART_SetConfig+0x6a8>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d130      	bne.n	80114c0 <UART_SetConfig+0x5a0>
 801145e:	4b57      	ldr	r3, [pc, #348]	; (80115bc <UART_SetConfig+0x69c>)
 8011460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011462:	f003 0307 	and.w	r3, r3, #7
 8011466:	2b05      	cmp	r3, #5
 8011468:	d826      	bhi.n	80114b8 <UART_SetConfig+0x598>
 801146a:	a201      	add	r2, pc, #4	; (adr r2, 8011470 <UART_SetConfig+0x550>)
 801146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011470:	08011489 	.word	0x08011489
 8011474:	08011491 	.word	0x08011491
 8011478:	08011499 	.word	0x08011499
 801147c:	080114a1 	.word	0x080114a1
 8011480:	080114a9 	.word	0x080114a9
 8011484:	080114b1 	.word	0x080114b1
 8011488:	2302      	movs	r3, #2
 801148a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148e:	e01a      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011490:	2304      	movs	r3, #4
 8011492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011496:	e016      	b.n	80114c6 <UART_SetConfig+0x5a6>
 8011498:	2308      	movs	r3, #8
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e012      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80114a0:	2310      	movs	r3, #16
 80114a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a6:	e00e      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80114a8:	2320      	movs	r3, #32
 80114aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ae:	e00a      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80114b0:	2340      	movs	r3, #64	; 0x40
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b6:	e006      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80114b8:	2380      	movs	r3, #128	; 0x80
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114be:	e002      	b.n	80114c6 <UART_SetConfig+0x5a6>
 80114c0:	2380      	movs	r3, #128	; 0x80
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	4a3f      	ldr	r2, [pc, #252]	; (80115c8 <UART_SetConfig+0x6a8>)
 80114cc:	4293      	cmp	r3, r2
 80114ce:	f040 80f8 	bne.w	80116c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80114d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114d6:	2b20      	cmp	r3, #32
 80114d8:	dc46      	bgt.n	8011568 <UART_SetConfig+0x648>
 80114da:	2b02      	cmp	r3, #2
 80114dc:	f2c0 8082 	blt.w	80115e4 <UART_SetConfig+0x6c4>
 80114e0:	3b02      	subs	r3, #2
 80114e2:	2b1e      	cmp	r3, #30
 80114e4:	d87e      	bhi.n	80115e4 <UART_SetConfig+0x6c4>
 80114e6:	a201      	add	r2, pc, #4	; (adr r2, 80114ec <UART_SetConfig+0x5cc>)
 80114e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ec:	0801156f 	.word	0x0801156f
 80114f0:	080115e5 	.word	0x080115e5
 80114f4:	08011577 	.word	0x08011577
 80114f8:	080115e5 	.word	0x080115e5
 80114fc:	080115e5 	.word	0x080115e5
 8011500:	080115e5 	.word	0x080115e5
 8011504:	08011587 	.word	0x08011587
 8011508:	080115e5 	.word	0x080115e5
 801150c:	080115e5 	.word	0x080115e5
 8011510:	080115e5 	.word	0x080115e5
 8011514:	080115e5 	.word	0x080115e5
 8011518:	080115e5 	.word	0x080115e5
 801151c:	080115e5 	.word	0x080115e5
 8011520:	080115e5 	.word	0x080115e5
 8011524:	08011597 	.word	0x08011597
 8011528:	080115e5 	.word	0x080115e5
 801152c:	080115e5 	.word	0x080115e5
 8011530:	080115e5 	.word	0x080115e5
 8011534:	080115e5 	.word	0x080115e5
 8011538:	080115e5 	.word	0x080115e5
 801153c:	080115e5 	.word	0x080115e5
 8011540:	080115e5 	.word	0x080115e5
 8011544:	080115e5 	.word	0x080115e5
 8011548:	080115e5 	.word	0x080115e5
 801154c:	080115e5 	.word	0x080115e5
 8011550:	080115e5 	.word	0x080115e5
 8011554:	080115e5 	.word	0x080115e5
 8011558:	080115e5 	.word	0x080115e5
 801155c:	080115e5 	.word	0x080115e5
 8011560:	080115e5 	.word	0x080115e5
 8011564:	080115d7 	.word	0x080115d7
 8011568:	2b40      	cmp	r3, #64	; 0x40
 801156a:	d037      	beq.n	80115dc <UART_SetConfig+0x6bc>
 801156c:	e03a      	b.n	80115e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801156e:	f7fb fce5 	bl	800cf3c <HAL_RCCEx_GetD3PCLK1Freq>
 8011572:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011574:	e03c      	b.n	80115f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801157a:	4618      	mov	r0, r3
 801157c:	f7fb fcf4 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011584:	e034      	b.n	80115f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011586:	f107 0318 	add.w	r3, r7, #24
 801158a:	4618      	mov	r0, r3
 801158c:	f7fb fe40 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011594:	e02c      	b.n	80115f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011596:	4b09      	ldr	r3, [pc, #36]	; (80115bc <UART_SetConfig+0x69c>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f003 0320 	and.w	r3, r3, #32
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d016      	beq.n	80115d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115a2:	4b06      	ldr	r3, [pc, #24]	; (80115bc <UART_SetConfig+0x69c>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	08db      	lsrs	r3, r3, #3
 80115a8:	f003 0303 	and.w	r3, r3, #3
 80115ac:	4a07      	ldr	r2, [pc, #28]	; (80115cc <UART_SetConfig+0x6ac>)
 80115ae:	fa22 f303 	lsr.w	r3, r2, r3
 80115b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115b4:	e01c      	b.n	80115f0 <UART_SetConfig+0x6d0>
 80115b6:	bf00      	nop
 80115b8:	40011400 	.word	0x40011400
 80115bc:	58024400 	.word	0x58024400
 80115c0:	40007800 	.word	0x40007800
 80115c4:	40007c00 	.word	0x40007c00
 80115c8:	58000c00 	.word	0x58000c00
 80115cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80115d0:	4b9d      	ldr	r3, [pc, #628]	; (8011848 <UART_SetConfig+0x928>)
 80115d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115d4:	e00c      	b.n	80115f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115d6:	4b9d      	ldr	r3, [pc, #628]	; (801184c <UART_SetConfig+0x92c>)
 80115d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115da:	e009      	b.n	80115f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e2:	e005      	b.n	80115f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80115e4:	2300      	movs	r3, #0
 80115e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115e8:	2301      	movs	r3, #1
 80115ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80115f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f000 81de 	beq.w	80119b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115fc:	4a94      	ldr	r2, [pc, #592]	; (8011850 <UART_SetConfig+0x930>)
 80115fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011602:	461a      	mov	r2, r3
 8011604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011606:	fbb3 f3f2 	udiv	r3, r3, r2
 801160a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	685a      	ldr	r2, [r3, #4]
 8011610:	4613      	mov	r3, r2
 8011612:	005b      	lsls	r3, r3, #1
 8011614:	4413      	add	r3, r2
 8011616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011618:	429a      	cmp	r2, r3
 801161a:	d305      	bcc.n	8011628 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011624:	429a      	cmp	r2, r3
 8011626:	d903      	bls.n	8011630 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011628:	2301      	movs	r3, #1
 801162a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801162e:	e1c1      	b.n	80119b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011632:	2200      	movs	r2, #0
 8011634:	60bb      	str	r3, [r7, #8]
 8011636:	60fa      	str	r2, [r7, #12]
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801163c:	4a84      	ldr	r2, [pc, #528]	; (8011850 <UART_SetConfig+0x930>)
 801163e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011642:	b29b      	uxth	r3, r3
 8011644:	2200      	movs	r2, #0
 8011646:	603b      	str	r3, [r7, #0]
 8011648:	607a      	str	r2, [r7, #4]
 801164a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801164e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011652:	f7ee fe45 	bl	80002e0 <__aeabi_uldivmod>
 8011656:	4602      	mov	r2, r0
 8011658:	460b      	mov	r3, r1
 801165a:	4610      	mov	r0, r2
 801165c:	4619      	mov	r1, r3
 801165e:	f04f 0200 	mov.w	r2, #0
 8011662:	f04f 0300 	mov.w	r3, #0
 8011666:	020b      	lsls	r3, r1, #8
 8011668:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801166c:	0202      	lsls	r2, r0, #8
 801166e:	6979      	ldr	r1, [r7, #20]
 8011670:	6849      	ldr	r1, [r1, #4]
 8011672:	0849      	lsrs	r1, r1, #1
 8011674:	2000      	movs	r0, #0
 8011676:	460c      	mov	r4, r1
 8011678:	4605      	mov	r5, r0
 801167a:	eb12 0804 	adds.w	r8, r2, r4
 801167e:	eb43 0905 	adc.w	r9, r3, r5
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	2200      	movs	r2, #0
 8011688:	469a      	mov	sl, r3
 801168a:	4693      	mov	fp, r2
 801168c:	4652      	mov	r2, sl
 801168e:	465b      	mov	r3, fp
 8011690:	4640      	mov	r0, r8
 8011692:	4649      	mov	r1, r9
 8011694:	f7ee fe24 	bl	80002e0 <__aeabi_uldivmod>
 8011698:	4602      	mov	r2, r0
 801169a:	460b      	mov	r3, r1
 801169c:	4613      	mov	r3, r2
 801169e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80116a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80116a6:	d308      	bcc.n	80116ba <UART_SetConfig+0x79a>
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80116ae:	d204      	bcs.n	80116ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116b6:	60da      	str	r2, [r3, #12]
 80116b8:	e17c      	b.n	80119b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80116ba:	2301      	movs	r3, #1
 80116bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116c0:	e178      	b.n	80119b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	69db      	ldr	r3, [r3, #28]
 80116c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80116ca:	f040 80c5 	bne.w	8011858 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80116ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116d2:	2b20      	cmp	r3, #32
 80116d4:	dc48      	bgt.n	8011768 <UART_SetConfig+0x848>
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	db7b      	blt.n	80117d2 <UART_SetConfig+0x8b2>
 80116da:	2b20      	cmp	r3, #32
 80116dc:	d879      	bhi.n	80117d2 <UART_SetConfig+0x8b2>
 80116de:	a201      	add	r2, pc, #4	; (adr r2, 80116e4 <UART_SetConfig+0x7c4>)
 80116e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e4:	0801176f 	.word	0x0801176f
 80116e8:	08011777 	.word	0x08011777
 80116ec:	080117d3 	.word	0x080117d3
 80116f0:	080117d3 	.word	0x080117d3
 80116f4:	0801177f 	.word	0x0801177f
 80116f8:	080117d3 	.word	0x080117d3
 80116fc:	080117d3 	.word	0x080117d3
 8011700:	080117d3 	.word	0x080117d3
 8011704:	0801178f 	.word	0x0801178f
 8011708:	080117d3 	.word	0x080117d3
 801170c:	080117d3 	.word	0x080117d3
 8011710:	080117d3 	.word	0x080117d3
 8011714:	080117d3 	.word	0x080117d3
 8011718:	080117d3 	.word	0x080117d3
 801171c:	080117d3 	.word	0x080117d3
 8011720:	080117d3 	.word	0x080117d3
 8011724:	0801179f 	.word	0x0801179f
 8011728:	080117d3 	.word	0x080117d3
 801172c:	080117d3 	.word	0x080117d3
 8011730:	080117d3 	.word	0x080117d3
 8011734:	080117d3 	.word	0x080117d3
 8011738:	080117d3 	.word	0x080117d3
 801173c:	080117d3 	.word	0x080117d3
 8011740:	080117d3 	.word	0x080117d3
 8011744:	080117d3 	.word	0x080117d3
 8011748:	080117d3 	.word	0x080117d3
 801174c:	080117d3 	.word	0x080117d3
 8011750:	080117d3 	.word	0x080117d3
 8011754:	080117d3 	.word	0x080117d3
 8011758:	080117d3 	.word	0x080117d3
 801175c:	080117d3 	.word	0x080117d3
 8011760:	080117d3 	.word	0x080117d3
 8011764:	080117c5 	.word	0x080117c5
 8011768:	2b40      	cmp	r3, #64	; 0x40
 801176a:	d02e      	beq.n	80117ca <UART_SetConfig+0x8aa>
 801176c:	e031      	b.n	80117d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801176e:	f7f9 fbed 	bl	800af4c <HAL_RCC_GetPCLK1Freq>
 8011772:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011774:	e033      	b.n	80117de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011776:	f7f9 fbff 	bl	800af78 <HAL_RCC_GetPCLK2Freq>
 801177a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801177c:	e02f      	b.n	80117de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011782:	4618      	mov	r0, r3
 8011784:	f7fb fbf0 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801178c:	e027      	b.n	80117de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801178e:	f107 0318 	add.w	r3, r7, #24
 8011792:	4618      	mov	r0, r3
 8011794:	f7fb fd3c 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011798:	69fb      	ldr	r3, [r7, #28]
 801179a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801179c:	e01f      	b.n	80117de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801179e:	4b2d      	ldr	r3, [pc, #180]	; (8011854 <UART_SetConfig+0x934>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f003 0320 	and.w	r3, r3, #32
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d009      	beq.n	80117be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117aa:	4b2a      	ldr	r3, [pc, #168]	; (8011854 <UART_SetConfig+0x934>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	08db      	lsrs	r3, r3, #3
 80117b0:	f003 0303 	and.w	r3, r3, #3
 80117b4:	4a24      	ldr	r2, [pc, #144]	; (8011848 <UART_SetConfig+0x928>)
 80117b6:	fa22 f303 	lsr.w	r3, r2, r3
 80117ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117bc:	e00f      	b.n	80117de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80117be:	4b22      	ldr	r3, [pc, #136]	; (8011848 <UART_SetConfig+0x928>)
 80117c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c2:	e00c      	b.n	80117de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117c4:	4b21      	ldr	r3, [pc, #132]	; (801184c <UART_SetConfig+0x92c>)
 80117c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c8:	e009      	b.n	80117de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117d0:	e005      	b.n	80117de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80117d2:	2300      	movs	r3, #0
 80117d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80117d6:	2301      	movs	r3, #1
 80117d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80117dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80117de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f000 80e7 	beq.w	80119b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ea:	4a19      	ldr	r2, [pc, #100]	; (8011850 <UART_SetConfig+0x930>)
 80117ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117f0:	461a      	mov	r2, r3
 80117f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80117f8:	005a      	lsls	r2, r3, #1
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	085b      	lsrs	r3, r3, #1
 8011800:	441a      	add	r2, r3
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	fbb2 f3f3 	udiv	r3, r2, r3
 801180a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801180c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180e:	2b0f      	cmp	r3, #15
 8011810:	d916      	bls.n	8011840 <UART_SetConfig+0x920>
 8011812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011818:	d212      	bcs.n	8011840 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181c:	b29b      	uxth	r3, r3
 801181e:	f023 030f 	bic.w	r3, r3, #15
 8011822:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011826:	085b      	lsrs	r3, r3, #1
 8011828:	b29b      	uxth	r3, r3
 801182a:	f003 0307 	and.w	r3, r3, #7
 801182e:	b29a      	uxth	r2, r3
 8011830:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011832:	4313      	orrs	r3, r2
 8011834:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801183c:	60da      	str	r2, [r3, #12]
 801183e:	e0b9      	b.n	80119b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011840:	2301      	movs	r3, #1
 8011842:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011846:	e0b5      	b.n	80119b4 <UART_SetConfig+0xa94>
 8011848:	03d09000 	.word	0x03d09000
 801184c:	003d0900 	.word	0x003d0900
 8011850:	08017928 	.word	0x08017928
 8011854:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011858:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801185c:	2b20      	cmp	r3, #32
 801185e:	dc49      	bgt.n	80118f4 <UART_SetConfig+0x9d4>
 8011860:	2b00      	cmp	r3, #0
 8011862:	db7c      	blt.n	801195e <UART_SetConfig+0xa3e>
 8011864:	2b20      	cmp	r3, #32
 8011866:	d87a      	bhi.n	801195e <UART_SetConfig+0xa3e>
 8011868:	a201      	add	r2, pc, #4	; (adr r2, 8011870 <UART_SetConfig+0x950>)
 801186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801186e:	bf00      	nop
 8011870:	080118fb 	.word	0x080118fb
 8011874:	08011903 	.word	0x08011903
 8011878:	0801195f 	.word	0x0801195f
 801187c:	0801195f 	.word	0x0801195f
 8011880:	0801190b 	.word	0x0801190b
 8011884:	0801195f 	.word	0x0801195f
 8011888:	0801195f 	.word	0x0801195f
 801188c:	0801195f 	.word	0x0801195f
 8011890:	0801191b 	.word	0x0801191b
 8011894:	0801195f 	.word	0x0801195f
 8011898:	0801195f 	.word	0x0801195f
 801189c:	0801195f 	.word	0x0801195f
 80118a0:	0801195f 	.word	0x0801195f
 80118a4:	0801195f 	.word	0x0801195f
 80118a8:	0801195f 	.word	0x0801195f
 80118ac:	0801195f 	.word	0x0801195f
 80118b0:	0801192b 	.word	0x0801192b
 80118b4:	0801195f 	.word	0x0801195f
 80118b8:	0801195f 	.word	0x0801195f
 80118bc:	0801195f 	.word	0x0801195f
 80118c0:	0801195f 	.word	0x0801195f
 80118c4:	0801195f 	.word	0x0801195f
 80118c8:	0801195f 	.word	0x0801195f
 80118cc:	0801195f 	.word	0x0801195f
 80118d0:	0801195f 	.word	0x0801195f
 80118d4:	0801195f 	.word	0x0801195f
 80118d8:	0801195f 	.word	0x0801195f
 80118dc:	0801195f 	.word	0x0801195f
 80118e0:	0801195f 	.word	0x0801195f
 80118e4:	0801195f 	.word	0x0801195f
 80118e8:	0801195f 	.word	0x0801195f
 80118ec:	0801195f 	.word	0x0801195f
 80118f0:	08011951 	.word	0x08011951
 80118f4:	2b40      	cmp	r3, #64	; 0x40
 80118f6:	d02e      	beq.n	8011956 <UART_SetConfig+0xa36>
 80118f8:	e031      	b.n	801195e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80118fa:	f7f9 fb27 	bl	800af4c <HAL_RCC_GetPCLK1Freq>
 80118fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011900:	e033      	b.n	801196a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011902:	f7f9 fb39 	bl	800af78 <HAL_RCC_GetPCLK2Freq>
 8011906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011908:	e02f      	b.n	801196a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801190e:	4618      	mov	r0, r3
 8011910:	f7fb fb2a 	bl	800cf68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011918:	e027      	b.n	801196a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801191a:	f107 0318 	add.w	r3, r7, #24
 801191e:	4618      	mov	r0, r3
 8011920:	f7fb fc76 	bl	800d210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011924:	69fb      	ldr	r3, [r7, #28]
 8011926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011928:	e01f      	b.n	801196a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801192a:	4b2d      	ldr	r3, [pc, #180]	; (80119e0 <UART_SetConfig+0xac0>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f003 0320 	and.w	r3, r3, #32
 8011932:	2b00      	cmp	r3, #0
 8011934:	d009      	beq.n	801194a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011936:	4b2a      	ldr	r3, [pc, #168]	; (80119e0 <UART_SetConfig+0xac0>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	08db      	lsrs	r3, r3, #3
 801193c:	f003 0303 	and.w	r3, r3, #3
 8011940:	4a28      	ldr	r2, [pc, #160]	; (80119e4 <UART_SetConfig+0xac4>)
 8011942:	fa22 f303 	lsr.w	r3, r2, r3
 8011946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011948:	e00f      	b.n	801196a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801194a:	4b26      	ldr	r3, [pc, #152]	; (80119e4 <UART_SetConfig+0xac4>)
 801194c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801194e:	e00c      	b.n	801196a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011950:	4b25      	ldr	r3, [pc, #148]	; (80119e8 <UART_SetConfig+0xac8>)
 8011952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011954:	e009      	b.n	801196a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801195a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801195c:	e005      	b.n	801196a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801195e:	2300      	movs	r3, #0
 8011960:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011962:	2301      	movs	r3, #1
 8011964:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011968:	bf00      	nop
    }

    if (pclk != 0U)
 801196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801196c:	2b00      	cmp	r3, #0
 801196e:	d021      	beq.n	80119b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011974:	4a1d      	ldr	r2, [pc, #116]	; (80119ec <UART_SetConfig+0xacc>)
 8011976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801197a:	461a      	mov	r2, r3
 801197c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801197e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	085b      	lsrs	r3, r3, #1
 8011988:	441a      	add	r2, r3
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011992:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011996:	2b0f      	cmp	r3, #15
 8011998:	d909      	bls.n	80119ae <UART_SetConfig+0xa8e>
 801199a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119a0:	d205      	bcs.n	80119ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80119a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a4:	b29a      	uxth	r2, r3
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	60da      	str	r2, [r3, #12]
 80119ac:	e002      	b.n	80119b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80119ae:	2301      	movs	r3, #1
 80119b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	2201      	movs	r2, #1
 80119b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	2201      	movs	r2, #1
 80119c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	2200      	movs	r2, #0
 80119c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	2200      	movs	r2, #0
 80119ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80119d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3748      	adds	r7, #72	; 0x48
 80119d8:	46bd      	mov	sp, r7
 80119da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80119de:	bf00      	nop
 80119e0:	58024400 	.word	0x58024400
 80119e4:	03d09000 	.word	0x03d09000
 80119e8:	003d0900 	.word	0x003d0900
 80119ec:	08017928 	.word	0x08017928

080119f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80119f0:	b480      	push	{r7}
 80119f2:	b083      	sub	sp, #12
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119fc:	f003 0308 	and.w	r3, r3, #8
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00a      	beq.n	8011a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	430a      	orrs	r2, r1
 8011a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a1e:	f003 0301 	and.w	r3, r3, #1
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00a      	beq.n	8011a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	430a      	orrs	r2, r1
 8011a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a40:	f003 0302 	and.w	r3, r3, #2
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00a      	beq.n	8011a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	430a      	orrs	r2, r1
 8011a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a62:	f003 0304 	and.w	r3, r3, #4
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d00a      	beq.n	8011a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	430a      	orrs	r2, r1
 8011a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a84:	f003 0310 	and.w	r3, r3, #16
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d00a      	beq.n	8011aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	689b      	ldr	r3, [r3, #8]
 8011a92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	430a      	orrs	r2, r1
 8011aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aa6:	f003 0320 	and.w	r3, r3, #32
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00a      	beq.n	8011ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	430a      	orrs	r2, r1
 8011ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d01a      	beq.n	8011b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	430a      	orrs	r2, r1
 8011ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011aee:	d10a      	bne.n	8011b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	430a      	orrs	r2, r1
 8011b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d00a      	beq.n	8011b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	430a      	orrs	r2, r1
 8011b26:	605a      	str	r2, [r3, #4]
  }
}
 8011b28:	bf00      	nop
 8011b2a:	370c      	adds	r7, #12
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b098      	sub	sp, #96	; 0x60
 8011b38:	af02      	add	r7, sp, #8
 8011b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011b44:	f7f2 fa74 	bl	8004030 <HAL_GetTick>
 8011b48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f003 0308 	and.w	r3, r3, #8
 8011b54:	2b08      	cmp	r3, #8
 8011b56:	d12f      	bne.n	8011bb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b5c:	9300      	str	r3, [sp, #0]
 8011b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b60:	2200      	movs	r2, #0
 8011b62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 f88e 	bl	8011c88 <UART_WaitOnFlagUntilTimeout>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d022      	beq.n	8011bb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7a:	e853 3f00 	ldrex	r3, [r3]
 8011b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b86:	653b      	str	r3, [r7, #80]	; 0x50
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b90:	647b      	str	r3, [r7, #68]	; 0x44
 8011b92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b98:	e841 2300 	strex	r3, r2, [r1]
 8011b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d1e6      	bne.n	8011b72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2220      	movs	r2, #32
 8011ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011bb4:	2303      	movs	r3, #3
 8011bb6:	e063      	b.n	8011c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f003 0304 	and.w	r3, r3, #4
 8011bc2:	2b04      	cmp	r3, #4
 8011bc4:	d149      	bne.n	8011c5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011bc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011bca:	9300      	str	r3, [sp, #0]
 8011bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f000 f857 	bl	8011c88 <UART_WaitOnFlagUntilTimeout>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d03c      	beq.n	8011c5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be8:	e853 3f00 	ldrex	r3, [r3]
 8011bec:	623b      	str	r3, [r7, #32]
   return(result);
 8011bee:	6a3b      	ldr	r3, [r7, #32]
 8011bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8011c00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c06:	e841 2300 	strex	r3, r2, [r1]
 8011c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1e6      	bne.n	8011be0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	3308      	adds	r3, #8
 8011c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	e853 3f00 	ldrex	r3, [r3]
 8011c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f023 0301 	bic.w	r3, r3, #1
 8011c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	3308      	adds	r3, #8
 8011c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c32:	61fa      	str	r2, [r7, #28]
 8011c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c36:	69b9      	ldr	r1, [r7, #24]
 8011c38:	69fa      	ldr	r2, [r7, #28]
 8011c3a:	e841 2300 	strex	r3, r2, [r1]
 8011c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1e5      	bne.n	8011c12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2220      	movs	r2, #32
 8011c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2200      	movs	r2, #0
 8011c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c56:	2303      	movs	r3, #3
 8011c58:	e012      	b.n	8011c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2220      	movs	r2, #32
 8011c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2220      	movs	r2, #32
 8011c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2200      	movs	r2, #0
 8011c74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c7e:	2300      	movs	r3, #0
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3758      	adds	r7, #88	; 0x58
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	603b      	str	r3, [r7, #0]
 8011c94:	4613      	mov	r3, r2
 8011c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c98:	e04f      	b.n	8011d3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c9a:	69bb      	ldr	r3, [r7, #24]
 8011c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ca0:	d04b      	beq.n	8011d3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ca2:	f7f2 f9c5 	bl	8004030 <HAL_GetTick>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	1ad3      	subs	r3, r2, r3
 8011cac:	69ba      	ldr	r2, [r7, #24]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d302      	bcc.n	8011cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d101      	bne.n	8011cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011cb8:	2303      	movs	r3, #3
 8011cba:	e04e      	b.n	8011d5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	f003 0304 	and.w	r3, r3, #4
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d037      	beq.n	8011d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	2b80      	cmp	r3, #128	; 0x80
 8011cce:	d034      	beq.n	8011d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	2b40      	cmp	r3, #64	; 0x40
 8011cd4:	d031      	beq.n	8011d3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	69db      	ldr	r3, [r3, #28]
 8011cdc:	f003 0308 	and.w	r3, r3, #8
 8011ce0:	2b08      	cmp	r3, #8
 8011ce2:	d110      	bne.n	8011d06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2208      	movs	r2, #8
 8011cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cec:	68f8      	ldr	r0, [r7, #12]
 8011cee:	f000 f99d 	bl	801202c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2208      	movs	r2, #8
 8011cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011d02:	2301      	movs	r3, #1
 8011d04:	e029      	b.n	8011d5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	69db      	ldr	r3, [r3, #28]
 8011d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011d14:	d111      	bne.n	8011d3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f000 f983 	bl	801202c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2220      	movs	r2, #32
 8011d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2200      	movs	r2, #0
 8011d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011d36:	2303      	movs	r3, #3
 8011d38:	e00f      	b.n	8011d5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	69da      	ldr	r2, [r3, #28]
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	4013      	ands	r3, r2
 8011d44:	68ba      	ldr	r2, [r7, #8]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	bf0c      	ite	eq
 8011d4a:	2301      	moveq	r3, #1
 8011d4c:	2300      	movne	r3, #0
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	461a      	mov	r2, r3
 8011d52:	79fb      	ldrb	r3, [r7, #7]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d0a0      	beq.n	8011c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d58:	2300      	movs	r3, #0
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
	...

08011d64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d64:	b480      	push	{r7}
 8011d66:	b0a3      	sub	sp, #140	; 0x8c
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	4613      	mov	r3, r2
 8011d70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	68ba      	ldr	r2, [r7, #8]
 8011d76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	88fa      	ldrh	r2, [r7, #6]
 8011d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	88fa      	ldrh	r2, [r7, #6]
 8011d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	689b      	ldr	r3, [r3, #8]
 8011d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d96:	d10e      	bne.n	8011db6 <UART_Start_Receive_IT+0x52>
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	691b      	ldr	r3, [r3, #16]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d105      	bne.n	8011dac <UART_Start_Receive_IT+0x48>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011da6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011daa:	e02d      	b.n	8011e08 <UART_Start_Receive_IT+0xa4>
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	22ff      	movs	r2, #255	; 0xff
 8011db0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011db4:	e028      	b.n	8011e08 <UART_Start_Receive_IT+0xa4>
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d10d      	bne.n	8011dda <UART_Start_Receive_IT+0x76>
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	691b      	ldr	r3, [r3, #16]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d104      	bne.n	8011dd0 <UART_Start_Receive_IT+0x6c>
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	22ff      	movs	r2, #255	; 0xff
 8011dca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dce:	e01b      	b.n	8011e08 <UART_Start_Receive_IT+0xa4>
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	227f      	movs	r2, #127	; 0x7f
 8011dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dd8:	e016      	b.n	8011e08 <UART_Start_Receive_IT+0xa4>
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011de2:	d10d      	bne.n	8011e00 <UART_Start_Receive_IT+0x9c>
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	691b      	ldr	r3, [r3, #16]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d104      	bne.n	8011df6 <UART_Start_Receive_IT+0x92>
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	227f      	movs	r2, #127	; 0x7f
 8011df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011df4:	e008      	b.n	8011e08 <UART_Start_Receive_IT+0xa4>
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	223f      	movs	r2, #63	; 0x3f
 8011dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dfe:	e003      	b.n	8011e08 <UART_Start_Receive_IT+0xa4>
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2200      	movs	r2, #0
 8011e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	2222      	movs	r2, #34	; 0x22
 8011e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	3308      	adds	r3, #8
 8011e1e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e22:	e853 3f00 	ldrex	r3, [r3]
 8011e26:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e2a:	f043 0301 	orr.w	r3, r3, #1
 8011e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	3308      	adds	r3, #8
 8011e38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011e3c:	673a      	str	r2, [r7, #112]	; 0x70
 8011e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011e42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e44:	e841 2300 	strex	r3, r2, [r1]
 8011e48:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d1e3      	bne.n	8011e18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e58:	d14f      	bne.n	8011efa <UART_Start_Receive_IT+0x196>
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e60:	88fa      	ldrh	r2, [r7, #6]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d349      	bcc.n	8011efa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	689b      	ldr	r3, [r3, #8]
 8011e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e6e:	d107      	bne.n	8011e80 <UART_Start_Receive_IT+0x11c>
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	691b      	ldr	r3, [r3, #16]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d103      	bne.n	8011e80 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	4a47      	ldr	r2, [pc, #284]	; (8011f98 <UART_Start_Receive_IT+0x234>)
 8011e7c:	675a      	str	r2, [r3, #116]	; 0x74
 8011e7e:	e002      	b.n	8011e86 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	4a46      	ldr	r2, [pc, #280]	; (8011f9c <UART_Start_Receive_IT+0x238>)
 8011e84:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	691b      	ldr	r3, [r3, #16]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d01a      	beq.n	8011ec4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e96:	e853 3f00 	ldrex	r3, [r3]
 8011e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011eb2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011eb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011eb8:	e841 2300 	strex	r3, r2, [r1]
 8011ebc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d1e4      	bne.n	8011e8e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	3308      	adds	r3, #8
 8011eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ece:	e853 3f00 	ldrex	r3, [r3]
 8011ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011eda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	3308      	adds	r3, #8
 8011ee2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011ee4:	64ba      	str	r2, [r7, #72]	; 0x48
 8011ee6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011eec:	e841 2300 	strex	r3, r2, [r1]
 8011ef0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d1e5      	bne.n	8011ec4 <UART_Start_Receive_IT+0x160>
 8011ef8:	e046      	b.n	8011f88 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	689b      	ldr	r3, [r3, #8]
 8011efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f02:	d107      	bne.n	8011f14 <UART_Start_Receive_IT+0x1b0>
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	691b      	ldr	r3, [r3, #16]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d103      	bne.n	8011f14 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	4a24      	ldr	r2, [pc, #144]	; (8011fa0 <UART_Start_Receive_IT+0x23c>)
 8011f10:	675a      	str	r2, [r3, #116]	; 0x74
 8011f12:	e002      	b.n	8011f1a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	4a23      	ldr	r2, [pc, #140]	; (8011fa4 <UART_Start_Receive_IT+0x240>)
 8011f18:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	691b      	ldr	r3, [r3, #16]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d019      	beq.n	8011f56 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2a:	e853 3f00 	ldrex	r3, [r3]
 8011f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011f36:	677b      	str	r3, [r7, #116]	; 0x74
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f40:	637b      	str	r3, [r7, #52]	; 0x34
 8011f42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f48:	e841 2300 	strex	r3, r2, [r1]
 8011f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d1e6      	bne.n	8011f22 <UART_Start_Receive_IT+0x1be>
 8011f54:	e018      	b.n	8011f88 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	e853 3f00 	ldrex	r3, [r3]
 8011f62:	613b      	str	r3, [r7, #16]
   return(result);
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	f043 0320 	orr.w	r3, r3, #32
 8011f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	461a      	mov	r2, r3
 8011f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f74:	623b      	str	r3, [r7, #32]
 8011f76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f78:	69f9      	ldr	r1, [r7, #28]
 8011f7a:	6a3a      	ldr	r2, [r7, #32]
 8011f7c:	e841 2300 	strex	r3, r2, [r1]
 8011f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f82:	69bb      	ldr	r3, [r7, #24]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1e6      	bne.n	8011f56 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	378c      	adds	r7, #140	; 0x8c
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f94:	4770      	bx	lr
 8011f96:	bf00      	nop
 8011f98:	0801297d 	.word	0x0801297d
 8011f9c:	0801261d 	.word	0x0801261d
 8011fa0:	08012465 	.word	0x08012465
 8011fa4:	080122ad 	.word	0x080122ad

08011fa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b08f      	sub	sp, #60	; 0x3c
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb6:	6a3b      	ldr	r3, [r7, #32]
 8011fb8:	e853 3f00 	ldrex	r3, [r3]
 8011fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fd0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fd6:	e841 2300 	strex	r3, r2, [r1]
 8011fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1e6      	bne.n	8011fb0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	3308      	adds	r3, #8
 8011fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	e853 3f00 	ldrex	r3, [r3]
 8011ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	3308      	adds	r3, #8
 8012000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012002:	61ba      	str	r2, [r7, #24]
 8012004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012006:	6979      	ldr	r1, [r7, #20]
 8012008:	69ba      	ldr	r2, [r7, #24]
 801200a:	e841 2300 	strex	r3, r2, [r1]
 801200e:	613b      	str	r3, [r7, #16]
   return(result);
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d1e5      	bne.n	8011fe2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2220      	movs	r2, #32
 801201a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801201e:	bf00      	nop
 8012020:	373c      	adds	r7, #60	; 0x3c
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr
	...

0801202c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801202c:	b480      	push	{r7}
 801202e:	b095      	sub	sp, #84	; 0x54
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801203c:	e853 3f00 	ldrex	r3, [r3]
 8012040:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012048:	64fb      	str	r3, [r7, #76]	; 0x4c
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	461a      	mov	r2, r3
 8012050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012052:	643b      	str	r3, [r7, #64]	; 0x40
 8012054:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012056:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801205a:	e841 2300 	strex	r3, r2, [r1]
 801205e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1e6      	bne.n	8012034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	3308      	adds	r3, #8
 801206c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801206e:	6a3b      	ldr	r3, [r7, #32]
 8012070:	e853 3f00 	ldrex	r3, [r3]
 8012074:	61fb      	str	r3, [r7, #28]
   return(result);
 8012076:	69fa      	ldr	r2, [r7, #28]
 8012078:	4b1e      	ldr	r3, [pc, #120]	; (80120f4 <UART_EndRxTransfer+0xc8>)
 801207a:	4013      	ands	r3, r2
 801207c:	64bb      	str	r3, [r7, #72]	; 0x48
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	3308      	adds	r3, #8
 8012084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012088:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801208a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801208c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801208e:	e841 2300 	strex	r3, r2, [r1]
 8012092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1e5      	bne.n	8012066 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d118      	bne.n	80120d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	e853 3f00 	ldrex	r3, [r3]
 80120ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	f023 0310 	bic.w	r3, r3, #16
 80120b6:	647b      	str	r3, [r7, #68]	; 0x44
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	461a      	mov	r2, r3
 80120be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120c0:	61bb      	str	r3, [r7, #24]
 80120c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c4:	6979      	ldr	r1, [r7, #20]
 80120c6:	69ba      	ldr	r2, [r7, #24]
 80120c8:	e841 2300 	strex	r3, r2, [r1]
 80120cc:	613b      	str	r3, [r7, #16]
   return(result);
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d1e6      	bne.n	80120a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2220      	movs	r2, #32
 80120d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2200      	movs	r2, #0
 80120e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80120e8:	bf00      	nop
 80120ea:	3754      	adds	r7, #84	; 0x54
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr
 80120f4:	effffffe 	.word	0xeffffffe

080120f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b090      	sub	sp, #64	; 0x40
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012104:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	69db      	ldr	r3, [r3, #28]
 801210a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801210e:	d037      	beq.n	8012180 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8012110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012112:	2200      	movs	r2, #0
 8012114:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	3308      	adds	r3, #8
 801211e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	e853 3f00 	ldrex	r3, [r3]
 8012126:	623b      	str	r3, [r7, #32]
   return(result);
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801212e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	3308      	adds	r3, #8
 8012136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012138:	633a      	str	r2, [r7, #48]	; 0x30
 801213a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801213c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801213e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012140:	e841 2300 	strex	r3, r2, [r1]
 8012144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012148:	2b00      	cmp	r3, #0
 801214a:	d1e5      	bne.n	8012118 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801214c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	e853 3f00 	ldrex	r3, [r3]
 8012158:	60fb      	str	r3, [r7, #12]
   return(result);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012160:	637b      	str	r3, [r7, #52]	; 0x34
 8012162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	461a      	mov	r2, r3
 8012168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801216a:	61fb      	str	r3, [r7, #28]
 801216c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801216e:	69b9      	ldr	r1, [r7, #24]
 8012170:	69fa      	ldr	r2, [r7, #28]
 8012172:	e841 2300 	strex	r3, r2, [r1]
 8012176:	617b      	str	r3, [r7, #20]
   return(result);
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d1e6      	bne.n	801214c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801217e:	e002      	b.n	8012186 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8012180:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012182:	f7f0 f99b 	bl	80024bc <HAL_UART_TxCpltCallback>
}
 8012186:	bf00      	nop
 8012188:	3740      	adds	r7, #64	; 0x40
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}

0801218e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801218e:	b580      	push	{r7, lr}
 8012190:	b084      	sub	sp, #16
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801219a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f7fe fe9f 	bl	8010ee0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121a2:	bf00      	nop
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}

080121aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b086      	sub	sp, #24
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	689b      	ldr	r3, [r3, #8]
 80121ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121d2:	2b80      	cmp	r3, #128	; 0x80
 80121d4:	d109      	bne.n	80121ea <UART_DMAError+0x40>
 80121d6:	693b      	ldr	r3, [r7, #16]
 80121d8:	2b21      	cmp	r3, #33	; 0x21
 80121da:	d106      	bne.n	80121ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	2200      	movs	r2, #0
 80121e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80121e4:	6978      	ldr	r0, [r7, #20]
 80121e6:	f7ff fedf 	bl	8011fa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	689b      	ldr	r3, [r3, #8]
 80121f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121f4:	2b40      	cmp	r3, #64	; 0x40
 80121f6:	d109      	bne.n	801220c <UART_DMAError+0x62>
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2b22      	cmp	r3, #34	; 0x22
 80121fc:	d106      	bne.n	801220c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	2200      	movs	r2, #0
 8012202:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012206:	6978      	ldr	r0, [r7, #20]
 8012208:	f7ff ff10 	bl	801202c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012212:	f043 0210 	orr.w	r2, r3, #16
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801221c:	6978      	ldr	r0, [r7, #20]
 801221e:	f7fe fe69 	bl	8010ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012222:	bf00      	nop
 8012224:	3718      	adds	r7, #24
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b084      	sub	sp, #16
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2200      	movs	r2, #0
 801223c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	2200      	movs	r2, #0
 8012244:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012248:	68f8      	ldr	r0, [r7, #12]
 801224a:	f7fe fe53 	bl	8010ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801224e:	bf00      	nop
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}

08012256 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012256:	b580      	push	{r7, lr}
 8012258:	b088      	sub	sp, #32
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	e853 3f00 	ldrex	r3, [r3]
 801226a:	60bb      	str	r3, [r7, #8]
   return(result);
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012272:	61fb      	str	r3, [r7, #28]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	461a      	mov	r2, r3
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	61bb      	str	r3, [r7, #24]
 801227e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012280:	6979      	ldr	r1, [r7, #20]
 8012282:	69ba      	ldr	r2, [r7, #24]
 8012284:	e841 2300 	strex	r3, r2, [r1]
 8012288:	613b      	str	r3, [r7, #16]
   return(result);
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d1e6      	bne.n	801225e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2220      	movs	r2, #32
 8012294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2200      	movs	r2, #0
 801229c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f7f0 f90c 	bl	80024bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122a4:	bf00      	nop
 80122a6:	3720      	adds	r7, #32
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b09c      	sub	sp, #112	; 0x70
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122c4:	2b22      	cmp	r3, #34	; 0x22
 80122c6:	f040 80be 	bne.w	8012446 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80122d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80122d8:	b2d9      	uxtb	r1, r3
 80122da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80122de:	b2da      	uxtb	r2, r3
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122e4:	400a      	ands	r2, r1
 80122e6:	b2d2      	uxtb	r2, r2
 80122e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122ee:	1c5a      	adds	r2, r3, #1
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	3b01      	subs	r3, #1
 80122fe:	b29a      	uxth	r2, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801230c:	b29b      	uxth	r3, r3
 801230e:	2b00      	cmp	r3, #0
 8012310:	f040 80a1 	bne.w	8012456 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801231a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801231c:	e853 3f00 	ldrex	r3, [r3]
 8012320:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012328:	66bb      	str	r3, [r7, #104]	; 0x68
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	461a      	mov	r2, r3
 8012330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012332:	65bb      	str	r3, [r7, #88]	; 0x58
 8012334:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801233a:	e841 2300 	strex	r3, r2, [r1]
 801233e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1e6      	bne.n	8012314 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	3308      	adds	r3, #8
 801234c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012350:	e853 3f00 	ldrex	r3, [r3]
 8012354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012358:	f023 0301 	bic.w	r3, r3, #1
 801235c:	667b      	str	r3, [r7, #100]	; 0x64
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	3308      	adds	r3, #8
 8012364:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012366:	647a      	str	r2, [r7, #68]	; 0x44
 8012368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801236a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801236c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801236e:	e841 2300 	strex	r3, r2, [r1]
 8012372:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012376:	2b00      	cmp	r3, #0
 8012378:	d1e5      	bne.n	8012346 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2220      	movs	r2, #32
 801237e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2200      	movs	r2, #0
 8012386:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2200      	movs	r2, #0
 801238c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4a33      	ldr	r2, [pc, #204]	; (8012460 <UART_RxISR_8BIT+0x1b4>)
 8012394:	4293      	cmp	r3, r2
 8012396:	d01f      	beq.n	80123d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d018      	beq.n	80123d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	e853 3f00 	ldrex	r3, [r3]
 80123b2:	623b      	str	r3, [r7, #32]
   return(result);
 80123b4:	6a3b      	ldr	r3, [r7, #32]
 80123b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80123ba:	663b      	str	r3, [r7, #96]	; 0x60
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	461a      	mov	r2, r3
 80123c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80123c4:	633b      	str	r3, [r7, #48]	; 0x30
 80123c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80123ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123cc:	e841 2300 	strex	r3, r2, [r1]
 80123d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80123d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d1e6      	bne.n	80123a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d12e      	bne.n	801243e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2200      	movs	r2, #0
 80123e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	e853 3f00 	ldrex	r3, [r3]
 80123f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f023 0310 	bic.w	r3, r3, #16
 80123fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	461a      	mov	r2, r3
 8012402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012404:	61fb      	str	r3, [r7, #28]
 8012406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012408:	69b9      	ldr	r1, [r7, #24]
 801240a:	69fa      	ldr	r2, [r7, #28]
 801240c:	e841 2300 	strex	r3, r2, [r1]
 8012410:	617b      	str	r3, [r7, #20]
   return(result);
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d1e6      	bne.n	80123e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	69db      	ldr	r3, [r3, #28]
 801241e:	f003 0310 	and.w	r3, r3, #16
 8012422:	2b10      	cmp	r3, #16
 8012424:	d103      	bne.n	801242e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2210      	movs	r2, #16
 801242c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012434:	4619      	mov	r1, r3
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f7fe fd66 	bl	8010f08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801243c:	e00b      	b.n	8012456 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ee f922 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012444:	e007      	b.n	8012456 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	699a      	ldr	r2, [r3, #24]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f042 0208 	orr.w	r2, r2, #8
 8012454:	619a      	str	r2, [r3, #24]
}
 8012456:	bf00      	nop
 8012458:	3770      	adds	r7, #112	; 0x70
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	58000c00 	.word	0x58000c00

08012464 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b09c      	sub	sp, #112	; 0x70
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012472:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801247c:	2b22      	cmp	r3, #34	; 0x22
 801247e:	f040 80be 	bne.w	80125fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012488:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012490:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012492:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012496:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801249a:	4013      	ands	r3, r2
 801249c:	b29a      	uxth	r2, r3
 801249e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124a6:	1c9a      	adds	r2, r3, #2
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	3b01      	subs	r3, #1
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f040 80a1 	bne.w	801260e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124d4:	e853 3f00 	ldrex	r3, [r3]
 80124d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80124da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80124e0:	667b      	str	r3, [r7, #100]	; 0x64
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	461a      	mov	r2, r3
 80124e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124ea:	657b      	str	r3, [r7, #84]	; 0x54
 80124ec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80124f2:	e841 2300 	strex	r3, r2, [r1]
 80124f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80124f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1e6      	bne.n	80124cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	3308      	adds	r3, #8
 8012504:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012508:	e853 3f00 	ldrex	r3, [r3]
 801250c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012510:	f023 0301 	bic.w	r3, r3, #1
 8012514:	663b      	str	r3, [r7, #96]	; 0x60
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	3308      	adds	r3, #8
 801251c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801251e:	643a      	str	r2, [r7, #64]	; 0x40
 8012520:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012522:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012526:	e841 2300 	strex	r3, r2, [r1]
 801252a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1e5      	bne.n	80124fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2220      	movs	r2, #32
 8012536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2200      	movs	r2, #0
 801253e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4a33      	ldr	r2, [pc, #204]	; (8012618 <UART_RxISR_16BIT+0x1b4>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d01f      	beq.n	8012590 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801255a:	2b00      	cmp	r3, #0
 801255c:	d018      	beq.n	8012590 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	e853 3f00 	ldrex	r3, [r3]
 801256a:	61fb      	str	r3, [r7, #28]
   return(result);
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	461a      	mov	r2, r3
 801257a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801257e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012584:	e841 2300 	strex	r3, r2, [r1]
 8012588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258c:	2b00      	cmp	r3, #0
 801258e:	d1e6      	bne.n	801255e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012594:	2b01      	cmp	r3, #1
 8012596:	d12e      	bne.n	80125f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2200      	movs	r2, #0
 801259c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	e853 3f00 	ldrex	r3, [r3]
 80125aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	f023 0310 	bic.w	r3, r3, #16
 80125b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	461a      	mov	r2, r3
 80125ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80125bc:	61bb      	str	r3, [r7, #24]
 80125be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125c0:	6979      	ldr	r1, [r7, #20]
 80125c2:	69ba      	ldr	r2, [r7, #24]
 80125c4:	e841 2300 	strex	r3, r2, [r1]
 80125c8:	613b      	str	r3, [r7, #16]
   return(result);
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d1e6      	bne.n	801259e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	69db      	ldr	r3, [r3, #28]
 80125d6:	f003 0310 	and.w	r3, r3, #16
 80125da:	2b10      	cmp	r3, #16
 80125dc:	d103      	bne.n	80125e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	2210      	movs	r2, #16
 80125e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80125ec:	4619      	mov	r1, r3
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7fe fc8a 	bl	8010f08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80125f4:	e00b      	b.n	801260e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f7ee f846 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 80125fc:	e007      	b.n	801260e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	699a      	ldr	r2, [r3, #24]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f042 0208 	orr.w	r2, r2, #8
 801260c:	619a      	str	r2, [r3, #24]
}
 801260e:	bf00      	nop
 8012610:	3770      	adds	r7, #112	; 0x70
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	58000c00 	.word	0x58000c00

0801261c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b0ac      	sub	sp, #176	; 0xb0
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801262a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	69db      	ldr	r3, [r3, #28]
 8012634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	689b      	ldr	r3, [r3, #8]
 8012648:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012652:	2b22      	cmp	r3, #34	; 0x22
 8012654:	f040 8180 	bne.w	8012958 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801265e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012662:	e123      	b.n	80128ac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801266a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801266e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012672:	b2d9      	uxtb	r1, r3
 8012674:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012678:	b2da      	uxtb	r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801267e:	400a      	ands	r2, r1
 8012680:	b2d2      	uxtb	r2, r2
 8012682:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012688:	1c5a      	adds	r2, r3, #1
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012694:	b29b      	uxth	r3, r3
 8012696:	3b01      	subs	r3, #1
 8012698:	b29a      	uxth	r2, r3
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	69db      	ldr	r3, [r3, #28]
 80126a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80126aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126ae:	f003 0307 	and.w	r3, r3, #7
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d053      	beq.n	801275e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80126b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126ba:	f003 0301 	and.w	r3, r3, #1
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d011      	beq.n	80126e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80126c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80126c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00b      	beq.n	80126e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2201      	movs	r2, #1
 80126d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126dc:	f043 0201 	orr.w	r2, r3, #1
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126ea:	f003 0302 	and.w	r3, r3, #2
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d011      	beq.n	8012716 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80126f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80126f6:	f003 0301 	and.w	r3, r3, #1
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d00b      	beq.n	8012716 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	2202      	movs	r2, #2
 8012704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801270c:	f043 0204 	orr.w	r2, r3, #4
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801271a:	f003 0304 	and.w	r3, r3, #4
 801271e:	2b00      	cmp	r3, #0
 8012720:	d011      	beq.n	8012746 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012726:	f003 0301 	and.w	r3, r3, #1
 801272a:	2b00      	cmp	r3, #0
 801272c:	d00b      	beq.n	8012746 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2204      	movs	r2, #4
 8012734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801273c:	f043 0202 	orr.w	r2, r3, #2
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801274c:	2b00      	cmp	r3, #0
 801274e:	d006      	beq.n	801275e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f7fe fbcf 	bl	8010ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2200      	movs	r2, #0
 801275a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012764:	b29b      	uxth	r3, r3
 8012766:	2b00      	cmp	r3, #0
 8012768:	f040 80a0 	bne.w	80128ac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012774:	e853 3f00 	ldrex	r3, [r3]
 8012778:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801277c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	461a      	mov	r2, r3
 801278a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801278e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012790:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012792:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012794:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012796:	e841 2300 	strex	r3, r2, [r1]
 801279a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801279c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1e4      	bne.n	801276c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	3308      	adds	r3, #8
 80127a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127ac:	e853 3f00 	ldrex	r3, [r3]
 80127b0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80127b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80127b4:	4b6e      	ldr	r3, [pc, #440]	; (8012970 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80127b6:	4013      	ands	r3, r2
 80127b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	3308      	adds	r3, #8
 80127c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80127c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80127c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80127cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80127ce:	e841 2300 	strex	r3, r2, [r1]
 80127d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80127d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d1e3      	bne.n	80127a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2220      	movs	r2, #32
 80127de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2200      	movs	r2, #0
 80127e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2200      	movs	r2, #0
 80127ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	4a60      	ldr	r2, [pc, #384]	; (8012974 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d021      	beq.n	801283c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	685b      	ldr	r3, [r3, #4]
 80127fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012802:	2b00      	cmp	r3, #0
 8012804:	d01a      	beq.n	801283c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801280c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801280e:	e853 3f00 	ldrex	r3, [r3]
 8012812:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801281a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	461a      	mov	r2, r3
 8012824:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012828:	657b      	str	r3, [r7, #84]	; 0x54
 801282a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801282c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801282e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012830:	e841 2300 	strex	r3, r2, [r1]
 8012834:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1e4      	bne.n	8012806 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012840:	2b01      	cmp	r3, #1
 8012842:	d130      	bne.n	80128a6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012852:	e853 3f00 	ldrex	r3, [r3]
 8012856:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285a:	f023 0310 	bic.w	r3, r3, #16
 801285e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	461a      	mov	r2, r3
 8012868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801286c:	643b      	str	r3, [r7, #64]	; 0x40
 801286e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012874:	e841 2300 	strex	r3, r2, [r1]
 8012878:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287c:	2b00      	cmp	r3, #0
 801287e:	d1e4      	bne.n	801284a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	69db      	ldr	r3, [r3, #28]
 8012886:	f003 0310 	and.w	r3, r3, #16
 801288a:	2b10      	cmp	r3, #16
 801288c:	d103      	bne.n	8012896 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2210      	movs	r2, #16
 8012894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801289c:	4619      	mov	r1, r3
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f7fe fb32 	bl	8010f08 <HAL_UARTEx_RxEventCallback>
 80128a4:	e002      	b.n	80128ac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f7ed feee 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80128ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d006      	beq.n	80128c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80128b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128b8:	f003 0320 	and.w	r3, r3, #32
 80128bc:	2b00      	cmp	r3, #0
 80128be:	f47f aed1 	bne.w	8012664 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80128cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d049      	beq.n	8012968 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80128da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80128de:	429a      	cmp	r2, r3
 80128e0:	d242      	bcs.n	8012968 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	3308      	adds	r3, #8
 80128e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ea:	6a3b      	ldr	r3, [r7, #32]
 80128ec:	e853 3f00 	ldrex	r3, [r3]
 80128f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80128f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	3308      	adds	r3, #8
 8012902:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801290a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801290c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801290e:	e841 2300 	strex	r3, r2, [r1]
 8012912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012916:	2b00      	cmp	r3, #0
 8012918:	d1e3      	bne.n	80128e2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	4a16      	ldr	r2, [pc, #88]	; (8012978 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801291e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	e853 3f00 	ldrex	r3, [r3]
 801292c:	60bb      	str	r3, [r7, #8]
   return(result);
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	f043 0320 	orr.w	r3, r3, #32
 8012934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	461a      	mov	r2, r3
 801293e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012942:	61bb      	str	r3, [r7, #24]
 8012944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012946:	6979      	ldr	r1, [r7, #20]
 8012948:	69ba      	ldr	r2, [r7, #24]
 801294a:	e841 2300 	strex	r3, r2, [r1]
 801294e:	613b      	str	r3, [r7, #16]
   return(result);
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d1e4      	bne.n	8012920 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012956:	e007      	b.n	8012968 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	699a      	ldr	r2, [r3, #24]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	f042 0208 	orr.w	r2, r2, #8
 8012966:	619a      	str	r2, [r3, #24]
}
 8012968:	bf00      	nop
 801296a:	37b0      	adds	r7, #176	; 0xb0
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	effffffe 	.word	0xeffffffe
 8012974:	58000c00 	.word	0x58000c00
 8012978:	080122ad 	.word	0x080122ad

0801297c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b0ae      	sub	sp, #184	; 0xb8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801298a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	69db      	ldr	r3, [r3, #28]
 8012994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	689b      	ldr	r3, [r3, #8]
 80129a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80129b2:	2b22      	cmp	r3, #34	; 0x22
 80129b4:	f040 8184 	bne.w	8012cc0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80129be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129c2:	e127      	b.n	8012c14 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80129d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80129da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80129de:	4013      	ands	r3, r2
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80129e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129ec:	1c9a      	adds	r2, r3, #2
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	3b01      	subs	r3, #1
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	69db      	ldr	r3, [r3, #28]
 8012a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a12:	f003 0307 	and.w	r3, r3, #7
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d053      	beq.n	8012ac2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a1e:	f003 0301 	and.w	r3, r3, #1
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d011      	beq.n	8012a4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d00b      	beq.n	8012a4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	2201      	movs	r2, #1
 8012a38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a40:	f043 0201 	orr.w	r2, r3, #1
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a4e:	f003 0302 	and.w	r3, r3, #2
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d011      	beq.n	8012a7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a5a:	f003 0301 	and.w	r3, r3, #1
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d00b      	beq.n	8012a7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2202      	movs	r2, #2
 8012a68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a70:	f043 0204 	orr.w	r2, r3, #4
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a7e:	f003 0304 	and.w	r3, r3, #4
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d011      	beq.n	8012aaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012a86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a8a:	f003 0301 	and.w	r3, r3, #1
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00b      	beq.n	8012aaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2204      	movs	r2, #4
 8012a98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012aa0:	f043 0202 	orr.w	r2, r3, #2
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d006      	beq.n	8012ac2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f7fe fa1d 	bl	8010ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2200      	movs	r2, #0
 8012abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	f040 80a2 	bne.w	8012c14 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ad8:	e853 3f00 	ldrex	r3, [r3]
 8012adc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	461a      	mov	r2, r3
 8012aee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012af6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012af8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012afe:	e841 2300 	strex	r3, r2, [r1]
 8012b02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d1e2      	bne.n	8012ad0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	3308      	adds	r3, #8
 8012b10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b14:	e853 3f00 	ldrex	r3, [r3]
 8012b18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012b1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012b1c:	4b6e      	ldr	r3, [pc, #440]	; (8012cd8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012b1e:	4013      	ands	r3, r2
 8012b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	3308      	adds	r3, #8
 8012b2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012b2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012b30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012b34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b36:	e841 2300 	strex	r3, r2, [r1]
 8012b3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1e3      	bne.n	8012b0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2220      	movs	r2, #32
 8012b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4a60      	ldr	r2, [pc, #384]	; (8012cdc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	d021      	beq.n	8012ba4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d01a      	beq.n	8012ba4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b76:	e853 3f00 	ldrex	r3, [r3]
 8012b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b90:	65bb      	str	r3, [r7, #88]	; 0x58
 8012b92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b98:	e841 2300 	strex	r3, r2, [r1]
 8012b9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1e4      	bne.n	8012b6e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d130      	bne.n	8012c0e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bba:	e853 3f00 	ldrex	r3, [r3]
 8012bbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bc2:	f023 0310 	bic.w	r3, r3, #16
 8012bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8012bd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012bdc:	e841 2300 	strex	r3, r2, [r1]
 8012be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1e4      	bne.n	8012bb2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	69db      	ldr	r3, [r3, #28]
 8012bee:	f003 0310 	and.w	r3, r3, #16
 8012bf2:	2b10      	cmp	r3, #16
 8012bf4:	d103      	bne.n	8012bfe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2210      	movs	r2, #16
 8012bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c04:	4619      	mov	r1, r3
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7fe f97e 	bl	8010f08 <HAL_UARTEx_RxEventCallback>
 8012c0c:	e002      	b.n	8012c14 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f7ed fd3a 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d006      	beq.n	8012c2a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c20:	f003 0320 	and.w	r3, r3, #32
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	f47f aecd 	bne.w	80129c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c30:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012c34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d049      	beq.n	8012cd0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d242      	bcs.n	8012cd0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	3308      	adds	r3, #8
 8012c50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c54:	e853 3f00 	ldrex	r3, [r3]
 8012c58:	623b      	str	r3, [r7, #32]
   return(result);
 8012c5a:	6a3b      	ldr	r3, [r7, #32]
 8012c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	3308      	adds	r3, #8
 8012c6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012c6e:	633a      	str	r2, [r7, #48]	; 0x30
 8012c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c76:	e841 2300 	strex	r3, r2, [r1]
 8012c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d1e3      	bne.n	8012c4a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	4a16      	ldr	r2, [pc, #88]	; (8012ce0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012c86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	e853 3f00 	ldrex	r3, [r3]
 8012c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	f043 0320 	orr.w	r3, r3, #32
 8012c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	461a      	mov	r2, r3
 8012ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012caa:	61fb      	str	r3, [r7, #28]
 8012cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cae:	69b9      	ldr	r1, [r7, #24]
 8012cb0:	69fa      	ldr	r2, [r7, #28]
 8012cb2:	e841 2300 	strex	r3, r2, [r1]
 8012cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d1e4      	bne.n	8012c88 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012cbe:	e007      	b.n	8012cd0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	699a      	ldr	r2, [r3, #24]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f042 0208 	orr.w	r2, r2, #8
 8012cce:	619a      	str	r2, [r3, #24]
}
 8012cd0:	bf00      	nop
 8012cd2:	37b8      	adds	r7, #184	; 0xb8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	effffffe 	.word	0xeffffffe
 8012cdc:	58000c00 	.word	0x58000c00
 8012ce0:	08012465 	.word	0x08012465

08012ce4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012cec:	bf00      	nop
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012d00:	bf00      	nop
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012d14:	bf00      	nop
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr

08012d20 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b089      	sub	sp, #36	; 0x24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d101      	bne.n	8012d36 <HAL_UARTEx_EnableStopMode+0x16>
 8012d32:	2302      	movs	r3, #2
 8012d34:	e021      	b.n	8012d7a <HAL_UARTEx_EnableStopMode+0x5a>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2201      	movs	r2, #1
 8012d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	e853 3f00 	ldrex	r3, [r3]
 8012d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	f043 0302 	orr.w	r3, r3, #2
 8012d52:	61fb      	str	r3, [r7, #28]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	461a      	mov	r2, r3
 8012d5a:	69fb      	ldr	r3, [r7, #28]
 8012d5c:	61bb      	str	r3, [r7, #24]
 8012d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d60:	6979      	ldr	r1, [r7, #20]
 8012d62:	69ba      	ldr	r2, [r7, #24]
 8012d64:	e841 2300 	strex	r3, r2, [r1]
 8012d68:	613b      	str	r3, [r7, #16]
   return(result);
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d1e6      	bne.n	8012d3e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2200      	movs	r2, #0
 8012d74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d78:	2300      	movs	r3, #0
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3724      	adds	r7, #36	; 0x24
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr

08012d86 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b084      	sub	sp, #16
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d101      	bne.n	8012d9c <HAL_UARTEx_EnableFifoMode+0x16>
 8012d98:	2302      	movs	r3, #2
 8012d9a:	e02b      	b.n	8012df4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2201      	movs	r2, #1
 8012da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2224      	movs	r2, #36	; 0x24
 8012da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	681a      	ldr	r2, [r3, #0]
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f022 0201 	bic.w	r2, r2, #1
 8012dc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012dca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012dd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	68fa      	ldr	r2, [r7, #12]
 8012dda:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f000 f8c3 	bl	8012f68 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2220      	movs	r2, #32
 8012de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2200      	movs	r2, #0
 8012dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012df2:	2300      	movs	r3, #0
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3710      	adds	r7, #16
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b085      	sub	sp, #20
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d101      	bne.n	8012e12 <HAL_UARTEx_DisableFifoMode+0x16>
 8012e0e:	2302      	movs	r3, #2
 8012e10:	e027      	b.n	8012e62 <HAL_UARTEx_DisableFifoMode+0x66>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2201      	movs	r2, #1
 8012e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2224      	movs	r2, #36	; 0x24
 8012e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f022 0201 	bic.w	r2, r2, #1
 8012e38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012e40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2200      	movs	r2, #0
 8012e46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2220      	movs	r2, #32
 8012e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e60:	2300      	movs	r3, #0
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3714      	adds	r7, #20
 8012e66:	46bd      	mov	sp, r7
 8012e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6c:	4770      	bx	lr

08012e6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b084      	sub	sp, #16
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
 8012e76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e7e:	2b01      	cmp	r3, #1
 8012e80:	d101      	bne.n	8012e86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012e82:	2302      	movs	r3, #2
 8012e84:	e02d      	b.n	8012ee2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2201      	movs	r2, #1
 8012e8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2224      	movs	r2, #36	; 0x24
 8012e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	681a      	ldr	r2, [r3, #0]
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f022 0201 	bic.w	r2, r2, #1
 8012eac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	689b      	ldr	r3, [r3, #8]
 8012eb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	683a      	ldr	r2, [r7, #0]
 8012ebe:	430a      	orrs	r2, r1
 8012ec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f000 f850 	bl	8012f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	68fa      	ldr	r2, [r7, #12]
 8012ece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2220      	movs	r2, #32
 8012ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2200      	movs	r2, #0
 8012edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}

08012eea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012eea:	b580      	push	{r7, lr}
 8012eec:	b084      	sub	sp, #16
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	6078      	str	r0, [r7, #4]
 8012ef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d101      	bne.n	8012f02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012efe:	2302      	movs	r3, #2
 8012f00:	e02d      	b.n	8012f5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2201      	movs	r2, #1
 8012f06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2224      	movs	r2, #36	; 0x24
 8012f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f022 0201 	bic.w	r2, r2, #1
 8012f28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	689b      	ldr	r3, [r3, #8]
 8012f30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	683a      	ldr	r2, [r7, #0]
 8012f3a:	430a      	orrs	r2, r1
 8012f3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f000 f812 	bl	8012f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2220      	movs	r2, #32
 8012f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2200      	movs	r2, #0
 8012f58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f5c:	2300      	movs	r3, #0
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3710      	adds	r7, #16
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
	...

08012f68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b085      	sub	sp, #20
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d108      	bne.n	8012f8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2201      	movs	r2, #1
 8012f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012f88:	e031      	b.n	8012fee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012f8a:	2310      	movs	r3, #16
 8012f8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012f8e:	2310      	movs	r3, #16
 8012f90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	689b      	ldr	r3, [r3, #8]
 8012f98:	0e5b      	lsrs	r3, r3, #25
 8012f9a:	b2db      	uxtb	r3, r3
 8012f9c:	f003 0307 	and.w	r3, r3, #7
 8012fa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	689b      	ldr	r3, [r3, #8]
 8012fa8:	0f5b      	lsrs	r3, r3, #29
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	f003 0307 	and.w	r3, r3, #7
 8012fb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012fb2:	7bbb      	ldrb	r3, [r7, #14]
 8012fb4:	7b3a      	ldrb	r2, [r7, #12]
 8012fb6:	4911      	ldr	r1, [pc, #68]	; (8012ffc <UARTEx_SetNbDataToProcess+0x94>)
 8012fb8:	5c8a      	ldrb	r2, [r1, r2]
 8012fba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012fbe:	7b3a      	ldrb	r2, [r7, #12]
 8012fc0:	490f      	ldr	r1, [pc, #60]	; (8013000 <UARTEx_SetNbDataToProcess+0x98>)
 8012fc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fc8:	b29a      	uxth	r2, r3
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012fd0:	7bfb      	ldrb	r3, [r7, #15]
 8012fd2:	7b7a      	ldrb	r2, [r7, #13]
 8012fd4:	4909      	ldr	r1, [pc, #36]	; (8012ffc <UARTEx_SetNbDataToProcess+0x94>)
 8012fd6:	5c8a      	ldrb	r2, [r1, r2]
 8012fd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012fdc:	7b7a      	ldrb	r2, [r7, #13]
 8012fde:	4908      	ldr	r1, [pc, #32]	; (8013000 <UARTEx_SetNbDataToProcess+0x98>)
 8012fe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fe6:	b29a      	uxth	r2, r3
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012fee:	bf00      	nop
 8012ff0:	3714      	adds	r7, #20
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	08017940 	.word	0x08017940
 8013000:	08017948 	.word	0x08017948

08013004 <__NVIC_SetPriority>:
{
 8013004:	b480      	push	{r7}
 8013006:	b083      	sub	sp, #12
 8013008:	af00      	add	r7, sp, #0
 801300a:	4603      	mov	r3, r0
 801300c:	6039      	str	r1, [r7, #0]
 801300e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013014:	2b00      	cmp	r3, #0
 8013016:	db0a      	blt.n	801302e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	b2da      	uxtb	r2, r3
 801301c:	490c      	ldr	r1, [pc, #48]	; (8013050 <__NVIC_SetPriority+0x4c>)
 801301e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013022:	0112      	lsls	r2, r2, #4
 8013024:	b2d2      	uxtb	r2, r2
 8013026:	440b      	add	r3, r1
 8013028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801302c:	e00a      	b.n	8013044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	b2da      	uxtb	r2, r3
 8013032:	4908      	ldr	r1, [pc, #32]	; (8013054 <__NVIC_SetPriority+0x50>)
 8013034:	88fb      	ldrh	r3, [r7, #6]
 8013036:	f003 030f 	and.w	r3, r3, #15
 801303a:	3b04      	subs	r3, #4
 801303c:	0112      	lsls	r2, r2, #4
 801303e:	b2d2      	uxtb	r2, r2
 8013040:	440b      	add	r3, r1
 8013042:	761a      	strb	r2, [r3, #24]
}
 8013044:	bf00      	nop
 8013046:	370c      	adds	r7, #12
 8013048:	46bd      	mov	sp, r7
 801304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304e:	4770      	bx	lr
 8013050:	e000e100 	.word	0xe000e100
 8013054:	e000ed00 	.word	0xe000ed00

08013058 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013058:	b580      	push	{r7, lr}
 801305a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801305c:	4b05      	ldr	r3, [pc, #20]	; (8013074 <SysTick_Handler+0x1c>)
 801305e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013060:	f002 fc92 	bl	8015988 <xTaskGetSchedulerState>
 8013064:	4603      	mov	r3, r0
 8013066:	2b01      	cmp	r3, #1
 8013068:	d001      	beq.n	801306e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801306a:	f003 fab5 	bl	80165d8 <xPortSysTickHandler>
  }
}
 801306e:	bf00      	nop
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	e000e010 	.word	0xe000e010

08013078 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013078:	b580      	push	{r7, lr}
 801307a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801307c:	2100      	movs	r1, #0
 801307e:	f06f 0004 	mvn.w	r0, #4
 8013082:	f7ff ffbf 	bl	8013004 <__NVIC_SetPriority>
#endif
}
 8013086:	bf00      	nop
 8013088:	bd80      	pop	{r7, pc}
	...

0801308c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801308c:	b480      	push	{r7}
 801308e:	b083      	sub	sp, #12
 8013090:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013092:	f3ef 8305 	mrs	r3, IPSR
 8013096:	603b      	str	r3, [r7, #0]
  return(result);
 8013098:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801309a:	2b00      	cmp	r3, #0
 801309c:	d003      	beq.n	80130a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801309e:	f06f 0305 	mvn.w	r3, #5
 80130a2:	607b      	str	r3, [r7, #4]
 80130a4:	e00c      	b.n	80130c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80130a6:	4b0a      	ldr	r3, [pc, #40]	; (80130d0 <osKernelInitialize+0x44>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d105      	bne.n	80130ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80130ae:	4b08      	ldr	r3, [pc, #32]	; (80130d0 <osKernelInitialize+0x44>)
 80130b0:	2201      	movs	r2, #1
 80130b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80130b4:	2300      	movs	r3, #0
 80130b6:	607b      	str	r3, [r7, #4]
 80130b8:	e002      	b.n	80130c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80130ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80130c0:	687b      	ldr	r3, [r7, #4]
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	370c      	adds	r7, #12
 80130c6:	46bd      	mov	sp, r7
 80130c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130cc:	4770      	bx	lr
 80130ce:	bf00      	nop
 80130d0:	24001130 	.word	0x24001130

080130d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130da:	f3ef 8305 	mrs	r3, IPSR
 80130de:	603b      	str	r3, [r7, #0]
  return(result);
 80130e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d003      	beq.n	80130ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80130e6:	f06f 0305 	mvn.w	r3, #5
 80130ea:	607b      	str	r3, [r7, #4]
 80130ec:	e010      	b.n	8013110 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80130ee:	4b0b      	ldr	r3, [pc, #44]	; (801311c <osKernelStart+0x48>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d109      	bne.n	801310a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80130f6:	f7ff ffbf 	bl	8013078 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80130fa:	4b08      	ldr	r3, [pc, #32]	; (801311c <osKernelStart+0x48>)
 80130fc:	2202      	movs	r2, #2
 80130fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013100:	f001 ff54 	bl	8014fac <vTaskStartScheduler>
      stat = osOK;
 8013104:	2300      	movs	r3, #0
 8013106:	607b      	str	r3, [r7, #4]
 8013108:	e002      	b.n	8013110 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801310a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801310e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013110:	687b      	ldr	r3, [r7, #4]
}
 8013112:	4618      	mov	r0, r3
 8013114:	3708      	adds	r7, #8
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	24001130 	.word	0x24001130

08013120 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013120:	b580      	push	{r7, lr}
 8013122:	b08e      	sub	sp, #56	; 0x38
 8013124:	af04      	add	r7, sp, #16
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801312c:	2300      	movs	r3, #0
 801312e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013130:	f3ef 8305 	mrs	r3, IPSR
 8013134:	617b      	str	r3, [r7, #20]
  return(result);
 8013136:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013138:	2b00      	cmp	r3, #0
 801313a:	d17e      	bne.n	801323a <osThreadNew+0x11a>
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d07b      	beq.n	801323a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013142:	2380      	movs	r3, #128	; 0x80
 8013144:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013146:	2318      	movs	r3, #24
 8013148:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801314a:	2300      	movs	r3, #0
 801314c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801314e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013152:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d045      	beq.n	80131e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d002      	beq.n	8013168 <osThreadNew+0x48>
        name = attr->name;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	699b      	ldr	r3, [r3, #24]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d002      	beq.n	8013176 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	699b      	ldr	r3, [r3, #24]
 8013174:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d008      	beq.n	801318e <osThreadNew+0x6e>
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	2b38      	cmp	r3, #56	; 0x38
 8013180:	d805      	bhi.n	801318e <osThreadNew+0x6e>
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	f003 0301 	and.w	r3, r3, #1
 801318a:	2b00      	cmp	r3, #0
 801318c:	d001      	beq.n	8013192 <osThreadNew+0x72>
        return (NULL);
 801318e:	2300      	movs	r3, #0
 8013190:	e054      	b.n	801323c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	695b      	ldr	r3, [r3, #20]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d003      	beq.n	80131a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	695b      	ldr	r3, [r3, #20]
 801319e:	089b      	lsrs	r3, r3, #2
 80131a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	689b      	ldr	r3, [r3, #8]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d00e      	beq.n	80131c8 <osThreadNew+0xa8>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	2b5b      	cmp	r3, #91	; 0x5b
 80131b0:	d90a      	bls.n	80131c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d006      	beq.n	80131c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	695b      	ldr	r3, [r3, #20]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d002      	beq.n	80131c8 <osThreadNew+0xa8>
        mem = 1;
 80131c2:	2301      	movs	r3, #1
 80131c4:	61bb      	str	r3, [r7, #24]
 80131c6:	e010      	b.n	80131ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	689b      	ldr	r3, [r3, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d10c      	bne.n	80131ea <osThreadNew+0xca>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d108      	bne.n	80131ea <osThreadNew+0xca>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	691b      	ldr	r3, [r3, #16]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d104      	bne.n	80131ea <osThreadNew+0xca>
          mem = 0;
 80131e0:	2300      	movs	r3, #0
 80131e2:	61bb      	str	r3, [r7, #24]
 80131e4:	e001      	b.n	80131ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80131e6:	2300      	movs	r3, #0
 80131e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80131ea:	69bb      	ldr	r3, [r7, #24]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d110      	bne.n	8013212 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80131f8:	9202      	str	r2, [sp, #8]
 80131fa:	9301      	str	r3, [sp, #4]
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	9300      	str	r3, [sp, #0]
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	6a3a      	ldr	r2, [r7, #32]
 8013204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013206:	68f8      	ldr	r0, [r7, #12]
 8013208:	f001 fbe0 	bl	80149cc <xTaskCreateStatic>
 801320c:	4603      	mov	r3, r0
 801320e:	613b      	str	r3, [r7, #16]
 8013210:	e013      	b.n	801323a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013212:	69bb      	ldr	r3, [r7, #24]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d110      	bne.n	801323a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013218:	6a3b      	ldr	r3, [r7, #32]
 801321a:	b29a      	uxth	r2, r3
 801321c:	f107 0310 	add.w	r3, r7, #16
 8013220:	9301      	str	r3, [sp, #4]
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	9300      	str	r3, [sp, #0]
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f001 fc2b 	bl	8014a86 <xTaskCreate>
 8013230:	4603      	mov	r3, r0
 8013232:	2b01      	cmp	r3, #1
 8013234:	d001      	beq.n	801323a <osThreadNew+0x11a>
            hTask = NULL;
 8013236:	2300      	movs	r3, #0
 8013238:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801323a:	693b      	ldr	r3, [r7, #16]
}
 801323c:	4618      	mov	r0, r3
 801323e:	3728      	adds	r7, #40	; 0x28
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801324a:	f3ef 8305 	mrs	r3, IPSR
 801324e:	603b      	str	r3, [r7, #0]
  return(result);
 8013250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013252:	2b00      	cmp	r3, #0
 8013254:	d003      	beq.n	801325e <osThreadYield+0x1a>
    stat = osErrorISR;
 8013256:	f06f 0305 	mvn.w	r3, #5
 801325a:	607b      	str	r3, [r7, #4]
 801325c:	e009      	b.n	8013272 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801325e:	2300      	movs	r3, #0
 8013260:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013262:	4b07      	ldr	r3, [pc, #28]	; (8013280 <osThreadYield+0x3c>)
 8013264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013268:	601a      	str	r2, [r3, #0]
 801326a:	f3bf 8f4f 	dsb	sy
 801326e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013272:	687b      	ldr	r3, [r7, #4]
}
 8013274:	4618      	mov	r0, r3
 8013276:	370c      	adds	r7, #12
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr
 8013280:	e000ed04 	.word	0xe000ed04

08013284 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013290:	f3ef 8305 	mrs	r3, IPSR
 8013294:	60fb      	str	r3, [r7, #12]
  return(result);
 8013296:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013298:	2b00      	cmp	r3, #0
 801329a:	d003      	beq.n	80132a4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801329c:	f06f 0305 	mvn.w	r3, #5
 80132a0:	617b      	str	r3, [r7, #20]
 80132a2:	e00b      	b.n	80132bc <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d103      	bne.n	80132b2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80132aa:	f06f 0303 	mvn.w	r3, #3
 80132ae:	617b      	str	r3, [r7, #20]
 80132b0:	e004      	b.n	80132bc <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80132b2:	2300      	movs	r3, #0
 80132b4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80132b6:	6938      	ldr	r0, [r7, #16]
 80132b8:	f001 fd5e 	bl	8014d78 <vTaskSuspend>
  }

  return (stat);
 80132bc:	697b      	ldr	r3, [r7, #20]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3718      	adds	r7, #24
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}

080132c6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80132c6:	b580      	push	{r7, lr}
 80132c8:	b084      	sub	sp, #16
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132ce:	f3ef 8305 	mrs	r3, IPSR
 80132d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80132d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d003      	beq.n	80132e2 <osDelay+0x1c>
    stat = osErrorISR;
 80132da:	f06f 0305 	mvn.w	r3, #5
 80132de:	60fb      	str	r3, [r7, #12]
 80132e0:	e007      	b.n	80132f2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80132e2:	2300      	movs	r3, #0
 80132e4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d002      	beq.n	80132f2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f001 fd0f 	bl	8014d10 <vTaskDelay>
    }
  }

  return (stat);
 80132f2:	68fb      	ldr	r3, [r7, #12]
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3710      	adds	r7, #16
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}

080132fc <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b086      	sub	sp, #24
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013304:	2300      	movs	r3, #0
 8013306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013308:	f3ef 8305 	mrs	r3, IPSR
 801330c:	60fb      	str	r3, [r7, #12]
  return(result);
 801330e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8013310:	2b00      	cmp	r3, #0
 8013312:	d12d      	bne.n	8013370 <osEventFlagsNew+0x74>
    mem = -1;
 8013314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013318:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d015      	beq.n	801334c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	689b      	ldr	r3, [r3, #8]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d006      	beq.n	8013336 <osEventFlagsNew+0x3a>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	2b1f      	cmp	r3, #31
 801332e:	d902      	bls.n	8013336 <osEventFlagsNew+0x3a>
        mem = 1;
 8013330:	2301      	movs	r3, #1
 8013332:	613b      	str	r3, [r7, #16]
 8013334:	e00c      	b.n	8013350 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	689b      	ldr	r3, [r3, #8]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d108      	bne.n	8013350 <osEventFlagsNew+0x54>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	68db      	ldr	r3, [r3, #12]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d104      	bne.n	8013350 <osEventFlagsNew+0x54>
          mem = 0;
 8013346:	2300      	movs	r3, #0
 8013348:	613b      	str	r3, [r7, #16]
 801334a:	e001      	b.n	8013350 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801334c:	2300      	movs	r3, #0
 801334e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	2b01      	cmp	r3, #1
 8013354:	d106      	bne.n	8013364 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	689b      	ldr	r3, [r3, #8]
 801335a:	4618      	mov	r0, r3
 801335c:	f000 fa70 	bl	8013840 <xEventGroupCreateStatic>
 8013360:	6178      	str	r0, [r7, #20]
 8013362:	e005      	b.n	8013370 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d102      	bne.n	8013370 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801336a:	f000 faa0 	bl	80138ae <xEventGroupCreate>
 801336e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013370:	697b      	ldr	r3, [r7, #20]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3718      	adds	r7, #24
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
	...

0801337c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801337c:	b580      	push	{r7, lr}
 801337e:	b086      	sub	sp, #24
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d004      	beq.n	801339a <osEventFlagsSet+0x1e>
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013396:	2b00      	cmp	r3, #0
 8013398:	d003      	beq.n	80133a2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801339a:	f06f 0303 	mvn.w	r3, #3
 801339e:	617b      	str	r3, [r7, #20]
 80133a0:	e028      	b.n	80133f4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133a2:	f3ef 8305 	mrs	r3, IPSR
 80133a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80133a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d01d      	beq.n	80133ea <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80133ae:	2300      	movs	r3, #0
 80133b0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80133b2:	f107 0308 	add.w	r3, r7, #8
 80133b6:	461a      	mov	r2, r3
 80133b8:	6839      	ldr	r1, [r7, #0]
 80133ba:	6938      	ldr	r0, [r7, #16]
 80133bc:	f000 fc98 	bl	8013cf0 <xEventGroupSetBitsFromISR>
 80133c0:	4603      	mov	r3, r0
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d103      	bne.n	80133ce <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80133c6:	f06f 0302 	mvn.w	r3, #2
 80133ca:	617b      	str	r3, [r7, #20]
 80133cc:	e012      	b.n	80133f4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d00d      	beq.n	80133f4 <osEventFlagsSet+0x78>
 80133d8:	4b09      	ldr	r3, [pc, #36]	; (8013400 <osEventFlagsSet+0x84>)
 80133da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133de:	601a      	str	r2, [r3, #0]
 80133e0:	f3bf 8f4f 	dsb	sy
 80133e4:	f3bf 8f6f 	isb	sy
 80133e8:	e004      	b.n	80133f4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80133ea:	6839      	ldr	r1, [r7, #0]
 80133ec:	6938      	ldr	r0, [r7, #16]
 80133ee:	f000 fbb7 	bl	8013b60 <xEventGroupSetBits>
 80133f2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80133f4:	697b      	ldr	r3, [r7, #20]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3718      	adds	r7, #24
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
 80133fe:	bf00      	nop
 8013400:	e000ed04 	.word	0xe000ed04

08013404 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013404:	b580      	push	{r7, lr}
 8013406:	b086      	sub	sp, #24
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d004      	beq.n	8013422 <osEventFlagsClear+0x1e>
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801341e:	2b00      	cmp	r3, #0
 8013420:	d003      	beq.n	801342a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013422:	f06f 0303 	mvn.w	r3, #3
 8013426:	617b      	str	r3, [r7, #20]
 8013428:	e019      	b.n	801345e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801342a:	f3ef 8305 	mrs	r3, IPSR
 801342e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013430:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013432:	2b00      	cmp	r3, #0
 8013434:	d00e      	beq.n	8013454 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013436:	6938      	ldr	r0, [r7, #16]
 8013438:	f000 fb6e 	bl	8013b18 <xEventGroupGetBitsFromISR>
 801343c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801343e:	6839      	ldr	r1, [r7, #0]
 8013440:	6938      	ldr	r0, [r7, #16]
 8013442:	f000 fb55 	bl	8013af0 <xEventGroupClearBitsFromISR>
 8013446:	4603      	mov	r3, r0
 8013448:	2b00      	cmp	r3, #0
 801344a:	d108      	bne.n	801345e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 801344c:	f06f 0302 	mvn.w	r3, #2
 8013450:	617b      	str	r3, [r7, #20]
 8013452:	e004      	b.n	801345e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8013454:	6839      	ldr	r1, [r7, #0]
 8013456:	6938      	ldr	r0, [r7, #16]
 8013458:	f000 fb12 	bl	8013a80 <xEventGroupClearBits>
 801345c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801345e:	697b      	ldr	r3, [r7, #20]
}
 8013460:	4618      	mov	r0, r3
 8013462:	3718      	adds	r7, #24
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8013468:	b580      	push	{r7, lr}
 801346a:	b086      	sub	sp, #24
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d102      	bne.n	8013480 <osEventFlagsGet+0x18>
    rflags = 0U;
 801347a:	2300      	movs	r3, #0
 801347c:	617b      	str	r3, [r7, #20]
 801347e:	e00f      	b.n	80134a0 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013480:	f3ef 8305 	mrs	r3, IPSR
 8013484:	60fb      	str	r3, [r7, #12]
  return(result);
 8013486:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013488:	2b00      	cmp	r3, #0
 801348a:	d004      	beq.n	8013496 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801348c:	6938      	ldr	r0, [r7, #16]
 801348e:	f000 fb43 	bl	8013b18 <xEventGroupGetBitsFromISR>
 8013492:	6178      	str	r0, [r7, #20]
 8013494:	e004      	b.n	80134a0 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8013496:	2100      	movs	r1, #0
 8013498:	6938      	ldr	r0, [r7, #16]
 801349a:	f000 faf1 	bl	8013a80 <xEventGroupClearBits>
 801349e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80134a0:	697b      	ldr	r3, [r7, #20]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3718      	adds	r7, #24
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}

080134aa <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80134aa:	b580      	push	{r7, lr}
 80134ac:	b08c      	sub	sp, #48	; 0x30
 80134ae:	af02      	add	r7, sp, #8
 80134b0:	60f8      	str	r0, [r7, #12]
 80134b2:	60b9      	str	r1, [r7, #8]
 80134b4:	607a      	str	r2, [r7, #4]
 80134b6:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d004      	beq.n	80134cc <osEventFlagsWait+0x22>
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d003      	beq.n	80134d4 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80134cc:	f06f 0303 	mvn.w	r3, #3
 80134d0:	61fb      	str	r3, [r7, #28]
 80134d2:	e04b      	b.n	801356c <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134d4:	f3ef 8305 	mrs	r3, IPSR
 80134d8:	617b      	str	r3, [r7, #20]
  return(result);
 80134da:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d003      	beq.n	80134e8 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80134e0:	f06f 0305 	mvn.w	r3, #5
 80134e4:	61fb      	str	r3, [r7, #28]
 80134e6:	e041      	b.n	801356c <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f003 0301 	and.w	r3, r3, #1
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d002      	beq.n	80134f8 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80134f2:	2301      	movs	r3, #1
 80134f4:	627b      	str	r3, [r7, #36]	; 0x24
 80134f6:	e001      	b.n	80134fc <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80134f8:	2300      	movs	r3, #0
 80134fa:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f003 0302 	and.w	r3, r3, #2
 8013502:	2b00      	cmp	r3, #0
 8013504:	d002      	beq.n	801350c <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013506:	2300      	movs	r3, #0
 8013508:	623b      	str	r3, [r7, #32]
 801350a:	e001      	b.n	8013510 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801350c:	2301      	movs	r3, #1
 801350e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	9300      	str	r3, [sp, #0]
 8013514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013516:	6a3a      	ldr	r2, [r7, #32]
 8013518:	68b9      	ldr	r1, [r7, #8]
 801351a:	69b8      	ldr	r0, [r7, #24]
 801351c:	f000 f9e2 	bl	80138e4 <xEventGroupWaitBits>
 8013520:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f003 0301 	and.w	r3, r3, #1
 8013528:	2b00      	cmp	r3, #0
 801352a:	d010      	beq.n	801354e <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801352c:	68ba      	ldr	r2, [r7, #8]
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	4013      	ands	r3, r2
 8013532:	68ba      	ldr	r2, [r7, #8]
 8013534:	429a      	cmp	r2, r3
 8013536:	d019      	beq.n	801356c <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d003      	beq.n	8013546 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801353e:	f06f 0301 	mvn.w	r3, #1
 8013542:	61fb      	str	r3, [r7, #28]
 8013544:	e012      	b.n	801356c <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013546:	f06f 0302 	mvn.w	r3, #2
 801354a:	61fb      	str	r3, [r7, #28]
 801354c:	e00e      	b.n	801356c <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801354e:	68ba      	ldr	r2, [r7, #8]
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	4013      	ands	r3, r2
 8013554:	2b00      	cmp	r3, #0
 8013556:	d109      	bne.n	801356c <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d003      	beq.n	8013566 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801355e:	f06f 0301 	mvn.w	r3, #1
 8013562:	61fb      	str	r3, [r7, #28]
 8013564:	e002      	b.n	801356c <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013566:	f06f 0302 	mvn.w	r3, #2
 801356a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801356c:	69fb      	ldr	r3, [r7, #28]
}
 801356e:	4618      	mov	r0, r3
 8013570:	3728      	adds	r7, #40	; 0x28
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}

08013576 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013576:	b580      	push	{r7, lr}
 8013578:	b08a      	sub	sp, #40	; 0x28
 801357a:	af02      	add	r7, sp, #8
 801357c:	60f8      	str	r0, [r7, #12]
 801357e:	60b9      	str	r1, [r7, #8]
 8013580:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013582:	2300      	movs	r3, #0
 8013584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013586:	f3ef 8305 	mrs	r3, IPSR
 801358a:	613b      	str	r3, [r7, #16]
  return(result);
 801358c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801358e:	2b00      	cmp	r3, #0
 8013590:	d15f      	bne.n	8013652 <osMessageQueueNew+0xdc>
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d05c      	beq.n	8013652 <osMessageQueueNew+0xdc>
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d059      	beq.n	8013652 <osMessageQueueNew+0xdc>
    mem = -1;
 801359e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d029      	beq.n	80135fe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d012      	beq.n	80135d8 <osMessageQueueNew+0x62>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	2b4f      	cmp	r3, #79	; 0x4f
 80135b8:	d90e      	bls.n	80135d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d00a      	beq.n	80135d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	695a      	ldr	r2, [r3, #20]
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	68b9      	ldr	r1, [r7, #8]
 80135ca:	fb01 f303 	mul.w	r3, r1, r3
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d302      	bcc.n	80135d8 <osMessageQueueNew+0x62>
        mem = 1;
 80135d2:	2301      	movs	r3, #1
 80135d4:	61bb      	str	r3, [r7, #24]
 80135d6:	e014      	b.n	8013602 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	689b      	ldr	r3, [r3, #8]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d110      	bne.n	8013602 <osMessageQueueNew+0x8c>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	68db      	ldr	r3, [r3, #12]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10c      	bne.n	8013602 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d108      	bne.n	8013602 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	695b      	ldr	r3, [r3, #20]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d104      	bne.n	8013602 <osMessageQueueNew+0x8c>
          mem = 0;
 80135f8:	2300      	movs	r3, #0
 80135fa:	61bb      	str	r3, [r7, #24]
 80135fc:	e001      	b.n	8013602 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80135fe:	2300      	movs	r3, #0
 8013600:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	2b01      	cmp	r3, #1
 8013606:	d10b      	bne.n	8013620 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	691a      	ldr	r2, [r3, #16]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	689b      	ldr	r3, [r3, #8]
 8013610:	2100      	movs	r1, #0
 8013612:	9100      	str	r1, [sp, #0]
 8013614:	68b9      	ldr	r1, [r7, #8]
 8013616:	68f8      	ldr	r0, [r7, #12]
 8013618:	f000 fc9a 	bl	8013f50 <xQueueGenericCreateStatic>
 801361c:	61f8      	str	r0, [r7, #28]
 801361e:	e008      	b.n	8013632 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d105      	bne.n	8013632 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8013626:	2200      	movs	r2, #0
 8013628:	68b9      	ldr	r1, [r7, #8]
 801362a:	68f8      	ldr	r0, [r7, #12]
 801362c:	f000 fd08 	bl	8014040 <xQueueGenericCreate>
 8013630:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013632:	69fb      	ldr	r3, [r7, #28]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d00c      	beq.n	8013652 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d003      	beq.n	8013646 <osMessageQueueNew+0xd0>
        name = attr->name;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	617b      	str	r3, [r7, #20]
 8013644:	e001      	b.n	801364a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8013646:	2300      	movs	r3, #0
 8013648:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801364a:	6979      	ldr	r1, [r7, #20]
 801364c:	69f8      	ldr	r0, [r7, #28]
 801364e:	f001 f95f 	bl	8014910 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013652:	69fb      	ldr	r3, [r7, #28]
}
 8013654:	4618      	mov	r0, r3
 8013656:	3720      	adds	r7, #32
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801365c:	b580      	push	{r7, lr}
 801365e:	b088      	sub	sp, #32
 8013660:	af00      	add	r7, sp, #0
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	603b      	str	r3, [r7, #0]
 8013668:	4613      	mov	r3, r2
 801366a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013670:	2300      	movs	r3, #0
 8013672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013674:	f3ef 8305 	mrs	r3, IPSR
 8013678:	617b      	str	r3, [r7, #20]
  return(result);
 801367a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801367c:	2b00      	cmp	r3, #0
 801367e:	d028      	beq.n	80136d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d005      	beq.n	8013692 <osMessageQueuePut+0x36>
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d002      	beq.n	8013692 <osMessageQueuePut+0x36>
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d003      	beq.n	801369a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013692:	f06f 0303 	mvn.w	r3, #3
 8013696:	61fb      	str	r3, [r7, #28]
 8013698:	e038      	b.n	801370c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801369a:	2300      	movs	r3, #0
 801369c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801369e:	f107 0210 	add.w	r2, r7, #16
 80136a2:	2300      	movs	r3, #0
 80136a4:	68b9      	ldr	r1, [r7, #8]
 80136a6:	69b8      	ldr	r0, [r7, #24]
 80136a8:	f000 fe26 	bl	80142f8 <xQueueGenericSendFromISR>
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d003      	beq.n	80136ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80136b2:	f06f 0302 	mvn.w	r3, #2
 80136b6:	61fb      	str	r3, [r7, #28]
 80136b8:	e028      	b.n	801370c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d025      	beq.n	801370c <osMessageQueuePut+0xb0>
 80136c0:	4b15      	ldr	r3, [pc, #84]	; (8013718 <osMessageQueuePut+0xbc>)
 80136c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136c6:	601a      	str	r2, [r3, #0]
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	f3bf 8f6f 	isb	sy
 80136d0:	e01c      	b.n	801370c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d002      	beq.n	80136de <osMessageQueuePut+0x82>
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d103      	bne.n	80136e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80136de:	f06f 0303 	mvn.w	r3, #3
 80136e2:	61fb      	str	r3, [r7, #28]
 80136e4:	e012      	b.n	801370c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80136e6:	2300      	movs	r3, #0
 80136e8:	683a      	ldr	r2, [r7, #0]
 80136ea:	68b9      	ldr	r1, [r7, #8]
 80136ec:	69b8      	ldr	r0, [r7, #24]
 80136ee:	f000 fd05 	bl	80140fc <xQueueGenericSend>
 80136f2:	4603      	mov	r3, r0
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d009      	beq.n	801370c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d003      	beq.n	8013706 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80136fe:	f06f 0301 	mvn.w	r3, #1
 8013702:	61fb      	str	r3, [r7, #28]
 8013704:	e002      	b.n	801370c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013706:	f06f 0302 	mvn.w	r3, #2
 801370a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801370c:	69fb      	ldr	r3, [r7, #28]
}
 801370e:	4618      	mov	r0, r3
 8013710:	3720      	adds	r7, #32
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
 8013716:	bf00      	nop
 8013718:	e000ed04 	.word	0xe000ed04

0801371c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801371c:	b580      	push	{r7, lr}
 801371e:	b088      	sub	sp, #32
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	607a      	str	r2, [r7, #4]
 8013728:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801372e:	2300      	movs	r3, #0
 8013730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013732:	f3ef 8305 	mrs	r3, IPSR
 8013736:	617b      	str	r3, [r7, #20]
  return(result);
 8013738:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801373a:	2b00      	cmp	r3, #0
 801373c:	d028      	beq.n	8013790 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d005      	beq.n	8013750 <osMessageQueueGet+0x34>
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d002      	beq.n	8013750 <osMessageQueueGet+0x34>
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d003      	beq.n	8013758 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013750:	f06f 0303 	mvn.w	r3, #3
 8013754:	61fb      	str	r3, [r7, #28]
 8013756:	e037      	b.n	80137c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013758:	2300      	movs	r3, #0
 801375a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801375c:	f107 0310 	add.w	r3, r7, #16
 8013760:	461a      	mov	r2, r3
 8013762:	68b9      	ldr	r1, [r7, #8]
 8013764:	69b8      	ldr	r0, [r7, #24]
 8013766:	f000 ff43 	bl	80145f0 <xQueueReceiveFromISR>
 801376a:	4603      	mov	r3, r0
 801376c:	2b01      	cmp	r3, #1
 801376e:	d003      	beq.n	8013778 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013770:	f06f 0302 	mvn.w	r3, #2
 8013774:	61fb      	str	r3, [r7, #28]
 8013776:	e027      	b.n	80137c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d024      	beq.n	80137c8 <osMessageQueueGet+0xac>
 801377e:	4b15      	ldr	r3, [pc, #84]	; (80137d4 <osMessageQueueGet+0xb8>)
 8013780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013784:	601a      	str	r2, [r3, #0]
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	f3bf 8f6f 	isb	sy
 801378e:	e01b      	b.n	80137c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013790:	69bb      	ldr	r3, [r7, #24]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d002      	beq.n	801379c <osMessageQueueGet+0x80>
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d103      	bne.n	80137a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801379c:	f06f 0303 	mvn.w	r3, #3
 80137a0:	61fb      	str	r3, [r7, #28]
 80137a2:	e011      	b.n	80137c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80137a4:	683a      	ldr	r2, [r7, #0]
 80137a6:	68b9      	ldr	r1, [r7, #8]
 80137a8:	69b8      	ldr	r0, [r7, #24]
 80137aa:	f000 fe41 	bl	8014430 <xQueueReceive>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b01      	cmp	r3, #1
 80137b2:	d009      	beq.n	80137c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d003      	beq.n	80137c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80137ba:	f06f 0301 	mvn.w	r3, #1
 80137be:	61fb      	str	r3, [r7, #28]
 80137c0:	e002      	b.n	80137c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80137c2:	f06f 0302 	mvn.w	r3, #2
 80137c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80137c8:	69fb      	ldr	r3, [r7, #28]
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3720      	adds	r7, #32
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	e000ed04 	.word	0xe000ed04

080137d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80137d8:	b480      	push	{r7}
 80137da:	b085      	sub	sp, #20
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	4a07      	ldr	r2, [pc, #28]	; (8013804 <vApplicationGetIdleTaskMemory+0x2c>)
 80137e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	4a06      	ldr	r2, [pc, #24]	; (8013808 <vApplicationGetIdleTaskMemory+0x30>)
 80137ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2280      	movs	r2, #128	; 0x80
 80137f4:	601a      	str	r2, [r3, #0]
}
 80137f6:	bf00      	nop
 80137f8:	3714      	adds	r7, #20
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr
 8013802:	bf00      	nop
 8013804:	24001134 	.word	0x24001134
 8013808:	24001190 	.word	0x24001190

0801380c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801380c:	b480      	push	{r7}
 801380e:	b085      	sub	sp, #20
 8013810:	af00      	add	r7, sp, #0
 8013812:	60f8      	str	r0, [r7, #12]
 8013814:	60b9      	str	r1, [r7, #8]
 8013816:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	4a07      	ldr	r2, [pc, #28]	; (8013838 <vApplicationGetTimerTaskMemory+0x2c>)
 801381c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	4a06      	ldr	r2, [pc, #24]	; (801383c <vApplicationGetTimerTaskMemory+0x30>)
 8013822:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f44f 7280 	mov.w	r2, #256	; 0x100
 801382a:	601a      	str	r2, [r3, #0]
}
 801382c:	bf00      	nop
 801382e:	3714      	adds	r7, #20
 8013830:	46bd      	mov	sp, r7
 8013832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013836:	4770      	bx	lr
 8013838:	24001390 	.word	0x24001390
 801383c:	240013ec 	.word	0x240013ec

08013840 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013840:	b580      	push	{r7, lr}
 8013842:	b086      	sub	sp, #24
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d10a      	bne.n	8013864 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013852:	f383 8811 	msr	BASEPRI, r3
 8013856:	f3bf 8f6f 	isb	sy
 801385a:	f3bf 8f4f 	dsb	sy
 801385e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013860:	bf00      	nop
 8013862:	e7fe      	b.n	8013862 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013864:	2320      	movs	r3, #32
 8013866:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	2b20      	cmp	r3, #32
 801386c:	d00a      	beq.n	8013884 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013872:	f383 8811 	msr	BASEPRI, r3
 8013876:	f3bf 8f6f 	isb	sy
 801387a:	f3bf 8f4f 	dsb	sy
 801387e:	60fb      	str	r3, [r7, #12]
}
 8013880:	bf00      	nop
 8013882:	e7fe      	b.n	8013882 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d00a      	beq.n	80138a4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	2200      	movs	r2, #0
 8013892:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	3304      	adds	r3, #4
 8013898:	4618      	mov	r0, r3
 801389a:	f000 fa3d 	bl	8013d18 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	2201      	movs	r2, #1
 80138a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80138a4:	697b      	ldr	r3, [r7, #20]
	}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3718      	adds	r7, #24
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}

080138ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80138ae:	b580      	push	{r7, lr}
 80138b0:	b082      	sub	sp, #8
 80138b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80138b4:	2020      	movs	r0, #32
 80138b6:	f002 ff1f 	bl	80166f8 <pvPortMalloc>
 80138ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d00a      	beq.n	80138d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	3304      	adds	r3, #4
 80138cc:	4618      	mov	r0, r3
 80138ce:	f000 fa23 	bl	8013d18 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2200      	movs	r2, #0
 80138d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80138d8:	687b      	ldr	r3, [r7, #4]
	}
 80138da:	4618      	mov	r0, r3
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
	...

080138e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b090      	sub	sp, #64	; 0x40
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
 80138f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80138f6:	2300      	movs	r3, #0
 80138f8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80138fa:	2300      	movs	r3, #0
 80138fc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d10a      	bne.n	801391a <xEventGroupWaitBits+0x36>
	__asm volatile
 8013904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013908:	f383 8811 	msr	BASEPRI, r3
 801390c:	f3bf 8f6f 	isb	sy
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	623b      	str	r3, [r7, #32]
}
 8013916:	bf00      	nop
 8013918:	e7fe      	b.n	8013918 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013920:	2b00      	cmp	r3, #0
 8013922:	d00a      	beq.n	801393a <xEventGroupWaitBits+0x56>
	__asm volatile
 8013924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013928:	f383 8811 	msr	BASEPRI, r3
 801392c:	f3bf 8f6f 	isb	sy
 8013930:	f3bf 8f4f 	dsb	sy
 8013934:	61fb      	str	r3, [r7, #28]
}
 8013936:	bf00      	nop
 8013938:	e7fe      	b.n	8013938 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d10a      	bne.n	8013956 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013944:	f383 8811 	msr	BASEPRI, r3
 8013948:	f3bf 8f6f 	isb	sy
 801394c:	f3bf 8f4f 	dsb	sy
 8013950:	61bb      	str	r3, [r7, #24]
}
 8013952:	bf00      	nop
 8013954:	e7fe      	b.n	8013954 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013956:	f002 f817 	bl	8015988 <xTaskGetSchedulerState>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d102      	bne.n	8013966 <xEventGroupWaitBits+0x82>
 8013960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013962:	2b00      	cmp	r3, #0
 8013964:	d101      	bne.n	801396a <xEventGroupWaitBits+0x86>
 8013966:	2301      	movs	r3, #1
 8013968:	e000      	b.n	801396c <xEventGroupWaitBits+0x88>
 801396a:	2300      	movs	r3, #0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d10a      	bne.n	8013986 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013974:	f383 8811 	msr	BASEPRI, r3
 8013978:	f3bf 8f6f 	isb	sy
 801397c:	f3bf 8f4f 	dsb	sy
 8013980:	617b      	str	r3, [r7, #20]
}
 8013982:	bf00      	nop
 8013984:	e7fe      	b.n	8013984 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013986:	f001 fb77 	bl	8015078 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801398a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013990:	683a      	ldr	r2, [r7, #0]
 8013992:	68b9      	ldr	r1, [r7, #8]
 8013994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013996:	f000 f988 	bl	8013caa <prvTestWaitCondition>
 801399a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d00e      	beq.n	80139c0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80139a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80139a6:	2300      	movs	r3, #0
 80139a8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d028      	beq.n	8013a02 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80139b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139b2:	681a      	ldr	r2, [r3, #0]
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	43db      	mvns	r3, r3
 80139b8:	401a      	ands	r2, r3
 80139ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139bc:	601a      	str	r2, [r3, #0]
 80139be:	e020      	b.n	8013a02 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80139c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d104      	bne.n	80139d0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80139c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80139ca:	2301      	movs	r3, #1
 80139cc:	633b      	str	r3, [r7, #48]	; 0x30
 80139ce:	e018      	b.n	8013a02 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d003      	beq.n	80139de <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80139d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80139dc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d003      	beq.n	80139ec <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80139e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80139ea:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80139ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ee:	1d18      	adds	r0, r3, #4
 80139f0:	68ba      	ldr	r2, [r7, #8]
 80139f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f4:	4313      	orrs	r3, r2
 80139f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139f8:	4619      	mov	r1, r3
 80139fa:	f001 fd3d 	bl	8015478 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013a02:	f001 fb47 	bl	8015094 <xTaskResumeAll>
 8013a06:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d031      	beq.n	8013a72 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d107      	bne.n	8013a24 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013a14:	4b19      	ldr	r3, [pc, #100]	; (8013a7c <xEventGroupWaitBits+0x198>)
 8013a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a1a:	601a      	str	r2, [r3, #0]
 8013a1c:	f3bf 8f4f 	dsb	sy
 8013a20:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013a24:	f002 f83c 	bl	8015aa0 <uxTaskResetEventItemValue>
 8013a28:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d11a      	bne.n	8013a6a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013a34:	f002 fd3e 	bl	80164b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013a3e:	683a      	ldr	r2, [r7, #0]
 8013a40:	68b9      	ldr	r1, [r7, #8]
 8013a42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a44:	f000 f931 	bl	8013caa <prvTestWaitCondition>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d009      	beq.n	8013a62 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d006      	beq.n	8013a62 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a56:	681a      	ldr	r2, [r3, #0]
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	43db      	mvns	r3, r3
 8013a5c:	401a      	ands	r2, r3
 8013a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a60:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013a62:	2301      	movs	r3, #1
 8013a64:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013a66:	f002 fd55 	bl	8016514 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013a70:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3740      	adds	r7, #64	; 0x40
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	e000ed04 	.word	0xe000ed04

08013a80 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b086      	sub	sp, #24
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d10a      	bne.n	8013aaa <xEventGroupClearBits+0x2a>
	__asm volatile
 8013a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a98:	f383 8811 	msr	BASEPRI, r3
 8013a9c:	f3bf 8f6f 	isb	sy
 8013aa0:	f3bf 8f4f 	dsb	sy
 8013aa4:	60fb      	str	r3, [r7, #12]
}
 8013aa6:	bf00      	nop
 8013aa8:	e7fe      	b.n	8013aa8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d00a      	beq.n	8013aca <xEventGroupClearBits+0x4a>
	__asm volatile
 8013ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab8:	f383 8811 	msr	BASEPRI, r3
 8013abc:	f3bf 8f6f 	isb	sy
 8013ac0:	f3bf 8f4f 	dsb	sy
 8013ac4:	60bb      	str	r3, [r7, #8]
}
 8013ac6:	bf00      	nop
 8013ac8:	e7fe      	b.n	8013ac8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013aca:	f002 fcf3 	bl	80164b4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	681a      	ldr	r2, [r3, #0]
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	43db      	mvns	r3, r3
 8013adc:	401a      	ands	r2, r3
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013ae2:	f002 fd17 	bl	8016514 <vPortExitCritical>

	return uxReturn;
 8013ae6:	693b      	ldr	r3, [r7, #16]
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3718      	adds	r7, #24
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013afa:	2300      	movs	r3, #0
 8013afc:	683a      	ldr	r2, [r7, #0]
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	4804      	ldr	r0, [pc, #16]	; (8013b14 <xEventGroupClearBitsFromISR+0x24>)
 8013b02:	f002 fb87 	bl	8016214 <xTimerPendFunctionCallFromISR>
 8013b06:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013b08:	68fb      	ldr	r3, [r7, #12]
	}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3710      	adds	r7, #16
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	08013c91 	.word	0x08013c91

08013b18 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013b18:	b480      	push	{r7}
 8013b1a:	b089      	sub	sp, #36	; 0x24
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b24:	f3ef 8211 	mrs	r2, BASEPRI
 8013b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2c:	f383 8811 	msr	BASEPRI, r3
 8013b30:	f3bf 8f6f 	isb	sy
 8013b34:	f3bf 8f4f 	dsb	sy
 8013b38:	60fa      	str	r2, [r7, #12]
 8013b3a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b3e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	617b      	str	r3, [r7, #20]
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013b50:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013b52:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013b54:	4618      	mov	r0, r3
 8013b56:	3724      	adds	r7, #36	; 0x24
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr

08013b60 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b08e      	sub	sp, #56	; 0x38
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013b72:	2300      	movs	r3, #0
 8013b74:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d10a      	bne.n	8013b92 <xEventGroupSetBits+0x32>
	__asm volatile
 8013b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b80:	f383 8811 	msr	BASEPRI, r3
 8013b84:	f3bf 8f6f 	isb	sy
 8013b88:	f3bf 8f4f 	dsb	sy
 8013b8c:	613b      	str	r3, [r7, #16]
}
 8013b8e:	bf00      	nop
 8013b90:	e7fe      	b.n	8013b90 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d00a      	beq.n	8013bb2 <xEventGroupSetBits+0x52>
	__asm volatile
 8013b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba0:	f383 8811 	msr	BASEPRI, r3
 8013ba4:	f3bf 8f6f 	isb	sy
 8013ba8:	f3bf 8f4f 	dsb	sy
 8013bac:	60fb      	str	r3, [r7, #12]
}
 8013bae:	bf00      	nop
 8013bb0:	e7fe      	b.n	8013bb0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb4:	3304      	adds	r3, #4
 8013bb6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bba:	3308      	adds	r3, #8
 8013bbc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013bbe:	f001 fa5b 	bl	8015078 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc4:	68db      	ldr	r3, [r3, #12]
 8013bc6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	431a      	orrs	r2, r3
 8013bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013bd4:	e03c      	b.n	8013c50 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bd8:	685b      	ldr	r3, [r3, #4]
 8013bda:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013be2:	2300      	movs	r3, #0
 8013be4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013bec:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013bee:	69bb      	ldr	r3, [r7, #24]
 8013bf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013bf4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d108      	bne.n	8013c12 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	69bb      	ldr	r3, [r7, #24]
 8013c06:	4013      	ands	r3, r2
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d00b      	beq.n	8013c24 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c10:	e008      	b.n	8013c24 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c14:	681a      	ldr	r2, [r3, #0]
 8013c16:	69bb      	ldr	r3, [r7, #24]
 8013c18:	4013      	ands	r3, r2
 8013c1a:	69ba      	ldr	r2, [r7, #24]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d101      	bne.n	8013c24 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013c20:	2301      	movs	r3, #1
 8013c22:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d010      	beq.n	8013c4c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013c2a:	697b      	ldr	r3, [r7, #20]
 8013c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d003      	beq.n	8013c3c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c36:	69bb      	ldr	r3, [r7, #24]
 8013c38:	4313      	orrs	r3, r2
 8013c3a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013c44:	4619      	mov	r1, r3
 8013c46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c48:	f001 fce2 	bl	8015610 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013c4c:	69fb      	ldr	r3, [r7, #28]
 8013c4e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c52:	6a3b      	ldr	r3, [r7, #32]
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d1be      	bne.n	8013bd6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c5e:	43db      	mvns	r3, r3
 8013c60:	401a      	ands	r2, r3
 8013c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c64:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013c66:	f001 fa15 	bl	8015094 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6c:	681b      	ldr	r3, [r3, #0]
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3738      	adds	r7, #56	; 0x38
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}

08013c76 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013c76:	b580      	push	{r7, lr}
 8013c78:	b082      	sub	sp, #8
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	6078      	str	r0, [r7, #4]
 8013c7e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013c80:	6839      	ldr	r1, [r7, #0]
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7ff ff6c 	bl	8013b60 <xEventGroupSetBits>
}
 8013c88:	bf00      	nop
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b082      	sub	sp, #8
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013c9a:	6839      	ldr	r1, [r7, #0]
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f7ff feef 	bl	8013a80 <xEventGroupClearBits>
}
 8013ca2:	bf00      	nop
 8013ca4:	3708      	adds	r7, #8
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}

08013caa <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013caa:	b480      	push	{r7}
 8013cac:	b087      	sub	sp, #28
 8013cae:	af00      	add	r7, sp, #0
 8013cb0:	60f8      	str	r0, [r7, #12]
 8013cb2:	60b9      	str	r1, [r7, #8]
 8013cb4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d107      	bne.n	8013cd0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013cc0:	68fa      	ldr	r2, [r7, #12]
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	4013      	ands	r3, r2
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00a      	beq.n	8013ce0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013cca:	2301      	movs	r3, #1
 8013ccc:	617b      	str	r3, [r7, #20]
 8013cce:	e007      	b.n	8013ce0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013cd0:	68fa      	ldr	r2, [r7, #12]
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	4013      	ands	r3, r2
 8013cd6:	68ba      	ldr	r2, [r7, #8]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d101      	bne.n	8013ce0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013cdc:	2301      	movs	r3, #1
 8013cde:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013ce0:	697b      	ldr	r3, [r7, #20]
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	371c      	adds	r7, #28
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cec:	4770      	bx	lr
	...

08013cf0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	68ba      	ldr	r2, [r7, #8]
 8013d00:	68f9      	ldr	r1, [r7, #12]
 8013d02:	4804      	ldr	r0, [pc, #16]	; (8013d14 <xEventGroupSetBitsFromISR+0x24>)
 8013d04:	f002 fa86 	bl	8016214 <xTimerPendFunctionCallFromISR>
 8013d08:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013d0a:	697b      	ldr	r3, [r7, #20]
	}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3718      	adds	r7, #24
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	08013c77 	.word	0x08013c77

08013d18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b083      	sub	sp, #12
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f103 0208 	add.w	r2, r3, #8
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f103 0208 	add.w	r2, r3, #8
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f103 0208 	add.w	r2, r3, #8
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013d4c:	bf00      	nop
 8013d4e:	370c      	adds	r7, #12
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2200      	movs	r2, #0
 8013d64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013d66:	bf00      	nop
 8013d68:	370c      	adds	r7, #12
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d70:	4770      	bx	lr

08013d72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d72:	b480      	push	{r7}
 8013d74:	b085      	sub	sp, #20
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
 8013d7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	68fa      	ldr	r2, [r7, #12]
 8013d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	689a      	ldr	r2, [r3, #8]
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	689b      	ldr	r3, [r3, #8]
 8013d94:	683a      	ldr	r2, [r7, #0]
 8013d96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	683a      	ldr	r2, [r7, #0]
 8013d9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	1c5a      	adds	r2, r3, #1
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	601a      	str	r2, [r3, #0]
}
 8013dae:	bf00      	nop
 8013db0:	3714      	adds	r7, #20
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr

08013dba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013dba:	b480      	push	{r7}
 8013dbc:	b085      	sub	sp, #20
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
 8013dc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dd0:	d103      	bne.n	8013dda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	691b      	ldr	r3, [r3, #16]
 8013dd6:	60fb      	str	r3, [r7, #12]
 8013dd8:	e00c      	b.n	8013df4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	3308      	adds	r3, #8
 8013dde:	60fb      	str	r3, [r7, #12]
 8013de0:	e002      	b.n	8013de8 <vListInsert+0x2e>
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	60fb      	str	r3, [r7, #12]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	68ba      	ldr	r2, [r7, #8]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d2f6      	bcs.n	8013de2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	685a      	ldr	r2, [r3, #4]
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	683a      	ldr	r2, [r7, #0]
 8013e02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	68fa      	ldr	r2, [r7, #12]
 8013e08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	683a      	ldr	r2, [r7, #0]
 8013e0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	1c5a      	adds	r2, r3, #1
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	601a      	str	r2, [r3, #0]
}
 8013e20:	bf00      	nop
 8013e22:	3714      	adds	r7, #20
 8013e24:	46bd      	mov	sp, r7
 8013e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2a:	4770      	bx	lr

08013e2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b085      	sub	sp, #20
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	691b      	ldr	r3, [r3, #16]
 8013e38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	6892      	ldr	r2, [r2, #8]
 8013e42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	689b      	ldr	r3, [r3, #8]
 8013e48:	687a      	ldr	r2, [r7, #4]
 8013e4a:	6852      	ldr	r2, [r2, #4]
 8013e4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	685b      	ldr	r3, [r3, #4]
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d103      	bne.n	8013e60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	689a      	ldr	r2, [r3, #8]
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2200      	movs	r2, #0
 8013e64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	1e5a      	subs	r2, r3, #1
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	681b      	ldr	r3, [r3, #0]
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3714      	adds	r7, #20
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d10a      	bne.n	8013eaa <xQueueGenericReset+0x2a>
	__asm volatile
 8013e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e98:	f383 8811 	msr	BASEPRI, r3
 8013e9c:	f3bf 8f6f 	isb	sy
 8013ea0:	f3bf 8f4f 	dsb	sy
 8013ea4:	60bb      	str	r3, [r7, #8]
}
 8013ea6:	bf00      	nop
 8013ea8:	e7fe      	b.n	8013ea8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013eaa:	f002 fb03 	bl	80164b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681a      	ldr	r2, [r3, #0]
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eb6:	68f9      	ldr	r1, [r7, #12]
 8013eb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013eba:	fb01 f303 	mul.w	r3, r1, r3
 8013ebe:	441a      	add	r2, r3
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	681a      	ldr	r2, [r3, #0]
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681a      	ldr	r2, [r3, #0]
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eda:	3b01      	subs	r3, #1
 8013edc:	68f9      	ldr	r1, [r7, #12]
 8013ede:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013ee0:	fb01 f303 	mul.w	r3, r1, r3
 8013ee4:	441a      	add	r2, r3
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	22ff      	movs	r2, #255	; 0xff
 8013eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	22ff      	movs	r2, #255	; 0xff
 8013ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d114      	bne.n	8013f2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	691b      	ldr	r3, [r3, #16]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d01a      	beq.n	8013f3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	3310      	adds	r3, #16
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f001 fb1b 	bl	8015548 <xTaskRemoveFromEventList>
 8013f12:	4603      	mov	r3, r0
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d012      	beq.n	8013f3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013f18:	4b0c      	ldr	r3, [pc, #48]	; (8013f4c <xQueueGenericReset+0xcc>)
 8013f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f1e:	601a      	str	r2, [r3, #0]
 8013f20:	f3bf 8f4f 	dsb	sy
 8013f24:	f3bf 8f6f 	isb	sy
 8013f28:	e009      	b.n	8013f3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	3310      	adds	r3, #16
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7ff fef2 	bl	8013d18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3324      	adds	r3, #36	; 0x24
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7ff feed 	bl	8013d18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013f3e:	f002 fae9 	bl	8016514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013f42:	2301      	movs	r3, #1
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	3710      	adds	r7, #16
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}
 8013f4c:	e000ed04 	.word	0xe000ed04

08013f50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b08e      	sub	sp, #56	; 0x38
 8013f54:	af02      	add	r7, sp, #8
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	607a      	str	r2, [r7, #4]
 8013f5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d10a      	bne.n	8013f7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f68:	f383 8811 	msr	BASEPRI, r3
 8013f6c:	f3bf 8f6f 	isb	sy
 8013f70:	f3bf 8f4f 	dsb	sy
 8013f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013f76:	bf00      	nop
 8013f78:	e7fe      	b.n	8013f78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d10a      	bne.n	8013f96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f84:	f383 8811 	msr	BASEPRI, r3
 8013f88:	f3bf 8f6f 	isb	sy
 8013f8c:	f3bf 8f4f 	dsb	sy
 8013f90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013f92:	bf00      	nop
 8013f94:	e7fe      	b.n	8013f94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d002      	beq.n	8013fa2 <xQueueGenericCreateStatic+0x52>
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d001      	beq.n	8013fa6 <xQueueGenericCreateStatic+0x56>
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	e000      	b.n	8013fa8 <xQueueGenericCreateStatic+0x58>
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d10a      	bne.n	8013fc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb0:	f383 8811 	msr	BASEPRI, r3
 8013fb4:	f3bf 8f6f 	isb	sy
 8013fb8:	f3bf 8f4f 	dsb	sy
 8013fbc:	623b      	str	r3, [r7, #32]
}
 8013fbe:	bf00      	nop
 8013fc0:	e7fe      	b.n	8013fc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d102      	bne.n	8013fce <xQueueGenericCreateStatic+0x7e>
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d101      	bne.n	8013fd2 <xQueueGenericCreateStatic+0x82>
 8013fce:	2301      	movs	r3, #1
 8013fd0:	e000      	b.n	8013fd4 <xQueueGenericCreateStatic+0x84>
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d10a      	bne.n	8013fee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fdc:	f383 8811 	msr	BASEPRI, r3
 8013fe0:	f3bf 8f6f 	isb	sy
 8013fe4:	f3bf 8f4f 	dsb	sy
 8013fe8:	61fb      	str	r3, [r7, #28]
}
 8013fea:	bf00      	nop
 8013fec:	e7fe      	b.n	8013fec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013fee:	2350      	movs	r3, #80	; 0x50
 8013ff0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	2b50      	cmp	r3, #80	; 0x50
 8013ff6:	d00a      	beq.n	801400e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffc:	f383 8811 	msr	BASEPRI, r3
 8014000:	f3bf 8f6f 	isb	sy
 8014004:	f3bf 8f4f 	dsb	sy
 8014008:	61bb      	str	r3, [r7, #24]
}
 801400a:	bf00      	nop
 801400c:	e7fe      	b.n	801400c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801400e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00d      	beq.n	8014036 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401c:	2201      	movs	r2, #1
 801401e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014022:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	4613      	mov	r3, r2
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	68b9      	ldr	r1, [r7, #8]
 8014030:	68f8      	ldr	r0, [r7, #12]
 8014032:	f000 f83f 	bl	80140b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014038:	4618      	mov	r0, r3
 801403a:	3730      	adds	r7, #48	; 0x30
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014040:	b580      	push	{r7, lr}
 8014042:	b08a      	sub	sp, #40	; 0x28
 8014044:	af02      	add	r7, sp, #8
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	60b9      	str	r1, [r7, #8]
 801404a:	4613      	mov	r3, r2
 801404c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10a      	bne.n	801406a <xQueueGenericCreate+0x2a>
	__asm volatile
 8014054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014058:	f383 8811 	msr	BASEPRI, r3
 801405c:	f3bf 8f6f 	isb	sy
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	613b      	str	r3, [r7, #16]
}
 8014066:	bf00      	nop
 8014068:	e7fe      	b.n	8014068 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	68ba      	ldr	r2, [r7, #8]
 801406e:	fb02 f303 	mul.w	r3, r2, r3
 8014072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	3350      	adds	r3, #80	; 0x50
 8014078:	4618      	mov	r0, r3
 801407a:	f002 fb3d 	bl	80166f8 <pvPortMalloc>
 801407e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d011      	beq.n	80140aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014086:	69bb      	ldr	r3, [r7, #24]
 8014088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	3350      	adds	r3, #80	; 0x50
 801408e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	2200      	movs	r2, #0
 8014094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014098:	79fa      	ldrb	r2, [r7, #7]
 801409a:	69bb      	ldr	r3, [r7, #24]
 801409c:	9300      	str	r3, [sp, #0]
 801409e:	4613      	mov	r3, r2
 80140a0:	697a      	ldr	r2, [r7, #20]
 80140a2:	68b9      	ldr	r1, [r7, #8]
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f000 f805 	bl	80140b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80140aa:	69bb      	ldr	r3, [r7, #24]
	}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3720      	adds	r7, #32
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	60b9      	str	r1, [r7, #8]
 80140be:	607a      	str	r2, [r7, #4]
 80140c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d103      	bne.n	80140d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80140c8:	69bb      	ldr	r3, [r7, #24]
 80140ca:	69ba      	ldr	r2, [r7, #24]
 80140cc:	601a      	str	r2, [r3, #0]
 80140ce:	e002      	b.n	80140d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	68ba      	ldr	r2, [r7, #8]
 80140e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80140e2:	2101      	movs	r1, #1
 80140e4:	69b8      	ldr	r0, [r7, #24]
 80140e6:	f7ff fecb 	bl	8013e80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	78fa      	ldrb	r2, [r7, #3]
 80140ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80140f2:	bf00      	nop
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
	...

080140fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b08e      	sub	sp, #56	; 0x38
 8014100:	af00      	add	r7, sp, #0
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	60b9      	str	r1, [r7, #8]
 8014106:	607a      	str	r2, [r7, #4]
 8014108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801410a:	2300      	movs	r3, #0
 801410c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014114:	2b00      	cmp	r3, #0
 8014116:	d10a      	bne.n	801412e <xQueueGenericSend+0x32>
	__asm volatile
 8014118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801411c:	f383 8811 	msr	BASEPRI, r3
 8014120:	f3bf 8f6f 	isb	sy
 8014124:	f3bf 8f4f 	dsb	sy
 8014128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801412a:	bf00      	nop
 801412c:	e7fe      	b.n	801412c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d103      	bne.n	801413c <xQueueGenericSend+0x40>
 8014134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014138:	2b00      	cmp	r3, #0
 801413a:	d101      	bne.n	8014140 <xQueueGenericSend+0x44>
 801413c:	2301      	movs	r3, #1
 801413e:	e000      	b.n	8014142 <xQueueGenericSend+0x46>
 8014140:	2300      	movs	r3, #0
 8014142:	2b00      	cmp	r3, #0
 8014144:	d10a      	bne.n	801415c <xQueueGenericSend+0x60>
	__asm volatile
 8014146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801414a:	f383 8811 	msr	BASEPRI, r3
 801414e:	f3bf 8f6f 	isb	sy
 8014152:	f3bf 8f4f 	dsb	sy
 8014156:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014158:	bf00      	nop
 801415a:	e7fe      	b.n	801415a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	2b02      	cmp	r3, #2
 8014160:	d103      	bne.n	801416a <xQueueGenericSend+0x6e>
 8014162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014166:	2b01      	cmp	r3, #1
 8014168:	d101      	bne.n	801416e <xQueueGenericSend+0x72>
 801416a:	2301      	movs	r3, #1
 801416c:	e000      	b.n	8014170 <xQueueGenericSend+0x74>
 801416e:	2300      	movs	r3, #0
 8014170:	2b00      	cmp	r3, #0
 8014172:	d10a      	bne.n	801418a <xQueueGenericSend+0x8e>
	__asm volatile
 8014174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014178:	f383 8811 	msr	BASEPRI, r3
 801417c:	f3bf 8f6f 	isb	sy
 8014180:	f3bf 8f4f 	dsb	sy
 8014184:	623b      	str	r3, [r7, #32]
}
 8014186:	bf00      	nop
 8014188:	e7fe      	b.n	8014188 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801418a:	f001 fbfd 	bl	8015988 <xTaskGetSchedulerState>
 801418e:	4603      	mov	r3, r0
 8014190:	2b00      	cmp	r3, #0
 8014192:	d102      	bne.n	801419a <xQueueGenericSend+0x9e>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d101      	bne.n	801419e <xQueueGenericSend+0xa2>
 801419a:	2301      	movs	r3, #1
 801419c:	e000      	b.n	80141a0 <xQueueGenericSend+0xa4>
 801419e:	2300      	movs	r3, #0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d10a      	bne.n	80141ba <xQueueGenericSend+0xbe>
	__asm volatile
 80141a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a8:	f383 8811 	msr	BASEPRI, r3
 80141ac:	f3bf 8f6f 	isb	sy
 80141b0:	f3bf 8f4f 	dsb	sy
 80141b4:	61fb      	str	r3, [r7, #28]
}
 80141b6:	bf00      	nop
 80141b8:	e7fe      	b.n	80141b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141ba:	f002 f97b 	bl	80164b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80141be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80141c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d302      	bcc.n	80141d0 <xQueueGenericSend+0xd4>
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	2b02      	cmp	r3, #2
 80141ce:	d129      	bne.n	8014224 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80141d0:	683a      	ldr	r2, [r7, #0]
 80141d2:	68b9      	ldr	r1, [r7, #8]
 80141d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141d6:	f000 fa8b 	bl	80146f0 <prvCopyDataToQueue>
 80141da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d010      	beq.n	8014206 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e6:	3324      	adds	r3, #36	; 0x24
 80141e8:	4618      	mov	r0, r3
 80141ea:	f001 f9ad 	bl	8015548 <xTaskRemoveFromEventList>
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d013      	beq.n	801421c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80141f4:	4b3f      	ldr	r3, [pc, #252]	; (80142f4 <xQueueGenericSend+0x1f8>)
 80141f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141fa:	601a      	str	r2, [r3, #0]
 80141fc:	f3bf 8f4f 	dsb	sy
 8014200:	f3bf 8f6f 	isb	sy
 8014204:	e00a      	b.n	801421c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014208:	2b00      	cmp	r3, #0
 801420a:	d007      	beq.n	801421c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801420c:	4b39      	ldr	r3, [pc, #228]	; (80142f4 <xQueueGenericSend+0x1f8>)
 801420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014212:	601a      	str	r2, [r3, #0]
 8014214:	f3bf 8f4f 	dsb	sy
 8014218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801421c:	f002 f97a 	bl	8016514 <vPortExitCritical>
				return pdPASS;
 8014220:	2301      	movs	r3, #1
 8014222:	e063      	b.n	80142ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d103      	bne.n	8014232 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801422a:	f002 f973 	bl	8016514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801422e:	2300      	movs	r3, #0
 8014230:	e05c      	b.n	80142ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014234:	2b00      	cmp	r3, #0
 8014236:	d106      	bne.n	8014246 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014238:	f107 0314 	add.w	r3, r7, #20
 801423c:	4618      	mov	r0, r3
 801423e:	f001 fa49 	bl	80156d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014242:	2301      	movs	r3, #1
 8014244:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014246:	f002 f965 	bl	8016514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801424a:	f000 ff15 	bl	8015078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801424e:	f002 f931 	bl	80164b4 <vPortEnterCritical>
 8014252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014258:	b25b      	sxtb	r3, r3
 801425a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801425e:	d103      	bne.n	8014268 <xQueueGenericSend+0x16c>
 8014260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014262:	2200      	movs	r2, #0
 8014264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801426e:	b25b      	sxtb	r3, r3
 8014270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014274:	d103      	bne.n	801427e <xQueueGenericSend+0x182>
 8014276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014278:	2200      	movs	r2, #0
 801427a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801427e:	f002 f949 	bl	8016514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014282:	1d3a      	adds	r2, r7, #4
 8014284:	f107 0314 	add.w	r3, r7, #20
 8014288:	4611      	mov	r1, r2
 801428a:	4618      	mov	r0, r3
 801428c:	f001 fa38 	bl	8015700 <xTaskCheckForTimeOut>
 8014290:	4603      	mov	r3, r0
 8014292:	2b00      	cmp	r3, #0
 8014294:	d124      	bne.n	80142e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014298:	f000 fb22 	bl	80148e0 <prvIsQueueFull>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d018      	beq.n	80142d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80142a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a4:	3310      	adds	r3, #16
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	4611      	mov	r1, r2
 80142aa:	4618      	mov	r0, r3
 80142ac:	f001 f8c0 	bl	8015430 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80142b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142b2:	f000 faad 	bl	8014810 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80142b6:	f000 feed 	bl	8015094 <xTaskResumeAll>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	f47f af7c 	bne.w	80141ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80142c2:	4b0c      	ldr	r3, [pc, #48]	; (80142f4 <xQueueGenericSend+0x1f8>)
 80142c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142c8:	601a      	str	r2, [r3, #0]
 80142ca:	f3bf 8f4f 	dsb	sy
 80142ce:	f3bf 8f6f 	isb	sy
 80142d2:	e772      	b.n	80141ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80142d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142d6:	f000 fa9b 	bl	8014810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142da:	f000 fedb 	bl	8015094 <xTaskResumeAll>
 80142de:	e76c      	b.n	80141ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80142e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142e2:	f000 fa95 	bl	8014810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142e6:	f000 fed5 	bl	8015094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80142ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	3738      	adds	r7, #56	; 0x38
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	e000ed04 	.word	0xe000ed04

080142f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b090      	sub	sp, #64	; 0x40
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	607a      	str	r2, [r7, #4]
 8014304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801430c:	2b00      	cmp	r3, #0
 801430e:	d10a      	bne.n	8014326 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014314:	f383 8811 	msr	BASEPRI, r3
 8014318:	f3bf 8f6f 	isb	sy
 801431c:	f3bf 8f4f 	dsb	sy
 8014320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014322:	bf00      	nop
 8014324:	e7fe      	b.n	8014324 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d103      	bne.n	8014334 <xQueueGenericSendFromISR+0x3c>
 801432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014330:	2b00      	cmp	r3, #0
 8014332:	d101      	bne.n	8014338 <xQueueGenericSendFromISR+0x40>
 8014334:	2301      	movs	r3, #1
 8014336:	e000      	b.n	801433a <xQueueGenericSendFromISR+0x42>
 8014338:	2300      	movs	r3, #0
 801433a:	2b00      	cmp	r3, #0
 801433c:	d10a      	bne.n	8014354 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014342:	f383 8811 	msr	BASEPRI, r3
 8014346:	f3bf 8f6f 	isb	sy
 801434a:	f3bf 8f4f 	dsb	sy
 801434e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014350:	bf00      	nop
 8014352:	e7fe      	b.n	8014352 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	2b02      	cmp	r3, #2
 8014358:	d103      	bne.n	8014362 <xQueueGenericSendFromISR+0x6a>
 801435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801435e:	2b01      	cmp	r3, #1
 8014360:	d101      	bne.n	8014366 <xQueueGenericSendFromISR+0x6e>
 8014362:	2301      	movs	r3, #1
 8014364:	e000      	b.n	8014368 <xQueueGenericSendFromISR+0x70>
 8014366:	2300      	movs	r3, #0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10a      	bne.n	8014382 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014370:	f383 8811 	msr	BASEPRI, r3
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	f3bf 8f4f 	dsb	sy
 801437c:	623b      	str	r3, [r7, #32]
}
 801437e:	bf00      	nop
 8014380:	e7fe      	b.n	8014380 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014382:	f002 f979 	bl	8016678 <vPortValidateInterruptPriority>
	__asm volatile
 8014386:	f3ef 8211 	mrs	r2, BASEPRI
 801438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801438e:	f383 8811 	msr	BASEPRI, r3
 8014392:	f3bf 8f6f 	isb	sy
 8014396:	f3bf 8f4f 	dsb	sy
 801439a:	61fa      	str	r2, [r7, #28]
 801439c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801439e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80143a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80143a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d302      	bcc.n	80143b4 <xQueueGenericSendFromISR+0xbc>
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	2b02      	cmp	r3, #2
 80143b2:	d12f      	bne.n	8014414 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80143b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80143ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80143c4:	683a      	ldr	r2, [r7, #0]
 80143c6:	68b9      	ldr	r1, [r7, #8]
 80143c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80143ca:	f000 f991 	bl	80146f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80143ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80143d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143d6:	d112      	bne.n	80143fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80143d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d016      	beq.n	801440e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80143e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e2:	3324      	adds	r3, #36	; 0x24
 80143e4:	4618      	mov	r0, r3
 80143e6:	f001 f8af 	bl	8015548 <xTaskRemoveFromEventList>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d00e      	beq.n	801440e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d00b      	beq.n	801440e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2201      	movs	r2, #1
 80143fa:	601a      	str	r2, [r3, #0]
 80143fc:	e007      	b.n	801440e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80143fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014402:	3301      	adds	r3, #1
 8014404:	b2db      	uxtb	r3, r3
 8014406:	b25a      	sxtb	r2, r3
 8014408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801440e:	2301      	movs	r3, #1
 8014410:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014412:	e001      	b.n	8014418 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014414:	2300      	movs	r3, #0
 8014416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801441a:	617b      	str	r3, [r7, #20]
	__asm volatile
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	f383 8811 	msr	BASEPRI, r3
}
 8014422:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014426:	4618      	mov	r0, r3
 8014428:	3740      	adds	r7, #64	; 0x40
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
	...

08014430 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b08c      	sub	sp, #48	; 0x30
 8014434:	af00      	add	r7, sp, #0
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801443c:	2300      	movs	r3, #0
 801443e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014446:	2b00      	cmp	r3, #0
 8014448:	d10a      	bne.n	8014460 <xQueueReceive+0x30>
	__asm volatile
 801444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444e:	f383 8811 	msr	BASEPRI, r3
 8014452:	f3bf 8f6f 	isb	sy
 8014456:	f3bf 8f4f 	dsb	sy
 801445a:	623b      	str	r3, [r7, #32]
}
 801445c:	bf00      	nop
 801445e:	e7fe      	b.n	801445e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d103      	bne.n	801446e <xQueueReceive+0x3e>
 8014466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801446a:	2b00      	cmp	r3, #0
 801446c:	d101      	bne.n	8014472 <xQueueReceive+0x42>
 801446e:	2301      	movs	r3, #1
 8014470:	e000      	b.n	8014474 <xQueueReceive+0x44>
 8014472:	2300      	movs	r3, #0
 8014474:	2b00      	cmp	r3, #0
 8014476:	d10a      	bne.n	801448e <xQueueReceive+0x5e>
	__asm volatile
 8014478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801447c:	f383 8811 	msr	BASEPRI, r3
 8014480:	f3bf 8f6f 	isb	sy
 8014484:	f3bf 8f4f 	dsb	sy
 8014488:	61fb      	str	r3, [r7, #28]
}
 801448a:	bf00      	nop
 801448c:	e7fe      	b.n	801448c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801448e:	f001 fa7b 	bl	8015988 <xTaskGetSchedulerState>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d102      	bne.n	801449e <xQueueReceive+0x6e>
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d101      	bne.n	80144a2 <xQueueReceive+0x72>
 801449e:	2301      	movs	r3, #1
 80144a0:	e000      	b.n	80144a4 <xQueueReceive+0x74>
 80144a2:	2300      	movs	r3, #0
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d10a      	bne.n	80144be <xQueueReceive+0x8e>
	__asm volatile
 80144a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ac:	f383 8811 	msr	BASEPRI, r3
 80144b0:	f3bf 8f6f 	isb	sy
 80144b4:	f3bf 8f4f 	dsb	sy
 80144b8:	61bb      	str	r3, [r7, #24]
}
 80144ba:	bf00      	nop
 80144bc:	e7fe      	b.n	80144bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80144be:	f001 fff9 	bl	80164b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80144c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80144c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d01f      	beq.n	801450e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80144ce:	68b9      	ldr	r1, [r7, #8]
 80144d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144d2:	f000 f977 	bl	80147c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80144d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d8:	1e5a      	subs	r2, r3, #1
 80144da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e0:	691b      	ldr	r3, [r3, #16]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d00f      	beq.n	8014506 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e8:	3310      	adds	r3, #16
 80144ea:	4618      	mov	r0, r3
 80144ec:	f001 f82c 	bl	8015548 <xTaskRemoveFromEventList>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d007      	beq.n	8014506 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80144f6:	4b3d      	ldr	r3, [pc, #244]	; (80145ec <xQueueReceive+0x1bc>)
 80144f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144fc:	601a      	str	r2, [r3, #0]
 80144fe:	f3bf 8f4f 	dsb	sy
 8014502:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014506:	f002 f805 	bl	8016514 <vPortExitCritical>
				return pdPASS;
 801450a:	2301      	movs	r3, #1
 801450c:	e069      	b.n	80145e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d103      	bne.n	801451c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014514:	f001 fffe 	bl	8016514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014518:	2300      	movs	r3, #0
 801451a:	e062      	b.n	80145e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451e:	2b00      	cmp	r3, #0
 8014520:	d106      	bne.n	8014530 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014522:	f107 0310 	add.w	r3, r7, #16
 8014526:	4618      	mov	r0, r3
 8014528:	f001 f8d4 	bl	80156d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801452c:	2301      	movs	r3, #1
 801452e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014530:	f001 fff0 	bl	8016514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014534:	f000 fda0 	bl	8015078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014538:	f001 ffbc 	bl	80164b4 <vPortEnterCritical>
 801453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801453e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014542:	b25b      	sxtb	r3, r3
 8014544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014548:	d103      	bne.n	8014552 <xQueueReceive+0x122>
 801454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801454c:	2200      	movs	r2, #0
 801454e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014558:	b25b      	sxtb	r3, r3
 801455a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801455e:	d103      	bne.n	8014568 <xQueueReceive+0x138>
 8014560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014562:	2200      	movs	r2, #0
 8014564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014568:	f001 ffd4 	bl	8016514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801456c:	1d3a      	adds	r2, r7, #4
 801456e:	f107 0310 	add.w	r3, r7, #16
 8014572:	4611      	mov	r1, r2
 8014574:	4618      	mov	r0, r3
 8014576:	f001 f8c3 	bl	8015700 <xTaskCheckForTimeOut>
 801457a:	4603      	mov	r3, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	d123      	bne.n	80145c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014582:	f000 f997 	bl	80148b4 <prvIsQueueEmpty>
 8014586:	4603      	mov	r3, r0
 8014588:	2b00      	cmp	r3, #0
 801458a:	d017      	beq.n	80145bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458e:	3324      	adds	r3, #36	; 0x24
 8014590:	687a      	ldr	r2, [r7, #4]
 8014592:	4611      	mov	r1, r2
 8014594:	4618      	mov	r0, r3
 8014596:	f000 ff4b 	bl	8015430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801459a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801459c:	f000 f938 	bl	8014810 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80145a0:	f000 fd78 	bl	8015094 <xTaskResumeAll>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d189      	bne.n	80144be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80145aa:	4b10      	ldr	r3, [pc, #64]	; (80145ec <xQueueReceive+0x1bc>)
 80145ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145b0:	601a      	str	r2, [r3, #0]
 80145b2:	f3bf 8f4f 	dsb	sy
 80145b6:	f3bf 8f6f 	isb	sy
 80145ba:	e780      	b.n	80144be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80145bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145be:	f000 f927 	bl	8014810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80145c2:	f000 fd67 	bl	8015094 <xTaskResumeAll>
 80145c6:	e77a      	b.n	80144be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80145c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145ca:	f000 f921 	bl	8014810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80145ce:	f000 fd61 	bl	8015094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145d4:	f000 f96e 	bl	80148b4 <prvIsQueueEmpty>
 80145d8:	4603      	mov	r3, r0
 80145da:	2b00      	cmp	r3, #0
 80145dc:	f43f af6f 	beq.w	80144be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80145e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3730      	adds	r7, #48	; 0x30
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	e000ed04 	.word	0xe000ed04

080145f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b08e      	sub	sp, #56	; 0x38
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014602:	2b00      	cmp	r3, #0
 8014604:	d10a      	bne.n	801461c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460a:	f383 8811 	msr	BASEPRI, r3
 801460e:	f3bf 8f6f 	isb	sy
 8014612:	f3bf 8f4f 	dsb	sy
 8014616:	623b      	str	r3, [r7, #32]
}
 8014618:	bf00      	nop
 801461a:	e7fe      	b.n	801461a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d103      	bne.n	801462a <xQueueReceiveFromISR+0x3a>
 8014622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014626:	2b00      	cmp	r3, #0
 8014628:	d101      	bne.n	801462e <xQueueReceiveFromISR+0x3e>
 801462a:	2301      	movs	r3, #1
 801462c:	e000      	b.n	8014630 <xQueueReceiveFromISR+0x40>
 801462e:	2300      	movs	r3, #0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d10a      	bne.n	801464a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014638:	f383 8811 	msr	BASEPRI, r3
 801463c:	f3bf 8f6f 	isb	sy
 8014640:	f3bf 8f4f 	dsb	sy
 8014644:	61fb      	str	r3, [r7, #28]
}
 8014646:	bf00      	nop
 8014648:	e7fe      	b.n	8014648 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801464a:	f002 f815 	bl	8016678 <vPortValidateInterruptPriority>
	__asm volatile
 801464e:	f3ef 8211 	mrs	r2, BASEPRI
 8014652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014656:	f383 8811 	msr	BASEPRI, r3
 801465a:	f3bf 8f6f 	isb	sy
 801465e:	f3bf 8f4f 	dsb	sy
 8014662:	61ba      	str	r2, [r7, #24]
 8014664:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014666:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014668:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801466e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014672:	2b00      	cmp	r3, #0
 8014674:	d02f      	beq.n	80146d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801467c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014680:	68b9      	ldr	r1, [r7, #8]
 8014682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014684:	f000 f89e 	bl	80147c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801468a:	1e5a      	subs	r2, r3, #1
 801468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801468e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014698:	d112      	bne.n	80146c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469c:	691b      	ldr	r3, [r3, #16]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d016      	beq.n	80146d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a4:	3310      	adds	r3, #16
 80146a6:	4618      	mov	r0, r3
 80146a8:	f000 ff4e 	bl	8015548 <xTaskRemoveFromEventList>
 80146ac:	4603      	mov	r3, r0
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d00e      	beq.n	80146d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d00b      	beq.n	80146d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2201      	movs	r2, #1
 80146bc:	601a      	str	r2, [r3, #0]
 80146be:	e007      	b.n	80146d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80146c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146c4:	3301      	adds	r3, #1
 80146c6:	b2db      	uxtb	r3, r3
 80146c8:	b25a      	sxtb	r2, r3
 80146ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80146d0:	2301      	movs	r3, #1
 80146d2:	637b      	str	r3, [r7, #52]	; 0x34
 80146d4:	e001      	b.n	80146da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80146d6:	2300      	movs	r3, #0
 80146d8:	637b      	str	r3, [r7, #52]	; 0x34
 80146da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	f383 8811 	msr	BASEPRI, r3
}
 80146e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80146e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3738      	adds	r7, #56	; 0x38
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b086      	sub	sp, #24
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80146fc:	2300      	movs	r3, #0
 80146fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014704:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801470a:	2b00      	cmp	r3, #0
 801470c:	d10d      	bne.n	801472a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d14d      	bne.n	80147b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	689b      	ldr	r3, [r3, #8]
 801471a:	4618      	mov	r0, r3
 801471c:	f001 f952 	bl	80159c4 <xTaskPriorityDisinherit>
 8014720:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2200      	movs	r2, #0
 8014726:	609a      	str	r2, [r3, #8]
 8014728:	e043      	b.n	80147b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d119      	bne.n	8014764 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	6858      	ldr	r0, [r3, #4]
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014738:	461a      	mov	r2, r3
 801473a:	68b9      	ldr	r1, [r7, #8]
 801473c:	f002 fa00 	bl	8016b40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	685a      	ldr	r2, [r3, #4]
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014748:	441a      	add	r2, r3
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	685a      	ldr	r2, [r3, #4]
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	689b      	ldr	r3, [r3, #8]
 8014756:	429a      	cmp	r2, r3
 8014758:	d32b      	bcc.n	80147b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	605a      	str	r2, [r3, #4]
 8014762:	e026      	b.n	80147b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	68d8      	ldr	r0, [r3, #12]
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801476c:	461a      	mov	r2, r3
 801476e:	68b9      	ldr	r1, [r7, #8]
 8014770:	f002 f9e6 	bl	8016b40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	68da      	ldr	r2, [r3, #12]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801477c:	425b      	negs	r3, r3
 801477e:	441a      	add	r2, r3
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	68da      	ldr	r2, [r3, #12]
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	429a      	cmp	r2, r3
 801478e:	d207      	bcs.n	80147a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	689a      	ldr	r2, [r3, #8]
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014798:	425b      	negs	r3, r3
 801479a:	441a      	add	r2, r3
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b02      	cmp	r3, #2
 80147a4:	d105      	bne.n	80147b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d002      	beq.n	80147b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	3b01      	subs	r3, #1
 80147b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	1c5a      	adds	r2, r3, #1
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80147ba:	697b      	ldr	r3, [r7, #20]
}
 80147bc:	4618      	mov	r0, r3
 80147be:	3718      	adds	r7, #24
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}

080147c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d018      	beq.n	8014808 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	68da      	ldr	r2, [r3, #12]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147de:	441a      	add	r2, r3
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	68da      	ldr	r2, [r3, #12]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	689b      	ldr	r3, [r3, #8]
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d303      	bcc.n	80147f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681a      	ldr	r2, [r3, #0]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	68d9      	ldr	r1, [r3, #12]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014800:	461a      	mov	r2, r3
 8014802:	6838      	ldr	r0, [r7, #0]
 8014804:	f002 f99c 	bl	8016b40 <memcpy>
	}
}
 8014808:	bf00      	nop
 801480a:	3708      	adds	r7, #8
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}

08014810 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014818:	f001 fe4c 	bl	80164b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014822:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014824:	e011      	b.n	801484a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801482a:	2b00      	cmp	r3, #0
 801482c:	d012      	beq.n	8014854 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	3324      	adds	r3, #36	; 0x24
 8014832:	4618      	mov	r0, r3
 8014834:	f000 fe88 	bl	8015548 <xTaskRemoveFromEventList>
 8014838:	4603      	mov	r3, r0
 801483a:	2b00      	cmp	r3, #0
 801483c:	d001      	beq.n	8014842 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801483e:	f000 ffc1 	bl	80157c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014842:	7bfb      	ldrb	r3, [r7, #15]
 8014844:	3b01      	subs	r3, #1
 8014846:	b2db      	uxtb	r3, r3
 8014848:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801484a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801484e:	2b00      	cmp	r3, #0
 8014850:	dce9      	bgt.n	8014826 <prvUnlockQueue+0x16>
 8014852:	e000      	b.n	8014856 <prvUnlockQueue+0x46>
					break;
 8014854:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	22ff      	movs	r2, #255	; 0xff
 801485a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801485e:	f001 fe59 	bl	8016514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014862:	f001 fe27 	bl	80164b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801486c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801486e:	e011      	b.n	8014894 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	691b      	ldr	r3, [r3, #16]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d012      	beq.n	801489e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	3310      	adds	r3, #16
 801487c:	4618      	mov	r0, r3
 801487e:	f000 fe63 	bl	8015548 <xTaskRemoveFromEventList>
 8014882:	4603      	mov	r3, r0
 8014884:	2b00      	cmp	r3, #0
 8014886:	d001      	beq.n	801488c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014888:	f000 ff9c 	bl	80157c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801488c:	7bbb      	ldrb	r3, [r7, #14]
 801488e:	3b01      	subs	r3, #1
 8014890:	b2db      	uxtb	r3, r3
 8014892:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014898:	2b00      	cmp	r3, #0
 801489a:	dce9      	bgt.n	8014870 <prvUnlockQueue+0x60>
 801489c:	e000      	b.n	80148a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801489e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	22ff      	movs	r2, #255	; 0xff
 80148a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80148a8:	f001 fe34 	bl	8016514 <vPortExitCritical>
}
 80148ac:	bf00      	nop
 80148ae:	3710      	adds	r7, #16
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}

080148b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80148bc:	f001 fdfa 	bl	80164b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d102      	bne.n	80148ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80148c8:	2301      	movs	r3, #1
 80148ca:	60fb      	str	r3, [r7, #12]
 80148cc:	e001      	b.n	80148d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80148ce:	2300      	movs	r3, #0
 80148d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80148d2:	f001 fe1f 	bl	8016514 <vPortExitCritical>

	return xReturn;
 80148d6:	68fb      	ldr	r3, [r7, #12]
}
 80148d8:	4618      	mov	r0, r3
 80148da:	3710      	adds	r7, #16
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}

080148e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80148e8:	f001 fde4 	bl	80164b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d102      	bne.n	80148fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80148f8:	2301      	movs	r3, #1
 80148fa:	60fb      	str	r3, [r7, #12]
 80148fc:	e001      	b.n	8014902 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80148fe:	2300      	movs	r3, #0
 8014900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014902:	f001 fe07 	bl	8016514 <vPortExitCritical>

	return xReturn;
 8014906:	68fb      	ldr	r3, [r7, #12]
}
 8014908:	4618      	mov	r0, r3
 801490a:	3710      	adds	r7, #16
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}

08014910 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014910:	b480      	push	{r7}
 8014912:	b085      	sub	sp, #20
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
 8014918:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801491a:	2300      	movs	r3, #0
 801491c:	60fb      	str	r3, [r7, #12]
 801491e:	e014      	b.n	801494a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014920:	4a0f      	ldr	r2, [pc, #60]	; (8014960 <vQueueAddToRegistry+0x50>)
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d10b      	bne.n	8014944 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801492c:	490c      	ldr	r1, [pc, #48]	; (8014960 <vQueueAddToRegistry+0x50>)
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	683a      	ldr	r2, [r7, #0]
 8014932:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014936:	4a0a      	ldr	r2, [pc, #40]	; (8014960 <vQueueAddToRegistry+0x50>)
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	00db      	lsls	r3, r3, #3
 801493c:	4413      	add	r3, r2
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014942:	e006      	b.n	8014952 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	3301      	adds	r3, #1
 8014948:	60fb      	str	r3, [r7, #12]
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	2b07      	cmp	r3, #7
 801494e:	d9e7      	bls.n	8014920 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014950:	bf00      	nop
 8014952:	bf00      	nop
 8014954:	3714      	adds	r7, #20
 8014956:	46bd      	mov	sp, r7
 8014958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495c:	4770      	bx	lr
 801495e:	bf00      	nop
 8014960:	240017ec 	.word	0x240017ec

08014964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014964:	b580      	push	{r7, lr}
 8014966:	b086      	sub	sp, #24
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014974:	f001 fd9e 	bl	80164b4 <vPortEnterCritical>
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801497e:	b25b      	sxtb	r3, r3
 8014980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014984:	d103      	bne.n	801498e <vQueueWaitForMessageRestricted+0x2a>
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	2200      	movs	r2, #0
 801498a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014994:	b25b      	sxtb	r3, r3
 8014996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801499a:	d103      	bne.n	80149a4 <vQueueWaitForMessageRestricted+0x40>
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	2200      	movs	r2, #0
 80149a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80149a4:	f001 fdb6 	bl	8016514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d106      	bne.n	80149be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	3324      	adds	r3, #36	; 0x24
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	68b9      	ldr	r1, [r7, #8]
 80149b8:	4618      	mov	r0, r3
 80149ba:	f000 fd99 	bl	80154f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80149be:	6978      	ldr	r0, [r7, #20]
 80149c0:	f7ff ff26 	bl	8014810 <prvUnlockQueue>
	}
 80149c4:	bf00      	nop
 80149c6:	3718      	adds	r7, #24
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b08e      	sub	sp, #56	; 0x38
 80149d0:	af04      	add	r7, sp, #16
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
 80149d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80149da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d10a      	bne.n	80149f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80149e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e4:	f383 8811 	msr	BASEPRI, r3
 80149e8:	f3bf 8f6f 	isb	sy
 80149ec:	f3bf 8f4f 	dsb	sy
 80149f0:	623b      	str	r3, [r7, #32]
}
 80149f2:	bf00      	nop
 80149f4:	e7fe      	b.n	80149f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80149f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d10a      	bne.n	8014a12 <xTaskCreateStatic+0x46>
	__asm volatile
 80149fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a00:	f383 8811 	msr	BASEPRI, r3
 8014a04:	f3bf 8f6f 	isb	sy
 8014a08:	f3bf 8f4f 	dsb	sy
 8014a0c:	61fb      	str	r3, [r7, #28]
}
 8014a0e:	bf00      	nop
 8014a10:	e7fe      	b.n	8014a10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014a12:	235c      	movs	r3, #92	; 0x5c
 8014a14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	2b5c      	cmp	r3, #92	; 0x5c
 8014a1a:	d00a      	beq.n	8014a32 <xTaskCreateStatic+0x66>
	__asm volatile
 8014a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a20:	f383 8811 	msr	BASEPRI, r3
 8014a24:	f3bf 8f6f 	isb	sy
 8014a28:	f3bf 8f4f 	dsb	sy
 8014a2c:	61bb      	str	r3, [r7, #24]
}
 8014a2e:	bf00      	nop
 8014a30:	e7fe      	b.n	8014a30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014a32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d01e      	beq.n	8014a78 <xTaskCreateStatic+0xac>
 8014a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d01b      	beq.n	8014a78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4c:	2202      	movs	r2, #2
 8014a4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014a52:	2300      	movs	r3, #0
 8014a54:	9303      	str	r3, [sp, #12]
 8014a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a58:	9302      	str	r3, [sp, #8]
 8014a5a:	f107 0314 	add.w	r3, r7, #20
 8014a5e:	9301      	str	r3, [sp, #4]
 8014a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a62:	9300      	str	r3, [sp, #0]
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	68b9      	ldr	r1, [r7, #8]
 8014a6a:	68f8      	ldr	r0, [r7, #12]
 8014a6c:	f000 f850 	bl	8014b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a72:	f000 f8dd 	bl	8014c30 <prvAddNewTaskToReadyList>
 8014a76:	e001      	b.n	8014a7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014a7c:	697b      	ldr	r3, [r7, #20]
	}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3728      	adds	r7, #40	; 0x28
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014a86:	b580      	push	{r7, lr}
 8014a88:	b08c      	sub	sp, #48	; 0x30
 8014a8a:	af04      	add	r7, sp, #16
 8014a8c:	60f8      	str	r0, [r7, #12]
 8014a8e:	60b9      	str	r1, [r7, #8]
 8014a90:	603b      	str	r3, [r7, #0]
 8014a92:	4613      	mov	r3, r2
 8014a94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a96:	88fb      	ldrh	r3, [r7, #6]
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f001 fe2c 	bl	80166f8 <pvPortMalloc>
 8014aa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d00e      	beq.n	8014ac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014aa8:	205c      	movs	r0, #92	; 0x5c
 8014aaa:	f001 fe25 	bl	80166f8 <pvPortMalloc>
 8014aae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014ab0:	69fb      	ldr	r3, [r7, #28]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d003      	beq.n	8014abe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	697a      	ldr	r2, [r7, #20]
 8014aba:	631a      	str	r2, [r3, #48]	; 0x30
 8014abc:	e005      	b.n	8014aca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014abe:	6978      	ldr	r0, [r7, #20]
 8014ac0:	f001 fee6 	bl	8016890 <vPortFree>
 8014ac4:	e001      	b.n	8014aca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d017      	beq.n	8014b00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014ad8:	88fa      	ldrh	r2, [r7, #6]
 8014ada:	2300      	movs	r3, #0
 8014adc:	9303      	str	r3, [sp, #12]
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	9302      	str	r3, [sp, #8]
 8014ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae4:	9301      	str	r3, [sp, #4]
 8014ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	68b9      	ldr	r1, [r7, #8]
 8014aee:	68f8      	ldr	r0, [r7, #12]
 8014af0:	f000 f80e 	bl	8014b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014af4:	69f8      	ldr	r0, [r7, #28]
 8014af6:	f000 f89b 	bl	8014c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014afa:	2301      	movs	r3, #1
 8014afc:	61bb      	str	r3, [r7, #24]
 8014afe:	e002      	b.n	8014b06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014b06:	69bb      	ldr	r3, [r7, #24]
	}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3720      	adds	r7, #32
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b088      	sub	sp, #32
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	607a      	str	r2, [r7, #4]
 8014b1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	009b      	lsls	r3, r3, #2
 8014b26:	461a      	mov	r2, r3
 8014b28:	21a5      	movs	r1, #165	; 0xa5
 8014b2a:	f002 f817 	bl	8016b5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b32:	6879      	ldr	r1, [r7, #4]
 8014b34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014b38:	440b      	add	r3, r1
 8014b3a:	009b      	lsls	r3, r3, #2
 8014b3c:	4413      	add	r3, r2
 8014b3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	f023 0307 	bic.w	r3, r3, #7
 8014b46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	f003 0307 	and.w	r3, r3, #7
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d00a      	beq.n	8014b68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b56:	f383 8811 	msr	BASEPRI, r3
 8014b5a:	f3bf 8f6f 	isb	sy
 8014b5e:	f3bf 8f4f 	dsb	sy
 8014b62:	617b      	str	r3, [r7, #20]
}
 8014b64:	bf00      	nop
 8014b66:	e7fe      	b.n	8014b66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d01f      	beq.n	8014bae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b6e:	2300      	movs	r3, #0
 8014b70:	61fb      	str	r3, [r7, #28]
 8014b72:	e012      	b.n	8014b9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014b74:	68ba      	ldr	r2, [r7, #8]
 8014b76:	69fb      	ldr	r3, [r7, #28]
 8014b78:	4413      	add	r3, r2
 8014b7a:	7819      	ldrb	r1, [r3, #0]
 8014b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b7e:	69fb      	ldr	r3, [r7, #28]
 8014b80:	4413      	add	r3, r2
 8014b82:	3334      	adds	r3, #52	; 0x34
 8014b84:	460a      	mov	r2, r1
 8014b86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014b88:	68ba      	ldr	r2, [r7, #8]
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	4413      	add	r3, r2
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d006      	beq.n	8014ba2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	3301      	adds	r3, #1
 8014b98:	61fb      	str	r3, [r7, #28]
 8014b9a:	69fb      	ldr	r3, [r7, #28]
 8014b9c:	2b0f      	cmp	r3, #15
 8014b9e:	d9e9      	bls.n	8014b74 <prvInitialiseNewTask+0x64>
 8014ba0:	e000      	b.n	8014ba4 <prvInitialiseNewTask+0x94>
			{
				break;
 8014ba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014bac:	e003      	b.n	8014bb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb8:	2b37      	cmp	r3, #55	; 0x37
 8014bba:	d901      	bls.n	8014bc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014bbc:	2337      	movs	r3, #55	; 0x37
 8014bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bce:	2200      	movs	r2, #0
 8014bd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd4:	3304      	adds	r3, #4
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7ff f8be 	bl	8013d58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bde:	3318      	adds	r3, #24
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7ff f8b9 	bl	8013d58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfe:	2200      	movs	r2, #0
 8014c00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c04:	2200      	movs	r2, #0
 8014c06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014c0a:	683a      	ldr	r2, [r7, #0]
 8014c0c:	68f9      	ldr	r1, [r7, #12]
 8014c0e:	69b8      	ldr	r0, [r7, #24]
 8014c10:	f001 fb20 	bl	8016254 <pxPortInitialiseStack>
 8014c14:	4602      	mov	r2, r0
 8014c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d002      	beq.n	8014c26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c26:	bf00      	nop
 8014c28:	3720      	adds	r7, #32
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
	...

08014c30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014c38:	f001 fc3c 	bl	80164b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014c3c:	4b2d      	ldr	r3, [pc, #180]	; (8014cf4 <prvAddNewTaskToReadyList+0xc4>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	3301      	adds	r3, #1
 8014c42:	4a2c      	ldr	r2, [pc, #176]	; (8014cf4 <prvAddNewTaskToReadyList+0xc4>)
 8014c44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014c46:	4b2c      	ldr	r3, [pc, #176]	; (8014cf8 <prvAddNewTaskToReadyList+0xc8>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d109      	bne.n	8014c62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014c4e:	4a2a      	ldr	r2, [pc, #168]	; (8014cf8 <prvAddNewTaskToReadyList+0xc8>)
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014c54:	4b27      	ldr	r3, [pc, #156]	; (8014cf4 <prvAddNewTaskToReadyList+0xc4>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	d110      	bne.n	8014c7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014c5c:	f000 fdd6 	bl	801580c <prvInitialiseTaskLists>
 8014c60:	e00d      	b.n	8014c7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014c62:	4b26      	ldr	r3, [pc, #152]	; (8014cfc <prvAddNewTaskToReadyList+0xcc>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d109      	bne.n	8014c7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014c6a:	4b23      	ldr	r3, [pc, #140]	; (8014cf8 <prvAddNewTaskToReadyList+0xc8>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d802      	bhi.n	8014c7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014c78:	4a1f      	ldr	r2, [pc, #124]	; (8014cf8 <prvAddNewTaskToReadyList+0xc8>)
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014c7e:	4b20      	ldr	r3, [pc, #128]	; (8014d00 <prvAddNewTaskToReadyList+0xd0>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	3301      	adds	r3, #1
 8014c84:	4a1e      	ldr	r2, [pc, #120]	; (8014d00 <prvAddNewTaskToReadyList+0xd0>)
 8014c86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014c88:	4b1d      	ldr	r3, [pc, #116]	; (8014d00 <prvAddNewTaskToReadyList+0xd0>)
 8014c8a:	681a      	ldr	r2, [r3, #0]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c94:	4b1b      	ldr	r3, [pc, #108]	; (8014d04 <prvAddNewTaskToReadyList+0xd4>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d903      	bls.n	8014ca4 <prvAddNewTaskToReadyList+0x74>
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca0:	4a18      	ldr	r2, [pc, #96]	; (8014d04 <prvAddNewTaskToReadyList+0xd4>)
 8014ca2:	6013      	str	r3, [r2, #0]
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ca8:	4613      	mov	r3, r2
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	4413      	add	r3, r2
 8014cae:	009b      	lsls	r3, r3, #2
 8014cb0:	4a15      	ldr	r2, [pc, #84]	; (8014d08 <prvAddNewTaskToReadyList+0xd8>)
 8014cb2:	441a      	add	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	3304      	adds	r3, #4
 8014cb8:	4619      	mov	r1, r3
 8014cba:	4610      	mov	r0, r2
 8014cbc:	f7ff f859 	bl	8013d72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014cc0:	f001 fc28 	bl	8016514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014cc4:	4b0d      	ldr	r3, [pc, #52]	; (8014cfc <prvAddNewTaskToReadyList+0xcc>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00e      	beq.n	8014cea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014ccc:	4b0a      	ldr	r3, [pc, #40]	; (8014cf8 <prvAddNewTaskToReadyList+0xc8>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	d207      	bcs.n	8014cea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014cda:	4b0c      	ldr	r3, [pc, #48]	; (8014d0c <prvAddNewTaskToReadyList+0xdc>)
 8014cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ce0:	601a      	str	r2, [r3, #0]
 8014ce2:	f3bf 8f4f 	dsb	sy
 8014ce6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014cea:	bf00      	nop
 8014cec:	3708      	adds	r7, #8
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	24001d00 	.word	0x24001d00
 8014cf8:	2400182c 	.word	0x2400182c
 8014cfc:	24001d0c 	.word	0x24001d0c
 8014d00:	24001d1c 	.word	0x24001d1c
 8014d04:	24001d08 	.word	0x24001d08
 8014d08:	24001830 	.word	0x24001830
 8014d0c:	e000ed04 	.word	0xe000ed04

08014d10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b084      	sub	sp, #16
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d017      	beq.n	8014d52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014d22:	4b13      	ldr	r3, [pc, #76]	; (8014d70 <vTaskDelay+0x60>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d00a      	beq.n	8014d40 <vTaskDelay+0x30>
	__asm volatile
 8014d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2e:	f383 8811 	msr	BASEPRI, r3
 8014d32:	f3bf 8f6f 	isb	sy
 8014d36:	f3bf 8f4f 	dsb	sy
 8014d3a:	60bb      	str	r3, [r7, #8]
}
 8014d3c:	bf00      	nop
 8014d3e:	e7fe      	b.n	8014d3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014d40:	f000 f99a 	bl	8015078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014d44:	2100      	movs	r1, #0
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f000 fec2 	bl	8015ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014d4c:	f000 f9a2 	bl	8015094 <xTaskResumeAll>
 8014d50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d107      	bne.n	8014d68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014d58:	4b06      	ldr	r3, [pc, #24]	; (8014d74 <vTaskDelay+0x64>)
 8014d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d5e:	601a      	str	r2, [r3, #0]
 8014d60:	f3bf 8f4f 	dsb	sy
 8014d64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014d68:	bf00      	nop
 8014d6a:	3710      	adds	r7, #16
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}
 8014d70:	24001d28 	.word	0x24001d28
 8014d74:	e000ed04 	.word	0xe000ed04

08014d78 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014d80:	f001 fb98 	bl	80164b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d102      	bne.n	8014d90 <vTaskSuspend+0x18>
 8014d8a:	4b30      	ldr	r3, [pc, #192]	; (8014e4c <vTaskSuspend+0xd4>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	e000      	b.n	8014d92 <vTaskSuspend+0x1a>
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	3304      	adds	r3, #4
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7ff f847 	bl	8013e2c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d004      	beq.n	8014db0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	3318      	adds	r3, #24
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7ff f83e 	bl	8013e2c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	3304      	adds	r3, #4
 8014db4:	4619      	mov	r1, r3
 8014db6:	4826      	ldr	r0, [pc, #152]	; (8014e50 <vTaskSuspend+0xd8>)
 8014db8:	f7fe ffdb 	bl	8013d72 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014dc2:	b2db      	uxtb	r3, r3
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d103      	bne.n	8014dd0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014dd0:	f001 fba0 	bl	8016514 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014dd4:	4b1f      	ldr	r3, [pc, #124]	; (8014e54 <vTaskSuspend+0xdc>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d005      	beq.n	8014de8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014ddc:	f001 fb6a 	bl	80164b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014de0:	f000 fdb2 	bl	8015948 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014de4:	f001 fb96 	bl	8016514 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014de8:	4b18      	ldr	r3, [pc, #96]	; (8014e4c <vTaskSuspend+0xd4>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	68fa      	ldr	r2, [r7, #12]
 8014dee:	429a      	cmp	r2, r3
 8014df0:	d127      	bne.n	8014e42 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014df2:	4b18      	ldr	r3, [pc, #96]	; (8014e54 <vTaskSuspend+0xdc>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d017      	beq.n	8014e2a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014dfa:	4b17      	ldr	r3, [pc, #92]	; (8014e58 <vTaskSuspend+0xe0>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d00a      	beq.n	8014e18 <vTaskSuspend+0xa0>
	__asm volatile
 8014e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e06:	f383 8811 	msr	BASEPRI, r3
 8014e0a:	f3bf 8f6f 	isb	sy
 8014e0e:	f3bf 8f4f 	dsb	sy
 8014e12:	60bb      	str	r3, [r7, #8]
}
 8014e14:	bf00      	nop
 8014e16:	e7fe      	b.n	8014e16 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014e18:	4b10      	ldr	r3, [pc, #64]	; (8014e5c <vTaskSuspend+0xe4>)
 8014e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e1e:	601a      	str	r2, [r3, #0]
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014e28:	e00b      	b.n	8014e42 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014e2a:	4b09      	ldr	r3, [pc, #36]	; (8014e50 <vTaskSuspend+0xd8>)
 8014e2c:	681a      	ldr	r2, [r3, #0]
 8014e2e:	4b0c      	ldr	r3, [pc, #48]	; (8014e60 <vTaskSuspend+0xe8>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	429a      	cmp	r2, r3
 8014e34:	d103      	bne.n	8014e3e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014e36:	4b05      	ldr	r3, [pc, #20]	; (8014e4c <vTaskSuspend+0xd4>)
 8014e38:	2200      	movs	r2, #0
 8014e3a:	601a      	str	r2, [r3, #0]
	}
 8014e3c:	e001      	b.n	8014e42 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014e3e:	f000 fa99 	bl	8015374 <vTaskSwitchContext>
	}
 8014e42:	bf00      	nop
 8014e44:	3710      	adds	r7, #16
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	2400182c 	.word	0x2400182c
 8014e50:	24001cec 	.word	0x24001cec
 8014e54:	24001d0c 	.word	0x24001d0c
 8014e58:	24001d28 	.word	0x24001d28
 8014e5c:	e000ed04 	.word	0xe000ed04
 8014e60:	24001d00 	.word	0x24001d00

08014e64 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014e64:	b480      	push	{r7}
 8014e66:	b087      	sub	sp, #28
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d10a      	bne.n	8014e90 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e7e:	f383 8811 	msr	BASEPRI, r3
 8014e82:	f3bf 8f6f 	isb	sy
 8014e86:	f3bf 8f4f 	dsb	sy
 8014e8a:	60fb      	str	r3, [r7, #12]
}
 8014e8c:	bf00      	nop
 8014e8e:	e7fe      	b.n	8014e8e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	695b      	ldr	r3, [r3, #20]
 8014e94:	4a0a      	ldr	r2, [pc, #40]	; (8014ec0 <prvTaskIsTaskSuspended+0x5c>)
 8014e96:	4293      	cmp	r3, r2
 8014e98:	d10a      	bne.n	8014eb0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014e9a:	693b      	ldr	r3, [r7, #16]
 8014e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e9e:	4a09      	ldr	r2, [pc, #36]	; (8014ec4 <prvTaskIsTaskSuspended+0x60>)
 8014ea0:	4293      	cmp	r3, r2
 8014ea2:	d005      	beq.n	8014eb0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d101      	bne.n	8014eb0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014eac:	2301      	movs	r3, #1
 8014eae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014eb0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	371c      	adds	r7, #28
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr
 8014ebe:	bf00      	nop
 8014ec0:	24001cec 	.word	0x24001cec
 8014ec4:	24001cc0 	.word	0x24001cc0

08014ec8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b08a      	sub	sp, #40	; 0x28
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d10a      	bne.n	8014ef4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee2:	f383 8811 	msr	BASEPRI, r3
 8014ee6:	f3bf 8f6f 	isb	sy
 8014eea:	f3bf 8f4f 	dsb	sy
 8014eee:	61bb      	str	r3, [r7, #24]
}
 8014ef0:	bf00      	nop
 8014ef2:	e7fe      	b.n	8014ef2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ef4:	f001 fbc0 	bl	8016678 <vPortValidateInterruptPriority>
	__asm volatile
 8014ef8:	f3ef 8211 	mrs	r2, BASEPRI
 8014efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f00:	f383 8811 	msr	BASEPRI, r3
 8014f04:	f3bf 8f6f 	isb	sy
 8014f08:	f3bf 8f4f 	dsb	sy
 8014f0c:	617a      	str	r2, [r7, #20]
 8014f0e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014f10:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014f12:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014f14:	6a38      	ldr	r0, [r7, #32]
 8014f16:	f7ff ffa5 	bl	8014e64 <prvTaskIsTaskSuspended>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d030      	beq.n	8014f82 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f20:	4b1d      	ldr	r3, [pc, #116]	; (8014f98 <xTaskResumeFromISR+0xd0>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d126      	bne.n	8014f76 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014f28:	6a3b      	ldr	r3, [r7, #32]
 8014f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f2c:	4b1b      	ldr	r3, [pc, #108]	; (8014f9c <xTaskResumeFromISR+0xd4>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f32:	429a      	cmp	r2, r3
 8014f34:	d301      	bcc.n	8014f3a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014f36:	2301      	movs	r3, #1
 8014f38:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f3a:	6a3b      	ldr	r3, [r7, #32]
 8014f3c:	3304      	adds	r3, #4
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f7fe ff74 	bl	8013e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014f44:	6a3b      	ldr	r3, [r7, #32]
 8014f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f48:	4b15      	ldr	r3, [pc, #84]	; (8014fa0 <xTaskResumeFromISR+0xd8>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d903      	bls.n	8014f58 <xTaskResumeFromISR+0x90>
 8014f50:	6a3b      	ldr	r3, [r7, #32]
 8014f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f54:	4a12      	ldr	r2, [pc, #72]	; (8014fa0 <xTaskResumeFromISR+0xd8>)
 8014f56:	6013      	str	r3, [r2, #0]
 8014f58:	6a3b      	ldr	r3, [r7, #32]
 8014f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f5c:	4613      	mov	r3, r2
 8014f5e:	009b      	lsls	r3, r3, #2
 8014f60:	4413      	add	r3, r2
 8014f62:	009b      	lsls	r3, r3, #2
 8014f64:	4a0f      	ldr	r2, [pc, #60]	; (8014fa4 <xTaskResumeFromISR+0xdc>)
 8014f66:	441a      	add	r2, r3
 8014f68:	6a3b      	ldr	r3, [r7, #32]
 8014f6a:	3304      	adds	r3, #4
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	4610      	mov	r0, r2
 8014f70:	f7fe feff 	bl	8013d72 <vListInsertEnd>
 8014f74:	e005      	b.n	8014f82 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014f76:	6a3b      	ldr	r3, [r7, #32]
 8014f78:	3318      	adds	r3, #24
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	480a      	ldr	r0, [pc, #40]	; (8014fa8 <xTaskResumeFromISR+0xe0>)
 8014f7e:	f7fe fef8 	bl	8013d72 <vListInsertEnd>
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	f383 8811 	msr	BASEPRI, r3
}
 8014f8c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3728      	adds	r7, #40	; 0x28
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	24001d28 	.word	0x24001d28
 8014f9c:	2400182c 	.word	0x2400182c
 8014fa0:	24001d08 	.word	0x24001d08
 8014fa4:	24001830 	.word	0x24001830
 8014fa8:	24001cc0 	.word	0x24001cc0

08014fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b08a      	sub	sp, #40	; 0x28
 8014fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014fba:	463a      	mov	r2, r7
 8014fbc:	1d39      	adds	r1, r7, #4
 8014fbe:	f107 0308 	add.w	r3, r7, #8
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fe fc08 	bl	80137d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014fc8:	6839      	ldr	r1, [r7, #0]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	68ba      	ldr	r2, [r7, #8]
 8014fce:	9202      	str	r2, [sp, #8]
 8014fd0:	9301      	str	r3, [sp, #4]
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	9300      	str	r3, [sp, #0]
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	460a      	mov	r2, r1
 8014fda:	4921      	ldr	r1, [pc, #132]	; (8015060 <vTaskStartScheduler+0xb4>)
 8014fdc:	4821      	ldr	r0, [pc, #132]	; (8015064 <vTaskStartScheduler+0xb8>)
 8014fde:	f7ff fcf5 	bl	80149cc <xTaskCreateStatic>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	4a20      	ldr	r2, [pc, #128]	; (8015068 <vTaskStartScheduler+0xbc>)
 8014fe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014fe8:	4b1f      	ldr	r3, [pc, #124]	; (8015068 <vTaskStartScheduler+0xbc>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d002      	beq.n	8014ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	617b      	str	r3, [r7, #20]
 8014ff4:	e001      	b.n	8014ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d102      	bne.n	8015006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015000:	f000 fdba 	bl	8015b78 <xTimerCreateTimerTask>
 8015004:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	2b01      	cmp	r3, #1
 801500a:	d116      	bne.n	801503a <vTaskStartScheduler+0x8e>
	__asm volatile
 801500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015010:	f383 8811 	msr	BASEPRI, r3
 8015014:	f3bf 8f6f 	isb	sy
 8015018:	f3bf 8f4f 	dsb	sy
 801501c:	613b      	str	r3, [r7, #16]
}
 801501e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015020:	4b12      	ldr	r3, [pc, #72]	; (801506c <vTaskStartScheduler+0xc0>)
 8015022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015026:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015028:	4b11      	ldr	r3, [pc, #68]	; (8015070 <vTaskStartScheduler+0xc4>)
 801502a:	2201      	movs	r2, #1
 801502c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801502e:	4b11      	ldr	r3, [pc, #68]	; (8015074 <vTaskStartScheduler+0xc8>)
 8015030:	2200      	movs	r2, #0
 8015032:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015034:	f001 f99c 	bl	8016370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015038:	e00e      	b.n	8015058 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015040:	d10a      	bne.n	8015058 <vTaskStartScheduler+0xac>
	__asm volatile
 8015042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015046:	f383 8811 	msr	BASEPRI, r3
 801504a:	f3bf 8f6f 	isb	sy
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	60fb      	str	r3, [r7, #12]
}
 8015054:	bf00      	nop
 8015056:	e7fe      	b.n	8015056 <vTaskStartScheduler+0xaa>
}
 8015058:	bf00      	nop
 801505a:	3718      	adds	r7, #24
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}
 8015060:	080177d8 	.word	0x080177d8
 8015064:	080157dd 	.word	0x080157dd
 8015068:	24001d24 	.word	0x24001d24
 801506c:	24001d20 	.word	0x24001d20
 8015070:	24001d0c 	.word	0x24001d0c
 8015074:	24001d04 	.word	0x24001d04

08015078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015078:	b480      	push	{r7}
 801507a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801507c:	4b04      	ldr	r3, [pc, #16]	; (8015090 <vTaskSuspendAll+0x18>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	3301      	adds	r3, #1
 8015082:	4a03      	ldr	r2, [pc, #12]	; (8015090 <vTaskSuspendAll+0x18>)
 8015084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015086:	bf00      	nop
 8015088:	46bd      	mov	sp, r7
 801508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508e:	4770      	bx	lr
 8015090:	24001d28 	.word	0x24001d28

08015094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801509a:	2300      	movs	r3, #0
 801509c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801509e:	2300      	movs	r3, #0
 80150a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80150a2:	4b42      	ldr	r3, [pc, #264]	; (80151ac <xTaskResumeAll+0x118>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d10a      	bne.n	80150c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80150aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ae:	f383 8811 	msr	BASEPRI, r3
 80150b2:	f3bf 8f6f 	isb	sy
 80150b6:	f3bf 8f4f 	dsb	sy
 80150ba:	603b      	str	r3, [r7, #0]
}
 80150bc:	bf00      	nop
 80150be:	e7fe      	b.n	80150be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80150c0:	f001 f9f8 	bl	80164b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80150c4:	4b39      	ldr	r3, [pc, #228]	; (80151ac <xTaskResumeAll+0x118>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	3b01      	subs	r3, #1
 80150ca:	4a38      	ldr	r2, [pc, #224]	; (80151ac <xTaskResumeAll+0x118>)
 80150cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150ce:	4b37      	ldr	r3, [pc, #220]	; (80151ac <xTaskResumeAll+0x118>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d162      	bne.n	801519c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80150d6:	4b36      	ldr	r3, [pc, #216]	; (80151b0 <xTaskResumeAll+0x11c>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d05e      	beq.n	801519c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80150de:	e02f      	b.n	8015140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150e0:	4b34      	ldr	r3, [pc, #208]	; (80151b4 <xTaskResumeAll+0x120>)
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	68db      	ldr	r3, [r3, #12]
 80150e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	3318      	adds	r3, #24
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7fe fe9d 	bl	8013e2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	3304      	adds	r3, #4
 80150f6:	4618      	mov	r0, r3
 80150f8:	f7fe fe98 	bl	8013e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015100:	4b2d      	ldr	r3, [pc, #180]	; (80151b8 <xTaskResumeAll+0x124>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	429a      	cmp	r2, r3
 8015106:	d903      	bls.n	8015110 <xTaskResumeAll+0x7c>
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801510c:	4a2a      	ldr	r2, [pc, #168]	; (80151b8 <xTaskResumeAll+0x124>)
 801510e:	6013      	str	r3, [r2, #0]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015114:	4613      	mov	r3, r2
 8015116:	009b      	lsls	r3, r3, #2
 8015118:	4413      	add	r3, r2
 801511a:	009b      	lsls	r3, r3, #2
 801511c:	4a27      	ldr	r2, [pc, #156]	; (80151bc <xTaskResumeAll+0x128>)
 801511e:	441a      	add	r2, r3
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	3304      	adds	r3, #4
 8015124:	4619      	mov	r1, r3
 8015126:	4610      	mov	r0, r2
 8015128:	f7fe fe23 	bl	8013d72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015130:	4b23      	ldr	r3, [pc, #140]	; (80151c0 <xTaskResumeAll+0x12c>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015136:	429a      	cmp	r2, r3
 8015138:	d302      	bcc.n	8015140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801513a:	4b22      	ldr	r3, [pc, #136]	; (80151c4 <xTaskResumeAll+0x130>)
 801513c:	2201      	movs	r2, #1
 801513e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015140:	4b1c      	ldr	r3, [pc, #112]	; (80151b4 <xTaskResumeAll+0x120>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d1cb      	bne.n	80150e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d001      	beq.n	8015152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801514e:	f000 fbfb 	bl	8015948 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015152:	4b1d      	ldr	r3, [pc, #116]	; (80151c8 <xTaskResumeAll+0x134>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d010      	beq.n	8015180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801515e:	f000 f847 	bl	80151f0 <xTaskIncrementTick>
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	d002      	beq.n	801516e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015168:	4b16      	ldr	r3, [pc, #88]	; (80151c4 <xTaskResumeAll+0x130>)
 801516a:	2201      	movs	r2, #1
 801516c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	3b01      	subs	r3, #1
 8015172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d1f1      	bne.n	801515e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801517a:	4b13      	ldr	r3, [pc, #76]	; (80151c8 <xTaskResumeAll+0x134>)
 801517c:	2200      	movs	r2, #0
 801517e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015180:	4b10      	ldr	r3, [pc, #64]	; (80151c4 <xTaskResumeAll+0x130>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d009      	beq.n	801519c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015188:	2301      	movs	r3, #1
 801518a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801518c:	4b0f      	ldr	r3, [pc, #60]	; (80151cc <xTaskResumeAll+0x138>)
 801518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015192:	601a      	str	r2, [r3, #0]
 8015194:	f3bf 8f4f 	dsb	sy
 8015198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801519c:	f001 f9ba 	bl	8016514 <vPortExitCritical>

	return xAlreadyYielded;
 80151a0:	68bb      	ldr	r3, [r7, #8]
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	3710      	adds	r7, #16
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}
 80151aa:	bf00      	nop
 80151ac:	24001d28 	.word	0x24001d28
 80151b0:	24001d00 	.word	0x24001d00
 80151b4:	24001cc0 	.word	0x24001cc0
 80151b8:	24001d08 	.word	0x24001d08
 80151bc:	24001830 	.word	0x24001830
 80151c0:	2400182c 	.word	0x2400182c
 80151c4:	24001d14 	.word	0x24001d14
 80151c8:	24001d10 	.word	0x24001d10
 80151cc:	e000ed04 	.word	0xe000ed04

080151d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80151d6:	4b05      	ldr	r3, [pc, #20]	; (80151ec <xTaskGetTickCount+0x1c>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80151dc:	687b      	ldr	r3, [r7, #4]
}
 80151de:	4618      	mov	r0, r3
 80151e0:	370c      	adds	r7, #12
 80151e2:	46bd      	mov	sp, r7
 80151e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e8:	4770      	bx	lr
 80151ea:	bf00      	nop
 80151ec:	24001d04 	.word	0x24001d04

080151f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b086      	sub	sp, #24
 80151f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80151f6:	2300      	movs	r3, #0
 80151f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80151fa:	4b53      	ldr	r3, [pc, #332]	; (8015348 <xTaskIncrementTick+0x158>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	f040 8095 	bne.w	801532e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015204:	4b51      	ldr	r3, [pc, #324]	; (801534c <xTaskIncrementTick+0x15c>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	3301      	adds	r3, #1
 801520a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801520c:	4a4f      	ldr	r2, [pc, #316]	; (801534c <xTaskIncrementTick+0x15c>)
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d120      	bne.n	801525a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015218:	4b4d      	ldr	r3, [pc, #308]	; (8015350 <xTaskIncrementTick+0x160>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d00a      	beq.n	8015238 <xTaskIncrementTick+0x48>
	__asm volatile
 8015222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015226:	f383 8811 	msr	BASEPRI, r3
 801522a:	f3bf 8f6f 	isb	sy
 801522e:	f3bf 8f4f 	dsb	sy
 8015232:	603b      	str	r3, [r7, #0]
}
 8015234:	bf00      	nop
 8015236:	e7fe      	b.n	8015236 <xTaskIncrementTick+0x46>
 8015238:	4b45      	ldr	r3, [pc, #276]	; (8015350 <xTaskIncrementTick+0x160>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	60fb      	str	r3, [r7, #12]
 801523e:	4b45      	ldr	r3, [pc, #276]	; (8015354 <xTaskIncrementTick+0x164>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	4a43      	ldr	r2, [pc, #268]	; (8015350 <xTaskIncrementTick+0x160>)
 8015244:	6013      	str	r3, [r2, #0]
 8015246:	4a43      	ldr	r2, [pc, #268]	; (8015354 <xTaskIncrementTick+0x164>)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	6013      	str	r3, [r2, #0]
 801524c:	4b42      	ldr	r3, [pc, #264]	; (8015358 <xTaskIncrementTick+0x168>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	3301      	adds	r3, #1
 8015252:	4a41      	ldr	r2, [pc, #260]	; (8015358 <xTaskIncrementTick+0x168>)
 8015254:	6013      	str	r3, [r2, #0]
 8015256:	f000 fb77 	bl	8015948 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801525a:	4b40      	ldr	r3, [pc, #256]	; (801535c <xTaskIncrementTick+0x16c>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	693a      	ldr	r2, [r7, #16]
 8015260:	429a      	cmp	r2, r3
 8015262:	d349      	bcc.n	80152f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015264:	4b3a      	ldr	r3, [pc, #232]	; (8015350 <xTaskIncrementTick+0x160>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d104      	bne.n	8015278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801526e:	4b3b      	ldr	r3, [pc, #236]	; (801535c <xTaskIncrementTick+0x16c>)
 8015270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015274:	601a      	str	r2, [r3, #0]
					break;
 8015276:	e03f      	b.n	80152f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015278:	4b35      	ldr	r3, [pc, #212]	; (8015350 <xTaskIncrementTick+0x160>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	68db      	ldr	r3, [r3, #12]
 801527e:	68db      	ldr	r3, [r3, #12]
 8015280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015288:	693a      	ldr	r2, [r7, #16]
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	429a      	cmp	r2, r3
 801528e:	d203      	bcs.n	8015298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015290:	4a32      	ldr	r2, [pc, #200]	; (801535c <xTaskIncrementTick+0x16c>)
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015296:	e02f      	b.n	80152f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	3304      	adds	r3, #4
 801529c:	4618      	mov	r0, r3
 801529e:	f7fe fdc5 	bl	8013e2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80152a2:	68bb      	ldr	r3, [r7, #8]
 80152a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d004      	beq.n	80152b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	3318      	adds	r3, #24
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7fe fdbc 	bl	8013e2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b8:	4b29      	ldr	r3, [pc, #164]	; (8015360 <xTaskIncrementTick+0x170>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d903      	bls.n	80152c8 <xTaskIncrementTick+0xd8>
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152c4:	4a26      	ldr	r2, [pc, #152]	; (8015360 <xTaskIncrementTick+0x170>)
 80152c6:	6013      	str	r3, [r2, #0]
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152cc:	4613      	mov	r3, r2
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	4413      	add	r3, r2
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	4a23      	ldr	r2, [pc, #140]	; (8015364 <xTaskIncrementTick+0x174>)
 80152d6:	441a      	add	r2, r3
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	3304      	adds	r3, #4
 80152dc:	4619      	mov	r1, r3
 80152de:	4610      	mov	r0, r2
 80152e0:	f7fe fd47 	bl	8013d72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152e8:	4b1f      	ldr	r3, [pc, #124]	; (8015368 <xTaskIncrementTick+0x178>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d3b8      	bcc.n	8015264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80152f2:	2301      	movs	r3, #1
 80152f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152f6:	e7b5      	b.n	8015264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80152f8:	4b1b      	ldr	r3, [pc, #108]	; (8015368 <xTaskIncrementTick+0x178>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152fe:	4919      	ldr	r1, [pc, #100]	; (8015364 <xTaskIncrementTick+0x174>)
 8015300:	4613      	mov	r3, r2
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	4413      	add	r3, r2
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	440b      	add	r3, r1
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	2b01      	cmp	r3, #1
 801530e:	d901      	bls.n	8015314 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015310:	2301      	movs	r3, #1
 8015312:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8015314:	4b15      	ldr	r3, [pc, #84]	; (801536c <xTaskIncrementTick+0x17c>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d101      	bne.n	8015320 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801531c:	f7eb f962 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015320:	4b13      	ldr	r3, [pc, #76]	; (8015370 <xTaskIncrementTick+0x180>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d009      	beq.n	801533c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8015328:	2301      	movs	r3, #1
 801532a:	617b      	str	r3, [r7, #20]
 801532c:	e006      	b.n	801533c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801532e:	4b0f      	ldr	r3, [pc, #60]	; (801536c <xTaskIncrementTick+0x17c>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	3301      	adds	r3, #1
 8015334:	4a0d      	ldr	r2, [pc, #52]	; (801536c <xTaskIncrementTick+0x17c>)
 8015336:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015338:	f7eb f954 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801533c:	697b      	ldr	r3, [r7, #20]
}
 801533e:	4618      	mov	r0, r3
 8015340:	3718      	adds	r7, #24
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}
 8015346:	bf00      	nop
 8015348:	24001d28 	.word	0x24001d28
 801534c:	24001d04 	.word	0x24001d04
 8015350:	24001cb8 	.word	0x24001cb8
 8015354:	24001cbc 	.word	0x24001cbc
 8015358:	24001d18 	.word	0x24001d18
 801535c:	24001d20 	.word	0x24001d20
 8015360:	24001d08 	.word	0x24001d08
 8015364:	24001830 	.word	0x24001830
 8015368:	2400182c 	.word	0x2400182c
 801536c:	24001d10 	.word	0x24001d10
 8015370:	24001d14 	.word	0x24001d14

08015374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015374:	b480      	push	{r7}
 8015376:	b085      	sub	sp, #20
 8015378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801537a:	4b28      	ldr	r3, [pc, #160]	; (801541c <vTaskSwitchContext+0xa8>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d003      	beq.n	801538a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015382:	4b27      	ldr	r3, [pc, #156]	; (8015420 <vTaskSwitchContext+0xac>)
 8015384:	2201      	movs	r2, #1
 8015386:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015388:	e041      	b.n	801540e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801538a:	4b25      	ldr	r3, [pc, #148]	; (8015420 <vTaskSwitchContext+0xac>)
 801538c:	2200      	movs	r2, #0
 801538e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015390:	4b24      	ldr	r3, [pc, #144]	; (8015424 <vTaskSwitchContext+0xb0>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	60fb      	str	r3, [r7, #12]
 8015396:	e010      	b.n	80153ba <vTaskSwitchContext+0x46>
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d10a      	bne.n	80153b4 <vTaskSwitchContext+0x40>
	__asm volatile
 801539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a2:	f383 8811 	msr	BASEPRI, r3
 80153a6:	f3bf 8f6f 	isb	sy
 80153aa:	f3bf 8f4f 	dsb	sy
 80153ae:	607b      	str	r3, [r7, #4]
}
 80153b0:	bf00      	nop
 80153b2:	e7fe      	b.n	80153b2 <vTaskSwitchContext+0x3e>
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	3b01      	subs	r3, #1
 80153b8:	60fb      	str	r3, [r7, #12]
 80153ba:	491b      	ldr	r1, [pc, #108]	; (8015428 <vTaskSwitchContext+0xb4>)
 80153bc:	68fa      	ldr	r2, [r7, #12]
 80153be:	4613      	mov	r3, r2
 80153c0:	009b      	lsls	r3, r3, #2
 80153c2:	4413      	add	r3, r2
 80153c4:	009b      	lsls	r3, r3, #2
 80153c6:	440b      	add	r3, r1
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d0e4      	beq.n	8015398 <vTaskSwitchContext+0x24>
 80153ce:	68fa      	ldr	r2, [r7, #12]
 80153d0:	4613      	mov	r3, r2
 80153d2:	009b      	lsls	r3, r3, #2
 80153d4:	4413      	add	r3, r2
 80153d6:	009b      	lsls	r3, r3, #2
 80153d8:	4a13      	ldr	r2, [pc, #76]	; (8015428 <vTaskSwitchContext+0xb4>)
 80153da:	4413      	add	r3, r2
 80153dc:	60bb      	str	r3, [r7, #8]
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	685a      	ldr	r2, [r3, #4]
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	605a      	str	r2, [r3, #4]
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	685a      	ldr	r2, [r3, #4]
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	3308      	adds	r3, #8
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d104      	bne.n	80153fe <vTaskSwitchContext+0x8a>
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	685a      	ldr	r2, [r3, #4]
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	605a      	str	r2, [r3, #4]
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	685b      	ldr	r3, [r3, #4]
 8015402:	68db      	ldr	r3, [r3, #12]
 8015404:	4a09      	ldr	r2, [pc, #36]	; (801542c <vTaskSwitchContext+0xb8>)
 8015406:	6013      	str	r3, [r2, #0]
 8015408:	4a06      	ldr	r2, [pc, #24]	; (8015424 <vTaskSwitchContext+0xb0>)
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	6013      	str	r3, [r2, #0]
}
 801540e:	bf00      	nop
 8015410:	3714      	adds	r7, #20
 8015412:	46bd      	mov	sp, r7
 8015414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015418:	4770      	bx	lr
 801541a:	bf00      	nop
 801541c:	24001d28 	.word	0x24001d28
 8015420:	24001d14 	.word	0x24001d14
 8015424:	24001d08 	.word	0x24001d08
 8015428:	24001830 	.word	0x24001830
 801542c:	2400182c 	.word	0x2400182c

08015430 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b084      	sub	sp, #16
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d10a      	bne.n	8015456 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015444:	f383 8811 	msr	BASEPRI, r3
 8015448:	f3bf 8f6f 	isb	sy
 801544c:	f3bf 8f4f 	dsb	sy
 8015450:	60fb      	str	r3, [r7, #12]
}
 8015452:	bf00      	nop
 8015454:	e7fe      	b.n	8015454 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015456:	4b07      	ldr	r3, [pc, #28]	; (8015474 <vTaskPlaceOnEventList+0x44>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	3318      	adds	r3, #24
 801545c:	4619      	mov	r1, r3
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f7fe fcab 	bl	8013dba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015464:	2101      	movs	r1, #1
 8015466:	6838      	ldr	r0, [r7, #0]
 8015468:	f000 fb32 	bl	8015ad0 <prvAddCurrentTaskToDelayedList>
}
 801546c:	bf00      	nop
 801546e:	3710      	adds	r7, #16
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	2400182c 	.word	0x2400182c

08015478 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b086      	sub	sp, #24
 801547c:	af00      	add	r7, sp, #0
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	60b9      	str	r1, [r7, #8]
 8015482:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d10a      	bne.n	80154a0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801548e:	f383 8811 	msr	BASEPRI, r3
 8015492:	f3bf 8f6f 	isb	sy
 8015496:	f3bf 8f4f 	dsb	sy
 801549a:	617b      	str	r3, [r7, #20]
}
 801549c:	bf00      	nop
 801549e:	e7fe      	b.n	801549e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80154a0:	4b11      	ldr	r3, [pc, #68]	; (80154e8 <vTaskPlaceOnUnorderedEventList+0x70>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d10a      	bne.n	80154be <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80154a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ac:	f383 8811 	msr	BASEPRI, r3
 80154b0:	f3bf 8f6f 	isb	sy
 80154b4:	f3bf 8f4f 	dsb	sy
 80154b8:	613b      	str	r3, [r7, #16]
}
 80154ba:	bf00      	nop
 80154bc:	e7fe      	b.n	80154bc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80154be:	4b0b      	ldr	r3, [pc, #44]	; (80154ec <vTaskPlaceOnUnorderedEventList+0x74>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	68ba      	ldr	r2, [r7, #8]
 80154c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80154c8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80154ca:	4b08      	ldr	r3, [pc, #32]	; (80154ec <vTaskPlaceOnUnorderedEventList+0x74>)
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	3318      	adds	r3, #24
 80154d0:	4619      	mov	r1, r3
 80154d2:	68f8      	ldr	r0, [r7, #12]
 80154d4:	f7fe fc4d 	bl	8013d72 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80154d8:	2101      	movs	r1, #1
 80154da:	6878      	ldr	r0, [r7, #4]
 80154dc:	f000 faf8 	bl	8015ad0 <prvAddCurrentTaskToDelayedList>
}
 80154e0:	bf00      	nop
 80154e2:	3718      	adds	r7, #24
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}
 80154e8:	24001d28 	.word	0x24001d28
 80154ec:	2400182c 	.word	0x2400182c

080154f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b086      	sub	sp, #24
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	60b9      	str	r1, [r7, #8]
 80154fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d10a      	bne.n	8015518 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015506:	f383 8811 	msr	BASEPRI, r3
 801550a:	f3bf 8f6f 	isb	sy
 801550e:	f3bf 8f4f 	dsb	sy
 8015512:	617b      	str	r3, [r7, #20]
}
 8015514:	bf00      	nop
 8015516:	e7fe      	b.n	8015516 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015518:	4b0a      	ldr	r3, [pc, #40]	; (8015544 <vTaskPlaceOnEventListRestricted+0x54>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	3318      	adds	r3, #24
 801551e:	4619      	mov	r1, r3
 8015520:	68f8      	ldr	r0, [r7, #12]
 8015522:	f7fe fc26 	bl	8013d72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d002      	beq.n	8015532 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801552c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015530:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015532:	6879      	ldr	r1, [r7, #4]
 8015534:	68b8      	ldr	r0, [r7, #8]
 8015536:	f000 facb 	bl	8015ad0 <prvAddCurrentTaskToDelayedList>
	}
 801553a:	bf00      	nop
 801553c:	3718      	adds	r7, #24
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	2400182c 	.word	0x2400182c

08015548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b086      	sub	sp, #24
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	68db      	ldr	r3, [r3, #12]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d10a      	bne.n	8015574 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015562:	f383 8811 	msr	BASEPRI, r3
 8015566:	f3bf 8f6f 	isb	sy
 801556a:	f3bf 8f4f 	dsb	sy
 801556e:	60fb      	str	r3, [r7, #12]
}
 8015570:	bf00      	nop
 8015572:	e7fe      	b.n	8015572 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	3318      	adds	r3, #24
 8015578:	4618      	mov	r0, r3
 801557a:	f7fe fc57 	bl	8013e2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801557e:	4b1e      	ldr	r3, [pc, #120]	; (80155f8 <xTaskRemoveFromEventList+0xb0>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d11d      	bne.n	80155c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015586:	693b      	ldr	r3, [r7, #16]
 8015588:	3304      	adds	r3, #4
 801558a:	4618      	mov	r0, r3
 801558c:	f7fe fc4e 	bl	8013e2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015594:	4b19      	ldr	r3, [pc, #100]	; (80155fc <xTaskRemoveFromEventList+0xb4>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	429a      	cmp	r2, r3
 801559a:	d903      	bls.n	80155a4 <xTaskRemoveFromEventList+0x5c>
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155a0:	4a16      	ldr	r2, [pc, #88]	; (80155fc <xTaskRemoveFromEventList+0xb4>)
 80155a2:	6013      	str	r3, [r2, #0]
 80155a4:	693b      	ldr	r3, [r7, #16]
 80155a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155a8:	4613      	mov	r3, r2
 80155aa:	009b      	lsls	r3, r3, #2
 80155ac:	4413      	add	r3, r2
 80155ae:	009b      	lsls	r3, r3, #2
 80155b0:	4a13      	ldr	r2, [pc, #76]	; (8015600 <xTaskRemoveFromEventList+0xb8>)
 80155b2:	441a      	add	r2, r3
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	3304      	adds	r3, #4
 80155b8:	4619      	mov	r1, r3
 80155ba:	4610      	mov	r0, r2
 80155bc:	f7fe fbd9 	bl	8013d72 <vListInsertEnd>
 80155c0:	e005      	b.n	80155ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80155c2:	693b      	ldr	r3, [r7, #16]
 80155c4:	3318      	adds	r3, #24
 80155c6:	4619      	mov	r1, r3
 80155c8:	480e      	ldr	r0, [pc, #56]	; (8015604 <xTaskRemoveFromEventList+0xbc>)
 80155ca:	f7fe fbd2 	bl	8013d72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155d2:	4b0d      	ldr	r3, [pc, #52]	; (8015608 <xTaskRemoveFromEventList+0xc0>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155d8:	429a      	cmp	r2, r3
 80155da:	d905      	bls.n	80155e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80155dc:	2301      	movs	r3, #1
 80155de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80155e0:	4b0a      	ldr	r3, [pc, #40]	; (801560c <xTaskRemoveFromEventList+0xc4>)
 80155e2:	2201      	movs	r2, #1
 80155e4:	601a      	str	r2, [r3, #0]
 80155e6:	e001      	b.n	80155ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80155e8:	2300      	movs	r3, #0
 80155ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80155ec:	697b      	ldr	r3, [r7, #20]
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3718      	adds	r7, #24
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	24001d28 	.word	0x24001d28
 80155fc:	24001d08 	.word	0x24001d08
 8015600:	24001830 	.word	0x24001830
 8015604:	24001cc0 	.word	0x24001cc0
 8015608:	2400182c 	.word	0x2400182c
 801560c:	24001d14 	.word	0x24001d14

08015610 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b086      	sub	sp, #24
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801561a:	4b29      	ldr	r3, [pc, #164]	; (80156c0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d10a      	bne.n	8015638 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8015622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015626:	f383 8811 	msr	BASEPRI, r3
 801562a:	f3bf 8f6f 	isb	sy
 801562e:	f3bf 8f4f 	dsb	sy
 8015632:	613b      	str	r3, [r7, #16]
}
 8015634:	bf00      	nop
 8015636:	e7fe      	b.n	8015636 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	68db      	ldr	r3, [r3, #12]
 8015646:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d10a      	bne.n	8015664 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015652:	f383 8811 	msr	BASEPRI, r3
 8015656:	f3bf 8f6f 	isb	sy
 801565a:	f3bf 8f4f 	dsb	sy
 801565e:	60fb      	str	r3, [r7, #12]
}
 8015660:	bf00      	nop
 8015662:	e7fe      	b.n	8015662 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7fe fbe1 	bl	8013e2c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	3304      	adds	r3, #4
 801566e:	4618      	mov	r0, r3
 8015670:	f7fe fbdc 	bl	8013e2c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015678:	4b12      	ldr	r3, [pc, #72]	; (80156c4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	429a      	cmp	r2, r3
 801567e:	d903      	bls.n	8015688 <vTaskRemoveFromUnorderedEventList+0x78>
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015684:	4a0f      	ldr	r2, [pc, #60]	; (80156c4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015686:	6013      	str	r3, [r2, #0]
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801568c:	4613      	mov	r3, r2
 801568e:	009b      	lsls	r3, r3, #2
 8015690:	4413      	add	r3, r2
 8015692:	009b      	lsls	r3, r3, #2
 8015694:	4a0c      	ldr	r2, [pc, #48]	; (80156c8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015696:	441a      	add	r2, r3
 8015698:	697b      	ldr	r3, [r7, #20]
 801569a:	3304      	adds	r3, #4
 801569c:	4619      	mov	r1, r3
 801569e:	4610      	mov	r0, r2
 80156a0:	f7fe fb67 	bl	8013d72 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156a8:	4b08      	ldr	r3, [pc, #32]	; (80156cc <vTaskRemoveFromUnorderedEventList+0xbc>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d902      	bls.n	80156b8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80156b2:	4b07      	ldr	r3, [pc, #28]	; (80156d0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80156b4:	2201      	movs	r2, #1
 80156b6:	601a      	str	r2, [r3, #0]
	}
}
 80156b8:	bf00      	nop
 80156ba:	3718      	adds	r7, #24
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	24001d28 	.word	0x24001d28
 80156c4:	24001d08 	.word	0x24001d08
 80156c8:	24001830 	.word	0x24001830
 80156cc:	2400182c 	.word	0x2400182c
 80156d0:	24001d14 	.word	0x24001d14

080156d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80156d4:	b480      	push	{r7}
 80156d6:	b083      	sub	sp, #12
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80156dc:	4b06      	ldr	r3, [pc, #24]	; (80156f8 <vTaskInternalSetTimeOutState+0x24>)
 80156de:	681a      	ldr	r2, [r3, #0]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80156e4:	4b05      	ldr	r3, [pc, #20]	; (80156fc <vTaskInternalSetTimeOutState+0x28>)
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	605a      	str	r2, [r3, #4]
}
 80156ec:	bf00      	nop
 80156ee:	370c      	adds	r7, #12
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr
 80156f8:	24001d18 	.word	0x24001d18
 80156fc:	24001d04 	.word	0x24001d04

08015700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b088      	sub	sp, #32
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
 8015708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d10a      	bne.n	8015726 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015714:	f383 8811 	msr	BASEPRI, r3
 8015718:	f3bf 8f6f 	isb	sy
 801571c:	f3bf 8f4f 	dsb	sy
 8015720:	613b      	str	r3, [r7, #16]
}
 8015722:	bf00      	nop
 8015724:	e7fe      	b.n	8015724 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d10a      	bne.n	8015742 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015730:	f383 8811 	msr	BASEPRI, r3
 8015734:	f3bf 8f6f 	isb	sy
 8015738:	f3bf 8f4f 	dsb	sy
 801573c:	60fb      	str	r3, [r7, #12]
}
 801573e:	bf00      	nop
 8015740:	e7fe      	b.n	8015740 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015742:	f000 feb7 	bl	80164b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015746:	4b1d      	ldr	r3, [pc, #116]	; (80157bc <xTaskCheckForTimeOut+0xbc>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	685b      	ldr	r3, [r3, #4]
 8015750:	69ba      	ldr	r2, [r7, #24]
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801575e:	d102      	bne.n	8015766 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015760:	2300      	movs	r3, #0
 8015762:	61fb      	str	r3, [r7, #28]
 8015764:	e023      	b.n	80157ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	4b15      	ldr	r3, [pc, #84]	; (80157c0 <xTaskCheckForTimeOut+0xc0>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	429a      	cmp	r2, r3
 8015770:	d007      	beq.n	8015782 <xTaskCheckForTimeOut+0x82>
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	685b      	ldr	r3, [r3, #4]
 8015776:	69ba      	ldr	r2, [r7, #24]
 8015778:	429a      	cmp	r2, r3
 801577a:	d302      	bcc.n	8015782 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801577c:	2301      	movs	r3, #1
 801577e:	61fb      	str	r3, [r7, #28]
 8015780:	e015      	b.n	80157ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	697a      	ldr	r2, [r7, #20]
 8015788:	429a      	cmp	r2, r3
 801578a:	d20b      	bcs.n	80157a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	1ad2      	subs	r2, r2, r3
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f7ff ff9b 	bl	80156d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801579e:	2300      	movs	r3, #0
 80157a0:	61fb      	str	r3, [r7, #28]
 80157a2:	e004      	b.n	80157ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	2200      	movs	r2, #0
 80157a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80157aa:	2301      	movs	r3, #1
 80157ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80157ae:	f000 feb1 	bl	8016514 <vPortExitCritical>

	return xReturn;
 80157b2:	69fb      	ldr	r3, [r7, #28]
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3720      	adds	r7, #32
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}
 80157bc:	24001d04 	.word	0x24001d04
 80157c0:	24001d18 	.word	0x24001d18

080157c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80157c4:	b480      	push	{r7}
 80157c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80157c8:	4b03      	ldr	r3, [pc, #12]	; (80157d8 <vTaskMissedYield+0x14>)
 80157ca:	2201      	movs	r2, #1
 80157cc:	601a      	str	r2, [r3, #0]
}
 80157ce:	bf00      	nop
 80157d0:	46bd      	mov	sp, r7
 80157d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d6:	4770      	bx	lr
 80157d8:	24001d14 	.word	0x24001d14

080157dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80157e4:	f000 f852 	bl	801588c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80157e8:	4b06      	ldr	r3, [pc, #24]	; (8015804 <prvIdleTask+0x28>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d9f9      	bls.n	80157e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80157f0:	4b05      	ldr	r3, [pc, #20]	; (8015808 <prvIdleTask+0x2c>)
 80157f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157f6:	601a      	str	r2, [r3, #0]
 80157f8:	f3bf 8f4f 	dsb	sy
 80157fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015800:	e7f0      	b.n	80157e4 <prvIdleTask+0x8>
 8015802:	bf00      	nop
 8015804:	24001830 	.word	0x24001830
 8015808:	e000ed04 	.word	0xe000ed04

0801580c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015812:	2300      	movs	r3, #0
 8015814:	607b      	str	r3, [r7, #4]
 8015816:	e00c      	b.n	8015832 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015818:	687a      	ldr	r2, [r7, #4]
 801581a:	4613      	mov	r3, r2
 801581c:	009b      	lsls	r3, r3, #2
 801581e:	4413      	add	r3, r2
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	4a12      	ldr	r2, [pc, #72]	; (801586c <prvInitialiseTaskLists+0x60>)
 8015824:	4413      	add	r3, r2
 8015826:	4618      	mov	r0, r3
 8015828:	f7fe fa76 	bl	8013d18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	3301      	adds	r3, #1
 8015830:	607b      	str	r3, [r7, #4]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2b37      	cmp	r3, #55	; 0x37
 8015836:	d9ef      	bls.n	8015818 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015838:	480d      	ldr	r0, [pc, #52]	; (8015870 <prvInitialiseTaskLists+0x64>)
 801583a:	f7fe fa6d 	bl	8013d18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801583e:	480d      	ldr	r0, [pc, #52]	; (8015874 <prvInitialiseTaskLists+0x68>)
 8015840:	f7fe fa6a 	bl	8013d18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015844:	480c      	ldr	r0, [pc, #48]	; (8015878 <prvInitialiseTaskLists+0x6c>)
 8015846:	f7fe fa67 	bl	8013d18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801584a:	480c      	ldr	r0, [pc, #48]	; (801587c <prvInitialiseTaskLists+0x70>)
 801584c:	f7fe fa64 	bl	8013d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015850:	480b      	ldr	r0, [pc, #44]	; (8015880 <prvInitialiseTaskLists+0x74>)
 8015852:	f7fe fa61 	bl	8013d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015856:	4b0b      	ldr	r3, [pc, #44]	; (8015884 <prvInitialiseTaskLists+0x78>)
 8015858:	4a05      	ldr	r2, [pc, #20]	; (8015870 <prvInitialiseTaskLists+0x64>)
 801585a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801585c:	4b0a      	ldr	r3, [pc, #40]	; (8015888 <prvInitialiseTaskLists+0x7c>)
 801585e:	4a05      	ldr	r2, [pc, #20]	; (8015874 <prvInitialiseTaskLists+0x68>)
 8015860:	601a      	str	r2, [r3, #0]
}
 8015862:	bf00      	nop
 8015864:	3708      	adds	r7, #8
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	24001830 	.word	0x24001830
 8015870:	24001c90 	.word	0x24001c90
 8015874:	24001ca4 	.word	0x24001ca4
 8015878:	24001cc0 	.word	0x24001cc0
 801587c:	24001cd4 	.word	0x24001cd4
 8015880:	24001cec 	.word	0x24001cec
 8015884:	24001cb8 	.word	0x24001cb8
 8015888:	24001cbc 	.word	0x24001cbc

0801588c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015892:	e019      	b.n	80158c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015894:	f000 fe0e 	bl	80164b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015898:	4b10      	ldr	r3, [pc, #64]	; (80158dc <prvCheckTasksWaitingTermination+0x50>)
 801589a:	68db      	ldr	r3, [r3, #12]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	3304      	adds	r3, #4
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7fe fac1 	bl	8013e2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80158aa:	4b0d      	ldr	r3, [pc, #52]	; (80158e0 <prvCheckTasksWaitingTermination+0x54>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	3b01      	subs	r3, #1
 80158b0:	4a0b      	ldr	r2, [pc, #44]	; (80158e0 <prvCheckTasksWaitingTermination+0x54>)
 80158b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80158b4:	4b0b      	ldr	r3, [pc, #44]	; (80158e4 <prvCheckTasksWaitingTermination+0x58>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	3b01      	subs	r3, #1
 80158ba:	4a0a      	ldr	r2, [pc, #40]	; (80158e4 <prvCheckTasksWaitingTermination+0x58>)
 80158bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80158be:	f000 fe29 	bl	8016514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f000 f810 	bl	80158e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80158c8:	4b06      	ldr	r3, [pc, #24]	; (80158e4 <prvCheckTasksWaitingTermination+0x58>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d1e1      	bne.n	8015894 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80158d0:	bf00      	nop
 80158d2:	bf00      	nop
 80158d4:	3708      	adds	r7, #8
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
 80158da:	bf00      	nop
 80158dc:	24001cd4 	.word	0x24001cd4
 80158e0:	24001d00 	.word	0x24001d00
 80158e4:	24001ce8 	.word	0x24001ce8

080158e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b084      	sub	sp, #16
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d108      	bne.n	801590c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158fe:	4618      	mov	r0, r3
 8015900:	f000 ffc6 	bl	8016890 <vPortFree>
				vPortFree( pxTCB );
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f000 ffc3 	bl	8016890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801590a:	e018      	b.n	801593e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015912:	2b01      	cmp	r3, #1
 8015914:	d103      	bne.n	801591e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f000 ffba 	bl	8016890 <vPortFree>
	}
 801591c:	e00f      	b.n	801593e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015924:	2b02      	cmp	r3, #2
 8015926:	d00a      	beq.n	801593e <prvDeleteTCB+0x56>
	__asm volatile
 8015928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592c:	f383 8811 	msr	BASEPRI, r3
 8015930:	f3bf 8f6f 	isb	sy
 8015934:	f3bf 8f4f 	dsb	sy
 8015938:	60fb      	str	r3, [r7, #12]
}
 801593a:	bf00      	nop
 801593c:	e7fe      	b.n	801593c <prvDeleteTCB+0x54>
	}
 801593e:	bf00      	nop
 8015940:	3710      	adds	r7, #16
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
	...

08015948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015948:	b480      	push	{r7}
 801594a:	b083      	sub	sp, #12
 801594c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801594e:	4b0c      	ldr	r3, [pc, #48]	; (8015980 <prvResetNextTaskUnblockTime+0x38>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d104      	bne.n	8015962 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015958:	4b0a      	ldr	r3, [pc, #40]	; (8015984 <prvResetNextTaskUnblockTime+0x3c>)
 801595a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801595e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015960:	e008      	b.n	8015974 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015962:	4b07      	ldr	r3, [pc, #28]	; (8015980 <prvResetNextTaskUnblockTime+0x38>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	68db      	ldr	r3, [r3, #12]
 801596a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	685b      	ldr	r3, [r3, #4]
 8015970:	4a04      	ldr	r2, [pc, #16]	; (8015984 <prvResetNextTaskUnblockTime+0x3c>)
 8015972:	6013      	str	r3, [r2, #0]
}
 8015974:	bf00      	nop
 8015976:	370c      	adds	r7, #12
 8015978:	46bd      	mov	sp, r7
 801597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597e:	4770      	bx	lr
 8015980:	24001cb8 	.word	0x24001cb8
 8015984:	24001d20 	.word	0x24001d20

08015988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015988:	b480      	push	{r7}
 801598a:	b083      	sub	sp, #12
 801598c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801598e:	4b0b      	ldr	r3, [pc, #44]	; (80159bc <xTaskGetSchedulerState+0x34>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d102      	bne.n	801599c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015996:	2301      	movs	r3, #1
 8015998:	607b      	str	r3, [r7, #4]
 801599a:	e008      	b.n	80159ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801599c:	4b08      	ldr	r3, [pc, #32]	; (80159c0 <xTaskGetSchedulerState+0x38>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d102      	bne.n	80159aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80159a4:	2302      	movs	r3, #2
 80159a6:	607b      	str	r3, [r7, #4]
 80159a8:	e001      	b.n	80159ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80159aa:	2300      	movs	r3, #0
 80159ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80159ae:	687b      	ldr	r3, [r7, #4]
	}
 80159b0:	4618      	mov	r0, r3
 80159b2:	370c      	adds	r7, #12
 80159b4:	46bd      	mov	sp, r7
 80159b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ba:	4770      	bx	lr
 80159bc:	24001d0c 	.word	0x24001d0c
 80159c0:	24001d28 	.word	0x24001d28

080159c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b086      	sub	sp, #24
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80159d0:	2300      	movs	r3, #0
 80159d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d056      	beq.n	8015a88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80159da:	4b2e      	ldr	r3, [pc, #184]	; (8015a94 <xTaskPriorityDisinherit+0xd0>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	693a      	ldr	r2, [r7, #16]
 80159e0:	429a      	cmp	r2, r3
 80159e2:	d00a      	beq.n	80159fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80159e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159e8:	f383 8811 	msr	BASEPRI, r3
 80159ec:	f3bf 8f6f 	isb	sy
 80159f0:	f3bf 8f4f 	dsb	sy
 80159f4:	60fb      	str	r3, [r7, #12]
}
 80159f6:	bf00      	nop
 80159f8:	e7fe      	b.n	80159f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d10a      	bne.n	8015a18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a06:	f383 8811 	msr	BASEPRI, r3
 8015a0a:	f3bf 8f6f 	isb	sy
 8015a0e:	f3bf 8f4f 	dsb	sy
 8015a12:	60bb      	str	r3, [r7, #8]
}
 8015a14:	bf00      	nop
 8015a16:	e7fe      	b.n	8015a16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a1c:	1e5a      	subs	r2, r3, #1
 8015a1e:	693b      	ldr	r3, [r7, #16]
 8015a20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a26:	693b      	ldr	r3, [r7, #16]
 8015a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d02c      	beq.n	8015a88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d128      	bne.n	8015a88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	3304      	adds	r3, #4
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f7fe f9f6 	bl	8013e2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a48:	693b      	ldr	r3, [r7, #16]
 8015a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015a50:	693b      	ldr	r3, [r7, #16]
 8015a52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a58:	4b0f      	ldr	r3, [pc, #60]	; (8015a98 <xTaskPriorityDisinherit+0xd4>)
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d903      	bls.n	8015a68 <xTaskPriorityDisinherit+0xa4>
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a64:	4a0c      	ldr	r2, [pc, #48]	; (8015a98 <xTaskPriorityDisinherit+0xd4>)
 8015a66:	6013      	str	r3, [r2, #0]
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	009b      	lsls	r3, r3, #2
 8015a70:	4413      	add	r3, r2
 8015a72:	009b      	lsls	r3, r3, #2
 8015a74:	4a09      	ldr	r2, [pc, #36]	; (8015a9c <xTaskPriorityDisinherit+0xd8>)
 8015a76:	441a      	add	r2, r3
 8015a78:	693b      	ldr	r3, [r7, #16]
 8015a7a:	3304      	adds	r3, #4
 8015a7c:	4619      	mov	r1, r3
 8015a7e:	4610      	mov	r0, r2
 8015a80:	f7fe f977 	bl	8013d72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015a84:	2301      	movs	r3, #1
 8015a86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015a88:	697b      	ldr	r3, [r7, #20]
	}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3718      	adds	r7, #24
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	bf00      	nop
 8015a94:	2400182c 	.word	0x2400182c
 8015a98:	24001d08 	.word	0x24001d08
 8015a9c:	24001830 	.word	0x24001830

08015aa0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	b083      	sub	sp, #12
 8015aa4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015aa6:	4b09      	ldr	r3, [pc, #36]	; (8015acc <uxTaskResetEventItemValue+0x2c>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	699b      	ldr	r3, [r3, #24]
 8015aac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015aae:	4b07      	ldr	r3, [pc, #28]	; (8015acc <uxTaskResetEventItemValue+0x2c>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ab4:	4b05      	ldr	r3, [pc, #20]	; (8015acc <uxTaskResetEventItemValue+0x2c>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015abc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015abe:	687b      	ldr	r3, [r7, #4]
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	370c      	adds	r7, #12
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aca:	4770      	bx	lr
 8015acc:	2400182c 	.word	0x2400182c

08015ad0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b084      	sub	sp, #16
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015ada:	4b21      	ldr	r3, [pc, #132]	; (8015b60 <prvAddCurrentTaskToDelayedList+0x90>)
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ae0:	4b20      	ldr	r3, [pc, #128]	; (8015b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	3304      	adds	r3, #4
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7fe f9a0 	bl	8013e2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015af2:	d10a      	bne.n	8015b0a <prvAddCurrentTaskToDelayedList+0x3a>
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d007      	beq.n	8015b0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015afa:	4b1a      	ldr	r3, [pc, #104]	; (8015b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	3304      	adds	r3, #4
 8015b00:	4619      	mov	r1, r3
 8015b02:	4819      	ldr	r0, [pc, #100]	; (8015b68 <prvAddCurrentTaskToDelayedList+0x98>)
 8015b04:	f7fe f935 	bl	8013d72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015b08:	e026      	b.n	8015b58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015b0a:	68fa      	ldr	r2, [r7, #12]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	4413      	add	r3, r2
 8015b10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015b12:	4b14      	ldr	r3, [pc, #80]	; (8015b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	68ba      	ldr	r2, [r7, #8]
 8015b18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015b1a:	68ba      	ldr	r2, [r7, #8]
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d209      	bcs.n	8015b36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b22:	4b12      	ldr	r3, [pc, #72]	; (8015b6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	4b0f      	ldr	r3, [pc, #60]	; (8015b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	3304      	adds	r3, #4
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	4610      	mov	r0, r2
 8015b30:	f7fe f943 	bl	8013dba <vListInsert>
}
 8015b34:	e010      	b.n	8015b58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b36:	4b0e      	ldr	r3, [pc, #56]	; (8015b70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015b38:	681a      	ldr	r2, [r3, #0]
 8015b3a:	4b0a      	ldr	r3, [pc, #40]	; (8015b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	3304      	adds	r3, #4
 8015b40:	4619      	mov	r1, r3
 8015b42:	4610      	mov	r0, r2
 8015b44:	f7fe f939 	bl	8013dba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015b48:	4b0a      	ldr	r3, [pc, #40]	; (8015b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	68ba      	ldr	r2, [r7, #8]
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d202      	bcs.n	8015b58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015b52:	4a08      	ldr	r2, [pc, #32]	; (8015b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	6013      	str	r3, [r2, #0]
}
 8015b58:	bf00      	nop
 8015b5a:	3710      	adds	r7, #16
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}
 8015b60:	24001d04 	.word	0x24001d04
 8015b64:	2400182c 	.word	0x2400182c
 8015b68:	24001cec 	.word	0x24001cec
 8015b6c:	24001cbc 	.word	0x24001cbc
 8015b70:	24001cb8 	.word	0x24001cb8
 8015b74:	24001d20 	.word	0x24001d20

08015b78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b08a      	sub	sp, #40	; 0x28
 8015b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015b82:	f000 fb07 	bl	8016194 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015b86:	4b1c      	ldr	r3, [pc, #112]	; (8015bf8 <xTimerCreateTimerTask+0x80>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d021      	beq.n	8015bd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015b92:	2300      	movs	r3, #0
 8015b94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015b96:	1d3a      	adds	r2, r7, #4
 8015b98:	f107 0108 	add.w	r1, r7, #8
 8015b9c:	f107 030c 	add.w	r3, r7, #12
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7fd fe33 	bl	801380c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015ba6:	6879      	ldr	r1, [r7, #4]
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	68fa      	ldr	r2, [r7, #12]
 8015bac:	9202      	str	r2, [sp, #8]
 8015bae:	9301      	str	r3, [sp, #4]
 8015bb0:	2302      	movs	r3, #2
 8015bb2:	9300      	str	r3, [sp, #0]
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	460a      	mov	r2, r1
 8015bb8:	4910      	ldr	r1, [pc, #64]	; (8015bfc <xTimerCreateTimerTask+0x84>)
 8015bba:	4811      	ldr	r0, [pc, #68]	; (8015c00 <xTimerCreateTimerTask+0x88>)
 8015bbc:	f7fe ff06 	bl	80149cc <xTaskCreateStatic>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	4a10      	ldr	r2, [pc, #64]	; (8015c04 <xTimerCreateTimerTask+0x8c>)
 8015bc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015bc6:	4b0f      	ldr	r3, [pc, #60]	; (8015c04 <xTimerCreateTimerTask+0x8c>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d001      	beq.n	8015bd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015bce:	2301      	movs	r3, #1
 8015bd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d10a      	bne.n	8015bee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bdc:	f383 8811 	msr	BASEPRI, r3
 8015be0:	f3bf 8f6f 	isb	sy
 8015be4:	f3bf 8f4f 	dsb	sy
 8015be8:	613b      	str	r3, [r7, #16]
}
 8015bea:	bf00      	nop
 8015bec:	e7fe      	b.n	8015bec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015bee:	697b      	ldr	r3, [r7, #20]
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3718      	adds	r7, #24
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}
 8015bf8:	24001d5c 	.word	0x24001d5c
 8015bfc:	080177e0 	.word	0x080177e0
 8015c00:	08015d3d 	.word	0x08015d3d
 8015c04:	24001d60 	.word	0x24001d60

08015c08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b08a      	sub	sp, #40	; 0x28
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
 8015c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015c16:	2300      	movs	r3, #0
 8015c18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d10a      	bne.n	8015c36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c24:	f383 8811 	msr	BASEPRI, r3
 8015c28:	f3bf 8f6f 	isb	sy
 8015c2c:	f3bf 8f4f 	dsb	sy
 8015c30:	623b      	str	r3, [r7, #32]
}
 8015c32:	bf00      	nop
 8015c34:	e7fe      	b.n	8015c34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015c36:	4b1a      	ldr	r3, [pc, #104]	; (8015ca0 <xTimerGenericCommand+0x98>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d02a      	beq.n	8015c94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015c4a:	68bb      	ldr	r3, [r7, #8]
 8015c4c:	2b05      	cmp	r3, #5
 8015c4e:	dc18      	bgt.n	8015c82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015c50:	f7ff fe9a 	bl	8015988 <xTaskGetSchedulerState>
 8015c54:	4603      	mov	r3, r0
 8015c56:	2b02      	cmp	r3, #2
 8015c58:	d109      	bne.n	8015c6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015c5a:	4b11      	ldr	r3, [pc, #68]	; (8015ca0 <xTimerGenericCommand+0x98>)
 8015c5c:	6818      	ldr	r0, [r3, #0]
 8015c5e:	f107 0110 	add.w	r1, r7, #16
 8015c62:	2300      	movs	r3, #0
 8015c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c66:	f7fe fa49 	bl	80140fc <xQueueGenericSend>
 8015c6a:	6278      	str	r0, [r7, #36]	; 0x24
 8015c6c:	e012      	b.n	8015c94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015c6e:	4b0c      	ldr	r3, [pc, #48]	; (8015ca0 <xTimerGenericCommand+0x98>)
 8015c70:	6818      	ldr	r0, [r3, #0]
 8015c72:	f107 0110 	add.w	r1, r7, #16
 8015c76:	2300      	movs	r3, #0
 8015c78:	2200      	movs	r2, #0
 8015c7a:	f7fe fa3f 	bl	80140fc <xQueueGenericSend>
 8015c7e:	6278      	str	r0, [r7, #36]	; 0x24
 8015c80:	e008      	b.n	8015c94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015c82:	4b07      	ldr	r3, [pc, #28]	; (8015ca0 <xTimerGenericCommand+0x98>)
 8015c84:	6818      	ldr	r0, [r3, #0]
 8015c86:	f107 0110 	add.w	r1, r7, #16
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	683a      	ldr	r2, [r7, #0]
 8015c8e:	f7fe fb33 	bl	80142f8 <xQueueGenericSendFromISR>
 8015c92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	3728      	adds	r7, #40	; 0x28
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	24001d5c 	.word	0x24001d5c

08015ca4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b088      	sub	sp, #32
 8015ca8:	af02      	add	r7, sp, #8
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015cae:	4b22      	ldr	r3, [pc, #136]	; (8015d38 <prvProcessExpiredTimer+0x94>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	68db      	ldr	r3, [r3, #12]
 8015cb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	3304      	adds	r3, #4
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f7fe f8b5 	bl	8013e2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015cc8:	f003 0304 	and.w	r3, r3, #4
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d022      	beq.n	8015d16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	699a      	ldr	r2, [r3, #24]
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	18d1      	adds	r1, r2, r3
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	683a      	ldr	r2, [r7, #0]
 8015cdc:	6978      	ldr	r0, [r7, #20]
 8015cde:	f000 f8d1 	bl	8015e84 <prvInsertTimerInActiveList>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d01f      	beq.n	8015d28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ce8:	2300      	movs	r3, #0
 8015cea:	9300      	str	r3, [sp, #0]
 8015cec:	2300      	movs	r3, #0
 8015cee:	687a      	ldr	r2, [r7, #4]
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	6978      	ldr	r0, [r7, #20]
 8015cf4:	f7ff ff88 	bl	8015c08 <xTimerGenericCommand>
 8015cf8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d113      	bne.n	8015d28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d04:	f383 8811 	msr	BASEPRI, r3
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	f3bf 8f4f 	dsb	sy
 8015d10:	60fb      	str	r3, [r7, #12]
}
 8015d12:	bf00      	nop
 8015d14:	e7fe      	b.n	8015d14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d1c:	f023 0301 	bic.w	r3, r3, #1
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015d28:	697b      	ldr	r3, [r7, #20]
 8015d2a:	6a1b      	ldr	r3, [r3, #32]
 8015d2c:	6978      	ldr	r0, [r7, #20]
 8015d2e:	4798      	blx	r3
}
 8015d30:	bf00      	nop
 8015d32:	3718      	adds	r7, #24
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	24001d54 	.word	0x24001d54

08015d3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b084      	sub	sp, #16
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015d44:	f107 0308 	add.w	r3, r7, #8
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f000 f857 	bl	8015dfc <prvGetNextExpireTime>
 8015d4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	4619      	mov	r1, r3
 8015d54:	68f8      	ldr	r0, [r7, #12]
 8015d56:	f000 f803 	bl	8015d60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015d5a:	f000 f8d5 	bl	8015f08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015d5e:	e7f1      	b.n	8015d44 <prvTimerTask+0x8>

08015d60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b084      	sub	sp, #16
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
 8015d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015d6a:	f7ff f985 	bl	8015078 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015d6e:	f107 0308 	add.w	r3, r7, #8
 8015d72:	4618      	mov	r0, r3
 8015d74:	f000 f866 	bl	8015e44 <prvSampleTimeNow>
 8015d78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d130      	bne.n	8015de2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d10a      	bne.n	8015d9c <prvProcessTimerOrBlockTask+0x3c>
 8015d86:	687a      	ldr	r2, [r7, #4]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d806      	bhi.n	8015d9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015d8e:	f7ff f981 	bl	8015094 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015d92:	68f9      	ldr	r1, [r7, #12]
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f7ff ff85 	bl	8015ca4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015d9a:	e024      	b.n	8015de6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d008      	beq.n	8015db4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015da2:	4b13      	ldr	r3, [pc, #76]	; (8015df0 <prvProcessTimerOrBlockTask+0x90>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d101      	bne.n	8015db0 <prvProcessTimerOrBlockTask+0x50>
 8015dac:	2301      	movs	r3, #1
 8015dae:	e000      	b.n	8015db2 <prvProcessTimerOrBlockTask+0x52>
 8015db0:	2300      	movs	r3, #0
 8015db2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015db4:	4b0f      	ldr	r3, [pc, #60]	; (8015df4 <prvProcessTimerOrBlockTask+0x94>)
 8015db6:	6818      	ldr	r0, [r3, #0]
 8015db8:	687a      	ldr	r2, [r7, #4]
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	1ad3      	subs	r3, r2, r3
 8015dbe:	683a      	ldr	r2, [r7, #0]
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	f7fe fdcf 	bl	8014964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015dc6:	f7ff f965 	bl	8015094 <xTaskResumeAll>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d10a      	bne.n	8015de6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015dd0:	4b09      	ldr	r3, [pc, #36]	; (8015df8 <prvProcessTimerOrBlockTask+0x98>)
 8015dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dd6:	601a      	str	r2, [r3, #0]
 8015dd8:	f3bf 8f4f 	dsb	sy
 8015ddc:	f3bf 8f6f 	isb	sy
}
 8015de0:	e001      	b.n	8015de6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015de2:	f7ff f957 	bl	8015094 <xTaskResumeAll>
}
 8015de6:	bf00      	nop
 8015de8:	3710      	adds	r7, #16
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	24001d58 	.word	0x24001d58
 8015df4:	24001d5c 	.word	0x24001d5c
 8015df8:	e000ed04 	.word	0xe000ed04

08015dfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015dfc:	b480      	push	{r7}
 8015dfe:	b085      	sub	sp, #20
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015e04:	4b0e      	ldr	r3, [pc, #56]	; (8015e40 <prvGetNextExpireTime+0x44>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d101      	bne.n	8015e12 <prvGetNextExpireTime+0x16>
 8015e0e:	2201      	movs	r2, #1
 8015e10:	e000      	b.n	8015e14 <prvGetNextExpireTime+0x18>
 8015e12:	2200      	movs	r2, #0
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d105      	bne.n	8015e2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015e20:	4b07      	ldr	r3, [pc, #28]	; (8015e40 <prvGetNextExpireTime+0x44>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	68db      	ldr	r3, [r3, #12]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	60fb      	str	r3, [r7, #12]
 8015e2a:	e001      	b.n	8015e30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015e30:	68fb      	ldr	r3, [r7, #12]
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3714      	adds	r7, #20
 8015e36:	46bd      	mov	sp, r7
 8015e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3c:	4770      	bx	lr
 8015e3e:	bf00      	nop
 8015e40:	24001d54 	.word	0x24001d54

08015e44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b084      	sub	sp, #16
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015e4c:	f7ff f9c0 	bl	80151d0 <xTaskGetTickCount>
 8015e50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015e52:	4b0b      	ldr	r3, [pc, #44]	; (8015e80 <prvSampleTimeNow+0x3c>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	68fa      	ldr	r2, [r7, #12]
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d205      	bcs.n	8015e68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015e5c:	f000 f936 	bl	80160cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2201      	movs	r2, #1
 8015e64:	601a      	str	r2, [r3, #0]
 8015e66:	e002      	b.n	8015e6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015e6e:	4a04      	ldr	r2, [pc, #16]	; (8015e80 <prvSampleTimeNow+0x3c>)
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015e74:	68fb      	ldr	r3, [r7, #12]
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3710      	adds	r7, #16
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	24001d64 	.word	0x24001d64

08015e84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b086      	sub	sp, #24
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	607a      	str	r2, [r7, #4]
 8015e90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015e92:	2300      	movs	r3, #0
 8015e94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	68ba      	ldr	r2, [r7, #8]
 8015e9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	68fa      	ldr	r2, [r7, #12]
 8015ea0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015ea2:	68ba      	ldr	r2, [r7, #8]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	d812      	bhi.n	8015ed0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015eaa:	687a      	ldr	r2, [r7, #4]
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	1ad2      	subs	r2, r2, r3
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	699b      	ldr	r3, [r3, #24]
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	d302      	bcc.n	8015ebe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015eb8:	2301      	movs	r3, #1
 8015eba:	617b      	str	r3, [r7, #20]
 8015ebc:	e01b      	b.n	8015ef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015ebe:	4b10      	ldr	r3, [pc, #64]	; (8015f00 <prvInsertTimerInActiveList+0x7c>)
 8015ec0:	681a      	ldr	r2, [r3, #0]
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	3304      	adds	r3, #4
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	4610      	mov	r0, r2
 8015eca:	f7fd ff76 	bl	8013dba <vListInsert>
 8015ece:	e012      	b.n	8015ef6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015ed0:	687a      	ldr	r2, [r7, #4]
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d206      	bcs.n	8015ee6 <prvInsertTimerInActiveList+0x62>
 8015ed8:	68ba      	ldr	r2, [r7, #8]
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d302      	bcc.n	8015ee6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	617b      	str	r3, [r7, #20]
 8015ee4:	e007      	b.n	8015ef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015ee6:	4b07      	ldr	r3, [pc, #28]	; (8015f04 <prvInsertTimerInActiveList+0x80>)
 8015ee8:	681a      	ldr	r2, [r3, #0]
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	3304      	adds	r3, #4
 8015eee:	4619      	mov	r1, r3
 8015ef0:	4610      	mov	r0, r2
 8015ef2:	f7fd ff62 	bl	8013dba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015ef6:	697b      	ldr	r3, [r7, #20]
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3718      	adds	r7, #24
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}
 8015f00:	24001d58 	.word	0x24001d58
 8015f04:	24001d54 	.word	0x24001d54

08015f08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b08e      	sub	sp, #56	; 0x38
 8015f0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015f0e:	e0ca      	b.n	80160a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	da18      	bge.n	8015f48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015f16:	1d3b      	adds	r3, r7, #4
 8015f18:	3304      	adds	r3, #4
 8015f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d10a      	bne.n	8015f38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f26:	f383 8811 	msr	BASEPRI, r3
 8015f2a:	f3bf 8f6f 	isb	sy
 8015f2e:	f3bf 8f4f 	dsb	sy
 8015f32:	61fb      	str	r3, [r7, #28]
}
 8015f34:	bf00      	nop
 8015f36:	e7fe      	b.n	8015f36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f3e:	6850      	ldr	r0, [r2, #4]
 8015f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f42:	6892      	ldr	r2, [r2, #8]
 8015f44:	4611      	mov	r1, r2
 8015f46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	f2c0 80aa 	blt.w	80160a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f56:	695b      	ldr	r3, [r3, #20]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d004      	beq.n	8015f66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5e:	3304      	adds	r3, #4
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7fd ff63 	bl	8013e2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015f66:	463b      	mov	r3, r7
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7ff ff6b 	bl	8015e44 <prvSampleTimeNow>
 8015f6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2b09      	cmp	r3, #9
 8015f74:	f200 8097 	bhi.w	80160a6 <prvProcessReceivedCommands+0x19e>
 8015f78:	a201      	add	r2, pc, #4	; (adr r2, 8015f80 <prvProcessReceivedCommands+0x78>)
 8015f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f7e:	bf00      	nop
 8015f80:	08015fa9 	.word	0x08015fa9
 8015f84:	08015fa9 	.word	0x08015fa9
 8015f88:	08015fa9 	.word	0x08015fa9
 8015f8c:	0801601d 	.word	0x0801601d
 8015f90:	08016031 	.word	0x08016031
 8015f94:	0801607b 	.word	0x0801607b
 8015f98:	08015fa9 	.word	0x08015fa9
 8015f9c:	08015fa9 	.word	0x08015fa9
 8015fa0:	0801601d 	.word	0x0801601d
 8015fa4:	08016031 	.word	0x08016031
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fae:	f043 0301 	orr.w	r3, r3, #1
 8015fb2:	b2da      	uxtb	r2, r3
 8015fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fbe:	699b      	ldr	r3, [r3, #24]
 8015fc0:	18d1      	adds	r1, r2, r3
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fc8:	f7ff ff5c 	bl	8015e84 <prvInsertTimerInActiveList>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d069      	beq.n	80160a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd4:	6a1b      	ldr	r3, [r3, #32]
 8015fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fe0:	f003 0304 	and.w	r3, r3, #4
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d05e      	beq.n	80160a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015fe8:	68ba      	ldr	r2, [r7, #8]
 8015fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fec:	699b      	ldr	r3, [r3, #24]
 8015fee:	441a      	add	r2, r3
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	2100      	movs	r1, #0
 8015ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ffa:	f7ff fe05 	bl	8015c08 <xTimerGenericCommand>
 8015ffe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016000:	6a3b      	ldr	r3, [r7, #32]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d14f      	bne.n	80160a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8016006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801600a:	f383 8811 	msr	BASEPRI, r3
 801600e:	f3bf 8f6f 	isb	sy
 8016012:	f3bf 8f4f 	dsb	sy
 8016016:	61bb      	str	r3, [r7, #24]
}
 8016018:	bf00      	nop
 801601a:	e7fe      	b.n	801601a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801601e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016022:	f023 0301 	bic.w	r3, r3, #1
 8016026:	b2da      	uxtb	r2, r3
 8016028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801602e:	e03a      	b.n	80160a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016036:	f043 0301 	orr.w	r3, r3, #1
 801603a:	b2da      	uxtb	r2, r3
 801603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801603e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016042:	68ba      	ldr	r2, [r7, #8]
 8016044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016046:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604a:	699b      	ldr	r3, [r3, #24]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d10a      	bne.n	8016066 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8016050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016054:	f383 8811 	msr	BASEPRI, r3
 8016058:	f3bf 8f6f 	isb	sy
 801605c:	f3bf 8f4f 	dsb	sy
 8016060:	617b      	str	r3, [r7, #20]
}
 8016062:	bf00      	nop
 8016064:	e7fe      	b.n	8016064 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016068:	699a      	ldr	r2, [r3, #24]
 801606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801606c:	18d1      	adds	r1, r2, r3
 801606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016074:	f7ff ff06 	bl	8015e84 <prvInsertTimerInActiveList>
					break;
 8016078:	e015      	b.n	80160a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016080:	f003 0302 	and.w	r3, r3, #2
 8016084:	2b00      	cmp	r3, #0
 8016086:	d103      	bne.n	8016090 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801608a:	f000 fc01 	bl	8016890 <vPortFree>
 801608e:	e00a      	b.n	80160a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016096:	f023 0301 	bic.w	r3, r3, #1
 801609a:	b2da      	uxtb	r2, r3
 801609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80160a2:	e000      	b.n	80160a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80160a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80160a6:	4b08      	ldr	r3, [pc, #32]	; (80160c8 <prvProcessReceivedCommands+0x1c0>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	1d39      	adds	r1, r7, #4
 80160ac:	2200      	movs	r2, #0
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fe f9be 	bl	8014430 <xQueueReceive>
 80160b4:	4603      	mov	r3, r0
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	f47f af2a 	bne.w	8015f10 <prvProcessReceivedCommands+0x8>
	}
}
 80160bc:	bf00      	nop
 80160be:	bf00      	nop
 80160c0:	3730      	adds	r7, #48	; 0x30
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	bf00      	nop
 80160c8:	24001d5c 	.word	0x24001d5c

080160cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b088      	sub	sp, #32
 80160d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80160d2:	e048      	b.n	8016166 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80160d4:	4b2d      	ldr	r3, [pc, #180]	; (801618c <prvSwitchTimerLists+0xc0>)
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	68db      	ldr	r3, [r3, #12]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160de:	4b2b      	ldr	r3, [pc, #172]	; (801618c <prvSwitchTimerLists+0xc0>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	68db      	ldr	r3, [r3, #12]
 80160e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	3304      	adds	r3, #4
 80160ec:	4618      	mov	r0, r3
 80160ee:	f7fd fe9d 	bl	8013e2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	6a1b      	ldr	r3, [r3, #32]
 80160f6:	68f8      	ldr	r0, [r7, #12]
 80160f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016100:	f003 0304 	and.w	r3, r3, #4
 8016104:	2b00      	cmp	r3, #0
 8016106:	d02e      	beq.n	8016166 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	699b      	ldr	r3, [r3, #24]
 801610c:	693a      	ldr	r2, [r7, #16]
 801610e:	4413      	add	r3, r2
 8016110:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016112:	68ba      	ldr	r2, [r7, #8]
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	429a      	cmp	r2, r3
 8016118:	d90e      	bls.n	8016138 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	68ba      	ldr	r2, [r7, #8]
 801611e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	68fa      	ldr	r2, [r7, #12]
 8016124:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016126:	4b19      	ldr	r3, [pc, #100]	; (801618c <prvSwitchTimerLists+0xc0>)
 8016128:	681a      	ldr	r2, [r3, #0]
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	3304      	adds	r3, #4
 801612e:	4619      	mov	r1, r3
 8016130:	4610      	mov	r0, r2
 8016132:	f7fd fe42 	bl	8013dba <vListInsert>
 8016136:	e016      	b.n	8016166 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016138:	2300      	movs	r3, #0
 801613a:	9300      	str	r3, [sp, #0]
 801613c:	2300      	movs	r3, #0
 801613e:	693a      	ldr	r2, [r7, #16]
 8016140:	2100      	movs	r1, #0
 8016142:	68f8      	ldr	r0, [r7, #12]
 8016144:	f7ff fd60 	bl	8015c08 <xTimerGenericCommand>
 8016148:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d10a      	bne.n	8016166 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8016150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016154:	f383 8811 	msr	BASEPRI, r3
 8016158:	f3bf 8f6f 	isb	sy
 801615c:	f3bf 8f4f 	dsb	sy
 8016160:	603b      	str	r3, [r7, #0]
}
 8016162:	bf00      	nop
 8016164:	e7fe      	b.n	8016164 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016166:	4b09      	ldr	r3, [pc, #36]	; (801618c <prvSwitchTimerLists+0xc0>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d1b1      	bne.n	80160d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016170:	4b06      	ldr	r3, [pc, #24]	; (801618c <prvSwitchTimerLists+0xc0>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016176:	4b06      	ldr	r3, [pc, #24]	; (8016190 <prvSwitchTimerLists+0xc4>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	4a04      	ldr	r2, [pc, #16]	; (801618c <prvSwitchTimerLists+0xc0>)
 801617c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801617e:	4a04      	ldr	r2, [pc, #16]	; (8016190 <prvSwitchTimerLists+0xc4>)
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	6013      	str	r3, [r2, #0]
}
 8016184:	bf00      	nop
 8016186:	3718      	adds	r7, #24
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}
 801618c:	24001d54 	.word	0x24001d54
 8016190:	24001d58 	.word	0x24001d58

08016194 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b082      	sub	sp, #8
 8016198:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801619a:	f000 f98b 	bl	80164b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801619e:	4b15      	ldr	r3, [pc, #84]	; (80161f4 <prvCheckForValidListAndQueue+0x60>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d120      	bne.n	80161e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80161a6:	4814      	ldr	r0, [pc, #80]	; (80161f8 <prvCheckForValidListAndQueue+0x64>)
 80161a8:	f7fd fdb6 	bl	8013d18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80161ac:	4813      	ldr	r0, [pc, #76]	; (80161fc <prvCheckForValidListAndQueue+0x68>)
 80161ae:	f7fd fdb3 	bl	8013d18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80161b2:	4b13      	ldr	r3, [pc, #76]	; (8016200 <prvCheckForValidListAndQueue+0x6c>)
 80161b4:	4a10      	ldr	r2, [pc, #64]	; (80161f8 <prvCheckForValidListAndQueue+0x64>)
 80161b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80161b8:	4b12      	ldr	r3, [pc, #72]	; (8016204 <prvCheckForValidListAndQueue+0x70>)
 80161ba:	4a10      	ldr	r2, [pc, #64]	; (80161fc <prvCheckForValidListAndQueue+0x68>)
 80161bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80161be:	2300      	movs	r3, #0
 80161c0:	9300      	str	r3, [sp, #0]
 80161c2:	4b11      	ldr	r3, [pc, #68]	; (8016208 <prvCheckForValidListAndQueue+0x74>)
 80161c4:	4a11      	ldr	r2, [pc, #68]	; (801620c <prvCheckForValidListAndQueue+0x78>)
 80161c6:	2110      	movs	r1, #16
 80161c8:	200a      	movs	r0, #10
 80161ca:	f7fd fec1 	bl	8013f50 <xQueueGenericCreateStatic>
 80161ce:	4603      	mov	r3, r0
 80161d0:	4a08      	ldr	r2, [pc, #32]	; (80161f4 <prvCheckForValidListAndQueue+0x60>)
 80161d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80161d4:	4b07      	ldr	r3, [pc, #28]	; (80161f4 <prvCheckForValidListAndQueue+0x60>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d005      	beq.n	80161e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80161dc:	4b05      	ldr	r3, [pc, #20]	; (80161f4 <prvCheckForValidListAndQueue+0x60>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	490b      	ldr	r1, [pc, #44]	; (8016210 <prvCheckForValidListAndQueue+0x7c>)
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7fe fb94 	bl	8014910 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80161e8:	f000 f994 	bl	8016514 <vPortExitCritical>
}
 80161ec:	bf00      	nop
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	24001d5c 	.word	0x24001d5c
 80161f8:	24001d2c 	.word	0x24001d2c
 80161fc:	24001d40 	.word	0x24001d40
 8016200:	24001d54 	.word	0x24001d54
 8016204:	24001d58 	.word	0x24001d58
 8016208:	24001e08 	.word	0x24001e08
 801620c:	24001d68 	.word	0x24001d68
 8016210:	080177e8 	.word	0x080177e8

08016214 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016214:	b580      	push	{r7, lr}
 8016216:	b08a      	sub	sp, #40	; 0x28
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	607a      	str	r2, [r7, #4]
 8016220:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8016222:	f06f 0301 	mvn.w	r3, #1
 8016226:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016234:	4b06      	ldr	r3, [pc, #24]	; (8016250 <xTimerPendFunctionCallFromISR+0x3c>)
 8016236:	6818      	ldr	r0, [r3, #0]
 8016238:	f107 0114 	add.w	r1, r7, #20
 801623c:	2300      	movs	r3, #0
 801623e:	683a      	ldr	r2, [r7, #0]
 8016240:	f7fe f85a 	bl	80142f8 <xQueueGenericSendFromISR>
 8016244:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8016246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8016248:	4618      	mov	r0, r3
 801624a:	3728      	adds	r7, #40	; 0x28
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}
 8016250:	24001d5c 	.word	0x24001d5c

08016254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016254:	b480      	push	{r7}
 8016256:	b085      	sub	sp, #20
 8016258:	af00      	add	r7, sp, #0
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	3b04      	subs	r3, #4
 8016264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801626c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	3b04      	subs	r3, #4
 8016272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	f023 0201 	bic.w	r2, r3, #1
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	3b04      	subs	r3, #4
 8016282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016284:	4a0c      	ldr	r2, [pc, #48]	; (80162b8 <pxPortInitialiseStack+0x64>)
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	3b14      	subs	r3, #20
 801628e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	3b04      	subs	r3, #4
 801629a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	f06f 0202 	mvn.w	r2, #2
 80162a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	3b20      	subs	r3, #32
 80162a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80162aa:	68fb      	ldr	r3, [r7, #12]
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3714      	adds	r7, #20
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr
 80162b8:	080162bd 	.word	0x080162bd

080162bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80162bc:	b480      	push	{r7}
 80162be:	b085      	sub	sp, #20
 80162c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80162c2:	2300      	movs	r3, #0
 80162c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80162c6:	4b12      	ldr	r3, [pc, #72]	; (8016310 <prvTaskExitError+0x54>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80162ce:	d00a      	beq.n	80162e6 <prvTaskExitError+0x2a>
	__asm volatile
 80162d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d4:	f383 8811 	msr	BASEPRI, r3
 80162d8:	f3bf 8f6f 	isb	sy
 80162dc:	f3bf 8f4f 	dsb	sy
 80162e0:	60fb      	str	r3, [r7, #12]
}
 80162e2:	bf00      	nop
 80162e4:	e7fe      	b.n	80162e4 <prvTaskExitError+0x28>
	__asm volatile
 80162e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ea:	f383 8811 	msr	BASEPRI, r3
 80162ee:	f3bf 8f6f 	isb	sy
 80162f2:	f3bf 8f4f 	dsb	sy
 80162f6:	60bb      	str	r3, [r7, #8]
}
 80162f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80162fa:	bf00      	nop
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d0fc      	beq.n	80162fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016302:	bf00      	nop
 8016304:	bf00      	nop
 8016306:	3714      	adds	r7, #20
 8016308:	46bd      	mov	sp, r7
 801630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630e:	4770      	bx	lr
 8016310:	240000a0 	.word	0x240000a0
	...

08016320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016320:	4b07      	ldr	r3, [pc, #28]	; (8016340 <pxCurrentTCBConst2>)
 8016322:	6819      	ldr	r1, [r3, #0]
 8016324:	6808      	ldr	r0, [r1, #0]
 8016326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801632a:	f380 8809 	msr	PSP, r0
 801632e:	f3bf 8f6f 	isb	sy
 8016332:	f04f 0000 	mov.w	r0, #0
 8016336:	f380 8811 	msr	BASEPRI, r0
 801633a:	4770      	bx	lr
 801633c:	f3af 8000 	nop.w

08016340 <pxCurrentTCBConst2>:
 8016340:	2400182c 	.word	0x2400182c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016344:	bf00      	nop
 8016346:	bf00      	nop

08016348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016348:	4808      	ldr	r0, [pc, #32]	; (801636c <prvPortStartFirstTask+0x24>)
 801634a:	6800      	ldr	r0, [r0, #0]
 801634c:	6800      	ldr	r0, [r0, #0]
 801634e:	f380 8808 	msr	MSP, r0
 8016352:	f04f 0000 	mov.w	r0, #0
 8016356:	f380 8814 	msr	CONTROL, r0
 801635a:	b662      	cpsie	i
 801635c:	b661      	cpsie	f
 801635e:	f3bf 8f4f 	dsb	sy
 8016362:	f3bf 8f6f 	isb	sy
 8016366:	df00      	svc	0
 8016368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801636a:	bf00      	nop
 801636c:	e000ed08 	.word	0xe000ed08

08016370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b086      	sub	sp, #24
 8016374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016376:	4b46      	ldr	r3, [pc, #280]	; (8016490 <xPortStartScheduler+0x120>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	4a46      	ldr	r2, [pc, #280]	; (8016494 <xPortStartScheduler+0x124>)
 801637c:	4293      	cmp	r3, r2
 801637e:	d10a      	bne.n	8016396 <xPortStartScheduler+0x26>
	__asm volatile
 8016380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016384:	f383 8811 	msr	BASEPRI, r3
 8016388:	f3bf 8f6f 	isb	sy
 801638c:	f3bf 8f4f 	dsb	sy
 8016390:	613b      	str	r3, [r7, #16]
}
 8016392:	bf00      	nop
 8016394:	e7fe      	b.n	8016394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016396:	4b3e      	ldr	r3, [pc, #248]	; (8016490 <xPortStartScheduler+0x120>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	4a3f      	ldr	r2, [pc, #252]	; (8016498 <xPortStartScheduler+0x128>)
 801639c:	4293      	cmp	r3, r2
 801639e:	d10a      	bne.n	80163b6 <xPortStartScheduler+0x46>
	__asm volatile
 80163a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a4:	f383 8811 	msr	BASEPRI, r3
 80163a8:	f3bf 8f6f 	isb	sy
 80163ac:	f3bf 8f4f 	dsb	sy
 80163b0:	60fb      	str	r3, [r7, #12]
}
 80163b2:	bf00      	nop
 80163b4:	e7fe      	b.n	80163b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80163b6:	4b39      	ldr	r3, [pc, #228]	; (801649c <xPortStartScheduler+0x12c>)
 80163b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	22ff      	movs	r2, #255	; 0xff
 80163c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80163c8:	697b      	ldr	r3, [r7, #20]
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80163d0:	78fb      	ldrb	r3, [r7, #3]
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80163d8:	b2da      	uxtb	r2, r3
 80163da:	4b31      	ldr	r3, [pc, #196]	; (80164a0 <xPortStartScheduler+0x130>)
 80163dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80163de:	4b31      	ldr	r3, [pc, #196]	; (80164a4 <xPortStartScheduler+0x134>)
 80163e0:	2207      	movs	r2, #7
 80163e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80163e4:	e009      	b.n	80163fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80163e6:	4b2f      	ldr	r3, [pc, #188]	; (80164a4 <xPortStartScheduler+0x134>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	3b01      	subs	r3, #1
 80163ec:	4a2d      	ldr	r2, [pc, #180]	; (80164a4 <xPortStartScheduler+0x134>)
 80163ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80163f0:	78fb      	ldrb	r3, [r7, #3]
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80163fa:	78fb      	ldrb	r3, [r7, #3]
 80163fc:	b2db      	uxtb	r3, r3
 80163fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016402:	2b80      	cmp	r3, #128	; 0x80
 8016404:	d0ef      	beq.n	80163e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016406:	4b27      	ldr	r3, [pc, #156]	; (80164a4 <xPortStartScheduler+0x134>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	f1c3 0307 	rsb	r3, r3, #7
 801640e:	2b04      	cmp	r3, #4
 8016410:	d00a      	beq.n	8016428 <xPortStartScheduler+0xb8>
	__asm volatile
 8016412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016416:	f383 8811 	msr	BASEPRI, r3
 801641a:	f3bf 8f6f 	isb	sy
 801641e:	f3bf 8f4f 	dsb	sy
 8016422:	60bb      	str	r3, [r7, #8]
}
 8016424:	bf00      	nop
 8016426:	e7fe      	b.n	8016426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016428:	4b1e      	ldr	r3, [pc, #120]	; (80164a4 <xPortStartScheduler+0x134>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	021b      	lsls	r3, r3, #8
 801642e:	4a1d      	ldr	r2, [pc, #116]	; (80164a4 <xPortStartScheduler+0x134>)
 8016430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016432:	4b1c      	ldr	r3, [pc, #112]	; (80164a4 <xPortStartScheduler+0x134>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801643a:	4a1a      	ldr	r2, [pc, #104]	; (80164a4 <xPortStartScheduler+0x134>)
 801643c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	b2da      	uxtb	r2, r3
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016446:	4b18      	ldr	r3, [pc, #96]	; (80164a8 <xPortStartScheduler+0x138>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	4a17      	ldr	r2, [pc, #92]	; (80164a8 <xPortStartScheduler+0x138>)
 801644c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016452:	4b15      	ldr	r3, [pc, #84]	; (80164a8 <xPortStartScheduler+0x138>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	4a14      	ldr	r2, [pc, #80]	; (80164a8 <xPortStartScheduler+0x138>)
 8016458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801645c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801645e:	f000 f8dd 	bl	801661c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016462:	4b12      	ldr	r3, [pc, #72]	; (80164ac <xPortStartScheduler+0x13c>)
 8016464:	2200      	movs	r2, #0
 8016466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016468:	f000 f8fc 	bl	8016664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801646c:	4b10      	ldr	r3, [pc, #64]	; (80164b0 <xPortStartScheduler+0x140>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	4a0f      	ldr	r2, [pc, #60]	; (80164b0 <xPortStartScheduler+0x140>)
 8016472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016478:	f7ff ff66 	bl	8016348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801647c:	f7fe ff7a 	bl	8015374 <vTaskSwitchContext>
	prvTaskExitError();
 8016480:	f7ff ff1c 	bl	80162bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016484:	2300      	movs	r3, #0
}
 8016486:	4618      	mov	r0, r3
 8016488:	3718      	adds	r7, #24
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	e000ed00 	.word	0xe000ed00
 8016494:	410fc271 	.word	0x410fc271
 8016498:	410fc270 	.word	0x410fc270
 801649c:	e000e400 	.word	0xe000e400
 80164a0:	24001e58 	.word	0x24001e58
 80164a4:	24001e5c 	.word	0x24001e5c
 80164a8:	e000ed20 	.word	0xe000ed20
 80164ac:	240000a0 	.word	0x240000a0
 80164b0:	e000ef34 	.word	0xe000ef34

080164b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80164b4:	b480      	push	{r7}
 80164b6:	b083      	sub	sp, #12
 80164b8:	af00      	add	r7, sp, #0
	__asm volatile
 80164ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164be:	f383 8811 	msr	BASEPRI, r3
 80164c2:	f3bf 8f6f 	isb	sy
 80164c6:	f3bf 8f4f 	dsb	sy
 80164ca:	607b      	str	r3, [r7, #4]
}
 80164cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80164ce:	4b0f      	ldr	r3, [pc, #60]	; (801650c <vPortEnterCritical+0x58>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	3301      	adds	r3, #1
 80164d4:	4a0d      	ldr	r2, [pc, #52]	; (801650c <vPortEnterCritical+0x58>)
 80164d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80164d8:	4b0c      	ldr	r3, [pc, #48]	; (801650c <vPortEnterCritical+0x58>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b01      	cmp	r3, #1
 80164de:	d10f      	bne.n	8016500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80164e0:	4b0b      	ldr	r3, [pc, #44]	; (8016510 <vPortEnterCritical+0x5c>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	b2db      	uxtb	r3, r3
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d00a      	beq.n	8016500 <vPortEnterCritical+0x4c>
	__asm volatile
 80164ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ee:	f383 8811 	msr	BASEPRI, r3
 80164f2:	f3bf 8f6f 	isb	sy
 80164f6:	f3bf 8f4f 	dsb	sy
 80164fa:	603b      	str	r3, [r7, #0]
}
 80164fc:	bf00      	nop
 80164fe:	e7fe      	b.n	80164fe <vPortEnterCritical+0x4a>
	}
}
 8016500:	bf00      	nop
 8016502:	370c      	adds	r7, #12
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr
 801650c:	240000a0 	.word	0x240000a0
 8016510:	e000ed04 	.word	0xe000ed04

08016514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016514:	b480      	push	{r7}
 8016516:	b083      	sub	sp, #12
 8016518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801651a:	4b12      	ldr	r3, [pc, #72]	; (8016564 <vPortExitCritical+0x50>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d10a      	bne.n	8016538 <vPortExitCritical+0x24>
	__asm volatile
 8016522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016526:	f383 8811 	msr	BASEPRI, r3
 801652a:	f3bf 8f6f 	isb	sy
 801652e:	f3bf 8f4f 	dsb	sy
 8016532:	607b      	str	r3, [r7, #4]
}
 8016534:	bf00      	nop
 8016536:	e7fe      	b.n	8016536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016538:	4b0a      	ldr	r3, [pc, #40]	; (8016564 <vPortExitCritical+0x50>)
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	3b01      	subs	r3, #1
 801653e:	4a09      	ldr	r2, [pc, #36]	; (8016564 <vPortExitCritical+0x50>)
 8016540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016542:	4b08      	ldr	r3, [pc, #32]	; (8016564 <vPortExitCritical+0x50>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d105      	bne.n	8016556 <vPortExitCritical+0x42>
 801654a:	2300      	movs	r3, #0
 801654c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	f383 8811 	msr	BASEPRI, r3
}
 8016554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016556:	bf00      	nop
 8016558:	370c      	adds	r7, #12
 801655a:	46bd      	mov	sp, r7
 801655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016560:	4770      	bx	lr
 8016562:	bf00      	nop
 8016564:	240000a0 	.word	0x240000a0
	...

08016570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016570:	f3ef 8009 	mrs	r0, PSP
 8016574:	f3bf 8f6f 	isb	sy
 8016578:	4b15      	ldr	r3, [pc, #84]	; (80165d0 <pxCurrentTCBConst>)
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	f01e 0f10 	tst.w	lr, #16
 8016580:	bf08      	it	eq
 8016582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801658a:	6010      	str	r0, [r2, #0]
 801658c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016594:	f380 8811 	msr	BASEPRI, r0
 8016598:	f3bf 8f4f 	dsb	sy
 801659c:	f3bf 8f6f 	isb	sy
 80165a0:	f7fe fee8 	bl	8015374 <vTaskSwitchContext>
 80165a4:	f04f 0000 	mov.w	r0, #0
 80165a8:	f380 8811 	msr	BASEPRI, r0
 80165ac:	bc09      	pop	{r0, r3}
 80165ae:	6819      	ldr	r1, [r3, #0]
 80165b0:	6808      	ldr	r0, [r1, #0]
 80165b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b6:	f01e 0f10 	tst.w	lr, #16
 80165ba:	bf08      	it	eq
 80165bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80165c0:	f380 8809 	msr	PSP, r0
 80165c4:	f3bf 8f6f 	isb	sy
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop
 80165cc:	f3af 8000 	nop.w

080165d0 <pxCurrentTCBConst>:
 80165d0:	2400182c 	.word	0x2400182c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80165d4:	bf00      	nop
 80165d6:	bf00      	nop

080165d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b082      	sub	sp, #8
 80165dc:	af00      	add	r7, sp, #0
	__asm volatile
 80165de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165e2:	f383 8811 	msr	BASEPRI, r3
 80165e6:	f3bf 8f6f 	isb	sy
 80165ea:	f3bf 8f4f 	dsb	sy
 80165ee:	607b      	str	r3, [r7, #4]
}
 80165f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80165f2:	f7fe fdfd 	bl	80151f0 <xTaskIncrementTick>
 80165f6:	4603      	mov	r3, r0
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d003      	beq.n	8016604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80165fc:	4b06      	ldr	r3, [pc, #24]	; (8016618 <xPortSysTickHandler+0x40>)
 80165fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016602:	601a      	str	r2, [r3, #0]
 8016604:	2300      	movs	r3, #0
 8016606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	f383 8811 	msr	BASEPRI, r3
}
 801660e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016610:	bf00      	nop
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	e000ed04 	.word	0xe000ed04

0801661c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801661c:	b480      	push	{r7}
 801661e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016620:	4b0b      	ldr	r3, [pc, #44]	; (8016650 <vPortSetupTimerInterrupt+0x34>)
 8016622:	2200      	movs	r2, #0
 8016624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016626:	4b0b      	ldr	r3, [pc, #44]	; (8016654 <vPortSetupTimerInterrupt+0x38>)
 8016628:	2200      	movs	r2, #0
 801662a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801662c:	4b0a      	ldr	r3, [pc, #40]	; (8016658 <vPortSetupTimerInterrupt+0x3c>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4a0a      	ldr	r2, [pc, #40]	; (801665c <vPortSetupTimerInterrupt+0x40>)
 8016632:	fba2 2303 	umull	r2, r3, r2, r3
 8016636:	099b      	lsrs	r3, r3, #6
 8016638:	4a09      	ldr	r2, [pc, #36]	; (8016660 <vPortSetupTimerInterrupt+0x44>)
 801663a:	3b01      	subs	r3, #1
 801663c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801663e:	4b04      	ldr	r3, [pc, #16]	; (8016650 <vPortSetupTimerInterrupt+0x34>)
 8016640:	2207      	movs	r2, #7
 8016642:	601a      	str	r2, [r3, #0]
}
 8016644:	bf00      	nop
 8016646:	46bd      	mov	sp, r7
 8016648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664c:	4770      	bx	lr
 801664e:	bf00      	nop
 8016650:	e000e010 	.word	0xe000e010
 8016654:	e000e018 	.word	0xe000e018
 8016658:	24000090 	.word	0x24000090
 801665c:	10624dd3 	.word	0x10624dd3
 8016660:	e000e014 	.word	0xe000e014

08016664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016674 <vPortEnableVFP+0x10>
 8016668:	6801      	ldr	r1, [r0, #0]
 801666a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801666e:	6001      	str	r1, [r0, #0]
 8016670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016672:	bf00      	nop
 8016674:	e000ed88 	.word	0xe000ed88

08016678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016678:	b480      	push	{r7}
 801667a:	b085      	sub	sp, #20
 801667c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801667e:	f3ef 8305 	mrs	r3, IPSR
 8016682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	2b0f      	cmp	r3, #15
 8016688:	d914      	bls.n	80166b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801668a:	4a17      	ldr	r2, [pc, #92]	; (80166e8 <vPortValidateInterruptPriority+0x70>)
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	4413      	add	r3, r2
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016694:	4b15      	ldr	r3, [pc, #84]	; (80166ec <vPortValidateInterruptPriority+0x74>)
 8016696:	781b      	ldrb	r3, [r3, #0]
 8016698:	7afa      	ldrb	r2, [r7, #11]
 801669a:	429a      	cmp	r2, r3
 801669c:	d20a      	bcs.n	80166b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a2:	f383 8811 	msr	BASEPRI, r3
 80166a6:	f3bf 8f6f 	isb	sy
 80166aa:	f3bf 8f4f 	dsb	sy
 80166ae:	607b      	str	r3, [r7, #4]
}
 80166b0:	bf00      	nop
 80166b2:	e7fe      	b.n	80166b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80166b4:	4b0e      	ldr	r3, [pc, #56]	; (80166f0 <vPortValidateInterruptPriority+0x78>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80166bc:	4b0d      	ldr	r3, [pc, #52]	; (80166f4 <vPortValidateInterruptPriority+0x7c>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	429a      	cmp	r2, r3
 80166c2:	d90a      	bls.n	80166da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80166c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c8:	f383 8811 	msr	BASEPRI, r3
 80166cc:	f3bf 8f6f 	isb	sy
 80166d0:	f3bf 8f4f 	dsb	sy
 80166d4:	603b      	str	r3, [r7, #0]
}
 80166d6:	bf00      	nop
 80166d8:	e7fe      	b.n	80166d8 <vPortValidateInterruptPriority+0x60>
	}
 80166da:	bf00      	nop
 80166dc:	3714      	adds	r7, #20
 80166de:	46bd      	mov	sp, r7
 80166e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e4:	4770      	bx	lr
 80166e6:	bf00      	nop
 80166e8:	e000e3f0 	.word	0xe000e3f0
 80166ec:	24001e58 	.word	0x24001e58
 80166f0:	e000ed0c 	.word	0xe000ed0c
 80166f4:	24001e5c 	.word	0x24001e5c

080166f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b08a      	sub	sp, #40	; 0x28
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016700:	2300      	movs	r3, #0
 8016702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016704:	f7fe fcb8 	bl	8015078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016708:	4b5b      	ldr	r3, [pc, #364]	; (8016878 <pvPortMalloc+0x180>)
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d101      	bne.n	8016714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016710:	f000 f920 	bl	8016954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016714:	4b59      	ldr	r3, [pc, #356]	; (801687c <pvPortMalloc+0x184>)
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	4013      	ands	r3, r2
 801671c:	2b00      	cmp	r3, #0
 801671e:	f040 8093 	bne.w	8016848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d01d      	beq.n	8016764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016728:	2208      	movs	r2, #8
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	4413      	add	r3, r2
 801672e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	f003 0307 	and.w	r3, r3, #7
 8016736:	2b00      	cmp	r3, #0
 8016738:	d014      	beq.n	8016764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f023 0307 	bic.w	r3, r3, #7
 8016740:	3308      	adds	r3, #8
 8016742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f003 0307 	and.w	r3, r3, #7
 801674a:	2b00      	cmp	r3, #0
 801674c:	d00a      	beq.n	8016764 <pvPortMalloc+0x6c>
	__asm volatile
 801674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016752:	f383 8811 	msr	BASEPRI, r3
 8016756:	f3bf 8f6f 	isb	sy
 801675a:	f3bf 8f4f 	dsb	sy
 801675e:	617b      	str	r3, [r7, #20]
}
 8016760:	bf00      	nop
 8016762:	e7fe      	b.n	8016762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d06e      	beq.n	8016848 <pvPortMalloc+0x150>
 801676a:	4b45      	ldr	r3, [pc, #276]	; (8016880 <pvPortMalloc+0x188>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	687a      	ldr	r2, [r7, #4]
 8016770:	429a      	cmp	r2, r3
 8016772:	d869      	bhi.n	8016848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016774:	4b43      	ldr	r3, [pc, #268]	; (8016884 <pvPortMalloc+0x18c>)
 8016776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016778:	4b42      	ldr	r3, [pc, #264]	; (8016884 <pvPortMalloc+0x18c>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801677e:	e004      	b.n	801678a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801678c:	685b      	ldr	r3, [r3, #4]
 801678e:	687a      	ldr	r2, [r7, #4]
 8016790:	429a      	cmp	r2, r3
 8016792:	d903      	bls.n	801679c <pvPortMalloc+0xa4>
 8016794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d1f1      	bne.n	8016780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801679c:	4b36      	ldr	r3, [pc, #216]	; (8016878 <pvPortMalloc+0x180>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d050      	beq.n	8016848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80167a6:	6a3b      	ldr	r3, [r7, #32]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	2208      	movs	r2, #8
 80167ac:	4413      	add	r3, r2
 80167ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80167b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b2:	681a      	ldr	r2, [r3, #0]
 80167b4:	6a3b      	ldr	r3, [r7, #32]
 80167b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80167b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ba:	685a      	ldr	r2, [r3, #4]
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	1ad2      	subs	r2, r2, r3
 80167c0:	2308      	movs	r3, #8
 80167c2:	005b      	lsls	r3, r3, #1
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d91f      	bls.n	8016808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80167c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	4413      	add	r3, r2
 80167ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80167d0:	69bb      	ldr	r3, [r7, #24]
 80167d2:	f003 0307 	and.w	r3, r3, #7
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d00a      	beq.n	80167f0 <pvPortMalloc+0xf8>
	__asm volatile
 80167da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167de:	f383 8811 	msr	BASEPRI, r3
 80167e2:	f3bf 8f6f 	isb	sy
 80167e6:	f3bf 8f4f 	dsb	sy
 80167ea:	613b      	str	r3, [r7, #16]
}
 80167ec:	bf00      	nop
 80167ee:	e7fe      	b.n	80167ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80167f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f2:	685a      	ldr	r2, [r3, #4]
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	1ad2      	subs	r2, r2, r3
 80167f8:	69bb      	ldr	r3, [r7, #24]
 80167fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80167fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016802:	69b8      	ldr	r0, [r7, #24]
 8016804:	f000 f908 	bl	8016a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016808:	4b1d      	ldr	r3, [pc, #116]	; (8016880 <pvPortMalloc+0x188>)
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	1ad3      	subs	r3, r2, r3
 8016812:	4a1b      	ldr	r2, [pc, #108]	; (8016880 <pvPortMalloc+0x188>)
 8016814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016816:	4b1a      	ldr	r3, [pc, #104]	; (8016880 <pvPortMalloc+0x188>)
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	4b1b      	ldr	r3, [pc, #108]	; (8016888 <pvPortMalloc+0x190>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	429a      	cmp	r2, r3
 8016820:	d203      	bcs.n	801682a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016822:	4b17      	ldr	r3, [pc, #92]	; (8016880 <pvPortMalloc+0x188>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	4a18      	ldr	r2, [pc, #96]	; (8016888 <pvPortMalloc+0x190>)
 8016828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801682c:	685a      	ldr	r2, [r3, #4]
 801682e:	4b13      	ldr	r3, [pc, #76]	; (801687c <pvPortMalloc+0x184>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	431a      	orrs	r2, r3
 8016834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801683a:	2200      	movs	r2, #0
 801683c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801683e:	4b13      	ldr	r3, [pc, #76]	; (801688c <pvPortMalloc+0x194>)
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	3301      	adds	r3, #1
 8016844:	4a11      	ldr	r2, [pc, #68]	; (801688c <pvPortMalloc+0x194>)
 8016846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016848:	f7fe fc24 	bl	8015094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	f003 0307 	and.w	r3, r3, #7
 8016852:	2b00      	cmp	r3, #0
 8016854:	d00a      	beq.n	801686c <pvPortMalloc+0x174>
	__asm volatile
 8016856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801685a:	f383 8811 	msr	BASEPRI, r3
 801685e:	f3bf 8f6f 	isb	sy
 8016862:	f3bf 8f4f 	dsb	sy
 8016866:	60fb      	str	r3, [r7, #12]
}
 8016868:	bf00      	nop
 801686a:	e7fe      	b.n	801686a <pvPortMalloc+0x172>
	return pvReturn;
 801686c:	69fb      	ldr	r3, [r7, #28]
}
 801686e:	4618      	mov	r0, r3
 8016870:	3728      	adds	r7, #40	; 0x28
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	24005a68 	.word	0x24005a68
 801687c:	24005a7c 	.word	0x24005a7c
 8016880:	24005a6c 	.word	0x24005a6c
 8016884:	24005a60 	.word	0x24005a60
 8016888:	24005a70 	.word	0x24005a70
 801688c:	24005a74 	.word	0x24005a74

08016890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b086      	sub	sp, #24
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d04d      	beq.n	801693e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80168a2:	2308      	movs	r3, #8
 80168a4:	425b      	negs	r3, r3
 80168a6:	697a      	ldr	r2, [r7, #20]
 80168a8:	4413      	add	r3, r2
 80168aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	685a      	ldr	r2, [r3, #4]
 80168b4:	4b24      	ldr	r3, [pc, #144]	; (8016948 <vPortFree+0xb8>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	4013      	ands	r3, r2
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d10a      	bne.n	80168d4 <vPortFree+0x44>
	__asm volatile
 80168be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c2:	f383 8811 	msr	BASEPRI, r3
 80168c6:	f3bf 8f6f 	isb	sy
 80168ca:	f3bf 8f4f 	dsb	sy
 80168ce:	60fb      	str	r3, [r7, #12]
}
 80168d0:	bf00      	nop
 80168d2:	e7fe      	b.n	80168d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80168d4:	693b      	ldr	r3, [r7, #16]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d00a      	beq.n	80168f2 <vPortFree+0x62>
	__asm volatile
 80168dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e0:	f383 8811 	msr	BASEPRI, r3
 80168e4:	f3bf 8f6f 	isb	sy
 80168e8:	f3bf 8f4f 	dsb	sy
 80168ec:	60bb      	str	r3, [r7, #8]
}
 80168ee:	bf00      	nop
 80168f0:	e7fe      	b.n	80168f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80168f2:	693b      	ldr	r3, [r7, #16]
 80168f4:	685a      	ldr	r2, [r3, #4]
 80168f6:	4b14      	ldr	r3, [pc, #80]	; (8016948 <vPortFree+0xb8>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	4013      	ands	r3, r2
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d01e      	beq.n	801693e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d11a      	bne.n	801693e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	685a      	ldr	r2, [r3, #4]
 801690c:	4b0e      	ldr	r3, [pc, #56]	; (8016948 <vPortFree+0xb8>)
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	43db      	mvns	r3, r3
 8016912:	401a      	ands	r2, r3
 8016914:	693b      	ldr	r3, [r7, #16]
 8016916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016918:	f7fe fbae 	bl	8015078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	685a      	ldr	r2, [r3, #4]
 8016920:	4b0a      	ldr	r3, [pc, #40]	; (801694c <vPortFree+0xbc>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	4413      	add	r3, r2
 8016926:	4a09      	ldr	r2, [pc, #36]	; (801694c <vPortFree+0xbc>)
 8016928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801692a:	6938      	ldr	r0, [r7, #16]
 801692c:	f000 f874 	bl	8016a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016930:	4b07      	ldr	r3, [pc, #28]	; (8016950 <vPortFree+0xc0>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	3301      	adds	r3, #1
 8016936:	4a06      	ldr	r2, [pc, #24]	; (8016950 <vPortFree+0xc0>)
 8016938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801693a:	f7fe fbab 	bl	8015094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801693e:	bf00      	nop
 8016940:	3718      	adds	r7, #24
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop
 8016948:	24005a7c 	.word	0x24005a7c
 801694c:	24005a6c 	.word	0x24005a6c
 8016950:	24005a78 	.word	0x24005a78

08016954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016954:	b480      	push	{r7}
 8016956:	b085      	sub	sp, #20
 8016958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801695a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801695e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016960:	4b27      	ldr	r3, [pc, #156]	; (8016a00 <prvHeapInit+0xac>)
 8016962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	f003 0307 	and.w	r3, r3, #7
 801696a:	2b00      	cmp	r3, #0
 801696c:	d00c      	beq.n	8016988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	3307      	adds	r3, #7
 8016972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	f023 0307 	bic.w	r3, r3, #7
 801697a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801697c:	68ba      	ldr	r2, [r7, #8]
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	1ad3      	subs	r3, r2, r3
 8016982:	4a1f      	ldr	r2, [pc, #124]	; (8016a00 <prvHeapInit+0xac>)
 8016984:	4413      	add	r3, r2
 8016986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801698c:	4a1d      	ldr	r2, [pc, #116]	; (8016a04 <prvHeapInit+0xb0>)
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016992:	4b1c      	ldr	r3, [pc, #112]	; (8016a04 <prvHeapInit+0xb0>)
 8016994:	2200      	movs	r2, #0
 8016996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	68ba      	ldr	r2, [r7, #8]
 801699c:	4413      	add	r3, r2
 801699e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80169a0:	2208      	movs	r2, #8
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	1a9b      	subs	r3, r3, r2
 80169a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	f023 0307 	bic.w	r3, r3, #7
 80169ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	4a15      	ldr	r2, [pc, #84]	; (8016a08 <prvHeapInit+0xb4>)
 80169b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80169b6:	4b14      	ldr	r3, [pc, #80]	; (8016a08 <prvHeapInit+0xb4>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	2200      	movs	r2, #0
 80169bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80169be:	4b12      	ldr	r3, [pc, #72]	; (8016a08 <prvHeapInit+0xb4>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	2200      	movs	r2, #0
 80169c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	68fa      	ldr	r2, [r7, #12]
 80169ce:	1ad2      	subs	r2, r2, r3
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80169d4:	4b0c      	ldr	r3, [pc, #48]	; (8016a08 <prvHeapInit+0xb4>)
 80169d6:	681a      	ldr	r2, [r3, #0]
 80169d8:	683b      	ldr	r3, [r7, #0]
 80169da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	4a0a      	ldr	r2, [pc, #40]	; (8016a0c <prvHeapInit+0xb8>)
 80169e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	685b      	ldr	r3, [r3, #4]
 80169e8:	4a09      	ldr	r2, [pc, #36]	; (8016a10 <prvHeapInit+0xbc>)
 80169ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80169ec:	4b09      	ldr	r3, [pc, #36]	; (8016a14 <prvHeapInit+0xc0>)
 80169ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80169f2:	601a      	str	r2, [r3, #0]
}
 80169f4:	bf00      	nop
 80169f6:	3714      	adds	r7, #20
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr
 8016a00:	24001e60 	.word	0x24001e60
 8016a04:	24005a60 	.word	0x24005a60
 8016a08:	24005a68 	.word	0x24005a68
 8016a0c:	24005a70 	.word	0x24005a70
 8016a10:	24005a6c 	.word	0x24005a6c
 8016a14:	24005a7c 	.word	0x24005a7c

08016a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b085      	sub	sp, #20
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016a20:	4b28      	ldr	r3, [pc, #160]	; (8016ac4 <prvInsertBlockIntoFreeList+0xac>)
 8016a22:	60fb      	str	r3, [r7, #12]
 8016a24:	e002      	b.n	8016a2c <prvInsertBlockIntoFreeList+0x14>
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	60fb      	str	r3, [r7, #12]
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	687a      	ldr	r2, [r7, #4]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d8f7      	bhi.n	8016a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	685b      	ldr	r3, [r3, #4]
 8016a3e:	68ba      	ldr	r2, [r7, #8]
 8016a40:	4413      	add	r3, r2
 8016a42:	687a      	ldr	r2, [r7, #4]
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d108      	bne.n	8016a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	685a      	ldr	r2, [r3, #4]
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	685b      	ldr	r3, [r3, #4]
 8016a50:	441a      	add	r2, r3
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	441a      	add	r2, r3
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	429a      	cmp	r2, r3
 8016a6c:	d118      	bne.n	8016aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	4b15      	ldr	r3, [pc, #84]	; (8016ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d00d      	beq.n	8016a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	685a      	ldr	r2, [r3, #4]
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	441a      	add	r2, r3
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	601a      	str	r2, [r3, #0]
 8016a94:	e008      	b.n	8016aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016a96:	4b0c      	ldr	r3, [pc, #48]	; (8016ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8016a98:	681a      	ldr	r2, [r3, #0]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	601a      	str	r2, [r3, #0]
 8016a9e:	e003      	b.n	8016aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016aa8:	68fa      	ldr	r2, [r7, #12]
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d002      	beq.n	8016ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	687a      	ldr	r2, [r7, #4]
 8016ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016ab6:	bf00      	nop
 8016ab8:	3714      	adds	r7, #20
 8016aba:	46bd      	mov	sp, r7
 8016abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac0:	4770      	bx	lr
 8016ac2:	bf00      	nop
 8016ac4:	24005a60 	.word	0x24005a60
 8016ac8:	24005a68 	.word	0x24005a68

08016acc <__errno>:
 8016acc:	4b01      	ldr	r3, [pc, #4]	; (8016ad4 <__errno+0x8>)
 8016ace:	6818      	ldr	r0, [r3, #0]
 8016ad0:	4770      	bx	lr
 8016ad2:	bf00      	nop
 8016ad4:	240000a4 	.word	0x240000a4

08016ad8 <__libc_init_array>:
 8016ad8:	b570      	push	{r4, r5, r6, lr}
 8016ada:	4d0d      	ldr	r5, [pc, #52]	; (8016b10 <__libc_init_array+0x38>)
 8016adc:	4c0d      	ldr	r4, [pc, #52]	; (8016b14 <__libc_init_array+0x3c>)
 8016ade:	1b64      	subs	r4, r4, r5
 8016ae0:	10a4      	asrs	r4, r4, #2
 8016ae2:	2600      	movs	r6, #0
 8016ae4:	42a6      	cmp	r6, r4
 8016ae6:	d109      	bne.n	8016afc <__libc_init_array+0x24>
 8016ae8:	4d0b      	ldr	r5, [pc, #44]	; (8016b18 <__libc_init_array+0x40>)
 8016aea:	4c0c      	ldr	r4, [pc, #48]	; (8016b1c <__libc_init_array+0x44>)
 8016aec:	f000 fd3c 	bl	8017568 <_init>
 8016af0:	1b64      	subs	r4, r4, r5
 8016af2:	10a4      	asrs	r4, r4, #2
 8016af4:	2600      	movs	r6, #0
 8016af6:	42a6      	cmp	r6, r4
 8016af8:	d105      	bne.n	8016b06 <__libc_init_array+0x2e>
 8016afa:	bd70      	pop	{r4, r5, r6, pc}
 8016afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b00:	4798      	blx	r3
 8016b02:	3601      	adds	r6, #1
 8016b04:	e7ee      	b.n	8016ae4 <__libc_init_array+0xc>
 8016b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b0a:	4798      	blx	r3
 8016b0c:	3601      	adds	r6, #1
 8016b0e:	e7f2      	b.n	8016af6 <__libc_init_array+0x1e>
 8016b10:	080179bc 	.word	0x080179bc
 8016b14:	080179bc 	.word	0x080179bc
 8016b18:	080179bc 	.word	0x080179bc
 8016b1c:	080179c0 	.word	0x080179c0

08016b20 <malloc>:
 8016b20:	4b02      	ldr	r3, [pc, #8]	; (8016b2c <malloc+0xc>)
 8016b22:	4601      	mov	r1, r0
 8016b24:	6818      	ldr	r0, [r3, #0]
 8016b26:	f000 b88d 	b.w	8016c44 <_malloc_r>
 8016b2a:	bf00      	nop
 8016b2c:	240000a4 	.word	0x240000a4

08016b30 <free>:
 8016b30:	4b02      	ldr	r3, [pc, #8]	; (8016b3c <free+0xc>)
 8016b32:	4601      	mov	r1, r0
 8016b34:	6818      	ldr	r0, [r3, #0]
 8016b36:	f000 b819 	b.w	8016b6c <_free_r>
 8016b3a:	bf00      	nop
 8016b3c:	240000a4 	.word	0x240000a4

08016b40 <memcpy>:
 8016b40:	440a      	add	r2, r1
 8016b42:	4291      	cmp	r1, r2
 8016b44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016b48:	d100      	bne.n	8016b4c <memcpy+0xc>
 8016b4a:	4770      	bx	lr
 8016b4c:	b510      	push	{r4, lr}
 8016b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b56:	4291      	cmp	r1, r2
 8016b58:	d1f9      	bne.n	8016b4e <memcpy+0xe>
 8016b5a:	bd10      	pop	{r4, pc}

08016b5c <memset>:
 8016b5c:	4402      	add	r2, r0
 8016b5e:	4603      	mov	r3, r0
 8016b60:	4293      	cmp	r3, r2
 8016b62:	d100      	bne.n	8016b66 <memset+0xa>
 8016b64:	4770      	bx	lr
 8016b66:	f803 1b01 	strb.w	r1, [r3], #1
 8016b6a:	e7f9      	b.n	8016b60 <memset+0x4>

08016b6c <_free_r>:
 8016b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b6e:	2900      	cmp	r1, #0
 8016b70:	d044      	beq.n	8016bfc <_free_r+0x90>
 8016b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b76:	9001      	str	r0, [sp, #4]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8016b7e:	bfb8      	it	lt
 8016b80:	18e4      	addlt	r4, r4, r3
 8016b82:	f000 fc39 	bl	80173f8 <__malloc_lock>
 8016b86:	4a1e      	ldr	r2, [pc, #120]	; (8016c00 <_free_r+0x94>)
 8016b88:	9801      	ldr	r0, [sp, #4]
 8016b8a:	6813      	ldr	r3, [r2, #0]
 8016b8c:	b933      	cbnz	r3, 8016b9c <_free_r+0x30>
 8016b8e:	6063      	str	r3, [r4, #4]
 8016b90:	6014      	str	r4, [r2, #0]
 8016b92:	b003      	add	sp, #12
 8016b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b98:	f000 bc34 	b.w	8017404 <__malloc_unlock>
 8016b9c:	42a3      	cmp	r3, r4
 8016b9e:	d908      	bls.n	8016bb2 <_free_r+0x46>
 8016ba0:	6825      	ldr	r5, [r4, #0]
 8016ba2:	1961      	adds	r1, r4, r5
 8016ba4:	428b      	cmp	r3, r1
 8016ba6:	bf01      	itttt	eq
 8016ba8:	6819      	ldreq	r1, [r3, #0]
 8016baa:	685b      	ldreq	r3, [r3, #4]
 8016bac:	1949      	addeq	r1, r1, r5
 8016bae:	6021      	streq	r1, [r4, #0]
 8016bb0:	e7ed      	b.n	8016b8e <_free_r+0x22>
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	b10b      	cbz	r3, 8016bbc <_free_r+0x50>
 8016bb8:	42a3      	cmp	r3, r4
 8016bba:	d9fa      	bls.n	8016bb2 <_free_r+0x46>
 8016bbc:	6811      	ldr	r1, [r2, #0]
 8016bbe:	1855      	adds	r5, r2, r1
 8016bc0:	42a5      	cmp	r5, r4
 8016bc2:	d10b      	bne.n	8016bdc <_free_r+0x70>
 8016bc4:	6824      	ldr	r4, [r4, #0]
 8016bc6:	4421      	add	r1, r4
 8016bc8:	1854      	adds	r4, r2, r1
 8016bca:	42a3      	cmp	r3, r4
 8016bcc:	6011      	str	r1, [r2, #0]
 8016bce:	d1e0      	bne.n	8016b92 <_free_r+0x26>
 8016bd0:	681c      	ldr	r4, [r3, #0]
 8016bd2:	685b      	ldr	r3, [r3, #4]
 8016bd4:	6053      	str	r3, [r2, #4]
 8016bd6:	4421      	add	r1, r4
 8016bd8:	6011      	str	r1, [r2, #0]
 8016bda:	e7da      	b.n	8016b92 <_free_r+0x26>
 8016bdc:	d902      	bls.n	8016be4 <_free_r+0x78>
 8016bde:	230c      	movs	r3, #12
 8016be0:	6003      	str	r3, [r0, #0]
 8016be2:	e7d6      	b.n	8016b92 <_free_r+0x26>
 8016be4:	6825      	ldr	r5, [r4, #0]
 8016be6:	1961      	adds	r1, r4, r5
 8016be8:	428b      	cmp	r3, r1
 8016bea:	bf04      	itt	eq
 8016bec:	6819      	ldreq	r1, [r3, #0]
 8016bee:	685b      	ldreq	r3, [r3, #4]
 8016bf0:	6063      	str	r3, [r4, #4]
 8016bf2:	bf04      	itt	eq
 8016bf4:	1949      	addeq	r1, r1, r5
 8016bf6:	6021      	streq	r1, [r4, #0]
 8016bf8:	6054      	str	r4, [r2, #4]
 8016bfa:	e7ca      	b.n	8016b92 <_free_r+0x26>
 8016bfc:	b003      	add	sp, #12
 8016bfe:	bd30      	pop	{r4, r5, pc}
 8016c00:	24005a80 	.word	0x24005a80

08016c04 <sbrk_aligned>:
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	4e0e      	ldr	r6, [pc, #56]	; (8016c40 <sbrk_aligned+0x3c>)
 8016c08:	460c      	mov	r4, r1
 8016c0a:	6831      	ldr	r1, [r6, #0]
 8016c0c:	4605      	mov	r5, r0
 8016c0e:	b911      	cbnz	r1, 8016c16 <sbrk_aligned+0x12>
 8016c10:	f000 f902 	bl	8016e18 <_sbrk_r>
 8016c14:	6030      	str	r0, [r6, #0]
 8016c16:	4621      	mov	r1, r4
 8016c18:	4628      	mov	r0, r5
 8016c1a:	f000 f8fd 	bl	8016e18 <_sbrk_r>
 8016c1e:	1c43      	adds	r3, r0, #1
 8016c20:	d00a      	beq.n	8016c38 <sbrk_aligned+0x34>
 8016c22:	1cc4      	adds	r4, r0, #3
 8016c24:	f024 0403 	bic.w	r4, r4, #3
 8016c28:	42a0      	cmp	r0, r4
 8016c2a:	d007      	beq.n	8016c3c <sbrk_aligned+0x38>
 8016c2c:	1a21      	subs	r1, r4, r0
 8016c2e:	4628      	mov	r0, r5
 8016c30:	f000 f8f2 	bl	8016e18 <_sbrk_r>
 8016c34:	3001      	adds	r0, #1
 8016c36:	d101      	bne.n	8016c3c <sbrk_aligned+0x38>
 8016c38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	bd70      	pop	{r4, r5, r6, pc}
 8016c40:	24005a84 	.word	0x24005a84

08016c44 <_malloc_r>:
 8016c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c48:	1ccd      	adds	r5, r1, #3
 8016c4a:	f025 0503 	bic.w	r5, r5, #3
 8016c4e:	3508      	adds	r5, #8
 8016c50:	2d0c      	cmp	r5, #12
 8016c52:	bf38      	it	cc
 8016c54:	250c      	movcc	r5, #12
 8016c56:	2d00      	cmp	r5, #0
 8016c58:	4607      	mov	r7, r0
 8016c5a:	db01      	blt.n	8016c60 <_malloc_r+0x1c>
 8016c5c:	42a9      	cmp	r1, r5
 8016c5e:	d905      	bls.n	8016c6c <_malloc_r+0x28>
 8016c60:	230c      	movs	r3, #12
 8016c62:	603b      	str	r3, [r7, #0]
 8016c64:	2600      	movs	r6, #0
 8016c66:	4630      	mov	r0, r6
 8016c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c6c:	4e2e      	ldr	r6, [pc, #184]	; (8016d28 <_malloc_r+0xe4>)
 8016c6e:	f000 fbc3 	bl	80173f8 <__malloc_lock>
 8016c72:	6833      	ldr	r3, [r6, #0]
 8016c74:	461c      	mov	r4, r3
 8016c76:	bb34      	cbnz	r4, 8016cc6 <_malloc_r+0x82>
 8016c78:	4629      	mov	r1, r5
 8016c7a:	4638      	mov	r0, r7
 8016c7c:	f7ff ffc2 	bl	8016c04 <sbrk_aligned>
 8016c80:	1c43      	adds	r3, r0, #1
 8016c82:	4604      	mov	r4, r0
 8016c84:	d14d      	bne.n	8016d22 <_malloc_r+0xde>
 8016c86:	6834      	ldr	r4, [r6, #0]
 8016c88:	4626      	mov	r6, r4
 8016c8a:	2e00      	cmp	r6, #0
 8016c8c:	d140      	bne.n	8016d10 <_malloc_r+0xcc>
 8016c8e:	6823      	ldr	r3, [r4, #0]
 8016c90:	4631      	mov	r1, r6
 8016c92:	4638      	mov	r0, r7
 8016c94:	eb04 0803 	add.w	r8, r4, r3
 8016c98:	f000 f8be 	bl	8016e18 <_sbrk_r>
 8016c9c:	4580      	cmp	r8, r0
 8016c9e:	d13a      	bne.n	8016d16 <_malloc_r+0xd2>
 8016ca0:	6821      	ldr	r1, [r4, #0]
 8016ca2:	3503      	adds	r5, #3
 8016ca4:	1a6d      	subs	r5, r5, r1
 8016ca6:	f025 0503 	bic.w	r5, r5, #3
 8016caa:	3508      	adds	r5, #8
 8016cac:	2d0c      	cmp	r5, #12
 8016cae:	bf38      	it	cc
 8016cb0:	250c      	movcc	r5, #12
 8016cb2:	4629      	mov	r1, r5
 8016cb4:	4638      	mov	r0, r7
 8016cb6:	f7ff ffa5 	bl	8016c04 <sbrk_aligned>
 8016cba:	3001      	adds	r0, #1
 8016cbc:	d02b      	beq.n	8016d16 <_malloc_r+0xd2>
 8016cbe:	6823      	ldr	r3, [r4, #0]
 8016cc0:	442b      	add	r3, r5
 8016cc2:	6023      	str	r3, [r4, #0]
 8016cc4:	e00e      	b.n	8016ce4 <_malloc_r+0xa0>
 8016cc6:	6822      	ldr	r2, [r4, #0]
 8016cc8:	1b52      	subs	r2, r2, r5
 8016cca:	d41e      	bmi.n	8016d0a <_malloc_r+0xc6>
 8016ccc:	2a0b      	cmp	r2, #11
 8016cce:	d916      	bls.n	8016cfe <_malloc_r+0xba>
 8016cd0:	1961      	adds	r1, r4, r5
 8016cd2:	42a3      	cmp	r3, r4
 8016cd4:	6025      	str	r5, [r4, #0]
 8016cd6:	bf18      	it	ne
 8016cd8:	6059      	strne	r1, [r3, #4]
 8016cda:	6863      	ldr	r3, [r4, #4]
 8016cdc:	bf08      	it	eq
 8016cde:	6031      	streq	r1, [r6, #0]
 8016ce0:	5162      	str	r2, [r4, r5]
 8016ce2:	604b      	str	r3, [r1, #4]
 8016ce4:	4638      	mov	r0, r7
 8016ce6:	f104 060b 	add.w	r6, r4, #11
 8016cea:	f000 fb8b 	bl	8017404 <__malloc_unlock>
 8016cee:	f026 0607 	bic.w	r6, r6, #7
 8016cf2:	1d23      	adds	r3, r4, #4
 8016cf4:	1af2      	subs	r2, r6, r3
 8016cf6:	d0b6      	beq.n	8016c66 <_malloc_r+0x22>
 8016cf8:	1b9b      	subs	r3, r3, r6
 8016cfa:	50a3      	str	r3, [r4, r2]
 8016cfc:	e7b3      	b.n	8016c66 <_malloc_r+0x22>
 8016cfe:	6862      	ldr	r2, [r4, #4]
 8016d00:	42a3      	cmp	r3, r4
 8016d02:	bf0c      	ite	eq
 8016d04:	6032      	streq	r2, [r6, #0]
 8016d06:	605a      	strne	r2, [r3, #4]
 8016d08:	e7ec      	b.n	8016ce4 <_malloc_r+0xa0>
 8016d0a:	4623      	mov	r3, r4
 8016d0c:	6864      	ldr	r4, [r4, #4]
 8016d0e:	e7b2      	b.n	8016c76 <_malloc_r+0x32>
 8016d10:	4634      	mov	r4, r6
 8016d12:	6876      	ldr	r6, [r6, #4]
 8016d14:	e7b9      	b.n	8016c8a <_malloc_r+0x46>
 8016d16:	230c      	movs	r3, #12
 8016d18:	603b      	str	r3, [r7, #0]
 8016d1a:	4638      	mov	r0, r7
 8016d1c:	f000 fb72 	bl	8017404 <__malloc_unlock>
 8016d20:	e7a1      	b.n	8016c66 <_malloc_r+0x22>
 8016d22:	6025      	str	r5, [r4, #0]
 8016d24:	e7de      	b.n	8016ce4 <_malloc_r+0xa0>
 8016d26:	bf00      	nop
 8016d28:	24005a80 	.word	0x24005a80

08016d2c <_puts_r>:
 8016d2c:	b570      	push	{r4, r5, r6, lr}
 8016d2e:	460e      	mov	r6, r1
 8016d30:	4605      	mov	r5, r0
 8016d32:	b118      	cbz	r0, 8016d3c <_puts_r+0x10>
 8016d34:	6983      	ldr	r3, [r0, #24]
 8016d36:	b90b      	cbnz	r3, 8016d3c <_puts_r+0x10>
 8016d38:	f000 fa58 	bl	80171ec <__sinit>
 8016d3c:	69ab      	ldr	r3, [r5, #24]
 8016d3e:	68ac      	ldr	r4, [r5, #8]
 8016d40:	b913      	cbnz	r3, 8016d48 <_puts_r+0x1c>
 8016d42:	4628      	mov	r0, r5
 8016d44:	f000 fa52 	bl	80171ec <__sinit>
 8016d48:	4b2c      	ldr	r3, [pc, #176]	; (8016dfc <_puts_r+0xd0>)
 8016d4a:	429c      	cmp	r4, r3
 8016d4c:	d120      	bne.n	8016d90 <_puts_r+0x64>
 8016d4e:	686c      	ldr	r4, [r5, #4]
 8016d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d52:	07db      	lsls	r3, r3, #31
 8016d54:	d405      	bmi.n	8016d62 <_puts_r+0x36>
 8016d56:	89a3      	ldrh	r3, [r4, #12]
 8016d58:	0598      	lsls	r0, r3, #22
 8016d5a:	d402      	bmi.n	8016d62 <_puts_r+0x36>
 8016d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d5e:	f000 fae3 	bl	8017328 <__retarget_lock_acquire_recursive>
 8016d62:	89a3      	ldrh	r3, [r4, #12]
 8016d64:	0719      	lsls	r1, r3, #28
 8016d66:	d51d      	bpl.n	8016da4 <_puts_r+0x78>
 8016d68:	6923      	ldr	r3, [r4, #16]
 8016d6a:	b1db      	cbz	r3, 8016da4 <_puts_r+0x78>
 8016d6c:	3e01      	subs	r6, #1
 8016d6e:	68a3      	ldr	r3, [r4, #8]
 8016d70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d74:	3b01      	subs	r3, #1
 8016d76:	60a3      	str	r3, [r4, #8]
 8016d78:	bb39      	cbnz	r1, 8016dca <_puts_r+0x9e>
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	da38      	bge.n	8016df0 <_puts_r+0xc4>
 8016d7e:	4622      	mov	r2, r4
 8016d80:	210a      	movs	r1, #10
 8016d82:	4628      	mov	r0, r5
 8016d84:	f000 f858 	bl	8016e38 <__swbuf_r>
 8016d88:	3001      	adds	r0, #1
 8016d8a:	d011      	beq.n	8016db0 <_puts_r+0x84>
 8016d8c:	250a      	movs	r5, #10
 8016d8e:	e011      	b.n	8016db4 <_puts_r+0x88>
 8016d90:	4b1b      	ldr	r3, [pc, #108]	; (8016e00 <_puts_r+0xd4>)
 8016d92:	429c      	cmp	r4, r3
 8016d94:	d101      	bne.n	8016d9a <_puts_r+0x6e>
 8016d96:	68ac      	ldr	r4, [r5, #8]
 8016d98:	e7da      	b.n	8016d50 <_puts_r+0x24>
 8016d9a:	4b1a      	ldr	r3, [pc, #104]	; (8016e04 <_puts_r+0xd8>)
 8016d9c:	429c      	cmp	r4, r3
 8016d9e:	bf08      	it	eq
 8016da0:	68ec      	ldreq	r4, [r5, #12]
 8016da2:	e7d5      	b.n	8016d50 <_puts_r+0x24>
 8016da4:	4621      	mov	r1, r4
 8016da6:	4628      	mov	r0, r5
 8016da8:	f000 f898 	bl	8016edc <__swsetup_r>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d0dd      	beq.n	8016d6c <_puts_r+0x40>
 8016db0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016db6:	07da      	lsls	r2, r3, #31
 8016db8:	d405      	bmi.n	8016dc6 <_puts_r+0x9a>
 8016dba:	89a3      	ldrh	r3, [r4, #12]
 8016dbc:	059b      	lsls	r3, r3, #22
 8016dbe:	d402      	bmi.n	8016dc6 <_puts_r+0x9a>
 8016dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dc2:	f000 fab2 	bl	801732a <__retarget_lock_release_recursive>
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	bd70      	pop	{r4, r5, r6, pc}
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	da04      	bge.n	8016dd8 <_puts_r+0xac>
 8016dce:	69a2      	ldr	r2, [r4, #24]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	dc06      	bgt.n	8016de2 <_puts_r+0xb6>
 8016dd4:	290a      	cmp	r1, #10
 8016dd6:	d004      	beq.n	8016de2 <_puts_r+0xb6>
 8016dd8:	6823      	ldr	r3, [r4, #0]
 8016dda:	1c5a      	adds	r2, r3, #1
 8016ddc:	6022      	str	r2, [r4, #0]
 8016dde:	7019      	strb	r1, [r3, #0]
 8016de0:	e7c5      	b.n	8016d6e <_puts_r+0x42>
 8016de2:	4622      	mov	r2, r4
 8016de4:	4628      	mov	r0, r5
 8016de6:	f000 f827 	bl	8016e38 <__swbuf_r>
 8016dea:	3001      	adds	r0, #1
 8016dec:	d1bf      	bne.n	8016d6e <_puts_r+0x42>
 8016dee:	e7df      	b.n	8016db0 <_puts_r+0x84>
 8016df0:	6823      	ldr	r3, [r4, #0]
 8016df2:	250a      	movs	r5, #10
 8016df4:	1c5a      	adds	r2, r3, #1
 8016df6:	6022      	str	r2, [r4, #0]
 8016df8:	701d      	strb	r5, [r3, #0]
 8016dfa:	e7db      	b.n	8016db4 <_puts_r+0x88>
 8016dfc:	08017974 	.word	0x08017974
 8016e00:	08017994 	.word	0x08017994
 8016e04:	08017954 	.word	0x08017954

08016e08 <puts>:
 8016e08:	4b02      	ldr	r3, [pc, #8]	; (8016e14 <puts+0xc>)
 8016e0a:	4601      	mov	r1, r0
 8016e0c:	6818      	ldr	r0, [r3, #0]
 8016e0e:	f7ff bf8d 	b.w	8016d2c <_puts_r>
 8016e12:	bf00      	nop
 8016e14:	240000a4 	.word	0x240000a4

08016e18 <_sbrk_r>:
 8016e18:	b538      	push	{r3, r4, r5, lr}
 8016e1a:	4d06      	ldr	r5, [pc, #24]	; (8016e34 <_sbrk_r+0x1c>)
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	4604      	mov	r4, r0
 8016e20:	4608      	mov	r0, r1
 8016e22:	602b      	str	r3, [r5, #0]
 8016e24:	f7ec ffcc 	bl	8003dc0 <_sbrk>
 8016e28:	1c43      	adds	r3, r0, #1
 8016e2a:	d102      	bne.n	8016e32 <_sbrk_r+0x1a>
 8016e2c:	682b      	ldr	r3, [r5, #0]
 8016e2e:	b103      	cbz	r3, 8016e32 <_sbrk_r+0x1a>
 8016e30:	6023      	str	r3, [r4, #0]
 8016e32:	bd38      	pop	{r3, r4, r5, pc}
 8016e34:	24005a8c 	.word	0x24005a8c

08016e38 <__swbuf_r>:
 8016e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e3a:	460e      	mov	r6, r1
 8016e3c:	4614      	mov	r4, r2
 8016e3e:	4605      	mov	r5, r0
 8016e40:	b118      	cbz	r0, 8016e4a <__swbuf_r+0x12>
 8016e42:	6983      	ldr	r3, [r0, #24]
 8016e44:	b90b      	cbnz	r3, 8016e4a <__swbuf_r+0x12>
 8016e46:	f000 f9d1 	bl	80171ec <__sinit>
 8016e4a:	4b21      	ldr	r3, [pc, #132]	; (8016ed0 <__swbuf_r+0x98>)
 8016e4c:	429c      	cmp	r4, r3
 8016e4e:	d12b      	bne.n	8016ea8 <__swbuf_r+0x70>
 8016e50:	686c      	ldr	r4, [r5, #4]
 8016e52:	69a3      	ldr	r3, [r4, #24]
 8016e54:	60a3      	str	r3, [r4, #8]
 8016e56:	89a3      	ldrh	r3, [r4, #12]
 8016e58:	071a      	lsls	r2, r3, #28
 8016e5a:	d52f      	bpl.n	8016ebc <__swbuf_r+0x84>
 8016e5c:	6923      	ldr	r3, [r4, #16]
 8016e5e:	b36b      	cbz	r3, 8016ebc <__swbuf_r+0x84>
 8016e60:	6923      	ldr	r3, [r4, #16]
 8016e62:	6820      	ldr	r0, [r4, #0]
 8016e64:	1ac0      	subs	r0, r0, r3
 8016e66:	6963      	ldr	r3, [r4, #20]
 8016e68:	b2f6      	uxtb	r6, r6
 8016e6a:	4283      	cmp	r3, r0
 8016e6c:	4637      	mov	r7, r6
 8016e6e:	dc04      	bgt.n	8016e7a <__swbuf_r+0x42>
 8016e70:	4621      	mov	r1, r4
 8016e72:	4628      	mov	r0, r5
 8016e74:	f000 f926 	bl	80170c4 <_fflush_r>
 8016e78:	bb30      	cbnz	r0, 8016ec8 <__swbuf_r+0x90>
 8016e7a:	68a3      	ldr	r3, [r4, #8]
 8016e7c:	3b01      	subs	r3, #1
 8016e7e:	60a3      	str	r3, [r4, #8]
 8016e80:	6823      	ldr	r3, [r4, #0]
 8016e82:	1c5a      	adds	r2, r3, #1
 8016e84:	6022      	str	r2, [r4, #0]
 8016e86:	701e      	strb	r6, [r3, #0]
 8016e88:	6963      	ldr	r3, [r4, #20]
 8016e8a:	3001      	adds	r0, #1
 8016e8c:	4283      	cmp	r3, r0
 8016e8e:	d004      	beq.n	8016e9a <__swbuf_r+0x62>
 8016e90:	89a3      	ldrh	r3, [r4, #12]
 8016e92:	07db      	lsls	r3, r3, #31
 8016e94:	d506      	bpl.n	8016ea4 <__swbuf_r+0x6c>
 8016e96:	2e0a      	cmp	r6, #10
 8016e98:	d104      	bne.n	8016ea4 <__swbuf_r+0x6c>
 8016e9a:	4621      	mov	r1, r4
 8016e9c:	4628      	mov	r0, r5
 8016e9e:	f000 f911 	bl	80170c4 <_fflush_r>
 8016ea2:	b988      	cbnz	r0, 8016ec8 <__swbuf_r+0x90>
 8016ea4:	4638      	mov	r0, r7
 8016ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ea8:	4b0a      	ldr	r3, [pc, #40]	; (8016ed4 <__swbuf_r+0x9c>)
 8016eaa:	429c      	cmp	r4, r3
 8016eac:	d101      	bne.n	8016eb2 <__swbuf_r+0x7a>
 8016eae:	68ac      	ldr	r4, [r5, #8]
 8016eb0:	e7cf      	b.n	8016e52 <__swbuf_r+0x1a>
 8016eb2:	4b09      	ldr	r3, [pc, #36]	; (8016ed8 <__swbuf_r+0xa0>)
 8016eb4:	429c      	cmp	r4, r3
 8016eb6:	bf08      	it	eq
 8016eb8:	68ec      	ldreq	r4, [r5, #12]
 8016eba:	e7ca      	b.n	8016e52 <__swbuf_r+0x1a>
 8016ebc:	4621      	mov	r1, r4
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	f000 f80c 	bl	8016edc <__swsetup_r>
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d0cb      	beq.n	8016e60 <__swbuf_r+0x28>
 8016ec8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016ecc:	e7ea      	b.n	8016ea4 <__swbuf_r+0x6c>
 8016ece:	bf00      	nop
 8016ed0:	08017974 	.word	0x08017974
 8016ed4:	08017994 	.word	0x08017994
 8016ed8:	08017954 	.word	0x08017954

08016edc <__swsetup_r>:
 8016edc:	4b32      	ldr	r3, [pc, #200]	; (8016fa8 <__swsetup_r+0xcc>)
 8016ede:	b570      	push	{r4, r5, r6, lr}
 8016ee0:	681d      	ldr	r5, [r3, #0]
 8016ee2:	4606      	mov	r6, r0
 8016ee4:	460c      	mov	r4, r1
 8016ee6:	b125      	cbz	r5, 8016ef2 <__swsetup_r+0x16>
 8016ee8:	69ab      	ldr	r3, [r5, #24]
 8016eea:	b913      	cbnz	r3, 8016ef2 <__swsetup_r+0x16>
 8016eec:	4628      	mov	r0, r5
 8016eee:	f000 f97d 	bl	80171ec <__sinit>
 8016ef2:	4b2e      	ldr	r3, [pc, #184]	; (8016fac <__swsetup_r+0xd0>)
 8016ef4:	429c      	cmp	r4, r3
 8016ef6:	d10f      	bne.n	8016f18 <__swsetup_r+0x3c>
 8016ef8:	686c      	ldr	r4, [r5, #4]
 8016efa:	89a3      	ldrh	r3, [r4, #12]
 8016efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f00:	0719      	lsls	r1, r3, #28
 8016f02:	d42c      	bmi.n	8016f5e <__swsetup_r+0x82>
 8016f04:	06dd      	lsls	r5, r3, #27
 8016f06:	d411      	bmi.n	8016f2c <__swsetup_r+0x50>
 8016f08:	2309      	movs	r3, #9
 8016f0a:	6033      	str	r3, [r6, #0]
 8016f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016f10:	81a3      	strh	r3, [r4, #12]
 8016f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f16:	e03e      	b.n	8016f96 <__swsetup_r+0xba>
 8016f18:	4b25      	ldr	r3, [pc, #148]	; (8016fb0 <__swsetup_r+0xd4>)
 8016f1a:	429c      	cmp	r4, r3
 8016f1c:	d101      	bne.n	8016f22 <__swsetup_r+0x46>
 8016f1e:	68ac      	ldr	r4, [r5, #8]
 8016f20:	e7eb      	b.n	8016efa <__swsetup_r+0x1e>
 8016f22:	4b24      	ldr	r3, [pc, #144]	; (8016fb4 <__swsetup_r+0xd8>)
 8016f24:	429c      	cmp	r4, r3
 8016f26:	bf08      	it	eq
 8016f28:	68ec      	ldreq	r4, [r5, #12]
 8016f2a:	e7e6      	b.n	8016efa <__swsetup_r+0x1e>
 8016f2c:	0758      	lsls	r0, r3, #29
 8016f2e:	d512      	bpl.n	8016f56 <__swsetup_r+0x7a>
 8016f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f32:	b141      	cbz	r1, 8016f46 <__swsetup_r+0x6a>
 8016f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f38:	4299      	cmp	r1, r3
 8016f3a:	d002      	beq.n	8016f42 <__swsetup_r+0x66>
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	f7ff fe15 	bl	8016b6c <_free_r>
 8016f42:	2300      	movs	r3, #0
 8016f44:	6363      	str	r3, [r4, #52]	; 0x34
 8016f46:	89a3      	ldrh	r3, [r4, #12]
 8016f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016f4c:	81a3      	strh	r3, [r4, #12]
 8016f4e:	2300      	movs	r3, #0
 8016f50:	6063      	str	r3, [r4, #4]
 8016f52:	6923      	ldr	r3, [r4, #16]
 8016f54:	6023      	str	r3, [r4, #0]
 8016f56:	89a3      	ldrh	r3, [r4, #12]
 8016f58:	f043 0308 	orr.w	r3, r3, #8
 8016f5c:	81a3      	strh	r3, [r4, #12]
 8016f5e:	6923      	ldr	r3, [r4, #16]
 8016f60:	b94b      	cbnz	r3, 8016f76 <__swsetup_r+0x9a>
 8016f62:	89a3      	ldrh	r3, [r4, #12]
 8016f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f6c:	d003      	beq.n	8016f76 <__swsetup_r+0x9a>
 8016f6e:	4621      	mov	r1, r4
 8016f70:	4630      	mov	r0, r6
 8016f72:	f000 fa01 	bl	8017378 <__smakebuf_r>
 8016f76:	89a0      	ldrh	r0, [r4, #12]
 8016f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f7c:	f010 0301 	ands.w	r3, r0, #1
 8016f80:	d00a      	beq.n	8016f98 <__swsetup_r+0xbc>
 8016f82:	2300      	movs	r3, #0
 8016f84:	60a3      	str	r3, [r4, #8]
 8016f86:	6963      	ldr	r3, [r4, #20]
 8016f88:	425b      	negs	r3, r3
 8016f8a:	61a3      	str	r3, [r4, #24]
 8016f8c:	6923      	ldr	r3, [r4, #16]
 8016f8e:	b943      	cbnz	r3, 8016fa2 <__swsetup_r+0xc6>
 8016f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016f94:	d1ba      	bne.n	8016f0c <__swsetup_r+0x30>
 8016f96:	bd70      	pop	{r4, r5, r6, pc}
 8016f98:	0781      	lsls	r1, r0, #30
 8016f9a:	bf58      	it	pl
 8016f9c:	6963      	ldrpl	r3, [r4, #20]
 8016f9e:	60a3      	str	r3, [r4, #8]
 8016fa0:	e7f4      	b.n	8016f8c <__swsetup_r+0xb0>
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	e7f7      	b.n	8016f96 <__swsetup_r+0xba>
 8016fa6:	bf00      	nop
 8016fa8:	240000a4 	.word	0x240000a4
 8016fac:	08017974 	.word	0x08017974
 8016fb0:	08017994 	.word	0x08017994
 8016fb4:	08017954 	.word	0x08017954

08016fb8 <__sflush_r>:
 8016fb8:	898a      	ldrh	r2, [r1, #12]
 8016fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fbe:	4605      	mov	r5, r0
 8016fc0:	0710      	lsls	r0, r2, #28
 8016fc2:	460c      	mov	r4, r1
 8016fc4:	d458      	bmi.n	8017078 <__sflush_r+0xc0>
 8016fc6:	684b      	ldr	r3, [r1, #4]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	dc05      	bgt.n	8016fd8 <__sflush_r+0x20>
 8016fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	dc02      	bgt.n	8016fd8 <__sflush_r+0x20>
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016fda:	2e00      	cmp	r6, #0
 8016fdc:	d0f9      	beq.n	8016fd2 <__sflush_r+0x1a>
 8016fde:	2300      	movs	r3, #0
 8016fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016fe4:	682f      	ldr	r7, [r5, #0]
 8016fe6:	602b      	str	r3, [r5, #0]
 8016fe8:	d032      	beq.n	8017050 <__sflush_r+0x98>
 8016fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016fec:	89a3      	ldrh	r3, [r4, #12]
 8016fee:	075a      	lsls	r2, r3, #29
 8016ff0:	d505      	bpl.n	8016ffe <__sflush_r+0x46>
 8016ff2:	6863      	ldr	r3, [r4, #4]
 8016ff4:	1ac0      	subs	r0, r0, r3
 8016ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016ff8:	b10b      	cbz	r3, 8016ffe <__sflush_r+0x46>
 8016ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ffc:	1ac0      	subs	r0, r0, r3
 8016ffe:	2300      	movs	r3, #0
 8017000:	4602      	mov	r2, r0
 8017002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017004:	6a21      	ldr	r1, [r4, #32]
 8017006:	4628      	mov	r0, r5
 8017008:	47b0      	blx	r6
 801700a:	1c43      	adds	r3, r0, #1
 801700c:	89a3      	ldrh	r3, [r4, #12]
 801700e:	d106      	bne.n	801701e <__sflush_r+0x66>
 8017010:	6829      	ldr	r1, [r5, #0]
 8017012:	291d      	cmp	r1, #29
 8017014:	d82c      	bhi.n	8017070 <__sflush_r+0xb8>
 8017016:	4a2a      	ldr	r2, [pc, #168]	; (80170c0 <__sflush_r+0x108>)
 8017018:	40ca      	lsrs	r2, r1
 801701a:	07d6      	lsls	r6, r2, #31
 801701c:	d528      	bpl.n	8017070 <__sflush_r+0xb8>
 801701e:	2200      	movs	r2, #0
 8017020:	6062      	str	r2, [r4, #4]
 8017022:	04d9      	lsls	r1, r3, #19
 8017024:	6922      	ldr	r2, [r4, #16]
 8017026:	6022      	str	r2, [r4, #0]
 8017028:	d504      	bpl.n	8017034 <__sflush_r+0x7c>
 801702a:	1c42      	adds	r2, r0, #1
 801702c:	d101      	bne.n	8017032 <__sflush_r+0x7a>
 801702e:	682b      	ldr	r3, [r5, #0]
 8017030:	b903      	cbnz	r3, 8017034 <__sflush_r+0x7c>
 8017032:	6560      	str	r0, [r4, #84]	; 0x54
 8017034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017036:	602f      	str	r7, [r5, #0]
 8017038:	2900      	cmp	r1, #0
 801703a:	d0ca      	beq.n	8016fd2 <__sflush_r+0x1a>
 801703c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017040:	4299      	cmp	r1, r3
 8017042:	d002      	beq.n	801704a <__sflush_r+0x92>
 8017044:	4628      	mov	r0, r5
 8017046:	f7ff fd91 	bl	8016b6c <_free_r>
 801704a:	2000      	movs	r0, #0
 801704c:	6360      	str	r0, [r4, #52]	; 0x34
 801704e:	e7c1      	b.n	8016fd4 <__sflush_r+0x1c>
 8017050:	6a21      	ldr	r1, [r4, #32]
 8017052:	2301      	movs	r3, #1
 8017054:	4628      	mov	r0, r5
 8017056:	47b0      	blx	r6
 8017058:	1c41      	adds	r1, r0, #1
 801705a:	d1c7      	bne.n	8016fec <__sflush_r+0x34>
 801705c:	682b      	ldr	r3, [r5, #0]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d0c4      	beq.n	8016fec <__sflush_r+0x34>
 8017062:	2b1d      	cmp	r3, #29
 8017064:	d001      	beq.n	801706a <__sflush_r+0xb2>
 8017066:	2b16      	cmp	r3, #22
 8017068:	d101      	bne.n	801706e <__sflush_r+0xb6>
 801706a:	602f      	str	r7, [r5, #0]
 801706c:	e7b1      	b.n	8016fd2 <__sflush_r+0x1a>
 801706e:	89a3      	ldrh	r3, [r4, #12]
 8017070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017074:	81a3      	strh	r3, [r4, #12]
 8017076:	e7ad      	b.n	8016fd4 <__sflush_r+0x1c>
 8017078:	690f      	ldr	r7, [r1, #16]
 801707a:	2f00      	cmp	r7, #0
 801707c:	d0a9      	beq.n	8016fd2 <__sflush_r+0x1a>
 801707e:	0793      	lsls	r3, r2, #30
 8017080:	680e      	ldr	r6, [r1, #0]
 8017082:	bf08      	it	eq
 8017084:	694b      	ldreq	r3, [r1, #20]
 8017086:	600f      	str	r7, [r1, #0]
 8017088:	bf18      	it	ne
 801708a:	2300      	movne	r3, #0
 801708c:	eba6 0807 	sub.w	r8, r6, r7
 8017090:	608b      	str	r3, [r1, #8]
 8017092:	f1b8 0f00 	cmp.w	r8, #0
 8017096:	dd9c      	ble.n	8016fd2 <__sflush_r+0x1a>
 8017098:	6a21      	ldr	r1, [r4, #32]
 801709a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801709c:	4643      	mov	r3, r8
 801709e:	463a      	mov	r2, r7
 80170a0:	4628      	mov	r0, r5
 80170a2:	47b0      	blx	r6
 80170a4:	2800      	cmp	r0, #0
 80170a6:	dc06      	bgt.n	80170b6 <__sflush_r+0xfe>
 80170a8:	89a3      	ldrh	r3, [r4, #12]
 80170aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170ae:	81a3      	strh	r3, [r4, #12]
 80170b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170b4:	e78e      	b.n	8016fd4 <__sflush_r+0x1c>
 80170b6:	4407      	add	r7, r0
 80170b8:	eba8 0800 	sub.w	r8, r8, r0
 80170bc:	e7e9      	b.n	8017092 <__sflush_r+0xda>
 80170be:	bf00      	nop
 80170c0:	20400001 	.word	0x20400001

080170c4 <_fflush_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	690b      	ldr	r3, [r1, #16]
 80170c8:	4605      	mov	r5, r0
 80170ca:	460c      	mov	r4, r1
 80170cc:	b913      	cbnz	r3, 80170d4 <_fflush_r+0x10>
 80170ce:	2500      	movs	r5, #0
 80170d0:	4628      	mov	r0, r5
 80170d2:	bd38      	pop	{r3, r4, r5, pc}
 80170d4:	b118      	cbz	r0, 80170de <_fflush_r+0x1a>
 80170d6:	6983      	ldr	r3, [r0, #24]
 80170d8:	b90b      	cbnz	r3, 80170de <_fflush_r+0x1a>
 80170da:	f000 f887 	bl	80171ec <__sinit>
 80170de:	4b14      	ldr	r3, [pc, #80]	; (8017130 <_fflush_r+0x6c>)
 80170e0:	429c      	cmp	r4, r3
 80170e2:	d11b      	bne.n	801711c <_fflush_r+0x58>
 80170e4:	686c      	ldr	r4, [r5, #4]
 80170e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d0ef      	beq.n	80170ce <_fflush_r+0xa>
 80170ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80170f0:	07d0      	lsls	r0, r2, #31
 80170f2:	d404      	bmi.n	80170fe <_fflush_r+0x3a>
 80170f4:	0599      	lsls	r1, r3, #22
 80170f6:	d402      	bmi.n	80170fe <_fflush_r+0x3a>
 80170f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170fa:	f000 f915 	bl	8017328 <__retarget_lock_acquire_recursive>
 80170fe:	4628      	mov	r0, r5
 8017100:	4621      	mov	r1, r4
 8017102:	f7ff ff59 	bl	8016fb8 <__sflush_r>
 8017106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017108:	07da      	lsls	r2, r3, #31
 801710a:	4605      	mov	r5, r0
 801710c:	d4e0      	bmi.n	80170d0 <_fflush_r+0xc>
 801710e:	89a3      	ldrh	r3, [r4, #12]
 8017110:	059b      	lsls	r3, r3, #22
 8017112:	d4dd      	bmi.n	80170d0 <_fflush_r+0xc>
 8017114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017116:	f000 f908 	bl	801732a <__retarget_lock_release_recursive>
 801711a:	e7d9      	b.n	80170d0 <_fflush_r+0xc>
 801711c:	4b05      	ldr	r3, [pc, #20]	; (8017134 <_fflush_r+0x70>)
 801711e:	429c      	cmp	r4, r3
 8017120:	d101      	bne.n	8017126 <_fflush_r+0x62>
 8017122:	68ac      	ldr	r4, [r5, #8]
 8017124:	e7df      	b.n	80170e6 <_fflush_r+0x22>
 8017126:	4b04      	ldr	r3, [pc, #16]	; (8017138 <_fflush_r+0x74>)
 8017128:	429c      	cmp	r4, r3
 801712a:	bf08      	it	eq
 801712c:	68ec      	ldreq	r4, [r5, #12]
 801712e:	e7da      	b.n	80170e6 <_fflush_r+0x22>
 8017130:	08017974 	.word	0x08017974
 8017134:	08017994 	.word	0x08017994
 8017138:	08017954 	.word	0x08017954

0801713c <std>:
 801713c:	2300      	movs	r3, #0
 801713e:	b510      	push	{r4, lr}
 8017140:	4604      	mov	r4, r0
 8017142:	e9c0 3300 	strd	r3, r3, [r0]
 8017146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801714a:	6083      	str	r3, [r0, #8]
 801714c:	8181      	strh	r1, [r0, #12]
 801714e:	6643      	str	r3, [r0, #100]	; 0x64
 8017150:	81c2      	strh	r2, [r0, #14]
 8017152:	6183      	str	r3, [r0, #24]
 8017154:	4619      	mov	r1, r3
 8017156:	2208      	movs	r2, #8
 8017158:	305c      	adds	r0, #92	; 0x5c
 801715a:	f7ff fcff 	bl	8016b5c <memset>
 801715e:	4b05      	ldr	r3, [pc, #20]	; (8017174 <std+0x38>)
 8017160:	6263      	str	r3, [r4, #36]	; 0x24
 8017162:	4b05      	ldr	r3, [pc, #20]	; (8017178 <std+0x3c>)
 8017164:	62a3      	str	r3, [r4, #40]	; 0x28
 8017166:	4b05      	ldr	r3, [pc, #20]	; (801717c <std+0x40>)
 8017168:	62e3      	str	r3, [r4, #44]	; 0x2c
 801716a:	4b05      	ldr	r3, [pc, #20]	; (8017180 <std+0x44>)
 801716c:	6224      	str	r4, [r4, #32]
 801716e:	6323      	str	r3, [r4, #48]	; 0x30
 8017170:	bd10      	pop	{r4, pc}
 8017172:	bf00      	nop
 8017174:	08017411 	.word	0x08017411
 8017178:	08017433 	.word	0x08017433
 801717c:	0801746b 	.word	0x0801746b
 8017180:	0801748f 	.word	0x0801748f

08017184 <_cleanup_r>:
 8017184:	4901      	ldr	r1, [pc, #4]	; (801718c <_cleanup_r+0x8>)
 8017186:	f000 b8af 	b.w	80172e8 <_fwalk_reent>
 801718a:	bf00      	nop
 801718c:	080170c5 	.word	0x080170c5

08017190 <__sfmoreglue>:
 8017190:	b570      	push	{r4, r5, r6, lr}
 8017192:	2268      	movs	r2, #104	; 0x68
 8017194:	1e4d      	subs	r5, r1, #1
 8017196:	4355      	muls	r5, r2
 8017198:	460e      	mov	r6, r1
 801719a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801719e:	f7ff fd51 	bl	8016c44 <_malloc_r>
 80171a2:	4604      	mov	r4, r0
 80171a4:	b140      	cbz	r0, 80171b8 <__sfmoreglue+0x28>
 80171a6:	2100      	movs	r1, #0
 80171a8:	e9c0 1600 	strd	r1, r6, [r0]
 80171ac:	300c      	adds	r0, #12
 80171ae:	60a0      	str	r0, [r4, #8]
 80171b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80171b4:	f7ff fcd2 	bl	8016b5c <memset>
 80171b8:	4620      	mov	r0, r4
 80171ba:	bd70      	pop	{r4, r5, r6, pc}

080171bc <__sfp_lock_acquire>:
 80171bc:	4801      	ldr	r0, [pc, #4]	; (80171c4 <__sfp_lock_acquire+0x8>)
 80171be:	f000 b8b3 	b.w	8017328 <__retarget_lock_acquire_recursive>
 80171c2:	bf00      	nop
 80171c4:	24005a89 	.word	0x24005a89

080171c8 <__sfp_lock_release>:
 80171c8:	4801      	ldr	r0, [pc, #4]	; (80171d0 <__sfp_lock_release+0x8>)
 80171ca:	f000 b8ae 	b.w	801732a <__retarget_lock_release_recursive>
 80171ce:	bf00      	nop
 80171d0:	24005a89 	.word	0x24005a89

080171d4 <__sinit_lock_acquire>:
 80171d4:	4801      	ldr	r0, [pc, #4]	; (80171dc <__sinit_lock_acquire+0x8>)
 80171d6:	f000 b8a7 	b.w	8017328 <__retarget_lock_acquire_recursive>
 80171da:	bf00      	nop
 80171dc:	24005a8a 	.word	0x24005a8a

080171e0 <__sinit_lock_release>:
 80171e0:	4801      	ldr	r0, [pc, #4]	; (80171e8 <__sinit_lock_release+0x8>)
 80171e2:	f000 b8a2 	b.w	801732a <__retarget_lock_release_recursive>
 80171e6:	bf00      	nop
 80171e8:	24005a8a 	.word	0x24005a8a

080171ec <__sinit>:
 80171ec:	b510      	push	{r4, lr}
 80171ee:	4604      	mov	r4, r0
 80171f0:	f7ff fff0 	bl	80171d4 <__sinit_lock_acquire>
 80171f4:	69a3      	ldr	r3, [r4, #24]
 80171f6:	b11b      	cbz	r3, 8017200 <__sinit+0x14>
 80171f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171fc:	f7ff bff0 	b.w	80171e0 <__sinit_lock_release>
 8017200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017204:	6523      	str	r3, [r4, #80]	; 0x50
 8017206:	4b13      	ldr	r3, [pc, #76]	; (8017254 <__sinit+0x68>)
 8017208:	4a13      	ldr	r2, [pc, #76]	; (8017258 <__sinit+0x6c>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	62a2      	str	r2, [r4, #40]	; 0x28
 801720e:	42a3      	cmp	r3, r4
 8017210:	bf04      	itt	eq
 8017212:	2301      	moveq	r3, #1
 8017214:	61a3      	streq	r3, [r4, #24]
 8017216:	4620      	mov	r0, r4
 8017218:	f000 f820 	bl	801725c <__sfp>
 801721c:	6060      	str	r0, [r4, #4]
 801721e:	4620      	mov	r0, r4
 8017220:	f000 f81c 	bl	801725c <__sfp>
 8017224:	60a0      	str	r0, [r4, #8]
 8017226:	4620      	mov	r0, r4
 8017228:	f000 f818 	bl	801725c <__sfp>
 801722c:	2200      	movs	r2, #0
 801722e:	60e0      	str	r0, [r4, #12]
 8017230:	2104      	movs	r1, #4
 8017232:	6860      	ldr	r0, [r4, #4]
 8017234:	f7ff ff82 	bl	801713c <std>
 8017238:	68a0      	ldr	r0, [r4, #8]
 801723a:	2201      	movs	r2, #1
 801723c:	2109      	movs	r1, #9
 801723e:	f7ff ff7d 	bl	801713c <std>
 8017242:	68e0      	ldr	r0, [r4, #12]
 8017244:	2202      	movs	r2, #2
 8017246:	2112      	movs	r1, #18
 8017248:	f7ff ff78 	bl	801713c <std>
 801724c:	2301      	movs	r3, #1
 801724e:	61a3      	str	r3, [r4, #24]
 8017250:	e7d2      	b.n	80171f8 <__sinit+0xc>
 8017252:	bf00      	nop
 8017254:	08017950 	.word	0x08017950
 8017258:	08017185 	.word	0x08017185

0801725c <__sfp>:
 801725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725e:	4607      	mov	r7, r0
 8017260:	f7ff ffac 	bl	80171bc <__sfp_lock_acquire>
 8017264:	4b1e      	ldr	r3, [pc, #120]	; (80172e0 <__sfp+0x84>)
 8017266:	681e      	ldr	r6, [r3, #0]
 8017268:	69b3      	ldr	r3, [r6, #24]
 801726a:	b913      	cbnz	r3, 8017272 <__sfp+0x16>
 801726c:	4630      	mov	r0, r6
 801726e:	f7ff ffbd 	bl	80171ec <__sinit>
 8017272:	3648      	adds	r6, #72	; 0x48
 8017274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017278:	3b01      	subs	r3, #1
 801727a:	d503      	bpl.n	8017284 <__sfp+0x28>
 801727c:	6833      	ldr	r3, [r6, #0]
 801727e:	b30b      	cbz	r3, 80172c4 <__sfp+0x68>
 8017280:	6836      	ldr	r6, [r6, #0]
 8017282:	e7f7      	b.n	8017274 <__sfp+0x18>
 8017284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017288:	b9d5      	cbnz	r5, 80172c0 <__sfp+0x64>
 801728a:	4b16      	ldr	r3, [pc, #88]	; (80172e4 <__sfp+0x88>)
 801728c:	60e3      	str	r3, [r4, #12]
 801728e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017292:	6665      	str	r5, [r4, #100]	; 0x64
 8017294:	f000 f847 	bl	8017326 <__retarget_lock_init_recursive>
 8017298:	f7ff ff96 	bl	80171c8 <__sfp_lock_release>
 801729c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80172a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80172a4:	6025      	str	r5, [r4, #0]
 80172a6:	61a5      	str	r5, [r4, #24]
 80172a8:	2208      	movs	r2, #8
 80172aa:	4629      	mov	r1, r5
 80172ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80172b0:	f7ff fc54 	bl	8016b5c <memset>
 80172b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80172b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80172bc:	4620      	mov	r0, r4
 80172be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172c0:	3468      	adds	r4, #104	; 0x68
 80172c2:	e7d9      	b.n	8017278 <__sfp+0x1c>
 80172c4:	2104      	movs	r1, #4
 80172c6:	4638      	mov	r0, r7
 80172c8:	f7ff ff62 	bl	8017190 <__sfmoreglue>
 80172cc:	4604      	mov	r4, r0
 80172ce:	6030      	str	r0, [r6, #0]
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d1d5      	bne.n	8017280 <__sfp+0x24>
 80172d4:	f7ff ff78 	bl	80171c8 <__sfp_lock_release>
 80172d8:	230c      	movs	r3, #12
 80172da:	603b      	str	r3, [r7, #0]
 80172dc:	e7ee      	b.n	80172bc <__sfp+0x60>
 80172de:	bf00      	nop
 80172e0:	08017950 	.word	0x08017950
 80172e4:	ffff0001 	.word	0xffff0001

080172e8 <_fwalk_reent>:
 80172e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172ec:	4606      	mov	r6, r0
 80172ee:	4688      	mov	r8, r1
 80172f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80172f4:	2700      	movs	r7, #0
 80172f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80172fa:	f1b9 0901 	subs.w	r9, r9, #1
 80172fe:	d505      	bpl.n	801730c <_fwalk_reent+0x24>
 8017300:	6824      	ldr	r4, [r4, #0]
 8017302:	2c00      	cmp	r4, #0
 8017304:	d1f7      	bne.n	80172f6 <_fwalk_reent+0xe>
 8017306:	4638      	mov	r0, r7
 8017308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801730c:	89ab      	ldrh	r3, [r5, #12]
 801730e:	2b01      	cmp	r3, #1
 8017310:	d907      	bls.n	8017322 <_fwalk_reent+0x3a>
 8017312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017316:	3301      	adds	r3, #1
 8017318:	d003      	beq.n	8017322 <_fwalk_reent+0x3a>
 801731a:	4629      	mov	r1, r5
 801731c:	4630      	mov	r0, r6
 801731e:	47c0      	blx	r8
 8017320:	4307      	orrs	r7, r0
 8017322:	3568      	adds	r5, #104	; 0x68
 8017324:	e7e9      	b.n	80172fa <_fwalk_reent+0x12>

08017326 <__retarget_lock_init_recursive>:
 8017326:	4770      	bx	lr

08017328 <__retarget_lock_acquire_recursive>:
 8017328:	4770      	bx	lr

0801732a <__retarget_lock_release_recursive>:
 801732a:	4770      	bx	lr

0801732c <__swhatbuf_r>:
 801732c:	b570      	push	{r4, r5, r6, lr}
 801732e:	460e      	mov	r6, r1
 8017330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017334:	2900      	cmp	r1, #0
 8017336:	b096      	sub	sp, #88	; 0x58
 8017338:	4614      	mov	r4, r2
 801733a:	461d      	mov	r5, r3
 801733c:	da08      	bge.n	8017350 <__swhatbuf_r+0x24>
 801733e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017342:	2200      	movs	r2, #0
 8017344:	602a      	str	r2, [r5, #0]
 8017346:	061a      	lsls	r2, r3, #24
 8017348:	d410      	bmi.n	801736c <__swhatbuf_r+0x40>
 801734a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801734e:	e00e      	b.n	801736e <__swhatbuf_r+0x42>
 8017350:	466a      	mov	r2, sp
 8017352:	f000 f8c3 	bl	80174dc <_fstat_r>
 8017356:	2800      	cmp	r0, #0
 8017358:	dbf1      	blt.n	801733e <__swhatbuf_r+0x12>
 801735a:	9a01      	ldr	r2, [sp, #4]
 801735c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017364:	425a      	negs	r2, r3
 8017366:	415a      	adcs	r2, r3
 8017368:	602a      	str	r2, [r5, #0]
 801736a:	e7ee      	b.n	801734a <__swhatbuf_r+0x1e>
 801736c:	2340      	movs	r3, #64	; 0x40
 801736e:	2000      	movs	r0, #0
 8017370:	6023      	str	r3, [r4, #0]
 8017372:	b016      	add	sp, #88	; 0x58
 8017374:	bd70      	pop	{r4, r5, r6, pc}
	...

08017378 <__smakebuf_r>:
 8017378:	898b      	ldrh	r3, [r1, #12]
 801737a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801737c:	079d      	lsls	r5, r3, #30
 801737e:	4606      	mov	r6, r0
 8017380:	460c      	mov	r4, r1
 8017382:	d507      	bpl.n	8017394 <__smakebuf_r+0x1c>
 8017384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017388:	6023      	str	r3, [r4, #0]
 801738a:	6123      	str	r3, [r4, #16]
 801738c:	2301      	movs	r3, #1
 801738e:	6163      	str	r3, [r4, #20]
 8017390:	b002      	add	sp, #8
 8017392:	bd70      	pop	{r4, r5, r6, pc}
 8017394:	ab01      	add	r3, sp, #4
 8017396:	466a      	mov	r2, sp
 8017398:	f7ff ffc8 	bl	801732c <__swhatbuf_r>
 801739c:	9900      	ldr	r1, [sp, #0]
 801739e:	4605      	mov	r5, r0
 80173a0:	4630      	mov	r0, r6
 80173a2:	f7ff fc4f 	bl	8016c44 <_malloc_r>
 80173a6:	b948      	cbnz	r0, 80173bc <__smakebuf_r+0x44>
 80173a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173ac:	059a      	lsls	r2, r3, #22
 80173ae:	d4ef      	bmi.n	8017390 <__smakebuf_r+0x18>
 80173b0:	f023 0303 	bic.w	r3, r3, #3
 80173b4:	f043 0302 	orr.w	r3, r3, #2
 80173b8:	81a3      	strh	r3, [r4, #12]
 80173ba:	e7e3      	b.n	8017384 <__smakebuf_r+0xc>
 80173bc:	4b0d      	ldr	r3, [pc, #52]	; (80173f4 <__smakebuf_r+0x7c>)
 80173be:	62b3      	str	r3, [r6, #40]	; 0x28
 80173c0:	89a3      	ldrh	r3, [r4, #12]
 80173c2:	6020      	str	r0, [r4, #0]
 80173c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173c8:	81a3      	strh	r3, [r4, #12]
 80173ca:	9b00      	ldr	r3, [sp, #0]
 80173cc:	6163      	str	r3, [r4, #20]
 80173ce:	9b01      	ldr	r3, [sp, #4]
 80173d0:	6120      	str	r0, [r4, #16]
 80173d2:	b15b      	cbz	r3, 80173ec <__smakebuf_r+0x74>
 80173d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173d8:	4630      	mov	r0, r6
 80173da:	f000 f891 	bl	8017500 <_isatty_r>
 80173de:	b128      	cbz	r0, 80173ec <__smakebuf_r+0x74>
 80173e0:	89a3      	ldrh	r3, [r4, #12]
 80173e2:	f023 0303 	bic.w	r3, r3, #3
 80173e6:	f043 0301 	orr.w	r3, r3, #1
 80173ea:	81a3      	strh	r3, [r4, #12]
 80173ec:	89a0      	ldrh	r0, [r4, #12]
 80173ee:	4305      	orrs	r5, r0
 80173f0:	81a5      	strh	r5, [r4, #12]
 80173f2:	e7cd      	b.n	8017390 <__smakebuf_r+0x18>
 80173f4:	08017185 	.word	0x08017185

080173f8 <__malloc_lock>:
 80173f8:	4801      	ldr	r0, [pc, #4]	; (8017400 <__malloc_lock+0x8>)
 80173fa:	f7ff bf95 	b.w	8017328 <__retarget_lock_acquire_recursive>
 80173fe:	bf00      	nop
 8017400:	24005a88 	.word	0x24005a88

08017404 <__malloc_unlock>:
 8017404:	4801      	ldr	r0, [pc, #4]	; (801740c <__malloc_unlock+0x8>)
 8017406:	f7ff bf90 	b.w	801732a <__retarget_lock_release_recursive>
 801740a:	bf00      	nop
 801740c:	24005a88 	.word	0x24005a88

08017410 <__sread>:
 8017410:	b510      	push	{r4, lr}
 8017412:	460c      	mov	r4, r1
 8017414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017418:	f000 f894 	bl	8017544 <_read_r>
 801741c:	2800      	cmp	r0, #0
 801741e:	bfab      	itete	ge
 8017420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017422:	89a3      	ldrhlt	r3, [r4, #12]
 8017424:	181b      	addge	r3, r3, r0
 8017426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801742a:	bfac      	ite	ge
 801742c:	6563      	strge	r3, [r4, #84]	; 0x54
 801742e:	81a3      	strhlt	r3, [r4, #12]
 8017430:	bd10      	pop	{r4, pc}

08017432 <__swrite>:
 8017432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017436:	461f      	mov	r7, r3
 8017438:	898b      	ldrh	r3, [r1, #12]
 801743a:	05db      	lsls	r3, r3, #23
 801743c:	4605      	mov	r5, r0
 801743e:	460c      	mov	r4, r1
 8017440:	4616      	mov	r6, r2
 8017442:	d505      	bpl.n	8017450 <__swrite+0x1e>
 8017444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017448:	2302      	movs	r3, #2
 801744a:	2200      	movs	r2, #0
 801744c:	f000 f868 	bl	8017520 <_lseek_r>
 8017450:	89a3      	ldrh	r3, [r4, #12]
 8017452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801745a:	81a3      	strh	r3, [r4, #12]
 801745c:	4632      	mov	r2, r6
 801745e:	463b      	mov	r3, r7
 8017460:	4628      	mov	r0, r5
 8017462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017466:	f000 b817 	b.w	8017498 <_write_r>

0801746a <__sseek>:
 801746a:	b510      	push	{r4, lr}
 801746c:	460c      	mov	r4, r1
 801746e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017472:	f000 f855 	bl	8017520 <_lseek_r>
 8017476:	1c43      	adds	r3, r0, #1
 8017478:	89a3      	ldrh	r3, [r4, #12]
 801747a:	bf15      	itete	ne
 801747c:	6560      	strne	r0, [r4, #84]	; 0x54
 801747e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017486:	81a3      	strheq	r3, [r4, #12]
 8017488:	bf18      	it	ne
 801748a:	81a3      	strhne	r3, [r4, #12]
 801748c:	bd10      	pop	{r4, pc}

0801748e <__sclose>:
 801748e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017492:	f000 b813 	b.w	80174bc <_close_r>
	...

08017498 <_write_r>:
 8017498:	b538      	push	{r3, r4, r5, lr}
 801749a:	4d07      	ldr	r5, [pc, #28]	; (80174b8 <_write_r+0x20>)
 801749c:	4604      	mov	r4, r0
 801749e:	4608      	mov	r0, r1
 80174a0:	4611      	mov	r1, r2
 80174a2:	2200      	movs	r2, #0
 80174a4:	602a      	str	r2, [r5, #0]
 80174a6:	461a      	mov	r2, r3
 80174a8:	f7ec fc39 	bl	8003d1e <_write>
 80174ac:	1c43      	adds	r3, r0, #1
 80174ae:	d102      	bne.n	80174b6 <_write_r+0x1e>
 80174b0:	682b      	ldr	r3, [r5, #0]
 80174b2:	b103      	cbz	r3, 80174b6 <_write_r+0x1e>
 80174b4:	6023      	str	r3, [r4, #0]
 80174b6:	bd38      	pop	{r3, r4, r5, pc}
 80174b8:	24005a8c 	.word	0x24005a8c

080174bc <_close_r>:
 80174bc:	b538      	push	{r3, r4, r5, lr}
 80174be:	4d06      	ldr	r5, [pc, #24]	; (80174d8 <_close_r+0x1c>)
 80174c0:	2300      	movs	r3, #0
 80174c2:	4604      	mov	r4, r0
 80174c4:	4608      	mov	r0, r1
 80174c6:	602b      	str	r3, [r5, #0]
 80174c8:	f7ec fc45 	bl	8003d56 <_close>
 80174cc:	1c43      	adds	r3, r0, #1
 80174ce:	d102      	bne.n	80174d6 <_close_r+0x1a>
 80174d0:	682b      	ldr	r3, [r5, #0]
 80174d2:	b103      	cbz	r3, 80174d6 <_close_r+0x1a>
 80174d4:	6023      	str	r3, [r4, #0]
 80174d6:	bd38      	pop	{r3, r4, r5, pc}
 80174d8:	24005a8c 	.word	0x24005a8c

080174dc <_fstat_r>:
 80174dc:	b538      	push	{r3, r4, r5, lr}
 80174de:	4d07      	ldr	r5, [pc, #28]	; (80174fc <_fstat_r+0x20>)
 80174e0:	2300      	movs	r3, #0
 80174e2:	4604      	mov	r4, r0
 80174e4:	4608      	mov	r0, r1
 80174e6:	4611      	mov	r1, r2
 80174e8:	602b      	str	r3, [r5, #0]
 80174ea:	f7ec fc40 	bl	8003d6e <_fstat>
 80174ee:	1c43      	adds	r3, r0, #1
 80174f0:	d102      	bne.n	80174f8 <_fstat_r+0x1c>
 80174f2:	682b      	ldr	r3, [r5, #0]
 80174f4:	b103      	cbz	r3, 80174f8 <_fstat_r+0x1c>
 80174f6:	6023      	str	r3, [r4, #0]
 80174f8:	bd38      	pop	{r3, r4, r5, pc}
 80174fa:	bf00      	nop
 80174fc:	24005a8c 	.word	0x24005a8c

08017500 <_isatty_r>:
 8017500:	b538      	push	{r3, r4, r5, lr}
 8017502:	4d06      	ldr	r5, [pc, #24]	; (801751c <_isatty_r+0x1c>)
 8017504:	2300      	movs	r3, #0
 8017506:	4604      	mov	r4, r0
 8017508:	4608      	mov	r0, r1
 801750a:	602b      	str	r3, [r5, #0]
 801750c:	f7ec fc3f 	bl	8003d8e <_isatty>
 8017510:	1c43      	adds	r3, r0, #1
 8017512:	d102      	bne.n	801751a <_isatty_r+0x1a>
 8017514:	682b      	ldr	r3, [r5, #0]
 8017516:	b103      	cbz	r3, 801751a <_isatty_r+0x1a>
 8017518:	6023      	str	r3, [r4, #0]
 801751a:	bd38      	pop	{r3, r4, r5, pc}
 801751c:	24005a8c 	.word	0x24005a8c

08017520 <_lseek_r>:
 8017520:	b538      	push	{r3, r4, r5, lr}
 8017522:	4d07      	ldr	r5, [pc, #28]	; (8017540 <_lseek_r+0x20>)
 8017524:	4604      	mov	r4, r0
 8017526:	4608      	mov	r0, r1
 8017528:	4611      	mov	r1, r2
 801752a:	2200      	movs	r2, #0
 801752c:	602a      	str	r2, [r5, #0]
 801752e:	461a      	mov	r2, r3
 8017530:	f7ec fc38 	bl	8003da4 <_lseek>
 8017534:	1c43      	adds	r3, r0, #1
 8017536:	d102      	bne.n	801753e <_lseek_r+0x1e>
 8017538:	682b      	ldr	r3, [r5, #0]
 801753a:	b103      	cbz	r3, 801753e <_lseek_r+0x1e>
 801753c:	6023      	str	r3, [r4, #0]
 801753e:	bd38      	pop	{r3, r4, r5, pc}
 8017540:	24005a8c 	.word	0x24005a8c

08017544 <_read_r>:
 8017544:	b538      	push	{r3, r4, r5, lr}
 8017546:	4d07      	ldr	r5, [pc, #28]	; (8017564 <_read_r+0x20>)
 8017548:	4604      	mov	r4, r0
 801754a:	4608      	mov	r0, r1
 801754c:	4611      	mov	r1, r2
 801754e:	2200      	movs	r2, #0
 8017550:	602a      	str	r2, [r5, #0]
 8017552:	461a      	mov	r2, r3
 8017554:	f7ec fbc6 	bl	8003ce4 <_read>
 8017558:	1c43      	adds	r3, r0, #1
 801755a:	d102      	bne.n	8017562 <_read_r+0x1e>
 801755c:	682b      	ldr	r3, [r5, #0]
 801755e:	b103      	cbz	r3, 8017562 <_read_r+0x1e>
 8017560:	6023      	str	r3, [r4, #0]
 8017562:	bd38      	pop	{r3, r4, r5, pc}
 8017564:	24005a8c 	.word	0x24005a8c

08017568 <_init>:
 8017568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801756a:	bf00      	nop
 801756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801756e:	bc08      	pop	{r3}
 8017570:	469e      	mov	lr, r3
 8017572:	4770      	bx	lr

08017574 <_fini>:
 8017574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017576:	bf00      	nop
 8017578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801757a:	bc08      	pop	{r3}
 801757c:	469e      	mov	lr, r3
 801757e:	4770      	bx	lr
